digraph  {
n0 [cluster="HangFire.SqlServer.IPersistentJobQueue.Dequeue(string[], System.Threading.CancellationToken)", label="Entry HangFire.SqlServer.IPersistentJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="26-26"];
n1 [cluster="HangFire.SqlServer.IPersistentJobQueue.Dequeue(string[], System.Threading.CancellationToken)", label="Exit HangFire.SqlServer.IPersistentJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="26-26"];
n2 [cluster="HangFire.SqlServer.IPersistentJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", label="Entry HangFire.SqlServer.IPersistentJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", span="27-27"];
n3 [cluster="HangFire.SqlServer.IPersistentJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", label="Exit HangFire.SqlServer.IPersistentJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", span="27-27"];
m1_8 [cluster="HangFire.Storage.IStorageConnection.GetJobParameter(string, string)", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.GetJobParameter(string, string)", span="33-33"];
m1_9 [cluster="HangFire.Storage.IStorageConnection.GetJobParameter(string, string)", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.GetJobParameter(string, string)", span="33-33"];
m1_4 [cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30"];
m1_5 [cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30"];
m1_14 [cluster="HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="38-38"];
m1_15 [cluster="HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="38-38"];
m1_0 [cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="26-26"];
m1_1 [cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="26-26"];
m1_20 [cluster="HangFire.Storage.IStorageConnection.Heartbeat(string)", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.Heartbeat(string)", span="42-42"];
m1_21 [cluster="HangFire.Storage.IStorageConnection.Heartbeat(string)", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.Heartbeat(string)", span="42-42"];
m1_10 [cluster="HangFire.Storage.IStorageConnection.AcquireJobLock(string)", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.AcquireJobLock(string)", span="35-35"];
m1_11 [cluster="HangFire.Storage.IStorageConnection.AcquireJobLock(string)", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.AcquireJobLock(string)", span="35-35"];
m1_22 [cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="43-43"];
m1_23 [cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="43-43"];
m1_12 [cluster="HangFire.Storage.IStorageConnection.GetJobData(string)", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.GetJobData(string)", span="36-36"];
m1_13 [cluster="HangFire.Storage.IStorageConnection.GetJobData(string)", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.GetJobData(string)", span="36-36"];
m1_18 [cluster="HangFire.Storage.IStorageConnection.RemoveServer(string)", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.RemoveServer(string)", span="41-41"];
m1_19 [cluster="HangFire.Storage.IStorageConnection.RemoveServer(string)", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.RemoveServer(string)", span="41-41"];
m1_16 [cluster="HangFire.Storage.IStorageConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="40-40"];
m1_17 [cluster="HangFire.Storage.IStorageConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="40-40"];
m1_2 [cluster="HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="28-28"];
m1_3 [cluster="HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="28-28"];
m1_6 [cluster="HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", file="IStorageConnection.cs", label="Entry HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="32-32"];
m1_7 [cluster="HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", file="IStorageConnection.cs", label="Exit HangFire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="32-32"];
m2_5 [cluster="System.TimeSpan.FromSeconds(double)", file="MessageQueueJobQueue.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m2_6 [cluster="System.TimeSpan.FromMinutes(double)", file="MessageQueueJobQueue.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m2_0 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="MessageQueueJobQueue.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m2_4 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="MessageQueueJobQueue.cs", label="Exit HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m2_7 [file="MessageQueueJobQueue.cs", label="HangFire.SqlServer.SqlServerStorageOptions", span=""];
m3_0 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string)", file="MessageQueueProcessingJob.cs", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string)", span="4-4"];
m3_4 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string)", file="MessageQueueProcessingJob.cs", label="Exit HangFire.Storage.InvocationData.InvocationData(string, string, string)", span="4-4"];
m4_0 [cluster="Hangfire.Client.IJobCreator.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="Program.cs", label="Entry Hangfire.Client.IJobCreator.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="24-24"];
m4_1 [cluster="Hangfire.Client.IJobCreator.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="Program.cs", label="Exit Hangfire.Client.IJobCreator.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="24-24"];
m5_3 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="36-36"];
m5_4 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="connection == null", span="38-38"];
m5_5 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="throw new ArgumentNullException(''connection'');", span="38-38"];
m5_15 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="var queueIndex = 0", span="54-54"];
m5_146 [cluster="int.ToString(System.IFormatProvider)", file="RedisConnection.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m5_12 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="InitialState = initialState", span="44-44"];
m5_26 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="RedisConnection.cs", label="return new RedisProcessingJob(this, jobId, queueName);", prediction=0, span="105-105"];
m5_18 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="queueName = queues[queueIndex]", span="61-61"];
m5_22 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="jobId = Redis.BlockingPopAndPushItemBetweenLists(\r\n                        queueKey,\r\n                        fetchedKey,\r\n                        FetchTimeout)", span="68-71"];
m5_23 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="jobId = Redis.PopAndPushItemBetweenLists(\r\n                        queueKey, fetchedKey)", span="75-76"];
m5_25 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''Fetched'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="96-99"];
m5_17 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="Hangfire.Client.CreateContext", span=""];
m5_19 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="var queueKey = RedisStorage.Prefix + String.Format(''queue:{0}'', queueName)", span="63-63"];
m5_20 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="var fetchedKey = RedisStorage.Prefix + String.Format(''queue:{0}:dequeued'', queueName)", span="64-64"];
m5_21 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="queueIndex == 0", span="66-66"];
m5_24 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="jobId == null", span="79-79"];
m5_13 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="Items = new Dictionary<string, object>()", span="46-46"];
m5_16 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m5_14 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="Exit Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="36-36"];
m5_27 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="50-50"];
m5_59 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RedisConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m5_96 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="RedisConnection.cs", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24"];
m5_204 [cluster="Unk.FromNullableStringTimestamp", file="RedisConnection.cs", label="Entry Unk.FromNullableStringTimestamp", span=""];
m5_65 [cluster="Unk.SetRangeInHash", file="RedisConnection.cs", label="Entry Unk.SetRangeInHash", span=""];
m5_38 [cluster="System.TimeSpan.FromMinutes(double)", file="RedisConnection.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m5_94 [cluster="Unk.GetAllEntriesFromHash", file="RedisConnection.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m5_203 [cluster="Unk.FromStringTimestamp", file="RedisConnection.cs", label="Entry Unk.FromStringTimestamp", span=""];
m5_171 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="298-298"];
m5_172 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var serverNames = Redis.GetAllItemsFromSet(RedisStorage.Prefix + ''servers'')", span="300-300"];
m5_175 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var pipeline = Redis.CreatePipeline()", span="305-305"];
m5_184 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="RemoveServer(Redis, heartbeat.Key)", span="333-333"];
m5_173 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="301-301"];
m5_176 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label=serverNames, span="307-307"];
m5_174 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var utcNow = DateTime.UtcNow", span="303-303"];
m5_178 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", span="311-319"];
m5_179 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="pipeline.Flush()", span="322-322"];
m5_183 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="utcNow > maxTime.Add(timeOut)", span="331-331"];
m5_182 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="328-329"];
m5_185 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="removedServerCount++", span="334-334"];
m5_180 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var removedServerCount = 0", span="325-325"];
m5_181 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label=heartbeats, span="326-326"];
m5_177 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var name = serverName", span="309-309"];
m5_186 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="return removedServerCount;", span="338-338"];
m5_187 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="298-298"];
m5_33 [cluster="Unk.SetEntryInHash", file="RedisConnection.cs", label="Entry Unk.SetEntryInHash", span=""];
m5_11 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="Job = job", span="43-43"];
m5_141 [cluster="Unk.AddItemToSet", file="RedisConnection.cs", label="Entry Unk.AddItemToSet", span=""];
m5_29 [cluster="string.Format(string, object)", file="RedisConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m5_120 [cluster="Unk.RemoveEntryFromHash", file="RedisConnection.cs", label="Entry Unk.RemoveEntryFromHash", span=""];
m5_30 [cluster="Unk.BlockingPopAndPushItemBetweenLists", file="RedisConnection.cs", label="Entry Unk.BlockingPopAndPushItemBetweenLists", span=""];
m5_168 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.Heartbeat(string)", span="290-290"];
m5_169 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="292-295"];
m5_170 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.Heartbeat(string)", span="290-290"];
m5_167 [cluster="Unk.RemoveEntry", file="RedisConnection.cs", label="Entry Unk.RemoveEntry", span=""];
m5_157 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId)))", span="282-284"];
m5_154 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="274-274"];
m5_155 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="var transaction = redis.CreateTransaction()", span="276-276"];
m5_156 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId))", span="278-280"];
m5_158 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="transaction.Commit()", span="286-286"];
m5_159 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="274-274"];
m5_7 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="throw new ArgumentNullException(''job'');", span="39-39"];
m5_8 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="initialState == null", span="40-40"];
m5_9 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="throw new ArgumentNullException(''initialState'');", span="40-40"];
m5_102 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="208-208"];
m5_103 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs", label="return Redis.GetValueFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name);", span="210-212"];
m5_104 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="208-208"];
m5_69 [cluster="Unk.ExpireEntryIn", file="RedisConnection.cs", label="Entry Unk.ExpireEntryIn", span=""];
m5_190 [cluster="Unk.Flush", file="RedisConnection.cs", label="Entry Unk.Flush", span=""];
m5_56 [cluster="System.Guid.ToString()", file="RedisConnection.cs", label="Entry System.Guid.ToString()", span="0-0"];
m5_28 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="RedisConnection.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m5_10 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="Connection = connection", span="42-42"];
m5_205 [cluster="Unk.Add", file="RedisConnection.cs", label="Entry Unk.Add", span=""];
m5_193 [cluster="System.DateTime.Add(System.TimeSpan)", file="RedisConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m5_129 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="242-242"];
m5_130 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="var transaction = Redis.CreateTransaction()", span="244-244"];
m5_131 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="246-247"];
m5_132 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="249-255"];
m5_135 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="260-262"];
m5_136 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.Commit()", span="265-265"];
m5_133 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="context.Queues", span="257-257"];
m5_134 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="var queue1 = queue", span="259-259"];
m5_137 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="242-242"];
m5_145 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m5_202 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="RedisConnection.cs", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
m5_58 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="RedisConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0"];
m5_150 [cluster="Unk.AddItemToList", file="RedisConnection.cs", label="Entry Unk.AddItemToList", span=""];
m5_110 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Checked''))", span="227-229"];
m5_107 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="var transaction = Redis.CreateTransaction()", span="217-217"];
m5_106 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", span="215-215"];
m5_108 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    id,\r\n                    -1))", span="219-222"];
m5_109 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Fetched''))", span="224-226"];
m5_111 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="transaction.Commit()", span="231-231"];
m5_112 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", span="215-215"];
m5_0 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="33-33"];
m5_1 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs", label="Redis = redis", span="35-35"];
m5_2 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="33-33"];
m5_6 [cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="RedisConnection.cs", label="job == null", span="39-39"];
m5_191 [cluster="System.DateTime.DateTime(long)", file="RedisConnection.cs", label="Entry System.DateTime.DateTime(long)", span="0-0"];
m5_163 [cluster="Unk.RemoveItemFromSet", file="RedisConnection.cs", label="Entry Unk.RemoveItemFromSet", span=""];
m5_151 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RemoveServer(string)", span="269-269"];
m5_152 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs", label="RemoveServer(Redis, serverId)", span="271-271"];
m5_153 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RemoveServer(string)", span="269-269"];
m5_192 [cluster="System.Math.Max(long, long)", file="RedisConnection.cs", label="Entry System.Math.Max(long, long)", span="0-0"];
m5_70 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.GetJobData(string)", span="149-149"];
m5_71 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="var storedData = Redis.GetAllEntriesFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id))", span="151-152"];
m5_72 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="storedData.Count == 0", span="154-154"];
m5_78 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="storedData.ContainsKey(''Type'')", span="161-161"];
m5_79 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="type = storedData[''Type'']", span="163-163"];
m5_80 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="storedData.ContainsKey(''Method'')", span="165-165"];
m5_81 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="method = storedData[''Method'']", span="167-167"];
m5_82 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="storedData.ContainsKey(''ParameterTypes'')", span="169-169"];
m5_83 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="parameterTypes = storedData[''ParameterTypes'']", span="171-171"];
m5_84 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="storedData.ContainsKey(''Arguments'')", span="173-173"];
m5_85 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="arguments = storedData[''Arguments'']", span="175-175"];
m5_92 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = storedData.ContainsKey(''State'') ? storedData[''State''] : null,\r\n                LoadException = loadException\r\n            };", span="192-197"];
m5_74 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="string type = null", span="156-156"];
m5_75 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="string method = null", span="157-157"];
m5_76 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="string parameterTypes = null", span="158-158"];
m5_77 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="string arguments = null", span="159-159"];
m5_86 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="Job job = null", span="178-178"];
m5_87 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="JobLoadException loadException = null", span="179-179"];
m5_73 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="return null;", span="154-154"];
m5_88 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="var invocationData = new InvocationData(type, method, parameterTypes, arguments)", span="181-181"];
m5_89 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="job = invocationData.Deserialize()", span="185-185"];
m5_91 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="loadException = ex", span="189-189"];
m5_90 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label=JobLoadException, span="187-187"];
m5_93 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.GetJobData(string)", span="149-149"];
m5_57 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="RedisConnection.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m5_160 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="278-280"];
m5_67 [cluster="lambda expression", file="RedisConnection.cs", label="x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="138-140"];
m5_63 [cluster="lambda expression", file="RedisConnection.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters)", span="134-136"];
m5_114 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    id,\r\n                    -1)", span="219-222"];
m5_118 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Fetched'')", span="224-226"];
m5_122 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Checked'')", span="227-229"];
m5_143 [cluster="lambda expression", file="RedisConnection.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        })", span="249-255"];
m5_148 [cluster="lambda expression", file="RedisConnection.cs", label="x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1)", span="260-262"];
m5_165 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="282-284"];
m5_62 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="134-136"];
m5_66 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="138-140"];
m5_113 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="219-222"];
m5_117 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="224-226"];
m5_121 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="227-229"];
m5_139 [cluster="lambda expression", file="RedisConnection.cs", label="x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId)", span="246-247"];
m5_138 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="246-247"];
m5_142 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="249-255"];
m5_147 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="260-262"];
m5_161 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId)", span="278-280"];
m5_200 [cluster="lambda expression", file="RedisConnection.cs", label="heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1])))", span="315-319"];
m5_194 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="312-314"];
m5_199 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="315-319"];
m5_68 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="138-140"];
m5_64 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="134-136"];
m5_115 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="219-222"];
m5_119 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="224-226"];
m5_123 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="227-229"];
m5_144 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="249-255"];
m5_149 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="260-262"];
m5_164 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="282-284"];
m5_166 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="282-284"];
m5_140 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="246-247"];
m5_162 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="278-280"];
m5_201 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="315-319"];
m5_195 [cluster="lambda expression", file="RedisConnection.cs", label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="312-314"];
m5_196 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="312-314"];
m5_32 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="RedisConnection.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m5_128 [cluster="Unk.FirstOrDefault", file="RedisConnection.cs", label="Entry Unk.FirstOrDefault", span=""];
m5_40 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="115-115"];
m5_49 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="var transaction = Redis.CreateTransaction()", span="132-132"];
m5_48 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="storedParameters.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="130-130"];
m5_50 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters))", span="134-136"];
m5_51 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn))", span="138-140"];
m5_52 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="transaction.Commit()", span="143-143"];
m5_43 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="var storedParameters = new Dictionary<string, string>(parameters)", span="125-125"];
m5_47 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="storedParameters.Add(''Arguments'', invocationData.Arguments)", span="129-129"];
m5_41 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="var jobId = Guid.NewGuid().ToString()", span="120-120"];
m5_53 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="return jobId;", span="146-146"];
m5_42 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="var invocationData = InvocationData.Serialize(job)", span="122-122"];
m5_44 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="storedParameters.Add(''Type'', invocationData.Type)", span="126-126"];
m5_45 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="storedParameters.Add(''Method'', invocationData.Method)", span="127-127"];
m5_46 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="storedParameters.Add(''ParameterTypes'', invocationData.ParameterTypes)", span="128-128"];
m5_54 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="115-115"];
m5_35 [cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="108-108"];
m5_36 [cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs", label="return Redis.AcquireLock(\r\n                RedisStorage.Prefix + String.Format(''job:{0}:state-lock'', jobId),\r\n                TimeSpan.FromMinutes(1));", span="110-112"];
m5_37 [cluster="HangFire.Redis.RedisConnection.AcquireJobLock(string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.AcquireJobLock(string)", span="108-108"];
m5_189 [cluster="Unk.CreatePipeline", file="RedisConnection.cs", label="Entry Unk.CreatePipeline", span=""];
m5_99 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="200-200"];
m5_100 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name,\r\n                value)", span="202-205"];
m5_101 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="200-200"];
m5_116 [cluster="Unk.RemoveItemFromList", file="RedisConnection.cs", label="Entry Unk.RemoveItemFromList", span=""];
m5_55 [cluster="System.Guid.NewGuid()", file="RedisConnection.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m5_105 [cluster="Unk.GetValueFromHash", file="RedisConnection.cs", label="Entry Unk.GetValueFromHash", span=""];
m5_61 [cluster="Unk.Commit", file="RedisConnection.cs", label="Entry Unk.Commit", span=""];
m5_188 [cluster="Unk.GetAllItemsFromSet", file="RedisConnection.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m5_98 [cluster="HangFire.Storage.JobData.JobData()", file="RedisConnection.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m5_97 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="RedisConnection.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m5_197 [cluster="Unk.Format", file="RedisConnection.cs", label="Entry Unk.Format", span=""];
m5_198 [cluster="Unk.GetValuesFromHash", file="RedisConnection.cs", label="Entry Unk.GetValuesFromHash", span=""];
m5_127 [cluster="Unk.GetRangeFromSortedSetByLowestScore", file="RedisConnection.cs", label="Entry Unk.GetRangeFromSortedSetByLowestScore", span=""];
m5_60 [cluster="Unk.QueueCommand", file="RedisConnection.cs", label="Entry Unk.QueueCommand", span=""];
m5_31 [cluster="Unk.PopAndPushItemBetweenLists", file="RedisConnection.cs", label="Entry Unk.PopAndPushItemBetweenLists", span=""];
m5_34 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", span="25-25"];
m5_39 [cluster="Unk.AcquireLock", file="RedisConnection.cs", label="Entry Unk.AcquireLock", span=""];
m5_124 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="235-235"];
m5_125 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs", label="return Redis.GetRangeFromSortedSetByLowestScore(\r\n                RedisStorage.Prefix + key, fromScore, toScore, 0, 1)\r\n                .FirstOrDefault();", span="237-239"];
m5_126 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="235-235"];
m5_95 [cluster="Unk.ContainsKey", file="RedisConnection.cs", label="Entry Unk.ContainsKey", span=""];
m5_206 [file="RedisConnection.cs", label="HangFire.Redis.RedisConnection", span=""];
m5_207 [file="RedisConnection.cs", label=jobId, span=""];
m5_209 [file="RedisConnection.cs", label="System.TimeSpan", span=""];
m5_208 [file="RedisConnection.cs", label=storedParameters, span=""];
m5_210 [file="RedisConnection.cs", label=string, span=""];
m5_211 [file="RedisConnection.cs", label=string, span=""];
m5_212 [file="RedisConnection.cs", label=string, span=""];
m5_213 [file="RedisConnection.cs", label="HangFire.Server.ServerContext", span=""];
m5_214 [file="RedisConnection.cs", label=queue1, span=""];
m5_215 [file="RedisConnection.cs", label=string, span=""];
m5_216 [file="RedisConnection.cs", label=name, span=""];
m5_217 [file="RedisConnection.cs", label=heartbeats, span=""];
m6_10 [cluster="System.TimeSpan.FromSeconds(double)", file="RedisProcessingJob.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m6_11 [cluster="System.TimeSpan.FromMinutes(double)", file="RedisProcessingJob.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m6_12 [cluster="System.TimeSpan.FromHours(double)", file="RedisProcessingJob.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m6_0 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25"];
m6_2 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs", label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="28-28"];
m6_3 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs", label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", span="29-29"];
m6_4 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs", label="JobExpirationCheckInterval = TimeSpan.FromHours(1)", span="30-30"];
m6_7 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs", label="DashboardJobListLimit = 50000", span="33-33"];
m6_8 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs", label="TransactionTimeout = TimeSpan.FromMinutes(1)", span="34-34"];
m6_9 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RedisProcessingJob.cs", label="Exit Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25"];
m6_13 [file="RedisProcessingJob.cs", label="Hangfire.SqlServer.SqlServerStorageOptions", span=""];
m7_39 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="54-54"];
m7_41 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs", label="Assert.Equal(JobId, processingJob.JobId)", span="58-58"];
m7_42 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs", label="Assert.Equal(Queue, processingJob.Queue)", span="59-59"];
m7_43 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RedisProcessingJobFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="54-54"];
m7_19 [cluster="Unk.>", file="RedisProcessingJobFacts.cs", label="Entry Unk.>", span=""];
m7_32 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RedisProcessingJobFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="45-45"];
m7_34 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RedisProcessingJobFacts.cs", label="Assert.Equal(''queue'', exception.ParamName)", span="50-50"];
m7_35 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RedisProcessingJobFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="45-45"];
m7_25 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RedisProcessingJobFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="36-36"];
m7_27 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RedisProcessingJobFacts.cs", label="Assert.Equal(''jobId'', exception.ParamName)", span="41-41"];
m7_28 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RedisProcessingJobFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="36-36"];
m7_44 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", file="RedisProcessingJobFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", span="72-72"];
m7_57 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", file="RedisProcessingJobFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", span="72-72"];
m7_51 [cluster="Unk.Verify", file="RedisProcessingJobFacts.cs", label="Entry Unk.Verify", span=""];
m7_15 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RedisProcessingJobFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="27-27"];
m7_18 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RedisProcessingJobFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="27-27"];
m7_8 [cluster="Unk.Setup", file="RedisProcessingJobFacts.cs", label="Entry Unk.Setup", span=""];
m7_55 [cluster="Unk.Commit", file="RedisProcessingJobFacts.cs", label="Entry Unk.Commit", span=""];
m7_50 [cluster="HangFire.Redis.RedisProcessingJob.Dispose()", file="RedisProcessingJobFacts.cs", label="Entry HangFire.Redis.RedisProcessingJob.Dispose()", span="40-40"];
m7_45 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RedisProcessingJobFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", span="63-63"];
m7_49 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RedisProcessingJobFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", span="63-63"];
m7_20 [cluster="Unk.Equal", file="RedisProcessingJobFacts.cs", label="Entry Unk.Equal", span=""];
m7_9 [cluster="Unk.Returns", file="RedisProcessingJobFacts.cs", label="Entry Unk.Returns", span=""];
m7_52 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="69-69"];
m7_11 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="21-21"];
m7_13 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="21-21"];
m7_21 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="30-30"];
m7_23 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="30-30"];
m7_29 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="39-39"];
m7_31 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="39-39"];
m7_36 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Entry lambda expression", span="48-48"];
m7_38 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="48-48"];
m7_54 [cluster="lambda expression", file="RedisProcessingJobFacts.cs", label="Exit lambda expression", span="69-69"];
m7_24 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", file="RedisProcessingJobFacts.cs", label="Entry HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", span="25-25"];
m7_6 [cluster="Mock<IRedisClient>.cstr", file="RedisProcessingJobFacts.cs", label="Entry Mock<IRedisClient>.cstr", span=""];
m7_10 [cluster="RedisConnection.cstr", file="RedisProcessingJobFacts.cs", label="Entry RedisConnection.cstr", span=""];
m7_14 [cluster="Unk.CreateTransaction", file="RedisProcessingJobFacts.cs", label="Entry Unk.CreateTransaction", span=""];
m7_7 [cluster="Mock<IRedisTransaction>.cstr", file="RedisProcessingJobFacts.cs", label="Entry Mock<IRedisTransaction>.cstr", span=""];
m7_0 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RedisProcessingJobFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", span="16-16"];
m7_5 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RedisProcessingJobFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", span="16-16"];
m7_58 [file="RedisProcessingJobFacts.cs", label="HangFire.Redis.Tests.RedisProcessingJobFacts", span=""];
m8_8 [cluster="Unk.OnFeatureStart", file="SqlServerConnection.cs", label="Entry Unk.OnFeatureStart", span=""];
m8_91 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="SqlServerConnection.cs", label="testRunner.Then(''the job should have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="204-204"];
m8_92 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="SqlServerConnection.cs", label="this.ScenarioCleanup()", span="206-206"];
m8_94 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="HangFire.Tests.Server.JobFetcherFeature", span=""];
m8_96 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="191-196"];
m8_97 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="198-204"];
m8_93 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", span="192-192"];
m8_95 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''context'');", span="189-189"];
m8_98 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="186-186"];
m8_25 [cluster="Unk.OnScenarioStart", file="SqlServerConnection.cs", label="Entry Unk.OnScenarioStart", span=""];
m8_76 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", span="171-171"];
m8_77 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should listen only specified queue'', ((string[])(null)))", span="173-173"];
m8_79 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs", label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="177-177"];
m8_81 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="181-181"];
m8_78 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs", label="this.ScenarioSetup(scenarioInfo)", span="175-175"];
m8_80 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs", label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="179-179"];
m8_82 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="SqlServerConnection.cs", label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="183-183"];
m8_29 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="parameters == null", span="71-71"];
m8_99 [cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m8_0 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", span="34-34"];
m8_3 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", color=green, community=0, file="SqlServerConnection.cs", label="connection == null", prediction=1, span="37-37"];
m8_4 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''connection'');", span="37-37"];
m8_26 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m8_27 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", color=green, community=0, file="SqlServerConnection.cs", label="testRunner.CollectScenarioErrors()", prediction=2, span="68-68"];
m8_32 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", color=green, community=0, file="SqlServerConnection.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=3, span="79-79"];
m8_33 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", color=green, community=0, file="SqlServerConnection.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=3, span="81-81"];
m8_34 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", color=green, community=0, file="SqlServerConnection.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=3, span="83-83"];
m8_35 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", color=green, community=0, file="SqlServerConnection.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=3, span="85-85"];
m8_37 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", color=green, community=0, file="SqlServerConnection.cs", label="this.ScenarioCleanup()", prediction=3, span="89-89"];
m8_28 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m8_30 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m8_31 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", color=green, community=0, file="SqlServerConnection.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should return the job payload when it dequeues a job'', ((string[])(null)))", prediction=3, span="77-77"];
m8_38 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m8_41 [cluster="Unk.And", file="SqlServerConnection.cs", label="Entry Unk.And", span=""];
m8_36 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", color=green, community=0, file="SqlServerConnection.cs", label="testRunner.Then(''the fetcher should return the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=9, span="87-87"];
m8_40 [cluster="Unk.Given", file="SqlServerConnection.cs", label="Entry Unk.Given", span=""];
m8_39 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerConnection.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m8_42 [cluster="Unk.When", file="SqlServerConnection.cs", label="Entry Unk.When", span=""];
m8_21 [cluster="string.Format(string, object)", file="SqlServerConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m8_54 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="121-122"];
m8_117 [cluster="System.TimeSpan.Negate()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m8_46 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", color=green, community=0, file="SqlServerConnection.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=3, span="102-102"];
m8_50 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs", label="testRunner.Then(''the queue should not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="110-110"];
m8_51 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs", label="testRunner.But(''the dequeued jobs list should contain it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="112-112"];
m8_52 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs", label="this.ScenarioCleanup()", span="114-114"];
m8_53 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="97-97"];
m8_55 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122"];
m8_57 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs", label="this.ScenarioSetup(scenarioInfo)", span="127-127"];
m8_58 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs", label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="129-129"];
m8_64 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144"];
m8_56 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should not return any job when it tries to dequeue a job from an empty qu'' +\r\n                    ''eue'', ((string[])(null)))", span="124-125"];
m8_61 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs", label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="135-135"];
m8_59 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="131-131"];
m8_60 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="133-133"];
m8_62 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs", label="this.ScenarioCleanup()", span="137-137"];
m8_63 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122"];
m8_65 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should dequeue jobs in the FIFO order'', ((string[])(null)))", span="146-146"];
m8_9 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Dispose()", span="43-43"];
m8_10 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", color=green, community=0, file="SqlServerConnection.cs", label="_connection.Dispose()", prediction=3, span="45-45"];
m8_11 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Dispose()", span="43-43"];
m8_12 [cluster="Unk.Dispose", file="SqlServerConnection.cs", label="Entry Unk.Dispose", span=""];
m8_13 [cluster="Unk.OnFeatureEnd", file="SqlServerConnection.cs", label="Entry Unk.OnFeatureEnd", span=""];
m8_15 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="SqlServerConnection.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49"];
m8_90 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="SqlServerConnection.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="202-202"];
m8_22 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="60-60"];
m8_24 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="60-60"];
m8_85 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="177-177"];
m8_87 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="178-178"];
m8_86 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="toScore < fromScore", span="178-178"];
m8_88 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="180-183"];
m8_89 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="175-175"];
m8_48 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SqlServerConnection.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106"];
m8_20 [cluster="SqlServerDistributedLock.cstr", file="SqlServerConnection.cs", label="Entry SqlServerDistributedLock.cstr", span=""];
m8_7 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", span="34-34"];
m8_45 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", color=green, community=0, file="SqlServerConnection.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should remove the dequeued job from the queue and adds it to the dequeued'' +\r\n                    '' list'', ((string[])(null)))", prediction=12, span="99-100"];
m8_110 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="225-225"];
m8_111 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="timeOut.Duration() != timeOut", span="227-227"];
m8_112 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="229-229"];
m8_113 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="232-234"];
m8_114 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="225-225"];
m8_115 [cluster="System.TimeSpan.Duration()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m8_83 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="175-175"];
m8_84 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="key == null", span="177-177"];
m8_16 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", color=green, community=0, file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", prediction=13, span="35-35"];
m8_17 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="53-53"];
m8_44 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m8_47 [cluster="Unk.Single", file="SqlServerConnection.cs", label="Entry Unk.Single", span=""];
m8_49 [cluster="Unk.Execute", file="SqlServerConnection.cs", label="Entry Unk.Execute", span=""];
m8_69 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="154-154"];
m8_70 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs", label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156"];
m8_72 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs", label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="160-160"];
m8_74 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs", label="this.ScenarioCleanup()", span="164-164"];
m8_71 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs", label="testRunner.Then(''the fetcher should return the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158"];
m8_73 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs", label="testRunner.Then(''the fetcher should return the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162"];
m8_75 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144"];
m8_43 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SqlServerConnection.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m8_18 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs", label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:Job:{0}'', jobId), \r\n                _connection);", span="55-57"];
m8_19 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="53-53"];
m8_116 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m8_6 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnection.cs", label="_connection = connection", span="40-40"];
m8_68 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs", label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="152-152"];
m8_67 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="SqlServerConnection.cs", label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="150-150"];
m8_100 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="207-207"];
m8_101 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="serverId == null", span="209-209"];
m8_103 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="211-213"];
m8_102 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="209-209"];
m8_104 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="207-207"];
m8_66 [cluster="Unk.SingleOrDefault", file="SqlServerConnection.cs", label="Entry Unk.SingleOrDefault", span=""];
m8_105 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="216-216"];
m8_106 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="serverId == null", span="218-218"];
m8_108 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="220-222"];
m8_107 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="218-218"];
m8_109 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="216-216"];
m8_118 [file="SqlServerConnection.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_69 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="65-65"];
m9_288 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="388-388"];
m9_289 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="390-396"];
m9_290 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="388-388"];
m9_421 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="SqlServerConnectionFacts.cs", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
m9_230 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="311-311"];
m9_231 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="313-319"];
m9_232 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="311-311"];
m9_112 [cluster="Unk.ToString", file="SqlServerConnectionFacts.cs", label="Entry Unk.ToString", span=""];
m9_0 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="18-18"];
m9_2 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="18-18"];
m9_345 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="476-476"];
m9_346 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="478-479"];
m9_347 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="476-476"];
m9_23 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="42-42"];
m9_25 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="42-42"];
m9_22 [cluster="SqlServerConnection.cstr", file="SqlServerConnectionFacts.cs", label="Entry SqlServerConnection.cstr", span=""];
m9_365 [cluster="Unk.NotEqual", file="SqlServerConnectionFacts.cs", label="Entry Unk.NotEqual", span=""];
m9_258 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="345-345"];
m9_259 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="347-354"];
m9_260 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="356-365"];
m9_261 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="345-345"];
m9_279 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="381-381"];
m9_280 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="383-384"];
m9_281 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="381-381"];
m9_278 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="175-175"];
m9_127 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="144-144"];
m9_128 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="146-147"];
m9_129 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="144-144"];
m9_304 [cluster="Unk.Execute", file="SqlServerConnectionFacts.cs", label="Entry Unk.Execute", span=""];
m9_14 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m9_114 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m9_58 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="76-76"];
m9_59 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="78-87"];
m9_60 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="76-76"];
m9_207 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="264-264"];
m9_208 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="266-269"];
m9_209 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="271-284"];
m9_210 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="264-264"];
m9_219 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="288-288"];
m9_220 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="290-293"];
m9_221 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="295-307"];
m9_222 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="288-288"];
m9_366 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="503-503"];
m9_367 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="505-506"];
m9_368 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="503-503"];
m9_316 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="186-186"];
m9_3 [cluster="Mock<IPersistentJobQueue>.cstr", file="SqlServerConnectionFacts.cs", label="Entry Mock<IPersistentJobQueue>.cstr", span=""];
m9_113 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30"];
m9_196 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="241-241"];
m9_197 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="243-246"];
m9_198 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="248-260"];
m9_199 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="241-241"];
m9_40 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="56-56"];
m9_41 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="58-62"];
m9_42 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="56-56"];
m9_4 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="24-24"];
m9_7 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="24-24"];
m9_136 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="114-114"];
m9_48 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="48-48"];
m9_161 [cluster="int.ToString()", file="SqlServerConnectionFacts.cs", label="Entry int.ToString()", span="0-0"];
m9_327 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="445-445"];
m9_328 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.NotNull(server.LastHeartbeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="447-472"];
m9_329 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="445-445"];
m9_355 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="483-483"];
m9_356 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues \r\n('Server1', '', getutcdate()),\r\n('Server2', '', getutcdate())''", span="485-489"];
m9_357 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="491-499"];
m9_358 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="483-483"];
m9_26 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="572-572"];
m9_423 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="action(connection)", span="578-578"];
m9_424 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="572-572"];
m9_115 [cluster="System.DateTime.AddDays(double)", file="SqlServerConnectionFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m9_145 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="161-161"];
m9_146 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="163-166"];
m9_147 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n                Assert.Null(result.LoadException);\r\n            })", span="168-188"];
m9_148 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="161-161"];
m9_85 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="106-106"];
m9_87 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="106-106"];
m9_34 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="60-60"];
m9_403 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="225-225"];
m9_251 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="335-335"];
m9_252 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="337-341"];
m9_253 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="335-335"];
m9_315 [cluster="HangFire.Server.ServerContext.ServerContext()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18"];
m9_39 [cluster="Unk.Dequeue", file="SqlServerConnectionFacts.cs", label="Entry Unk.Dequeue", span=""];
m9_408 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="546-560"];
m9_10 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="27-27"];
m9_12 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="27-27"];
m9_19 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="36-36"];
m9_21 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="36-36"];
m9_27 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="44-52"];
m9_32 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="44-52"];
m9_36 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="51-51"];
m9_38 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="51-51"];
m9_44 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="58-62"];
m9_45 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var transaction = connection.CreateWriteTransaction()", span="60-60"];
m9_46 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(transaction)", span="61-61"];
m9_47 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="58-62"];
m9_53 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="68-72"];
m9_54 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var @lock = connection.AcquireJobLock(''1'')", span="70-70"];
m9_55 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(@lock)", span="71-71"];
m9_56 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="68-72"];
m9_61 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="78-87"];
m9_62 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero))", span="80-84"];
m9_66 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero)", span="81-84"];
m9_63 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''job'', exception.ParamName)", span="86-86"];
m9_65 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="81-84"];
m9_64 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="78-87"];
m9_67 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="81-84"];
m9_73 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="93-102"];
m9_74 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero))", span="95-99"];
m9_78 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero)", span="96-99"];
m9_75 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''parameters'', exception.ParamName)", span="101-101"];
m9_77 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="96-99"];
m9_76 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="93-102"];
m9_79 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="96-99"];
m9_81 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="97-97"];
m9_82 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="SampleMethod(''hello'')", span="97-97"];
m9_83 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="97-97"];
m9_89 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="108-140"];
m9_90 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1))", span="110-113"];
m9_93 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="118-118"];
m9_104 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="133-136"];
m9_91 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(jobId)", span="115-115"];
m9_118 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="111-111"];
m9_92 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotEmpty(jobId)", span="116-116"];
m9_94 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="119-119"];
m9_95 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(null, (int?) sqlJob.StateId)", span="120-120"];
m9_96 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(null, (string) sqlJob.StateName)", span="121-121"];
m9_97 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="123-123"];
m9_98 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="invocationData.Arguments = sqlJob.Arguments", span="124-124"];
m9_103 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1))", span="131-131"];
m9_99 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = invocationData.Deserialize()", span="126-126"];
m9_101 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="128-128"];
m9_102 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Hello'', job.Arguments[0])", span="129-129"];
m9_105 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value1'', parameters[''Key1''])", span="138-138"];
m9_121 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="136-136"];
m9_124 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="136-136"];
m9_106 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value2'', parameters[''Key2''])", span="139-139"];
m9_107 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="108-140"];
m9_119 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="SampleMethod(''Hello'')", span="111-111"];
m9_120 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="111-111"];
m9_122 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string) x.Name", span="136-136"];
m9_123 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="136-136"];
m9_125 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string) x.Value", span="136-136"];
m9_126 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="136-136"];
m9_130 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="146-147"];
m9_131 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="146-147"];
m9_134 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetJobData(null)", span="147-147"];
m9_132 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="146-147"];
m9_133 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="147-147"];
m9_135 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="147-147"];
m9_140 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="153-157"];
m9_141 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetJobData(''1'')", span="155-155"];
m9_142 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="156-156"];
m9_143 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="153-157"];
m9_151 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="172-179"];
m9_149 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="168-188"];
m9_150 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="170-170"];
m9_152 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="181-181"];
m9_162 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="170-170"];
m9_153 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result)", span="183-183"];
m9_154 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result.Job)", span="184-184"];
m9_155 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Succeeded'', result.State)", span="185-185"];
m9_156 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="186-186"];
m9_157 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result.LoadException)", span="187-187"];
m9_158 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="168-188"];
m9_163 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="SampleMethod(''wrong'')", span="170-170"];
m9_164 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="170-170"];
m9_170 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="201-208"];
m9_169 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="199-213"];
m9_171 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="210-210"];
m9_172 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(result.LoadException)", span="212-212"];
m9_173 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="199-213"];
m9_178 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="219-225"];
m9_179 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="221-222"];
m9_183 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(null, ''name'', ''value'')", span="222-222"];
m9_180 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''id'', exception.ParamName)", span="224-224"];
m9_182 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="222-222"];
m9_181 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="219-225"];
m9_184 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="222-222"];
m9_189 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="231-237"];
m9_190 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="233-234"];
m9_194 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(''1'', null, ''value'')", span="234-234"];
m9_191 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''name'', exception.ParamName)", span="236-236"];
m9_193 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="234-234"];
m9_192 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="231-237"];
m9_195 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="234-234"];
m9_201 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = sql.Query(arrangeSql).Single()", span="250-250"];
m9_200 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="248-260"];
m9_203 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="253-253"];
m9_204 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="255-257"];
m9_202 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="string jobId = job.Id.ToString()", span="251-251"];
m9_205 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''Value'', parameter.Value)", span="259-259"];
m9_206 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="248-260"];
m9_212 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = sql.Query(arrangeSql).Single()", span="273-273"];
m9_211 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="271-284"];
m9_214 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="276-276"];
m9_215 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="277-277"];
m9_216 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="279-281"];
m9_213 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="string jobId = job.Id.ToString()", span="274-274"];
m9_217 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''AnotherValue'', parameter.Value)", span="283-283"];
m9_218 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="271-284"];
m9_224 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var job = sql.Query(arrangeSql).Single()", span="297-297"];
m9_223 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="295-307"];
m9_226 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.SetJobParameter(jobId, ''Name'', null)", span="300-300"];
m9_227 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="302-304"];
m9_225 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="string jobId = job.Id.ToString()", span="298-298"];
m9_228 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal((string) null, parameter.Value)", span="306-306"];
m9_229 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="295-307"];
m9_233 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="313-319"];
m9_234 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="315-316"];
m9_238 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetJobParameter(null, ''hello'')", span="316-316"];
m9_235 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''id'', exception.ParamName)", span="318-318"];
m9_237 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="316-316"];
m9_236 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="313-319"];
m9_239 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="316-316"];
m9_244 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="325-331"];
m9_245 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="327-328"];
m9_249 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetJobParameter(''1'', null)", span="328-328"];
m9_246 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''name'', exception.ParamName)", span="330-330"];
m9_248 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="328-328"];
m9_247 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="325-331"];
m9_250 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="328-328"];
m9_254 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="337-341"];
m9_255 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var value = connection.GetJobParameter(''1'', ''hello'')", span="339-339"];
m9_256 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(value)", span="340-340"];
m9_257 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="337-341"];
m9_263 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="358-360"];
m9_262 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="356-365"];
m9_264 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="362-362"];
m9_265 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''value'', value)", span="364-364"];
m9_266 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="356-365"];
m9_271 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="371-377"];
m9_272 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="373-374"];
m9_276 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="374-374"];
m9_273 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="376-376"];
m9_275 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="374-374"];
m9_274 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="371-377"];
m9_277 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="374-374"];
m9_282 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="383-384"];
m9_283 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="383-384"];
m9_286 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="384-384"];
m9_284 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="383-384"];
m9_285 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="384-384"];
m9_287 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="384-384"];
m9_291 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="390-396"];
m9_292 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="392-393"];
m9_293 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Null(result)", span="395-395"];
m9_294 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="390-396"];
m9_300 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql)", span="412-412"];
m9_299 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="410-417"];
m9_301 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="414-414"];
m9_302 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''-1.0'', result)", span="416-416"];
m9_303 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="410-417"];
m9_308 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="423-429"];
m9_309 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="425-426"];
m9_313 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(null, new ServerContext())", span="426-426"];
m9_310 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''serverId'', exception.ParamName)", span="428-428"];
m9_312 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="426-426"];
m9_311 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="423-429"];
m9_314 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="426-426"];
m9_320 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="435-441"];
m9_321 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="437-438"];
m9_325 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(''server'', null)", span="438-438"];
m9_322 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''context'', exception.ParamName)", span="440-440"];
m9_324 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="438-438"];
m9_323 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="435-441"];
m9_326 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="438-438"];
m9_330 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="447-472"];
m9_331 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="449-453"];
m9_332 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(''server'', context1)", span="454-454"];
m9_333 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="456-456"];
m9_338 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.AnnounceServer(''server'', context2)", span="468-468"];
m9_339 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="469-469"];
m9_334 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''server'', server.Id)", span="457-457"];
m9_335 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="458-460"];
m9_336 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotNull(server.LastHeartbeat)", span="461-461"];
m9_337 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="463-467"];
m9_340 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''server'', sameServer.Id)", span="470-470"];
m9_341 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Contains(''1000'', sameServer.Data)", span="471-471"];
m9_342 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="447-472"];
m9_348 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="478-479"];
m9_349 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="478-479"];
m9_352 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveServer(null)", span="479-479"];
m9_350 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="478-479"];
m9_351 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="479-479"];
m9_353 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="479-479"];
m9_360 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql)", span="493-493"];
m9_359 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="491-499"];
m9_361 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveServer(''Server1'')", span="495-495"];
m9_362 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="497-497"];
m9_363 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="498-498"];
m9_364 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="491-499"];
m9_369 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="505-506"];
m9_370 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="505-506"];
m9_373 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.Heartbeat(null)", span="506-506"];
m9_371 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="505-506"];
m9_372 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="506-506"];
m9_374 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="506-506"];
m9_381 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(arrangeSql)", span="520-520"];
m9_380 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="518-529"];
m9_382 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.Heartbeat(''server1'')", span="522-522"];
m9_383 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat)", span="524-525"];
m9_384 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.NotEqual(2012, servers[''server1''].Year)", span="527-527"];
m9_387 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="525-525"];
m9_390 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="525-525"];
m9_385 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(2012, servers[''server2''].Year)", span="528-528"];
m9_386 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="518-529"];
m9_388 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(string)x.Id", span="525-525"];
m9_389 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="525-525"];
m9_391 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="(DateTime)x.LastHeartbeat", span="525-525"];
m9_392 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="525-525"];
m9_396 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="535-536"];
m9_397 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="535-536"];
m9_400 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="536-536"];
m9_398 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="535-536"];
m9_399 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Entry lambda expression", span="536-536"];
m9_401 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="536-536"];
m9_409 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="548-554"];
m9_410 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="556-556"];
m9_411 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="558-558"];
m9_412 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''server2'', liveServer.Id)", span="559-559"];
m9_413 [cluster="lambda expression", file="SqlServerConnectionFacts.cs", label="Exit lambda expression", span="546-560"];
m9_88 [cluster="Unk.UseConnections", file="SqlServerConnectionFacts.cs", label="Entry Unk.UseConnections", span=""];
m9_185 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="150-150"];
m9_80 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="116-116"];
m9_416 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="563-563"];
m9_417 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="var sqlConnection = ConnectionUtils.CreateConnection()", span="565-565"];
m9_419 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="action(sqlConnection, connection)", span="568-568"];
m9_420 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="563-563"];
m9_295 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="400-400"];
m9_296 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="402-408"];
m9_297 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="410-417"];
m9_298 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="400-400"];
m9_240 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="164-164"];
m9_43 [cluster="Unk.UseConnection", file="SqlServerConnectionFacts.cs", label="Entry Unk.UseConnection", span=""];
m9_9 [cluster="Unk.Equal", file="SqlServerConnectionFacts.cs", label="Entry Unk.Equal", span=""];
m9_33 [cluster="System.Threading.CancellationToken.CancellationToken()", file="SqlServerConnectionFacts.cs", label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0"];
m9_268 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="369-369"];
m9_269 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="371-377"];
m9_270 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="369-369"];
m9_110 [cluster="Unk.Query", file="SqlServerConnectionFacts.cs", label="Entry Unk.Query", span=""];
m9_425 [cluster="System.Action<T>.Invoke(T)", file="SqlServerConnectionFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m9_376 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="510-510"];
m9_377 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues\r\n('server1', '', '2012-12-12 12:12:12'),\r\n('server2', '', '2012-12-12 12:12:12')''", span="512-516"];
m9_378 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat);\r\n\r\n                Assert.NotEqual(2012, servers[''server1''].Year);\r\n                Assert.Equal(2012, servers[''server2''].Year);\r\n            })", span="518-529"];
m9_379 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="510-510"];
m9_49 [cluster="Unk.NotNull", file="SqlServerConnectionFacts.cs", label="Entry Unk.NotNull", span=""];
m9_144 [cluster="Unk.Null", file="SqlServerConnectionFacts.cs", label="Entry Unk.Null", span=""];
m9_317 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="433-433"];
m9_318 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="435-441"];
m9_319 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="433-433"];
m9_414 [cluster="System.DateTime.AddHours(double)", file="SqlServerConnectionFacts.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m9_57 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="53-53"];
m9_109 [cluster="Unk.NotEmpty", file="SqlServerConnectionFacts.cs", label="Entry Unk.NotEmpty", span=""];
m9_354 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="207-207"];
m9_393 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="533-533"];
m9_394 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="535-536"];
m9_395 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="533-533"];
m9_35 [cluster="Unk.Verify", file="SqlServerConnectionFacts.cs", label="Entry Unk.Verify", span=""];
m9_13 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", span="34-34"];
m9_159 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m9_174 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24"];
m9_343 [cluster="string.StartsWith(string)", file="SqlServerConnectionFacts.cs", label="Entry string.StartsWith(string)", span="0-0"];
m9_402 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerConnectionFacts.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m9_117 [cluster="Unk.ToDictionary", file="SqlServerConnectionFacts.cs", label="Entry Unk.ToDictionary", span=""];
m9_415 [cluster="System.TimeSpan.FromHours(double)", file="SqlServerConnectionFacts.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m9_305 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="421-421"];
m9_306 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="423-429"];
m9_307 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="421-421"];
m9_84 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="582-582"];
m9_426 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="582-582"];
m9_186 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="229-229"];
m9_187 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="231-237"];
m9_188 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="229-229"];
m9_8 [cluster="Unk.>", file="SqlServerConnectionFacts.cs", label="Entry Unk.>", span=""];
m9_165 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="192-192"];
m9_166 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="194-197"];
m9_167 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="199-213"];
m9_168 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="192-192"];
m9_404 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="540-540"];
m9_405 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="542-544"];
m9_406 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="546-560"];
m9_407 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="540-540"];
m9_108 [cluster="System.TimeSpan.FromDays(double)", file="SqlServerConnectionFacts.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m9_68 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerConnectionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m9_267 [cluster="Unk.GetJobParameter", file="SqlServerConnectionFacts.cs", label="Entry Unk.GetJobParameter", span=""];
m9_50 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="66-66"];
m9_51 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireJobLock(''1'');\r\n                Assert.NotNull(@lock);\r\n            })", span="68-72"];
m9_52 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="66-66"];
m9_137 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="151-151"];
m9_138 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="153-157"];
m9_139 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="151-151"];
m9_241 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="323-323"];
m9_242 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="325-331"];
m9_243 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="323-323"];
m9_344 [cluster="Unk.Contains", file="SqlServerConnectionFacts.cs", label="Entry Unk.Contains", span=""];
m9_175 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="217-217"];
m9_176 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="219-225"];
m9_177 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="217-217"];
m9_160 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m9_111 [cluster="Unk.Single", file="SqlServerConnectionFacts.cs", label="Entry Unk.Single", span=""];
m9_116 [cluster="Unk.True", file="SqlServerConnectionFacts.cs", label="Entry Unk.True", span=""];
m9_375 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="216-216"];
m9_70 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="91-91"];
m9_71 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="93-102"];
m9_72 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="91-91"];
m9_15 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="33-33"];
m9_17 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerConnectionFacts.cs", label="Assert.Equal(''connection'', exception.ParamName)", span="38-38"];
m9_18 [cluster="HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="33-33"];
m9_427 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.Tests.SqlServerConnectionFacts", span=""];
m9_428 [file="SqlServerConnectionFacts.cs", label=token, span=""];
m9_429 [file="SqlServerConnectionFacts.cs", label=queues, span=""];
m9_430 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_431 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_432 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_433 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_434 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_435 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_436 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_437 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_438 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_439 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_440 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_441 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_442 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_443 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_444 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_445 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_446 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_447 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_448 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_449 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_450 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_451 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m9_452 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m9_453 [file="SqlServerConnectionFacts.cs", label=arrangeSql, span=""];
m10_5 [cluster="HangFire.Web.CombinedResourceHandler.WriteResponse()", file="SqlServerJobQueue.cs", label="Entry HangFire.Web.CombinedResourceHandler.WriteResponse()", span="36-36"];
m10_8 [cluster="HangFire.Web.CombinedResourceHandler.WriteResponse()", file="SqlServerJobQueue.cs", label="Exit HangFire.Web.CombinedResourceHandler.WriteResponse()", span="36-36"];
m10_10 [cluster="HangFire.Web.EmbeddedResourceHandler.WriteResource(System.Reflection.Assembly, string)", file="SqlServerJobQueue.cs", label="Entry HangFire.Web.EmbeddedResourceHandler.WriteResource(System.Reflection.Assembly, string)", span="50-50"];
m10_0 [cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", file="SqlServerJobQueue.cs", label="Entry HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", span="26-26"];
m10_4 [cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", file="SqlServerJobQueue.cs", label="Exit HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", span="26-26"];
m10_9 [cluster="string.Format(string, object, object)", file="SqlServerJobQueue.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m10_11 [file="SqlServerJobQueue.cs", label="HangFire.Web.CombinedResourceHandler", span=""];
m11_17 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="29-29"];
m11_101 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="154-154"];
m11_102 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue, FetchedAt)\r\nvalues (scope_identity(), @queue, @fetchedAt)''", prediction=14, span="156-160"];
m11_103 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    });\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotEmpty(payload.JobId);\r\n            })", prediction=15, span="163-183"];
m11_104 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="154-154"];
m11_99 [cluster="System.DateTime.AddMinutes(double)", file="SqlServerJobQueueFacts.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m11_25 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var queue = CreateJobQueue(connection)", span="39-39"];
m11_23 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="SqlServerJobQueueFacts.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m11_18 [cluster="string.Format(string, object)", file="SqlServerJobQueueFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m11_165 [cluster="HangFire.SqlServer.SqlServerJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.SqlServerJobQueue.Enqueue(System.Collections.Generic.Queue<System.Action<SqlConnection>>, string, string)", span="88-88"];
m11_34 [cluster="HangFire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="42-42"];
m11_84 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="120-120"];
m11_86 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' });\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotNull(payload);\r\n\r\n                var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.NotNull(fetchedAt);\r\n                Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1));\r\n            })", prediction=16, span="129-150"];
m11_85 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="SqlServerJobQueueFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="122-126"];
m11_87 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="120-120"];
m11_180 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", span="313-313"];
m11_182 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerJobQueueFacts.cs", label="action(connection)", span="317-317"];
m11_181 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerJobQueueFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="315-315"];
m11_183 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", span="313-313"];
m11_56 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="SqlServerJobQueueFacts.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m11_24 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="37-45"];
m11_29 [cluster="Unk.CreateJobQueue", file="SqlServerJobQueueFacts.cs", label="Entry Unk.CreateJobQueue", span=""];
m11_21 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => queue.Dequeue(null, CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", prediction=17, span="37-45"];
m11_68 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(int)", file="SqlServerJobQueueFacts.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(int)", span="0-0"];
m11_173 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", file="SqlServerJobQueueFacts.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", span="0-0"];
m11_20 [cluster="Unk.GetType", file="SqlServerJobQueueFacts.cs", label="Entry Unk.GetType", span=""];
m11_22 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="SqlServerJobQueueFacts.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m11_125 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="222-222"];
m11_127 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' });\r\n                \r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()));\r\n            })", prediction=18, span="230-242"];
m11_126 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="SqlServerJobQueueFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="224-228"];
m11_128 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="222-222"];
m11_113 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="187-187"];
m11_114 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", prediction=19, span="189-193"];
m11_115 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    });\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.Null(otherJobFetchedAt);\r\n            })", prediction=20, span="196-218"];
m11_116 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="187-187"];
m11_174 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerJobQueueFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m11_168 [cluster="Unk.Query", file="SqlServerJobQueueFacts.cs", label="Entry Unk.Query", span=""];
m11_11 [cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", label="var type = Type.GetType(jobType)", span="34-34"];
m11_12 [cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="var recurringAttribute = type.GetCustomAttributes(true).OfType<RecurringAttribute>().SingleOrDefault()", prediction=21, span="37-37"];
m11_151 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", span="283-283"];
m11_152 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="SqlServerJobQueueFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var actions = new Queue<Action<SqlConnection>>();\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                queue.Enqueue(actions, ''default'', ''1'');\r\n                actions.Dequeue()(connection);\r\n\r\n                var record = connection.Query(''select * from HangFire.JobQueue'').Single();\r\n                Assert.Equal(''1'', record.JobId.ToString());\r\n                Assert.Equal(''default'', record.Queue);\r\n                Assert.Null(record.FetchedAt);\r\n            })", span="285-297"];
m11_153 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", span="283-283"];
m11_167 [cluster="System.Action<T>.Invoke(T)", file="SqlServerJobQueueFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m11_166 [cluster="System.Collections.Generic.Queue<T>.Dequeue()", file="SqlServerJobQueueFacts.cs", label="Entry System.Collections.Generic.Queue<T>.Dequeue()", span="0-0"];
m11_111 [cluster="System.DateTime.AddDays(double)", file="SqlServerJobQueueFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m11_169 [cluster="Unk.ToString", file="SqlServerJobQueueFacts.cs", label="Entry Unk.ToString", span=""];
m11_0 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="17-17"];
m11_1 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerJobQueueFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerJobQueue(null, new Mock<IDbConnection>().Object))", span="19-20"];
m11_2 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''options'', exception.ParamName)", span="22-22"];
m11_97 [cluster="Unk.NotNull", file="SqlServerJobQueueFacts.cs", label="Entry Unk.NotNull", span=""];
m11_164 [cluster="System.Collections.Generic.Queue<T>.Queue()", file="SqlServerJobQueueFacts.cs", label="Entry System.Collections.Generic.Queue<T>.Queue()", span="0-0"];
m11_137 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", span="246-246"];
m11_139 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="SqlServerJobQueueFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    });\r\n\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                var critical = (SqlServerProcessingJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(critical.JobId);\r\n                Assert.Equal(''critical'', critical.Queue);\r\n\r\n                var @default = (SqlServerProcessingJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(@default.JobId);\r\n                Assert.Equal(''default'', @default.Queue);\r\n            })", span="254-279"];
m11_138 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="SqlServerJobQueueFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="248-252"];
m11_140 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", span="246-246"];
m11_124 [cluster="Unk.Null", file="SqlServerJobQueueFacts.cs", label="Entry Unk.Null", span=""];
m11_177 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", span="308-308"];
m11_178 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", file="SqlServerJobQueueFacts.cs", label="return new SqlServerJobQueue(new SqlServerStorageOptions(), connection);", span="310-310"];
m11_179 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", span="308-308"];
m11_55 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="SqlServerJobQueueFacts.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m11_154 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="285-297"];
m11_15 [cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", label="return state;", span="46-46"];
m11_38 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="51-59"];
m11_39 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="var queue = CreateJobQueue(connection)", prediction=22, span="53-53"];
m11_40 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()))", span="55-56"];
m11_44 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="queue.Dequeue(new string[0], CreateTimingOutCancellationToken())", span="56-56"];
m11_49 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="65-73"];
m11_53 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", prediction=23, span="71-72"];
m11_50 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var cts = new CancellationTokenSource()", span="67-67"];
m11_52 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var queue = CreateJobQueue(connection)", span="69-69"];
m11_54 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="65-73"];
m11_57 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="72-72"];
m11_58 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="queue.Dequeue(DefaultQueues, cts.Token)", prediction=23, span="72-72"];
m11_59 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="72-72"];
m11_63 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="79-86"];
m11_77 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        jobId = 1,\r\n                        queue = ''default''\r\n                    })", prediction=25, span="99-105"];
m11_76 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="97-116"];
m11_78 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var queue = CreateJobQueue(connection)", span="106-106"];
m11_79 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="var payload = (SqlServerProcessingJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", prediction=26, span="109-111"];
m11_80 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''1'', payload.JobId)", span="114-114"];
m11_81 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''default'', payload.Queue)", span="115-115"];
m11_88 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="129-150"];
m11_95 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1))", prediction=27, span="149-149"];
m11_93 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single()", span="144-146"];
m11_94 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.NotNull(fetchedAt)", span="148-148"];
m11_96 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="129-150"];
m11_106 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    })", prediction=28, span="165-173"];
m11_105 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="163-183"];
m11_107 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var queue = CreateJobQueue(connection)", span="174-174"];
m11_108 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", prediction=29, span="177-179"];
m11_109 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.NotEmpty(payload.JobId)", span="182-182"];
m11_118 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    })", prediction=30, span="198-204"];
m11_117 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="196-218"];
m11_119 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var queue = CreateJobQueue(connection)", span="205-205"];
m11_121 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single()", prediction=31, span="213-215"];
m11_120 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="208-210"];
m11_122 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.Null(otherJobFetchedAt)", span="217-217"];
m11_129 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="230-242"];
m11_130 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="var queue = CreateJobQueue(connection)", prediction=32, span="232-232"];
m11_131 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' })", span="234-236"];
m11_132 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()))", prediction=32, span="238-241"];
m11_135 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken())", prediction=32, span="239-241"];
m11_133 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="230-242"];
m11_134 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="239-241"];
m11_136 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="239-241"];
m11_26 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="HangFire.RecurringAttribute", span=""];
m11_66 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="84-85"];
m11_16 [cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="21-21"];
m11_65 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var queue = CreateJobQueue(connection)", span="82-82"];
m11_90 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var queue = CreateJobQueue(connection)", span="134-134"];
m11_143 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var queue = CreateJobQueue(connection)", span="264-264"];
m11_156 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var queue = CreateJobQueue(connection)", span="288-288"];
m11_28 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="37-45"];
m11_42 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="51-59"];
m11_41 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''queues'', exception.ParamName)", span="58-58"];
m11_43 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="56-56"];
m11_45 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="56-56"];
m11_51 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="cts.Cancel()", span="68-68"];
m11_31 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="queue.Dequeue(null, CreateTimingOutCancellationToken())", span="42-42"];
m11_70 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="queue.Dequeue(DefaultQueues, cts.Token)", span="85-85"];
m11_91 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="137-139"];
m11_144 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var critical = (SqlServerProcessingJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="266-268"];
m11_147 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var @default = (SqlServerProcessingJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="273-275"];
m11_67 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="79-86"];
m11_64 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var cts = new CancellationTokenSource(200)", span="81-81"];
m11_82 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="97-116"];
m11_89 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' })", span="131-133"];
m11_142 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    })", span="256-262"];
m11_92 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.NotNull(payload)", span="142-142"];
m11_110 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="163-183"];
m11_123 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="196-218"];
m11_159 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var record = connection.Query(''select * from HangFire.JobQueue'').Single()", span="293-293"];
m11_27 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''queues'', exception.ParamName)", span="44-44"];
m11_146 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''critical'', critical.Queue)", span="271-271"];
m11_149 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''default'', @default.Queue)", span="278-278"];
m11_160 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''1'', record.JobId.ToString())", span="294-294"];
m11_161 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''default'', record.Queue)", span="295-295"];
m11_30 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="42-42"];
m11_69 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="85-85"];
m11_141 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="254-279"];
m11_155 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="var actions = new Queue<Action<SqlConnection>>()", span="287-287"];
m11_157 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="queue.Enqueue(actions, ''default'', ''1'')", span="290-290"];
m11_32 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="42-42"];
m11_71 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="85-85"];
m11_145 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.NotNull(critical.JobId)", span="270-270"];
m11_148 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.NotNull(@default.JobId)", span="277-277"];
m11_162 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Assert.Null(record.FetchedAt)", span="296-296"];
m11_158 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="actions.Dequeue()(connection)", span="291-291"];
m11_150 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="254-279"];
m11_163 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="285-297"];
m11_72 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", span="90-90"];
m11_73 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@jobId, @queue)''", prediction=35, span="92-94"];
m11_74 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        jobId = 1,\r\n                        queue = ''default''\r\n                    });\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = (SqlServerProcessingJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.Equal(''1'', payload.JobId);\r\n                Assert.Equal(''default'', payload.Queue);\r\n            })", prediction=36, span="97-116"];
m11_75 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", span="90-90"];
m11_33 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", span="300-300"];
m11_170 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="SqlServerJobQueueFacts.cs", label="var source = new CancellationTokenSource(TimeSpan.FromSeconds(10))", span="302-302"];
m11_171 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="SqlServerJobQueueFacts.cs", label="return source.Token;", span="303-303"];
m11_172 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", span="300-300"];
m11_19 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m11_112 [cluster="Unk.NotEmpty", file="SqlServerJobQueueFacts.cs", label="Entry Unk.NotEmpty", span=""];
m11_98 [cluster="Unk.Single", file="SqlServerJobQueueFacts.cs", label="Entry Unk.Single", span=""];
m11_3 [cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="21-21"];
m11_100 [cluster="Unk.True", file="SqlServerJobQueueFacts.cs", label="Entry Unk.True", span=""];
m11_83 [cluster="Unk.Execute", file="SqlServerJobQueueFacts.cs", label="Entry Unk.Execute", span=""];
m11_60 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="77-77"];
m11_61 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource(200);\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", prediction=37, span="79-86"];
m11_62 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="77-77"];
m11_184 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m11_46 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="63-63"];
m11_47 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource();\r\n                cts.Cancel();\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", prediction=38, span="65-73"];
m11_48 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="63-63"];
m11_35 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="SqlServerJobQueueFacts.cs", label="Entry HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="49-49"];
m11_36 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", prediction=39, span="51-59"];
m11_37 [cluster="HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="SqlServerJobQueueFacts.cs", label="Exit HangFire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="49-49"];
m11_185 [file="SqlServerJobQueueFacts.cs", label="HangFire.SqlServer.Tests.SqlServerJobQueueFacts", span=""];
m11_188 [file="SqlServerJobQueueFacts.cs", label=cts, span=""];
m11_189 [file="SqlServerJobQueueFacts.cs", label=queue, span=""];
m11_192 [file="SqlServerJobQueueFacts.cs", label=arrangeSql, span=""];
m11_194 [file="SqlServerJobQueueFacts.cs", label=arrangeSql, span=""];
m11_195 [file="SqlServerJobQueueFacts.cs", label=arrangeSql, span=""];
m11_197 [file="SqlServerJobQueueFacts.cs", label=queue, span=""];
m11_187 [file="SqlServerJobQueueFacts.cs", label=queue, span=""];
m11_196 [file="SqlServerJobQueueFacts.cs", label=arrangeSql, span=""];
m11_186 [file="SqlServerJobQueueFacts.cs", label=queue, span=""];
m11_190 [file="SqlServerJobQueueFacts.cs", label=cts, span=""];
m11_191 [file="SqlServerJobQueueFacts.cs", label=queue, span=""];
m11_193 [file="SqlServerJobQueueFacts.cs", label=arrangeSql, span=""];
m11_198 [file="SqlServerJobQueueFacts.cs", label=arrangeSql, span=""];
m12_27 [cluster="Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", file="SqlServerProcessingJob.cs", label="Entry Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", span="24-24"];
m12_11 [cluster="lambda expression", file="SqlServerProcessingJob.cs", label="Entry lambda expression", span="23-23"];
m12_22 [cluster="Unk.>", file="SqlServerProcessingJob.cs", label="Entry Unk.>", span=""];
m12_0 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerProcessingJob.cs", label="Entry HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", span="27-27"];
m12_3 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerProcessingJob.cs", label="jobId == null", span="30-30"];
m12_4 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerProcessingJob.cs", label="throw new ArgumentNullException(''jobId'');", span="30-30"];
m12_5 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerProcessingJob.cs", label="queue == null", span="31-31"];
m12_8 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerProcessingJob.cs", label="JobId = jobId", span="35-35"];
m12_9 [cluster="Unk.Setup", file="SqlServerProcessingJob.cs", label="Entry Unk.Setup", span=""];
m12_6 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerProcessingJob.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148"];
m12_10 [cluster="Unk.Returns", file="SqlServerProcessingJob.cs", label="Entry Unk.Returns", span=""];
m12_15 [cluster="lambda expression", file="SqlServerProcessingJob.cs", label="Entry lambda expression", span="32-32"];
m12_43 [cluster="Unk.Same", file="SqlServerProcessingJob.cs", label="Entry Unk.Same", span=""];
m12_28 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", file="SqlServerProcessingJob.cs", label="Entry Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", span="45-45"];
m12_29 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", file="SqlServerProcessingJob.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ApplyStateContext(_stateContext.Object, _newState.Object, OldState, null))", span="47-48"];
m12_30 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", file="SqlServerProcessingJob.cs", label="Assert.Equal(''traversedStates'', exception.ParamName)", span="50-50"];
m12_31 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", file="SqlServerProcessingJob.cs", label="Exit Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenTraversedStatesIsNull()", span="45-45"];
m12_35 [cluster="ApplyStateContext.cstr", file="SqlServerProcessingJob.cs", label="Entry ApplyStateContext.cstr", span=""];
m12_23 [cluster="Unk.Equal", file="SqlServerProcessingJob.cs", label="Entry Unk.Equal", span=""];
m12_32 [cluster="lambda expression", file="SqlServerProcessingJob.cs", label="Entry lambda expression", span="48-48"];
m12_12 [cluster="HangFire.SqlServer.SqlServerProcessingJob.Dispose()", color=green, community=0, file="SqlServerProcessingJob.cs", label="Entry HangFire.SqlServer.SqlServerProcessingJob.Dispose()", prediction=40, span="42-42"];
m12_25 [cluster="lambda expression", file="SqlServerProcessingJob.cs", label="new ApplyStateContext(_stateContext.Object, null, OldState, _traversedStates)", span="39-39"];
m12_33 [cluster="lambda expression", file="SqlServerProcessingJob.cs", label="new ApplyStateContext(_stateContext.Object, _newState.Object, OldState, null)", span="48-48"];
m12_24 [cluster="lambda expression", file="SqlServerProcessingJob.cs", label="Entry lambda expression", span="39-39"];
m12_26 [cluster="lambda expression", file="SqlServerProcessingJob.cs", label="Exit lambda expression", span="39-39"];
m12_34 [cluster="lambda expression", file="SqlServerProcessingJob.cs", label="Exit lambda expression", span="48-48"];
m12_16 [cluster="lambda expression", file="SqlServerProcessingJob.cs", label="HangFire.SqlServer.SqlServerProcessingJob", span=""];
m12_17 [cluster="lambda expression", file="SqlServerProcessingJob.cs", label="Exit lambda expression", span="32-32"];
m12_14 [cluster="HangFire.SqlServer.SqlServerProcessingJob.Dispose()", file="SqlServerProcessingJob.cs", label="Exit HangFire.SqlServer.SqlServerProcessingJob.Dispose()", span="42-42"];
m12_36 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs", label="Entry Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", span="54-54"];
m12_37 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs", label="var context = new ApplyStateContext(\r\n                _stateContext.Object,\r\n                _newState.Object,\r\n                OldState,\r\n                _traversedStates)", span="56-60"];
m12_39 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs", label="Assert.Same(_newState.Object, context.NewState)", span="63-63"];
m12_40 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs", label="Assert.Same(_job, context.Job)", span="64-64"];
m12_41 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs", label="Assert.Same(_traversedStates, context.TraversedStates)", span="65-65"];
m12_38 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs", label="Assert.Equal(OldState, context.OldStateName)", span="62-62"];
m12_42 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", file="SqlServerProcessingJob.cs", label="Exit Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ShouldSetPropertiesCorrectly()", span="54-54"];
m12_18 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", file="SqlServerProcessingJob.cs", label="Entry Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", span="36-36"];
m12_19 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", file="SqlServerProcessingJob.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ApplyStateContext(_stateContext.Object, null, OldState, _traversedStates))", span="38-39"];
m12_20 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", file="SqlServerProcessingJob.cs", label="Assert.Equal(''newState'', exception.ParamName)", span="41-41"];
m12_21 [cluster="Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", file="SqlServerProcessingJob.cs", label="Exit Hangfire.Core.Tests.States.ApplyStateContextFacts.Ctor_ThrowsAnException_WhenNewStateIsNull()", span="36-36"];
m12_44 [file="SqlServerProcessingJob.cs", label="Hangfire.Core.Tests.States.ApplyStateContextFacts", span=""];
m14_13 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorage.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m14_20 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetConnection()", span="59-59"];
m14_21 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", color=green, community=0, file="SqlServerStorage.cs", label="var connection = CreateAndOpenConnection()", prediction=41, span="61-61"];
m14_22 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs", label="var queue = _options.MessageQueuePathPattern != null\r\n                ? (IPersistentJobQueue)new MessageQueueJobQueue(_options.MessageQueuePathPattern)\r\n                : new SqlServerJobQueue(_options, connection)", span="62-64"];
m14_23 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs", label="return new SqlServerConnection(queue, connection);", span="66-66"];
m14_24 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.GetConnection()", span="59-59"];
m14_39 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.ToString()", span="81-81"];
m14_41 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="var parts = _connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)\r\n                    .Select(x => x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))\r\n                    .Select(x => new { Key = x[0].Trim(), Value = x[1].Trim() })\r\n                    .ToDictionary(x => x.Key, x => x.Value)", span="87-90"];
m14_40 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="string canNotParseMessage = ''<Connection string can not be parsed>''", span="83-83"];
m14_42 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="var builder = new StringBuilder()", span="92-92"];
m14_44 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="parts.ContainsKey(alias)", span="96-96"];
m14_45 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.AppendFormat(''{1}'', alias, parts[alias])", span="98-98"];
m14_49 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="parts.ContainsKey(alias)", span="107-107"];
m14_50 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.AppendFormat(''{1}'', alias, parts[alias])", span="109-109"];
m14_51 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="return builder.Length != 0 \r\n                    ? String.Format(''SQL Server: {0}'', builder) \r\n                    : canNotParseMessage;", span="114-116"];
m14_53 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="return canNotParseMessage;", span="120-120"];
m14_43 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="new[] { ''Data Source'', ''Server'', ''Address'', ''Addr'', ''Network Address'' }", span="94-94"];
m14_46 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.Length != 0", span="103-103"];
m14_47 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.Append(''@'')", span="103-103"];
m14_48 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="new[] { ''Database'', ''Initial Catalog'' }", span="105-105"];
m14_52 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label=Exception, span="118-118"];
m14_54 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.ToString()", span="81-81"];
m14_19 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", span="35-35"];
m14_61 [cluster="System.Text.StringBuilder.Append(string)", file="SqlServerStorage.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m14_57 [cluster="Unk.ToDictionary", file="SqlServerStorage.cs", label="Entry Unk.ToDictionary", span=""];
m14_62 [cluster="string.Format(string, object)", file="SqlServerStorage.cs", label="Entry string.Format(string, object)", span="0-0"];
m14_37 [cluster="Unk.Info", file="SqlServerStorage.cs", label="Entry Unk.Info", span=""];
m14_32 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", span="74-74"];
m14_34 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs", label="logger.InfoFormat(''    Queue poll interval: {0}.'', _options.QueuePollInterval)", span="77-77"];
m14_35 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs", label="logger.InfoFormat(''    Invisibility timeout: {0}.'', _options.InvisibilityTimeout)", span="78-78"];
m14_33 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs", label="logger.Info(''Using the following options for SQL Server job storage:'')", span="76-76"];
m14_36 [cluster="HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.WriteOptionsToLog(ILog)", span="74-74"];
m14_58 [cluster="System.Text.StringBuilder.StringBuilder()", file="SqlServerStorage.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m14_81 [cluster="Unk.Open", file="SqlServerStorage.cs", label="Entry Unk.Open", span=""];
m14_38 [cluster="Unk.InfoFormat", file="SqlServerStorage.cs", label="Entry Unk.InfoFormat", span=""];
m14_69 [cluster="Unk.Trim", file="SqlServerStorage.cs", label="Entry Unk.Trim", span=""];
m14_80 [cluster="SqlConnection.cstr", file="SqlServerStorage.cs", label="Entry SqlConnection.cstr", span=""];
m14_60 [cluster="Unk.AppendFormat", file="SqlServerStorage.cs", label="Entry Unk.AppendFormat", span=""];
m14_16 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54"];
m14_17 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs", label="return new SqlServerMonitoringApi(CreateAndOpenConnection());", span="56-56"];
m14_18 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54"];
m14_27 [cluster="SqlServerConnection.cstr", file="SqlServerStorage.cs", label="Entry SqlServerConnection.cstr", span=""];
m14_31 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="38-38"];
m14_26 [cluster="SqlServerJobQueue.cstr", file="SqlServerStorage.cs", label="Entry SqlServerJobQueue.cstr", span=""];
m14_2 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
m14_7 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="_options = options", span="42-42"];
m14_8 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="_connectionString = connectionString", span="43-43"];
m14_10 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="var connection = CreateAndOpenConnection()", span="47-47"];
m14_5 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="options == null", span="40-40"];
m14_9 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="options.PrepareSchemaIfNecessary", span="45-45"];
m14_11 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="SqlServerObjectsInstaller.Install(connection)", span="49-49"];
m14_3 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="connectionString == null", span="39-39"];
m14_6 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''options'');", span="40-40"];
m14_4 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''connectionString'');", span="39-39"];
m14_12 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
m14_55 [cluster="string.Split(char[], System.StringSplitOptions)", file="SqlServerStorage.cs", label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0"];
m14_73 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="90-90"];
m14_63 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="88-88"];
m14_66 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="89-89"];
m14_70 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="90-90"];
m14_64 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", span="88-88"];
m14_65 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="88-88"];
m14_68 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="89-89"];
m14_67 [cluster="lambda expression", file="SqlServerStorage.cs", label="new { Key = x[0].Trim(), Value = x[1].Trim() }", span="89-89"];
m14_72 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="90-90"];
m14_71 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Key", span="90-90"];
m14_74 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Value", span="90-90"];
m14_75 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="90-90"];
m14_25 [cluster="HangFire.SqlServer.MessageQueueJobQueue.MessageQueueJobQueue(string)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.MessageQueueJobQueue.MessageQueueJobQueue(string)", span="32-32"];
m14_56 [cluster="Unk.Select", file="SqlServerStorage.cs", label="Entry Unk.Select", span=""];
m14_28 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetComponents()", span="69-69"];
m14_29 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="yield return new ExpirationManager(this);", span="71-71"];
m14_30 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.GetComponents()", span="69-69"];
m14_15 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="34-34"];
m14_14 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="124-124"];
m14_76 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="var connection = new SqlConnection(_connectionString)", span="126-126"];
m14_77 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="connection.Open()", span="127-127"];
m14_78 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="return connection;", span="129-129"];
m14_79 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="124-124"];
m14_59 [cluster="Unk.ContainsKey", file="SqlServerStorage.cs", label="Entry Unk.ContainsKey", span=""];
m14_82 [file="SqlServerStorage.cs", label="HangFire.SqlServer.SqlServerStorage", span=""];
m15_5 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m15_6 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m15_0 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m15_1 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="26-26"];
m15_2 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="InvisibilityTimeout = TimeSpan.FromMinutes(5)", span="27-27"];
m15_3 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="PrepareSchemaIfNecessary = true", span="29-29"];
m15_4 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Exit HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m15_7 [file="SqlServerStorageOptions.cs", label="HangFire.SqlServer.SqlServerStorageOptions", span=""];
m16_8 [cluster="Unk.OnFeatureStart", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.OnFeatureStart", span=""];
m16_57 [cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Tests.States.EnqueuedStateFeature.AfterApplyingItShouldEnqueueTheJobToTheGivenQueue()", span="129-129"];
m16_62 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 })", span="124-126"];
m16_59 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 }))", span="124-126"];
m16_60 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="122-122"];
m16_64 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="129-129"];
m16_61 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="124-126"];
m16_63 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="124-126"];
m16_58 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="122-122"];
m16_65 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="131-133"];
m16_14 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label=_commandQueue, span="56-56"];
m16_16 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="transaction.Complete()", span="61-61"];
m16_15 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="command(_connection)", span="58-58"];
m16_17 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="48-48"];
m16_25 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="65-65"];
m16_29 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="67-69"];
m16_82 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="150-150"];
m16_83 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="AddToSet(key, value, 0.0)", span="152-152"];
m16_84 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="150-150"];
m16_98 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="176-176"];
m16_99 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value)'',\r\n                new { key, value }))", span="178-180"];
m16_100 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="176-176"];
m16_85 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="155-155"];
m16_86 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs", label="string addSql = @''\r\nmerge HangFire.[Set] as Target\r\nusing (VALUES (@key, @value, @score)) as Source ([Key], Value, Score)\r\non Target.[Key] = Source.[Key] and Target.Value = Source.Value\r\nwhen matched then update set Score = Source.Score\r\nwhen not matched then insert ([Key], Value, Score) values (Source.[Key], Source.Value, Source.Score);''", span="157-162"];
m16_87 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                addSql,\r\n                new { key, value, score }))", span="164-166"];
m16_88 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="155-155"];
m16_66 [cluster="Unk.When", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.When", span=""];
m16_119 [cluster="System.Collections.Generic.Queue<T>.Enqueue(T)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Queue<T>.Enqueue(T)", span="0-0"];
m16_26 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="202-202"];
m16_27 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="67-69"];
m16_28 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId })", span="67-69"];
m16_35 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="74-76"];
m16_67 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="131-133"];
m16_73 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="138-140"];
m16_69 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="131-133"];
m16_70 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="136-136"];
m16_74 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 })", span="138-140"];
m16_72 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="136-136"];
m16_68 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="131-133"];
m16_71 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 }))", span="138-140"];
m16_75 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="138-140"];
m16_36 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId })", span="74-76"];
m16_40 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                }))", span="86-96"];
m16_38 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="79-79"];
m16_39 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs", label="string addAndSetStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data);\r\nupdate HangFire.Job set StateId = SCOPE_IDENTITY(), StateName = @name where Id = @id;''", span="81-84"];
m16_41 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="79-79"];
m16_37 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="74-76"];
m16_42 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="86-96"];
m16_47 [cluster="HangFire.Tests.States.EnqueuedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerWriteOnlyTransaction.cs", label="this.ScenarioSetup(scenarioInfo)", span="106-106"];
m16_48 [cluster="HangFire.Tests.States.EnqueuedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerWriteOnlyTransaction.cs", label="this.FeatureBackground()", span="108-108"];
m16_49 [cluster="HangFire.Tests.States.EnqueuedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerWriteOnlyTransaction.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112"];
m16_50 [cluster="HangFire.Tests.States.EnqueuedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerWriteOnlyTransaction.cs", label="table1.AddRow(new string[] {\r\n                        ''EnqueuedAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115"];
m16_45 [cluster="HangFire.States.IState.SerializeData()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.States.IState.SerializeData()", span="26-26"];
m16_51 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", prediction=42, span="105-114"];
m16_52 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                })", prediction=43, span="105-114"];
m16_53 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", prediction=44, span="105-114"];
m16_46 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m16_54 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="117-117"];
m16_110 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="190-190"];
m16_111 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="string trimSql = @''\r\nwith cte as (\r\nselect row_number() over (order by Id desc) as row_num, [Key] from HangFire.List)\r\ndelete from cte where row_num not between @start and @end and [Key] = @key''", span="192-195"];
m16_112 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 }))", span="197-199"];
m16_113 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="190-190"];
m16_117 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs", label="_commandQueue.Enqueue(action)", span="204-204"];
m16_118 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="202-202"];
m16_20 [cluster="Unk.EnlistTransaction", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.EnlistTransaction", span=""];
m16_21 [cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m16_18 [cluster="TransactionScope.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry TransactionScope.cstr", span=""];
m16_76 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="HangFire.Tests.States.EnqueuedStateFeature", span=""];
m16_77 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="145-147"];
m16_78 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="143-143"];
m16_7 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(HangFire.SqlServer.IPersistentJobQueue, SqlConnection)", span="35-35"];
m16_22 [cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m16_30 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureBackground()", span="71-71"];
m16_92 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="169-169"];
m16_93 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="171-173"];
m16_94 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="169-169"];
m16_23 [cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransaction.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m16_24 [cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Tests.States.EnqueuedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m16_56 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="117-117"];
m16_104 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="183-183"];
m16_105 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="185-187"];
m16_106 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="183-183"];
m16_11 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="48-48"];
m16_12 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="var transaction = new TransactionScope(\r\n                TransactionScopeOption.Required,\r\n                new TransactionOptions { IsolationLevel = IsolationLevel.Serializable })", span="50-52"];
m16_13 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="_connection.EnlistTransaction(Transaction.Current)", span="54-54"];
m16_19 [cluster="TransactionOptions.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry TransactionOptions.cstr", span=""];
m16_114 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="197-199"];
m16_43 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m16_44 [cluster="Unk.Then", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Then", span=""];
m16_80 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="145-147"];
m16_79 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="145-147"];
m16_81 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="145-147"];
m16_90 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                addSql,\r\n                new { key, value, score })", span="164-166"];
m16_89 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="164-166"];
m16_91 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="164-166"];
m16_96 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="171-173"];
m16_95 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="171-173"];
m16_97 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="171-173"];
m16_102 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value)'',\r\n                new { key, value })", span="178-180"];
m16_101 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="178-180"];
m16_103 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="178-180"];
m16_108 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="185-187"];
m16_107 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="185-187"];
m16_109 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="185-187"];
m16_115 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 })", span="197-199"];
m16_116 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="197-199"];
m16_0 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m16_3 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransaction.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m16_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m16_2 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Enqueued state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", prediction=45, span="33-34"];
m16_4 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m16_34 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="72-72"];
m16_31 [cluster="Unk.Execute", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Execute", span=""];
m16_32 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="72-72"];
m16_33 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId }))", span="74-76"];
m16_9 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", span="44-44"];
m16_10 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", span="44-44"];
m16_120 [file="SqlServerWriteOnlyTransaction.cs", label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", span=""];
m16_121 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_122 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m16_123 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_124 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_125 [file="SqlServerWriteOnlyTransaction.cs", label="HangFire.States.IState", span=""];
m16_126 [file="SqlServerWriteOnlyTransaction.cs", label=addAndSetStateSql, span=""];
m16_127 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_128 [file="SqlServerWriteOnlyTransaction.cs", label="HangFire.States.IState", span=""];
m16_129 [file="SqlServerWriteOnlyTransaction.cs", label=addStateSql, span=""];
m16_130 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_131 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_132 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m16_133 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_134 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_135 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m16_136 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_137 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_138 [file="SqlServerWriteOnlyTransaction.cs", label=double, span=""];
m16_139 [file="SqlServerWriteOnlyTransaction.cs", label=addSql, span=""];
m16_140 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_141 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_142 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_143 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_144 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_145 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_146 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m16_147 [file="SqlServerWriteOnlyTransaction.cs", label=int, span=""];
m16_148 [file="SqlServerWriteOnlyTransaction.cs", label=int, span=""];
m16_149 [file="SqlServerWriteOnlyTransaction.cs", label=trimSql, span=""];
m17_50 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", span="94-94"];
m17_0 [cluster="HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m17_16 [cluster="HangFire.Tests.Server.JobManagerFeature.TestInitialize()", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="HangFire.Tests.Server.JobManagerFeature.FeatureSetup(null)", prediction=46, span="51-51"];
m17_15 [cluster="HangFire.Tests.Server.JobManagerFeature.TestInitialize()", file="SqlServerWriteOnlyTransactionFacts.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Job manager''))", span="48-49"];
m17_17 [cluster="HangFire.Tests.Server.JobManagerFeature.TestInitialize()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.TestInitialize()", span="46-46"];
m17_1 [cluster="HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m17_4 [cluster="HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m17_5 [cluster="Unk.GetTestRunner", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetTestRunner", span=""];
m17_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m17_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m17_8 [cluster="Unk.OnFeatureStart", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.OnFeatureStart", span=""];
m17_10 [cluster="HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m17_11 [cluster="HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner = null", span="42-42"];
m17_12 [cluster="HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", span="39-39"];
m17_14 [cluster="HangFire.Tests.Server.JobManagerFeature.TestInitialize()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.TestInitialize()", span="46-46"];
m17_18 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.ScenarioTearDown()", span="56-56"];
m17_19 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m17_20 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.ScenarioTearDown()", span="56-56"];
m17_22 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m17_23 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m17_24 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m17_25 [cluster="Unk.OnScenarioStart", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.OnScenarioStart", span=""];
m17_26 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", span="66-66"];
m17_27 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m17_29 [cluster="Unk.CollectScenarioErrors", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m17_30 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", span="75-75"];
m17_31 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Manager should perform a job'', ((string[])(null)))", span="77-77"];
m17_32 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m17_33 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m17_34 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="83-83"];
m17_35 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Then(''the job should be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="85-85"];
m17_36 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioCleanup()", span="87-87"];
m17_13 [cluster="Unk.OnFeatureEnd", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.OnFeatureEnd", span=""];
m17_9 [cluster="HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.FeatureTearDown()", span="39-39"];
m17_21 [cluster="Unk.OnScenarioEnd", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.OnScenarioEnd", span=""];
m17_28 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", span="66-66"];
m17_37 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", span="75-75"];
m17_61 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", span="137-137"];
m17_62 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''An unexisting job should not be processed, but it should be removed from the dequ'' +\r\n                    ''eued list'', ((string[])(null)))", span="139-140"];
m17_63 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="142-142"];
m17_64 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Given(''the \'unexisting\' job, that was enqueued'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="144-144"];
m17_65 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="146-146"];
m17_66 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Then(''there should be no performing actions'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="148-148"];
m17_67 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.But(''the \'unexisting\' job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="150-150"];
m17_68 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioCleanup()", span="152-152"];
m17_69 [cluster="HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", span="137-137"];
m17_45 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="100-100"];
m17_51 [cluster="HangFire.Web.HtmlHelper.JobId(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Web.HtmlHelper.JobId(string)", span="17-17"];
m17_70 [cluster="Unk.But", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.But", span=""];
m17_44 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="98-98"];
m17_54 [cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="119-119"];
m17_43 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Successfully performed job should have the Succeeded state'', ((string[])(null)))", span="96-96"];
m17_38 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m17_81 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", span="184-184"];
m17_82 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Disposable job should be disposed after processing'', ((string[])(null)))", span="186-186"];
m17_83 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="188-188"];
m17_84 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="190-190"];
m17_85 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="192-192"];
m17_86 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Then(''the job should be disposed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="194-194"];
m17_87 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioCleanup()", span="196-196"];
m17_88 [cluster="HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", span="184-184"];
m17_40 [cluster="Unk.When", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.When", span=""];
m17_52 [cluster="HangFire.Web.HtmlHelper.JobType(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Web.HtmlHelper.JobType(string)", span="22-22"];
m17_53 [cluster="HangFire.Web.HtmlHelper.FormatProperties(System.Collections.Generic.IDictionary<string, string>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Web.HtmlHelper.FormatProperties(System.Collections.Generic.IDictionary<string, string>)", span="34-34"];
m17_55 [cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6"];
m17_56 [cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="HangFire.Web.Pages.EnqueuedJobsPage", span=""];
m17_57 [cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Then(''its state should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="125-125"];
m17_58 [cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.And(''the job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="127-127"];
m17_59 [cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioCleanup()", span="129-129"];
m17_60 [cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", span="115-115"];
m17_48 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.And(''the job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106"];
m17_41 [cluster="Unk.Then", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Then", span=""];
m17_103 [cluster="Unk.AddRow", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.AddRow", span=""];
m17_47 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Then(''its state should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="104-104"];
m17_49 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioCleanup()", span="108-108"];
m17_89 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", span="203-203"];
m17_90 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job arguments should be deserialized correctly'', ((string[])(null)))", span="205-205"];
m17_91 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="207-207"];
m17_92 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Given(''the following job type:'', ''public void CustomJob : BackgroundJob\r\n{\r\n    public int ArticleId { get; set; }\r'' +\r\n                    ''\n    public string Author { get; set; }\r\n\r\n    public override void Perform()\r\n '' +\r\n                    ''   {\r\n    }\r\n} '', ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="210-212"];
m17_93 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="214-216"];
m17_94 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="table1.AddRow(new string[] {\r\n                        ''ArticleId'',\r\n                        ''2''})", span="217-219"];
m17_95 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="table1.AddRow(new string[] {\r\n                        ''Author'',\r\n                        ''nobody''})", span="220-222"];
m17_96 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.And(''an enqueued CustomJob with the following arguments:'', ((string)(null)), table1, ''And '')", span="224-224"];
m17_97 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="226-226"];
m17_98 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Then(''the last ArticleId should be equal to 2'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="228-228"];
m17_99 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.And(''the last Author should be equal to \'nobody\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="230-230"];
m17_100 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioCleanup()", span="232-232"];
m17_101 [cluster="HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", span="203-203"];
m17_39 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m17_42 [cluster="HttpRequestBase.LinkTo(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HttpRequestBase.LinkTo(string)", span="8-8"];
m17_46 [cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", span="316-316"];
m17_102 [cluster="TechTalk.SpecFlow.Table.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m17_71 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", span="160-160"];
m17_73 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="165-165"];
m17_74 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="167-167"];
m17_75 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.And(''its state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="169-169"];
m17_76 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="171-171"];
m17_77 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.Then(''the job should not be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="173-173"];
m17_78 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs", label="testRunner.But(''it should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="175-175"];
m17_79 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs", label="this.ScenarioCleanup()", span="177-177"];
m17_80 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", span="160-160"];
m17_104 [file="SqlServerWriteOnlyTransactionFacts.cs", label="HangFire.Tests.Server.JobManagerFeature", span=""];
m18_5 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="Worker.cs", label="_context.Storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="33-33"];
m18_162 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="158-158"];
m18_163 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="Worker.cs", label="var worker = CreateWorker()", span="160-160"];
m18_164 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="Worker.cs", label="worker.Execute(_context.Object)", span="162-162"];
m18_165 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="Worker.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName)))", span="164-167"];
m18_166 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="158-158"];
m18_13 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="Entry HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", span="56-56"];
m18_41 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="307-307"];
m18_53 [cluster="Unk.Equal", file="Worker.cs", label="Entry Unk.Equal", span=""];
m18_292 [cluster="System.Exception.Exception()", file="Worker.cs", label="Entry System.Exception.Exception()", span="0-0"];
m18_250 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="245-245"];
m18_252 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws(exception)", span="249-251"];
m18_253 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs", label="var worker = CreateWorker()", span="253-253"];
m18_254 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs", label="worker.Execute(_context.Object)", span="256-256"];
m18_255 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception)))", span="259-262"];
m18_251 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs", label="var exception = new InvalidOperationException()", span="248-248"];
m18_256 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="245-245"];
m18_6 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="Worker.cs", label="_fetchedJob = new Mock<IFetchedJob>()", span="35-35"];
m18_7 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="Worker.cs", label="_fetchedJob.Setup(x => x.JobId).Returns(JobId)", span="36-36"];
m18_8 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=green, community=0, file="Worker.cs", label="_connection\r\n                .Setup(x => x.FetchNextJob(_queues, It.IsNotNull<CancellationToken>()))\r\n                .Returns(_fetchedJob.Object)", prediction=47, span="38-40"];
m18_9 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=green, community=0, file="Worker.cs", label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    Job = Job.FromExpression(() => Method()),\r\n                })", prediction=48, span="42-46"];
m18_10 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", color=green, community=0, file="Worker.cs", label="_stateChanger = new Mock<IBackgroundJobStateChanger>()", prediction=49, span="48-48"];
m18_58 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", span="63-63"];
m18_59 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_queues, null, _stateChanger.Object))", span="65-66"];
m18_60 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="Worker.cs", label="Assert.Equal(''performer'', exception.ParamName)", span="68-68"];
m18_61 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", span="63-63"];
m18_239 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="233-233"];
m18_240 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="Worker.cs", label="var worker = CreateWorker()", span="235-235"];
m18_241 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="Worker.cs", label="worker.Execute(_context.Object)", span="237-237"];
m18_242 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="Worker.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName)))", span="239-241"];
m18_243 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="233-233"];
m18_39 [cluster="lambda expression", color=green, community=0, file="Worker.cs", label="Method()", prediction=50, span="45-45"];
m18_173 [cluster="Unk.ElementAt", file="Worker.cs", label="Entry Unk.ElementAt", span=""];
m18_34 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="42-42"];
m18_174 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="171-171"];
m18_175 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs", label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is ProcessingState)))\r\n                .Returns<IState>(null)", span="174-176"];
m18_176 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs", label="var worker = CreateWorker()", span="178-178"];
m18_177 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs", label="worker.Execute(_context.Object)", span="181-181"];
m18_178 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs", label="_performer.Verify(x => x.Perform(It.IsAny<PerformContext>()), Times.Never)", span="184-184"];
m18_179 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="171-171"];
m18_189 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="188-188"];
m18_190 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="Worker.cs", label="var worker = CreateWorker()", span="190-190"];
m18_191 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="Worker.cs", label="worker.Execute(_context.Object)", span="192-192"];
m18_192 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="Worker.cs", label="_performer.Verify(x => x.Perform(It.IsNotNull<PerformContext>()))", span="194-194"];
m18_193 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="188-188"];
m18_226 [cluster="Unk.DoesNotThrow", file="Worker.cs", label="Entry Unk.DoesNotThrow", span=""];
m18_120 [cluster="Unk.Requeue", file="Worker.cs", label="Entry Unk.Requeue", span=""];
m18_36 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="42-42"];
m18_14 [cluster="Mock<IBackgroundJobPerformer>.cstr", file="Worker.cs", label="Entry Mock<IBackgroundJobPerformer>.cstr", span=""];
m18_15 [cluster="Mock<IStorageConnection>.cstr", file="Worker.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m18_16 [cluster="Unk.Setup", file="Worker.cs", label="Entry Unk.Setup", span=""];
m18_257 [cluster="System.InvalidOperationException.InvalidOperationException()", file="Worker.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m18_22 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="var jobData = connection.GetJobData(jobId)", span="81-81"];
m18_101 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="106-106"];
m18_102 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs", label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.IsAny<StateChangeContext>()))\r\n                .Throws<InvalidOperationException>()", span="108-110"];
m18_103 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs", label="var worker = CreateWorker()", span="112-112"];
m18_104 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => worker.Execute(_context.Object))", span="114-115"];
m18_105 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs", label="_fetchedJob.Verify(x => x.RemoveFromQueue(), Times.Never)", span="117-117"];
m18_106 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs", label="_fetchedJob.Verify(x => x.Requeue())", span="118-118"];
m18_107 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="106-106"];
m18_219 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="217-217"];
m18_220 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs", label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws<JobAbortedException>()", span="220-221"];
m18_221 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs", label="var worker = CreateWorker()", span="223-223"];
m18_222 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs", label="Assert.DoesNotThrow(() => worker.Execute(_context.Object))", span="226-226"];
m18_223 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs", label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="228-228"];
m18_224 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs", label="_fetchedJob.Verify(x => x.Requeue(), Times.Never)", span="229-229"];
m18_225 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="217-217"];
m18_78 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="302-302"];
m18_302 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="Worker.cs", label="return new Worker(_queues, _performer.Object, _stateChanger.Object);", span="304-304"];
m18_303 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="302-302"];
m18_38 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="45-45"];
m18_35 [cluster="lambda expression", color=green, community=0, file="Worker.cs", label="x.GetJobData(JobId)", prediction=51, span="42-42"];
m18_268 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="266-266"];
m18_270 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs", label="_performer\r\n                .Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws(new JobPerformanceException(''hello'', exception))", span="270-272"];
m18_271 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs", label="var worker = CreateWorker()", span="274-274"];
m18_272 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs", label="worker.Execute(_context.Object)", span="277-277"];
m18_273 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState)))", span="280-282"];
m18_269 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs", label="var exception = new InvalidOperationException()", span="269-269"];
m18_274 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="266-266"];
m18_18 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="var processingState = new ProcessingState(_context.ServerId)", span="62-62"];
m18_37 [cluster="Unk.GetJobData", file="Worker.cs", label="Entry Unk.GetJobData", span=""];
m18_26 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="state = new SucceededState()", span="88-88"];
m18_40 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="45-45"];
m18_45 [cluster="Unk.ChangeState", file="Worker.cs", label="Entry Unk.ChangeState", span=""];
m18_0 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="Entry HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m18_11 [cluster="HangFire.JobStorage.GetConnection()", color=green, community=0, file="Worker.cs", label="Entry HangFire.JobStorage.GetConnection()", prediction=47, span="56-56"];
m18_1 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="context == null", span="29-29"];
m18_2 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="throw new ArgumentNullException(''context'');", span="29-29"];
m18_3 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="_context = context", span="31-31"];
m18_4 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="Worker.cs", label="Exit HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m18_12 [cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="Worker.cs", label="Entry HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30"];
m18_128 [cluster="Unk.InSequence", file="Worker.cs", label="Entry Unk.InSequence", span=""];
m18_33 [cluster="Unk.FetchNextJob", file="Worker.cs", label="Entry Unk.FetchNextJob", span=""];
m18_258 [cluster="Unk.Throws", file="Worker.cs", label="Entry Unk.Throws", span=""];
m18_87 [cluster="Unk.Dispose", file="Worker.cs", label="Entry Unk.Dispose", span=""];
m18_49 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", span="54-54"];
m18_50 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", color=green, community=0, file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(null, _performer.Object, _stateChanger.Object))", prediction=53, span="56-57"];
m18_51 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="Worker.cs", label="Assert.Equal(''queues'', exception.ParamName)", span="59-59"];
m18_52 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", span="54-54"];
m18_72 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="81-81"];
m18_73 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs", label="var worker = CreateWorker()", span="83-83"];
m18_74 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs", label="worker.Execute(_context.Object)", span="85-85"];
m18_75 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs", label="_context.Storage.Verify(x => x.GetConnection(), Times.Once)", span="87-87"];
m18_76 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs", label="_connection.Verify(x => x.Dispose(), Times.Once)", span="88-88"];
m18_77 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="81-81"];
m18_285 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="286-286"];
m18_286 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs", label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData { LoadException = new JobLoadException(''asd'', new Exception()) })", span="289-290"];
m18_287 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs", label="var worker = CreateWorker()", span="292-292"];
m18_288 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs", label="worker.Execute(_context.Object)", span="295-295"];
m18_289 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is FailedState)))", span="298-299"];
m18_290 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="286-286"];
m18_141 [cluster="Unk.Perform", file="Worker.cs", label="Entry Unk.Perform", span=""];
m18_100 [cluster="Unk.RemoveFromQueue", file="Worker.cs", label="Entry Unk.RemoveFromQueue", span=""];
m18_299 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="298-299"];
m18_30 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="state = new FailedState(ex)\r\n                {\r\n                    Reason = ''Internal HangFire Server exception occurred. Please, report it to HangFire developers.''\r\n                }", span="99-102"];
m18_42 [cluster="lambda expression", file="Worker.cs", label="HangFire.Server.Worker", span=""];
m18_46 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="50-50"];
m18_43 [cluster="lambda expression", color=green, community=0, file="Worker.cs", label="x.ChangeState(It.IsAny<StateChangeContext>())", prediction=54, span="49-49"];
m18_44 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="49-49"];
m18_47 [cluster="lambda expression", color=green, community=0, file="Worker.cs", label="ctx.NewState", prediction=55, span="50-50"];
m18_48 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="50-50"];
m18_54 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="57-57"];
m18_31 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="stateMachine.TryToChangeState(jobId, state, new[] { ProcessingState.StateName })", span="107-107"];
m18_55 [cluster="lambda expression", file="Worker.cs", label="new Worker(null, _performer.Object, _stateChanger.Object)", span="57-57"];
m18_63 [cluster="lambda expression", file="Worker.cs", label="new Worker(_queues, null, _stateChanger.Object)", span="66-66"];
m18_70 [cluster="lambda expression", file="Worker.cs", label="new Worker(_queues, _performer.Object, null)", span="75-75"];
m18_95 [cluster="lambda expression", file="Worker.cs", label="x.FetchNextJob(_queues, _context.CancellationTokenSource.Token)", span="99-99"];
m18_112 [cluster="lambda expression", file="Worker.cs", label="worker.Execute(_context.Object)", span="115-115"];
m18_157 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId)))", span="153-154"];
m18_160 [cluster="lambda expression", file="Worker.cs", label="ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId)", span="154-154"];
m18_208 [cluster="lambda expression", file="Worker.cs", label="worker.Execute(_context.Object)", span="207-207"];
m18_231 [cluster="lambda expression", file="Worker.cs", label="worker.Execute(_context.Object)", span="226-226"];
m18_27 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label=JobPerformanceException, span="90-90"];
m18_32 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="Exit HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", span="56-56"];
m18_109 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(It.IsAny<StateChangeContext>())", span="109-109"];
m18_130 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is ProcessingState))", span="126-126"];
m18_139 [cluster="lambda expression", file="Worker.cs", label="x.Perform(It.IsAny<PerformContext>())", span="130-130"];
m18_143 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is SucceededState))", span="134-134"];
m18_168 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName))", span="164-167"];
m18_181 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is ProcessingState))", span="175-175"];
m18_187 [cluster="lambda expression", file="Worker.cs", label="x.Perform(It.IsAny<PerformContext>())", span="184-184"];
m18_195 [cluster="lambda expression", file="Worker.cs", label="x.Perform(It.IsNotNull<PerformContext>())", span="194-194"];
m18_205 [cluster="lambda expression", file="Worker.cs", label="x.Perform(It.IsAny<PerformContext>())", span="201-201"];
m18_211 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState))", span="211-211"];
m18_228 [cluster="lambda expression", file="Worker.cs", label="x.Perform(It.IsAny<PerformContext>())", span="220-220"];
m18_245 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName))", span="239-241"];
m18_263 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception))", span="259-262"];
m18_260 [cluster="lambda expression", file="Worker.cs", label="x.Perform(It.IsAny<PerformContext>())", span="250-250"];
m18_277 [cluster="lambda expression", file="Worker.cs", label="x.Perform(It.IsAny<PerformContext>())", span="271-271"];
m18_280 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState))", span="280-282"];
m18_297 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is FailedState))", span="298-299"];
m18_294 [cluster="lambda expression", file="Worker.cs", label="x.GetJobData(JobId)", span="289-289"];
m18_56 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="57-57"];
m18_23 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="jobData.EnsureLoaded()", span="82-82"];
m18_62 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="66-66"];
m18_64 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="66-66"];
m18_69 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="75-75"];
m18_71 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="75-75"];
m18_81 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="87-87"];
m18_84 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="88-88"];
m18_94 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="99-99"];
m18_96 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="99-99"];
m18_97 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="102-102"];
m18_108 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="109-109"];
m18_111 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="115-115"];
m18_113 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="115-115"];
m18_114 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="117-117"];
m18_117 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="118-118"];
m18_129 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="126-126"];
m18_135 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="128-128"];
m18_138 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="130-130"];
m18_142 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="134-134"];
m18_148 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="136-136"];
m18_156 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="153-154"];
m18_158 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="153-154"];
m18_159 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="153-154"];
m18_161 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="153-154"];
m18_167 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="164-167"];
m18_180 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="175-175"];
m18_186 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="184-184"];
m18_194 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="194-194"];
m18_204 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="201-201"];
m18_207 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="207-207"];
m18_209 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="207-207"];
m18_210 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="211-211"];
m18_216 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="213-213"];
m18_227 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="220-220"];
m18_230 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="226-226"];
m18_232 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="226-226"];
m18_233 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="228-228"];
m18_236 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="229-229"];
m18_244 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="239-241"];
m18_259 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="250-250"];
m18_262 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="259-262"];
m18_276 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="271-271"];
m18_279 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="280-282"];
m18_293 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="289-289"];
m18_296 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="298-299"];
m18_29 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label=Exception, span="97-97"];
m18_28 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="state = new FailedState(ex.InnerException)\r\n                {\r\n                    Reason = ex.Message\r\n                }", span="92-95"];
m18_110 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="109-109"];
m18_131 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="126-126"];
m18_132 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="126-126"];
m18_140 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="130-130"];
m18_144 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="134-134"];
m18_145 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="134-134"];
m18_169 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="164-167"];
m18_170 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="164-167"];
m18_182 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="175-175"];
m18_183 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="175-175"];
m18_188 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="184-184"];
m18_196 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="194-194"];
m18_206 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="201-201"];
m18_212 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="211-211"];
m18_213 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="211-211"];
m18_229 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="220-220"];
m18_246 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="239-241"];
m18_247 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="239-241"];
m18_264 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="259-262"];
m18_265 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="259-262"];
m18_261 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="250-250"];
m18_278 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="271-271"];
m18_281 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="280-282"];
m18_282 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="280-282"];
m18_298 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="298-299"];
m18_295 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="289-289"];
m18_25 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="process.Run(performContext, jobData.Job)", span="86-86"];
m18_24 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="var performContext = new PerformContext(_context, connection, jobId, jobData.Job)", span="84-84"];
m18_83 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="87-87"];
m18_82 [cluster="lambda expression", file="Worker.cs", label="x.GetConnection()", span="87-87"];
m18_86 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="88-88"];
m18_85 [cluster="lambda expression", file="Worker.cs", label="x.Dispose()", span="88-88"];
m18_99 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="102-102"];
m18_98 [cluster="lambda expression", file="Worker.cs", label="x.RemoveFromQueue()", span="102-102"];
m18_116 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="117-117"];
m18_115 [cluster="lambda expression", file="Worker.cs", label="x.RemoveFromQueue()", span="117-117"];
m18_119 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="118-118"];
m18_118 [cluster="lambda expression", file="Worker.cs", label="x.Requeue()", span="118-118"];
m18_137 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="128-128"];
m18_136 [cluster="lambda expression", file="Worker.cs", label="ctx.NewState", span="128-128"];
m18_150 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="136-136"];
m18_149 [cluster="lambda expression", file="Worker.cs", label="context.NewState", span="136-136"];
m18_218 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="213-213"];
m18_217 [cluster="lambda expression", file="Worker.cs", label="x.Requeue()", span="213-213"];
m18_235 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="228-228"];
m18_234 [cluster="lambda expression", file="Worker.cs", label="x.RemoveFromQueue()", span="228-228"];
m18_238 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="229-229"];
m18_237 [cluster="lambda expression", file="Worker.cs", label="x.Requeue()", span="229-229"];
m18_266 [cluster="lambda expression", file="Worker.cs", label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception", span="260-262"];
m18_134 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="126-126"];
m18_133 [cluster="lambda expression", file="Worker.cs", label="ctx.BackgroundJobId == JobId && ctx.NewState is ProcessingState", span="126-126"];
m18_147 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="134-134"];
m18_146 [cluster="lambda expression", file="Worker.cs", label="ctx.BackgroundJobId == JobId && ctx.NewState is SucceededState", span="134-134"];
m18_172 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="164-167"];
m18_171 [cluster="lambda expression", file="Worker.cs", label="ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName", span="165-167"];
m18_185 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="175-175"];
m18_184 [cluster="lambda expression", file="Worker.cs", label="ctx.NewState is ProcessingState", span="175-175"];
m18_215 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="211-211"];
m18_214 [cluster="lambda expression", file="Worker.cs", label="ctx.NewState is FailedState", span="211-211"];
m18_249 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="239-241"];
m18_248 [cluster="lambda expression", file="Worker.cs", label="ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName", span="240-241"];
m18_267 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="259-262"];
m18_284 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="280-282"];
m18_283 [cluster="lambda expression", file="Worker.cs", label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState", span="281-282"];
m18_300 [cluster="lambda expression", file="Worker.cs", label="ctx.NewState is FailedState", span="299-299"];
m18_301 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="298-299"];
m18_21 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="IState state", span="77-77"];
m18_19 [cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="Worker.cs", label="!stateMachine.TryToChangeState(\r\n                jobId,\r\n                processingState,\r\n                new[] { EnqueuedState.StateName, ProcessingState.StateName })", span="64-67"];
m18_151 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="147-147"];
m18_152 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="Worker.cs", label="var worker = CreateWorker()", span="149-149"];
m18_153 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="Worker.cs", label="worker.Execute(_context.Object)", span="151-151"];
m18_154 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="Worker.cs", label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId))))", span="153-154"];
m18_155 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="147-147"];
m18_57 [cluster="Worker.cstr", file="Worker.cs", label="Entry Worker.cstr", span=""];
m18_80 [cluster="Unk.Verify", file="Worker.cs", label="Entry Unk.Verify", span=""];
m18_65 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", span="72-72"];
m18_66 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_queues, _performer.Object, null))", span="74-75"];
m18_67 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="Worker.cs", label="Assert.Equal(''stateChanger'', exception.ParamName)", span="77-77"];
m18_68 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", span="72-72"];
m18_121 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="122-122"];
m18_122 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs", label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is ProcessingState)))\r\n                .InSequence()\r\n                .Returns<StateChangeContext>(ctx => ctx.NewState)", span="125-128"];
m18_123 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs", label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .InSequence()", span="130-131"];
m18_124 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs", label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is SucceededState)))\r\n                .InSequence()\r\n                .Returns<StateChangeContext>(context => context.NewState)", span="133-136"];
m18_125 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs", label="var worker = CreateWorker()", span="138-138"];
m18_126 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs", label="worker.Execute(_context.Object)", span="141-141"];
m18_127 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="122-122"];
m18_17 [cluster="Unk.Returns", file="Worker.cs", label="Entry Unk.Returns", span=""];
m18_20 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Worker.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="233-233"];
m18_88 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="92-92"];
m18_89 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs", label="var worker = CreateWorker()", span="94-94"];
m18_90 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs", label="worker.Execute(_context.Object)", span="96-96"];
m18_91 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs", label="_connection.Verify(\r\n                x => x.FetchNextJob(_queues, _context.CancellationTokenSource.Token),\r\n                Times.Once)", span="98-100"];
m18_92 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs", label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="102-102"];
m18_93 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="92-92"];
m18_275 [cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="Worker.cs", label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22"];
m18_291 [cluster="Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", file="Worker.cs", label="Entry Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", span="31-31"];
m18_197 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs", label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="198-198"];
m18_198 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs", label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws<OperationCanceledException>()", span="201-202"];
m18_199 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs", label="var worker = CreateWorker()", span="204-204"];
m18_200 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs", label="Assert.Throws<OperationCanceledException>(() => worker.Execute(_context.Object))", span="207-207"];
m18_201 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs", label="_stateChanger.Verify(\r\n                x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState)),\r\n                Times.Never)", span="210-212"];
m18_202 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs", label="_fetchedJob.Verify(x => x.Requeue())", span="213-213"];
m18_203 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="198-198"];
m18_304 [cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="Worker.cs", label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="307-307"];
m18_79 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="Entry Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="76-76"];
m18_305 [file="Worker.cs", label="Hangfire.Core.Tests.Server.WorkerFacts", span=""];
m18_306 [file="Worker.cs", label=worker, span=""];
m18_307 [file="Worker.cs", label=worker, span=""];
m18_308 [file="Worker.cs", label=worker, span=""];
m18_309 [file="Worker.cs", label=exception, span=""];
m19_0 [cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="WorkerFacts.cs", label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="7-7"];
m19_1 [cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="WorkerFacts.cs", label="InSucceededState = true", span="9-9"];
m19_2 [cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="WorkerFacts.cs", label="Exit HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="7-7"];
m19_3 [file="WorkerFacts.cs", label="HangFire.Storage.Monitoring.SucceededJobDto", span=""];
m5_3 -> m5_6  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m5_3 -> m5_8  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m5_15 -> m5_17  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m5_12 -> m5_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m5_12 -> m5_17  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m5_18 -> m5_26  [color=green, key=1, label=queueName, style=dashed];
m5_22 -> m5_26  [color=green, key=1, label=jobId, style=dashed];
m5_22 -> m5_25  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m5_23 -> m5_26  [color=green, key=1, label=jobId, style=dashed];
m5_23 -> m5_25  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m5_17 -> m5_17  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m5_17 -> m5_21  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m5_16 -> m5_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m5_171 -> m5_183  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m5_172 -> m5_176  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
m5_175 -> m5_178  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m5_175 -> m5_179  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m5_184 -> m5_184  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m5_173 -> m5_178  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m5_173 -> m5_200  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m5_173 -> m5_181  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m5_174 -> m5_183  [color=darkseagreen4, key=1, label=utcNow, style=dashed];
m5_178 -> m5_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_178 -> m5_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_182 -> m5_184  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m5_185 -> m5_185  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m5_185 -> m5_186  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m5_180 -> m5_185  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m5_180 -> m5_186  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m5_177 -> m5_200  [color=darkseagreen4, key=1, label=name, style=dashed];
m5_177 -> m5_195  [color=darkseagreen4, key=1, label=name, style=dashed];
m5_157 -> m5_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_154 -> m5_156  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_154 -> m5_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_154 -> m5_157  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_154 -> m5_165  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_155 -> m5_157  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m5_155 -> m5_158  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m5_156 -> m5_160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_129 -> m5_131  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_129 -> m5_139  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_129 -> m5_132  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_129 -> m5_143  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_129 -> m5_133  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m5_129 -> m5_135  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_129 -> m5_148  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_130 -> m5_132  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m5_130 -> m5_135  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m5_130 -> m5_136  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m5_131 -> m5_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_132 -> m5_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_135 -> m5_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_134 -> m5_148  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m5_110 -> m5_121  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_107 -> m5_109  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m5_107 -> m5_110  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m5_107 -> m5_111  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m5_106 -> m5_108  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_106 -> m5_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_106 -> m5_109  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_106 -> m5_118  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_106 -> m5_110  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_106 -> m5_122  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_108 -> m5_113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_109 -> m5_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_71 -> m5_78  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m5_71 -> m5_80  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m5_71 -> m5_82  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m5_71 -> m5_84  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m5_40 -> m5_51  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m5_40 -> m5_67  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m5_49 -> m5_51  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m5_49 -> m5_52  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m5_50 -> m5_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_51 -> m5_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_43 -> m5_48  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m5_43 -> m5_50  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m5_43 -> m5_63  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m5_43 -> m5_45  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m5_43 -> m5_46  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m5_43 -> m5_47  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m5_41 -> m5_50  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m5_41 -> m5_51  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m5_41 -> m5_67  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m5_41 -> m5_63  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m5_41 -> m5_53  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m5_42 -> m5_47  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m5_42 -> m5_44  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m5_42 -> m5_45  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m5_42 -> m5_46  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m5_206 -> m5_26  [color=green, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m5_206 -> m5_4  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m5_206 -> m5_8  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m5_206 -> m5_25  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m5_206 -> m5_36  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m5_206 -> m5_100  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m5_206 -> m5_103  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m5_206 -> m5_125  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m5_206 -> m5_152  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m5_206 -> m5_169  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m5_206 -> m5_184  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m5_207 -> m5_67  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m5_207 -> m5_63  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m5_209 -> m5_67  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m5_208 -> m5_63  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m5_210 -> m5_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_210 -> m5_118  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_210 -> m5_122  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_211 -> m5_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_212 -> m5_143  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_212 -> m5_148  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_212 -> m5_139  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_213 -> m5_143  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m5_214 -> m5_148  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m5_215 -> m5_165  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_215 -> m5_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_216 -> m5_200  [color=darkseagreen4, key=1, label=name, style=dashed];
m5_216 -> m5_195  [color=darkseagreen4, key=1, label=name, style=dashed];
m5_217 -> m5_200  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m8_91 -> m8_94  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m8_94 -> m8_32  [color=green, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_94 -> m8_37  [color=green, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_94 -> m8_46  [color=green, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_94 -> m8_52  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_94 -> m8_57  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_94 -> m8_62  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_94 -> m8_66  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_94 -> m8_74  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_94 -> m8_78  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_94 -> m8_83  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_94 -> m8_87  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_94 -> m8_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m8_76 -> m8_79  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_76 -> m8_81  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_0 -> m8_3  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_26 -> m8_29  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m8_26 -> m8_32  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m8_26 -> m8_33  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m8_26 -> m8_34  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m8_26 -> m8_35  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m8_26 -> m8_37  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m8_33 -> m8_38  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_33 -> m8_41  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_35 -> m8_38  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m8_35 -> m8_40  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m8_31 -> m8_33  [color=darkseagreen4, key=1, label=createJobSql, style=dashed];
m8_38 -> m8_38  [color=darkseagreen4, key=1, label=parameterIndex, style=dashed];
m8_36 -> m8_38  [color=darkseagreen4, key=1, label=parameterIndex, style=dashed];
m8_54 -> m8_57  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m8_54 -> m8_58  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m8_54 -> m8_64  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m8_57 -> m8_61  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m8_111 -> m8_111  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m8_83 -> m8_86  [color=darkseagreen4, key=1, label=double, style=dashed];
m8_69 -> m8_72  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_69 -> m8_74  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_118 -> m8_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_118 -> m8_18  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_118 -> m8_33  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_118 -> m8_40  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_118 -> m8_74  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_118 -> m8_81  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_289 -> m9_291  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_231 -> m9_233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_346 -> m9_348  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_260 -> m9_262  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_280 -> m9_282  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_128 -> m9_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_59 -> m9_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_209 -> m9_211  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_221 -> m9_223  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_367 -> m9_369  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_198 -> m9_200  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_41 -> m9_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_328 -> m9_330  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_356 -> m9_360  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_357 -> m9_359  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_26 -> m9_423  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerConnection>", style=dashed];
m9_147 -> m9_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_252 -> m9_254  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_408 -> m9_410  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_61 -> m9_66  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_62 -> m9_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_73 -> m9_78  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_74 -> m9_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_78 -> m9_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_90 -> m9_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_90 -> m9_92  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_90 -> m9_94  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_93 -> m9_95  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m9_93 -> m9_96  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m9_93 -> m9_103  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m9_104 -> m9_121  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_104 -> m9_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_104 -> m9_106  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m9_99 -> m9_101  [color=darkseagreen4, key=1, label=job, style=dashed];
m9_99 -> m9_102  [color=darkseagreen4, key=1, label=job, style=dashed];
m9_130 -> m9_134  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_131 -> m9_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_150 -> m9_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_152 -> m9_154  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_152 -> m9_155  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_152 -> m9_156  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_152 -> m9_157  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_178 -> m9_183  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_179 -> m9_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_189 -> m9_194  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_190 -> m9_193  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_200 -> m9_203  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_211 -> m9_214  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_211 -> m9_215  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_213 -> m9_215  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m9_223 -> m9_226  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_233 -> m9_238  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_234 -> m9_237  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_244 -> m9_249  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_245 -> m9_248  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_271 -> m9_276  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_272 -> m9_275  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_282 -> m9_286  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_283 -> m9_285  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_308 -> m9_313  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_309 -> m9_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_320 -> m9_325  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_321 -> m9_324  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_330 -> m9_332  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_330 -> m9_338  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_333 -> m9_335  [color=darkseagreen4, key=1, label=server, style=dashed];
m9_333 -> m9_336  [color=darkseagreen4, key=1, label=server, style=dashed];
m9_339 -> m9_341  [color=darkseagreen4, key=1, label=sameServer, style=dashed];
m9_348 -> m9_352  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_349 -> m9_351  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_359 -> m9_361  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_369 -> m9_373  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_370 -> m9_372  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_380 -> m9_382  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_383 -> m9_387  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_383 -> m9_390  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_383 -> m9_385  [color=darkseagreen4, key=1, label=servers, style=dashed];
m9_396 -> m9_400  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_397 -> m9_399  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_416 -> m9_419  [color=darkseagreen4, key=1, label="System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>", style=dashed];
m9_417 -> m9_419  [color=darkseagreen4, key=1, label=sqlConnection, style=dashed];
m9_296 -> m9_300  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_297 -> m9_299  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_269 -> m9_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_377 -> m9_381  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_378 -> m9_380  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_318 -> m9_320  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_394 -> m9_396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_306 -> m9_308  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_187 -> m9_189  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_167 -> m9_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_406 -> m9_408  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_51 -> m9_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_138 -> m9_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_242 -> m9_244  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_176 -> m9_178  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_71 -> m9_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_427 -> m9_128  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_427 -> m9_280  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_427 -> m9_346  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_427 -> m9_367  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_427 -> m9_394  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerConnectionFacts", style=dashed];
m9_430 -> m9_66  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_431 -> m9_78  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_432 -> m9_134  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_435 -> m9_183  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_436 -> m9_194  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_440 -> m9_238  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_441 -> m9_249  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_443 -> m9_276  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_444 -> m9_286  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_445 -> m9_300  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_446 -> m9_313  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_447 -> m9_325  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_448 -> m9_352  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_449 -> m9_360  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_450 -> m9_373  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m9_451 -> m9_381  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m9_452 -> m9_400  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m11_103 -> m11_105  [color=green, key=1, label="lambda expression", style=dashed];
m11_25 -> m11_31  [color=darkseagreen4, key=1, label=queue, style=dashed];
m11_86 -> m11_88  [color=green, key=1, label="lambda expression", style=dashed];
m11_180 -> m11_182  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m11_21 -> m11_24  [color=green, key=1, label="lambda expression", style=dashed];
m11_127 -> m11_129  [color=green, key=1, label="lambda expression", style=dashed];
m11_115 -> m11_117  [color=green, key=1, label="lambda expression", style=dashed];
m11_12 -> m11_15  [color=green, key=1, label="lambda expression", style=dashed];
m11_152 -> m11_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_139 -> m11_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_154 -> m11_158  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m11_39 -> m11_44  [color=green, key=1, label=queue, style=dashed];
m11_40 -> m11_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_53 -> m11_57  [color=green, key=1, label="lambda expression", style=dashed];
m11_50 -> m11_53  [color=green, key=1, label=cts, style=dashed];
m11_50 -> m11_58  [color=green, key=1, label=cts, style=dashed];
m11_52 -> m11_58  [color=green, key=1, label=queue, style=dashed];
m11_79 -> m11_81  [color=green, key=1, label=payload, style=dashed];
m11_93 -> m11_95  [color=green, key=1, label=fetchedAt, style=dashed];
m11_130 -> m11_132  [color=green, key=1, label=queue, style=dashed];
m11_130 -> m11_135  [color=green, key=1, label=queue, style=dashed];
m11_132 -> m11_134  [color=green, key=1, label="lambda expression", style=dashed];
m11_26 -> m11_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_66 -> m11_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_65 -> m11_70  [color=darkseagreen4, key=1, label=queue, style=dashed];
m11_144 -> m11_146  [color=darkseagreen4, key=1, label=critical, style=dashed];
m11_147 -> m11_149  [color=darkseagreen4, key=1, label="@default", style=dashed];
m11_64 -> m11_66  [color=darkseagreen4, key=1, label=cts, style=dashed];
m11_64 -> m11_70  [color=darkseagreen4, key=1, label=cts, style=dashed];
m11_159 -> m11_161  [color=darkseagreen4, key=1, label=record, style=dashed];
m11_159 -> m11_162  [color=darkseagreen4, key=1, label=record, style=dashed];
m11_155 -> m11_157  [color=darkseagreen4, key=1, label=actions, style=dashed];
m11_155 -> m11_158  [color=darkseagreen4, key=1, label=actions, style=dashed];
m11_74 -> m11_76  [color=green, key=1, label="lambda expression", style=dashed];
m11_3 -> m11_15  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m11_61 -> m11_63  [color=green, key=1, label="lambda expression", style=dashed];
m11_47 -> m11_49  [color=green, key=1, label="lambda expression", style=dashed];
m11_36 -> m11_38  [color=green, key=1, label="lambda expression", style=dashed];
m11_188 -> m11_58  [color=green, key=1, label=cts, style=dashed];
m11_189 -> m11_58  [color=green, key=1, label=queue, style=dashed];
m11_197 -> m11_135  [color=green, key=1, label=queue, style=dashed];
m11_187 -> m11_44  [color=darkseagreen4, key=1, label=queue, style=dashed];
m11_186 -> m11_31  [color=darkseagreen4, key=1, label=queue, style=dashed];
m11_190 -> m11_70  [color=darkseagreen4, key=1, label=cts, style=dashed];
m11_191 -> m11_70  [color=darkseagreen4, key=1, label=queue, style=dashed];
m12_0 -> m12_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_0 -> m12_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_0 -> m12_9  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_4 -> m12_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_29 -> m12_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_16 -> m12_9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerProcessingJob", style=dashed];
m12_37 -> m12_39  [color=darkseagreen4, key=1, label=context, style=dashed];
m12_37 -> m12_40  [color=darkseagreen4, key=1, label=context, style=dashed];
m12_37 -> m12_41  [color=darkseagreen4, key=1, label=context, style=dashed];
m12_19 -> m12_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_44 -> m12_3  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.States.ApplyStateContextFacts", style=dashed];
m12_44 -> m12_4  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.States.ApplyStateContextFacts", style=dashed];
m12_44 -> m12_25  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.States.ApplyStateContextFacts", style=dashed];
m12_44 -> m12_33  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.States.ApplyStateContextFacts", style=dashed];
m12_44 -> m12_39  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.States.ApplyStateContextFacts", style=dashed];
m12_44 -> m12_40  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.States.ApplyStateContextFacts", style=dashed];
m12_44 -> m12_41  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.States.ApplyStateContextFacts", style=dashed];
m14_21 -> m14_23  [color=green, key=1, label=connection, style=dashed];
m14_41 -> m14_63  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_41 -> m14_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_41 -> m14_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_41 -> m14_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_41 -> m14_44  [color=darkseagreen4, key=1, label=parts, style=dashed];
m14_41 -> m14_45  [color=darkseagreen4, key=1, label=parts, style=dashed];
m14_41 -> m14_49  [color=darkseagreen4, key=1, label=parts, style=dashed];
m14_41 -> m14_50  [color=darkseagreen4, key=1, label=parts, style=dashed];
m14_40 -> m14_51  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m14_40 -> m14_53  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m14_42 -> m14_45  [color=darkseagreen4, key=1, label=builder, style=dashed];
m14_42 -> m14_46  [color=darkseagreen4, key=1, label=builder, style=dashed];
m14_42 -> m14_47  [color=darkseagreen4, key=1, label=builder, style=dashed];
m14_42 -> m14_50  [color=darkseagreen4, key=1, label=builder, style=dashed];
m14_42 -> m14_51  [color=darkseagreen4, key=1, label=builder, style=dashed];
m14_43 -> m14_45  [color=darkseagreen4, key=1, label=alias, style=dashed];
m14_48 -> m14_50  [color=darkseagreen4, key=1, label=alias, style=dashed];
m14_32 -> m14_34  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m14_32 -> m14_35  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m14_2 -> m14_5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m14_2 -> m14_9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m14_76 -> m14_78  [color=darkseagreen4, key=1, label=connection, style=dashed];
m14_82 -> m14_17  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m14_82 -> m14_29  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m14_82 -> m14_34  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m14_82 -> m14_35  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m16_59 -> m16_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_65 -> m16_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_98 -> m16_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_99 -> m16_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_85 -> m16_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_85 -> m16_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_86 -> m16_90  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m16_87 -> m16_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_71 -> m16_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_40 -> m16_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_38 -> m16_43  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_39 -> m16_43  [color=darkseagreen4, key=1, label=addAndSetStateSql, style=dashed];
m16_49 -> m16_51  [color=green, key=1, label=table1, style=dashed];
m16_112 -> m16_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_76 -> m16_53  [color=green, key=1, label="HangFire.Tests.States.EnqueuedStateFeature", style=dashed];
m16_76 -> m16_38  [color=darkseagreen4, key=1, label="HangFire.Tests.States.EnqueuedStateFeature", style=dashed];
m16_76 -> m16_41  [color=darkseagreen4, key=1, label="HangFire.Tests.States.EnqueuedStateFeature", style=dashed];
m16_76 -> m16_47  [color=darkseagreen4, key=1, label="HangFire.Tests.States.EnqueuedStateFeature", style=dashed];
m16_76 -> m16_48  [color=darkseagreen4, key=1, label="HangFire.Tests.States.EnqueuedStateFeature", style=dashed];
m16_76 -> m16_60  [color=darkseagreen4, key=1, label="HangFire.Tests.States.EnqueuedStateFeature", style=dashed];
m16_76 -> m16_64  [color=darkseagreen4, key=1, label="HangFire.Tests.States.EnqueuedStateFeature", style=dashed];
m16_76 -> m16_69  [color=darkseagreen4, key=1, label="HangFire.Tests.States.EnqueuedStateFeature", style=dashed];
m16_76 -> m16_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.EnqueuedStateFeature", style=dashed];
m16_77 -> m16_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_93 -> m16_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_24 -> m16_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_105 -> m16_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_12 -> m16_16  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m16_0 -> m16_3  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m16_0 -> m16_6  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m16_33 -> m16_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_120 -> m16_6  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m16_120 -> m16_13  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m16_120 -> m16_14  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m16_120 -> m16_15  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m16_120 -> m16_24  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m16_120 -> m16_83  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m16_120 -> m16_87  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m16_120 -> m16_99  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m16_120 -> m16_117  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m16_124 -> m16_43  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_125 -> m16_43  [color=darkseagreen4, key=1, label="HangFire.States.IState", style=dashed];
m16_126 -> m16_43  [color=darkseagreen4, key=1, label=addAndSetStateSql, style=dashed];
m16_136 -> m16_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_137 -> m16_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_138 -> m16_90  [color=darkseagreen4, key=1, label=double, style=dashed];
m16_139 -> m16_90  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m16_142 -> m16_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_143 -> m16_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_15 -> m17_15  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_15 -> m17_17  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_17 -> m17_17  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_17 -> m17_19  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_4 -> m17_6  [color=darkseagreen4, key=1, label=from, style=dashed];
m17_6 -> m17_9  [color=darkseagreen4, key=1, label=pager, style=dashed];
m17_6 -> m17_36  [color=darkseagreen4, key=1, label=pager, style=dashed];
m17_7 -> m17_13  [color=darkseagreen4, key=1, label=enqueuedJobs, style=dashed];
m17_19 -> m17_19  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_19 -> m17_21  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_24 -> m17_24  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_24 -> m17_26  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_26 -> m17_26  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_26 -> m17_28  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_30 -> m17_30  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_30 -> m17_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_32 -> m17_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_13 -> m17_15  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_21 -> m17_24  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_21 -> m17_21  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_28 -> m17_30  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_28 -> m17_28  [color=darkseagreen4, key=1, label=job, style=dashed];
m17_56 -> m17_16  [color=green, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_5  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_6  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_7  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_8  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_10  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_12  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_22  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_30  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_33  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_34  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_56 -> m17_36  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.EnqueuedJobsPage", style=dashed];
m17_93 -> m17_95  [color=darkseagreen4, key=1, label=table1, style=dashed];
m17_93 -> m17_96  [color=darkseagreen4, key=1, label=table1, style=dashed];
m17_104 -> m17_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_44  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_49  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_54  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_59  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_63  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_68  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_73  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_79  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_83  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_87  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_91  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m17_104 -> m17_100  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m18_5 -> m18_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_165 -> m18_167  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_13 -> m18_19  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_13 -> m18_25  [color=darkseagreen4, key=1, label="HangFire.Server.IJobPerformanceProcess", style=dashed];
m18_13 -> m18_31  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_252 -> m18_259  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_255 -> m18_262  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_251 -> m18_255  [color=darkseagreen4, key=1, label=exception, style=dashed];
m18_251 -> m18_263  [color=darkseagreen4, key=1, label=exception, style=dashed];
m18_251 -> m18_266  [color=darkseagreen4, key=1, label=exception, style=dashed];
m18_7 -> m18_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_9 -> m18_34  [color=green, key=1, label="lambda expression", style=dashed];
m18_9 -> m18_38  [color=green, key=1, label="lambda expression", style=dashed];
m18_59 -> m18_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_242 -> m18_244  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_175 -> m18_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_178 -> m18_186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_192 -> m18_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_22 -> m18_25  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m18_102 -> m18_108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_103 -> m18_112  [color=darkseagreen4, key=1, label=worker, style=dashed];
m18_104 -> m18_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_105 -> m18_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_106 -> m18_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_220 -> m18_227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_221 -> m18_231  [color=darkseagreen4, key=1, label=worker, style=dashed];
m18_222 -> m18_230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_223 -> m18_233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_224 -> m18_236  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_270 -> m18_276  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_273 -> m18_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_11 -> m18_42  [color=green, key=1, label="lambda expression", style=dashed];
m18_11 -> m18_46  [color=green, key=1, label="lambda expression", style=dashed];
m18_50 -> m18_54  [color=green, key=1, label="lambda expression", style=dashed];
m18_75 -> m18_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_76 -> m18_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_286 -> m18_293  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_289 -> m18_296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_42 -> m18_7  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m18_42 -> m18_15  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m18_42 -> m18_17  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m18_157 -> m18_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_130 -> m18_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_143 -> m18_145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_168 -> m18_170  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_181 -> m18_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_211 -> m18_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_245 -> m18_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_263 -> m18_265  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_280 -> m18_282  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_297 -> m18_299  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_154 -> m18_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_66 -> m18_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_122 -> m18_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_122 -> m18_135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_123 -> m18_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_124 -> m18_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_124 -> m18_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_17 -> m18_19  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m18_17 -> m18_31  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m18_91 -> m18_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_92 -> m18_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_198 -> m18_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_199 -> m18_208  [color=darkseagreen4, key=1, label=worker, style=dashed];
m18_200 -> m18_207  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_201 -> m18_210  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_202 -> m18_216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_305 -> m18_8  [color=green, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_11  [color=green, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_4  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_5  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_31  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_55  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_63  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_70  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_74  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_75  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_76  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_90  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_91  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_95  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_92  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_102  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_104  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_112  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_105  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_106  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_122  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_123  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_124  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_126  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_153  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_154  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_157  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_160  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_164  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_165  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_175  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_177  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_178  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_191  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_192  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_198  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_200  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_208  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_201  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_202  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_220  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_222  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_231  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_223  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_224  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_241  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_242  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_252  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_254  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_255  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_270  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_272  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_273  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_288  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_289  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_305 -> m18_302  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.WorkerFacts", style=dashed];
m18_306 -> m18_112  [color=darkseagreen4, key=1, label=worker, style=dashed];
m18_307 -> m18_208  [color=darkseagreen4, key=1, label=worker, style=dashed];
m18_308 -> m18_231  [color=darkseagreen4, key=1, label=worker, style=dashed];
m18_309 -> m18_263  [color=darkseagreen4, key=1, label=exception, style=dashed];
m18_309 -> m18_266  [color=darkseagreen4, key=1, label=exception, style=dashed];
}
