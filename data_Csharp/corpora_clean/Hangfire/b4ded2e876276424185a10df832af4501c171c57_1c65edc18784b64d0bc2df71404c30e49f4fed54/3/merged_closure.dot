digraph  {
n98 [label="Hangfire.Storage.InvocationData", span=""];
n0 [cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", label="Entry Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", span="30-30"];
n1 [cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", label="Type = type", span="33-33"];
n2 [cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", label="Method = method", span="34-34"];
n3 [cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", label="ParameterTypes = parameterTypes", span="35-35"];
n4 [cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", label="Arguments = arguments", span="36-36"];
n5 [cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", label="Exit Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", span="30-30"];
n6 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="44-44"];
n7 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="var type = System.Type.GetType(Type, throwOnError: true, ignoreCase: true)", span="48-48"];
n8 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="var parameterTypes = JobHelper.FromJson<Type[]>(ParameterTypes)", span="49-49"];
n18 [cluster="System.Type.GetType(string, bool, bool)", label="Entry System.Type.GetType(string, bool, bool)", span="0-0"];
n9 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="var method = type.GetNonOpenMatchingMethod(Method, parameterTypes)", span="50-50"];
n11 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="throw new InvalidOperationException(\r\n                        $''The type `{type.FullName}` does not contain a method with signature `{Method}({String.Join('', '', parameterTypes.Select(x => x.Name))})`'');", span="54-55"];
n14 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="return new Job(type, method, arguments);", span="61-61"];
n19 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
n10 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="method == null", span="52-52"];
n20 [cluster="System.Type.GetNonOpenMatchingMethod(string, System.Type[])", label="Entry System.Type.GetNonOpenMatchingMethod(string, System.Type[])", span="41-41"];
n13 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="var arguments = DeserializeArguments(method, serializedArguments)", span="59-59"];
n12 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="var serializedArguments = JobHelper.FromJson<string[]>(Arguments)", span="58-58"];
n24 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="Entry Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", span="118-118"];
n15 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label=Exception, span="63-63"];
n16 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="throw new JobLoadException(''Could not load the job. See inner exception for the details.'', ex);", span="65-65"];
n17 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="Exit Hangfire.Storage.InvocationData.Deserialize()", span="44-44"];
n21 [cluster="System.InvalidOperationException.InvalidOperationException(string)", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
n22 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n23 [cluster="Unk.Join", label="Entry Unk.Join", span=""];
n27 [cluster="lambda expression", label="Entry lambda expression", span="55-55"];
n25 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, params object[])", label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, params object[])", span="145-145"];
n26 [cluster="Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", label="Entry Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", span="31-31"];
n28 [cluster="lambda expression", label="x.Name", span="55-55"];
n29 [cluster="lambda expression", label="Exit lambda expression", span="55-55"];
n30 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="69-69"];
n31 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", label="return new InvocationData(\r\n                job.Type.AssemblyQualifiedName,\r\n                job.Method.Name,\r\n                JobHelper.ToJson(job.Method.GetParameters().Select(x => x.ParameterType).ToArray()),\r\n                JobHelper.ToJson(SerializeArguments(job.Args)));", span="71-75"];
n32 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", label="Exit Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="69-69"];
n33 [cluster="System.Reflection.MethodBase.GetParameters()", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
n34 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n35 [cluster="Unk.ToJson", label="Entry Unk.ToJson", span=""];
n36 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="Entry Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", span="78-78"];
n37 [cluster="Hangfire.Common.JobHelper.ToJson(object)", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
n38 [cluster="lambda expression", label="Entry lambda expression", span="74-74"];
n39 [cluster="lambda expression", label="x.ParameterType", span="74-74"];
n40 [cluster="lambda expression", label="Exit lambda expression", span="74-74"];
n41 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="var serializedArguments = new List<string>(arguments.Count)", span="80-80"];
n42 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label=arguments, span="81-81"];
n54 [cluster="System.Collections.Generic.List<T>.List(int)", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
n51 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="serializedArguments.Add(value)", span="112-112"];
n52 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="return serializedArguments.ToArray();", span="115-115"];
n43 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="string value", span="83-83"];
n44 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="argument != null", span="85-85"];
n45 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="argument is DateTime", span="87-87"];
n46 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="value = ((DateTime) argument).ToString(''o'', CultureInfo.InvariantCulture)", span="89-89"];
n47 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="argument is CancellationToken", span="91-91"];
n49 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="value = JobHelper.ToJson(argument)", span="100-100"];
n50 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="value = null", span="105-105"];
n48 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="value = null", span="96-96"];
n55 [cluster="System.DateTime.ToString(string, System.IFormatProvider)", label="Entry System.DateTime.ToString(string, System.IFormatProvider)", span="0-0"];
n56 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n53 [cluster="Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", label="Exit Hangfire.Storage.InvocationData.SerializeArguments(System.Collections.Generic.IReadOnlyCollection<object>)", span="78-78"];
n57 [cluster="System.Collections.Generic.List<T>.ToArray()", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
n58 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="var parameters = methodInfo.GetParameters()", span="120-120"];
n59 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="var result = new List<object>(arguments.Length)", span="121-121"];
n63 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="var argument = arguments[i]", span="126-126"];
n61 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="i < parameters.Length", span="123-123"];
n62 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="var parameter = parameters[i]", span="125-125"];
n60 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="var i = 0", span="123-123"];
n68 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="result.Add(value)", span="141-141"];
n70 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="return result.ToArray();", span="144-144"];
n69 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="i++", span="123-123"];
n65 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="CoreBackgroundJobPerformer.Substitutions.ContainsKey(parameter.ParameterType)", span="130-130"];
n66 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="value = parameter.ParameterType.GetTypeInfo().IsValueType\r\n                        ? Activator.CreateInstance(parameter.ParameterType)\r\n                        : null", span="132-134"];
n67 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="value = DeserializeArgument(argument, parameter.ParameterType)", span="138-138"];
n64 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="object value", span="128-128"];
n72 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
n75 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label="Entry Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", span="147-147"];
n73 [cluster="System.Type.GetTypeInfo()", label="Entry System.Type.GetTypeInfo()", span="0-0"];
n74 [cluster="System.Activator.CreateInstance(System.Type)", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
n71 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", label="Exit Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", span="118-118"];
n76 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label="object value", span="149-149"];
n77 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label="value = argument != null\r\n                    ? JobHelper.FromJson(argument, type)\r\n                    : null", span="152-154"];
n79 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label="type == typeof (object)", span="162-162"];
n80 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label="value = argument", span="166-166"];
n82 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label="type == typeof(DateTime) && ParseDateTimeArgument(argument, out dateTime)", span="183-183"];
n78 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label=Exception, span="156-156"];
n85 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label="return value;", span="194-194"];
n87 [cluster="Hangfire.Common.JobHelper.FromJson(string, System.Type)", label="Entry Hangfire.Common.JobHelper.FromJson(string, System.Type)", span="46-46"];
n81 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label="DateTime dateTime", span="182-182"];
n83 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label="value = dateTime", span="185-185"];
n84 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label="throw;", span="189-189"];
n88 [cluster="Hangfire.Storage.InvocationData.ParseDateTimeArgument(string, out System.DateTime)", label="Entry Hangfire.Storage.InvocationData.ParseDateTimeArgument(string, out System.DateTime)", span="197-197"];
n86 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", label="Exit Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", span="147-147"];
n89 [cluster="Hangfire.Storage.InvocationData.ParseDateTimeArgument(string, out System.DateTime)", label="DateTime dateTime", span="199-199"];
n90 [cluster="Hangfire.Storage.InvocationData.ParseDateTimeArgument(string, out System.DateTime)", label="var result = DateTime.TryParse(argument, out dateTime)", span="200-200"];
n92 [cluster="Hangfire.Storage.InvocationData.ParseDateTimeArgument(string, out System.DateTime)", label="result = DateTime.TryParseExact(\r\n                    argument, \r\n                    ''MM/dd/yyyy HH:mm:ss.ffff'', \r\n                    CultureInfo.CurrentCulture,\r\n                    DateTimeStyles.None, \r\n                    out dateTime)", span="204-209"];
n91 [cluster="Hangfire.Storage.InvocationData.ParseDateTimeArgument(string, out System.DateTime)", label="!result", span="202-202"];
n96 [cluster="System.DateTime.TryParse(string, out System.DateTime)", label="Entry System.DateTime.TryParse(string, out System.DateTime)", span="0-0"];
n93 [cluster="Hangfire.Storage.InvocationData.ParseDateTimeArgument(string, out System.DateTime)", label="value = dateTime", span="212-212"];
n94 [cluster="Hangfire.Storage.InvocationData.ParseDateTimeArgument(string, out System.DateTime)", label="return result;", span="213-213"];
n97 [cluster="System.DateTime.TryParseExact(string, string, System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)", label="Entry System.DateTime.TryParseExact(string, string, System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)", span="0-0"];
n95 [cluster="Hangfire.Storage.InvocationData.ParseDateTimeArgument(string, out System.DateTime)", label="Exit Hangfire.Storage.InvocationData.ParseDateTimeArgument(string, out System.DateTime)", span="197-197"];
d82 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", color=green, community=0, label="type == typeof(DateTime) && ParseDateTimeArgument(argument, out dateTime)", prediction=0, span="183-183"];
d81 [cluster="Hangfire.Storage.InvocationData.DeserializeArgument(string, System.Type)", color=green, community=0, label="DateTime dateTime", prediction=1, span="182-182"];
m0_0 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="46-46"];
m0_1 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="storage == null", span="48-48"];
m0_3 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="String.IsNullOrEmpty(resource)", span="49-49"];
m0_5 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="(timeout.TotalSeconds + CommandTimeoutAdditionSeconds) > Int32.MaxValue", span="50-50"];
m0_7 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="_storage = storage", span="52-52"];
m0_8 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="_resource = resource", span="53-53"];
m0_9 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="_connection = storage.CreateAndOpenConnection()", span="54-54"];
m0_2 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="throw new ArgumentNullException(''storage'');", span="48-48"];
m0_4 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="throw new ArgumentNullException(''resource'');", span="49-49"];
m0_6 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="throw new ArgumentException(string.Format(''The timeout specified is too large. Please supply a timeout equal to or less than {0} seconds'', Int32.MaxValue - CommandTimeoutAdditionSeconds), ''timeout'');", span="50-50"];
m0_10 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="Acquire(_connection, _resource, timeout)", span="56-56"];
m0_11 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="46-46"];
m0_12 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="InvocationDataFacts.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_43 [cluster="Unk.>", file="InvocationDataFacts.cs", label="Entry Unk.>", span=""];
m0_14 [cluster="System.ArgumentException.ArgumentException(string, string)", file="InvocationDataFacts.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m0_16 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="InvocationDataFacts.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="217-217"];
m0_13 [cluster="string.IsNullOrEmpty(string)", file="InvocationDataFacts.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m0_42 [cluster="Unk.Execute", file="InvocationDataFacts.cs", label="Entry Unk.Execute", span=""];
m0_45 [cluster="Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", file="InvocationDataFacts.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", span="22-22"];
m0_47 [cluster="Unk.Format", file="InvocationDataFacts.cs", label="Entry Unk.Format", span=""];
m0_48 [cluster="string.Format(string, object, object)", file="InvocationDataFacts.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m0_24 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="InvocationDataFacts.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", span="113-113"];
m0_49 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="InvocationDataFacts.cs", label="var parameters = new DynamicParameters()", span="115-115"];
m0_50 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="InvocationDataFacts.cs", label="parameters.Add(''@Resource'', resource)", span="116-116"];
m0_53 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="InvocationDataFacts.cs", label="connection.Execute(\r\n                @''sp_releaseapplock'',\r\n                parameters,\r\n                commandType: CommandType.StoredProcedure)", span="120-123"];
m0_56 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="InvocationDataFacts.cs", label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                        ''Could not release a lock on the resource '{0}': Server returned the '{1}' error.'',\r\n                        resource,\r\n                        releaseResult));", span="129-133"];
m0_51 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="InvocationDataFacts.cs", label="parameters.Add(''@LockOwner'', LockOwner)", span="117-117"];
m0_52 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="InvocationDataFacts.cs", label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="118-118"];
m0_54 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="InvocationDataFacts.cs", label="var releaseResult = parameters.Get<int>(''@Result'')", span="125-125"];
m0_55 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="InvocationDataFacts.cs", label="releaseResult < 0", span="127-127"];
m0_57 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="InvocationDataFacts.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", span="113-113"];
m0_46 [cluster="Unk.ContainsKey", file="InvocationDataFacts.cs", label="Entry Unk.ContainsKey", span=""];
m0_17 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="75-75"];
m0_25 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="var parameters = new DynamicParameters()", span="77-77"];
m0_26 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="parameters.Add(''@Resource'', resource)", span="78-78"];
m0_30 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="parameters.Add(''@LockTimeout'', timeout.TotalMilliseconds)", span="82-82"];
m0_33 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="connection.Execute(\r\n                @''sp_getapplock'',\r\n                parameters,\r\n                commandTimeout: commandTimeout,\r\n                commandType: CommandType.StoredProcedure)", span="88-92"];
m0_37 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="throw new DistributedLockTimeoutException(resource);", span="100-100"];
m0_38 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                    ''Could not place a lock on the resource '{0}': {1}.'',\r\n                    resource,\r\n                    LockErrorMessages.ContainsKey(lockResult)\r\n                        ? LockErrorMessages[lockResult]\r\n                        : String.Format(''Server returned the '{0}' error.'', lockResult)));", span="103-109"];
m0_27 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="parameters.Add(''@DbPrincipal'', ''public'')", span="79-79"];
m0_28 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="parameters.Add(''@LockMode'', LockMode)", span="80-80"];
m0_29 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="parameters.Add(''@LockOwner'', LockOwner)", span="81-81"];
m0_31 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="83-83"];
m0_34 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="var lockResult = parameters.Get<int>(''@Result'')", span="94-94"];
m0_32 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="var commandTimeout = (int)(timeout.TotalSeconds + CommandTimeoutAdditionSeconds)", span="86-86"];
m0_35 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="lockResult < 0", span="96-96"];
m0_36 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="lockResult == -1", span="98-98"];
m0_39 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="InvocationDataFacts.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="75-75"];
m0_15 [cluster="string.Format(string, object)", file="InvocationDataFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_44 [cluster="Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", file="InvocationDataFacts.cs", label="Entry Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", span="6-6"];
m0_18 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="InvocationDataFacts.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="59-59"];
m0_19 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="InvocationDataFacts.cs", label=_completed, span="61-61"];
m0_20 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="InvocationDataFacts.cs", label="return;", span="61-61"];
m0_21 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="InvocationDataFacts.cs", label="_completed = true", span="63-63"];
m0_22 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="InvocationDataFacts.cs", label="Release(_connection, _resource)", span="67-67"];
m0_23 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="InvocationDataFacts.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="59-59"];
m0_40 [cluster="DynamicParameters.cstr", file="InvocationDataFacts.cs", label="Entry DynamicParameters.cstr", span=""];
m0_41 [cluster="Unk.Add", file="InvocationDataFacts.cs", label="Entry Unk.Add", span=""];
m0_58 [file="InvocationDataFacts.cs", label="Hangfire.SqlServer.SqlServerDistributedLock", span=""];
m1_0 [cluster="Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", file="IRecurringJobManager.cs", label="Entry Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", span="23-23"];
m1_1 [cluster="Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", file="IRecurringJobManager.cs", label="Exit Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", span="23-23"];
m1_4 [cluster="Hangfire.IRecurringJobManager.RemoveIfExists(string)", file="IRecurringJobManager.cs", label="Entry Hangfire.IRecurringJobManager.RemoveIfExists(string)", span="30-30"];
m1_5 [cluster="Hangfire.IRecurringJobManager.RemoveIfExists(string)", file="IRecurringJobManager.cs", label="Exit Hangfire.IRecurringJobManager.RemoveIfExists(string)", span="30-30"];
m1_2 [cluster="Hangfire.IRecurringJobManager.Trigger(string)", file="IRecurringJobManager.cs", label="Entry Hangfire.IRecurringJobManager.Trigger(string)", span="29-29"];
m1_3 [cluster="Hangfire.IRecurringJobManager.Trigger(string)", file="IRecurringJobManager.cs", label="Exit Hangfire.IRecurringJobManager.Trigger(string)", span="29-29"];
m5_3 [cluster="HangFire.Common.States.JobState.GetProperties(HangFire.Common.JobMethod)", file="RecurringJobManager.cs", label="Entry HangFire.Common.States.JobState.GetProperties(HangFire.Common.JobMethod)", span="31-31"];
m5_4 [cluster="HangFire.Common.States.JobState.GetProperties(HangFire.Common.JobMethod)", color=green, community=0, file="RecurringJobManager.cs", label="return new Dictionary<string, string>();", prediction=2, span="33-33"];
m5_5 [cluster="HangFire.Common.States.JobState.GetProperties(HangFire.Common.JobMethod)", file="RecurringJobManager.cs", label="Exit HangFire.Common.States.JobState.GetProperties(HangFire.Common.JobMethod)", span="31-31"];
m5_6 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobManager.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m5_0 [cluster="HangFire.Common.States.JobState.JobState(string)", file="RecurringJobManager.cs", label="Entry HangFire.Common.States.JobState.JobState(string)", span="22-22"];
m5_1 [cluster="HangFire.Common.States.JobState.JobState(string)", color=green, community=0, file="RecurringJobManager.cs", label="Reason = reason", prediction=3, span="24-24"];
m5_2 [cluster="HangFire.Common.States.JobState.JobState(string)", file="RecurringJobManager.cs", label="Exit HangFire.Common.States.JobState.JobState(string)", span="22-22"];
m5_7 [file="RecurringJobManager.cs", label="HangFire.Common.States.JobState", span=""];
m6_123 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255"];
m6_124 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RecurringJobManagerExtensions.cs", label="key == null", span="257-257"];
m6_126 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RecurringJobManagerExtensions.cs", label="toScore < fromScore", span="258-258"];
m6_128 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RecurringJobManagerExtensions.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="260-263"];
m6_125 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="257-257"];
m6_127 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="258-258"];
m6_129 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255"];
m6_47 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="104-104"];
m6_157 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301"];
m6_158 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="RecurringJobManagerExtensions.cs", label="serverId == null", span="303-303"];
m6_160 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="RecurringJobManagerExtensions.cs", label="context == null", span="304-304"];
m6_162 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="RecurringJobManagerExtensions.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="306-311"];
m6_163 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="RecurringJobManagerExtensions.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server with (holdlock) as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="313-319"];
m6_159 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''serverId'');", span="303-303"];
m6_161 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''context'');", span="304-304"];
m6_164 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301"];
m6_27 [cluster="HangFire.Server.Worker.Dispose()", file="RecurringJobManagerExtensions.cs", label="_jobIsReady.Dispose()", span="91-91"];
m6_28 [cluster="HangFire.Server.Worker.Dispose()", file="RecurringJobManagerExtensions.cs", label="Exit HangFire.Server.Worker.Dispose()", span="81-81"];
m6_30 [cluster="System.Threading.CancellationTokenSource.Dispose()", file="RecurringJobManagerExtensions.cs", label="Entry System.Threading.CancellationTokenSource.Dispose()", span="0-0"];
m6_32 [cluster="HangFire.Server.Worker.DoWork()", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Server.Worker.DoWork()", span="95-95"];
m6_34 [cluster="HangFire.Server.Worker.DoWork()", file="RecurringJobManagerExtensions.cs", label="_manager.NotifyReady(this)", span="101-101"];
m6_29 [cluster="System.Threading.Thread.Join()", file="RecurringJobManagerExtensions.cs", label="Entry System.Threading.Thread.Join()", span="0-0"];
m6_31 [cluster="System.Threading.ManualResetEventSlim.Dispose()", file="RecurringJobManagerExtensions.cs", label="Entry System.Threading.ManualResetEventSlim.Dispose()", span="0-0"];
m6_33 [cluster="HangFire.Server.Worker.DoWork()", file="RecurringJobManagerExtensions.cs", label=true, span="99-99"];
m6_35 [cluster="HangFire.Server.Worker.DoWork()", file="RecurringJobManagerExtensions.cs", label="_jobIsReady.Wait(_cts.Token)", span="102-102"];
m6_171 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331"];
m6_172 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="RecurringJobManagerExtensions.cs", label="serverId == null", span="333-333"];
m6_174 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="RecurringJobManagerExtensions.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="335-337"];
m6_173 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''serverId'');", span="333-333"];
m6_175 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331"];
m6_101 [cluster="Hangfire.Storage.StateData.StateData()", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.Storage.StateData.StateData()", span="21-21"];
m6_165 [cluster="Hangfire.SqlServer.Entities.ServerData.ServerData()", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m6_2 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="_context = context", prediction=4, span="35-35"];
m6_3 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="Logger = LogManager.GetLogger(String.Format(''HangFire.Worker.{0}'', _context.WorkerNumber))", prediction=5, span="37-37"];
m6_5 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="_thread.Start()", prediction=6, span="44-44"];
m6_4 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="_thread = new Thread(DoWork)\r\n                {\r\n                    Name = String.Format(''HangFire.Worker.{0}'', _context.WorkerNumber),\r\n                    IsBackground = true\r\n                }", prediction=7, span="39-43"];
m6_11 [cluster="HangFire.Server.Worker.SendStop()", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Server.Worker.SendStop()", span="47-47"];
m6_21 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="39-39"];
m6_144 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289"];
m6_145 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="RecurringJobManagerExtensions.cs", label="key == null", span="291-291"];
m6_147 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="RecurringJobManagerExtensions.cs", label="var result = _connection.Query<SqlHash>(\r\n                ''select Field, Value from HangFire.Hash with (forceseek) where [Key] = @key'',\r\n                new { key })\r\n                .ToDictionary(x => x.Field, x => x.Value)", span="293-296"];
m6_146 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="291-291"];
m6_148 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="RecurringJobManagerExtensions.cs", label="return result.Count != 0 ? result : null;", span="298-298"];
m6_149 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289"];
m6_0 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", span="32-32"];
m6_1 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="_manager = manager", prediction=8, span="34-34"];
m6_36 [cluster="Unk.Select", file="RecurringJobManagerExtensions.cs", label="Entry Unk.Select", span=""];
m6_37 [cluster="Unk.Distinct", file="RecurringJobManagerExtensions.cs", label="Entry Unk.Distinct", span=""];
m6_38 [cluster="Unk.ToArray", file="RecurringJobManagerExtensions.cs", label="Entry Unk.ToArray", span=""];
m6_41 [cluster="Unk.GetJobQueue", file="RecurringJobManagerExtensions.cs", label="Entry Unk.GetJobQueue", span=""];
m6_42 [cluster="Unk.Dequeue", file="RecurringJobManagerExtensions.cs", label="Entry Unk.Dequeue", span=""];
m6_40 [cluster="string.Join(string, params string[])", file="RecurringJobManagerExtensions.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m6_39 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="RecurringJobManagerExtensions.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m6_43 [cluster="lambda expression", file="RecurringJobManagerExtensions.cs", label="Entry lambda expression", span="89-89"];
m6_69 [cluster="Unk.Warn", file="RecurringJobManagerExtensions.cs", label="Entry Unk.Warn", span=""];
m6_25 [cluster="HangFire.Server.Worker.Dispose()", file="RecurringJobManagerExtensions.cs", label="_thread.Join()", span="88-88"];
m6_251 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467"];
m6_252 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="RecurringJobManagerExtensions.cs", label="key == null", span="469-469"];
m6_255 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="RecurringJobManagerExtensions.cs", label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="478-480"];
m6_253 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="469-469"];
m6_254 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="RecurringJobManagerExtensions.cs", label="string query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] desc) as row_num \r\n	from HangFire.List\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="471-476"];
m6_256 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467"];
m6_73 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''id'');", span="156-156"];
m6_49 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''job'');", span="110-110"];
m6_228 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430"];
m6_229 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="RecurringJobManagerExtensions.cs", label="key == null", span="432-432"];
m6_231 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="RecurringJobManagerExtensions.cs", label="name == null", span="433-433"];
m6_234 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="RecurringJobManagerExtensions.cs", label="return _connection.Query<string>(query, new { key = key, field = name }).SingleOrDefault();", span="439-439"];
m6_230 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="432-432"];
m6_232 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''name'');", span="433-433"];
m6_233 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="RecurringJobManagerExtensions.cs", label="string query = @''\r\nselect [Value] from HangFire.Hash\r\nwhere [Key] = @key and [Field] = @field''", span="435-437"];
m6_235 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430"];
m6_89 [cluster="Hangfire.Storage.JobData.JobData()", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.Storage.JobData.JobData()", span="21-21"];
m6_70 [cluster="HangFire.States.ProcessingState.ProcessingState(string, string, string)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string, string, string)", span="10-10"];
m6_122 [cluster="HashSet<string>.cstr", file="RecurringJobManagerExtensions.cs", label="Entry HashSet<string>.cstr", span=""];
m6_22 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="76-76"];
m6_23 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:{0}'', resource),\r\n                timeout,\r\n                _connection);", span="78-81"];
m6_24 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="76-76"];
m6_26 [cluster="string.Format(string, object)", file="RecurringJobManagerExtensions.cs", label="Entry string.Format(string, object)", span="0-0"];
m6_176 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340"];
m6_177 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="timeOut.Duration() != timeOut", span="342-342"];
m6_178 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="344-344"];
m6_179 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="347-349"];
m6_180 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340"];
m6_16 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.Dispose()", span="63-63"];
m6_17 [cluster="Unk.Dispose", file="RecurringJobManagerExtensions.cs", label="Entry Unk.Dispose", span=""];
m6_18 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71"];
m6_19 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="RecurringJobManagerExtensions.cs", label="return new SqlServerWriteOnlyTransaction(_connection, _isolationLevel, _queueProviders);", span="73-73"];
m6_20 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71"];
m6_12 [cluster="HangFire.Server.Worker.SendStop()", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="_stopSent = true", prediction=9, span="49-49"];
m6_242 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453"];
m6_243 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="RecurringJobManagerExtensions.cs", label="key == null", span="455-455"];
m6_246 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="RecurringJobManagerExtensions.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="461-461"];
m6_244 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="455-455"];
m6_245 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="RecurringJobManagerExtensions.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.List\r\nwhere [Key] = @key''", span="457-459"];
m6_247 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="RecurringJobManagerExtensions.cs", label="!result.HasValue", span="462-462"];
m6_249 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="RecurringJobManagerExtensions.cs", label="return result.Value - DateTime.UtcNow;", span="464-464"];
m6_248 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="RecurringJobManagerExtensions.cs", label="return TimeSpan.FromSeconds(-1);", span="462-462"];
m6_250 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453"];
m6_13 [cluster="HangFire.Server.Worker.SendStop()", color=green, community=0, file="RecurringJobManagerExtensions.cs", label="_cts.Cancel()", prediction=6, span="50-50"];
m6_14 [cluster="HangFire.Server.Worker.SendStop()", file="RecurringJobManagerExtensions.cs", label="Exit HangFire.Server.Worker.SendStop()", span="47-47"];
m6_15 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="RecurringJobManagerExtensions.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m6_213 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405"];
m6_214 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="RecurringJobManagerExtensions.cs", label="key == null", span="407-407"];
m6_217 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="RecurringJobManagerExtensions.cs", label="return _connection.Query<long>(query, new { key = key }).Single();", span="413-413"];
m6_215 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="407-407"];
m6_216 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="RecurringJobManagerExtensions.cs", label="string query = @''\r\nselect count([Id]) from HangFire.Hash\r\nwhere [Key] = @key''", span="409-411"];
m6_218 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405"];
m6_64 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="JobState.Apply(\r\n                    _redis,\r\n                    new SucceededState(payload.Id, ''The job has been completed successfully.''),\r\n                    ProcessingState.Name)", span="180-183"];
m6_142 [cluster="TransactionScope.cstr", file="RecurringJobManagerExtensions.cs", label="Entry TransactionScope.cstr", span=""];
m6_207 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391"];
m6_208 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="RecurringJobManagerExtensions.cs", label="key == null", span="393-393"];
m6_211 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="RecurringJobManagerExtensions.cs", label="return _connection.Query<long?>(query, new { key = key }).Single() ?? 0;", span="402-402"];
m6_209 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="393-393"];
m6_210 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="RecurringJobManagerExtensions.cs", label="string query = @''\r\nselect sum(s.[Value]) from (select sum([Value]) as [Value] from HangFire.Counter\r\nwhere [Key] = @key\r\nunion all\r\nselect [Value] from HangFire.AggregatedCounter\r\nwhere [Key] = @key) as s''", span="395-400"];
m6_212 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391"];
m6_166 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322"];
m6_167 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="RecurringJobManagerExtensions.cs", label="serverId == null", span="324-324"];
m6_169 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="RecurringJobManagerExtensions.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="326-328"];
m6_168 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''serverId'');", span="324-324"];
m6_170 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322"];
m6_100 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="RecurringJobManagerExtensions.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
m6_181 [cluster="System.TimeSpan.Duration()", file="RecurringJobManagerExtensions.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m6_154 [cluster="lambda expression", file="RecurringJobManagerExtensions.cs", label="Entry lambda expression", span="296-296"];
m6_44 [cluster="HangFire.Server.JobManager.NotifyReady(HangFire.Server.Worker)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Server.JobManager.NotifyReady(HangFire.Server.Worker)", span="80-80"];
m6_45 [cluster="System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)", file="RecurringJobManagerExtensions.cs", label="Entry System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)", span="0-0"];
m6_151 [cluster="lambda expression", file="RecurringJobManagerExtensions.cs", label="Entry lambda expression", span="296-296"];
m6_152 [cluster="lambda expression", file="RecurringJobManagerExtensions.cs", label="x.Field", span="296-296"];
m6_153 [cluster="lambda expression", file="RecurringJobManagerExtensions.cs", label="Exit lambda expression", span="296-296"];
m6_155 [cluster="lambda expression", file="RecurringJobManagerExtensions.cs", label="x.Value", span="296-296"];
m6_156 [cluster="lambda expression", file="RecurringJobManagerExtensions.cs", label="Exit lambda expression", span="296-296"];
m6_131 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266"];
m6_132 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManagerExtensions.cs", label="key == null", span="268-268"];
m6_134 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManagerExtensions.cs", label="keyValuePairs == null", span="269-269"];
m6_138 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManagerExtensions.cs", label=keyValuePairs, span="280-280"];
m6_139 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManagerExtensions.cs", label="_connection.Execute(sql, new { key = key, field = keyValuePair.Key, value = keyValuePair.Value })", span="282-282"];
m6_133 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="268-268"];
m6_135 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''keyValuePairs'');", span="269-269"];
m6_136 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManagerExtensions.cs", label="string sql = @''\r\nmerge HangFire.Hash with (holdlock) as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="271-276"];
m6_137 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManagerExtensions.cs", label="var transaction = new TransactionScope()", span="278-278"];
m6_140 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManagerExtensions.cs", label="transaction.Complete()", span="285-285"];
m6_141 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266"];
m6_196 [cluster="Unk.ToList", file="RecurringJobManagerExtensions.cs", label="Entry Unk.ToList", span=""];
m6_219 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416"];
m6_220 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="RecurringJobManagerExtensions.cs", label="key == null", span="418-418"];
m6_223 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="RecurringJobManagerExtensions.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="424-424"];
m6_221 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="418-418"];
m6_222 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="RecurringJobManagerExtensions.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.Hash\r\nwhere [Key] = @key''", span="420-422"];
m6_224 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="RecurringJobManagerExtensions.cs", label="!result.HasValue", span="425-425"];
m6_226 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="RecurringJobManagerExtensions.cs", label="return result.Value - DateTime.UtcNow;", span="427-427"];
m6_225 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="RecurringJobManagerExtensions.cs", label="return TimeSpan.FromSeconds(-1);", span="425-425"];
m6_227 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416"];
m6_74 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="RecurringJobManagerExtensions.cs", label="string sql = \r\n                @''select InvocationData, StateName, Arguments, CreatedAt from HangFire.Job where Id = @id''", span="158-159"];
m6_190 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361"];
m6_191 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="RecurringJobManagerExtensions.cs", label="key == null", span="363-363"];
m6_194 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="RecurringJobManagerExtensions.cs", label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="372-374"];
m6_192 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="363-363"];
m6_193 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="RecurringJobManagerExtensions.cs", label="string query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] ASC) as row_num \r\n	from HangFire.[Set]\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="365-370"];
m6_195 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361"];
m6_71 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", span="47-47"];
m6_72 [cluster="HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Server.ServerJobDescriptor.ServerJobDescriptor(IRedisClient, HangFire.JobActivator, HangFire.Server.JobPayload)", span="12-12"];
m6_75 [cluster="Unk.Error", file="RecurringJobManagerExtensions.cs", label="Entry Unk.Error", span=""];
m6_76 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m6_78 [cluster="HangFire.Server.JobFetcher.RemoveFromFetchedQueue(IRedisClient, string, string)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.Server.JobFetcher.RemoveFromFetchedQueue(IRedisClient, string, string)", span="84-84"];
m6_79 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="RecurringJobManagerExtensions.cs", label="HangFire.Server.Worker", span=""];
m6_85 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="RecurringJobManagerExtensions.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                CreatedAt = jobData.CreatedAt,\r\n                LoadException = loadException\r\n            };", span="182-188"];
m6_77 [cluster="HangFire.States.FailedState.FailedState(string, string, System.Exception)", file="RecurringJobManagerExtensions.cs", label="Entry HangFire.States.FailedState.FailedState(string, string, System.Exception)", span="10-10"];
m6_82 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="RecurringJobManagerExtensions.cs", label="job = invocationData.Deserialize()", span="175-175"];
m6_80 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="RecurringJobManagerExtensions.cs", label="Job job = null", span="170-170"];
m6_81 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="RecurringJobManagerExtensions.cs", label="JobLoadException loadException = null", span="171-171"];
m6_83 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="RecurringJobManagerExtensions.cs", label=JobLoadException, span="177-177"];
m6_84 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="RecurringJobManagerExtensions.cs", label="loadException = ex", span="179-179"];
m6_86 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154"];
m6_183 [cluster="System.TimeSpan.Negate()", file="RecurringJobManagerExtensions.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m6_143 [cluster="Unk.Complete", file="RecurringJobManagerExtensions.cs", label="Entry Unk.Complete", span=""];
m6_48 [cluster="string.Format(string, params object[])", file="RecurringJobManagerExtensions.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m6_50 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="String.IsNullOrEmpty(payload.Type)", span="127-127"];
m6_53 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="!JobState.Apply(\r\n                _redis,\r\n                new ProcessingState(payload.Id, ''Worker has started processing.'', _context.ServerName),\r\n                EnqueuedState.Name)", span="136-139"];
m6_54 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="return;", span="141-141"];
m6_55 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="Exception exception = null", span="149-149"];
m6_56 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="ServerJobDescriptor jobDescriptor = null", span="151-151"];
m6_58 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="var performContext = new PerformContext(\r\n                    _context, jobDescriptor)", span="157-158"];
m6_51 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="Logger.Warn(String.Format(\r\n                    ''Could not process the job '{0}': it does not exist in the storage.'',\r\n                    payload.Id))", span="129-131"];
m6_52 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="return;", span="133-133"];
m6_59 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="_context.Performer.PerformJob(performContext)", span="160-160"];
m6_62 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="Logger.Error(String.Format(\r\n                    ''Failed to process the job '{0}': unexpected exception caught.'',\r\n                    payload.Id))", span="166-168"];
m6_57 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="jobDescriptor = new ServerJobDescriptor(\r\n                    _redis, _context.Activator, payload)", span="154-155"];
m6_61 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="exception = ex", span="164-164"];
m6_60 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label=Exception, span="162-162"];
m6_63 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="exception == null", span="178-178"];
m6_65 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="RecurringJobManagerExtensions.cs", label="JobState.Apply(\r\n                    _redis,\r\n                    new FailedState(payload.Id, ''The job has been failed.'', exception),\r\n                    ProcessingState.Name)", span="187-190"];
m6_189 [cluster="Unk.First", file="RecurringJobManagerExtensions.cs", label="Entry Unk.First", span=""];
m6_46 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m6_66 [cluster="System.DateTime.Add(System.TimeSpan)", file="RecurringJobManagerExtensions.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m6_67 [cluster="Unk.>", file="RecurringJobManagerExtensions.cs", label="Entry Unk.>", span=""];
m6_182 [cluster="System.ArgumentException.ArgumentException(string, string)", file="RecurringJobManagerExtensions.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m6_116 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244"];
m6_117 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="RecurringJobManagerExtensions.cs", label="key == null", span="246-246"];
m6_119 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="RecurringJobManagerExtensions.cs", label="var result = _connection.Query<string>(\r\n                @''select Value from HangFire.[Set] where [Key] = @key'',\r\n                new { key })", span="248-250"];
m6_118 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="246-246"];
m6_120 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="RecurringJobManagerExtensions.cs", label="return new HashSet<string>(result);", span="252-252"];
m6_121 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244"];
m6_150 [cluster="Unk.ToDictionary", file="RecurringJobManagerExtensions.cs", label="Entry Unk.ToDictionary", span=""];
m6_257 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483"];
m6_258 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="RecurringJobManagerExtensions.cs", label="key == null", span="485-485"];
m6_261 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="RecurringJobManagerExtensions.cs", label="return _connection.Query<string>(query, new { key = key }).ToList();", span="492-492"];
m6_259 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="485-485"];
m6_260 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="RecurringJobManagerExtensions.cs", label="string query = @''\r\nselect [Value] from HangFire.List\r\nwhere [Key] = @key\r\norder by [Id] desc''", span="487-490"];
m6_262 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483"];
m6_102 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219"];
m6_103 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="RecurringJobManagerExtensions.cs", label="id == null", span="221-221"];
m6_105 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="RecurringJobManagerExtensions.cs", label="name == null", span="222-222"];
m6_107 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="RecurringJobManagerExtensions.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter with (holdlock) as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="224-230"];
m6_104 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''id'');", span="221-221"];
m6_106 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''name'');", span="222-222"];
m6_108 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219"];
m6_130 [cluster="System.ArgumentException.ArgumentException(string)", file="RecurringJobManagerExtensions.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m6_206 [cluster="System.TimeSpan.FromSeconds(double)", file="RecurringJobManagerExtensions.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m6_197 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377"];
m6_198 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="RecurringJobManagerExtensions.cs", label="key == null", span="379-379"];
m6_201 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="RecurringJobManagerExtensions.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="385-385"];
m6_199 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="379-379"];
m6_200 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="RecurringJobManagerExtensions.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.[Set]\r\nwhere [Key] = @key''", span="381-383"];
m6_202 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="RecurringJobManagerExtensions.cs", label="!result.HasValue", span="386-386"];
m6_204 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="RecurringJobManagerExtensions.cs", label="return result.Value - DateTime.UtcNow;", span="388-388"];
m6_203 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="RecurringJobManagerExtensions.cs", label="return TimeSpan.FromSeconds(-1);", span="386-386"];
m6_205 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377"];
m6_109 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233"];
m6_110 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="RecurringJobManagerExtensions.cs", label="id == null", span="235-235"];
m6_112 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="RecurringJobManagerExtensions.cs", label="name == null", span="236-236"];
m6_114 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="RecurringJobManagerExtensions.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="238-241"];
m6_111 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''id'');", span="235-235"];
m6_113 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''name'');", span="236-236"];
m6_115 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233"];
m6_90 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191"];
m6_91 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="RecurringJobManagerExtensions.cs", label="jobId == null", span="193-193"];
m6_94 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="RecurringJobManagerExtensions.cs", label="var sqlState = _connection.Query<SqlState>(sql, new { jobId = jobId }).SingleOrDefault()", span="201-201"];
m6_92 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''jobId'');", span="193-193"];
m6_93 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="RecurringJobManagerExtensions.cs", label="string sql = @''\r\nselect s.Name, s.Reason, s.Data\r\nfrom HangFire.State s\r\ninner join HangFire.Job j on j.StateId = s.Id\r\nwhere j.Id = @jobId''", span="195-199"];
m6_95 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="RecurringJobManagerExtensions.cs", label="sqlState == null", span="202-202"];
m6_97 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="RecurringJobManagerExtensions.cs", label="var data = new Dictionary<string, string>(\r\n                JobHelper.FromJson<Dictionary<string, string>>(sqlState.Data),\r\n                StringComparer.OrdinalIgnoreCase)", span="207-209"];
m6_98 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="RecurringJobManagerExtensions.cs", label="return new StateData\r\n            {\r\n                Name = sqlState.Name,\r\n                Reason = sqlState.Reason,\r\n                Data = data\r\n            };", span="211-216"];
m6_96 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="RecurringJobManagerExtensions.cs", label="return null;", span="204-204"];
m6_99 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191"];
m6_68 [cluster="Unk.Single", file="RecurringJobManagerExtensions.cs", label="Entry Unk.Single", span=""];
m6_184 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352"];
m6_185 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="RecurringJobManagerExtensions.cs", label="key == null", span="354-354"];
m6_187 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="RecurringJobManagerExtensions.cs", label="return _connection.Query<int>(\r\n                ''select count([Key]) from HangFire.[Set] where [Key] = @key'',\r\n                new { key = key }).First();", span="356-358"];
m6_186 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="354-354"];
m6_188 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352"];
m6_236 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="RecurringJobManagerExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442"];
m6_237 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="RecurringJobManagerExtensions.cs", label="key == null", span="444-444"];
m6_240 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="RecurringJobManagerExtensions.cs", label="return _connection.Query<long>(query, new { key = key }).Single();", span="450-450"];
m6_238 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="RecurringJobManagerExtensions.cs", label="throw new ArgumentNullException(''key'');", span="444-444"];
m6_239 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="RecurringJobManagerExtensions.cs", label="string query = @''\r\nselect count([Id]) from HangFire.List\r\nwhere [Key] = @key''", span="446-448"];
m6_241 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="RecurringJobManagerExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442"];
m6_87 [cluster="Unk.SingleOrDefault", file="RecurringJobManagerExtensions.cs", label="Entry Unk.SingleOrDefault", span=""];
m6_263 [file="RecurringJobManagerExtensions.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m7_0 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", file="RecurringJobOptions.cs", label="Entry Hangfire.RecurringJobOptions.RecurringJobOptions()", span="27-27"];
m7_1 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", color=green, community=0, file="RecurringJobOptions.cs", label="TimeZone = TimeZoneInfo.Utc", prediction=11, span="29-29"];
m7_2 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", color=green, community=0, file="RecurringJobOptions.cs", label="QueueName = EnqueuedState.DefaultQueue", prediction=12, span="30-30"];
m7_3 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", file="RecurringJobOptions.cs", label="Exit Hangfire.RecurringJobOptions.RecurringJobOptions()", span="27-27"];
m7_4 [file="RecurringJobOptions.cs", label="Hangfire.RecurringJobOptions", span=""];
m8_35 [cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="RecurringJobsPage.generated.cs", label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55"];
m8_38 [cluster="HangFire.States.DeletedState.DeletedState()", file="RecurringJobsPage.generated.cs", label="Entry HangFire.States.DeletedState.DeletedState()", span="27-27"];
m8_22 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.DeletedAtProperty_ReturnsCurrentUtcDate()", file="RecurringJobsPage.generated.cs", label="Entry HangFire.Core.Tests.States.DeletedStateFacts.DeletedAtProperty_ReturnsCurrentUtcDate()", span="47-47"];
m8_23 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.DeletedAtProperty_ReturnsCurrentUtcDate()", file="RecurringJobsPage.generated.cs", label="var state = CreateState()", span="49-49"];
m8_24 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.DeletedAtProperty_ReturnsCurrentUtcDate()", file="RecurringJobsPage.generated.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < state.DeletedAt)", span="51-51"];
m8_25 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.DeletedAtProperty_ReturnsCurrentUtcDate()", file="RecurringJobsPage.generated.cs", label="Assert.True(state.DeletedAt < DateTime.UtcNow.AddMinutes(1))", span="52-52"];
m8_26 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.DeletedAtProperty_ReturnsCurrentUtcDate()", file="RecurringJobsPage.generated.cs", label="Exit HangFire.Core.Tests.States.DeletedStateFacts.DeletedAtProperty_ReturnsCurrentUtcDate()", span="47-47"];
m8_27 [cluster="System.DateTime.AddMinutes(double)", file="RecurringJobsPage.generated.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m8_16 [cluster="Unk.True", file="RecurringJobsPage.generated.cs", label="Entry Unk.True", span=""];
m8_4 [cluster="Unk.Equal", file="RecurringJobsPage.generated.cs", label="Entry Unk.Equal", span=""];
m8_17 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.IgnoreExceptions_ReturnsTrue()", file="RecurringJobsPage.generated.cs", label="Entry HangFire.Core.Tests.States.DeletedStateFacts.IgnoreExceptions_ReturnsTrue()", span="37-37"];
m8_18 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.IgnoreExceptions_ReturnsTrue()", file="RecurringJobsPage.generated.cs", label="var state = CreateState()", span="39-39"];
m8_19 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.IgnoreExceptions_ReturnsTrue()", file="RecurringJobsPage.generated.cs", label="var result = state.IgnoreJobLoadException", span="41-41"];
m8_20 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.IgnoreExceptions_ReturnsTrue()", file="RecurringJobsPage.generated.cs", label="Assert.True(result)", span="43-43"];
m8_21 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.IgnoreExceptions_ReturnsTrue()", file="RecurringJobsPage.generated.cs", label="Exit HangFire.Core.Tests.States.DeletedStateFacts.IgnoreExceptions_ReturnsTrue()", span="37-37"];
m8_34 [cluster="HangFire.States.DeletedState.SerializeData()", file="RecurringJobsPage.generated.cs", label="Entry HangFire.States.DeletedState.SerializeData()", span="51-51"];
m8_28 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.SerializeData_ReturnsSerializedStateData()", file="RecurringJobsPage.generated.cs", label="Entry HangFire.Core.Tests.States.DeletedStateFacts.SerializeData_ReturnsSerializedStateData()", span="56-56"];
m8_29 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.SerializeData_ReturnsSerializedStateData()", file="RecurringJobsPage.generated.cs", label="var state = CreateState()", span="58-58"];
m8_30 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.SerializeData_ReturnsSerializedStateData()", file="RecurringJobsPage.generated.cs", label="var data = state.SerializeData()", span="60-60"];
m8_31 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.SerializeData_ReturnsSerializedStateData()", file="RecurringJobsPage.generated.cs", label="Assert.Equal(1, data.Count)", span="62-62"];
m8_32 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.SerializeData_ReturnsSerializedStateData()", file="RecurringJobsPage.generated.cs", label="Assert.True(JobHelper.FromStringTimestamp(data[''DeletedAt'']) != default(DateTime))", span="63-63"];
m8_33 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.SerializeData_ReturnsSerializedStateData()", file="RecurringJobsPage.generated.cs", label="Exit HangFire.Core.Tests.States.DeletedStateFacts.SerializeData_ReturnsSerializedStateData()", span="56-56"];
m8_10 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.CreateState()", file="RecurringJobsPage.generated.cs", label="Entry HangFire.Core.Tests.States.DeletedStateFacts.CreateState()", span="66-66"];
m8_36 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.CreateState()", file="RecurringJobsPage.generated.cs", label="return new DeletedState();", span="68-68"];
m8_37 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.CreateState()", file="RecurringJobsPage.generated.cs", label="Exit HangFire.Core.Tests.States.DeletedStateFacts.CreateState()", span="66-66"];
m8_11 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.IsFinalProperty_ReturnsTrue()", file="RecurringJobsPage.generated.cs", label="Entry HangFire.Core.Tests.States.DeletedStateFacts.IsFinalProperty_ReturnsTrue()", span="27-27"];
m8_12 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.IsFinalProperty_ReturnsTrue()", file="RecurringJobsPage.generated.cs", label="var state = CreateState()", span="29-29"];
m8_13 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.IsFinalProperty_ReturnsTrue()", file="RecurringJobsPage.generated.cs", label="var result = state.IsFinal", span="31-31"];
m8_14 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.IsFinalProperty_ReturnsTrue()", file="RecurringJobsPage.generated.cs", label="Assert.True(result)", span="33-33"];
m8_15 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.IsFinalProperty_ReturnsTrue()", file="RecurringJobsPage.generated.cs", label="Exit HangFire.Core.Tests.States.DeletedStateFacts.IsFinalProperty_ReturnsTrue()", span="27-27"];
m8_0 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.StateName_ReturnsDeleted()", file="RecurringJobsPage.generated.cs", label="Entry HangFire.Core.Tests.States.DeletedStateFacts.StateName_ReturnsDeleted()", span="10-10"];
m8_1 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.StateName_ReturnsDeleted()", file="RecurringJobsPage.generated.cs", label="var result = DeletedState.StateName", span="12-12"];
m8_2 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.StateName_ReturnsDeleted()", file="RecurringJobsPage.generated.cs", label="Assert.Equal(''Deleted'', result)", span="13-13"];
m8_3 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.StateName_ReturnsDeleted()", file="RecurringJobsPage.generated.cs", label="Exit HangFire.Core.Tests.States.DeletedStateFacts.StateName_ReturnsDeleted()", span="10-10"];
m8_5 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.NameProperty_ReturnsStateName()", file="RecurringJobsPage.generated.cs", label="Entry HangFire.Core.Tests.States.DeletedStateFacts.NameProperty_ReturnsStateName()", span="17-17"];
m8_6 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.NameProperty_ReturnsStateName()", file="RecurringJobsPage.generated.cs", label="var state = CreateState()", span="19-19"];
m8_7 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.NameProperty_ReturnsStateName()", file="RecurringJobsPage.generated.cs", label="var result = state.Name", span="21-21"];
m8_8 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.NameProperty_ReturnsStateName()", file="RecurringJobsPage.generated.cs", label="Assert.Equal(DeletedState.StateName, result)", span="23-23"];
m8_9 [cluster="HangFire.Core.Tests.States.DeletedStateFacts.NameProperty_ReturnsStateName()", file="RecurringJobsPage.generated.cs", label="Exit HangFire.Core.Tests.States.DeletedStateFacts.NameProperty_ReturnsStateName()", span="17-17"];
m9_11 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m9_12 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m9_0 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="30-30"];
m9_1 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs", label="TransactionIsolationLevel = null", prediction=13, span="32-32"];
m9_2 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs", label="QueuePollInterval = TimeSpan.FromSeconds(15)", prediction=14, span="33-33"];
m9_3 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs", label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", prediction=15, span="35-35"];
m9_4 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs", label="JobExpirationCheckInterval = TimeSpan.FromMinutes(30)", prediction=16, span="37-37"];
m9_5 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs", label="CountersAggregateInterval = TimeSpan.FromMinutes(5)", prediction=17, span="38-38"];
m9_6 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs", label="PrepareSchemaIfNecessary = true", prediction=18, span="39-39"];
m9_7 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs", label="DashboardJobListLimit = 10000", prediction=19, span="40-40"];
m9_8 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs", label="_schemaName = Constants.DefaultSchema", prediction=20, span="41-41"];
m9_9 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs", label="TransactionTimeout = TimeSpan.FromMinutes(1)", prediction=21, span="42-42"];
m9_10 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Exit Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="30-30"];
m9_13 [file="SqlServerStorageOptions.cs", label="Hangfire.SqlServer.SqlServerStorageOptions", span=""];
m10_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="StackTraceParser.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m10_51 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="StackTraceParser.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m10_0 [cluster="Hangfire.StackTraceParser.Parse<T>(string, System.Func<string, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, string, string, T>)", file="StackTraceParser.cs", label="Entry Hangfire.StackTraceParser.Parse<T>(string, System.Func<string, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, string, string, T>)", span="73-73"];
m10_1 [cluster="Hangfire.StackTraceParser.Parse<T>(string, System.Func<string, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, string, string, T>)", color=green, community=0, file="StackTraceParser.cs", label="selector == null", prediction=22, span="77-77"];
m10_2 [cluster="Hangfire.StackTraceParser.Parse<T>(string, System.Func<string, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, string, string, T>)", color=green, community=0, file="StackTraceParser.cs", label="throw new ArgumentNullException(nameof(selector));", prediction=23, span="77-77"];
m10_3 [cluster="Hangfire.StackTraceParser.Parse<T>(string, System.Func<string, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, string, string, T>)", color=green, community=1, file="StackTraceParser.cs", label="return Parse(text, (idx, len, txt) => txt,\r\n                               (t, m) => new { Type = t, Method = m },\r\n                               (pt, pn) => new KeyValuePair<string, string>(pt, pn),\r\n                               // ReSharper disable once PossibleMultipleEnumeration\r\n                               (pl, ps) => new { List = pl, Items = ps },\r\n                               (fn, ln) => new { File = fn, Line = ln },\r\n                               (f, tm, p, fl) => selector(f, tm.Type, tm.Method, p.List, p.Items, fl.File, fl.Line));", prediction=24, span="79-85"];
m10_4 [cluster="Hangfire.StackTraceParser.Parse<T>(string, System.Func<string, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, string, string, T>)", file="StackTraceParser.cs", label="Exit Hangfire.StackTraceParser.Parse<T>(string, System.Func<string, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, string, string, T>)", span="73-73"];
m10_45 [cluster="Unk.Range", file="StackTraceParser.cs", label="Entry Unk.Range", span=""];
m10_27 [cluster="System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>.Invoke(T1, T2, T3, T4, T5, T6, T7)", file="StackTraceParser.cs", label="Entry System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>.Invoke(T1, T2, T3, T4, T5, T6, T7)", span="0-0"];
m10_46 [cluster="Unk.parametersSelector", file="StackTraceParser.cs", label="Entry Unk.parametersSelector", span=""];
m10_42 [cluster="System.Text.RegularExpressions.Regex.Matches(string)", file="StackTraceParser.cs", label="Entry System.Text.RegularExpressions.Regex.Matches(string)", span="0-0"];
m10_47 [cluster="System.Func<T1, T2, T3, T4, TResult>.Invoke(T1, T2, T3, T4)", file="StackTraceParser.cs", label="Entry System.Func<T1, T2, T3, T4, TResult>.Invoke(T1, T2, T3, T4)", span="0-0"];
m10_6 [cluster="Unk.nameof", file="StackTraceParser.cs", label="Entry Unk.nameof", span=""];
m10_44 [cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="StackTraceParser.cs", label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0"];
m10_24 [cluster="lambda expression", file="StackTraceParser.cs", label="Entry lambda expression", span="85-85"];
m10_8 [cluster="lambda expression", file="StackTraceParser.cs", label="Entry lambda expression", span="79-79"];
m10_11 [cluster="lambda expression", file="StackTraceParser.cs", label="Entry lambda expression", span="80-80"];
m10_14 [cluster="lambda expression", file="StackTraceParser.cs", label="Entry lambda expression", span="81-81"];
m10_18 [cluster="lambda expression", file="StackTraceParser.cs", label="Entry lambda expression", span="83-83"];
m10_21 [cluster="lambda expression", file="StackTraceParser.cs", label="Entry lambda expression", span="84-84"];
m10_25 [cluster="lambda expression", color=green, community=0, file="StackTraceParser.cs", label="selector(f, tm.Type, tm.Method, p.List, p.Items, fl.File, fl.Line)", prediction=23, span="85-85"];
m10_26 [cluster="lambda expression", file="StackTraceParser.cs", label="Exit lambda expression", span="85-85"];
m10_9 [cluster="lambda expression", color=green, community=0, file="StackTraceParser.cs", label=txt, prediction=26, span="79-79"];
m10_10 [cluster="lambda expression", file="StackTraceParser.cs", label="Exit lambda expression", span="79-79"];
m10_12 [cluster="lambda expression", color=green, community=0, file="StackTraceParser.cs", label="new { Type = t, Method = m }", prediction=27, span="80-80"];
m10_13 [cluster="lambda expression", file="StackTraceParser.cs", label="Exit lambda expression", span="80-80"];
m10_15 [cluster="lambda expression", color=green, community=0, file="StackTraceParser.cs", label="new KeyValuePair<string, string>(pt, pn)", prediction=28, span="81-81"];
m10_16 [cluster="lambda expression", file="StackTraceParser.cs", label="Exit lambda expression", span="81-81"];
m10_19 [cluster="lambda expression", color=green, community=0, file="StackTraceParser.cs", label="new { List = pl, Items = ps }", prediction=29, span="83-83"];
m10_20 [cluster="lambda expression", file="StackTraceParser.cs", label="Exit lambda expression", span="83-83"];
m10_22 [cluster="lambda expression", color=green, community=0, file="StackTraceParser.cs", label="new { File = fn, Line = ln }", prediction=30, span="84-84"];
m10_23 [cluster="lambda expression", file="StackTraceParser.cs", label="Exit lambda expression", span="84-84"];
m10_48 [cluster="Hangfire.StackTraceParser.Token<T>(System.Text.RegularExpressions.Capture, System.Func<int, int, string, T>)", file="StackTraceParser.cs", label="Entry Hangfire.StackTraceParser.Token<T>(System.Text.RegularExpressions.Capture, System.Func<int, int, string, T>)", span="121-121"];
m10_49 [cluster="Hangfire.StackTraceParser.Token<T>(System.Text.RegularExpressions.Capture, System.Func<int, int, string, T>)", color=green, community=0, file="StackTraceParser.cs", label="return tokenSelector(capture.Index, capture.Length, capture.Value);", prediction=31, span="123-123"];
m10_50 [cluster="Hangfire.StackTraceParser.Token<T>(System.Text.RegularExpressions.Capture, System.Func<int, int, string, T>)", file="StackTraceParser.cs", label="Exit Hangfire.StackTraceParser.Token<T>(System.Text.RegularExpressions.Capture, System.Func<int, int, string, T>)", span="121-121"];
m10_43 [cluster="Unk.Token", file="StackTraceParser.cs", label="Entry Unk.Token", span=""];
m10_7 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", file="StackTraceParser.cs", label="Entry Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", span="88-88"];
m10_28 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="tokenSelector == null", prediction=32, span="97-97"];
m10_29 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="throw new ArgumentNullException(nameof(tokenSelector));", prediction=33, span="97-97"];
m10_30 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="methodSelector == null", prediction=33, span="98-98"];
m10_31 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="throw new ArgumentNullException(nameof(methodSelector));", prediction=33, span="98-98"];
m10_32 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="parameterSelector == null", prediction=33, span="99-99"];
m10_33 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="throw new ArgumentNullException(nameof(parameterSelector));", prediction=33, span="99-99"];
m10_34 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="parametersSelector == null", prediction=33, span="100-100"];
m10_35 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="throw new ArgumentNullException(nameof(parametersSelector));", prediction=33, span="100-100"];
m10_36 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="sourceLocationSelector == null", prediction=33, span="101-101"];
m10_37 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="throw new ArgumentNullException(nameof(sourceLocationSelector));", prediction=33, span="101-101"];
m10_38 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="selector == null", prediction=33, span="102-102"];
m10_39 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=0, file="StackTraceParser.cs", label="throw new ArgumentNullException(nameof(selector));", prediction=33, span="102-102"];
m10_40 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", color=green, community=1, file="StackTraceParser.cs", label="return from Match m in Regex.Matches(text)\r\n                   select m.Groups into groups\r\n                   let pt = groups[''pt''].Captures\r\n                   let pn = groups[''pn''].Captures\r\n                   select selector(Token(groups[''frame''], tokenSelector),\r\n                                   methodSelector(\r\n                                       Token(groups[''type''], tokenSelector),\r\n                                       Token(groups[''method''], tokenSelector)),\r\n                                   parametersSelector(\r\n                                       Token(groups[''params''], tokenSelector),\r\n                                       from i in Enumerable.Range(0, pt.Count)\r\n                                       select parameterSelector(Token(pt[i], tokenSelector),\r\n                                                                Token(pn[i], tokenSelector))),\r\n                                   sourceLocationSelector(Token(groups[''file''], tokenSelector),\r\n                                                          Token(groups[''line''], tokenSelector)));", prediction=44, span="104-118"];
m10_41 [cluster="Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", file="StackTraceParser.cs", label="Exit Hangfire.StackTraceParser.Parse<TToken, TMethod, TParameters, TParameter, TSourceLocation, TFrame>(string, System.Func<int, int, string, TToken>, System.Func<TToken, TToken, TMethod>, System.Func<TToken, TToken, TParameter>, System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>, System.Func<TToken, TToken, TSourceLocation>, System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>)", span="88-88"];
m10_17 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="StackTraceParser.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m10_52 [file="StackTraceParser.cs", label="System.Func<string, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, string, string, T>", span=""];
m11_45 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="StorageConnectionExtensions.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102"];
m11_48 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="StorageConnectionExtensions.cs", label="this.FeatureBackground()", prediction=45, span="108-108"];
m11_47 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="StorageConnectionExtensions.cs", label="this.ScenarioSetup(scenarioInfo)", span="106-106"];
m11_49 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", color=green, community=0, file="StorageConnectionExtensions.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", prediction=46, span="110-112"];
m11_50 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="StorageConnectionExtensions.cs", label="table1.AddRow(new string[] {\r\n                        ''StartedAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115"];
m11_51 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="StorageConnectionExtensions.cs", label="table1.AddRow(new string[] {\r\n                        ''ServerName'',\r\n                        ''TestServer''})", span="116-118"];
m11_52 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="StorageConnectionExtensions.cs", label="testRunner.Then(''properties table contains the following items:'', ((string)(null)), table1, ''Then '')", span="120-120"];
m11_53 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="StorageConnectionExtensions.cs", label="this.ScenarioCleanup()", span="122-122"];
m11_46 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="StorageConnectionExtensions.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It has the correct properties set'', ((string[])(null)))", span="104-104"];
m11_54 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="StorageConnectionExtensions.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102"];
m11_25 [cluster="Unk.OnScenarioStart", file="StorageConnectionExtensions.cs", label="Entry Unk.OnScenarioStart", span=""];
m11_29 [cluster="Unk.CollectScenarioErrors", file="StorageConnectionExtensions.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m11_67 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="StorageConnectionExtensions.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150"];
m11_69 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="StorageConnectionExtensions.cs", label="this.ScenarioSetup(scenarioInfo)", span="154-154"];
m11_70 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="StorageConnectionExtensions.cs", label="this.FeatureBackground()", span="156-156"];
m11_74 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="StorageConnectionExtensions.cs", label="this.ScenarioCleanup()", span="164-164"];
m11_68 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="StorageConnectionExtensions.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying, it should remove the job from the processing set'', ((string[])(null)))", span="152-152"];
m11_71 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="StorageConnectionExtensions.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="158-158"];
m11_73 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="StorageConnectionExtensions.cs", label="testRunner.Then(''the processing set does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162"];
m11_72 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="StorageConnectionExtensions.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="160-160"];
m11_75 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="StorageConnectionExtensions.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", span="150-150"];
m11_4 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StorageConnectionExtensions.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m11_35 [cluster="Unk.And", file="StorageConnectionExtensions.cs", label="Entry Unk.And", span=""];
m11_5 [cluster="Unk.GetTestRunner", file="StorageConnectionExtensions.cs", label="Hangfire.DashboardOptions", span=""];
m11_36 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="StorageConnectionExtensions.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", span="85-85"];
m11_38 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="StorageConnectionExtensions.cs", label="this.ScenarioSetup(scenarioInfo)", span="89-89"];
m11_39 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="StorageConnectionExtensions.cs", label="this.FeatureBackground()", span="91-91"];
m11_41 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="StorageConnectionExtensions.cs", label="this.ScenarioCleanup()", span="95-95"];
m11_37 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="StorageConnectionExtensions.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name is \'Processing\''', ((string[])(null)))", span="87-87"];
m11_40 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="StorageConnectionExtensions.cs", label="testRunner.Then(''the state name is equal to \'Processing\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="93-93"];
m11_42 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="StorageConnectionExtensions.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", span="85-85"];
m11_14 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="StorageConnectionExtensions.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", span="46-46"];
m11_16 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="StorageConnectionExtensions.cs", label="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(null)", span="51-51"];
m11_15 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="StorageConnectionExtensions.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Processing state''))", span="48-49"];
m11_17 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="StorageConnectionExtensions.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", span="46-46"];
m11_0 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="StorageConnectionExtensions.cs", label="Entry Hangfire.DashboardOptions.DashboardOptions()", span="23-23"];
m11_1 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="StorageConnectionExtensions.cs", label="AppPath = ''/''", span="25-25"];
m11_3 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="StorageConnectionExtensions.cs", label="Exit Hangfire.DashboardOptions.DashboardOptions()", span="23-23"];
m11_2 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="StorageConnectionExtensions.cs", label="AuthorizationFilters = new[] { new LocalRequestsOnlyAuthorizationFilter() }", span="26-26"];
m11_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="StorageConnectionExtensions.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m11_66 [cluster="Unk.When", file="StorageConnectionExtensions.cs", label="Entry Unk.When", span=""];
m11_57 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="StorageConnectionExtensions.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="129-129"];
m11_59 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="StorageConnectionExtensions.cs", label="this.ScenarioSetup(scenarioInfo)", span="133-133"];
m11_60 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="StorageConnectionExtensions.cs", label="this.FeatureBackground()", span="135-135"];
m11_64 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="StorageConnectionExtensions.cs", label="this.ScenarioCleanup()", span="143-143"];
m11_58 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="StorageConnectionExtensions.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying, it should add the job to the processing set'', ((string[])(null)))", span="131-131"];
m11_61 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="StorageConnectionExtensions.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="137-137"];
m11_63 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="StorageConnectionExtensions.cs", label="testRunner.And(''processing timestamp is set to UtcNow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="141-141"];
m11_62 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="StorageConnectionExtensions.cs", label="testRunner.Then(''the processing set contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="139-139"];
m11_65 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="StorageConnectionExtensions.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="129-129"];
m11_56 [cluster="Unk.AddRow", file="StorageConnectionExtensions.cs", label="Entry Unk.AddRow", span=""];
m11_43 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="StorageConnectionExtensions.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m11_26 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="StorageConnectionExtensions.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66"];
m11_27 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="StorageConnectionExtensions.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m11_28 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="StorageConnectionExtensions.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66"];
m11_44 [cluster="Unk.Then", file="StorageConnectionExtensions.cs", label="Entry Unk.Then", span=""];
m11_34 [cluster="Unk.Given", file="StorageConnectionExtensions.cs", label="Entry Unk.Given", span=""];
m11_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="StorageConnectionExtensions.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m11_55 [cluster="TechTalk.SpecFlow.Table.cstr", file="StorageConnectionExtensions.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m11_22 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StorageConnectionExtensions.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m11_23 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StorageConnectionExtensions.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m11_24 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StorageConnectionExtensions.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m11_30 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="StorageConnectionExtensions.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="71-71"];
m11_31 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="StorageConnectionExtensions.cs", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75"];
m11_32 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="StorageConnectionExtensions.cs", label="testRunner.And(''the Processing state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="77-77"];
m11_33 [cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="StorageConnectionExtensions.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="71-71"];
m11_8 [cluster="Unk.OnFeatureStart", file="StorageConnectionExtensions.cs", label="Entry Unk.OnFeatureStart", span=""];
m11_76 [file="StorageConnectionExtensions.cs", label="HangFire.Tests.States.ProcessingStateFeature", span=""];
m12_19 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m12_23 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="TypeExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="217-217"];
m12_63 [cluster="string.Format(string, object, object)", file="TypeExtensions.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m12_60 [cluster="Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", file="TypeExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", span="22-22"];
m12_38 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="TypeExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", span="132-132"];
m12_72 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", file="TypeExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Release(IDbConnection, string)", span="132-132"];
m12_22 [cluster="string.Format(string, object)", file="TypeExtensions.cs", label="Entry string.Format(string, object)", span="0-0"];
m12_58 [cluster="Unk.>", file="TypeExtensions.cs", label="Entry Unk.>", span=""];
m12_26 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="TypeExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="71-71"];
m12_37 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="TypeExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="71-71"];
m12_55 [cluster="DynamicParameters.cstr", file="TypeExtensions.cs", label="Entry DynamicParameters.cstr", span=""];
m12_56 [cluster="Unk.Add", file="TypeExtensions.cs", label="Entry Unk.Add", span=""];
m12_4 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="TypeExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="50-50"];
m12_18 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="TypeExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="50-50"];
m12_3 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="TypeExtensions.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m12_20 [cluster="string.IsNullOrEmpty(string)", file="TypeExtensions.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m12_25 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="TypeExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="94-94"];
m12_54 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", file="TypeExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerDistributedLock.Acquire(IDbConnection, string, System.TimeSpan)", span="94-94"];
m12_0 [cluster="lambda expression", file="TypeExtensions.cs", label="Entry lambda expression", span="42-42"];
m12_2 [cluster="lambda expression", file="TypeExtensions.cs", label="Exit lambda expression", span="42-42"];
m12_59 [cluster="Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", file="TypeExtensions.cs", label="Entry Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", span="6-6"];
m12_21 [cluster="System.ArgumentException.ArgumentException(string, string)", file="TypeExtensions.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m12_57 [cluster="Unk.Execute", file="TypeExtensions.cs", label="Entry Unk.Execute", span=""];
m12_62 [cluster="Unk.Format", file="TypeExtensions.cs", label="Entry Unk.Format", span=""];
m12_39 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", file="TypeExtensions.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0"];
m12_61 [cluster="Unk.ContainsKey", file="TypeExtensions.cs", label="Entry Unk.ContainsKey", span=""];
m12_73 [file="TypeExtensions.cs", label="Hangfire.SqlServer.SqlServerDistributedLock", span=""];
m13_68 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodDefinedInBaseInterface()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodDefinedInBaseInterface()", span="118-118"];
m13_71 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodDefinedInBaseInterface()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodDefinedInBaseInterface()", span="118-118"];
m13_172 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(T, T)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(T, T)", span="311-311"];
m13_173 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(T, T)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(T, T)", span="311-311"];
m13_154 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.Method(int, int)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.Method(int, int)", span="293-293"];
m13_155 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.Method(int, int)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.Method(int, int)", span="293-293"];
m13_38 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethod()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethod()", span="68-68"];
m13_42 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethod()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethod()", span="68-68"];
m13_101 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeContainsGenericParameterAndIsComplicated()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeContainsGenericParameterAndIsComplicated()", span="182-182"];
m13_106 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeContainsGenericParameterAndIsComplicated()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeContainsGenericParameterAndIsComplicated()", span="182-182"];
m13_156 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.Method(Hangfire.Core.Tests.Common.IParent)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.Method(Hangfire.Core.Tests.Common.IParent)", span="295-295"];
m13_157 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.Method(Hangfire.Core.Tests.Common.IParent)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.Method(Hangfire.Core.Tests.Common.IParent)", span="295-295"];
m13_158 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.Method(object)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.Method(object)", span="297-297"];
m13_159 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.Method(object)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.Method(object)", span="297-297"];
m13_6 [cluster="Unk.Equal", file="TypeExtensionsFacts.cs", label="Entry Unk.Equal", span=""];
m13_148 [cluster="Hangfire.Core.Tests.Common.IParent.Method()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.IParent.Method()", span="282-282"];
m13_149 [cluster="Hangfire.Core.Tests.Common.IParent.Method()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.IParent.Method()", span="282-282"];
m13_113 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesNonTrivialOrderOfUsingMethodGenericParametersInMethodParameterTypes()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesNonTrivialOrderOfUsingMethodGenericParametersInMethodParameterTypes()", span="204-204"];
m13_118 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesNonTrivialOrderOfUsingMethodGenericParametersInMethodParameterTypes()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesNonTrivialOrderOfUsingMethodGenericParametersInMethodParameterTypes()", span="204-204"];
m13_31 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ThrowsAnException_WhenNameIsNull()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ThrowsAnException_WhenNameIsNull()", span="59-59"];
m13_34 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ThrowsAnException_WhenNameIsNull()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ThrowsAnException_WhenNameIsNull()", span="59-59"];
m13_13 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", span="35-35"];
m13_18 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsClosedGenericNestedClassName_WithGivenTypes()", span="35-35"];
m13_134 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterOfGenericTypeWhichContainsMe()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterOfGenericTypeWhichContainsMe()", span="240-240"];
m13_139 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterOfGenericTypeWhichContainsMe()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterOfGenericTypeWhichContainsMe()", span="240-240"];
m13_107 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeIsGenericAndContainsTwoGenericParameters()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeIsGenericAndContainsTwoGenericParameters()", span="193-193"];
m13_112 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeIsGenericAndContainsTwoGenericParameters()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeIsGenericAndContainsTwoGenericParameters()", span="193-193"];
m13_144 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenParameterTypeIsMatchedByGenericTypeAndNotMatchedByGenericArguments()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenParameterTypeIsMatchedByGenericTypeAndNotMatchedByGenericArguments()", span="260-260"];
m13_147 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenParameterTypeIsMatchedByGenericTypeAndNotMatchedByGenericArguments()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenParameterTypeIsMatchedByGenericTypeAndNotMatchedByGenericArguments()", span="260-260"];
m13_26 [cluster="Unk.>", file="TypeExtensionsFacts.cs", label="Entry Unk.>", span=""];
m13_164 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T>(System.Collections.Generic.List<System.Collections.Generic.IEnumerable<T>>)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T>(System.Collections.Generic.List<System.Collections.Generic.IEnumerable<T>>)", span="303-303"];
m13_165 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T>(System.Collections.Generic.List<System.Collections.Generic.IEnumerable<T>>)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T>(System.Collections.Generic.List<System.Collections.Generic.IEnumerable<T>>)", span="303-303"];
m13_176 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(System.Tuple<T, System.Collections.Generic.List<int>>)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(System.Tuple<T, System.Collections.Generic.List<int>>)", span="315-315"];
m13_177 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(System.Tuple<T, System.Collections.Generic.List<int>>)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(System.Tuple<T, System.Collections.Generic.List<int>>)", span="315-315"];
m13_43 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithNoParameter_WhenParameterTypesIsNull()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithNoParameter_WhenParameterTypesIsNull()", span="77-77"];
m13_47 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithNoParameter_WhenParameterTypesIsNull()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithNoParameter_WhenParameterTypesIsNull()", span="77-77"];
m13_119 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasSomeParametersOfTheSameTypeWhichIsMethodGenericParameter()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasSomeParametersOfTheSameTypeWhichIsMethodGenericParameter()", span="215-215"];
m13_125 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasSomeParametersOfTheSameTypeWhichIsMethodGenericParameter()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasSomeParametersOfTheSameTypeWhichIsMethodGenericParameter()", span="215-215"];
m13_140 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasSomeParametersWhoseTypesContainsTheSameGenericParameter()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasSomeParametersWhoseTypesContainsTheSameGenericParameter()", span="251-251"];
m13_143 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasSomeParametersWhoseTypesContainsTheSameGenericParameter()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasSomeParametersWhoseTypesContainsTheSameGenericParameter()", span="251-251"];
m13_79 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenMethodCouldNotBeFound()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenMethodCouldNotBeFound()", span="137-137"];
m13_82 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenMethodCouldNotBeFound()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenMethodCouldNotBeFound()", span="137-137"];
m13_0 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsNonGenericNestedClassName_WithDot()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsNonGenericNestedClassName_WithDot()", span="18-18"];
m13_4 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsNonGenericNestedClassName_WithDot()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsNonGenericNestedClassName_WithDot()", span="18-18"];
m13_22 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ThrowsAnException_WhenTypeIsNull()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ThrowsAnException_WhenTypeIsNull()", span="50-50"];
m13_25 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ThrowsAnException_WhenTypeIsNull()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ThrowsAnException_WhenTypeIsNull()", span="50-50"];
m13_95 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeContainsGenericParameter()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeContainsGenericParameter()", span="171-171"];
m13_100 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeContainsGenericParameter()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasParameterWhoseTypeContainsGenericParameter()", span="171-171"];
m13_166 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T0, T1>(System.Tuple<T0, T1>)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T0, T1>(System.Tuple<T0, T1>)", span="305-305"];
m13_167 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T0, T1>(System.Tuple<T0, T1>)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T0, T1>(System.Tuple<T0, T1>)", span="305-305"];
m13_170 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T0>()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T0>()", span="309-309"];
m13_171 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T0>()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T0>()", span="309-309"];
m13_91 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenMethodParameterTypeIsAssignableFromPassedType()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenMethodParameterTypeIsAssignableFromPassedType()", span="162-162"];
m13_94 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenMethodParameterTypeIsAssignableFromPassedType()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenMethodParameterTypeIsAssignableFromPassedType()", span="162-162"];
m13_7 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", span="26-26"];
m13_12 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_PrintsOpenGenericNestedClassName_WithGenericParameters()", span="26-26"];
m13_30 [cluster="Hangfire.Common.TypeExtensions.GetNonOpenMatchingMethod(System.Type, string, System.Type[])", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Common.TypeExtensions.GetNonOpenMatchingMethod(System.Type, string, System.Type[])", span="41-41"];
m13_72 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectGenericMethod()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectGenericMethod()", span="125-125"];
m13_78 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectGenericMethod()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectGenericMethod()", span="125-125"];
m13_19 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_CorrectlyHandlesTypesWithoutNamespace()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_CorrectlyHandlesTypesWithoutNamespace()", span="44-44"];
m13_21 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_CorrectlyHandlesTypesWithoutNamespace()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.ToGenericTypeString_CorrectlyHandlesTypesWithoutNamespace()", span="44-44"];
m13_48 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithOneParameter()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithOneParameter()", span="86-86"];
m13_54 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithOneParameter()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithOneParameter()", span="86-86"];
m13_126 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasGenericAndNonGenericParameters()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasGenericAndNonGenericParameters()", span="227-227"];
m13_133 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasGenericAndNonGenericParameters()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodHasGenericAndNonGenericParameters()", span="227-227"];
m13_152 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.Method(int)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.Method(int)", span="291-291"];
m13_153 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.Method(int)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.Method(int)", span="291-291"];
m13_64 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethod_WhenTypeIsInterface()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethod_WhenTypeIsInterface()", span="111-111"];
m13_67 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethod_WhenTypeIsInterface()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethod_WhenTypeIsInterface()", span="111-111"];
m13_168 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.OneMoreGenericMethod<T0, T1, T2>(System.Tuple<T2, T0, T1>)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.OneMoreGenericMethod<T0, T1, T2>(System.Tuple<T2, T0, T1>)", span="307-307"];
m13_169 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.OneMoreGenericMethod<T0, T1, T2>(System.Tuple<T2, T0, T1>)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.OneMoreGenericMethod<T0, T1, T2>(System.Tuple<T2, T0, T1>)", span="307-307"];
m13_174 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(int, T, double)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(int, T, double)", span="313-313"];
m13_175 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(int, T, double)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.GenericMethod<T>(int, T, double)", span="313-313"];
m13_83 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenOveroladedMethodCouldNotBeFound()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenOveroladedMethodCouldNotBeFound()", span="145-145"];
m13_86 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenOveroladedMethodCouldNotBeFound()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsNull_WhenOveroladedMethodCouldNotBeFound()", span="145-145"];
m13_35 [cluster="lambda expression", file="TypeExtensionsFacts.cs", label="Entry lambda expression", span="62-62"];
m13_27 [cluster="lambda expression", file="TypeExtensionsFacts.cs", label="Entry lambda expression", span="53-53"];
m13_29 [cluster="lambda expression", file="TypeExtensionsFacts.cs", label="Exit lambda expression", span="53-53"];
m13_37 [cluster="lambda expression", file="TypeExtensionsFacts.cs", label="Exit lambda expression", span="62-62"];
m13_150 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.Method()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.Method()", span="289-289"];
m13_151 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.Method()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.Method()", span="289-289"];
m13_87 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodNameIsCaseSensitive()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodNameIsCaseSensitive()", span="154-154"];
m13_90 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodNameIsCaseSensitive()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_HandlesMethodNameIsCaseSensitive()", span="154-154"];
m13_56 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithManyParameters()", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithManyParameters()", span="98-98"];
m13_63 [cluster="Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithManyParameters()", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.TypeExtensionsFacts.GetNonOpenMatchingMethod_ReturnsCorrectMethodWithManyParameters()", span="98-98"];
m13_160 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.TrivialGenericMethod<T0, T1, T2>(T0, T1, T2)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.TrivialGenericMethod<T0, T1, T2>(T0, T1, T2)", span="299-299"];
m13_161 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.TrivialGenericMethod<T0, T1, T2>(T0, T1, T2)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.TrivialGenericMethod<T0, T1, T2>(T0, T1, T2)", span="299-299"];
m13_162 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T>(System.Collections.Generic.IEnumerable<T>)", file="TypeExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T>(System.Collections.Generic.IEnumerable<T>)", span="301-301"];
m13_163 [cluster="Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T>(System.Collections.Generic.IEnumerable<T>)", file="TypeExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Common.NonGenericClass.OtherGenericMethod<T>(System.Collections.Generic.IEnumerable<T>)", span="301-301"];
m13_5 [cluster="System.Type.ToGenericTypeString()", file="TypeExtensionsFacts.cs", label="Entry System.Type.ToGenericTypeString()", span="27-27"];
n98 -> n11  [color=darkseagreen4, key=1, label="Hangfire.Storage.InvocationData", style=dashed];
n7 -> n11  [color=darkseagreen4, key=1, label=type, style=dashed];
n7 -> n14  [color=darkseagreen4, key=1, label=type, style=dashed];
n8 -> n11  [color=darkseagreen4, key=1, label=parameterTypes, style=dashed];
n9 -> n14  [color=darkseagreen4, key=1, label=method, style=dashed];
n11 -> n27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n31 -> n38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n36 -> n42  [color=darkseagreen4, key=1, label="System.Collections.Generic.IReadOnlyCollection<object>", style=dashed];
n41 -> n51  [color=darkseagreen4, key=1, label=serializedArguments, style=dashed];
n41 -> n52  [color=darkseagreen4, key=1, label=serializedArguments, style=dashed];
n42 -> n44  [color=darkseagreen4, key=1, label=argument, style=dashed];
n42 -> n45  [color=darkseagreen4, key=1, label=argument, style=dashed];
n42 -> n47  [color=darkseagreen4, key=1, label=argument, style=dashed];
n58 -> n61  [color=darkseagreen4, key=1, label=parameters, style=dashed];
n59 -> n68  [color=darkseagreen4, key=1, label=result, style=dashed];
n59 -> n70  [color=darkseagreen4, key=1, label=result, style=dashed];
n62 -> n65  [color=darkseagreen4, key=1, label=parameter, style=dashed];
n60 -> n69  [color=darkseagreen4, key=1, label=i, style=dashed];
n69 -> n69  [color=darkseagreen4, key=1, label=i, style=dashed];
n75 -> n79  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
n75 -> n82  [color=darkseagreen4, key=1, label=string, style=dashed];
n75 -> d82  [color=green, key=1, label=string, style=dashed];
n90 -> n94  [color=darkseagreen4, key=1, label=result, style=dashed];
n92 -> n94  [color=darkseagreen4, key=1, label=result, style=dashed];
n93 -> n95  [color=darkseagreen4, key=1, label="out System.DateTime", style=dashed];
m0_0 -> m0_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_0 -> m0_5  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m0_5 -> m0_5  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m0_5 -> m0_10  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m0_24 -> m0_50  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_24 -> m0_53  [color=darkseagreen4, key=1, label=IDbConnection, style=dashed];
m0_24 -> m0_56  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_49 -> m0_51  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m0_49 -> m0_52  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m0_49 -> m0_53  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m0_54 -> m0_56  [color=darkseagreen4, key=1, label=releaseResult, style=dashed];
m0_17 -> m0_26  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_17 -> m0_30  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m0_17 -> m0_33  [color=darkseagreen4, key=1, label=IDbConnection, style=dashed];
m0_17 -> m0_37  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_17 -> m0_38  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_25 -> m0_27  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m0_25 -> m0_28  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m0_25 -> m0_29  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m0_25 -> m0_30  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m0_25 -> m0_31  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m0_25 -> m0_33  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m0_30 -> m0_30  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m0_34 -> m0_36  [color=darkseagreen4, key=1, label=lockResult, style=dashed];
m0_34 -> m0_38  [color=darkseagreen4, key=1, label=lockResult, style=dashed];
m0_58 -> m0_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m0_58 -> m0_19  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m0_58 -> m0_22  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerDistributedLock", style=dashed];
m6_123 -> m6_126  [color=darkseagreen4, key=1, label=double, style=dashed];
m6_47 -> m6_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m6_47 -> m6_53  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m6_47 -> m6_54  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m6_157 -> m6_160  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerContext", style=dashed];
m6_27 -> m6_30  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m6_27 -> m6_32  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m6_27 -> m6_34  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m6_30 -> m6_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_30 -> m6_33  [color=darkseagreen4, key=1, label=providers, style=dashed];
m6_147 -> m6_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_147 -> m6_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_228 -> m6_231  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_177 -> m6_177  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m6_16 -> m6_18  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_246 -> m6_249  [color=darkseagreen4, key=1, label=result, style=dashed];
m6_131 -> m6_134  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m6_131 -> m6_138  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m6_137 -> m6_140  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m6_223 -> m6_226  [color=darkseagreen4, key=1, label=result, style=dashed];
m6_71 -> m6_75  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_75 -> m6_78  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m6_75 -> m6_79  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m6_79 -> m6_5  [color=green, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_13  [color=green, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_17  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_18  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_19  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_23  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_24  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_25  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_26  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_27  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_34  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_35  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_36  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_37  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_38  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_41  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_42  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_51  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_53  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_59  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_62  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_64  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_65  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_66  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_54 -> m6_59  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_54 -> m6_62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m6_56 -> m6_59  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m6_52 -> m6_54  [color=darkseagreen4, key=1, label=createJobSql, style=dashed];
m6_59 -> m6_59  [color=darkseagreen4, key=1, label=parameterIndex, style=dashed];
m6_57 -> m6_59  [color=darkseagreen4, key=1, label=parameterIndex, style=dashed];
m6_61 -> m6_65  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_61 -> m6_63  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_46 -> m6_51  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_46 -> m6_53  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_46 -> m6_62  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_46 -> m6_64  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_46 -> m6_65  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_46 -> m6_66  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_102 -> m6_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_201 -> m6_204  [color=darkseagreen4, key=1, label=result, style=dashed];
m6_109 -> m6_112  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_263 -> m6_14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m6_263 -> m6_15  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m6_263 -> m6_19  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m6_263 -> m6_23  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m6_263 -> m6_30  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m6_263 -> m6_44  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m6_263 -> m6_33  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m6_263 -> m6_54  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m6_263 -> m6_75  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m8_23 -> m8_25  [color=darkseagreen4, key=1, label=state, style=dashed];
m8_30 -> m8_32  [color=darkseagreen4, key=1, label=data, style=dashed];
m10_0 -> m10_2  [color=green, key=1, label="System.Func<string, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, string, string, T>", style=dashed];
m10_0 -> m10_25  [color=green, key=1, label="System.Func<string, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, string, string, T>", style=dashed];
m10_3 -> m10_8  [color=green, key=1, label="lambda expression", style=dashed];
m10_3 -> m10_11  [color=green, key=1, label="lambda expression", style=dashed];
m10_3 -> m10_14  [color=green, key=1, label="lambda expression", style=dashed];
m10_3 -> m10_18  [color=green, key=1, label="lambda expression", style=dashed];
m10_3 -> m10_21  [color=green, key=1, label="lambda expression", style=dashed];
m10_3 -> m10_24  [color=green, key=1, label="lambda expression", style=dashed];
m10_7 -> m10_29  [color=green, key=1, label="System.Func<int, int, string, TToken>", style=dashed];
m10_7 -> m10_30  [color=green, key=1, label="System.Func<TToken, TToken, TMethod>", style=dashed];
m10_7 -> m10_31  [color=green, key=1, label="System.Func<TToken, TToken, TMethod>", style=dashed];
m10_7 -> m10_32  [color=green, key=1, label="System.Func<TToken, TToken, TParameter>", style=dashed];
m10_7 -> m10_33  [color=green, key=1, label="System.Func<TToken, TToken, TParameter>", style=dashed];
m10_7 -> m10_34  [color=green, key=1, label="System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>", style=dashed];
m10_7 -> m10_35  [color=green, key=1, label="System.Func<TToken, System.Collections.Generic.IEnumerable<TParameter>, TParameters>", style=dashed];
m10_7 -> m10_36  [color=green, key=1, label="System.Func<TToken, TToken, TSourceLocation>", style=dashed];
m10_7 -> m10_37  [color=green, key=1, label="System.Func<TToken, TToken, TSourceLocation>", style=dashed];
m10_7 -> m10_38  [color=green, key=1, label="System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>", style=dashed];
m10_7 -> m10_39  [color=green, key=1, label="System.Func<TToken, TMethod, TParameters, TSourceLocation, TFrame>", style=dashed];
m10_52 -> m10_25  [color=green, key=1, label="System.Func<string, string, string, string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>, string, string, T>", style=dashed];
m11_49 -> m11_51  [color=green, key=1, label=table1, style=dashed];
m11_49 -> m11_52  [color=green, key=1, label=table1, style=dashed];
m11_76 -> m11_48  [color=green, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m11_76 -> m11_38  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m11_76 -> m11_39  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m11_76 -> m11_41  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m11_76 -> m11_47  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m11_76 -> m11_53  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m11_76 -> m11_59  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m11_76 -> m11_60  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m11_76 -> m11_64  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m11_76 -> m11_69  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m11_76 -> m11_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m11_76 -> m11_74  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
}
