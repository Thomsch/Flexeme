digraph  {
n0 [cluster="Hangfire.States.IStateChangeProcess.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", label="Entry Hangfire.States.IStateChangeProcess.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", span="20-20"];
n1 [cluster="Hangfire.States.IStateChangeProcess.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", label="Exit Hangfire.States.IStateChangeProcess.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", span="20-20"];
m0_0 [cluster="Hangfire.Core.Tests.Storage.StorageConnectionExtensionsFacts.GivenRecurringJobIsCancelledWhenGetRecurringJobsThenNotGetStateData()", file="StorageConnectionExtensionsFacts.cs", label="Entry Hangfire.Core.Tests.Storage.StorageConnectionExtensionsFacts.GivenRecurringJobIsCancelledWhenGetRecurringJobsThenNotGetStateData()", span="11-11"];
m0_1 [cluster="Hangfire.Core.Tests.Storage.StorageConnectionExtensionsFacts.GivenRecurringJobIsCancelledWhenGetRecurringJobsThenNotGetStateData()", color=green, community=0, file="StorageConnectionExtensionsFacts.cs", label="var connectionFake = new Mock<IStorageConnection>()", prediction=0, span="13-13"];
m0_2 [cluster="Hangfire.Core.Tests.Storage.StorageConnectionExtensionsFacts.GivenRecurringJobIsCancelledWhenGetRecurringJobsThenNotGetStateData()", color=green, community=0, file="StorageConnectionExtensionsFacts.cs", label="connectionFake.Setup(o => o.GetAllItemsFromSet(It.IsAny<string>())).Returns(new HashSet<string> {''1''})", prediction=1, span="14-14"];
m0_3 [cluster="Hangfire.Core.Tests.Storage.StorageConnectionExtensionsFacts.GivenRecurringJobIsCancelledWhenGetRecurringJobsThenNotGetStateData()", color=green, community=1, file="StorageConnectionExtensionsFacts.cs", label="connectionFake.Setup(o => o.GetAllEntriesFromHash(''recurring-job:1'')).Returns(new Dictionary<string, string>\r\n                {\r\n                    { ''Cron'', ''A''},\r\n                    { ''Job'', @''{''''Type'''':''''ConsoleApplication1.CommandHandler, ConsoleApplication1'''',''''Method'''':''''Handle'''',''''ParameterTypes'''':''''[\''''string\'''']'''',''''Arguments'''':''''[\''''Text\'''']''''}''},\r\n                    { ''LastJobId'', string.Empty}\r\n                }).Verifiable()", prediction=0, span="15-20"];
m0_4 [cluster="Hangfire.Core.Tests.Storage.StorageConnectionExtensionsFacts.GivenRecurringJobIsCancelledWhenGetRecurringJobsThenNotGetStateData()", color=green, community=0, file="StorageConnectionExtensionsFacts.cs", label="var result = connectionFake.Object.GetRecurringJobs().Single()", prediction=3, span="22-22"];
m0_6 [cluster="Hangfire.Core.Tests.Storage.StorageConnectionExtensionsFacts.GivenRecurringJobIsCancelledWhenGetRecurringJobsThenNotGetStateData()", color=green, community=0, file="StorageConnectionExtensionsFacts.cs", label="connectionFake.VerifyAll()", prediction=0, span="25-25"];
m0_5 [cluster="Hangfire.Core.Tests.Storage.StorageConnectionExtensionsFacts.GivenRecurringJobIsCancelledWhenGetRecurringJobsThenNotGetStateData()", color=green, community=0, file="StorageConnectionExtensionsFacts.cs", label="Assert.Null(result.LastJobState)", prediction=5, span="24-24"];
m0_7 [cluster="Hangfire.Core.Tests.Storage.StorageConnectionExtensionsFacts.GivenRecurringJobIsCancelledWhenGetRecurringJobsThenNotGetStateData()", file="StorageConnectionExtensionsFacts.cs", label="Exit Hangfire.Core.Tests.Storage.StorageConnectionExtensionsFacts.GivenRecurringJobIsCancelledWhenGetRecurringJobsThenNotGetStateData()", span="11-11"];
m0_12 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="StorageConnectionExtensionsFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_21 [cluster="Unk.>", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.>", span=""];
m0_22 [cluster="Unk.GetAllItemsFromSet", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m0_9 [cluster="Unk.Setup", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.Setup", span=""];
m0_17 [cluster="Unk.VerifyAll", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.VerifyAll", span=""];
m0_16 [cluster="Unk.Null", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.Null", span=""];
m0_26 [cluster="Unk.GetAllEntriesFromHash", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m0_11 [cluster="Unk.Returns", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.Returns", span=""];
m0_13 [cluster="Unk.Verifiable", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.Verifiable", span=""];
m0_15 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="StorageConnectionExtensionsFacts.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m0_8 [cluster="Mock<IStorageConnection>.cstr", file="StorageConnectionExtensionsFacts.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m0_23 [cluster="lambda expression", file="StorageConnectionExtensionsFacts.cs", label="Entry lambda expression", span="15-15"];
m0_18 [cluster="lambda expression", file="StorageConnectionExtensionsFacts.cs", label="Entry lambda expression", span="14-14"];
m0_19 [cluster="lambda expression", color=green, community=0, file="StorageConnectionExtensionsFacts.cs", label="o.GetAllItemsFromSet(It.IsAny<string>())", prediction=6, span="14-14"];
m0_20 [cluster="lambda expression", file="StorageConnectionExtensionsFacts.cs", label="Exit lambda expression", span="14-14"];
m0_24 [cluster="lambda expression", color=green, community=0, file="StorageConnectionExtensionsFacts.cs", label="o.GetAllEntriesFromHash(''recurring-job:1'')", prediction=7, span="15-15"];
m0_25 [cluster="lambda expression", file="StorageConnectionExtensionsFacts.cs", label="Exit lambda expression", span="15-15"];
m0_14 [cluster="Unk.GetRecurringJobs", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.GetRecurringJobs", span=""];
m0_10 [cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="StorageConnectionExtensionsFacts.cs", label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0"];
m0_1 -> m0_3  [color=green, key=1, label=connectionFake, style=dashed];
m0_1 -> m0_6  [color=green, key=1, label=connectionFake, style=dashed];
m0_2 -> m0_18  [color=green, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_23  [color=green, key=1, label="lambda expression", style=dashed];
}
