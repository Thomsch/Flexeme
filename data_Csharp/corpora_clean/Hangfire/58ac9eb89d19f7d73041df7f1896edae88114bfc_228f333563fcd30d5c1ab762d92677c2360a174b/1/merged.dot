digraph  {
m0_5 [label="Entry HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17", cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="FailedStateHandler.cs"];
m0_6 [label="context.Transaction.RemoveFromSet(''failed'', context.JobId)", span="19-19", cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="FailedStateHandler.cs"];
m0_7 [label="Exit HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17", cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="FailedStateHandler.cs"];
m0_8 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="27-27", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="FailedStateHandler.cs"];
m0_3 [label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="35-35", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="FailedStateHandler.cs"];
m0_4 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="26-26", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="FailedStateHandler.cs"];
m0_0 [label="Entry HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9", cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="FailedStateHandler.cs"];
m0_1 [label="context.Transaction.AddToSet(\r\n                ''failed'',\r\n                context.JobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow))", span="11-14", cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="FailedStateHandler.cs"];
m0_2 [label="Exit HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9", cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="FailedStateHandler.cs"];
m1_2 [label="Entry HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", span="33-33", cluster="HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="IStateChangedFilter.cs"];
m1_3 [label="Exit HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", span="33-33", cluster="HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="IStateChangedFilter.cs"];
m1_0 [label="Entry HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", span="27-27", cluster="HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="IStateChangedFilter.cs"];
m1_1 [label="Exit HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", span="27-27", cluster="HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="IStateChangedFilter.cs"];
m2_0 [label="Entry HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="26-26", cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", file="JobState.cs"];
m2_1 [label="return new Dictionary<string, string>();", span="28-28", cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", file="JobState.cs"];
m2_2 [label="Exit HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="26-26", cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", file="JobState.cs"];
m2_3 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobState.cs"];
m3_9 [label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="78-78", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs"];
m3_10 [label="logger.InfoFormat(''Using the following options for Hangfire Server:'')", span="80-80", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs"];
m3_11 [label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="81-81", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs"];
m3_12 [label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="82-82", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs"];
m3_13 [label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="83-83", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs"];
m3_14 [label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="84-84", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs"];
m3_15 [label="Exit Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="78-78", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs"];
m3_7 [label="Entry System.Math.Min(int, int)", span="0-0", cluster="System.Math.Min(int, int)", file="JobStateHandler.cs"];
m3_16 [label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="217-217", cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="JobStateHandler.cs"];
m3_8 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="JobStateHandler.cs"];
m3_18 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="JobStateHandler.cs"];
m3_0 [label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="32-32", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs"];
m3_1 [label="WorkerCount = Math.Min(Environment.ProcessorCount * 5, MaxDefaultWorkerCount)", span="34-34", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs"];
m3_2 [label="ServerName = Environment.MachineName", span="35-35", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs"];
m3_3 [label="Queues = new[] { EnqueuedState.DefaultQueue }", span="36-36", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs"];
m3_4 [label="ShutdownTimeout = TimeSpan.FromSeconds(15)", span="37-37", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs"];
m3_5 [label="SchedulePollingInterval = TimeSpan.FromSeconds(15)", span="38-38", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs"];
m3_6 [label="Exit Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="32-32", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs"];
m3_19 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="JobStateHandler.cs"];
m3_20 [label="''''' + x + '''''", span="82-82", cluster="lambda expression", file="JobStateHandler.cs"];
m3_21 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="JobStateHandler.cs"];
m3_17 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="JobStateHandler.cs"];
m3_22 [label="Hangfire.BackgroundJobServerOptions", span="", file="JobStateHandler.cs"];
m4_5 [label="Entry HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17", cluster="HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="ProcessingStateHandler.cs"];
m4_6 [label="context.Transaction.RemoveFromSet(''processing'', context.JobId)", span="19-19", cluster="HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="ProcessingStateHandler.cs"];
m4_7 [label="Exit HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17", cluster="HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="ProcessingStateHandler.cs"];
m4_8 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="27-27", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="ProcessingStateHandler.cs"];
m4_3 [label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="35-35", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="ProcessingStateHandler.cs"];
m4_4 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="26-26", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="ProcessingStateHandler.cs"];
m4_0 [label="Entry HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9", cluster="HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="ProcessingStateHandler.cs"];
m4_1 [label="context.Transaction.AddToSet(\r\n                ''processing'',\r\n                context.JobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow))", span="11-14", cluster="HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="ProcessingStateHandler.cs"];
m4_2 [label="Exit HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9", cluster="HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="ProcessingStateHandler.cs"];
m5_14 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="ScheduledState.cs"];
m5_31 [label="Entry HangFire.SqlServer.SqlServerStorage.GetConnection()", span="59-59", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="ScheduledState.cs"];
m5_5 [label="Exit HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", span="35-35", cluster="HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", file="ScheduledState.cs"];
m5_13 [label="Exit HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="19-19", cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="ScheduledState.cs"];
m5_32 [label="Entry HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", span="48-48", cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="ScheduledState.cs"];
m5_33 [label="var storage = CreateStorage()", span="50-50", cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", color=green, community=0, file="ScheduledState.cs"];
m5_34 [label="var components = storage.GetComponents()", span="52-52", cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="ScheduledState.cs"];
m5_35 [label="var componentTypes = components.Select(x => x.GetType()).ToArray()", span="54-54", cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="ScheduledState.cs"];
m5_36 [label="Assert.Contains(typeof(ExpirationManager), componentTypes)", span="55-55", cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="ScheduledState.cs"];
m5_37 [label="Exit HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", span="48-48", cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="ScheduledState.cs"];
m5_45 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="ScheduledState.cs"];
m5_8 [label="Exit lambda expression", span="13-13", cluster="lambda expression", file="ScheduledState.cs"];
m5_9 [label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="32-32", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", color=red, community=0, file="ScheduledState.cs"];
m5_11 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerStorage(''hello'', null))", span="21-22", cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", color=red, community=0, file="ScheduledState.cs"];
m5_10 [label="Entry HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="19-19", cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="ScheduledState.cs"];
m5_12 [label="Assert.Equal(''options'', exception.ParamName)", span="24-24", cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="ScheduledState.cs"];
m5_4 [label="return new Dictionary<string, string>\r\n                {\r\n                    { ''ScheduledAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''EnqueueAt'', JobHelper.ToStringTimestamp(EnqueueAt) }\r\n                };", span="37-41", cluster="HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", file="ScheduledState.cs"];
m5_23 [label="Entry HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", span="58-58", cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", file="ScheduledState.cs"];
m5_46 [label="return new SqlServerStorage(\r\n                ConnectionUtils.GetConnectionString(),\r\n                new SqlServerStorageOptions { PrepareSchemaIfNecessary = false });", span="60-62", cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", file="ScheduledState.cs"];
m5_47 [label="Exit HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", span="58-58", cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", file="ScheduledState.cs"];
m5_40 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="ScheduledState.cs"];
m5_25 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="ScheduledState.cs"];
m5_6 [label="Entry lambda expression", span="13-13", cluster="lambda expression", file="ScheduledState.cs"];
m5_24 [label="Entry HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54", cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="ScheduledState.cs"];
m5_17 [label="context.Transaction.RemoveFromSet(''schedule'', context.JobId)", span="56-56", cluster="HangFire.States.ScheduledState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="ScheduledState.cs", color=red, community=0];
m5_15 [label="new SqlServerStorage(''hello'', null)", span="22-22", cluster="lambda expression", file="ScheduledState.cs"];
m5_42 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="ScheduledState.cs"];
m5_44 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="ScheduledState.cs"];
m5_43 [label="x.GetType()", span="54-54", cluster="lambda expression", file="ScheduledState.cs"];
m5_16 [label="Entry HangFire.States.ScheduledState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", span="54-54", cluster="HangFire.States.ScheduledState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="ScheduledState.cs"];
m5_7 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ScheduledState.cs"];
m5_26 [label="Entry HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", span="38-38", cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="ScheduledState.cs"];
m5_27 [label="var storage = CreateStorage()", span="40-40", cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="ScheduledState.cs"];
m5_28 [label="var connection = storage.GetConnection()", span="41-41", cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="ScheduledState.cs"];
m5_29 [label="Assert.NotNull(connection)", span="43-43", cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="ScheduledState.cs"];
m5_30 [label="Exit HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", span="38-38", cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="ScheduledState.cs"];
m5_41 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="ScheduledState.cs"];
m5_39 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ScheduledState.cs"];
m5_18 [label="Entry HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="28-28", cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="ScheduledState.cs"];
m5_3 [label="Exit HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="10-10", cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="ScheduledState.cs"];
m5_38 [label="Entry HangFire.SqlServer.SqlServerStorage.GetComponents()", span="64-64", cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="ScheduledState.cs"];
m5_0 [label="Entry HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="10-10", cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="ScheduledState.cs"];
m5_1 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerStorage(null))", span="12-13", cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="ScheduledState.cs"];
m5_2 [label="Assert.Equal(''connectionString'', exception.ParamName)", span="15-15", cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="ScheduledState.cs"];
m5_19 [label="var storage = CreateStorage()", span="30-30", cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="ScheduledState.cs"];
m5_48 [label="Entry HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26", cluster="HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="ScheduledState.cs"];
m5_49 [label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="ScheduledState.cs"];
m5_20 [label="HangFire.States.ScheduledState", span="", cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="ScheduledState.cs"];
m5_21 [label="Assert.NotNull(api)", span="33-33", cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="ScheduledState.cs"];
m5_22 [label="Exit HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="28-28", cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="ScheduledState.cs"];
m6_19 [label="Entry HangFire.Redis.RedisStorage.GetConnection()", span="73-73", cluster="HangFire.Redis.RedisStorage.GetConnection()", file="SqlServerMonitoringApi.cs"];
m6_20 [label="return new RedisConnection(_pooledManager.GetClient());", span="75-75", cluster="HangFire.Redis.RedisStorage.GetConnection()", file="SqlServerMonitoringApi.cs"];
m6_21 [label="Exit HangFire.Redis.RedisStorage.GetConnection()", span="73-73", cluster="HangFire.Redis.RedisStorage.GetConnection()", file="SqlServerMonitoringApi.cs"];
m6_13 [label="Entry RedisClientManagerConfig.cstr", span="", cluster="RedisClientManagerConfig.cstr", file="SqlServerMonitoringApi.cs"];
m6_14 [label="Entry HangFire.Redis.RedisStorage.GetMonitoringApi()", span="68-68", cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="SqlServerMonitoringApi.cs"];
m6_15 [label="return new RedisMonitoringApi(_pooledManager.GetClient());", span="70-70", cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="SqlServerMonitoringApi.cs"];
m6_16 [label="Exit HangFire.Redis.RedisStorage.GetMonitoringApi()", span="68-68", cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="SqlServerMonitoringApi.cs"];
m6_18 [label="Entry Unk.GetClient", span="", cluster="Unk.GetClient", file="SqlServerMonitoringApi.cs"];
m6_4 [label="Entry HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="41-41", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="SqlServerMonitoringApi.cs"];
m6_5 [label="Exit HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="41-41", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="SqlServerMonitoringApi.cs"];
m6_23 [label="Entry HangFire.Redis.RedisStorage.GetComponents()", span="78-78", cluster="HangFire.Redis.RedisStorage.GetComponents()", file="SqlServerMonitoringApi.cs"];
m6_24 [label="yield return new FetchedJobsWatcher(this, new StateMachineFactory(this));", span="80-80", cluster="HangFire.Redis.RedisStorage.GetComponents()", file="SqlServerMonitoringApi.cs"];
m6_25 [label="Exit HangFire.Redis.RedisStorage.GetComponents()", span="78-78", cluster="HangFire.Redis.RedisStorage.GetComponents()", file="SqlServerMonitoringApi.cs"];
m6_27 [label="Entry HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", span="16-16", cluster="HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", file="SqlServerMonitoringApi.cs"];
m6_28 [label="Entry HangFire.Redis.RedisStorage.GetStateHandlers()", span="83-83", cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="SqlServerMonitoringApi.cs"];
m6_29 [label="yield return new FailedStateHandler();", span="85-85", cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="SqlServerMonitoringApi.cs"];
m6_30 [label="yield return new ProcessingStateHandler();", span="86-86", cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="SqlServerMonitoringApi.cs"];
m6_31 [label="yield return new SucceededStateHandler();", span="87-87", cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="SqlServerMonitoringApi.cs"];
m6_32 [label="Exit HangFire.Redis.RedisStorage.GetStateHandlers()", span="83-83", cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="SqlServerMonitoringApi.cs"];
m6_34 [label="Entry HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", span="23-23", cluster="HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", file="SqlServerMonitoringApi.cs"];
m6_2 [label="Entry HangFire.Redis.RedisStorage.RedisStorage(string)", span="36-36", cluster="HangFire.Redis.RedisStorage.RedisStorage(string)", file="SqlServerMonitoringApi.cs"];
m6_3 [label="Exit HangFire.Redis.RedisStorage.RedisStorage(string)", span="36-36", cluster="HangFire.Redis.RedisStorage.RedisStorage(string)", file="SqlServerMonitoringApi.cs"];
m6_12 [label="Entry PooledRedisClientManager.cstr", span="", cluster="PooledRedisClientManager.cstr", file="SqlServerMonitoringApi.cs"];
m6_39 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="SqlServerMonitoringApi.cs"];
m6_17 [label="Entry RedisMonitoringApi.cstr", span="", cluster="RedisMonitoringApi.cstr", file="SqlServerMonitoringApi.cs"];
m6_33 [label="Entry HangFire.Redis.FailedStateHandler.FailedStateHandler()", span="23-23", cluster="HangFire.Redis.FailedStateHandler.FailedStateHandler()", file="SqlServerMonitoringApi.cs"];
m6_36 [label="Entry HangFire.Redis.RedisStorage.ToString()", span="90-90", cluster="HangFire.Redis.RedisStorage.ToString()", file="SqlServerMonitoringApi.cs"];
m6_37 [label="return String.Format(''redis://{0}/{1}'', HostAndPort, Db);", span="92-92", cluster="HangFire.Redis.RedisStorage.ToString()", file="SqlServerMonitoringApi.cs"];
m6_38 [label="Exit HangFire.Redis.RedisStorage.ToString()", span="90-90", cluster="HangFire.Redis.RedisStorage.ToString()", file="SqlServerMonitoringApi.cs"];
m6_0 [label="Entry HangFire.Redis.RedisStorage.RedisStorage()", span="31-31", cluster="HangFire.Redis.RedisStorage.RedisStorage()", file="SqlServerMonitoringApi.cs"];
m6_1 [label="Exit HangFire.Redis.RedisStorage.RedisStorage()", span="31-31", cluster="HangFire.Redis.RedisStorage.RedisStorage()", file="SqlServerMonitoringApi.cs"];
m6_6 [label="Entry HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", span="46-46", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs"];
m6_7 [label="HostAndPort = hostAndPort", span="48-48", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs"];
m6_8 [label="Db = db", span="49-49", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs"];
m6_9 [label="Options = options", span="50-50", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs"];
m6_10 [label="_pooledManager = new PooledRedisClientManager(\r\n                new []{ HostAndPort },\r\n                new string[0],\r\n                new RedisClientManagerConfig\r\n                {\r\n                    DefaultDb = Db,\r\n                    MaxWritePoolSize = Options.ConnectionPoolSize\r\n                })", span="52-59", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs"];
m6_11 [label="Exit HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", span="46-46", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs"];
m6_22 [label="Entry RedisConnection.cstr", span="", cluster="RedisConnection.cstr", file="SqlServerMonitoringApi.cs"];
m6_35 [label="Entry HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", span="21-21", cluster="HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", file="SqlServerMonitoringApi.cs"];
m6_26 [label="Entry HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage, HangFire.States.IStateMachineFactory)", span="33-33", cluster="HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage, HangFire.States.IStateMachineFactory)", file="SqlServerMonitoringApi.cs"];
m6_40 [label="HangFire.Redis.RedisStorage", span="", file="SqlServerMonitoringApi.cs"];
m7_8 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="StateApplyingContext.cs"];
m7_0 [label="Entry HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", span="23-23", cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", file="StateApplyingContext.cs"];
m7_1 [label="transaction == null", span="29-29", cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", color=red, community=0, file="StateApplyingContext.cs"];
m7_3 [label="state == null", span="30-30", cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", color=red, community=0, file="StateApplyingContext.cs"];
m7_5 [label="Transaction = transaction", span="32-32", cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", color=red, community=0, file="StateApplyingContext.cs"];
m7_6 [label="ApplyingState = state", span="33-33", cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", color=red, community=0, file="StateApplyingContext.cs"];
m7_2 [label="throw new ArgumentNullException(''transaction'');", span="29-29", cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", color=red, community=0, file="StateApplyingContext.cs"];
m7_4 [label="throw new ArgumentNullException(''state'');", span="30-30", cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", color=red, community=0, file="StateApplyingContext.cs"];
m7_7 [label="Exit HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", span="23-23", cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", file="StateApplyingContext.cs"];
m7_9 [label="HangFire.Common.States.StateApplyingContext", span="", file="StateApplyingContext.cs"];
m8_3 [label="Entry System.NotSupportedException.NotSupportedException()", span="0-0", cluster="System.NotSupportedException.NotSupportedException()", file="StateMachine.cs"];
m8_0 [label="Entry HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", span="8-8", cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", file="StateMachine.cs"];
m8_1 [label="throw new NotSupportedException();", span="10-10", cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", file="StateMachine.cs"];
m8_2 [label="Exit HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", span="8-8", cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", file="StateMachine.cs"];
m9_239 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs"];
m9_240 [label="var serializedHistory = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="450-451", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs"];
m9_243 [label="i < table.RowCount", span="454-454", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs"];
m9_244 [label="Assert.Equal(table.Rows[i][''State''], history[i][''State''])", span="456-456", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs"];
m9_241 [label="var history = serializedHistory.Select(JobHelper.FromJson<Dictionary<string, string>>).ToList()", span="452-452", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs"];
m9_242 [label="var i = 0", span="454-454", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs"];
m9_245 [label="i++", span="454-454", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs"];
m9_246 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs"];
m9_135 [label="Entry HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="26-26", cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", file="StateSteps.cs"];
m9_153 [label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs"];
m9_154 [label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="309-309", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs"];
m9_155 [label="var timestamp = JobHelper.FromTimestamp((long)score)", span="310-310", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs"];
m9_156 [label="Assert.True(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="312-312", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs"];
m9_157 [label="Assert.True(timestamp < DateTime.UtcNow.AddSeconds(1))", span="313-313", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs"];
m9_158 [label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs"];
m9_137 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StateSteps.cs"];
m9_138 [label="Assert.Equal(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="284-284", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StateSteps.cs"];
m9_139 [label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="285-285", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StateSteps.cs"];
m9_140 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StateSteps.cs"];
m9_90 [label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StateSteps.cs"];
m9_91 [label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="201-202", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StateSteps.cs"];
m9_92 [label="stateMachine.ChangeState(JobSteps.DefaultJobId, _stateMocks[state].Object, allowedState)", span="203-203", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StateSteps.cs"];
m9_93 [label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StateSteps.cs"];
m9_152 [label="Entry Unk.False", span="", cluster="Unk.False", file="StateSteps.cs"];
m9_19 [label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="StateSteps.cs"];
m9_20 [label="_state = new EnqueuedState\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="78-81", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="StateSteps.cs"];
m9_21 [label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="StateSteps.cs"];
m9_162 [label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs"];
m9_163 [label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="319-319", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs"];
m9_164 [label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="320-320", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs"];
m9_165 [label="var timestamp = JobHelper.FromTimestamp((long) score)", span="321-321", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs"];
m9_166 [label="Assert.True(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="323-323", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs"];
m9_167 [label="Assert.True(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="324-324", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs"];
m9_168 [label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs"];
m9_64 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StateSteps.cs"];
m9_65 [label="Given(String.Format(''a '{0}' state'', state))", span="124-124", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StateSteps.cs"];
m9_66 [label="_filters.Add(\r\n                new TestStateChangingFilter(name, _stateChangingResults, _stateMocks[state].Object))", span="126-127", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StateSteps.cs"];
m9_67 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StateSteps.cs"];
m9_89 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="StateSteps.cs"];
m9_202 [label="Entry Unk.Unapply", span="", cluster="Unk.Unapply", file="StateSteps.cs"];
m9_102 [label="Entry Unk.ForEach", span="", cluster="Unk.ForEach", file="StateSteps.cs"];
m9_48 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="StateSteps.cs"];
m9_169 [label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="StateSteps.cs"];
m9_170 [label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="330-330", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="StateSteps.cs"];
m9_171 [label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="StateSteps.cs"];
m9_136 [label="Entry HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="8-8", cluster="HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", file="StateSteps.cs"];
m9_228 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="StateSteps.cs"];
m9_212 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs"];
m9_213 [label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="403-404", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs"];
m9_214 [label="Assert.NotNull(entry)", span="405-405", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs"];
m9_215 [label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="407-407", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs"];
m9_216 [label="Assert.NotNull(history)", span="408-408", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs"];
m9_218 [label="Assert.True(history.ContainsKey(property.Key))", span="412-412", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs"];
m9_219 [label="Assert.Equal(property.Value, history[property.Key])", span="413-413", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs"];
m9_217 [label=_stateProperties, span="410-410", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs"];
m9_220 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs"];
m9_121 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StateSteps.cs"];
m9_122 [label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="251-256", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StateSteps.cs"];
m9_123 [label="keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl));\r\n            })", span="258-264", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StateSteps.cs"];
m9_124 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StateSteps.cs"];
m9_120 [label="Entry Unk.PopItemFromList", span="", cluster="Unk.PopItemFromList", file="StateSteps.cs"];
m9_68 [label="Entry TestStateChangingFilter.cstr", span="", cluster="TestStateChangingFilter.cstr", file="StateSteps.cs"];
m9_13 [label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="28-28", cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="StateSteps.cs"];
m9_29 [label="Entry Mock<JobState>.cstr", span="", cluster="Mock<JobState>.cstr", file="StateSteps.cs"];
m9_221 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="StateSteps.cs"];
m9_22 [label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="25-25", cluster="HangFire.States.EnqueuedState.EnqueuedState()", file="StateSteps.cs"];
m9_94 [label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="StateSteps.cs"];
m9_95 [label="Assert.Equal(name, _state.StateName)", span="209-209", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="StateSteps.cs"];
m9_96 [label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="StateSteps.cs"];
m9_59 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="StateSteps.cs"];
m9_60 [label="_filters.Add(new TestStateChangingFilter(name, _stateChangingResults))", span="118-118", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="StateSteps.cs"];
m9_61 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="StateSteps.cs"];
m9_10 [label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="StateSteps.cs"];
m9_11 [label="_state = new ProcessingState(''TestServer'')\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="60-63", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="StateSteps.cs"];
m9_12 [label="Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="StateSteps.cs"];
m9_18 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="StateSteps.cs"];
m9_195 [label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="StateSteps.cs"];
m9_196 [label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId)))", span="388-389", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", color=green, community=0, file="StateSteps.cs"];
m9_197 [label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="StateSteps.cs"];
m9_227 [label="Exit HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs"];
m9_222 [label="Entry HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs"];
m9_223 [label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="420-421", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs"];
m9_224 [label=_stateProperties, span="423-423", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs"];
m9_225 [label="Assert.True(stateEntry.ContainsKey(property.Key))", span="425-425", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs"];
m9_226 [label="Assert.Equal(property.Value, stateEntry[property.Key])", span="426-426", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs"];
m9_229 [label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_230 [label="Assert.Equal(table.RowCount, _stateChangingResults.Count)", span="433-433", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_232 [label="i < table.RowCount", span="435-435", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_233 [label="Assert.Equal(table.Rows[i][''Filter''], _stateChangingResults[i])", span="437-437", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_231 [label="var i = 0", span="435-435", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_234 [label="i++", span="435-435", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_235 [label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_209 [label="Entry lambda expression", span="396-396", cluster="lambda expression", file="StateSteps.cs"];
m9_34 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="StateSteps.cs"];
m9_37 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="StateSteps.cs"];
m9_35 [label="x.StateName", span="88-88", cluster="lambda expression", file="StateSteps.cs"];
m9_36 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="StateSteps.cs"];
m9_38 [label="x.GetData(It.IsAny<JobMethod>())", span="89-89", cluster="lambda expression", file="StateSteps.cs"];
m9_39 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="StateSteps.cs"];
m9_50 [label="Entry lambda expression", span="100-100", cluster="lambda expression", file="StateSteps.cs"];
m9_53 [label="Entry lambda expression", span="100-100", cluster="lambda expression", file="StateSteps.cs"];
m9_56 [label="Entry lambda expression", span="101-101", cluster="lambda expression", file="StateSteps.cs"];
m9_51 [label="x[''Name'']", span="100-100", cluster="lambda expression", file="StateSteps.cs"];
m9_52 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="StateSteps.cs"];
m9_54 [label="x[''Value'']", span="100-100", cluster="lambda expression", file="StateSteps.cs"];
m9_55 [label="Exit lambda expression", span="100-100", cluster="lambda expression", file="StateSteps.cs"];
m9_57 [label="x.GetData(It.IsAny<JobMethod>())", span="101-101", cluster="lambda expression", file="StateSteps.cs"];
m9_58 [label="Exit lambda expression", span="101-101", cluster="lambda expression", file="StateSteps.cs"];
m9_103 [label="Entry lambda expression", span="222-229", cluster="lambda expression", file="StateSteps.cs"];
m9_104 [label="var ttl = Redis.Client.GetTimeToLive(x)", span="224-224", cluster="lambda expression", file="StateSteps.cs"];
m9_105 [label="Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl))", span="225-228", cluster="lambda expression", file="StateSteps.cs"];
m9_106 [label="Exit lambda expression", span="222-229", cluster="lambda expression", file="StateSteps.cs"];
m9_125 [label="Entry lambda expression", span="258-264", cluster="lambda expression", file="StateSteps.cs"];
m9_126 [label="var ttl = Redis.Client.GetTimeToLive(x)", span="260-260", cluster="lambda expression", file="StateSteps.cs"];
m9_127 [label="Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl))", span="261-263", cluster="lambda expression", file="StateSteps.cs"];
m9_128 [label="Exit lambda expression", span="258-264", cluster="lambda expression", file="StateSteps.cs"];
m9_199 [label="Entry lambda expression", span="389-389", cluster="lambda expression", file="StateSteps.cs"];
m9_200 [label="x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId))", span="389-389", cluster="lambda expression", color=green, community=0, file="StateSteps.cs"];
m9_201 [label="Exit lambda expression", span="389-389", cluster="lambda expression", file="StateSteps.cs"];
m9_203 [label="Entry lambda expression", span="389-389", cluster="lambda expression", file="StateSteps.cs"];
m9_204 [label="y.JobId == JobSteps.DefaultJobId", span="389-389", cluster="lambda expression", color=green, community=0, file="StateSteps.cs"];
m9_205 [label="Exit lambda expression", span="389-389", cluster="lambda expression", file="StateSteps.cs"];
m9_210 [label="x.Unapply(It.IsAny<StateApplyingContext>())", span="396-396", cluster="lambda expression", color=red, community=0, file="StateSteps.cs"];
m9_211 [label="Exit lambda expression", span="396-396", cluster="lambda expression", file="StateSteps.cs"];
m9_175 [label="Entry Unk.SetContainsItem", span="", cluster="Unk.SetContainsItem", file="StateSteps.cs"];
m9_62 [label="Entry HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", span="14-14", cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="StateSteps.cs"];
m9_249 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="StateSteps.cs"];
m9_108 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="StateSteps.cs"];
m9_149 [label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="StateSteps.cs"];
m9_150 [label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="303-303", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="StateSteps.cs"];
m9_151 [label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="StateSteps.cs"];
m9_31 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="StateSteps.cs"];
m9_33 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="StateSteps.cs"];
m9_77 [label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", span="41-41", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="StateSteps.cs"];
m9_80 [label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", span="181-181", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="StateSteps.cs"];
m9_81 [label="When(String.Format(\r\n                ''I change the state of the '{0}' job to the '{1}''',\r\n                JobSteps.DefaultJobId,\r\n                state))", span="183-186", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="StateSteps.cs"];
m9_82 [label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", span="181-181", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="StateSteps.cs"];
m9_107 [label="Entry Unk.GetTimeToLive", span="", cluster="Unk.GetTimeToLive", file="StateSteps.cs"];
m9_63 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="StateSteps.cs"];
m9_69 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="StateSteps.cs"];
m9_70 [label="_filters.Add(new TestStateChangedFilter(name, _stateAppliedResults))", span="133-133", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="StateSteps.cs"];
m9_71 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="StateSteps.cs"];
m9_42 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs"];
m9_43 [label="Given(String.Format(''a '{0}' state'', state))", span="98-98", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs"];
m9_44 [label="_stateProperties = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="100-100", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs"];
m9_45 [label="_stateMocks[state].Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(_stateProperties)", span="101-102", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs"];
m9_46 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs"];
m9_97 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="StateSteps.cs"];
m9_206 [label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="StateSteps.cs"];
m9_207 [label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.IsAny<StateApplyingContext>()),\r\n                Times.Never)", span="395-397", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", color=red, community=0, file="StateSteps.cs"];
m9_208 [label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="StateSteps.cs"];
m9_193 [label="Entry Unk.RemoveStartFromList", span="", cluster="Unk.RemoveStartFromList", file="StateSteps.cs"];
m9_176 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StateSteps.cs"];
m9_177 [label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="342-342", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StateSteps.cs"];
m9_178 [label="Assert.Equal(state, job[''State''])", span="343-343", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StateSteps.cs"];
m9_179 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StateSteps.cs"];
m9_110 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="StateSteps.cs"];
m9_111 [label="Assert.Equal(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="235-237", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="StateSteps.cs"];
m9_112 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="StateSteps.cs"];
m9_72 [label="Entry HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", span="14-14", cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", file="StateSteps.cs"];
m9_236 [label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="StateSteps.cs"];
m9_237 [label="Assert.Equal(0, _stateChangingResults.Count)", span="444-444", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="StateSteps.cs"];
m9_238 [label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="StateSteps.cs"];
m9_8 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="StateSteps.cs"];
m9_23 [label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs"];
m9_24 [label="var mock = new Mock<JobState>()", span="87-87", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs"];
m9_25 [label="mock.Setup(x => x.StateName).Returns(state)", span="88-88", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs"];
m9_27 [label="_stateMocks.Add(state, mock)", span="92-92", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs"];
m9_26 [label="mock.Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(new Dictionary<string, string>())", span="89-90", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs"];
m9_28 [label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs"];
m9_194 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="StateSteps.cs"];
m9_30 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="StateSteps.cs"];
m9_14 [label="Entry HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="StateSteps.cs"];
m9_15 [label="_state = new ScheduledState(DateTime.UtcNow.AddDays(1))\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="69-72", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="StateSteps.cs"];
m9_16 [label="Exit HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="StateSteps.cs"];
m9_172 [label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StateSteps.cs"];
m9_173 [label="Assert.True(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="336-336", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StateSteps.cs"];
m9_174 [label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StateSteps.cs"];
m9_17 [label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="27-27", cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="StateSteps.cs"];
m9_146 [label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="StateSteps.cs"];
m9_147 [label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="297-297", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="StateSteps.cs"];
m9_148 [label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="StateSteps.cs"];
m9_141 [label="Entry Unk.GetSortedSetCount", span="", cluster="Unk.GetSortedSetCount", file="StateSteps.cs"];
m9_198 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="StateSteps.cs"];
m9_115 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StateSteps.cs"];
m9_116 [label="Assert.Equal(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="243-243", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StateSteps.cs"];
m9_117 [label="Assert.Equal(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="244-245", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StateSteps.cs"];
m9_118 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StateSteps.cs"];
m9_143 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="StateSteps.cs"];
m9_144 [label="Assert.Equal(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="291-291", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="StateSteps.cs"];
m9_145 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="StateSteps.cs"];
m9_184 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StateSteps.cs"];
m9_181 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StateSteps.cs"];
m9_182 [label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="349-350", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StateSteps.cs"];
m9_183 [label="TableAssert.ContainsFollowingItems(table, stateEntry)", span="351-351", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StateSteps.cs"];
m9_9 [label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="28-28", cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="StateSteps.cs"];
m9_142 [label="Entry Unk.SortedSetContainsItem", span="", cluster="Unk.SortedSetContainsItem", file="StateSteps.cs"];
m9_83 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="StateSteps.cs"];
m9_161 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)", file="StateSteps.cs"];
m9_113 [label="Entry string.Format(string, params object[])", span="0-0", cluster="string.Format(string, params object[])", file="StateSteps.cs"];
m9_98 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StateSteps.cs"];
m9_99 [label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="215-220", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StateSteps.cs"];
m9_100 [label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl));\r\n                })", span="222-229", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StateSteps.cs"];
m9_101 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StateSteps.cs"];
m9_49 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="StateSteps.cs"];
m9_180 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="StateSteps.cs"];
m9_4 [label="Entry HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StateSteps.cs"];
m9_5 [label="_failedException = new InvalidOperationException(''Hello'')", span="50-50", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StateSteps.cs"];
m9_6 [label="_state = new FailedState(_failedException)\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="51-54", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StateSteps.cs"];
m9_7 [label="Exit HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StateSteps.cs"];
m9_160 [label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="41-41", cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="StateSteps.cs"];
m9_47 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="StateSteps.cs"];
m9_192 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs"];
m9_186 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs"];
m9_187 [label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="357-358", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs"];
m9_191 [label="TableAssert.ContainsFollowingItems(table, history)", span="364-364", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs"];
m9_188 [label="Assert.NotNull(entry)", span="359-359", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs"];
m9_189 [label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="361-361", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs"];
m9_190 [label="Assert.NotNull(history)", span="362-362", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs"];
m9_40 [label="Entry Unk.>", span="", cluster="Unk.>", file="StateSteps.cs"];
m9_159 [label="Entry Unk.GetItemScoreInSortedSet", span="", cluster="Unk.GetItemScoreInSortedSet", file="StateSteps.cs"];
m9_78 [label="Entry HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", span="15-15", cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="StateSteps.cs"];
m9_119 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="StateSteps.cs"];
m9_41 [label="Entry Unk.GetData", span="", cluster="Unk.GetData", file="StateSteps.cs"];
m9_3 [label="Entry HangFire.States.SucceededState.SucceededState()", span="23-23", cluster="HangFire.States.SucceededState.SucceededState()", file="StateSteps.cs"];
m9_0 [label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StateSteps.cs"];
m9_1 [label="_state = new SucceededState { Reason = ''SomeReason'' }", span="44-44", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StateSteps.cs"];
m9_2 [label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StateSteps.cs"];
m9_32 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="StateSteps.cs"];
m9_84 [label="Entry Unk.When", span="", cluster="Unk.When", file="StateSteps.cs"];
m9_129 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="StateSteps.cs"];
m9_130 [label="Assert.Equal(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="270-270", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="StateSteps.cs"];
m9_131 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="StateSteps.cs"];
m9_132 [label="Entry HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="StateSteps.cs"];
m9_133 [label="TableAssert.ContainsFollowingItems(\r\n                table,\r\n                _state.GetData(_defaultData))", span="276-278", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="StateSteps.cs"];
m9_134 [label="Exit HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="StateSteps.cs"];
m9_247 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList", file="StateSteps.cs"];
m9_85 [label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StateSteps.cs"];
m9_86 [label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="192-193", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StateSteps.cs"];
m9_87 [label="stateMachine.ChangeState(jobId, _stateMocks[state].Object)", span="194-194", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StateSteps.cs"];
m9_88 [label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StateSteps.cs"];
m9_248 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="StateSteps.cs"];
m9_79 [label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="113-113", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="StateSteps.cs"];
m9_73 [label="Entry HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StateSteps.cs"];
m9_74 [label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="175-176", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StateSteps.cs"];
m9_75 [label="stateMachine.ChangeState(JobSteps.DefaultJobId, _state)", span="177-177", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StateSteps.cs"];
m9_76 [label="Exit HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StateSteps.cs"];
m9_114 [label="Entry Unk.GetValue", span="", cluster="Unk.GetValue", file="StateSteps.cs"];
m9_109 [label="Entry Unk.True", span="", cluster="Unk.True", file="StateSteps.cs"];
m9_185 [label="Entry Unk.ContainsFollowingItems", span="", cluster="Unk.ContainsFollowingItems", file="StateSteps.cs"];
m9_250 [label="Entry HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_251 [label="Assert.Equal(table.RowCount, _stateAppliedResults.Count)", span="463-463", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_253 [label="i < table.RowCount", span="465-465", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_254 [label="Assert.Equal(table.Rows[i][''Method''], _stateAppliedResults[i])", span="467-467", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_252 [label="var i = 0", span="465-465", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_255 [label="i++", span="465-465", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_256 [label="Exit HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m9_257 [label="HangFire.Tests.States.StateSteps", span="", file="StateSteps.cs"];
m10_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="SucceededState.cs"];
m10_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="SucceededState.cs"];
m10_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="SucceededState.cs"];
m10_55 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs"];
m10_56 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns null when it tries to dequeue a job from an empty queue'', ((string[])(null)))", span="121-121", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs"];
m10_57 [label="this.ScenarioSetup(scenarioInfo)", span="123-123", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs"];
m10_58 [label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="125-125", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs"];
m10_59 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="127-127", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs"];
m10_60 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="129-129", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs"];
m10_61 [label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="131-131", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs"];
m10_62 [label="this.ScenarioCleanup()", span="133-133", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs"];
m10_63 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs"];
m10_0 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SucceededState.cs"];
m10_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SucceededState.cs"];
m10_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SucceededState.cs"];
m10_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SucceededState.cs"];
m10_4 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SucceededState.cs"];
m10_76 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs"];
m10_77 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher listens only specified queue'', ((string[])(null)))", span="169-169", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs"];
m10_78 [label="this.ScenarioSetup(scenarioInfo)", span="171-171", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs"];
m10_79 [label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="173-173", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs"];
m10_80 [label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="175-175", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs"];
m10_81 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="177-177", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs"];
m10_82 [label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="179-179", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs"];
m10_83 [label="this.ScenarioCleanup()", span="181-181", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs"];
m10_84 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs"];
m10_41 [label="Entry Unk.And", span="", cluster="Unk.And", file="SucceededState.cs"];
m10_54 [label="Entry Unk.But", span="", cluster="Unk.But", file="SucceededState.cs"];
m10_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="SucceededState.cs"];
m10_9 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="SucceededState.cs"];
m10_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="SucceededState.cs", color=green, community=0];
m10_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", color=red, community=0, file="SucceededState.cs"];
m10_12 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="SucceededState.cs"];
m10_22 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SucceededState.cs"];
m10_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SucceededState.cs"];
m10_24 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SucceededState.cs"];
m10_85 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_86 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher sets the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="190-190", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_87 [label="this.ScenarioSetup(scenarioInfo)", span="192-192", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_88 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="194-194", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_89 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="196-196", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_90 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="198-198", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_91 [label="testRunner.Then(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="200-200", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_92 [label="this.ScenarioCleanup()", span="202-202", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_93 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="SucceededState.cs"];
m10_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SucceededState.cs"];
m10_64 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_65 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher dequeues jobs in the FIFO order'', ((string[])(null)))", span="142-142", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_66 [label="this.ScenarioSetup(scenarioInfo)", span="144-144", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_67 [label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="146-146", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_68 [label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="148-148", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_69 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="150-150", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_70 [label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="152-152", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_71 [label="testRunner.Then(''the fetcher returns the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="154-154", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_72 [label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_73 [label="testRunner.Then(''the fetcher returns the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_74 [label="this.ScenarioCleanup()", span="160-160", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_75 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs"];
m10_42 [label="Entry Unk.When", span="", cluster="Unk.When", file="SucceededState.cs"];
m10_14 [label="Entry HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="SucceededState.cs"];
m10_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", color=green, community=0, file="SucceededState.cs"];
m10_16 [label="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="SucceededState.cs"];
m10_17 [label="Exit HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="SucceededState.cs"];
m10_39 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SucceededState.cs"];
m10_43 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="SucceededState.cs"];
m10_40 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="SucceededState.cs"];
m10_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SucceededState.cs"];
m10_26 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="SucceededState.cs"];
m10_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="SucceededState.cs"];
m10_28 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="SucceededState.cs"];
m10_44 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs"];
m10_45 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher removes the dequeued job from the queue and adds it to the dequeued list'', ((string[])(null)))", span="98-98", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs"];
m10_46 [label="this.ScenarioSetup(scenarioInfo)", span="100-100", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs"];
m10_47 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs"];
m10_48 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs"];
m10_49 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs"];
m10_50 [label="testRunner.Then(''the queue does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs"];
m10_51 [label="testRunner.But(''the dequeued jobs list contains it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="110-110", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs"];
m10_52 [label="this.ScenarioCleanup()", span="112-112", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs"];
m10_53 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs"];
m10_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="SucceededState.cs"];
m10_30 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns the job payload when it dequeues a job'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_33 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_34 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_35 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_36 [label="testRunner.Then(''the fetcher returns the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_37 [label="this.ScenarioCleanup()", span="89-89", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_38 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs"];
m10_18 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="SucceededState.cs"];
m10_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="SucceededState.cs"];
m10_20 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="SucceededState.cs"];
m10_94 [label="HangFire.Tests.Server.JobFetcherFeature", span="", file="SucceededState.cs"];
m11_9 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="31-31", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="SucceededStateHandler.cs"];
m11_5 [label="Entry HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="32-32", cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="SucceededStateHandler.cs"];
m11_6 [label="Entry HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="13-13", cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SucceededStateHandler.cs"];
m11_7 [label="context.Transaction.RemoveFromList(''succeeded'', context.JobId)", span="15-15", cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="SucceededStateHandler.cs"];
m11_8 [label="Exit HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="13-13", cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SucceededStateHandler.cs"];
m11_0 [label="Entry HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="7-7", cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="SucceededStateHandler.cs"];
m11_1 [label="context.Transaction.InsertToList(''succeeded'', context.JobId)", span="9-9", cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="SucceededStateHandler.cs"];
m11_2 [label="context.Transaction.TrimList(''succeeded'', 0, 99)", span="10-10", cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", color=red, community=0, file="SucceededStateHandler.cs"];
m11_3 [label="Exit HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="7-7", cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="SucceededStateHandler.cs"];
m11_4 [label="Entry HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="30-30", cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="SucceededStateHandler.cs"];
m12_34 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SucceededStateHandlerFacts.cs"];
m12_25 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SucceededStateHandlerFacts.cs"];
m12_27 [label="Entry HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55", cluster="HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="SucceededStateHandlerFacts.cs"];
m12_0 [label="Entry HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", span="9-9", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_1 [label="RecurringJobs = new List<RecurringJobDto>()", span="11-11", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_2 [label="var connection = JobStorage.Current.GetConnection()", span="13-13", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_3 [label="var ids = connection.GetAllItemsFromSet(''recurring-jobs'')", span="15-15", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_5 [label="var hash = connection.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', id))", span="19-19", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_18 [label="var stateData = connection.GetStateData(dto.LastJobId)", span="49-49", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", color=red, community=0, file="SucceededStateHandlerFacts.cs"];
m12_4 [label=ids, span="17-17", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_7 [label="RecurringJobs.Add(new RecurringJobDto { Id = id, Removed = true })", span="23-23", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_8 [label="var dto = new RecurringJobDto { Id = id }", span="27-27", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_6 [label="hash == null", span="21-21", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_9 [label="dto.Cron = hash[''Cron'']", span="28-28", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_10 [label="var invocationData = JobHelper.FromJson<InvocationData>(hash[''Job''])", span="32-32", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_14 [label="hash.ContainsKey(''NextExecution'')", span="40-40", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", color=red, community=0, file="SucceededStateHandlerFacts.cs"];
m12_15 [label="dto.NextExecution = JobHelper.DeserializeDateTime(hash[''NextExecution''])", span="42-42", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_16 [label="hash.ContainsKey(''LastJobId'')", span="45-45", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_17 [label="dto.LastJobId = hash[''LastJobId'']", span="47-47", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_21 [label="hash.ContainsKey(''LastExecution'')", span="56-56", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_22 [label="dto.LastExecution = JobHelper.DeserializeDateTime(hash[''LastExecution''])", span="58-58", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", color=red, community=0, file="SucceededStateHandlerFacts.cs"];
m12_11 [label="dto.Job = invocationData.Deserialize()", span="33-33", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_13 [label="dto.LoadException = ex", span="37-37", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_20 [label="dto.LastJobState = stateData.Name", span="52-52", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_23 [label="RecurringJobs.Add(dto)", span="61-61", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_12 [label=JobLoadException, span="35-35", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_19 [label="stateData != null", span="50-50", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_24 [label="Exit HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", span="9-9", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs"];
m12_31 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="SucceededStateHandlerFacts.cs"];
m12_32 [label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="31-31", cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="SucceededStateHandlerFacts.cs"];
m12_33 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="SucceededStateHandlerFacts.cs"];
m12_35 [label="Entry HangFire.Common.JobHelper.DeserializeDateTime(string)", span="56-56", cluster="HangFire.Common.JobHelper.DeserializeDateTime(string)", file="SucceededStateHandlerFacts.cs"];
m12_29 [label="Entry HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64", cluster="HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="SucceededStateHandlerFacts.cs"];
m12_36 [label="Entry HangFire.Storage.IStorageConnection.GetStateData(string)", span="45-45", cluster="HangFire.Storage.IStorageConnection.GetStateData(string)", file="SucceededStateHandlerFacts.cs"];
m12_30 [label="Entry HangFire.Web.Pages.RecurringJobsPage.RecurringJobDto.RecurringJobDto()", span="68-68", cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobDto.RecurringJobDto()", file="SucceededStateHandlerFacts.cs"];
m12_28 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SucceededStateHandlerFacts.cs"];
m12_26 [label="Entry HangFire.JobStorage.GetConnection()", span="56-56", cluster="HangFire.JobStorage.GetConnection()", file="SucceededStateHandlerFacts.cs"];
m12_37 [label="HangFire.Web.Pages.RecurringJobsPage", span="", file="SucceededStateHandlerFacts.cs"];
m0_5 -> m0_6  [key=0, style=solid, color=green];
m0_6 -> m0_7  [key=0, style=solid, color=green];
m0_6 -> m0_8  [key=2, style=dotted, color=green];
m0_7 -> m0_5  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_3  [key=2, style=dotted, color=green];
m0_1 -> m0_4  [key=2, style=dotted, color=green];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_2  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=2, style=dotted];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m3_9 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m3_9 -> m3_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m3_9 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_16  [key=2, style=dotted];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_16  [key=2, style=dotted];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_17  [key=2, style=dotted];
m3_12 -> m3_18  [key=2, style=dotted];
m3_12 -> m3_16  [key=2, style=dotted];
m3_12 -> m3_19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_16  [key=2, style=dotted];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_16  [key=2, style=dotted];
m3_15 -> m3_9  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_7  [key=2, style=dotted];
m3_2 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_8  [key=2, style=dotted];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_8  [key=2, style=dotted];
m3_6 -> m3_0  [key=0, style=bold, color=blue];
m3_19 -> m3_20  [key=0, style=solid];
m3_20 -> m3_21  [key=0, style=solid];
m3_21 -> m3_19  [key=0, style=bold, color=blue];
m3_22 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_22 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_22 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_22 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_22 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_22 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_22 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_22 -> m3_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_22 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m4_5 -> m4_6  [key=0, style=solid, color=green];
m4_6 -> m4_7  [key=0, style=solid, color=green];
m4_6 -> m4_8  [key=2, style=dotted, color=green];
m4_7 -> m4_5  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid, color=green];
m4_1 -> m4_2  [key=0, style=solid, color=green];
m4_1 -> m4_3  [key=2, style=dotted, color=green];
m4_1 -> m4_4  [key=2, style=dotted, color=green];
m4_2 -> m4_0  [key=0, style=bold, color=blue];
m5_14 -> m5_15  [key=0, style=solid];
m5_5 -> m5_3  [key=0, style=bold, color=blue];
m5_13 -> m5_10  [key=0, style=bold, color=blue];
m5_32 -> m5_33  [key=0, style=solid, color=green];
m5_33 -> m5_34  [key=0, style=solid, color=green];
m5_33 -> m5_23  [key=2, style=dotted, color=green];
m5_34 -> m5_35  [key=0, style=solid];
m5_34 -> m5_38  [key=2, style=dotted];
m5_35 -> m5_36  [key=0, style=solid];
m5_35 -> m5_39  [key=2, style=dotted];
m5_35 -> m5_40  [key=2, style=dotted];
m5_35 -> m5_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_36 -> m5_37  [key=0, style=solid];
m5_36 -> m5_41  [key=2, style=dotted];
m5_37 -> m5_32  [key=0, style=bold, color=blue];
m5_8 -> m5_9  [key=0, style=solid, color=red];
m5_8 -> m5_11  [key=1, style=dashed, color=red, label="HangFire.Common.States.StateApplyingContext"];
m5_8 -> m5_6  [key=0, style=bold, color=blue];
m5_9 -> m5_10  [key=0, style=solid, color=red];
m5_9 -> m5_13  [key=2, style=dotted, color=red];
m5_11 -> m5_12  [key=0, style=solid, color=red];
m5_11 -> m5_15  [key=2, style=dotted, color=red];
m5_11 -> m5_14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_11 -> m5_4  [key=2, style=dotted];
m5_10 -> m5_11  [key=0, style=solid, color=red];
m5_10 -> m5_14  [key=2, style=dotted];
m5_12 -> m5_8  [key=0, style=bold, color=blue];
m5_12 -> m5_13  [key=0, style=solid];
m5_12 -> m5_5  [key=2, style=dotted];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_6  [key=2, style=dotted];
m5_4 -> m5_7  [key=2, style=dotted];
m5_23 -> m5_46  [key=0, style=solid];
m5_46 -> m5_47  [key=0, style=solid];
m5_46 -> m5_17  [key=2, style=dotted];
m5_46 -> m5_48  [key=2, style=dotted];
m5_46 -> m5_49  [key=2, style=dotted];
m5_47 -> m5_23  [key=0, style=bold, color=blue];
m5_6 -> m5_7  [key=0, style=solid];
m5_17 -> m5_18  [key=0, style=solid, color=red];
m5_17 -> m5_19  [key=2, style=dotted, color=red];
m5_15 -> m5_17  [key=2, style=dotted];
m5_15 -> m5_16  [key=0, style=solid];
m5_42 -> m5_43  [key=0, style=solid];
m5_44 -> m5_42  [key=0, style=bold, color=blue];
m5_43 -> m5_44  [key=0, style=solid];
m5_43 -> m5_45  [key=2, style=dotted];
m5_16 -> m5_14  [key=0, style=bold, color=blue];
m5_16 -> m5_17  [key=0, style=solid, color=red];
m5_7 -> m5_8  [key=0, style=solid];
m5_7 -> m5_9  [key=2, style=dotted];
m5_26 -> m5_27  [key=0, style=solid];
m5_27 -> m5_23  [key=2, style=dotted];
m5_27 -> m5_28  [key=0, style=solid];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_31  [key=2, style=dotted];
m5_29 -> m5_30  [key=0, style=solid];
m5_29 -> m5_25  [key=2, style=dotted];
m5_30 -> m5_26  [key=0, style=bold, color=blue];
m5_18 -> m5_16  [key=0, style=bold, color=blue];
m5_18 -> m5_19  [key=0, style=solid];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_0  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_4  [key=2, style=dotted];
m5_1 -> m5_6  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_2 -> m5_0  [key=0, style=bold, color=blue];
m5_2 -> m5_5  [key=2, style=dotted];
m5_2 -> m5_3  [key=0, style=solid];
m5_19 -> m5_23  [key=2, style=dotted];
m5_19 -> m5_20  [key=0, style=solid];
m5_20 -> m5_21  [key=0, style=solid];
m5_20 -> m5_24  [key=2, style=dotted];
m5_20 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ScheduledState"];
m5_20 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ScheduledState"];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_25  [key=2, style=dotted];
m5_22 -> m5_18  [key=0, style=bold, color=blue];
m6_19 -> m6_20  [key=0, style=solid];
m6_20 -> m6_21  [key=0, style=solid];
m6_20 -> m6_22  [key=2, style=dotted];
m6_20 -> m6_18  [key=2, style=dotted];
m6_21 -> m6_19  [key=0, style=bold, color=blue];
m6_14 -> m6_15  [key=0, style=solid];
m6_15 -> m6_16  [key=0, style=solid];
m6_15 -> m6_17  [key=2, style=dotted];
m6_15 -> m6_18  [key=2, style=dotted];
m6_16 -> m6_14  [key=0, style=bold, color=blue];
m6_4 -> m6_5  [key=0, style=solid];
m6_5 -> m6_4  [key=0, style=bold, color=blue];
m6_23 -> m6_24  [key=0, style=solid];
m6_24 -> m6_25  [key=0, style=solid];
m6_24 -> m6_26  [key=2, style=dotted];
m6_24 -> m6_27  [key=2, style=dotted];
m6_25 -> m6_23  [key=0, style=bold, color=blue];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_30  [key=0, style=bold, color=crimson];
m6_28 -> m6_31  [key=0, style=bold, color=crimson];
m6_29 -> m6_30  [key=0, style=solid];
m6_29 -> m6_33  [key=2, style=dotted];
m6_30 -> m6_31  [key=0, style=solid];
m6_30 -> m6_34  [key=2, style=dotted];
m6_31 -> m6_32  [key=0, style=solid];
m6_31 -> m6_35  [key=2, style=dotted];
m6_32 -> m6_28  [key=0, style=bold, color=blue];
m6_2 -> m6_3  [key=0, style=solid];
m6_3 -> m6_2  [key=0, style=bold, color=blue];
m6_36 -> m6_37  [key=0, style=solid];
m6_37 -> m6_38  [key=0, style=solid];
m6_37 -> m6_39  [key=2, style=dotted];
m6_38 -> m6_36  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_0  [key=0, style=bold, color=blue];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_8  [key=1, style=dashed, color=darkseagreen4, label=int];
m6_6 -> m6_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageOptions"];
m6_7 -> m6_8  [key=0, style=solid];
m6_8 -> m6_9  [key=0, style=solid];
m6_9 -> m6_10  [key=0, style=solid];
m6_10 -> m6_11  [key=0, style=solid];
m6_10 -> m6_12  [key=2, style=dotted];
m6_10 -> m6_13  [key=2, style=dotted];
m6_11 -> m6_6  [key=0, style=bold, color=blue];
m6_40 -> m6_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m6_40 -> m6_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m6_40 -> m6_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m6_40 -> m6_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m6_40 -> m6_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m6_40 -> m6_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m6_40 -> m6_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m6_40 -> m6_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m7_0 -> m7_1  [key=0, style=solid, color=red];
m7_0 -> m7_3  [key=1, style=dashed, color=red, label="HangFire.Common.States.JobState"];
m7_0 -> m7_5  [key=1, style=dashed, color=red, label="HangFire.Storage.IWriteOnlyTransaction"];
m7_0 -> m7_6  [key=1, style=dashed, color=red, label="HangFire.Common.States.JobState"];
m7_1 -> m7_2  [key=0, style=solid, color=red];
m7_1 -> m7_3  [key=0, style=solid, color=red];
m7_3 -> m7_4  [key=0, style=solid, color=red];
m7_3 -> m7_5  [key=0, style=solid, color=red];
m7_5 -> m7_6  [key=0, style=solid, color=red];
m7_6 -> m7_7  [key=0, style=solid, color=red];
m7_2 -> m7_7  [key=0, style=solid, color=red];
m7_2 -> m7_8  [key=2, style=dotted, color=red];
m7_4 -> m7_7  [key=0, style=solid, color=red];
m7_4 -> m7_8  [key=2, style=dotted, color=red];
m7_7 -> m7_0  [key=0, style=bold, color=blue];
m7_9 -> m7_5  [key=1, style=dashed, color=red, label="HangFire.Common.States.StateApplyingContext"];
m7_9 -> m7_6  [key=1, style=dashed, color=red, label="HangFire.Common.States.StateApplyingContext"];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_2  [key=0, style=solid];
m8_1 -> m8_3  [key=2, style=dotted];
m8_2 -> m8_0  [key=0, style=bold, color=blue];
m9_239 -> m9_240  [key=0, style=solid];
m9_239 -> m9_243  [key=1, style=dashed, color=darkseagreen4, label=Table];
m9_239 -> m9_244  [key=1, style=dashed, color=darkseagreen4, label=Table];
m9_240 -> m9_241  [key=0, style=solid];
m9_240 -> m9_47  [key=2, style=dotted];
m9_240 -> m9_247  [key=2, style=dotted];
m9_243 -> m9_244  [key=0, style=solid];
m9_243 -> m9_246  [key=0, style=solid];
m9_243 -> m9_232  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m9_244 -> m9_245  [key=0, style=solid];
m9_244 -> m9_97  [key=2, style=dotted];
m9_241 -> m9_242  [key=0, style=solid];
m9_241 -> m9_248  [key=2, style=dotted];
m9_241 -> m9_249  [key=2, style=dotted];
m9_241 -> m9_244  [key=1, style=dashed, color=darkseagreen4, label=history];
m9_242 -> m9_243  [key=0, style=solid];
m9_242 -> m9_244  [key=1, style=dashed, color=darkseagreen4, label=i];
m9_242 -> m9_245  [key=1, style=dashed, color=darkseagreen4, label=i];
m9_245 -> m9_243  [key=0, style=solid];
m9_245 -> m9_245  [key=1, style=dashed, color=darkseagreen4, label=i];
m9_246 -> m9_239  [key=0, style=bold, color=blue];
m9_153 -> m9_154  [key=0, style=solid];
m9_154 -> m9_155  [key=0, style=solid];
m9_154 -> m9_159  [key=2, style=dotted];
m9_155 -> m9_156  [key=0, style=solid];
m9_155 -> m9_160  [key=2, style=dotted];
m9_155 -> m9_157  [key=1, style=dashed, color=darkseagreen4, label=timestamp];
m9_156 -> m9_157  [key=0, style=solid];
m9_156 -> m9_161  [key=2, style=dotted];
m9_156 -> m9_109  [key=2, style=dotted];
m9_157 -> m9_158  [key=0, style=solid];
m9_157 -> m9_161  [key=2, style=dotted];
m9_157 -> m9_109  [key=2, style=dotted];
m9_158 -> m9_153  [key=0, style=bold, color=blue];
m9_137 -> m9_138  [key=0, style=solid];
m9_138 -> m9_139  [key=0, style=solid];
m9_138 -> m9_141  [key=2, style=dotted];
m9_138 -> m9_97  [key=2, style=dotted];
m9_139 -> m9_140  [key=0, style=solid];
m9_139 -> m9_142  [key=2, style=dotted];
m9_139 -> m9_109  [key=2, style=dotted];
m9_140 -> m9_137  [key=0, style=bold, color=blue];
m9_90 -> m9_91  [key=0, style=solid];
m9_90 -> m9_92  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_91 -> m9_92  [key=0, style=solid];
m9_91 -> m9_77  [key=2, style=dotted];
m9_91 -> m9_78  [key=2, style=dotted];
m9_92 -> m9_93  [key=0, style=solid];
m9_92 -> m9_89  [key=2, style=dotted];
m9_93 -> m9_90  [key=0, style=bold, color=blue];
m9_19 -> m9_20  [key=0, style=solid];
m9_20 -> m9_21  [key=0, style=solid];
m9_20 -> m9_22  [key=2, style=dotted];
m9_21 -> m9_19  [key=0, style=bold, color=blue];
m9_162 -> m9_163  [key=0, style=solid];
m9_163 -> m9_164  [key=0, style=solid];
m9_163 -> m9_142  [key=2, style=dotted];
m9_163 -> m9_109  [key=2, style=dotted];
m9_164 -> m9_165  [key=0, style=solid];
m9_164 -> m9_159  [key=2, style=dotted];
m9_165 -> m9_166  [key=0, style=solid];
m9_165 -> m9_160  [key=2, style=dotted];
m9_165 -> m9_167  [key=1, style=dashed, color=darkseagreen4, label=timestamp];
m9_166 -> m9_167  [key=0, style=solid];
m9_166 -> m9_18  [key=2, style=dotted];
m9_166 -> m9_109  [key=2, style=dotted];
m9_167 -> m9_168  [key=0, style=solid];
m9_167 -> m9_18  [key=2, style=dotted];
m9_167 -> m9_109  [key=2, style=dotted];
m9_168 -> m9_162  [key=0, style=bold, color=blue];
m9_64 -> m9_65  [key=0, style=solid];
m9_64 -> m9_66  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_65 -> m9_66  [key=0, style=solid];
m9_65 -> m9_47  [key=2, style=dotted];
m9_65 -> m9_48  [key=2, style=dotted];
m9_66 -> m9_67  [key=0, style=solid];
m9_66 -> m9_68  [key=2, style=dotted];
m9_66 -> m9_63  [key=2, style=dotted];
m9_67 -> m9_64  [key=0, style=bold, color=blue];
m9_169 -> m9_170  [key=0, style=solid];
m9_170 -> m9_171  [key=0, style=solid];
m9_170 -> m9_142  [key=2, style=dotted];
m9_170 -> m9_152  [key=2, style=dotted];
m9_171 -> m9_169  [key=0, style=bold, color=blue];
m9_212 -> m9_213  [key=0, style=solid];
m9_213 -> m9_214  [key=0, style=solid];
m9_213 -> m9_47  [key=2, style=dotted];
m9_213 -> m9_193  [key=2, style=dotted];
m9_213 -> m9_215  [key=1, style=dashed, color=darkseagreen4, label=entry];
m9_214 -> m9_215  [key=0, style=solid];
m9_214 -> m9_194  [key=2, style=dotted];
m9_215 -> m9_216  [key=0, style=solid];
m9_215 -> m9_40  [key=2, style=dotted];
m9_215 -> m9_218  [key=1, style=dashed, color=darkseagreen4, label=history];
m9_215 -> m9_219  [key=1, style=dashed, color=darkseagreen4, label=history];
m9_216 -> m9_217  [key=0, style=solid];
m9_216 -> m9_194  [key=2, style=dotted];
m9_218 -> m9_219  [key=0, style=solid];
m9_218 -> m9_221  [key=2, style=dotted];
m9_218 -> m9_109  [key=2, style=dotted];
m9_218 -> m9_218  [key=1, style=dashed, color=darkseagreen4, label=property];
m9_219 -> m9_217  [key=0, style=solid];
m9_219 -> m9_97  [key=2, style=dotted];
m9_219 -> m9_219  [key=1, style=dashed, color=darkseagreen4, label=property];
m9_217 -> m9_218  [key=0, style=solid];
m9_217 -> m9_220  [key=0, style=solid];
m9_220 -> m9_212  [key=0, style=bold, color=blue];
m9_121 -> m9_122  [key=0, style=solid];
m9_122 -> m9_123  [key=0, style=solid];
m9_122 -> m9_47  [key=2, style=dotted];
m9_123 -> m9_124  [key=0, style=solid];
m9_123 -> m9_102  [key=2, style=dotted];
m9_123 -> m9_125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_124 -> m9_121  [key=0, style=bold, color=blue];
m9_94 -> m9_95  [key=0, style=solid];
m9_95 -> m9_96  [key=0, style=solid];
m9_95 -> m9_97  [key=2, style=dotted];
m9_96 -> m9_94  [key=0, style=bold, color=blue];
m9_59 -> m9_60  [key=0, style=solid];
m9_60 -> m9_61  [key=0, style=solid];
m9_60 -> m9_62  [key=2, style=dotted];
m9_60 -> m9_63  [key=2, style=dotted];
m9_61 -> m9_59  [key=0, style=bold, color=blue];
m9_10 -> m9_11  [key=0, style=solid];
m9_11 -> m9_12  [key=0, style=solid];
m9_11 -> m9_13  [key=2, style=dotted];
m9_12 -> m9_10  [key=0, style=bold, color=blue];
m9_195 -> m9_196  [key=0, style=solid, color=green];
m9_196 -> m9_197  [key=0, style=solid, color=green];
m9_196 -> m9_198  [key=2, style=dotted, color=green];
m9_196 -> m9_199  [key=1, style=dashed, color=green, label="lambda expression"];
m9_197 -> m9_195  [key=0, style=bold, color=blue];
m9_227 -> m9_222  [key=0, style=bold, color=blue];
m9_222 -> m9_223  [key=0, style=solid];
m9_223 -> m9_224  [key=0, style=solid];
m9_223 -> m9_47  [key=2, style=dotted];
m9_223 -> m9_180  [key=2, style=dotted];
m9_223 -> m9_225  [key=1, style=dashed, color=darkseagreen4, label=stateEntry];
m9_223 -> m9_226  [key=1, style=dashed, color=darkseagreen4, label=stateEntry];
m9_224 -> m9_225  [key=0, style=solid];
m9_224 -> m9_227  [key=0, style=solid];
m9_225 -> m9_226  [key=0, style=solid];
m9_225 -> m9_228  [key=2, style=dotted];
m9_225 -> m9_109  [key=2, style=dotted];
m9_225 -> m9_225  [key=1, style=dashed, color=darkseagreen4, label=property];
m9_226 -> m9_224  [key=0, style=solid];
m9_226 -> m9_97  [key=2, style=dotted];
m9_226 -> m9_226  [key=1, style=dashed, color=darkseagreen4, label=property];
m9_229 -> m9_230  [key=0, style=solid];
m9_229 -> m9_232  [key=1, style=dashed, color=darkseagreen4, label=Table];
m9_229 -> m9_233  [key=1, style=dashed, color=darkseagreen4, label=Table];
m9_230 -> m9_231  [key=0, style=solid];
m9_230 -> m9_97  [key=2, style=dotted];
m9_232 -> m9_233  [key=0, style=solid];
m9_232 -> m9_235  [key=0, style=solid];
m9_232 -> m9_232  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m9_233 -> m9_234  [key=0, style=solid];
m9_233 -> m9_97  [key=2, style=dotted];
m9_231 -> m9_232  [key=0, style=solid];
m9_231 -> m9_233  [key=1, style=dashed, color=darkseagreen4, label=i];
m9_231 -> m9_234  [key=1, style=dashed, color=darkseagreen4, label=i];
m9_234 -> m9_232  [key=0, style=solid];
m9_234 -> m9_234  [key=1, style=dashed, color=darkseagreen4, label=i];
m9_235 -> m9_229  [key=0, style=bold, color=blue];
m9_209 -> m9_210  [key=0, style=solid, color=red];
m9_34 -> m9_35  [key=0, style=solid];
m9_37 -> m9_38  [key=0, style=solid];
m9_35 -> m9_36  [key=0, style=solid];
m9_36 -> m9_34  [key=0, style=bold, color=blue];
m9_38 -> m9_39  [key=0, style=solid];
m9_38 -> m9_40  [key=2, style=dotted];
m9_38 -> m9_41  [key=2, style=dotted];
m9_39 -> m9_37  [key=0, style=bold, color=blue];
m9_50 -> m9_51  [key=0, style=solid];
m9_53 -> m9_54  [key=0, style=solid];
m9_56 -> m9_57  [key=0, style=solid];
m9_51 -> m9_52  [key=0, style=solid];
m9_52 -> m9_50  [key=0, style=bold, color=blue];
m9_54 -> m9_55  [key=0, style=solid];
m9_55 -> m9_53  [key=0, style=bold, color=blue];
m9_57 -> m9_58  [key=0, style=solid];
m9_57 -> m9_40  [key=2, style=dotted];
m9_57 -> m9_41  [key=2, style=dotted];
m9_58 -> m9_56  [key=0, style=bold, color=blue];
m9_103 -> m9_104  [key=0, style=solid];
m9_103 -> m9_105  [key=1, style=dashed, color=darkseagreen4, label="?"];
m9_104 -> m9_105  [key=0, style=solid];
m9_104 -> m9_107  [key=2, style=dotted];
m9_105 -> m9_106  [key=0, style=solid];
m9_105 -> m9_108  [key=2, style=dotted];
m9_105 -> m9_109  [key=2, style=dotted];
m9_106 -> m9_103  [key=0, style=bold, color=blue];
m9_125 -> m9_126  [key=0, style=solid];
m9_125 -> m9_127  [key=1, style=dashed, color=darkseagreen4, label="?"];
m9_126 -> m9_127  [key=0, style=solid];
m9_126 -> m9_107  [key=2, style=dotted];
m9_127 -> m9_128  [key=0, style=solid];
m9_127 -> m9_108  [key=2, style=dotted];
m9_127 -> m9_109  [key=2, style=dotted];
m9_128 -> m9_125  [key=0, style=bold, color=blue];
m9_199 -> m9_200  [key=0, style=solid, color=green];
m9_200 -> m9_201  [key=0, style=solid, color=green];
m9_200 -> m9_40  [key=2, style=dotted, color=green];
m9_200 -> m9_202  [key=2, style=dotted, color=green];
m9_200 -> m9_203  [key=1, style=dashed, color=green, label="lambda expression"];
m9_201 -> m9_199  [key=0, style=bold, color=blue];
m9_203 -> m9_204  [key=0, style=solid, color=green];
m9_204 -> m9_205  [key=0, style=solid, color=green];
m9_205 -> m9_203  [key=0, style=bold, color=blue];
m9_210 -> m9_211  [key=0, style=solid, color=red];
m9_210 -> m9_40  [key=2, style=dotted, color=red];
m9_210 -> m9_202  [key=2, style=dotted, color=red];
m9_211 -> m9_209  [key=0, style=bold, color=blue];
m9_149 -> m9_150  [key=0, style=solid];
m9_150 -> m9_151  [key=0, style=solid];
m9_150 -> m9_142  [key=2, style=dotted];
m9_150 -> m9_152  [key=2, style=dotted];
m9_151 -> m9_149  [key=0, style=bold, color=blue];
m9_80 -> m9_81  [key=0, style=solid];
m9_81 -> m9_82  [key=0, style=solid];
m9_81 -> m9_83  [key=2, style=dotted];
m9_81 -> m9_84  [key=2, style=dotted];
m9_82 -> m9_80  [key=0, style=bold, color=blue];
m9_69 -> m9_70  [key=0, style=solid];
m9_70 -> m9_71  [key=0, style=solid];
m9_70 -> m9_72  [key=2, style=dotted];
m9_70 -> m9_63  [key=2, style=dotted];
m9_71 -> m9_69  [key=0, style=bold, color=blue];
m9_42 -> m9_43  [key=0, style=solid];
m9_42 -> m9_44  [key=1, style=dashed, color=darkseagreen4, label=Table];
m9_42 -> m9_45  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_43 -> m9_44  [key=0, style=solid];
m9_43 -> m9_47  [key=2, style=dotted];
m9_43 -> m9_48  [key=2, style=dotted];
m9_44 -> m9_45  [key=0, style=solid];
m9_44 -> m9_49  [key=2, style=dotted];
m9_44 -> m9_50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_44 -> m9_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_45 -> m9_46  [key=0, style=solid];
m9_45 -> m9_30  [key=2, style=dotted];
m9_45 -> m9_31  [key=2, style=dotted];
m9_45 -> m9_56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_46 -> m9_42  [key=0, style=bold, color=blue];
m9_206 -> m9_207  [key=0, style=solid, color=red];
m9_207 -> m9_208  [key=0, style=solid, color=red];
m9_207 -> m9_198  [key=2, style=dotted, color=red];
m9_207 -> m9_209  [key=1, style=dashed, color=red, label="lambda expression"];
m9_208 -> m9_206  [key=0, style=bold, color=blue];
m9_176 -> m9_177  [key=0, style=solid];
m9_176 -> m9_178  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_177 -> m9_178  [key=0, style=solid];
m9_177 -> m9_47  [key=2, style=dotted];
m9_177 -> m9_180  [key=2, style=dotted];
m9_178 -> m9_179  [key=0, style=solid];
m9_178 -> m9_97  [key=2, style=dotted];
m9_179 -> m9_176  [key=0, style=bold, color=blue];
m9_110 -> m9_111  [key=0, style=solid];
m9_111 -> m9_112  [key=0, style=solid];
m9_111 -> m9_113  [key=2, style=dotted];
m9_111 -> m9_114  [key=2, style=dotted];
m9_111 -> m9_97  [key=2, style=dotted];
m9_112 -> m9_110  [key=0, style=bold, color=blue];
m9_236 -> m9_237  [key=0, style=solid];
m9_237 -> m9_238  [key=0, style=solid];
m9_237 -> m9_97  [key=2, style=dotted];
m9_238 -> m9_236  [key=0, style=bold, color=blue];
m9_23 -> m9_24  [key=0, style=solid];
m9_23 -> m9_25  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_23 -> m9_27  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_24 -> m9_25  [key=0, style=solid];
m9_24 -> m9_29  [key=2, style=dotted];
m9_24 -> m9_26  [key=1, style=dashed, color=darkseagreen4, label=mock];
m9_24 -> m9_27  [key=1, style=dashed, color=darkseagreen4, label=mock];
m9_25 -> m9_26  [key=0, style=solid];
m9_25 -> m9_30  [key=2, style=dotted];
m9_25 -> m9_31  [key=2, style=dotted];
m9_25 -> m9_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_27 -> m9_28  [key=0, style=solid];
m9_27 -> m9_33  [key=2, style=dotted];
m9_26 -> m9_27  [key=0, style=solid];
m9_26 -> m9_30  [key=2, style=dotted];
m9_26 -> m9_32  [key=2, style=dotted];
m9_26 -> m9_31  [key=2, style=dotted];
m9_26 -> m9_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_28 -> m9_23  [key=0, style=bold, color=blue];
m9_14 -> m9_15  [key=0, style=solid];
m9_15 -> m9_16  [key=0, style=solid];
m9_15 -> m9_17  [key=2, style=dotted];
m9_15 -> m9_18  [key=2, style=dotted];
m9_16 -> m9_14  [key=0, style=bold, color=blue];
m9_172 -> m9_173  [key=0, style=solid];
m9_173 -> m9_174  [key=0, style=solid];
m9_173 -> m9_175  [key=2, style=dotted];
m9_173 -> m9_109  [key=2, style=dotted];
m9_174 -> m9_172  [key=0, style=bold, color=blue];
m9_146 -> m9_147  [key=0, style=solid];
m9_147 -> m9_148  [key=0, style=solid];
m9_147 -> m9_142  [key=2, style=dotted];
m9_147 -> m9_109  [key=2, style=dotted];
m9_148 -> m9_146  [key=0, style=bold, color=blue];
m9_115 -> m9_116  [key=0, style=solid];
m9_116 -> m9_117  [key=0, style=solid];
m9_116 -> m9_119  [key=2, style=dotted];
m9_116 -> m9_97  [key=2, style=dotted];
m9_117 -> m9_118  [key=0, style=solid];
m9_117 -> m9_120  [key=2, style=dotted];
m9_117 -> m9_97  [key=2, style=dotted];
m9_118 -> m9_115  [key=0, style=bold, color=blue];
m9_143 -> m9_144  [key=0, style=solid];
m9_144 -> m9_145  [key=0, style=solid];
m9_144 -> m9_141  [key=2, style=dotted];
m9_144 -> m9_97  [key=2, style=dotted];
m9_145 -> m9_143  [key=0, style=bold, color=blue];
m9_184 -> m9_181  [key=0, style=bold, color=blue];
m9_181 -> m9_182  [key=0, style=solid];
m9_181 -> m9_183  [key=1, style=dashed, color=darkseagreen4, label=Table];
m9_182 -> m9_183  [key=0, style=solid];
m9_182 -> m9_47  [key=2, style=dotted];
m9_182 -> m9_180  [key=2, style=dotted];
m9_183 -> m9_184  [key=0, style=solid];
m9_183 -> m9_185  [key=2, style=dotted];
m9_98 -> m9_99  [key=0, style=solid];
m9_99 -> m9_100  [key=0, style=solid];
m9_99 -> m9_47  [key=2, style=dotted];
m9_100 -> m9_101  [key=0, style=solid];
m9_100 -> m9_102  [key=2, style=dotted];
m9_100 -> m9_103  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_101 -> m9_98  [key=0, style=bold, color=blue];
m9_4 -> m9_5  [key=0, style=solid];
m9_5 -> m9_6  [key=0, style=solid];
m9_5 -> m9_8  [key=2, style=dotted];
m9_6 -> m9_7  [key=0, style=solid];
m9_6 -> m9_9  [key=2, style=dotted];
m9_7 -> m9_4  [key=0, style=bold, color=blue];
m9_192 -> m9_186  [key=0, style=bold, color=blue];
m9_186 -> m9_187  [key=0, style=solid];
m9_186 -> m9_191  [key=1, style=dashed, color=darkseagreen4, label=Table];
m9_187 -> m9_188  [key=0, style=solid];
m9_187 -> m9_47  [key=2, style=dotted];
m9_187 -> m9_193  [key=2, style=dotted];
m9_187 -> m9_189  [key=1, style=dashed, color=darkseagreen4, label=entry];
m9_191 -> m9_192  [key=0, style=solid];
m9_191 -> m9_136  [key=2, style=dotted];
m9_188 -> m9_189  [key=0, style=solid];
m9_188 -> m9_194  [key=2, style=dotted];
m9_189 -> m9_190  [key=0, style=solid];
m9_189 -> m9_40  [key=2, style=dotted];
m9_189 -> m9_191  [key=1, style=dashed, color=darkseagreen4, label=history];
m9_190 -> m9_191  [key=0, style=solid];
m9_190 -> m9_194  [key=2, style=dotted];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_3  [key=2, style=dotted];
m9_2 -> m9_0  [key=0, style=bold, color=blue];
m9_129 -> m9_130  [key=0, style=solid];
m9_130 -> m9_131  [key=0, style=solid];
m9_130 -> m9_119  [key=2, style=dotted];
m9_130 -> m9_97  [key=2, style=dotted];
m9_131 -> m9_129  [key=0, style=bold, color=blue];
m9_132 -> m9_133  [key=0, style=solid];
m9_133 -> m9_134  [key=0, style=solid];
m9_133 -> m9_135  [key=2, style=dotted];
m9_133 -> m9_136  [key=2, style=dotted];
m9_134 -> m9_132  [key=0, style=bold, color=blue];
m9_85 -> m9_86  [key=0, style=solid];
m9_85 -> m9_87  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_86 -> m9_87  [key=0, style=solid];
m9_86 -> m9_77  [key=2, style=dotted];
m9_86 -> m9_78  [key=2, style=dotted];
m9_87 -> m9_88  [key=0, style=solid];
m9_87 -> m9_89  [key=2, style=dotted];
m9_88 -> m9_85  [key=0, style=bold, color=blue];
m9_73 -> m9_74  [key=0, style=solid];
m9_74 -> m9_75  [key=0, style=solid];
m9_74 -> m9_77  [key=2, style=dotted];
m9_74 -> m9_78  [key=2, style=dotted];
m9_75 -> m9_76  [key=0, style=solid];
m9_75 -> m9_79  [key=2, style=dotted];
m9_76 -> m9_73  [key=0, style=bold, color=blue];
m9_250 -> m9_251  [key=0, style=solid];
m9_250 -> m9_253  [key=1, style=dashed, color=darkseagreen4, label=Table];
m9_250 -> m9_254  [key=1, style=dashed, color=darkseagreen4, label=Table];
m9_251 -> m9_252  [key=0, style=solid];
m9_251 -> m9_97  [key=2, style=dotted];
m9_253 -> m9_254  [key=0, style=solid];
m9_253 -> m9_256  [key=0, style=solid];
m9_253 -> m9_232  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m9_254 -> m9_255  [key=0, style=solid];
m9_254 -> m9_97  [key=2, style=dotted];
m9_252 -> m9_253  [key=0, style=solid];
m9_252 -> m9_254  [key=1, style=dashed, color=darkseagreen4, label=i];
m9_252 -> m9_255  [key=1, style=dashed, color=darkseagreen4, label=i];
m9_255 -> m9_253  [key=0, style=solid];
m9_255 -> m9_255  [key=1, style=dashed, color=darkseagreen4, label=i];
m9_256 -> m9_250  [key=0, style=bold, color=blue];
m9_257 -> m9_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_86  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_91  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_95  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_133  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_196  [key=1, style=dashed, color=green, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_207  [key=1, style=dashed, color=red, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_217  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_224  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_230  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_233  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_237  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_251  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m9_257 -> m9_254  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
m10_55 -> m10_56  [key=0, style=solid];
m10_56 -> m10_57  [key=0, style=solid];
m10_56 -> m10_39  [key=2, style=dotted];
m10_57 -> m10_58  [key=0, style=solid];
m10_57 -> m10_22  [key=2, style=dotted];
m10_58 -> m10_59  [key=0, style=solid];
m10_58 -> m10_40  [key=2, style=dotted];
m10_59 -> m10_60  [key=0, style=solid];
m10_59 -> m10_41  [key=2, style=dotted];
m10_60 -> m10_61  [key=0, style=solid];
m10_60 -> m10_42  [key=2, style=dotted];
m10_61 -> m10_62  [key=0, style=solid];
m10_61 -> m10_43  [key=2, style=dotted];
m10_62 -> m10_63  [key=0, style=solid];
m10_62 -> m10_26  [key=2, style=dotted];
m10_63 -> m10_55  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_0 -> m10_16  [key=3, color=green, style=bold, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext"];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_5  [key=2, style=dotted];
m10_1 -> m10_3  [key=3, color=darkorchid, style=bold, label="Field variable SqlConnection _connection"];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> m10_6  [key=2, style=dotted];
m10_2 -> m10_7  [key=2, style=dotted];
m10_3 -> m10_4  [key=0, style=solid];
m10_3 -> m10_8  [key=2, style=dotted];
m10_4 -> m10_0  [key=0, style=bold, color=blue];
m10_76 -> m10_77  [key=0, style=solid];
m10_77 -> m10_78  [key=0, style=solid];
m10_77 -> m10_39  [key=2, style=dotted];
m10_78 -> m10_79  [key=0, style=solid];
m10_78 -> m10_22  [key=2, style=dotted];
m10_79 -> m10_80  [key=0, style=solid];
m10_79 -> m10_40  [key=2, style=dotted];
m10_80 -> m10_81  [key=0, style=solid];
m10_80 -> m10_41  [key=2, style=dotted];
m10_81 -> m10_82  [key=0, style=solid];
m10_81 -> m10_42  [key=2, style=dotted];
m10_82 -> m10_83  [key=0, style=solid];
m10_82 -> m10_43  [key=2, style=dotted];
m10_83 -> m10_84  [key=0, style=solid];
m10_83 -> m10_26  [key=2, style=dotted];
m10_84 -> m10_76  [key=0, style=bold, color=blue];
m10_9 -> m10_10  [key=0, style=solid, color=green];
m10_10 -> m10_11  [key=0, style=solid, color=green];
m10_10 -> m10_13  [key=2, style=dotted, color=green];
m10_11 -> m10_12  [key=0, style=solid, color=red];
m10_12 -> m10_9  [key=0, style=bold, color=blue];
m10_22 -> m10_23  [key=0, style=solid];
m10_22 -> m10_31  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m10_22 -> m10_45  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m10_22 -> m10_65  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m10_22 -> m10_77  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m10_22 -> m10_86  [key=3, color=green, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m10_23 -> m10_24  [key=0, style=solid];
m10_23 -> m10_25  [key=2, style=dotted];
m10_24 -> m10_22  [key=0, style=bold, color=blue];
m10_85 -> m10_86  [key=0, style=solid];
m10_86 -> m10_87  [key=0, style=solid];
m10_86 -> m10_39  [key=2, style=dotted];
m10_87 -> m10_88  [key=0, style=solid];
m10_87 -> m10_22  [key=2, style=dotted];
m10_88 -> m10_89  [key=0, style=solid];
m10_88 -> m10_40  [key=2, style=dotted];
m10_89 -> m10_90  [key=0, style=solid];
m10_89 -> m10_41  [key=2, style=dotted];
m10_90 -> m10_91  [key=0, style=solid];
m10_90 -> m10_42  [key=2, style=dotted];
m10_91 -> m10_92  [key=0, style=solid];
m10_91 -> m10_43  [key=2, style=dotted];
m10_92 -> m10_93  [key=0, style=solid];
m10_92 -> m10_26  [key=2, style=dotted];
m10_93 -> m10_85  [key=0, style=bold, color=blue];
m10_64 -> m10_65  [key=0, style=solid];
m10_65 -> m10_66  [key=0, style=solid];
m10_65 -> m10_39  [key=2, style=dotted];
m10_66 -> m10_67  [key=0, style=solid];
m10_66 -> m10_22  [key=2, style=dotted];
m10_67 -> m10_68  [key=0, style=solid];
m10_67 -> m10_40  [key=2, style=dotted];
m10_68 -> m10_69  [key=0, style=solid];
m10_68 -> m10_41  [key=2, style=dotted];
m10_69 -> m10_70  [key=0, style=solid];
m10_69 -> m10_41  [key=2, style=dotted];
m10_70 -> m10_71  [key=0, style=solid];
m10_70 -> m10_42  [key=2, style=dotted];
m10_71 -> m10_72  [key=0, style=solid];
m10_71 -> m10_43  [key=2, style=dotted];
m10_72 -> m10_73  [key=0, style=solid];
m10_72 -> m10_42  [key=2, style=dotted];
m10_73 -> m10_74  [key=0, style=solid];
m10_73 -> m10_43  [key=2, style=dotted];
m10_74 -> m10_75  [key=0, style=solid];
m10_74 -> m10_26  [key=2, style=dotted];
m10_75 -> m10_64  [key=0, style=bold, color=blue];
m10_14 -> m10_15  [key=0, style=solid, color=green];
m10_15 -> m10_16  [key=0, style=solid, color=green];
m10_15 -> m10_17  [key=0, style=solid, color=green];
m10_16 -> m10_17  [key=0, style=solid];
m10_16 -> m10_0  [key=2, style=dotted];
m10_17 -> m10_14  [key=0, style=bold, color=blue];
m10_26 -> m10_27  [key=0, style=solid];
m10_27 -> m10_28  [key=0, style=solid];
m10_27 -> m10_29  [key=2, style=dotted];
m10_27 -> m10_27  [key=3, color=darkorchid, style=bold, label="Local variable string fetchJobSqlTemplate"];
m10_28 -> m10_26  [key=0, style=bold, color=blue];
m10_44 -> m10_45  [key=0, style=solid];
m10_45 -> m10_46  [key=0, style=solid];
m10_45 -> m10_39  [key=2, style=dotted];
m10_46 -> m10_47  [key=0, style=solid];
m10_46 -> m10_22  [key=2, style=dotted];
m10_47 -> m10_48  [key=0, style=solid];
m10_47 -> m10_40  [key=2, style=dotted];
m10_48 -> m10_49  [key=0, style=solid];
m10_48 -> m10_41  [key=2, style=dotted];
m10_49 -> m10_50  [key=0, style=solid];
m10_49 -> m10_42  [key=2, style=dotted];
m10_49 -> m10_56  [key=3, color=darkorchid, style=bold, label="method methodReturn string CreateExpiredJob"];
m10_50 -> m10_51  [key=0, style=solid];
m10_50 -> m10_43  [key=2, style=dotted];
m10_51 -> m10_52  [key=0, style=solid];
m10_51 -> m10_54  [key=2, style=dotted];
m10_52 -> m10_53  [key=0, style=solid];
m10_52 -> m10_26  [key=2, style=dotted];
m10_53 -> m10_44  [key=0, style=bold, color=blue];
m10_30 -> m10_31  [key=0, style=solid];
m10_31 -> m10_32  [key=0, style=solid];
m10_31 -> m10_39  [key=2, style=dotted];
m10_32 -> m10_33  [key=0, style=solid];
m10_32 -> m10_22  [key=2, style=dotted];
m10_33 -> m10_34  [key=0, style=solid];
m10_33 -> m10_40  [key=2, style=dotted];
m10_34 -> m10_35  [key=0, style=solid];
m10_34 -> m10_41  [key=2, style=dotted];
m10_35 -> m10_36  [key=0, style=solid];
m10_35 -> m10_42  [key=2, style=dotted];
m10_36 -> m10_37  [key=0, style=solid];
m10_36 -> m10_43  [key=2, style=dotted];
m10_37 -> m10_38  [key=0, style=solid];
m10_37 -> m10_26  [key=2, style=dotted];
m10_38 -> m10_30  [key=0, style=bold, color=blue];
m10_18 -> m10_19  [key=0, style=solid];
m10_19 -> m10_20  [key=0, style=solid];
m10_19 -> m10_21  [key=2, style=dotted];
m10_20 -> m10_18  [key=0, style=bold, color=blue];
m10_94 -> m10_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m10_94 -> m10_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m10_94 -> m10_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m10_94 -> m10_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m10_94 -> m10_57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m10_94 -> m10_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m10_94 -> m10_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m10_94 -> m10_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m10_94 -> m10_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m10_94 -> m10_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m10_94 -> m10_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m10_94 -> m10_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m11_6 -> m11_7  [key=0, style=solid, color=green];
m11_7 -> m11_8  [key=0, style=solid, color=green];
m11_7 -> m11_9  [key=2, style=dotted, color=green];
m11_8 -> m11_6  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid, color=green];
m11_0 -> m11_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateApplyingContext"];
m11_1 -> m11_2  [key=0, style=solid, color=green];
m11_1 -> m11_4  [key=2, style=dotted, color=green];
m11_2 -> m11_3  [key=0, style=solid, color=red];
m11_2 -> m11_5  [key=2, style=dotted, color=red];
m11_3 -> m11_0  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_25  [key=2, style=dotted];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_26  [key=2, style=dotted];
m12_2 -> m12_5  [key=1, style=dashed, color=darkseagreen4, label=connection];
m12_2 -> m12_18  [key=1, style=dashed, color=red, label=connection];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_27  [key=2, style=dotted];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_28  [key=2, style=dotted];
m12_5 -> m12_29  [key=2, style=dotted];
m12_5 -> m12_9  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_10  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_14  [key=1, style=dashed, color=red, label=hash];
m12_5 -> m12_15  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_16  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_21  [key=1, style=dashed, color=darkseagreen4, label=hash];
m12_5 -> m12_22  [key=1, style=dashed, color=red, label=hash];
m12_18 -> m12_19  [key=0, style=solid, color=red];
m12_18 -> m12_36  [key=2, style=dotted, color=red];
m12_18 -> m12_20  [key=1, style=dashed, color=red, label=stateData];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_24  [key=0, style=solid];
m12_4 -> m12_7  [key=1, style=dashed, color=darkseagreen4, label=id];
m12_4 -> m12_8  [key=1, style=dashed, color=darkseagreen4, label=id];
m12_7 -> m12_4  [key=0, style=solid];
m12_7 -> m12_30  [key=2, style=dotted];
m12_7 -> m12_31  [key=2, style=dotted];
m12_8 -> m12_9  [key=0, style=solid];
m12_8 -> m12_30  [key=2, style=dotted];
m12_8 -> m12_11  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_15  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_17  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_18  [key=1, style=dashed, color=red, label=dto];
m12_8 -> m12_20  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_8 -> m12_22  [key=1, style=dashed, color=red, label=dto];
m12_8 -> m12_23  [key=1, style=dashed, color=darkseagreen4, label=dto];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_8  [key=0, style=solid];
m12_9 -> m12_10  [key=0, style=solid];
m12_10 -> m12_11  [key=0, style=solid];
m12_10 -> m12_32  [key=2, style=dotted];
m12_14 -> m12_15  [key=0, style=solid, color=red];
m12_14 -> m12_16  [key=0, style=solid, color=red];
m12_14 -> m12_34  [key=2, style=dotted, color=red];
m12_15 -> m12_16  [key=0, style=solid];
m12_15 -> m12_35  [key=2, style=dotted];
m12_16 -> m12_17  [key=0, style=solid];
m12_16 -> m12_21  [key=0, style=solid];
m12_16 -> m12_34  [key=2, style=dotted];
m12_17 -> m12_18  [key=0, style=solid, color=red];
m12_21 -> m12_22  [key=0, style=solid, color=red];
m12_21 -> m12_23  [key=0, style=solid];
m12_21 -> m12_34  [key=2, style=dotted];
m12_22 -> m12_23  [key=0, style=solid, color=red];
m12_22 -> m12_35  [key=2, style=dotted, color=red];
m12_11 -> m12_12  [key=0, style=solid];
m12_11 -> m12_14  [key=0, style=solid, color=red];
m12_11 -> m12_33  [key=2, style=dotted];
m12_13 -> m12_14  [key=0, style=solid, color=red];
m12_20 -> m12_21  [key=0, style=solid];
m12_23 -> m12_4  [key=0, style=solid];
m12_23 -> m12_31  [key=2, style=dotted];
m12_12 -> m12_13  [key=0, style=solid];
m12_19 -> m12_20  [key=0, style=solid];
m12_19 -> m12_21  [key=0, style=solid];
m12_24 -> m12_0  [key=0, style=bold, color=blue];
m12_37 -> m12_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.RecurringJobsPage"];
m12_37 -> m12_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.RecurringJobsPage"];
m12_37 -> m12_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.RecurringJobsPage"];
}
