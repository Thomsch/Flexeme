digraph  {
n0 [cluster="Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="Entry Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", span="23-23"];
n1 [cluster="Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", label="Exit Hangfire.IRecurringJobManager.AddOrUpdate(string, Hangfire.Common.Job, string, Hangfire.RecurringJobOptions)", span="23-23"];
n2 [cluster="Hangfire.IRecurringJobManager.Trigger(string)", label="Entry Hangfire.IRecurringJobManager.Trigger(string)", span="29-29"];
n3 [cluster="Hangfire.IRecurringJobManager.Trigger(string)", label="Exit Hangfire.IRecurringJobManager.Trigger(string)", span="29-29"];
n4 [cluster="Hangfire.IRecurringJobManager.RemoveIfExists(string)", label="Entry Hangfire.IRecurringJobManager.RemoveIfExists(string)", span="30-30"];
n5 [cluster="Hangfire.IRecurringJobManager.RemoveIfExists(string)", label="Exit Hangfire.IRecurringJobManager.RemoveIfExists(string)", span="30-30"];
m0_12 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86"];
m0_18 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="Exit Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86"];
m0_11 [cluster="System.Math.Min(int, int)", file="BackgroundJobServerOptions.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m0_19 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
m0_21 [cluster="Unk.Join", file="BackgroundJobServerOptions.cs", label="Entry Unk.Join", span=""];
m0_0 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34"];
m0_1 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="WorkerCount = Math.Min(Environment.ProcessorCount * 5, MaxDefaultWorkerCount)", span="36-36"];
m0_2 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="37-37"];
m0_3 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ShutdownTimeout = BackgroundProcessingServer.DefaultShutdownTimeout", span="38-38"];
m0_4 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="SchedulePollingInterval = DelayedJobScheduler.DefaultPollingDelay", span="39-39"];
m0_5 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="HeartbeatInterval = ServerHeartbeat.DefaultHeartbeatInterval", span="40-40"];
m0_6 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ServerTimeout = ServerWatchdog.DefaultServerTimeout", span="41-41"];
m0_7 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ServerCheckInterval = ServerWatchdog.DefaultCheckInterval", span="42-42"];
m0_8 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="FilterProvider = JobFilterProviders.Providers", span="44-44"];
m0_9 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Activator = JobActivator.Current", span="45-45"];
m0_10 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Exit Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34"];
m0_22 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="Entry lambda expression", span="90-90"];
m0_24 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="Exit lambda expression", span="90-90"];
m0_20 [cluster="Unk.Select", file="BackgroundJobServerOptions.cs", label="Entry Unk.Select", span=""];
m0_25 [file="BackgroundJobServerOptions.cs", label="Hangfire.BackgroundJobServerOptions", span=""];
m1_0 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", file="BackgroundProcessContext.cs", label="Entry Hangfire.RecurringJobOptions.RecurringJobOptions()", span="27-27"];
m1_1 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", file="BackgroundProcessContext.cs", label="TimeZone = TimeZoneInfo.Utc", span="29-29"];
m1_2 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", file="BackgroundProcessContext.cs", label="QueueName = EnqueuedState.DefaultQueue", span="30-30"];
m1_3 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", file="BackgroundProcessContext.cs", label="Exit Hangfire.RecurringJobOptions.RecurringJobOptions()", span="27-27"];
m1_4 [file="BackgroundProcessContext.cs", label="Hangfire.RecurringJobOptions", span=""];
m3_8 [cluster="System.Lazy<T>.Lazy(System.Func<T>)", file="BackgroundProcessContextMock.cs", label="Entry System.Lazy<T>.Lazy(System.Func<T>)", span="0-0"];
m3_0 [cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", file="BackgroundProcessContextMock.cs", label="Entry Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", span="11-11"];
m3_1 [cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", file="BackgroundProcessContextMock.cs", label="ServerId = ''server''", span="13-13"];
m3_2 [cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", file="BackgroundProcessContextMock.cs", label="Storage = new Mock<JobStorage>()", span="15-15"];
m3_3 [cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", color=green, community=0, file="BackgroundProcessContextMock.cs", label="Properties = new Dictionary<string, object>()", prediction=0, span="16-16"];
m3_5 [cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", color=green, community=0, file="BackgroundProcessContextMock.cs", label="Exit Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", prediction=1, span="11-11"];
m3_12 [cluster="lambda expression", color=green, community=0, file="BackgroundProcessContextMock.cs", label="new BackgroundProcessContext(ServerId, Storage.Object, Properties, CancellationTokenSource.Token)", prediction=1, span="20-20"];
m3_7 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="BackgroundProcessContextMock.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m3_6 [cluster="Mock<JobStorage>.cstr", file="BackgroundProcessContextMock.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m3_9 [cluster="lambda expression", file="BackgroundProcessContextMock.cs", label="Entry lambda expression", span="18-18"];
m3_11 [cluster="lambda expression", file="BackgroundProcessContextMock.cs", label="Exit lambda expression", span="18-18"];
m3_13 [file="BackgroundProcessContextMock.cs", label="Hangfire.Core.Tests.BackgroundProcessContextMock", span=""];
m5_0 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", file="DelayedJobScheduler.cs", label="Entry Hangfire.RecurringJobOptions.RecurringJobOptions()", span="27-27"];
m5_1 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", file="DelayedJobScheduler.cs", label="TimeZone = TimeZoneInfo.Utc", span="29-29"];
m5_2 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", file="DelayedJobScheduler.cs", label="QueueName = EnqueuedState.DefaultQueue", span="30-30"];
m5_3 [cluster="Hangfire.RecurringJobOptions.RecurringJobOptions()", file="DelayedJobScheduler.cs", label="Exit Hangfire.RecurringJobOptions.RecurringJobOptions()", span="27-27"];
m5_4 [file="DelayedJobScheduler.cs", label="Hangfire.RecurringJobOptions", span=""];
m6_0 [cluster="Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="IBackgroundProcess.cs", label="Entry Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="20-20"];
m6_1 [cluster="Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="IBackgroundProcess.cs", label="Exit Hangfire.Server.IBackgroundProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="20-20"];
m7_19 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="InfiniteLoopComponentFacts.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_23 [cluster="Unk.>", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.>", span=""];
m7_0 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="Entry HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", span="44-44"];
m7_1 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", color=green, community=0, file="InfiniteLoopComponentFacts.cs", label="String.IsNullOrEmpty(resource)", prediction=3, span="46-46"];
m7_2 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", color=green, community=0, file="InfiniteLoopComponentFacts.cs", label="throw new ArgumentNullException(''resource'');", prediction=4, span="46-46"];
m7_3 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="connection == null", span="47-47"];
m7_18 [cluster="string.IsNullOrEmpty(string)", file="InfiniteLoopComponentFacts.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m7_22 [cluster="Unk.Execute", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.Execute", span=""];
m7_26 [cluster="Unk.Format", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.Format", span=""];
m7_27 [cluster="string.Format(string, object, object)", file="InfiniteLoopComponentFacts.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m7_28 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="Entry HangFire.SqlServer.SqlServerDistributedLock.Dispose()", span="78-78"];
m7_29 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label=_completed, span="80-80"];
m7_31 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="_completed = true", span="82-82"];
m7_33 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="parameters.Add(''@Resource'', _resource)", span="85-85"];
m7_36 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="_connection.Execute(\r\n                @''sp_releaseapplock'',\r\n                parameters,\r\n                commandType: CommandType.StoredProcedure)", span="89-92"];
m7_39 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                        ''Could not release a lock on the resource '{0}': Server returned the '{1}' error.'', \r\n                        _resource,\r\n                        releaseResult));", span="98-102"];
m7_30 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="return;", span="80-80"];
m7_32 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="var parameters = new DynamicParameters()", span="84-84"];
m7_34 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="parameters.Add(''@LockOwner'', LockOwner)", span="86-86"];
m7_35 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="87-87"];
m7_37 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="var releaseResult = parameters.Get<int>(''@Result'')", span="94-94"];
m7_38 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="releaseResult < 0", span="96-96"];
m7_40 [cluster="HangFire.SqlServer.SqlServerDistributedLock.Dispose()", file="InfiniteLoopComponentFacts.cs", label="Exit HangFire.SqlServer.SqlServerDistributedLock.Dispose()", span="78-78"];
m7_24 [cluster="HangFire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", file="InfiniteLoopComponentFacts.cs", label="Entry HangFire.SqlServer.SqlServerDistributedLockException.SqlServerDistributedLockException(string)", span="23-23"];
m7_5 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="_resource = resource", span="49-49"];
m7_6 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="_connection = connection", span="50-50"];
m7_13 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="connection.Execute(\r\n                @''sp_getapplock'', \r\n                parameters, \r\n                commandType: CommandType.StoredProcedure)", span="59-62"];
m7_4 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="throw new ArgumentNullException(''connection'');", span="47-47"];
m7_15 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="lockResult < 0", span="66-66"];
m7_16 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="throw new SqlServerDistributedLockException(\r\n                    String.Format(\r\n                    ''Could not place a lock on the resource '{0}': {1}.'',\r\n                    _resource,\r\n                    LockErrorMessages.ContainsKey(lockResult) \r\n                        ? LockErrorMessages[lockResult]\r\n                        : String.Format(''Server returned the '{0}' error.'', lockResult)));", span="68-74"];
m7_7 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="var parameters = new DynamicParameters()", span="52-52"];
m7_12 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="parameters.Add(''@Result'', dbType: DbType.Int32, direction: ParameterDirection.ReturnValue)", span="57-57"];
m7_14 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="var lockResult = parameters.Get<int>(''@Result'')", span="64-64"];
m7_8 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="parameters.Add(''@Resource'', _resource)", span="53-53"];
m7_9 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="parameters.Add(''@LockMode'', LockMode)", span="54-54"];
m7_10 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="parameters.Add(''@LockOwner'', LockOwner)", span="55-55"];
m7_11 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="parameters.Add(''@LockTimeout'', LockTimeout.TotalMilliseconds)", span="56-56"];
m7_17 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="InfiniteLoopComponentFacts.cs", label="Exit HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", span="44-44"];
m7_25 [cluster="Unk.ContainsKey", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.ContainsKey", span=""];
m7_20 [cluster="DynamicParameters.cstr", file="InfiniteLoopComponentFacts.cs", label="Entry DynamicParameters.cstr", span=""];
m7_21 [cluster="Unk.Add", file="InfiniteLoopComponentFacts.cs", label="Entry Unk.Add", span=""];
m7_41 [file="InfiniteLoopComponentFacts.cs", label="HangFire.SqlServer.SqlServerDistributedLock", span=""];
m8_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="InfiniteLoopProcess.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m8_0 [cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs", label="Entry Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", span="23-23"];
m8_1 [cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs", label="innerProcess == null", span="25-25"];
m8_3 [cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs", label="InnerProcess = innerProcess", span="26-26"];
m8_2 [cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs", label="throw new ArgumentNullException(''innerProcess'');", span="25-25"];
m8_4 [cluster="Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", file="InfiniteLoopProcess.cs", label="Exit Hangfire.Server.InfiniteLoopProcess.InfiniteLoopProcess(Hangfire.Server.IServerProcess)", span="23-23"];
m8_13 [cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs", label="Entry Hangfire.Server.InfiniteLoopProcess.ToString()", span="40-40"];
m8_14 [cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs", label="return InnerProcess.ToString();", span="42-42"];
m8_15 [cluster="Hangfire.Server.InfiniteLoopProcess.ToString()", file="InfiniteLoopProcess.cs", label="Exit Hangfire.Server.InfiniteLoopProcess.ToString()", span="40-40"];
m8_6 [cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs", label="Entry Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="31-31"];
m8_7 [cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="InfiniteLoopProcess.cs", label=true, prediction=5, span="33-33"];
m8_9 [cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs", label="InnerProcess.Execute(context)", span="36-36"];
m8_10 [cluster="Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs", label="Exit Hangfire.Server.InfiniteLoopProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="31-31"];
m8_12 [cluster="Hangfire.Server.IServerProcess.Execute(Hangfire.Server.BackgroundProcessContext)", file="InfiniteLoopProcess.cs", label="Entry Hangfire.Server.IServerProcess.Execute(Hangfire.Server.BackgroundProcessContext)", span="26-26"];
m8_16 [cluster="object.ToString()", file="InfiniteLoopProcess.cs", label="Entry object.ToString()", span="0-0"];
m8_11 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="InfiniteLoopProcess.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m8_17 [file="InfiniteLoopProcess.cs", label="Hangfire.Server.InfiniteLoopProcess", span=""];
m9_0 [cluster="Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", file="RecurringJobScheduler.cs", label="Entry Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", span="33-33"];
m9_1 [cluster="Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", file="RecurringJobScheduler.cs", label="Exit Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", span="33-33"];
m10_59 [cluster="Hangfire.Server.Worker.ToString()", file="Worker.cs", label="Entry Hangfire.Server.Worker.ToString()", span="146-146"];
m10_60 [cluster="Hangfire.Server.Worker.ToString()", file="Worker.cs", label="return String.Format(''{0} #{1}'', GetType().Name, _workerId.Substring(0, 8));", span="148-148"];
m10_61 [cluster="Hangfire.Server.Worker.ToString()", file="Worker.cs", label="Exit Hangfire.Server.Worker.ToString()", span="146-146"];
m10_16 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="cancellationToken.WaitHandle.WaitOne(_options.CheckInterval)", span="56-56"];
m10_87 [cluster="System.Diagnostics.Stopwatch.StartNew()", file="Worker.cs", label="Entry System.Diagnostics.Stopwatch.StartNew()", span="0-0"];
m10_91 [cluster="Hangfire.States.FailedState.FailedState(System.Exception)", file="Worker.cs", label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="75-75"];
m10_44 [cluster="Hangfire.JobStorage.GetConnection()", file="Worker.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m10_56 [cluster="Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", file="Worker.cs", label="Entry Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", span="35-35"];
m10_64 [cluster="string.Format(string, object, object)", file="Worker.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m10_57 [cluster="Hangfire.Logging.ILog.DebugException(string, System.Exception)", file="Worker.cs", label="Entry Hangfire.Logging.ILog.DebugException(string, System.Exception)", span="130-130"];
m10_62 [cluster="object.GetType()", file="Worker.cs", label="Entry object.GetType()", span="0-0"];
m10_20 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="Entry Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="63-63"];
m10_21 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var connection = context.Storage.GetConnection()", span="65-65"];
m10_50 [cluster="Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)", file="Worker.cs", label="Entry Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)", span="45-45"];
m10_47 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", file="Worker.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", span="0-0"];
m10_89 [cluster="System.Diagnostics.Stopwatch.Stop()", file="Worker.cs", label="Entry System.Diagnostics.Stopwatch.Stop()", span="0-0"];
m10_90 [cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="Worker.cs", label="Entry Hangfire.States.SucceededState.SucceededState(object, long, long)", span="51-51"];
m10_83 [cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)", file="Worker.cs", label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42"];
m10_19 [cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="Worker.cs", label="Entry HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="44-44"];
m10_63 [cluster="string.Substring(int, int)", file="Worker.cs", label="Entry string.Substring(int, int)", span="0-0"];
m10_46 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="Worker.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m10_18 [cluster="System.Guid.NewGuid()", file="Worker.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m10_53 [cluster="Hangfire.Storage.IFetchedJob.RemoveFromQueue()", file="Worker.cs", label="Entry Hangfire.Storage.IFetchedJob.RemoveFromQueue()", span="24-24"];
m10_58 [cluster="Hangfire.Storage.IFetchedJob.Requeue()", file="Worker.cs", label="Entry Hangfire.Storage.IFetchedJob.Requeue()", span="25-25"];
m10_84 [cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="Worker.cs", label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29"];
m10_0 [cluster="Hangfire.Server.Worker.Worker()", file="Worker.cs", label="Entry Hangfire.Server.Worker.Worker()", span="39-39"];
m10_1 [cluster="Hangfire.Server.Worker.Worker()", file="Worker.cs", label="Exit Hangfire.Server.Worker.Worker()", span="39-39"];
m10_55 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="Entry Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", span="151-151"];
m10_65 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="var jobData = connection.GetJobData(jobId)", span="155-155"];
m10_69 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="var backgroundJob = new BackgroundJob(jobId, jobData.Job, jobData.CreatedAt)", span="167-167"];
m10_70 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="var performContext = new PerformContext(connection, backgroundJob, token)", span="168-168"];
m10_66 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="jobData == null", span="156-156"];
m10_68 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="jobData.EnsureLoaded()", span="165-165"];
m10_71 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="var latency = (DateTime.UtcNow - jobData.CreatedAt).TotalMilliseconds", span="170-170"];
m10_67 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="return null;", span="162-162"];
m10_73 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="var result = _performer.Perform(performContext)", span="173-173"];
m10_72 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="var duration = Stopwatch.StartNew()", span="171-171"];
m10_75 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="return new SucceededState(result, (long) latency, duration.ElapsedMilliseconds);", span="176-176"];
m10_74 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="duration.Stop()", span="174-174"];
m10_76 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label=OperationCanceledException, span="178-178"];
m10_77 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="throw;", span="180-180"];
m10_78 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label=JobPerformanceException, span="182-182"];
m10_79 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="return new FailedState(ex.InnerException)\r\n                {\r\n                    Reason = ex.Message\r\n                };", span="184-187"];
m10_80 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label=Exception, span="189-189"];
m10_81 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="return new FailedState(ex)\r\n                {\r\n                    Reason = ''An exception occurred during processing of a background job.''\r\n                };", span="191-194"];
m10_82 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="Worker.cs", label="Exit Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", span="151-151"];
m10_2 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", file="Worker.cs", label="Entry HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", span="34-34"];
m10_3 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", color=green, community=0, file="Worker.cs", label="storage == null", prediction=6, span="36-36"];
m10_49 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="Worker.cs", label="Entry Hangfire.States.ProcessingState.ProcessingState(string, string)", span="39-39"];
m10_52 [cluster="string.Equals(string, System.StringComparison)", file="Worker.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m10_54 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", file="Worker.cs", label="Entry Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, System.Threading.CancellationToken)", span="31-31"];
m10_4 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", color=green, community=0, file="Worker.cs", label="throw new ArgumentNullException(''storage'');", prediction=7, span="36-36"];
m10_5 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", color=green, community=0, file="Worker.cs", label="options == null", prediction=8, span="37-37"];
m10_7 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", color=green, community=0, file="Worker.cs", label="_storage = storage", prediction=9, span="39-39"];
m10_9 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", file="Worker.cs", label="Exit HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", span="34-34"];
m10_11 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="Entry HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", span="43-43"];
m10_12 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="var connection = _storage.GetConnection()", span="45-45"];
m10_13 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="var serversRemoved = connection.RemoveTimedOutServers(_options.ServerTimeout)", span="47-47"];
m10_6 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", color=green, community=0, file="Worker.cs", label="throw new ArgumentNullException(''options'');", prediction=10, span="37-37"];
m10_8 [cluster="HangFire.Server.ServerWatchdog.ServerWatchdog(HangFire.JobStorage, HangFire.Server.ServerWatchdogOptions)", file="Worker.cs", label="_options = options", span="40-40"];
m10_10 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="Worker.cs", label="throw new ArgumentNullException(''stateChanger'');", span="55-55"];
m10_14 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="serversRemoved != 0", span="48-48"];
m10_15 [cluster="HangFire.Server.ServerWatchdog.Execute(System.Threading.CancellationToken)", file="Worker.cs", label="Logger.Info(String.Format(\r\n                        ''{0} servers were removed due to timeout'', \r\n                        serversRemoved))", span="50-52"];
m10_22 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var fetchedJob = connection.FetchNextJob(_queues, context.CancellationToken)", span="66-66"];
m10_45 [cluster="Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="Worker.cs", label="Entry Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="36-36"];
m10_51 [cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="Worker.cs", label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25"];
m10_17 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="Worker.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m10_88 [cluster="Hangfire.Server.IBackgroundJobPerformer.Perform(Hangfire.Server.PerformContext)", file="Worker.cs", label="Entry Hangfire.Server.IBackgroundJobPerformer.Perform(Hangfire.Server.PerformContext)", span="20-20"];
m10_23 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="HangFire.Server.ServerWatchdog", span=""];
m10_25 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(\r\n                        context.CancellationToken,\r\n                        timeoutCts.Token)", span="73-75"];
m10_26 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var processingState = new ProcessingState(context.ServerId, _workerId)", span="77-77"];
m10_27 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var appliedState = _stateChanger.ChangeState(new StateChangeContext(\r\n                            context.Storage,\r\n                            connection,\r\n                            fetchedJob.JobId,\r\n                            processingState,\r\n                            new[] { EnqueuedState.StateName, ProcessingState.StateName },\r\n                            linkedCts.Token))", span="79-85"];
m10_29 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="context.CancellationToken.ThrowIfCancellationRequested()", span="93-93"];
m10_32 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var jobCancellationToken = new ServerJobCancellationToken(\r\n                        connection, fetchedJob.JobId, _workerId, context.CancellationToken)", span="106-107"];
m10_35 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="_stateChanger.ChangeState(new StateChangeContext(\r\n                            context.Storage,\r\n                            connection,\r\n                            fetchedJob.JobId, \r\n                            state, \r\n                            ProcessingState.StateName))", span="114-119"];
m10_33 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var state = PerformJob(fetchedJob.JobId, connection, jobCancellationToken)", span="109-109"];
m10_30 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="fetchedJob.RemoveFromQueue()", span="96-96"];
m10_36 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="fetchedJob.RemoveFromQueue()", span="127-127"];
m10_38 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="fetchedJob.RemoveFromQueue()", span="134-134"];
m10_41 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="fetchedJob.Requeue()", span="140-140"];
m10_24 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="var timeoutCts = new CancellationTokenSource(JobInitializationWaitTimeout)", span="72-72"];
m10_28 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="appliedState == null || !appliedState.Name.Equals(ProcessingState.StateName, StringComparison.OrdinalIgnoreCase)", span="89-89"];
m10_31 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="return;", span="97-97"];
m10_34 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="state != null", span="111-111"];
m10_37 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label=JobAbortedException, span="132-132"];
m10_39 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label=Exception, span="136-136"];
m10_40 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="Logger.DebugException(''An exception occurred while processing a job. It will be re-queued.'', ex)", span="138-138"];
m10_42 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="throw;", span="141-141"];
m10_43 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="Worker.cs", label="Exit Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="63-63"];
m10_86 [cluster="Hangfire.Server.PerformContext.PerformContext(Hangfire.Storage.IStorageConnection, Hangfire.BackgroundJob, Hangfire.IJobCancellationToken)", file="Worker.cs", label="Entry Hangfire.Server.PerformContext.PerformContext(Hangfire.Storage.IStorageConnection, Hangfire.BackgroundJob, Hangfire.IJobCancellationToken)", span="36-36"];
m10_85 [cluster="Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", file="Worker.cs", label="Entry Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", span="25-25"];
m10_48 [cluster="System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", file="Worker.cs", label="Entry System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", span="0-0"];
m10_92 [file="Worker.cs", label="Hangfire.Server.Worker", span=""];
m3_13 -> m3_5  [color=green, key=1, label="Hangfire.Core.Tests.BackgroundProcessContextMock", style=dashed];
m3_13 -> m3_12  [color=green, key=1, label="Hangfire.Core.Tests.BackgroundProcessContextMock", style=dashed];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_0 -> m7_13  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_32 -> m7_36  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m7_32 -> m7_34  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m7_32 -> m7_35  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m7_37 -> m7_39  [color=darkseagreen4, key=1, label=releaseResult, style=dashed];
m7_7 -> m7_13  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m7_7 -> m7_9  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m7_7 -> m7_10  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m7_7 -> m7_11  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m7_7 -> m7_12  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m7_14 -> m7_16  [color=darkseagreen4, key=1, label=lockResult, style=dashed];
m7_41 -> m7_16  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m7_41 -> m7_8  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m7_41 -> m7_29  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m7_41 -> m7_33  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m7_41 -> m7_36  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m7_41 -> m7_39  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerDistributedLock", style=dashed];
m8_6 -> m8_9  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m8_17 -> m8_9  [color=darkseagreen4, key=1, label="Hangfire.Server.InfiniteLoopProcess", style=dashed];
m8_17 -> m8_14  [color=darkseagreen4, key=1, label="Hangfire.Server.InfiniteLoopProcess", style=dashed];
m10_16 -> m10_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m10_20 -> m10_23  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m10_20 -> m10_29  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m10_20 -> m10_35  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m10_21 -> m10_35  [color=darkseagreen4, key=1, label=connection, style=dashed];
m10_65 -> m10_68  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m10_71 -> m10_75  [color=darkseagreen4, key=1, label=latency, style=dashed];
m10_73 -> m10_75  [color=darkseagreen4, key=1, label=result, style=dashed];
m10_72 -> m10_74  [color=darkseagreen4, key=1, label=duration, style=dashed];
m10_72 -> m10_75  [color=darkseagreen4, key=1, label=duration, style=dashed];
m10_2 -> m10_5  [color=green, key=1, label="HangFire.Server.ServerWatchdogOptions", style=dashed];
m10_4 -> m10_9  [color=darkseagreen4, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m10_4 -> m10_11  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m10_11 -> m10_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m10_13 -> m10_15  [color=darkseagreen4, key=1, label=serversRemoved, style=dashed];
m10_22 -> m10_30  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m10_22 -> m10_35  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m10_22 -> m10_36  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m10_22 -> m10_38  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m10_22 -> m10_41  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m10_23 -> m10_16  [color=darkseagreen4, key=1, label="HangFire.Server.ServerWatchdog", style=dashed];
m10_33 -> m10_35  [color=darkseagreen4, key=1, label=state, style=dashed];
m10_92 -> m10_11  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
m10_92 -> m10_14  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
m10_92 -> m10_35  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
m10_92 -> m10_60  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
}
