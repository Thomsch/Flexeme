digraph  {
n448 [label="HangFire.SqlServer.Tests.ConnectionFacts", span=""];
n449 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n450 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n451 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n452 [label=arrangeSql, span=""];
n453 [label=arrangeSql, span=""];
n454 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n455 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n456 [label=arrangeSql, span=""];
n457 [label=arrangeSql, span=""];
n458 [label=arrangeSql, span=""];
n459 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n460 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n461 [label=arrangeSql, span=""];
n462 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n463 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n464 [label=arrangeSql, span=""];
n465 [label=arrangeSql, span=""];
n466 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n467 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n468 [label=arrangeSql, span=""];
n469 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n470 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n471 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n472 [label=arrangeSql, span=""];
n473 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n474 [label=arrangeSql, span=""];
n475 [label="HangFire.SqlServer.SqlServerConnection", span=""];
n476 [label=arrangeSql, span=""];
n0 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", span="15-15"];
n1 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(null, new SqlServerStorageOptions()))", span="17-18"];
n2 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", label="Assert.Equal(''connection'', exception.ParamName)", span="20-20"];
n4 [cluster="Unk.>", label="Entry Unk.>", span=""];
n6 [cluster="lambda expression", label="Entry lambda expression", span="18-18"];
n3 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", span="15-15"];
n5 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n7 [cluster="lambda expression", label="new SqlServerConnection(null, new SqlServerStorageOptions())", span="18-18"];
n8 [cluster="lambda expression", label="Exit lambda expression", span="18-18"];
n9 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", span="35-35"];
n10 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
n11 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="24-24"];
n12 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(ConnectionUtils.CreateConnection(), null))", span="26-27"];
n13 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="Assert.Equal(''options'', exception.ParamName)", span="29-29"];
n15 [cluster="lambda expression", label="Entry lambda expression", span="27-27"];
n14 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="24-24"];
n16 [cluster="lambda expression", label="new SqlServerConnection(ConnectionUtils.CreateConnection(), null)", span="27-27"];
n17 [cluster="lambda expression", label="Exit lambda expression", span="27-27"];
n18 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
n19 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="33-33"];
n20 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="35-39"];
n21 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="33-33"];
n22 [cluster="Unk.UseConnection", label="Entry Unk.UseConnection", span=""];
n23 [cluster="lambda expression", label="Entry lambda expression", span="35-39"];
n24 [cluster="lambda expression", label="var transaction = connection.CreateWriteTransaction()", span="37-37"];
n25 [cluster="lambda expression", label="Assert.NotNull(transaction)", span="38-38"];
n27 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="49-49"];
n26 [cluster="lambda expression", label="Exit lambda expression", span="35-39"];
n28 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
n29 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="43-43"];
n30 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireJobLock(''1'');\r\n                Assert.NotNull(@lock);\r\n            })", span="45-49"];
n31 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="43-43"];
n32 [cluster="lambda expression", label="Entry lambda expression", span="45-49"];
n33 [cluster="lambda expression", label="var @lock = connection.AcquireJobLock(''1'')", span="47-47"];
n34 [cluster="lambda expression", label="Assert.NotNull(@lock)", span="48-48"];
n36 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="54-54"];
n35 [cluster="lambda expression", label="Exit lambda expression", span="45-49"];
n37 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="53-53"];
n38 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="55-64"];
n39 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="53-53"];
n40 [cluster="lambda expression", label="Entry lambda expression", span="55-64"];
n41 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero))", span="57-61"];
n45 [cluster="lambda expression", label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero)", span="58-61"];
n42 [cluster="lambda expression", label="Assert.Equal(''job'', exception.ParamName)", span="63-63"];
n44 [cluster="lambda expression", label="Entry lambda expression", span="58-61"];
n43 [cluster="lambda expression", label="Exit lambda expression", span="55-64"];
n46 [cluster="lambda expression", label="Exit lambda expression", span="58-61"];
n47 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n48 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
n49 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="68-68"];
n50 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="70-79"];
n51 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="68-68"];
n52 [cluster="lambda expression", label="Entry lambda expression", span="70-79"];
n53 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero))", span="72-76"];
n57 [cluster="lambda expression", label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero)", span="73-76"];
n54 [cluster="lambda expression", label="Assert.Equal(''parameters'', exception.ParamName)", span="78-78"];
n56 [cluster="lambda expression", label="Entry lambda expression", span="73-76"];
n55 [cluster="lambda expression", label="Exit lambda expression", span="70-79"];
n58 [cluster="lambda expression", label="Exit lambda expression", span="73-76"];
n59 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="116-116"];
n60 [cluster="lambda expression", label="Entry lambda expression", span="74-74"];
n61 [cluster="lambda expression", label="SampleMethod(''hello'')", span="74-74"];
n62 [cluster="lambda expression", label="Exit lambda expression", span="74-74"];
n63 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="624-624"];
n64 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="83-83"];
n65 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(ConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''Hello'', job.Arguments[0]);\r\n\r\n                Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            })", span="85-117"];
n66 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="83-83"];
n67 [cluster="Unk.UseConnections", label="Entry Unk.UseConnections", span=""];
n68 [cluster="lambda expression", label="Entry lambda expression", span="85-117"];
n69 [cluster="lambda expression", label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1))", span="87-90"];
n72 [cluster="lambda expression", label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="95-95"];
n83 [cluster="lambda expression", label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="110-113"];
n70 [cluster="lambda expression", label="Assert.NotNull(jobId)", span="92-92"];
n87 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
n97 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
n71 [cluster="lambda expression", label="Assert.NotEmpty(jobId)", span="93-93"];
n73 [cluster="lambda expression", label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="96-96"];
n88 [cluster="Unk.NotEmpty", label="Entry Unk.NotEmpty", span=""];
n89 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
n90 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n74 [cluster="lambda expression", label="Assert.Equal(null, (int?) sqlJob.StateId)", span="97-97"];
n75 [cluster="lambda expression", label="Assert.Equal(null, (string) sqlJob.StateName)", span="98-98"];
n76 [cluster="lambda expression", label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="100-100"];
n77 [cluster="lambda expression", label="invocationData.Arguments = sqlJob.Arguments", span="101-101"];
n82 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1))", span="108-108"];
n91 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
n92 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30"];
n78 [cluster="lambda expression", label="var job = invocationData.Deserialize()", span="103-103"];
n79 [cluster="lambda expression", label="Assert.Equal(typeof(ConnectionFacts), job.Type)", span="104-104"];
n93 [cluster="HangFire.Storage.InvocationData.Deserialize()", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
n80 [cluster="lambda expression", label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="105-105"];
n81 [cluster="lambda expression", label="Assert.Equal(''Hello'', job.Arguments[0])", span="106-106"];
n94 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
n95 [cluster="Unk.True", label="Entry Unk.True", span=""];
n84 [cluster="lambda expression", label="Assert.Equal(''Value1'', parameters[''Key1''])", span="115-115"];
n96 [cluster="Unk.ToDictionary", label="Entry Unk.ToDictionary", span=""];
n100 [cluster="lambda expression", label="Entry lambda expression", span="113-113"];
n103 [cluster="lambda expression", label="Entry lambda expression", span="113-113"];
n85 [cluster="lambda expression", label="Assert.Equal(''Value2'', parameters[''Key2''])", span="116-116"];
n86 [cluster="lambda expression", label="Exit lambda expression", span="85-117"];
n98 [cluster="lambda expression", label="SampleMethod(''Hello'')", span="88-88"];
n99 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
n101 [cluster="lambda expression", label="(string) x.Name", span="113-113"];
n102 [cluster="lambda expression", label="Exit lambda expression", span="113-113"];
n104 [cluster="lambda expression", label="(string) x.Value", span="113-113"];
n105 [cluster="lambda expression", label="Exit lambda expression", span="113-113"];
n106 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="121-121"];
n107 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="123-124"];
n108 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="121-121"];
n109 [cluster="lambda expression", label="Entry lambda expression", span="123-124"];
n110 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="123-124"];
n113 [cluster="lambda expression", label="connection.GetJobData(null)", span="124-124"];
n111 [cluster="lambda expression", label="Exit lambda expression", span="123-124"];
n112 [cluster="lambda expression", label="Entry lambda expression", span="124-124"];
n114 [cluster="lambda expression", label="Exit lambda expression", span="124-124"];
n115 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
n116 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="128-128"];
n117 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="130-134"];
n118 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="128-128"];
n119 [cluster="lambda expression", label="Entry lambda expression", span="130-134"];
n120 [cluster="lambda expression", label="var result = connection.GetJobData(''1'')", span="132-132"];
n121 [cluster="lambda expression", label="Assert.Null(result)", span="133-133"];
n122 [cluster="lambda expression", label="Exit lambda expression", span="130-134"];
n123 [cluster="Unk.Null", label="Entry Unk.Null", span=""];
n124 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="138-138"];
n125 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="140-143"];
n126 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n                Assert.Null(result.LoadException);\r\n            })", span="145-165"];
n130 [cluster="lambda expression", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="149-156"];
n127 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="138-138"];
n128 [cluster="lambda expression", label="Entry lambda expression", span="145-165"];
n129 [cluster="lambda expression", label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="147-147"];
n131 [cluster="lambda expression", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="158-158"];
n141 [cluster="lambda expression", label="Entry lambda expression", span="147-147"];
n138 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
n139 [cluster="HangFire.Common.JobHelper.ToJson(object)", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
n132 [cluster="lambda expression", label="Assert.NotNull(result)", span="160-160"];
n140 [cluster="int.ToString()", label="Entry int.ToString()", span="0-0"];
n133 [cluster="lambda expression", label="Assert.NotNull(result.Job)", span="161-161"];
n134 [cluster="lambda expression", label="Assert.Equal(''Succeeded'', result.State)", span="162-162"];
n135 [cluster="lambda expression", label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="163-163"];
n136 [cluster="lambda expression", label="Assert.Null(result.LoadException)", span="164-164"];
n137 [cluster="lambda expression", label="Exit lambda expression", span="145-165"];
n142 [cluster="lambda expression", label="SampleMethod(''wrong'')", span="147-147"];
n143 [cluster="lambda expression", label="Exit lambda expression", span="147-147"];
n144 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="169-169"];
n145 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="171-174"];
n146 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="176-190"];
n149 [cluster="lambda expression", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="178-185"];
n147 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="169-169"];
n148 [cluster="lambda expression", label="Entry lambda expression", span="176-190"];
n150 [cluster="lambda expression", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="187-187"];
n153 [cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24"];
n151 [cluster="lambda expression", label="Assert.NotNull(result.LoadException)", span="189-189"];
n152 [cluster="lambda expression", label="Exit lambda expression", span="176-190"];
n154 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="194-194"];
n155 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="196-202"];
n156 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="194-194"];
n157 [cluster="lambda expression", label="Entry lambda expression", span="196-202"];
n158 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="198-199"];
n162 [cluster="lambda expression", label="connection.SetJobParameter(null, ''name'', ''value'')", span="199-199"];
n159 [cluster="lambda expression", label="Assert.Equal(''id'', exception.ParamName)", span="201-201"];
n161 [cluster="lambda expression", label="Entry lambda expression", span="199-199"];
n160 [cluster="lambda expression", label="Exit lambda expression", span="196-202"];
n163 [cluster="lambda expression", label="Exit lambda expression", span="199-199"];
n164 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
n165 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="206-206"];
n166 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="208-214"];
n167 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="206-206"];
n168 [cluster="lambda expression", label="Entry lambda expression", span="208-214"];
n169 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="210-211"];
n173 [cluster="lambda expression", label="connection.SetJobParameter(''1'', null, ''value'')", span="211-211"];
n170 [cluster="lambda expression", label="Assert.Equal(''name'', exception.ParamName)", span="213-213"];
n172 [cluster="lambda expression", label="Entry lambda expression", span="211-211"];
n171 [cluster="lambda expression", label="Exit lambda expression", span="208-214"];
n174 [cluster="lambda expression", label="Exit lambda expression", span="211-211"];
n175 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="218-218"];
n176 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="220-223"];
n177 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="225-237"];
n180 [cluster="lambda expression", label="var job = sql.Query(arrangeSql).Single()", span="227-227"];
n178 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="218-218"];
n179 [cluster="lambda expression", label="Entry lambda expression", span="225-237"];
n182 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="230-230"];
n183 [cluster="lambda expression", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="232-234"];
n181 [cluster="lambda expression", label="string jobId = job.Id.ToString()", span="228-228"];
n184 [cluster="lambda expression", label="Assert.Equal(''Value'', parameter.Value)", span="236-236"];
n185 [cluster="lambda expression", label="Exit lambda expression", span="225-237"];
n186 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="241-241"];
n187 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="243-246"];
n188 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="248-261"];
n191 [cluster="lambda expression", label="var job = sql.Query(arrangeSql).Single()", span="250-250"];
n189 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="241-241"];
n190 [cluster="lambda expression", label="Entry lambda expression", span="248-261"];
n193 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="253-253"];
n194 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="254-254"];
n195 [cluster="lambda expression", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="256-258"];
n192 [cluster="lambda expression", label="string jobId = job.Id.ToString()", span="251-251"];
n196 [cluster="lambda expression", label="Assert.Equal(''AnotherValue'', parameter.Value)", span="260-260"];
n197 [cluster="lambda expression", label="Exit lambda expression", span="248-261"];
n198 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="265-265"];
n199 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="267-270"];
n200 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="272-284"];
n203 [cluster="lambda expression", label="var job = sql.Query(arrangeSql).Single()", span="274-274"];
n201 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="265-265"];
n202 [cluster="lambda expression", label="Entry lambda expression", span="272-284"];
n205 [cluster="lambda expression", label="connection.SetJobParameter(jobId, ''Name'', null)", span="277-277"];
n206 [cluster="lambda expression", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="279-281"];
n204 [cluster="lambda expression", label="string jobId = job.Id.ToString()", span="275-275"];
n207 [cluster="lambda expression", label="Assert.Equal((string) null, parameter.Value)", span="283-283"];
n208 [cluster="lambda expression", label="Exit lambda expression", span="272-284"];
n209 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="288-288"];
n210 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="290-296"];
n211 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="288-288"];
n212 [cluster="lambda expression", label="Entry lambda expression", span="290-296"];
n213 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="292-293"];
n217 [cluster="lambda expression", label="connection.GetJobParameter(null, ''hello'')", span="293-293"];
n214 [cluster="lambda expression", label="Assert.Equal(''id'', exception.ParamName)", span="295-295"];
n216 [cluster="lambda expression", label="Entry lambda expression", span="293-293"];
n215 [cluster="lambda expression", label="Exit lambda expression", span="290-296"];
n218 [cluster="lambda expression", label="Exit lambda expression", span="293-293"];
n219 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
n220 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="300-300"];
n221 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="302-308"];
n222 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="300-300"];
n223 [cluster="lambda expression", label="Entry lambda expression", span="302-308"];
n224 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="304-305"];
n228 [cluster="lambda expression", label="connection.GetJobParameter(''1'', null)", span="305-305"];
n225 [cluster="lambda expression", label="Assert.Equal(''name'', exception.ParamName)", span="307-307"];
n227 [cluster="lambda expression", label="Entry lambda expression", span="305-305"];
n226 [cluster="lambda expression", label="Exit lambda expression", span="302-308"];
n229 [cluster="lambda expression", label="Exit lambda expression", span="305-305"];
n230 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="312-312"];
n231 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="314-318"];
n232 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="312-312"];
n233 [cluster="lambda expression", label="Entry lambda expression", span="314-318"];
n234 [cluster="lambda expression", label="var value = connection.GetJobParameter(''1'', ''hello'')", span="316-316"];
n235 [cluster="lambda expression", label="Assert.Null(value)", span="317-317"];
n236 [cluster="lambda expression", label="Exit lambda expression", span="314-318"];
n237 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="322-322"];
n238 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="324-331"];
n239 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="333-342"];
n242 [cluster="lambda expression", label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="335-337"];
n240 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="322-322"];
n241 [cluster="lambda expression", label="Entry lambda expression", span="333-342"];
n243 [cluster="lambda expression", label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="339-339"];
n244 [cluster="lambda expression", label="Assert.Equal(''value'', value)", span="341-341"];
n246 [cluster="Unk.GetJobParameter", label="Entry Unk.GetJobParameter", span=""];
n245 [cluster="lambda expression", label="Exit lambda expression", span="333-342"];
n247 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="346-346"];
n248 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="348-354"];
n249 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="346-346"];
n250 [cluster="lambda expression", label="Entry lambda expression", span="348-354"];
n251 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''))", span="350-351"];
n255 [cluster="lambda expression", label="connection.DeleteJobFromQueue(null, ''default'')", span="351-351"];
n252 [cluster="lambda expression", label="Assert.Equal(''id'', exception.ParamName)", span="353-353"];
n254 [cluster="lambda expression", label="Entry lambda expression", span="351-351"];
n253 [cluster="lambda expression", label="Exit lambda expression", span="348-354"];
n256 [cluster="lambda expression", label="Exit lambda expression", span="351-351"];
n257 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
n258 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="358-358"];
n259 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null));\r\n\r\n                Assert.Equal(''queue'', exception.ParamName);\r\n            })", span="360-366"];
n260 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="358-358"];
n261 [cluster="lambda expression", label="Entry lambda expression", span="360-366"];
n262 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null))", span="362-363"];
n266 [cluster="lambda expression", label="connection.DeleteJobFromQueue(''1'', null)", span="363-363"];
n263 [cluster="lambda expression", label="Assert.Equal(''queue'', exception.ParamName)", span="365-365"];
n265 [cluster="lambda expression", label="Entry lambda expression", span="363-363"];
n264 [cluster="lambda expression", label="Exit lambda expression", span="360-366"];
n267 [cluster="lambda expression", label="Exit lambda expression", span="363-363"];
n268 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="370-370"];
n269 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="372-374"];
n270 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' });\r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="376-384"];
n273 [cluster="lambda expression", label="sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' })", span="378-378"];
n271 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="370-370"];
n272 [cluster="lambda expression", label="Entry lambda expression", span="376-384"];
n274 [cluster="lambda expression", label="connection.DeleteJobFromQueue(''1'', ''default'')", span="380-380"];
n275 [cluster="lambda expression", label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="382-382"];
n278 [cluster="Unk.Execute", label="Entry Unk.Execute", span=""];
n276 [cluster="lambda expression", label="Assert.Equal(0, count)", span="383-383"];
n277 [cluster="lambda expression", label="Exit lambda expression", span="376-384"];
n279 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="388-388"];
n280 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="390-392"];
n281 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    }); \r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(2, count);\r\n            })", span="394-408"];
n284 [cluster="lambda expression", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    })", span="396-402"];
n282 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="388-388"];
n283 [cluster="lambda expression", label="Entry lambda expression", span="394-408"];
n285 [cluster="lambda expression", label="connection.DeleteJobFromQueue(''1'', ''default'')", span="404-404"];
n286 [cluster="lambda expression", label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="406-406"];
n287 [cluster="lambda expression", label="Assert.Equal(2, count)", span="407-407"];
n288 [cluster="lambda expression", label="Exit lambda expression", span="394-408"];
n289 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="412-412"];
n290 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="414-420"];
n291 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="412-412"];
n292 [cluster="lambda expression", label="Entry lambda expression", span="414-420"];
n293 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="416-417"];
n297 [cluster="lambda expression", label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="417-417"];
n294 [cluster="lambda expression", label="Assert.Equal(''key'', exception.ParamName)", span="419-419"];
n296 [cluster="lambda expression", label="Entry lambda expression", span="417-417"];
n295 [cluster="lambda expression", label="Exit lambda expression", span="414-420"];
n298 [cluster="lambda expression", label="Exit lambda expression", span="417-417"];
n299 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
n300 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="424-424"];
n301 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="426-427"];
n302 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="424-424"];
n303 [cluster="lambda expression", label="Entry lambda expression", span="426-427"];
n304 [cluster="lambda expression", label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="426-427"];
n307 [cluster="lambda expression", label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="427-427"];
n305 [cluster="lambda expression", label="Exit lambda expression", span="426-427"];
n306 [cluster="lambda expression", label="Entry lambda expression", span="427-427"];
n308 [cluster="lambda expression", label="Exit lambda expression", span="427-427"];
n309 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="431-431"];
n310 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="433-439"];
n311 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="431-431"];
n312 [cluster="lambda expression", label="Entry lambda expression", span="433-439"];
n313 [cluster="lambda expression", label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="435-436"];
n314 [cluster="lambda expression", label="Assert.Null(result)", span="438-438"];
n315 [cluster="lambda expression", label="Exit lambda expression", span="433-439"];
n316 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="443-443"];
n317 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="445-451"];
n318 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="453-460"];
n321 [cluster="lambda expression", label="sql.Execute(arrangeSql)", span="455-455"];
n319 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="443-443"];
n320 [cluster="lambda expression", label="Entry lambda expression", span="453-460"];
n322 [cluster="lambda expression", label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="457-457"];
n323 [cluster="lambda expression", label="Assert.Equal(''-1.0'', result)", span="459-459"];
n324 [cluster="lambda expression", label="Exit lambda expression", span="453-460"];
n325 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="464-464"];
n326 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="466-472"];
n327 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="464-464"];
n328 [cluster="lambda expression", label="Entry lambda expression", span="466-472"];
n329 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="468-469"];
n333 [cluster="lambda expression", label="connection.AnnounceServer(null, new ServerContext())", span="469-469"];
n330 [cluster="lambda expression", label="Assert.Equal(''serverId'', exception.ParamName)", span="471-471"];
n332 [cluster="lambda expression", label="Entry lambda expression", span="469-469"];
n331 [cluster="lambda expression", label="Exit lambda expression", span="466-472"];
n334 [cluster="lambda expression", label="Exit lambda expression", span="469-469"];
n335 [cluster="HangFire.Server.ServerContext.ServerContext()", label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18"];
n336 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
n337 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="476-476"];
n338 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="478-484"];
n339 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="476-476"];
n340 [cluster="lambda expression", label="Entry lambda expression", span="478-484"];
n341 [cluster="lambda expression", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="480-481"];
n345 [cluster="lambda expression", label="connection.AnnounceServer(''server'', null)", span="481-481"];
n342 [cluster="lambda expression", label="Assert.Equal(''context'', exception.ParamName)", span="483-483"];
n344 [cluster="lambda expression", label="Entry lambda expression", span="481-481"];
n343 [cluster="lambda expression", label="Exit lambda expression", span="478-484"];
n346 [cluster="lambda expression", label="Exit lambda expression", span="481-481"];
n347 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="488-488"];
n349 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="488-488"];
n350 [cluster="lambda expression", label="Entry lambda expression", span="490-515"];
n351 [cluster="lambda expression", label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="492-496"];
n352 [cluster="lambda expression", label="connection.AnnounceServer(''server'', context1)", span="497-497"];
n353 [cluster="lambda expression", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="499-499"];
n358 [cluster="lambda expression", label="connection.AnnounceServer(''server'', context2)", span="511-511"];
n359 [cluster="lambda expression", label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="512-512"];
n354 [cluster="lambda expression", label="Assert.Equal(''server'', server.Id)", span="500-500"];
n355 [cluster="lambda expression", label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="501-503"];
n363 [cluster="string.StartsWith(string)", label="Entry string.StartsWith(string)", span="0-0"];
n357 [cluster="lambda expression", label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="506-510"];
n360 [cluster="lambda expression", label="Assert.Equal(''server'', sameServer.Id)", span="513-513"];
n361 [cluster="lambda expression", label="Assert.Contains(''1000'', sameServer.Data)", span="514-514"];
n362 [cluster="lambda expression", label="Exit lambda expression", span="490-515"];
n364 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n365 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="519-519"];
n366 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="521-522"];
n367 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="519-519"];
n368 [cluster="lambda expression", label="Entry lambda expression", span="521-522"];
n369 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="521-522"];
n372 [cluster="lambda expression", label="connection.RemoveServer(null)", span="522-522"];
n370 [cluster="lambda expression", label="Exit lambda expression", span="521-522"];
n371 [cluster="lambda expression", label="Entry lambda expression", span="522-522"];
n373 [cluster="lambda expression", label="Exit lambda expression", span="522-522"];
n374 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
n375 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="526-526"];
n377 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="534-542"];
n380 [cluster="lambda expression", label="sql.Execute(arrangeSql)", span="536-536"];
n378 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="526-526"];
n379 [cluster="lambda expression", label="Entry lambda expression", span="534-542"];
n381 [cluster="lambda expression", label="connection.RemoveServer(''Server1'')", span="538-538"];
n382 [cluster="lambda expression", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="540-540"];
n383 [cluster="lambda expression", label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="541-541"];
n384 [cluster="lambda expression", label="Exit lambda expression", span="534-542"];
n385 [cluster="Unk.NotEqual", label="Entry Unk.NotEqual", span=""];
n386 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="546-546"];
n387 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="548-549"];
n388 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="546-546"];
n389 [cluster="lambda expression", label="Entry lambda expression", span="548-549"];
n390 [cluster="lambda expression", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="548-549"];
n393 [cluster="lambda expression", label="connection.Heartbeat(null)", span="549-549"];
n391 [cluster="lambda expression", label="Exit lambda expression", span="548-549"];
n392 [cluster="lambda expression", label="Entry lambda expression", span="549-549"];
n394 [cluster="lambda expression", label="Exit lambda expression", span="549-549"];
n395 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
n396 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="553-553"];
n401 [cluster="lambda expression", label="sql.Execute(arrangeSql)", span="563-563"];
n399 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="553-553"];
n400 [cluster="lambda expression", label="Entry lambda expression", span="561-572"];
n402 [cluster="lambda expression", label="connection.Heartbeat(''server1'')", span="565-565"];
n407 [cluster="lambda expression", label="Entry lambda expression", span="568-568"];
n410 [cluster="lambda expression", label="Entry lambda expression", span="568-568"];
n406 [cluster="lambda expression", label="Exit lambda expression", span="561-572"];
n409 [cluster="lambda expression", label="Exit lambda expression", span="568-568"];
n412 [cluster="lambda expression", label="Exit lambda expression", span="568-568"];
n413 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="576-576"];
n414 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="578-579"];
n415 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="576-576"];
n416 [cluster="lambda expression", label="Entry lambda expression", span="578-579"];
n417 [cluster="lambda expression", label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="578-579"];
n420 [cluster="lambda expression", label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="579-579"];
n418 [cluster="lambda expression", label="Exit lambda expression", span="578-579"];
n419 [cluster="lambda expression", label="Entry lambda expression", span="579-579"];
n421 [cluster="lambda expression", label="Exit lambda expression", span="579-579"];
n422 [cluster="System.TimeSpan.FromMinutes(double)", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
n423 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
n424 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="583-583"];
n425 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="585-587"];
n426 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="589-603"];
n429 [cluster="lambda expression", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="591-597"];
n427 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="583-583"];
n428 [cluster="lambda expression", label="Entry lambda expression", span="589-603"];
n430 [cluster="lambda expression", label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="599-599"];
n431 [cluster="lambda expression", label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="601-601"];
n434 [cluster="System.DateTime.AddHours(double)", label="Entry System.DateTime.AddHours(double)", span="0-0"];
n435 [cluster="System.TimeSpan.FromHours(double)", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
n432 [cluster="lambda expression", label="Assert.Equal(''server2'', liveServer.Id)", span="602-602"];
n433 [cluster="lambda expression", label="Exit lambda expression", span="589-603"];
n436 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="606-606"];
n437 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="var sqlConnection = ConnectionUtils.CreateConnection()", span="608-608"];
n439 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="action(sqlConnection, connection)", span="611-611"];
n438 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="var connection = new SqlServerConnection(sqlConnection, new SqlServerStorageOptions())", span="609-609"];
n440 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="606-606"];
n441 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
n442 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="615-615"];
n443 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="var connection = new SqlServerConnection(\r\n                ConnectionUtils.CreateConnection(), new SqlServerStorageOptions())", span="617-618"];
n444 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="action(connection)", span="620-620"];
n445 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="615-615"];
n446 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n447 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="624-624"];
m2_0 [cluster="HangFire.IStateChangedFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.IStateChangedFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", span="8-8"];
m2_1 [cluster="HangFire.IStateChangedFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.IStateChangedFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", span="8-8"];
m3_46 [cluster="HangFire.SqlServer.Tests.StorageFacts.ToString_ReturnsOnlyServerAndDatabase()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.ToString_ReturnsOnlyServerAndDatabase()", span="59-59"];
m3_50 [cluster="HangFire.SqlServer.Tests.StorageFacts.ToString_ReturnsOnlyServerAndDatabase()", file="StorageFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.ToString_ReturnsOnlyServerAndDatabase()", span="59-59"];
m3_31 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetConnection()", span="59-59"];
m3_51 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.SqlServerStorage.ToString()", span="76-76"];
m3_32 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", span="48-48"];
m3_33 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="StorageFacts.cs", label="var storage = CreateStorage()", span="50-50"];
m3_34 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="StorageFacts.cs", label="var components = storage.GetComponents()", span="52-52"];
m3_35 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="StorageFacts.cs", label="var componentTypes = components.Select(x => x.GetType()).ToArray()", span="54-54"];
m3_36 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="StorageFacts.cs", label="Assert.Contains(typeof(ExpirationManager), componentTypes)", span="55-55"];
m3_37 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="StorageFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", span="48-48"];
m3_45 [cluster="object.GetType()", file="StorageFacts.cs", label="Entry object.GetType()", span="0-0"];
m3_4 [cluster="Unk.>", file="StorageFacts.cs", label="Entry Unk.>", span=""];
m3_23 [cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", span="69-69"];
m3_52 [cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", file="StorageFacts.cs", label="return new SqlServerStorage(\r\n                ConnectionUtils.GetConnectionString(),\r\n                new SqlServerStorageOptions { PrepareSchemaIfNecessary = false });", span="71-73"];
m3_53 [cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", file="StorageFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", span="69-69"];
m3_40 [cluster="Unk.ToArray", file="StorageFacts.cs", label="Entry Unk.ToArray", span=""];
m3_25 [cluster="Unk.NotNull", file="StorageFacts.cs", label="Entry Unk.NotNull", span=""];
m3_24 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54"];
m3_17 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="StorageFacts.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
m3_42 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="54-54"];
m3_6 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="13-13"];
m3_7 [cluster="lambda expression", file="StorageFacts.cs", label="new SqlServerStorage(null)", span="13-13"];
m3_8 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="13-13"];
m3_14 [cluster="lambda expression", file="StorageFacts.cs", label="Entry lambda expression", span="22-22"];
m3_15 [cluster="lambda expression", file="StorageFacts.cs", label="new SqlServerStorage(''hello'', null)", span="22-22"];
m3_16 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="22-22"];
m3_43 [cluster="lambda expression", file="StorageFacts.cs", label="x.GetType()", span="54-54"];
m3_44 [cluster="lambda expression", file="StorageFacts.cs", label="Exit lambda expression", span="54-54"];
m3_41 [cluster="Unk.Contains", file="StorageFacts.cs", label="Entry Unk.Contains", span=""];
m3_26 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", span="38-38"];
m3_27 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="StorageFacts.cs", label="var storage = CreateStorage()", span="40-40"];
m3_28 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="StorageFacts.cs", label="var connection = storage.GetConnection()", span="41-41"];
m3_29 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="StorageFacts.cs", label="Assert.NotNull(connection)", span="43-43"];
m3_30 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="StorageFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", span="38-38"];
m3_39 [cluster="Unk.Select", file="StorageFacts.cs", label="Entry Unk.Select", span=""];
m3_38 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetComponents()", span="64-64"];
m3_10 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="19-19"];
m3_11 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="StorageFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerStorage(''hello'', null))", span="21-22"];
m3_12 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="StorageFacts.cs", label="Assert.Equal(''options'', exception.ParamName)", span="24-24"];
m3_13 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="StorageFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="19-19"];
m3_9 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="StorageFacts.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="32-32"];
m3_0 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="10-10"];
m3_1 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="StorageFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerStorage(null))", span="12-13"];
m3_2 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="StorageFacts.cs", label="Assert.Equal(''connectionString'', exception.ParamName)", span="15-15"];
m3_3 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="StorageFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="10-10"];
m3_54 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26"];
m3_55 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m3_18 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="StorageFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="28-28"];
m3_19 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="StorageFacts.cs", label="var storage = CreateStorage()", span="30-30"];
m3_20 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="StorageFacts.cs", label="var api = storage.GetMonitoringApi()", span="31-31"];
m3_21 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="StorageFacts.cs", label="Assert.NotNull(api)", span="33-33"];
m3_22 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="StorageFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="28-28"];
n448 -> n107  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n301  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n366  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n387  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n448 -> n414  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
n449 -> n45  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n450 -> n57  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n451 -> n113  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n454 -> n162  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n455 -> n173  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n459 -> n217  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n460 -> n228  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n462 -> n255  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n463 -> n266  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n466 -> n297  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n467 -> n307  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n468 -> n321  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n469 -> n333  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n470 -> n345  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n471 -> n372  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n472 -> n380  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n473 -> n393  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n474 -> n401  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n475 -> n420  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n1 -> n6  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n12 -> n15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n30 -> n32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n38 -> n40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n40 -> n45  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n41 -> n44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n50 -> n52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n52 -> n57  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n53 -> n56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n57 -> n60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n65 -> n68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n69 -> n97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n69 -> n71  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n69 -> n73  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n72 -> n74  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
n72 -> n75  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
n72 -> n82  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
n83 -> n100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n83 -> n103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n83 -> n85  [color=darkseagreen4, key=1, label=parameters, style=dashed];
n78 -> n80  [color=darkseagreen4, key=1, label=job, style=dashed];
n78 -> n81  [color=darkseagreen4, key=1, label=job, style=dashed];
n107 -> n109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n109 -> n113  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n110 -> n112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n117 -> n119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n126 -> n128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n129 -> n141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n131 -> n133  [color=darkseagreen4, key=1, label=result, style=dashed];
n131 -> n134  [color=darkseagreen4, key=1, label=result, style=dashed];
n131 -> n135  [color=darkseagreen4, key=1, label=result, style=dashed];
n131 -> n136  [color=darkseagreen4, key=1, label=result, style=dashed];
n146 -> n148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n155 -> n157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n157 -> n162  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n158 -> n161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n166 -> n168  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n168 -> n173  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n169 -> n172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n177 -> n179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n179 -> n182  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n188 -> n190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n190 -> n193  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n190 -> n194  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n192 -> n194  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n200 -> n202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n202 -> n205  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n210 -> n212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n212 -> n217  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n213 -> n216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n221 -> n223  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n223 -> n228  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n224 -> n227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n231 -> n233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n239 -> n241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n248 -> n250  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n250 -> n255  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n251 -> n254  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n259 -> n261  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n261 -> n266  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n262 -> n265  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n270 -> n272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n272 -> n274  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n281 -> n283  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n283 -> n285  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n290 -> n292  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n292 -> n297  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n293 -> n296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n301 -> n303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n303 -> n307  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n304 -> n306  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n310 -> n312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n317 -> n321  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n318 -> n320  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n326 -> n328  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n328 -> n333  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n329 -> n332  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n338 -> n340  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n340 -> n345  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n341 -> n344  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n350 -> n352  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n350 -> n358  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n353 -> n355  [color=darkseagreen4, key=1, label=server, style=dashed];
n359 -> n361  [color=darkseagreen4, key=1, label=sameServer, style=dashed];
n366 -> n368  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n368 -> n372  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n369 -> n371  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n377 -> n379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n379 -> n381  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n387 -> n389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n389 -> n393  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n390 -> n392  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n400 -> n402  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n414 -> n416  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n416 -> n420  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n417 -> n419  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n426 -> n428  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n428 -> n430  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
n436 -> n439  [color=darkseagreen4, key=1, label="System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>", style=dashed];
n437 -> n439  [color=darkseagreen4, key=1, label=sqlConnection, style=dashed];
n442 -> n444  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerConnection>", style=dashed];
m3_35 -> m3_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_11 -> m3_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_1 -> m3_6  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
}
