digraph  {
n219 [label="HangFire.Tests.StateMachineFeature", span=""];
n0 [cluster="HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="Entry HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
n1 [cluster="HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
n2 [cluster="HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''State machine'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
n5 [cluster="Unk.GetTestRunner", label="Entry Unk.GetTestRunner", span=""];
n3 [cluster="HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
n6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
n7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
n4 [cluster="HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="Exit HangFire.Tests.StateMachineFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
n8 [cluster="Unk.OnFeatureStart", label="Entry Unk.OnFeatureStart", span=""];
n9 [cluster="HangFire.Tests.StateMachineFeature.FeatureTearDown()", label="Entry HangFire.Tests.StateMachineFeature.FeatureTearDown()", span="39-39"];
n10 [cluster="HangFire.Tests.StateMachineFeature.FeatureTearDown()", label="testRunner.OnFeatureEnd()", span="41-41"];
n11 [cluster="HangFire.Tests.StateMachineFeature.FeatureTearDown()", label="testRunner = null", span="42-42"];
n13 [cluster="Unk.OnFeatureEnd", label="Entry Unk.OnFeatureEnd", span=""];
n12 [cluster="HangFire.Tests.StateMachineFeature.FeatureTearDown()", label="Exit HangFire.Tests.StateMachineFeature.FeatureTearDown()", span="39-39"];
n14 [cluster="HangFire.Tests.StateMachineFeature.TestInitialize()", label="Entry HangFire.Tests.StateMachineFeature.TestInitialize()", span="46-46"];
n15 [cluster="HangFire.Tests.StateMachineFeature.TestInitialize()", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''State machine''))", span="48-49"];
n16 [cluster="HangFire.Tests.StateMachineFeature.TestInitialize()", label="HangFire.Tests.StateMachineFeature.FeatureSetup(null)", span="51-51"];
n17 [cluster="HangFire.Tests.StateMachineFeature.TestInitialize()", label="Exit HangFire.Tests.StateMachineFeature.TestInitialize()", span="46-46"];
n18 [cluster="HangFire.Tests.StateMachineFeature.ScenarioTearDown()", label="Entry HangFire.Tests.StateMachineFeature.ScenarioTearDown()", span="56-56"];
n19 [cluster="HangFire.Tests.StateMachineFeature.ScenarioTearDown()", label="testRunner.OnScenarioEnd()", span="58-58"];
n20 [cluster="HangFire.Tests.StateMachineFeature.ScenarioTearDown()", label="Exit HangFire.Tests.StateMachineFeature.ScenarioTearDown()", span="56-56"];
n21 [cluster="Unk.OnScenarioEnd", label="Entry Unk.OnScenarioEnd", span=""];
n22 [cluster="HangFire.Tests.StateMachineFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="Entry HangFire.Tests.StateMachineFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
n23 [cluster="HangFire.Tests.StateMachineFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
n24 [cluster="HangFire.Tests.StateMachineFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="Exit HangFire.Tests.StateMachineFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
n25 [cluster="Unk.OnScenarioStart", label="Entry Unk.OnScenarioStart", span=""];
n26 [cluster="HangFire.Tests.StateMachineFeature.ScenarioCleanup()", label="Entry HangFire.Tests.StateMachineFeature.ScenarioCleanup()", span="66-66"];
n27 [cluster="HangFire.Tests.StateMachineFeature.ScenarioCleanup()", label="testRunner.CollectScenarioErrors()", span="68-68"];
n28 [cluster="HangFire.Tests.StateMachineFeature.ScenarioCleanup()", label="Exit HangFire.Tests.StateMachineFeature.ScenarioCleanup()", span="66-66"];
n29 [cluster="Unk.CollectScenarioErrors", label="Entry Unk.CollectScenarioErrors", span=""];
n30 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="Entry HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", span="75-75"];
n31 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state of the job should be changed'', ((string[])(null)))", span="77-77"];
n32 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
n39 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
n33 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
n34 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83"];
n40 [cluster="Unk.Given", label="Entry Unk.Given", span=""];
n35 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
n41 [cluster="Unk.And", label="Entry Unk.And", span=""];
n36 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="testRunner.Then(''the job state should be changed to \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87"];
n42 [cluster="Unk.When", label="Entry Unk.When", span=""];
n37 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="this.ScenarioCleanup()", span="89-89"];
n43 [cluster="Unk.Then", label="Entry Unk.Then", span=""];
n38 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", label="Exit HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", span="75-75"];
n44 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="Entry HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", span="96-96"];
n45 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The new state should be applied'', ((string[])(null)))", span="98-98"];
n46 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="this.ScenarioSetup(scenarioInfo)", span="100-100"];
n47 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102"];
n48 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104"];
n49 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106"];
n50 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="testRunner.Then(''the \'Test\' state should be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108"];
n51 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="this.ScenarioCleanup()", span="110-110"];
n52 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", label="Exit HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", span="96-96"];
n53 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="Entry HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", span="117-117"];
n54 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''An old state should be unapplied'', ((string[])(null)))", span="119-119"];
n55 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="this.ScenarioSetup(scenarioInfo)", span="121-121"];
n56 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="123-123"];
n57 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="testRunner.And(''a job in the \'Old\' state with registered descriptor'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="125-125"];
n58 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="127-127"];
n59 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="testRunner.Then(''the old state should be unapplied'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="129-129"];
n60 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="this.ScenarioCleanup()", span="131-131"];
n61 [cluster="HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", label="Exit HangFire.Tests.StateMachineFeature.AnOldStateShouldBeUnapplied()", span="117-117"];
n62 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="Entry HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", span="138-138"];
n63 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state entry should contain the state name'', ((string[])(null)))", span="140-140"];
n64 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="this.ScenarioSetup(scenarioInfo)", span="142-142"];
n65 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="144-144"];
n66 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="146-146"];
n67 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="148-148"];
n68 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="150-152"];
n69 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="table1.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''Test''})", span="153-155"];
n73 [cluster="TechTalk.SpecFlow.Table.cstr", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
n70 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="testRunner.Then(''the job\'s state entry should contain the following items:'', ((string)(null)), table1, ''Then '')", span="157-157"];
n74 [cluster="Unk.AddRow", label="Entry Unk.AddRow", span=""];
n71 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="this.ScenarioCleanup()", span="159-159"];
n72 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", label="Exit HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", span="138-138"];
n75 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="Entry HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", span="166-166"];
n76 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The job history should be appended'', ((string[])(null)))", span="168-168"];
n77 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="this.ScenarioSetup(scenarioInfo)", span="170-170"];
n78 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="172-172"];
n79 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="174-174"];
n80 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="176-176"];
n81 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="178-180"];
n82 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="table2.AddRow(new string[] {\r\n                        ''CreatedAt'',\r\n                        ''<UtcNow timestamp>''})", span="181-183"];
n83 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="table2.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''Test''})", span="184-186"];
n84 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="testRunner.Then(''the last history entry should contain the following items:'', ((string)(null)), table2, ''Then '')", span="188-188"];
n85 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="this.ScenarioCleanup()", span="190-190"];
n86 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", label="Exit HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", span="166-166"];
n87 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="Entry HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", span="197-197"];
n88 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the job history record and the state entry should contain the state properties'', ((string[])(null)))", span="199-199"];
n89 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="this.ScenarioSetup(scenarioInfo)", span="201-201"];
n90 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="203-205"];
n91 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="table3.AddRow(new string[] {\r\n                        ''Server'',\r\n                        ''TestServer''})", span="206-208"];
n92 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="table3.AddRow(new string[] {\r\n                        ''Worker'',\r\n                        ''#3''})", span="209-211"];
n93 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="testRunner.Given(''a \'Test\' state with the following properties:'', ((string)(null)), table3, ''Given '')", span="213-213"];
n94 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="215-215"];
n95 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="217-217"];
n96 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="testRunner.Then(''the last history entry should contain all of the above properties'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="219-219"];
n97 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="testRunner.And(''the state entry should contain all of the above properties'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="221-221"];
n98 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="this.ScenarioCleanup()", span="223-223"];
n99 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", label="Exit HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", span="197-197"];
n100 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="Entry HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", span="230-230"];
n101 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the state should be changed to the Failed state when it could not find its type'', ((string[])(null)))", span="232-232"];
n102 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="this.ScenarioSetup(scenarioInfo)", span="234-234"];
n103 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="testRunner.Given(''a job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="236-236"];
n104 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="238-238"];
n105 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="240-240"];
n106 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="testRunner.Then(''the job should be moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="242-242"];
n107 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="this.ScenarioCleanup()", span="244-244"];
n108 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", label="Exit HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", span="230-230"];
n109 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="Entry HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", span="252-252"];
n110 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the state should not be changed if allowed current states array does not contain '' +\r\n                    ''the current state'', ((string[])(null)))", span="254-255"];
n111 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="this.ScenarioSetup(scenarioInfo)", span="257-257"];
n112 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="259-259"];
n113 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.And(''a job in the \'Old\' state with registered descriptor'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="261-261"];
n114 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.When(''I change the state of the job to the \'Test\' allowing only transition from the \'En'' +\r\n                    ''queued\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="263-264"];
n115 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.Then(''the job should be in the Old state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="266-266"];
n116 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.And(''the old state should not be unapplied'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="268-268"];
n117 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="testRunner.And(''the \'Test\' state should not be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="270-270"];
n118 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="this.ScenarioCleanup()", span="272-272"];
n119 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", label="Exit HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", span="252-252"];
n120 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="Entry HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="279-279"];
n121 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State changing filters should be executed in the order they were defined'', ((string[])(null)))", span="281-281"];
n122 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="this.ScenarioSetup(scenarioInfo)", span="283-283"];
n123 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="285-285"];
n124 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="287-287"];
n125 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a state changing filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="289-289"];
n126 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a state changing filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="291-291"];
n127 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="293-293"];
n128 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="295-296"];
n129 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table4.AddRow(new string[] {\r\n                        ''first''})", span="297-298"];
n130 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table4.AddRow(new string[] {\r\n                        ''second''})", span="299-300"];
n131 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.Then(''changing filters should be executed in the following order:'', ((string)(null)), table4, ''Then '')", span="302-302"];
n132 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="this.ScenarioCleanup()", span="304-304"];
n133 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="Exit HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="279-279"];
n134 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="Entry HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", span="311-311"];
n135 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state changing filters should be able to modify the state'', ((string[])(null)))", span="313-313"];
n136 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="this.ScenarioSetup(scenarioInfo)", span="315-315"];
n137 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="317-317"];
n138 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="319-319"];
n139 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.And(''a state changing filter \'first\' that changes the state to the \'AnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="321-321"];
n140 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="323-323"];
n141 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.Then(''the job state should be changed to \'AnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="325-325"];
n142 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.And(''the \'Test\' state should not be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="327-327"];
n143 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.And(''the \'AnotherTest\' state should be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="329-329"];
n144 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="331-333"];
n145 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="table5.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''AnotherTest''})", span="334-336"];
n146 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="testRunner.And(''the job\'s state entry should contain the following items:'', ((string)(null)), table5, ''And '')", span="338-338"];
n147 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="this.ScenarioCleanup()", span="340-340"];
n148 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", label="Exit HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", span="311-311"];
n149 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="Entry HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", span="347-347"];
n150 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The job history should contain every changed state'', ((string[])(null)))", span="349-349"];
n151 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="this.ScenarioSetup(scenarioInfo)", span="351-351"];
n152 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="353-353"];
n153 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="355-355"];
n154 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.And(''a state changing filter \'first\' that changes the state to the \'AnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="357-357"];
n155 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.And(''a state changing filter \'second\' that changes the state to the \'YetAnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="359-359"];
n156 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="361-361"];
n157 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''State''})", span="363-364"];
n158 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="table6.AddRow(new string[] {\r\n                        ''YetAnotherTest''})", span="365-366"];
n159 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="table6.AddRow(new string[] {\r\n                        ''AnotherTest''})", span="367-368"];
n160 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="table6.AddRow(new string[] {\r\n                        ''Test''})", span="369-370"];
n161 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="testRunner.Then(''the history for the following states should be added:'', ((string)(null)), table6, ''Then '')", span="372-372"];
n162 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="this.ScenarioCleanup()", span="374-374"];
n163 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", label="Exit HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", span="347-347"];
n164 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="Entry HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", span="381-381"];
n165 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state of the unexisting job should not be changed'', ((string[])(null)))", span="383-383"];
n166 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="this.ScenarioSetup(scenarioInfo)", span="385-385"];
n167 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="387-387"];
n168 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="testRunner.When(''I change the state of the \'unexisting\' job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="389-389"];
n169 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="testRunner.Then(''the \'Test\' state should not be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="391-391"];
n170 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="this.ScenarioCleanup()", span="393-393"];
n171 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", label="Exit HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", span="381-381"];
n172 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="Entry HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", span="400-400"];
n173 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Changing filters are should not be executed for unexisting job'', ((string[])(null)))", span="402-402"];
n174 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="this.ScenarioSetup(scenarioInfo)", span="404-404"];
n175 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="406-406"];
n176 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="testRunner.And(''a state changing filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="408-408"];
n177 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="testRunner.When(''I change the state of the \'unexisting\' job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="410-410"];
n178 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="testRunner.Then(''changing filters should not be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="412-412"];
n179 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="this.ScenarioCleanup()", span="414-414"];
n180 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", label="Exit HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", span="400-400"];
n181 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="Entry HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", span="422-422"];
n182 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Changing filters should not be executed if the transition is not allowed for the '' +\r\n                    ''current state'', ((string[])(null)))", span="424-425"];
n183 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="this.ScenarioSetup(scenarioInfo)", span="427-427"];
n184 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="429-429"];
n185 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="testRunner.And(''a job in the \'Old\' state with registered descriptor'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="431-431"];
n186 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="testRunner.And(''a state changing filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="433-433"];
n187 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="testRunner.When(''I change the state of the job to the \'Test\' allowing only transition from the \'En'' +\r\n                    ''queued\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="435-436"];
n188 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="testRunner.Then(''changing filters should not be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="438-438"];
n189 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="this.ScenarioCleanup()", span="440-440"];
n190 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", label="Exit HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", span="422-422"];
n191 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="Entry HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="447-447"];
n192 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State applied filters should be executed in the order they were defined'', ((string[])(null)))", span="449-449"];
n193 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="this.ScenarioSetup(scenarioInfo)", span="451-451"];
n194 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="453-453"];
n195 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a job in the \'Old\' state with registered descriptor'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="455-455"];
n196 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a state applied filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="457-457"];
n197 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.And(''a state applied filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="459-459"];
n198 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="461-461"];
n199 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="463-464"];
n200 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table7.AddRow(new string[] {\r\n                        ''first::OnStateUnapplied''})", span="465-466"];
n201 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table7.AddRow(new string[] {\r\n                        ''second::OnStateUnapplied''})", span="467-468"];
n202 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table7.AddRow(new string[] {\r\n                        ''first::OnStateApplied''})", span="469-470"];
n203 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="table7.AddRow(new string[] {\r\n                        ''second::OnStateApplied''})", span="471-472"];
n204 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="testRunner.Then(''state applied filter methods should be executed in the following order:'', ((string)(null)), table7, ''Then '')", span="474-474"];
n205 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="this.ScenarioCleanup()", span="476-476"];
n206 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", label="Exit HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="447-447"];
n207 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="Entry HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", span="483-483"];
n208 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''OnStateUnapplied method should not be called when the state is empty'', ((string[])(null)))", span="485-485"];
n209 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="this.ScenarioSetup(scenarioInfo)", span="487-487"];
n210 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="489-489"];
n211 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="testRunner.And(''a job with empty state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="491-491"];
n212 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="testRunner.And(''a state applied filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="493-493"];
n213 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="495-495"];
n214 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="497-498"];
n215 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="table8.AddRow(new string[] {\r\n                        ''first::OnStateApplied''})", span="499-500"];
n216 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="testRunner.Then(''state applied filter methods should be executed in the following order:'', ((string)(null)), table8, ''Then '')", span="502-502"];
n217 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="this.ScenarioCleanup()", span="504-504"];
n218 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", label="Exit HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", span="483-483"];
m2_3 [cluster="Hangfire.Sample.Highlighter.Migrations.Configuration.Seed(Hangfire.Sample.Highlighter.Models.HighlighterDbContext)", file="Configuration.cs", label="Entry Hangfire.Sample.Highlighter.Migrations.Configuration.Seed(Hangfire.Sample.Highlighter.Models.HighlighterDbContext)", span="14-14"];
m2_4 [cluster="Hangfire.Sample.Highlighter.Migrations.Configuration.Seed(Hangfire.Sample.Highlighter.Models.HighlighterDbContext)", file="Configuration.cs", label="Exit Hangfire.Sample.Highlighter.Migrations.Configuration.Seed(Hangfire.Sample.Highlighter.Models.HighlighterDbContext)", span="14-14"];
m2_0 [cluster="Hangfire.Sample.Highlighter.Migrations.Configuration.Configuration()", file="Configuration.cs", label="Entry Hangfire.Sample.Highlighter.Migrations.Configuration.Configuration()", span="9-9"];
m2_1 [cluster="Hangfire.Sample.Highlighter.Migrations.Configuration.Configuration()", color=red, community=0, file="Configuration.cs", label="0: AutomaticMigrationsEnabled = false", span="11-11"];
m2_2 [cluster="Hangfire.Sample.Highlighter.Migrations.Configuration.Configuration()", file="Configuration.cs", label="Exit Hangfire.Sample.Highlighter.Migrations.Configuration.Configuration()", span="9-9"];
m3_6 [cluster="Unk.RegisterAllAreas", file="Global.asax.cs", label="Entry Unk.RegisterAllAreas", span=""];
m3_15 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_EndRequest()", file="Global.asax.cs", label="Entry Hangfire.Sample.Highlighter.MvcApplication.Application_EndRequest()", span="26-26"];
m3_16 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_EndRequest()", color=red, community=0, file="Global.asax.cs", label="0: MiniProfiler.Stop()", span="28-28"];
m3_17 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_EndRequest()", file="Global.asax.cs", label="Exit Hangfire.Sample.Highlighter.MvcApplication.Application_EndRequest()", span="26-26"];
m3_10 [cluster="Unk.SetInitializer", file="Global.asax.cs", label="Entry Unk.SetInitializer", span=""];
m3_11 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_BeginRequest()", file="Global.asax.cs", label="Entry Hangfire.Sample.Highlighter.MvcApplication.Application_BeginRequest()", span="21-21"];
m3_12 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_BeginRequest()", color=red, community=0, file="Global.asax.cs", label="0: MiniProfiler.Start()", span="23-23"];
m3_13 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_BeginRequest()", file="Global.asax.cs", label="Exit Hangfire.Sample.Highlighter.MvcApplication.Application_BeginRequest()", span="21-21"];
m3_9 [cluster="MigrateDatabaseToLatestVersion<HighlighterDbContext, Configuration>.cstr", file="Global.asax.cs", label="Entry MigrateDatabaseToLatestVersion<HighlighterDbContext, Configuration>.cstr", span=""];
m3_18 [cluster="Unk.Stop", file="Global.asax.cs", label="Entry Unk.Stop", span=""];
m3_0 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", file="Global.asax.cs", label="Entry Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", span="12-12"];
m3_1 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", color=red, community=0, file="Global.asax.cs", label="0: AreaRegistration.RegisterAllAreas()", span="14-14"];
m3_2 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", color=red, community=0, file="Global.asax.cs", label="0: RouteConfig.RegisterRoutes(RouteTable.Routes)", span="15-15"];
m3_3 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", color=red, community=0, file="Global.asax.cs", label="0: MiniProfilerEF6.Initialize()", span="17-17"];
m3_4 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", color=red, community=0, file="Global.asax.cs", label="0: Database.SetInitializer(new MigrateDatabaseToLatestVersion<HighlighterDbContext, Configuration>())", span="18-18"];
m3_5 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", file="Global.asax.cs", label="Exit Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", span="12-12"];
m3_7 [cluster="Unk.RegisterRoutes", file="Global.asax.cs", label="Entry Unk.RegisterRoutes", span=""];
m3_8 [cluster="Unk.Initialize", file="Global.asax.cs", label="Entry Unk.Initialize", span=""];
m3_14 [cluster="Unk.Start", file="Global.asax.cs", label="Entry Unk.Start", span=""];
m4_0 [cluster="Hangfire.Sample.Highlighter.Models.HighlighterDbContext.HighlighterDbContext()", file="HighlighterDbContext.cs", label="Entry Hangfire.Sample.Highlighter.Models.HighlighterDbContext.HighlighterDbContext()", span="7-7"];
m4_1 [cluster="Hangfire.Sample.Highlighter.Models.HighlighterDbContext.HighlighterDbContext()", file="HighlighterDbContext.cs", label="Exit Hangfire.Sample.Highlighter.Models.HighlighterDbContext.HighlighterDbContext()", span="7-7"];
m4_5 [cluster="Unk.>", file="HighlighterDbContext.cs", label="Entry Unk.>", span=""];
m4_2 [cluster="Hangfire.Sample.Highlighter.Models.HighlighterDbContext.OnModelCreating(DbModelBuilder)", file="HighlighterDbContext.cs", label="Entry Hangfire.Sample.Highlighter.Models.HighlighterDbContext.OnModelCreating(DbModelBuilder)", span="14-14"];
m4_3 [cluster="Hangfire.Sample.Highlighter.Models.HighlighterDbContext.OnModelCreating(DbModelBuilder)", color=red, community=0, file="HighlighterDbContext.cs", label="0: modelBuilder.Conventions.Remove<PluralizingTableNameConvention>()", span="16-16"];
m4_4 [cluster="Hangfire.Sample.Highlighter.Models.HighlighterDbContext.OnModelCreating(DbModelBuilder)", file="HighlighterDbContext.cs", label="Exit Hangfire.Sample.Highlighter.Models.HighlighterDbContext.OnModelCreating(DbModelBuilder)", span="14-14"];
m6_10 [cluster="Unk.GetValue", file="MultipleButtonAttribute.cs", label="Entry Unk.GetValue", span=""];
m6_9 [cluster="string.Format(string, object, object)", file="MultipleButtonAttribute.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m6_0 [cluster="Hangfire.Sample.Highlighter.MultipleButtonAttribute.IsValidName(ControllerContext, string, System.Reflection.MethodInfo)", file="MultipleButtonAttribute.cs", label="Entry Hangfire.Sample.Highlighter.MultipleButtonAttribute.IsValidName(ControllerContext, string, System.Reflection.MethodInfo)", span="17-17"];
m6_1 [cluster="Hangfire.Sample.Highlighter.MultipleButtonAttribute.IsValidName(ControllerContext, string, System.Reflection.MethodInfo)", color=red, community=0, file="MultipleButtonAttribute.cs", label="0: var isValidName = false", span="19-19"];
m6_3 [cluster="Hangfire.Sample.Highlighter.MultipleButtonAttribute.IsValidName(ControllerContext, string, System.Reflection.MethodInfo)", color=red, community=0, file="MultipleButtonAttribute.cs", label="0: var value = controllerContext.Controller.ValueProvider.GetValue(keyValue)", span="21-21"];
m6_5 [cluster="Hangfire.Sample.Highlighter.MultipleButtonAttribute.IsValidName(ControllerContext, string, System.Reflection.MethodInfo)", color=red, community=0, file="MultipleButtonAttribute.cs", label="0: controllerContext.Controller.ControllerContext.RouteData.Values[Name] = Argument", span="25-25"];
m6_2 [cluster="Hangfire.Sample.Highlighter.MultipleButtonAttribute.IsValidName(ControllerContext, string, System.Reflection.MethodInfo)", color=red, community=0, file="MultipleButtonAttribute.cs", label="0: var keyValue = string.Format(''{0}:{1}'', Name, Argument)", span="20-20"];
m6_7 [cluster="Hangfire.Sample.Highlighter.MultipleButtonAttribute.IsValidName(ControllerContext, string, System.Reflection.MethodInfo)", color=red, community=0, file="MultipleButtonAttribute.cs", label="0: return isValidName;", span="29-29"];
m6_4 [cluster="Hangfire.Sample.Highlighter.MultipleButtonAttribute.IsValidName(ControllerContext, string, System.Reflection.MethodInfo)", color=red, community=0, file="MultipleButtonAttribute.cs", label="0: value != null", span="23-23"];
m6_6 [cluster="Hangfire.Sample.Highlighter.MultipleButtonAttribute.IsValidName(ControllerContext, string, System.Reflection.MethodInfo)", color=red, community=0, file="MultipleButtonAttribute.cs", label="0: isValidName = true", span="26-26"];
m6_8 [cluster="Hangfire.Sample.Highlighter.MultipleButtonAttribute.IsValidName(ControllerContext, string, System.Reflection.MethodInfo)", file="MultipleButtonAttribute.cs", label="Exit Hangfire.Sample.Highlighter.MultipleButtonAttribute.IsValidName(ControllerContext, string, System.Reflection.MethodInfo)", span="17-17"];
m6_11 [file="MultipleButtonAttribute.cs", label="Hangfire.Sample.Highlighter.MultipleButtonAttribute", span=""];
m7_5 [cluster="Unk.MapRoute", file="RouteConfig.cs", label="Entry Unk.MapRoute", span=""];
m7_4 [cluster="Unk.IgnoreRoute", file="RouteConfig.cs", label="Entry Unk.IgnoreRoute", span=""];
m7_0 [cluster="Hangfire.Sample.Highlighter.RouteConfig.RegisterRoutes(RouteCollection)", file="RouteConfig.cs", label="Entry Hangfire.Sample.Highlighter.RouteConfig.RegisterRoutes(RouteCollection)", span="7-7"];
m7_1 [cluster="Hangfire.Sample.Highlighter.RouteConfig.RegisterRoutes(RouteCollection)", color=red, community=0, file="RouteConfig.cs", label="0: routes.IgnoreRoute(''{resource}.axd/{*pathInfo}'')", span="9-9"];
m7_2 [cluster="Hangfire.Sample.Highlighter.RouteConfig.RegisterRoutes(RouteCollection)", color=red, community=1, file="RouteConfig.cs", label="0: routes.MapRoute(\r\n                name: ''Default'',\r\n                url: ''{action}/{id}'',\r\n                defaults: new { controller = ''Home'', action = ''Index'', id = UrlParameter.Optional }\r\n            )", span="11-15"];
m7_3 [cluster="Hangfire.Sample.Highlighter.RouteConfig.RegisterRoutes(RouteCollection)", file="RouteConfig.cs", label="Exit Hangfire.Sample.Highlighter.RouteConfig.RegisterRoutes(RouteCollection)", span="7-7"];
m9_0 [cluster="Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", file="SnippetHub.cs", label="Entry Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", span="33-33"];
m9_1 [cluster="Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", file="SnippetHub.cs", label="Exit Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", span="33-33"];
m10_13 [cluster="Hangfire.IBootstrapperConfiguration.UseServer()", file="Startup.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseServer()", span="26-26"];
m10_11 [cluster="Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", file="Startup.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseAuthorizationFilters(params Hangfire.Dashboard.IAuthorizationFilter[])", span="34-34"];
m10_12 [cluster="Hangfire.IBootstrapperConfiguration.UseSqlServerStorage(string)", file="Startup.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseSqlServerStorage(string)", span="27-27"];
m10_6 [cluster="lambda expression", file="Startup.cs", label="Entry lambda expression", span="15-20"];
m10_7 [cluster="lambda expression", color=red, community=0, file="Startup.cs", label="0: config.UseAuthorizationFilters()", span="17-17"];
m10_8 [cluster="lambda expression", color=red, community=0, file="Startup.cs", label="0: config.UseSqlServerStorage(''HighlighterDb'')", span="18-18"];
m10_9 [cluster="lambda expression", color=red, community=0, file="Startup.cs", label="0: config.UseServer()", span="19-19"];
m10_10 [cluster="lambda expression", file="Startup.cs", label="Exit lambda expression", span="15-20"];
m10_0 [cluster="Hangfire.Sample.Highlighter.Startup.Configuration(IAppBuilder)", file="Startup.cs", label="Entry Hangfire.Sample.Highlighter.Startup.Configuration(IAppBuilder)", span="11-11"];
m10_1 [cluster="Hangfire.Sample.Highlighter.Startup.Configuration(IAppBuilder)", color=red, community=0, file="Startup.cs", label="0: app.MapSignalR()", span="13-13"];
m10_2 [cluster="Hangfire.Sample.Highlighter.Startup.Configuration(IAppBuilder)", color=red, community=1, file="Startup.cs", label="0: app.UseHangfire(config =>\r\n            {\r\n                config.UseAuthorizationFilters();\r\n                config.UseSqlServerStorage(''HighlighterDb'');\r\n                config.UseServer();\r\n            })", span="15-20"];
m10_3 [cluster="Hangfire.Sample.Highlighter.Startup.Configuration(IAppBuilder)", file="Startup.cs", label="Exit Hangfire.Sample.Highlighter.Startup.Configuration(IAppBuilder)", span="11-11"];
m10_5 [cluster="IAppBuilder.UseHangfire(System.Action<Hangfire.IBootstrapperConfiguration>)", file="Startup.cs", label="Entry IAppBuilder.UseHangfire(System.Action<Hangfire.IBootstrapperConfiguration>)", span="33-33"];
m10_4 [cluster="Unk.MapSignalR", file="Startup.cs", label="Entry Unk.MapSignalR", span=""];
n219 -> n32  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n37  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n46  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n51  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n55  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n60  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n64  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n71  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n77  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n85  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n89  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n98  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n102  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n107  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n111  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n118  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n122  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n132  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n136  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n147  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n151  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n162  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n166  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n170  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n174  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n179  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n183  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n189  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n193  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n205  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n209  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n219 -> n217  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n5  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n6  [key=2, style=dotted];
n2 -> n7  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n3 -> n8  [key=2, style=dotted];
n4 -> n0  [color=blue, key=0, style=bold];
n9 -> n10  [key=0, style=solid];
n10 -> n11  [key=0, style=solid];
n10 -> n13  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n12 -> n9  [color=blue, key=0, style=bold];
n14 -> n15  [key=0, style=solid];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n0  [key=2, style=dotted];
n17 -> n14  [color=blue, key=0, style=bold];
n18 -> n19  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n21  [key=2, style=dotted];
n20 -> n18  [color=blue, key=0, style=bold];
n22 -> n23  [key=0, style=solid];
n23 -> n24  [key=0, style=solid];
n23 -> n25  [key=2, style=dotted];
n24 -> n22  [color=blue, key=0, style=bold];
n26 -> n27  [key=0, style=solid];
n27 -> n28  [key=0, style=solid];
n27 -> n29  [key=2, style=dotted];
n28 -> n26  [color=blue, key=0, style=bold];
n30 -> n31  [key=0, style=solid];
n31 -> n32  [key=0, style=solid];
n31 -> n39  [key=2, style=dotted];
n32 -> n33  [key=0, style=solid];
n32 -> n22  [key=2, style=dotted];
n33 -> n34  [key=0, style=solid];
n33 -> n40  [key=2, style=dotted];
n34 -> n35  [key=0, style=solid];
n34 -> n41  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n42  [key=2, style=dotted];
n36 -> n37  [key=0, style=solid];
n36 -> n43  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n26  [key=2, style=dotted];
n38 -> n30  [color=blue, key=0, style=bold];
n44 -> n45  [key=0, style=solid];
n45 -> n46  [key=0, style=solid];
n45 -> n39  [key=2, style=dotted];
n46 -> n47  [key=0, style=solid];
n46 -> n22  [key=2, style=dotted];
n47 -> n48  [key=0, style=solid];
n47 -> n40  [key=2, style=dotted];
n48 -> n49  [key=0, style=solid];
n48 -> n41  [key=2, style=dotted];
n49 -> n50  [key=0, style=solid];
n49 -> n42  [key=2, style=dotted];
n50 -> n51  [key=0, style=solid];
n50 -> n43  [key=2, style=dotted];
n51 -> n52  [key=0, style=solid];
n51 -> n26  [key=2, style=dotted];
n52 -> n44  [color=blue, key=0, style=bold];
n53 -> n54  [key=0, style=solid];
n54 -> n55  [key=0, style=solid];
n54 -> n39  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n55 -> n22  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n56 -> n40  [key=2, style=dotted];
n57 -> n58  [key=0, style=solid];
n57 -> n41  [key=2, style=dotted];
n58 -> n59  [key=0, style=solid];
n58 -> n42  [key=2, style=dotted];
n59 -> n60  [key=0, style=solid];
n59 -> n43  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n60 -> n26  [key=2, style=dotted];
n61 -> n53  [color=blue, key=0, style=bold];
n62 -> n63  [key=0, style=solid];
n63 -> n64  [key=0, style=solid];
n63 -> n39  [key=2, style=dotted];
n64 -> n65  [key=0, style=solid];
n64 -> n22  [key=2, style=dotted];
n65 -> n66  [key=0, style=solid];
n65 -> n40  [key=2, style=dotted];
n66 -> n67  [key=0, style=solid];
n66 -> n41  [key=2, style=dotted];
n67 -> n68  [key=0, style=solid];
n67 -> n42  [key=2, style=dotted];
n68 -> n69  [key=0, style=solid];
n68 -> n73  [key=2, style=dotted];
n68 -> n70  [color=darkseagreen4, key=1, label=table1, style=dashed];
n69 -> n70  [key=0, style=solid];
n69 -> n74  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n70 -> n43  [key=2, style=dotted];
n71 -> n72  [key=0, style=solid];
n71 -> n26  [key=2, style=dotted];
n72 -> n62  [color=blue, key=0, style=bold];
n75 -> n76  [key=0, style=solid];
n76 -> n77  [key=0, style=solid];
n76 -> n39  [key=2, style=dotted];
n77 -> n78  [key=0, style=solid];
n77 -> n22  [key=2, style=dotted];
n78 -> n79  [key=0, style=solid];
n78 -> n40  [key=2, style=dotted];
n79 -> n80  [key=0, style=solid];
n79 -> n41  [key=2, style=dotted];
n80 -> n81  [key=0, style=solid];
n80 -> n42  [key=2, style=dotted];
n81 -> n82  [key=0, style=solid];
n81 -> n73  [key=2, style=dotted];
n81 -> n83  [color=darkseagreen4, key=1, label=table2, style=dashed];
n81 -> n84  [color=darkseagreen4, key=1, label=table2, style=dashed];
n82 -> n83  [key=0, style=solid];
n82 -> n74  [key=2, style=dotted];
n83 -> n84  [key=0, style=solid];
n83 -> n74  [key=2, style=dotted];
n84 -> n85  [key=0, style=solid];
n84 -> n43  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n85 -> n26  [key=2, style=dotted];
n86 -> n75  [color=blue, key=0, style=bold];
n87 -> n88  [key=0, style=solid];
n88 -> n89  [key=0, style=solid];
n88 -> n39  [key=2, style=dotted];
n89 -> n90  [key=0, style=solid];
n89 -> n22  [key=2, style=dotted];
n90 -> n91  [key=0, style=solid];
n90 -> n73  [key=2, style=dotted];
n90 -> n92  [color=darkseagreen4, key=1, label=table3, style=dashed];
n90 -> n93  [color=darkseagreen4, key=1, label=table3, style=dashed];
n91 -> n92  [key=0, style=solid];
n91 -> n74  [key=2, style=dotted];
n92 -> n93  [key=0, style=solid];
n92 -> n74  [key=2, style=dotted];
n93 -> n94  [key=0, style=solid];
n93 -> n40  [key=2, style=dotted];
n94 -> n95  [key=0, style=solid];
n94 -> n41  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid];
n95 -> n42  [key=2, style=dotted];
n96 -> n97  [key=0, style=solid];
n96 -> n43  [key=2, style=dotted];
n97 -> n98  [key=0, style=solid];
n97 -> n41  [key=2, style=dotted];
n98 -> n99  [key=0, style=solid];
n98 -> n26  [key=2, style=dotted];
n99 -> n87  [color=blue, key=0, style=bold];
n100 -> n101  [key=0, style=solid];
n101 -> n102  [key=0, style=solid];
n101 -> n39  [key=2, style=dotted];
n102 -> n103  [key=0, style=solid];
n102 -> n22  [key=2, style=dotted];
n103 -> n104  [key=0, style=solid];
n103 -> n40  [key=2, style=dotted];
n104 -> n105  [key=0, style=solid];
n104 -> n41  [key=2, style=dotted];
n105 -> n106  [key=0, style=solid];
n105 -> n42  [key=2, style=dotted];
n106 -> n107  [key=0, style=solid];
n106 -> n43  [key=2, style=dotted];
n107 -> n108  [key=0, style=solid];
n107 -> n26  [key=2, style=dotted];
n108 -> n100  [color=blue, key=0, style=bold];
n109 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n110 -> n39  [key=2, style=dotted];
n111 -> n112  [key=0, style=solid];
n111 -> n22  [key=2, style=dotted];
n112 -> n113  [key=0, style=solid];
n112 -> n40  [key=2, style=dotted];
n113 -> n114  [key=0, style=solid];
n113 -> n41  [key=2, style=dotted];
n114 -> n115  [key=0, style=solid];
n114 -> n42  [key=2, style=dotted];
n115 -> n116  [key=0, style=solid];
n115 -> n43  [key=2, style=dotted];
n116 -> n117  [key=0, style=solid];
n116 -> n41  [key=2, style=dotted];
n117 -> n118  [key=0, style=solid];
n117 -> n41  [key=2, style=dotted];
n118 -> n119  [key=0, style=solid];
n118 -> n26  [key=2, style=dotted];
n119 -> n109  [color=blue, key=0, style=bold];
n120 -> n121  [key=0, style=solid];
n121 -> n122  [key=0, style=solid];
n121 -> n39  [key=2, style=dotted];
n122 -> n123  [key=0, style=solid];
n122 -> n22  [key=2, style=dotted];
n123 -> n124  [key=0, style=solid];
n123 -> n40  [key=2, style=dotted];
n124 -> n125  [key=0, style=solid];
n124 -> n41  [key=2, style=dotted];
n125 -> n126  [key=0, style=solid];
n125 -> n41  [key=2, style=dotted];
n126 -> n127  [key=0, style=solid];
n126 -> n41  [key=2, style=dotted];
n127 -> n128  [key=0, style=solid];
n127 -> n42  [key=2, style=dotted];
n128 -> n129  [key=0, style=solid];
n128 -> n73  [key=2, style=dotted];
n128 -> n130  [color=darkseagreen4, key=1, label=table4, style=dashed];
n128 -> n131  [color=darkseagreen4, key=1, label=table4, style=dashed];
n129 -> n130  [key=0, style=solid];
n129 -> n74  [key=2, style=dotted];
n130 -> n131  [key=0, style=solid];
n130 -> n74  [key=2, style=dotted];
n131 -> n132  [key=0, style=solid];
n131 -> n43  [key=2, style=dotted];
n132 -> n133  [key=0, style=solid];
n132 -> n26  [key=2, style=dotted];
n133 -> n120  [color=blue, key=0, style=bold];
n134 -> n135  [key=0, style=solid];
n135 -> n136  [key=0, style=solid];
n135 -> n39  [key=2, style=dotted];
n136 -> n137  [key=0, style=solid];
n136 -> n22  [key=2, style=dotted];
n137 -> n138  [key=0, style=solid];
n137 -> n40  [key=2, style=dotted];
n138 -> n139  [key=0, style=solid];
n138 -> n41  [key=2, style=dotted];
n139 -> n140  [key=0, style=solid];
n139 -> n41  [key=2, style=dotted];
n140 -> n141  [key=0, style=solid];
n140 -> n42  [key=2, style=dotted];
n141 -> n142  [key=0, style=solid];
n141 -> n43  [key=2, style=dotted];
n142 -> n143  [key=0, style=solid];
n142 -> n41  [key=2, style=dotted];
n143 -> n144  [key=0, style=solid];
n143 -> n41  [key=2, style=dotted];
n144 -> n145  [key=0, style=solid];
n144 -> n73  [key=2, style=dotted];
n144 -> n146  [color=darkseagreen4, key=1, label=table5, style=dashed];
n145 -> n146  [key=0, style=solid];
n145 -> n74  [key=2, style=dotted];
n146 -> n147  [key=0, style=solid];
n146 -> n41  [key=2, style=dotted];
n147 -> n148  [key=0, style=solid];
n147 -> n26  [key=2, style=dotted];
n148 -> n134  [color=blue, key=0, style=bold];
n149 -> n150  [key=0, style=solid];
n150 -> n151  [key=0, style=solid];
n150 -> n39  [key=2, style=dotted];
n151 -> n152  [key=0, style=solid];
n151 -> n22  [key=2, style=dotted];
n152 -> n153  [key=0, style=solid];
n152 -> n40  [key=2, style=dotted];
n153 -> n154  [key=0, style=solid];
n153 -> n41  [key=2, style=dotted];
n154 -> n155  [key=0, style=solid];
n154 -> n41  [key=2, style=dotted];
n155 -> n156  [key=0, style=solid];
n155 -> n41  [key=2, style=dotted];
n156 -> n157  [key=0, style=solid];
n156 -> n42  [key=2, style=dotted];
n157 -> n158  [key=0, style=solid];
n157 -> n73  [key=2, style=dotted];
n157 -> n159  [color=darkseagreen4, key=1, label=table6, style=dashed];
n157 -> n160  [color=darkseagreen4, key=1, label=table6, style=dashed];
n157 -> n161  [color=darkseagreen4, key=1, label=table6, style=dashed];
n158 -> n159  [key=0, style=solid];
n158 -> n74  [key=2, style=dotted];
n159 -> n160  [key=0, style=solid];
n159 -> n74  [key=2, style=dotted];
n160 -> n161  [key=0, style=solid];
n160 -> n74  [key=2, style=dotted];
n161 -> n162  [key=0, style=solid];
n161 -> n43  [key=2, style=dotted];
n162 -> n163  [key=0, style=solid];
n162 -> n26  [key=2, style=dotted];
n163 -> n149  [color=blue, key=0, style=bold];
n164 -> n165  [key=0, style=solid];
n165 -> n166  [key=0, style=solid];
n165 -> n39  [key=2, style=dotted];
n166 -> n167  [key=0, style=solid];
n166 -> n22  [key=2, style=dotted];
n167 -> n168  [key=0, style=solid];
n167 -> n40  [key=2, style=dotted];
n168 -> n169  [key=0, style=solid];
n168 -> n42  [key=2, style=dotted];
n169 -> n170  [key=0, style=solid];
n169 -> n43  [key=2, style=dotted];
n170 -> n171  [key=0, style=solid];
n170 -> n26  [key=2, style=dotted];
n171 -> n164  [color=blue, key=0, style=bold];
n172 -> n173  [key=0, style=solid];
n173 -> n174  [key=0, style=solid];
n173 -> n39  [key=2, style=dotted];
n174 -> n175  [key=0, style=solid];
n174 -> n22  [key=2, style=dotted];
n175 -> n176  [key=0, style=solid];
n175 -> n40  [key=2, style=dotted];
n176 -> n177  [key=0, style=solid];
n176 -> n41  [key=2, style=dotted];
n177 -> n178  [key=0, style=solid];
n177 -> n42  [key=2, style=dotted];
n178 -> n179  [key=0, style=solid];
n178 -> n43  [key=2, style=dotted];
n179 -> n180  [key=0, style=solid];
n179 -> n26  [key=2, style=dotted];
n180 -> n172  [color=blue, key=0, style=bold];
n181 -> n182  [key=0, style=solid];
n182 -> n183  [key=0, style=solid];
n182 -> n39  [key=2, style=dotted];
n183 -> n184  [key=0, style=solid];
n183 -> n22  [key=2, style=dotted];
n184 -> n185  [key=0, style=solid];
n184 -> n40  [key=2, style=dotted];
n185 -> n186  [key=0, style=solid];
n185 -> n41  [key=2, style=dotted];
n186 -> n187  [key=0, style=solid];
n186 -> n41  [key=2, style=dotted];
n187 -> n188  [key=0, style=solid];
n187 -> n42  [key=2, style=dotted];
n188 -> n189  [key=0, style=solid];
n188 -> n43  [key=2, style=dotted];
n189 -> n190  [key=0, style=solid];
n189 -> n26  [key=2, style=dotted];
n190 -> n181  [color=blue, key=0, style=bold];
n191 -> n192  [key=0, style=solid];
n192 -> n193  [key=0, style=solid];
n192 -> n39  [key=2, style=dotted];
n193 -> n194  [key=0, style=solid];
n193 -> n22  [key=2, style=dotted];
n194 -> n195  [key=0, style=solid];
n194 -> n40  [key=2, style=dotted];
n195 -> n196  [key=0, style=solid];
n195 -> n41  [key=2, style=dotted];
n196 -> n197  [key=0, style=solid];
n196 -> n41  [key=2, style=dotted];
n197 -> n198  [key=0, style=solid];
n197 -> n41  [key=2, style=dotted];
n198 -> n199  [key=0, style=solid];
n198 -> n42  [key=2, style=dotted];
n199 -> n200  [key=0, style=solid];
n199 -> n73  [key=2, style=dotted];
n199 -> n201  [color=darkseagreen4, key=1, label=table7, style=dashed];
n199 -> n202  [color=darkseagreen4, key=1, label=table7, style=dashed];
n199 -> n203  [color=darkseagreen4, key=1, label=table7, style=dashed];
n199 -> n204  [color=darkseagreen4, key=1, label=table7, style=dashed];
n200 -> n201  [key=0, style=solid];
n200 -> n74  [key=2, style=dotted];
n201 -> n202  [key=0, style=solid];
n201 -> n74  [key=2, style=dotted];
n202 -> n203  [key=0, style=solid];
n202 -> n74  [key=2, style=dotted];
n203 -> n204  [key=0, style=solid];
n203 -> n74  [key=2, style=dotted];
n204 -> n205  [key=0, style=solid];
n204 -> n43  [key=2, style=dotted];
n205 -> n206  [key=0, style=solid];
n205 -> n26  [key=2, style=dotted];
n206 -> n191  [color=blue, key=0, style=bold];
n207 -> n208  [key=0, style=solid];
n208 -> n209  [key=0, style=solid];
n208 -> n39  [key=2, style=dotted];
n209 -> n210  [key=0, style=solid];
n209 -> n22  [key=2, style=dotted];
n210 -> n211  [key=0, style=solid];
n210 -> n40  [key=2, style=dotted];
n211 -> n212  [key=0, style=solid];
n211 -> n41  [key=2, style=dotted];
n212 -> n213  [key=0, style=solid];
n212 -> n41  [key=2, style=dotted];
n213 -> n214  [key=0, style=solid];
n213 -> n42  [key=2, style=dotted];
n214 -> n215  [key=0, style=solid];
n214 -> n73  [key=2, style=dotted];
n214 -> n216  [color=darkseagreen4, key=1, label=table8, style=dashed];
n215 -> n216  [key=0, style=solid];
n215 -> n74  [key=2, style=dotted];
n216 -> n217  [key=0, style=solid];
n216 -> n43  [key=2, style=dotted];
n217 -> n218  [key=0, style=solid];
n217 -> n26  [key=2, style=dotted];
n218 -> n207  [color=blue, key=0, style=bold];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_3  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [color=red, key=0, style=solid];
m2_1 -> m2_2  [color=red, key=0, style=solid];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m3_15 -> m3_16  [color=red, key=0, style=solid];
m3_16 -> m3_17  [color=red, key=0, style=solid];
m3_16 -> m3_18  [color=red, key=2, style=dotted];
m3_17 -> m3_15  [color=blue, key=0, style=bold];
m3_11 -> m3_12  [color=red, key=0, style=solid];
m3_12 -> m3_13  [color=red, key=0, style=solid];
m3_12 -> m3_14  [color=red, key=2, style=dotted];
m3_13 -> m3_11  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [color=red, key=0, style=solid];
m3_1 -> m3_2  [color=red, key=0, style=solid];
m3_1 -> m3_6  [color=red, key=2, style=dotted];
m3_2 -> m3_3  [color=red, key=0, style=solid];
m3_2 -> m3_7  [color=red, key=2, style=dotted];
m3_3 -> m3_4  [color=red, key=0, style=solid];
m3_3 -> m3_8  [color=red, key=2, style=dotted];
m3_4 -> m3_5  [color=red, key=0, style=solid];
m3_4 -> m3_9  [color=red, key=2, style=dotted];
m3_4 -> m3_10  [color=red, key=2, style=dotted];
m3_5 -> m3_0  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_0  [color=blue, key=0, style=bold];
m4_2 -> m4_3  [color=red, key=0, style=solid];
m4_3 -> m4_4  [color=red, key=0, style=solid];
m4_3 -> m4_5  [color=red, key=2, style=dotted];
m4_4 -> m4_2  [color=blue, key=0, style=bold];
m6_0 -> m6_1  [color=red, key=0, style=solid];
m6_0 -> m6_3  [color=red, key=1, label=ControllerContext, style=dashed];
m6_0 -> m6_5  [color=red, key=1, label=ControllerContext, style=dashed];
m6_1 -> m6_2  [color=red, key=0, style=solid];
m6_1 -> m6_7  [color=red, key=1, label=isValidName, style=dashed];
m6_1 -> m6_1  [color=red, key=3, label="Local variable bool isValidName", style=bold];
m6_3 -> m6_4  [color=red, key=0, style=solid];
m6_3 -> m6_10  [color=red, key=2, style=dotted];
m6_5 -> m6_6  [color=red, key=0, style=solid];
m6_2 -> m6_3  [color=red, key=0, style=solid];
m6_2 -> m6_9  [color=red, key=2, style=dotted];
m6_7 -> m6_8  [color=red, key=0, style=solid];
m6_4 -> m6_5  [color=red, key=0, style=solid];
m6_4 -> m6_7  [color=red, key=0, style=solid];
m6_6 -> m6_7  [color=red, key=0, style=solid];
m6_8 -> m6_0  [color=blue, key=0, style=bold];
m6_11 -> m6_2  [color=red, key=1, label="Hangfire.Sample.Highlighter.MultipleButtonAttribute", style=dashed];
m6_11 -> m6_5  [color=red, key=1, label="Hangfire.Sample.Highlighter.MultipleButtonAttribute", style=dashed];
m7_0 -> m7_1  [color=red, key=0, style=solid];
m7_0 -> m7_2  [color=red, key=1, label=RouteCollection, style=dashed];
m7_1 -> m7_2  [color=red, key=0, style=solid];
m7_1 -> m7_4  [color=red, key=2, style=dotted];
m7_2 -> m7_3  [color=red, key=0, style=solid];
m7_2 -> m7_5  [color=red, key=2, style=dotted];
m7_3 -> m7_0  [color=blue, key=0, style=bold];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_0  [color=blue, key=0, style=bold];
m10_6 -> m10_7  [color=red, key=0, style=solid];
m10_6 -> m10_8  [color=red, key=1, label="Hangfire.IBootstrapperConfiguration", style=dashed];
m10_6 -> m10_9  [color=red, key=1, label="Hangfire.IBootstrapperConfiguration", style=dashed];
m10_7 -> m10_8  [color=red, key=0, style=solid];
m10_7 -> m10_11  [color=red, key=2, style=dotted];
m10_8 -> m10_9  [color=red, key=0, style=solid];
m10_8 -> m10_12  [color=red, key=2, style=dotted];
m10_9 -> m10_10  [color=red, key=0, style=solid];
m10_9 -> m10_13  [color=red, key=2, style=dotted];
m10_10 -> m10_6  [color=blue, key=0, style=bold];
m10_0 -> m10_1  [color=red, key=0, style=solid];
m10_0 -> m10_2  [color=red, key=1, label=IAppBuilder, style=dashed];
m10_1 -> m10_2  [color=red, key=0, style=solid];
m10_1 -> m10_4  [color=red, key=2, style=dotted];
m10_2 -> m10_3  [color=red, key=0, style=solid];
m10_2 -> m10_5  [color=red, key=2, style=dotted];
m10_2 -> m10_6  [color=red, key=1, label="lambda expression", style=dashed];
m10_3 -> m10_0  [color=blue, key=0, style=bold];
}
