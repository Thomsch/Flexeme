digraph  {
m0_5 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="BackgroundJobClient.cs", label="storage == null", span="70-70"];
m0_15 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", color=green, community=0, file="BackgroundJobClient.cs", label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:Job:{0}'', jobId), \r\n                _connection);", prediction=0, span="54-56"];
m0_117 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m0_123 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobClient.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data)) as Source (Id, Data) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = null ''\r\n                + @''when not matched then insert (Id, Data) values (Source.Id, Source.Data);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data) })", span="250-256"];
m0_119 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''serverId'');", span="238-238"];
m0_121 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''context'');", span="239-239"];
m0_122 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobClient.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="241-246"];
m0_118 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobClient.cs", label="serverId == null", span="238-238"];
m0_120 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobClient.cs", label="context == null", span="239-239"];
m0_124 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="BackgroundJobClient.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m0_28 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="BackgroundJobClient.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="80-80"];
m0_41 [cluster="Unk.Query", file="BackgroundJobClient.cs", label="Entry Unk.Query", span=""];
m0_95 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m0_100 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobClient.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="210-213"];
m0_97 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''id'');", span="207-207"];
m0_99 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''name'');", span="208-208"];
m0_98 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobClient.cs", label="name == null", span="208-208"];
m0_96 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobClient.cs", label="id == null", span="207-207"];
m0_101 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="BackgroundJobClient.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m0_125 [cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m0_47 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m0_54 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="BackgroundJobClient.cs", label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = DateTime.UtcNow,\r\n                    expireAt = DateTime.UtcNow.Add(expireIn)\r\n                }).Single().ToString()", prediction=1, span="121-129"];
m0_53 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobClient.cs", label="var invocationData = InvocationData.Serialize(job)", span="119-119"];
m0_52 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobClient.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="114-117"];
m0_55 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobClient.cs", label="parameters.Count > 0", span="131-131"];
m0_59 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="BackgroundJobClient.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", prediction=2, span="137-142"];
m0_62 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobClient.cs", label="return jobId;", span="152-152"];
m0_56 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="BackgroundJobClient.cs", label="var parameterArray = new object[parameters.Count]", prediction=0, span="133-133"];
m0_57 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobClient.cs", label="int parameterIndex = 0", span="134-134"];
m0_61 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="BackgroundJobClient.cs", label="_connection.Execute(insertParameterSql, parameterArray)", prediction=0, span="149-149"];
m0_58 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="BackgroundJobClient.cs", label=parameters, prediction=5, span="135-135"];
m0_60 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", color=green, community=0, file="BackgroundJobClient.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", prediction=6, span="145-147"];
m0_49 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''job'');", span="111-111"];
m0_51 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''parameters'');", span="112-112"];
m0_48 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobClient.cs", label="job == null", span="111-111"];
m0_50 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobClient.cs", label="parameters == null", span="112-112"];
m0_63 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="BackgroundJobClient.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m0_31 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="BackgroundJobClient.cs", label="currentQueryIndex == fetchConditions.Length - 1", prediction=7, span="89-89"];
m0_18 [cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''job'');", span="82-82"];
m0_16 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="BackgroundJobClient.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="52-52"];
m0_17 [cluster="HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(string, SqlConnection)", span="44-44"];
m0_19 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="59-59"];
m0_22 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="BackgroundJobClient.cs", label="queues.Length == 0", span="62-62"];
m0_20 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="BackgroundJobClient.cs", label="queues == null", span="61-61"];
m0_21 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''queues'');", span="61-61"];
m0_23 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="BackgroundJobClient.cs", label="throw new ArgumentException(''Queue array must be non-empty.'', ''queues'');", span="62-62"];
m0_24 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="BackgroundJobClient.cs", label="dynamic idAndQueue", span="64-64"];
m0_25 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="BackgroundJobClient.cs", label="string fetchJobSqlTemplate = @''\r\nset transaction isolation level read committed\r\nupdate top (1) HangFire.JobQueue set FetchedAt = GETUTCDATE()\r\noutput INSERTED.JobId, INSERTED.Queue\r\nwhere FetchedAt {0}\r\nand Queue in @queues''", prediction=8, span="66-71"];
m0_27 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="BackgroundJobClient.cs", label="var currentQueryIndex = 0", span="76-76"];
m0_2 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", color=green, community=0, file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''connection'');", prediction=9, span="37-37"];
m0_3 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", color=green, community=0, file="BackgroundJobClient.cs", label="_connection = connection", prediction=10, span="39-39"];
m0_40 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="BackgroundJobClient.cs", label="Exit Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102"];
m0_67 [cluster="Unk.>", file="BackgroundJobClient.cs", label="Entry Unk.>", span=""];
m0_45 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="BackgroundJobClient.cs", label="Entry HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22"];
m0_70 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m0_74 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="162-163"];
m0_72 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''id'');", span="157-157"];
m0_81 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="job = invocationData.Deserialize()", span="176-176"];
m0_77 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="168-168"];
m0_73 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="string sql = \r\n                @''select InvocationData, StateName, Arguments from HangFire.Job where id = @id''", span="159-160"];
m0_75 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="jobData == null", span="165-165"];
m0_78 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="invocationData.Arguments = jobData.Arguments", span="169-169"];
m0_84 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                LoadException = loadException\r\n            };", span="183-188"];
m0_71 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="id == null", span="157-157"];
m0_80 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="JobLoadException loadException = null", span="172-172"];
m0_82 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label=JobLoadException, span="178-178"];
m0_76 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="return null;", span="165-165"];
m0_79 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="Job job = null", span="171-171"];
m0_83 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="loadException = ex", span="180-180"];
m0_85 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="BackgroundJobClient.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m0_10 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''stateChanger'');", span="72-72"];
m0_11 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="BackgroundJobClient.cs", label="_storage = storage", span="74-74"];
m0_12 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="BackgroundJobClient.cs", label="_stateChanger = stateChanger", span="75-75"];
m0_116 [cluster="System.ArgumentException.ArgumentException(string)", file="BackgroundJobClient.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m0_43 [cluster="string.Equals(string, System.StringComparison)", file="BackgroundJobClient.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m0_29 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="BackgroundJobClient.cs", label="idAndQueue = _connection.Query(\r\n                    String.Format(fetchJobSqlTemplate, fetchConditions[currentQueryIndex]),\r\n                    new { queues = queues, timeout = JobInvisibilityTimeOut.Negate().TotalSeconds })\r\n                    .SingleOrDefault()", prediction=11, span="82-85"];
m0_46 [cluster="Unk.ToString", file="BackgroundJobClient.cs", label="Entry Unk.ToString", span=""];
m0_66 [cluster="System.DateTime.Add(System.TimeSpan)", file="BackgroundJobClient.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m0_30 [cluster="Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", color=green, community=0, file="BackgroundJobClient.cs", label="Entry Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", prediction=12, span="31-31"];
m0_35 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="BackgroundJobClient.cs", label="state == null", span="105-105"];
m0_36 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''state'');", span="105-105"];
m0_32 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="BackgroundJobClient.cs", label="Entry Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102"];
m0_34 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''jobId'');", span="104-104"];
m0_33 [cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", color=green, community=0, file="BackgroundJobClient.cs", label="jobId == null", prediction=13, span="104-104"];
m0_0 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", span="35-35"];
m0_1 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", color=green, community=0, file="BackgroundJobClient.cs", label="connection == null", prediction=14, span="37-37"];
m0_4 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="BackgroundJobClient.cs", label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", span="65-65"];
m0_9 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="BackgroundJobClient.cs", label="stateChanger == null", span="72-72"];
m0_136 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m0_139 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="BackgroundJobClient.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="284-286"];
m0_137 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="BackgroundJobClient.cs", label="timeOut.Duration() != timeOut", span="279-279"];
m0_138 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="BackgroundJobClient.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="281-281"];
m0_140 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="BackgroundJobClient.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m0_141 [cluster="System.TimeSpan.Duration()", file="BackgroundJobClient.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m0_6 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''storage'');", span="70-70"];
m0_7 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="BackgroundJobClient.cs", label="factory == null", prediction=0, span="71-71"];
m0_8 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''factory'');", span="71-71"];
m0_102 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m0_107 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="BackgroundJobClient.cs", label="_connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = id, queueName = queue })", span="221-222"];
m0_104 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''id'');", span="218-218"];
m0_106 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''queue'');", span="219-219"];
m0_105 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="BackgroundJobClient.cs", label="queue == null", span="219-219"];
m0_103 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="BackgroundJobClient.cs", label="id == null", span="218-218"];
m0_108 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="BackgroundJobClient.cs", label="Exit HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m0_88 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m0_93 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobClient.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="196-202"];
m0_90 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''id'');", span="193-193"];
m0_92 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''name'');", span="194-194"];
m0_91 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobClient.cs", label="name == null", span="194-194"];
m0_89 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobClient.cs", label="id == null", span="193-193"];
m0_94 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="BackgroundJobClient.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m0_109 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m0_114 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobClient.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="230-233"];
m0_111 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''key'');", span="227-227"];
m0_112 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobClient.cs", label="toScore < fromScore", span="228-228"];
m0_110 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobClient.cs", label="key == null", span="227-227"];
m0_113 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobClient.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="228-228"];
m0_115 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="BackgroundJobClient.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m0_13 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="BackgroundJobClient.cs", label="_factory = factory", span="76-76"];
m0_65 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="BackgroundJobClient.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m0_14 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", file="BackgroundJobClient.cs", label="Exit Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.Client.IBackgroundJobFactory, Hangfire.States.IBackgroundJobStateChanger)", span="65-65"];
m0_68 [cluster="Unk.Single", file="BackgroundJobClient.cs", label="Entry Unk.Single", span=""];
m0_44 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="BackgroundJobClient.cs", label="Hangfire.BackgroundJobClient", span=""];
m0_126 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m0_129 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="BackgroundJobClient.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="263-265"];
m0_128 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''serverId'');", span="261-261"];
m0_127 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="BackgroundJobClient.cs", label="serverId == null", span="261-261"];
m0_130 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="BackgroundJobClient.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m0_69 [cluster="Unk.Execute", file="BackgroundJobClient.cs", label="Entry Unk.Execute", span=""];
m0_86 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="BackgroundJobClient.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m0_87 [cluster="HangFire.Storage.JobData.JobData()", file="BackgroundJobClient.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m0_42 [cluster="Unk.SingleOrDefault", file="BackgroundJobClient.cs", label="Entry Unk.SingleOrDefault", span=""];
m0_131 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="BackgroundJobClient.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m0_134 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="BackgroundJobClient.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="272-274"];
m0_133 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="BackgroundJobClient.cs", label="throw new ArgumentNullException(''serverId'');", span="270-270"];
m0_132 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="BackgroundJobClient.cs", label="serverId == null", span="270-270"];
m0_135 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="BackgroundJobClient.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m0_64 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="BackgroundJobClient.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m0_142 [file="BackgroundJobClient.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m3_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BackgroundJobClientFacts.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_0 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="BackgroundJobClientFacts.cs", label="Entry Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", span="24-24"];
m3_1 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="BackgroundJobClientFacts.cs", label="storage == null", span="26-26"];
m3_2 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="BackgroundJobClientFacts.cs", label="throw new ArgumentNullException(nameof(storage));", span="26-26"];
m3_3 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="BackgroundJobClientFacts.cs", label="options == null", span="27-27"];
m3_4 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="BackgroundJobClientFacts.cs", label="throw new ArgumentNullException(nameof(options));", span="27-27"];
m3_5 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="BackgroundJobClientFacts.cs", label="Storage = storage", span="29-29"];
m3_6 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="BackgroundJobClientFacts.cs", label="Options = options", span="30-30"];
m3_7 [cluster="Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", file="BackgroundJobClientFacts.cs", label="Exit Hangfire.Dashboard.DashboardContext.DashboardContext(Hangfire.JobStorage, Hangfire.DashboardOptions)", span="24-24"];
m3_17 [cluster="Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage)", file="BackgroundJobClientFacts.cs", label="Entry Hangfire.RecurringJobManager.RecurringJobManager(Hangfire.JobStorage)", span="41-41"];
m3_9 [cluster="Unk.nameof", file="BackgroundJobClientFacts.cs", label="Entry Unk.nameof", span=""];
m3_10 [cluster="Hangfire.Dashboard.DashboardContext.GetBackgroundJobClient()", file="BackgroundJobClientFacts.cs", label="Entry Hangfire.Dashboard.DashboardContext.GetBackgroundJobClient()", span="41-41"];
m3_11 [cluster="Hangfire.Dashboard.DashboardContext.GetBackgroundJobClient()", file="BackgroundJobClientFacts.cs", label="return new BackgroundJobClient(Storage);", span="43-43"];
m3_12 [cluster="Hangfire.Dashboard.DashboardContext.GetBackgroundJobClient()", file="BackgroundJobClientFacts.cs", label="Exit Hangfire.Dashboard.DashboardContext.GetBackgroundJobClient()", span="41-41"];
m3_14 [cluster="Hangfire.Dashboard.DashboardContext.GetRecurringJobManager()", file="BackgroundJobClientFacts.cs", label="Entry Hangfire.Dashboard.DashboardContext.GetRecurringJobManager()", span="46-46"];
m3_15 [cluster="Hangfire.Dashboard.DashboardContext.GetRecurringJobManager()", file="BackgroundJobClientFacts.cs", label="return new RecurringJobManager(Storage);", span="48-48"];
m3_16 [cluster="Hangfire.Dashboard.DashboardContext.GetRecurringJobManager()", file="BackgroundJobClientFacts.cs", label="Exit Hangfire.Dashboard.DashboardContext.GetRecurringJobManager()", span="46-46"];
m3_13 [cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage)", file="BackgroundJobClientFacts.cs", label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage)", span="74-74"];
m3_18 [file="BackgroundJobClientFacts.cs", label="Hangfire.Dashboard.DashboardContext", span=""];
m4_6 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BootstrapperConfigurationExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_0 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="40-40"];
m4_1 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="BootstrapperConfigurationExtensions.cs", label="storage == null", span="42-42"];
m4_2 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="BootstrapperConfigurationExtensions.cs", label="throw new ArgumentNullException(nameof(storage));", span="42-42"];
m4_3 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="BootstrapperConfigurationExtensions.cs", label="_storage = storage", span="44-44"];
m4_4 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="BootstrapperConfigurationExtensions.cs", label="_interval = interval", span="45-45"];
m4_5 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="BootstrapperConfigurationExtensions.cs", label="Exit Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="40-40"];
m4_27 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", span="82-82"];
m4_34 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", file="BootstrapperConfigurationExtensions.cs", label="return \r\n$@''DECLARE @RecordsToAggregate TABLE\r\n(\r\n	[Key] NVARCHAR(100) NOT NULL,\r\n	[Value] SMALLINT NOT NULL,\r\n	[ExpireAt] DATETIME NULL\r\n)\r\n\r\nSET XACT_ABORT ON\r\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED\r\nBEGIN TRAN\r\n\r\nDELETE TOP (@count) C\r\nOUTPUT DELETED.[Key], DELETED.[Value], DELETED.[ExpireAt] INTO @RecordsToAggregate\r\nFROM [{storage.SchemaName}].[Counter] C WITH (READPAST, XLOCK, INDEX(0))\r\n\r\nSET NOCOUNT ON\r\n\r\n;MERGE [{storage.SchemaName}].[AggregatedCounter] WITH (HOLDLOCK) AS [Target]\r\nUSING (\r\n	SELECT [Key], SUM([Value]) as [Value], MAX([ExpireAt]) AS [ExpireAt] FROM @RecordsToAggregate\r\n	GROUP BY [Key]) AS [Source] ([Key], [Value], [ExpireAt])\r\nON [Target].[Key] = [Source].[Key]\r\nWHEN MATCHED THEN UPDATE SET \r\n	[Target].[Value] = [Target].[Value] + [Source].[Value],\r\n	[Target].[ExpireAt] = (SELECT MAX([ExpireAt]) FROM (VALUES ([Source].ExpireAt), ([Target].[ExpireAt])) AS MaxExpireAt([ExpireAt]))\r\nWHEN NOT MATCHED THEN INSERT ([Key], [Value], [ExpireAt]) VALUES ([Source].[Key], [Source].[Value], [Source].[ExpireAt]);\r\n\r\nCOMMIT TRAN'';", span="84-112"];
m4_35 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", file="BootstrapperConfigurationExtensions.cs", label="Exit Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", span="82-82"];
m4_33 [cluster="System.Type.ToString()", file="BootstrapperConfigurationExtensions.cs", label="Entry System.Type.ToString()", span="0-0"];
m4_28 [cluster="Unk.Execute", file="BootstrapperConfigurationExtensions.cs", label="Entry Unk.Execute", span=""];
m4_23 [cluster="Hangfire.Logging.ILog.Trace(string)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.Logging.ILog.Trace(string)", span="235-235"];
m4_8 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="48-48"];
m4_9 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="BootstrapperConfigurationExtensions.cs", label="Logger.Debug(''Aggregating records in 'Counter' table...'')", span="50-50"];
m4_13 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="BootstrapperConfigurationExtensions.cs", label="cancellationToken.Wait(DelayBetweenPasses)", span="66-66"];
m4_14 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="BootstrapperConfigurationExtensions.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="67-67"];
m4_17 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="BootstrapperConfigurationExtensions.cs", label="cancellationToken.Wait(_interval)", span="74-74"];
m4_10 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="BootstrapperConfigurationExtensions.cs", label="int removedCount = 0", span="52-52"];
m4_11 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="BootstrapperConfigurationExtensions.cs", label="_storage.UseConnection(null, connection =>\r\n                {\r\n                    removedCount = connection.Execute(\r\n                        GetAggregationQuery(_storage),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass },\r\n                        commandTimeout: 0);\r\n                })", span="56-62"];
m4_12 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="BootstrapperConfigurationExtensions.cs", label="removedCount >= NumberOfRecordsInSinglePass", span="64-64"];
m4_15 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="BootstrapperConfigurationExtensions.cs", label="removedCount >= NumberOfRecordsInSinglePass", span="70-70"];
m4_16 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="BootstrapperConfigurationExtensions.cs", label="Logger.Trace(''Records from the 'Counter' table aggregated.'')", span="72-72"];
m4_18 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", file="BootstrapperConfigurationExtensions.cs", label="Exit Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="48-48"];
m4_21 [cluster="System.Threading.CancellationToken.Wait(System.TimeSpan)", file="BootstrapperConfigurationExtensions.cs", label="Entry System.Threading.CancellationToken.Wait(System.TimeSpan)", span="40-40"];
m4_20 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection, System.Action<DbConnection>)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection, System.Action<DbConnection>)", span="171-171"];
m4_29 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.SqlServer.CountersAggregator.ToString()", span="77-77"];
m4_30 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="BootstrapperConfigurationExtensions.cs", label="return GetType().ToString();", span="79-79"];
m4_31 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", file="BootstrapperConfigurationExtensions.cs", label="Exit Hangfire.SqlServer.CountersAggregator.ToString()", span="77-77"];
m4_7 [cluster="Unk.nameof", file="BootstrapperConfigurationExtensions.cs", label="Entry Unk.nameof", span=""];
m4_32 [cluster="object.GetType()", file="BootstrapperConfigurationExtensions.cs", label="Entry object.GetType()", span="0-0"];
m4_24 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Entry lambda expression", span="56-62"];
m4_25 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="removedCount = connection.Execute(\r\n                        GetAggregationQuery(_storage),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass },\r\n                        commandTimeout: 0)", span="58-61"];
m4_26 [cluster="lambda expression", file="BootstrapperConfigurationExtensions.cs", label="Exit lambda expression", span="56-62"];
m4_22 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="BootstrapperConfigurationExtensions.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m4_19 [cluster="Hangfire.Logging.ILog.Debug(string)", file="BootstrapperConfigurationExtensions.cs", label="Entry Hangfire.Logging.ILog.Debug(string)", span="117-117"];
m4_36 [file="BootstrapperConfigurationExtensions.cs", label="Hangfire.SqlServer.CountersAggregator", span=""];
m5_0 [cluster="Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", file="CreateJobFailedException.cs", label="Entry Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", span="33-33"];
m5_1 [cluster="Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", file="CreateJobFailedException.cs", label="Exit Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", span="33-33"];
m8_49 [cluster="HangFire.Web.RazorPage.Write(object)", file="DisableConcurrentExecutionAttribute.cs", label="Entry HangFire.Web.RazorPage.Write(object)", span="40-40"];
m8_45 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="DisableConcurrentExecutionAttribute.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="33-33"];
m8_14 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="Write(queue.Length)", span="132-132"];
m8_6 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''    <div class=\''alert alert-warning\''>\r\n        You have no queues yet. Try to enq'' +\r\n''ueue your first job.\r\n    </div>\r\n'')", span="71-72"];
m8_9 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''                <tr>\r\n                    <td>\r\n                        <a href=\'''' +\r\n'''')", span="105-106"];
m8_10 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="Write(Request.LinkTo(''/queues/'' + queue.Name))", span="111-111"];
m8_8 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label=queues, span="99-99"];
m8_11 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''\''>\r\n                            '')", span="116-116"];
m8_0 [cluster="Hangfire.DisableConcurrentExecutionAttribute.DisableConcurrentExecutionAttribute(int)", file="DisableConcurrentExecutionAttribute.cs", label="Entry Hangfire.DisableConcurrentExecutionAttribute.DisableConcurrentExecutionAttribute(int)", span="26-26"];
m8_2 [cluster="Hangfire.DisableConcurrentExecutionAttribute.DisableConcurrentExecutionAttribute(int)", color=green, community=0, file="DisableConcurrentExecutionAttribute.cs", label="throw new ArgumentException(''Timeout argument value should be greater that zero.'');", prediction=16, span="28-28"];
m8_1 [cluster="Hangfire.DisableConcurrentExecutionAttribute.DisableConcurrentExecutionAttribute(int)", file="DisableConcurrentExecutionAttribute.cs", label="timeoutInSeconds < 0", span="28-28"];
m8_3 [cluster="Hangfire.DisableConcurrentExecutionAttribute.DisableConcurrentExecutionAttribute(int)", color=green, community=0, file="DisableConcurrentExecutionAttribute.cs", label="_timeoutInSeconds = timeoutInSeconds", prediction=17, span="30-30"];
m8_4 [cluster="Hangfire.DisableConcurrentExecutionAttribute.DisableConcurrentExecutionAttribute(int)", file="DisableConcurrentExecutionAttribute.cs", label="Exit Hangfire.DisableConcurrentExecutionAttribute.DisableConcurrentExecutionAttribute(int)", span="26-26"];
m8_5 [cluster="System.ArgumentException.ArgumentException(string)", file="DisableConcurrentExecutionAttribute.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m8_12 [cluster="Hangfire.Common.Job.ToString()", file="DisableConcurrentExecutionAttribute.cs", label="Entry Hangfire.Common.Job.ToString()", span="155-155"];
m8_13 [cluster="System.TimeSpan.FromSeconds(double)", file="DisableConcurrentExecutionAttribute.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m8_15 [cluster="Hangfire.DisableConcurrentExecutionAttribute.OnPerformed(Hangfire.Server.PerformedContext)", file="DisableConcurrentExecutionAttribute.cs", label="Entry Hangfire.DisableConcurrentExecutionAttribute.OnPerformed(Hangfire.Server.PerformedContext)", span="43-43"];
m8_16 [cluster="Hangfire.DisableConcurrentExecutionAttribute.OnPerformed(Hangfire.Server.PerformedContext)", file="DisableConcurrentExecutionAttribute.cs", label="!filterContext.Items.ContainsKey(''DistributedLock'')", span="45-45"];
m8_17 [cluster="Hangfire.DisableConcurrentExecutionAttribute.OnPerformed(Hangfire.Server.PerformedContext)", file="DisableConcurrentExecutionAttribute.cs", label="throw new InvalidOperationException(''Can not release a distributed lock: it was not acquired.'');", span="47-47"];
m8_19 [cluster="Hangfire.DisableConcurrentExecutionAttribute.OnPerformed(Hangfire.Server.PerformedContext)", file="DisableConcurrentExecutionAttribute.cs", label="distributedLock.Dispose()", span="51-51"];
m8_20 [cluster="Hangfire.DisableConcurrentExecutionAttribute.OnPerformed(Hangfire.Server.PerformedContext)", file="DisableConcurrentExecutionAttribute.cs", label="Exit Hangfire.DisableConcurrentExecutionAttribute.OnPerformed(Hangfire.Server.PerformedContext)", span="43-43"];
m8_22 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="DisableConcurrentExecutionAttribute.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m8_23 [cluster="System.IDisposable.Dispose()", file="DisableConcurrentExecutionAttribute.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m8_24 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="Hangfire.DisableConcurrentExecutionAttribute", span=""];
m8_25 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="211-211"];
m8_26 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''\''>'')", span="216-216"];
m8_27 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="Write(HtmlHelper.JobId(job.Key))", span="221-221"];
m8_28 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''</a>\r\n'')", span="226-226"];
m8_30 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''                                                <span title=\''Job\'s state has been'' +\r\n'' changed while fetching data.\'' class=\''glyphicon glyphicon-question-sign\''></span>'' +\r\n''\r\n'')", span="237-239"];
m8_31 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''                                        </td>\r\n                                  '' +\r\n''      <td>'')", span="249-250"];
m8_32 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="Write(HtmlHelper.JobType(job.Value.Type))", span="255-255"];
m8_33 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''</td>\r\n                                        <td>\r\n'')", span="260-260"];
m8_35 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''                                                <span data-moment=\'''')", span="271-271"];
m8_36 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="Write(JobHelper.ToStringTimestamp(job.Value.EnqueuedAt.Value))", span="276-276"];
m8_37 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''\''>\r\n                                                    '')", span="281-281"];
m8_38 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="Write(job.Value.EnqueuedAt)", span="286-286"];
m8_39 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''\r\n                                                </span>\r\n'')", span="291-291"];
m8_40 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''                                        </td>\r\n                                  '' +\r\n''  </tr>\r\n'')", span="301-302"];
m8_41 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''                            </tbody>\r\n                        </table>\r\n'')", span="312-312"];
m8_42 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''                    </td>\r\n                </tr>\r\n'')", span="322-322"];
m8_43 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="WriteLiteral(''        </tbody>\r\n    </table>\r\n'')", span="332-332"];
m8_18 [cluster="Hangfire.DisableConcurrentExecutionAttribute.OnPerformed(Hangfire.Server.PerformedContext)", file="DisableConcurrentExecutionAttribute.cs", label="var distributedLock = (IDisposable)filterContext.Items[''DistributedLock'']", span="50-50"];
m8_21 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="DisableConcurrentExecutionAttribute.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m8_29 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="!job.Value.InEnqueuedState", span="231-231"];
m8_34 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="job.Value.EnqueuedAt.HasValue", span="265-265"];
m8_44 [cluster="HangFire.Web.Pages.QueuesPage.Execute()", file="DisableConcurrentExecutionAttribute.cs", label="Exit HangFire.Web.Pages.QueuesPage.Execute()", span="39-39"];
m8_46 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="DisableConcurrentExecutionAttribute.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m8_47 [cluster="HangFire.Web.JobStorage.Queues()", file="DisableConcurrentExecutionAttribute.cs", label="Entry HangFire.Web.JobStorage.Queues()", span="207-207"];
m8_48 [cluster="HttpRequestBase.LinkTo(string)", file="DisableConcurrentExecutionAttribute.cs", label="Entry HttpRequestBase.LinkTo(string)", span="8-8"];
m8_50 [cluster="HangFire.Web.HtmlHelper.JobId(string)", file="DisableConcurrentExecutionAttribute.cs", label="Entry HangFire.Web.HtmlHelper.JobId(string)", span="17-17"];
m8_52 [cluster="HangFire.Web.HtmlHelper.JobType(string)", file="DisableConcurrentExecutionAttribute.cs", label="Entry HangFire.Web.HtmlHelper.JobType(string)", span="22-22"];
m8_53 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="DisableConcurrentExecutionAttribute.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
m8_51 [cluster="Unk.Write", file="DisableConcurrentExecutionAttribute.cs", label="Entry Unk.Write", span=""];
m8_54 [file="DisableConcurrentExecutionAttribute.cs", label="HangFire.Web.Pages.QueuesPage", span=""];
m9_4 [cluster="Hangfire.Dashboard.LocalRequestsOnlyAuthorizationFilter.LocalRequestsOnlyAuthorizationFilter()", file="IBackgroundJobClient.cs", label="Entry Hangfire.Dashboard.LocalRequestsOnlyAuthorizationFilter.LocalRequestsOnlyAuthorizationFilter()", span="22-22"];
m9_0 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="IBackgroundJobClient.cs", label="Entry Hangfire.DashboardOptions.DashboardOptions()", span="23-23"];
m9_1 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="IBackgroundJobClient.cs", label="AppPath = ''/''", span="25-25"];
m9_2 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="IBackgroundJobClient.cs", label="AuthorizationFilters = new[] { new LocalRequestsOnlyAuthorizationFilter() }", span="26-26"];
m9_3 [cluster="Hangfire.DashboardOptions.DashboardOptions()", file="IBackgroundJobClient.cs", label="Exit Hangfire.DashboardOptions.DashboardOptions()", span="23-23"];
m9_5 [file="IBackgroundJobClient.cs", label="Hangfire.DashboardOptions", span=""];
m10_89 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", span="165-165"];
m10_86 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", span="165-165"];
m10_87 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", file="IBootstrapperConfiguration.cs", label="var count = connection.Query<int>(\r\n                    ''select count(*) from HangFire.Counter where Id = @id'', new { id = entryId }).Single()", span="167-168"];
m10_88 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.IsEntryExpired(IDbConnection, int)", file="IBootstrapperConfiguration.cs", label="return count == 0;", span="169-169"];
m10_54 [cluster="Unk.Equal", file="IBootstrapperConfiguration.cs", label="Entry Unk.Equal", span=""];
m10_55 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", span="91-91"];
m10_56 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="IBootstrapperConfiguration.cs", label="var connection = ConnectionUtils.CreateConnection()", span="93-93"];
m10_57 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="IBootstrapperConfiguration.cs", label="string createSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt) \r\nvalues ('', '', getutcdate(), @expireAt)''", span="96-98"];
m10_58 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="IBootstrapperConfiguration.cs", label="connection.Execute(createSql, new { expireAt = DateTime.UtcNow.AddMonths(-1) })", span="99-99"];
m10_61 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="IBootstrapperConfiguration.cs", label="Assert.Equal(0, connection.Query<int>(@''select count(*) from HangFire.Job'').Single())", span="107-107"];
m10_59 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="IBootstrapperConfiguration.cs", label="var manager = CreateManager()", span="101-101"];
m10_60 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="IBootstrapperConfiguration.cs", label="manager.Execute(_token)", span="104-104"];
m10_62 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_JobTable()", span="91-91"];
m10_7 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="22-22"];
m10_8 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="IBootstrapperConfiguration.cs", label="Assert.Throws<ArgumentNullException>(() => new ExpirationManager(null))", span="24-24"];
m10_9 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="22-22"];
m10_84 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", span="153-153"];
m10_79 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", span="153-153"];
m10_80 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="IBootstrapperConfiguration.cs", label="string insertSql = @''\r\ninsert into HangFire.Counter ([Key], [Value], [ExpireAt])\r\nvalues ('key', 1, @expireAt)\r\nselect scope_identity() as Id''", span="155-158"];
m10_81 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="IBootstrapperConfiguration.cs", label="var id = connection.Query(insertSql, new { @expireAt = expireAt }).Single()", span="160-160"];
m10_82 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="IBootstrapperConfiguration.cs", label="var recordId = (int) id.Id", span="161-161"];
m10_83 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateExpirationEntry(IDbConnection, System.DateTime?)", file="IBootstrapperConfiguration.cs", label="return recordId;", span="162-162"];
m10_10 [cluster="Unk.>", file="IBootstrapperConfiguration.cs", label="Entry Unk.>", span=""];
m10_34 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="IBootstrapperConfiguration.cs", label="Assert.False(IsEntryExpired(connection, entryId))", span="51-51"];
m10_29 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", span="42-42"];
m10_30 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="IBootstrapperConfiguration.cs", label="var connection = ConnectionUtils.CreateConnection()", span="44-44"];
m10_31 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="IBootstrapperConfiguration.cs", label="var entryId = CreateExpirationEntry(connection, null)", span="46-46"];
m10_32 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="IBootstrapperConfiguration.cs", label="var manager = CreateManager()", span="47-47"];
m10_33 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="IBootstrapperConfiguration.cs", label="manager.Execute(_token)", span="49-49"];
m10_35 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithNoExpirationTimeSet()", span="42-42"];
m10_36 [cluster="Unk.False", file="IBootstrapperConfiguration.cs", label="Entry Unk.False", span=""];
m10_0 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", span="15-15"];
m10_1 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", file="IBootstrapperConfiguration.cs", label="_storage = new SqlServerStorage(ConnectionUtils.GetConnectionString())", span="17-17"];
m10_2 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", file="IBootstrapperConfiguration.cs", label="_token = new CancellationToken(true)", span="18-18"];
m10_3 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.ExpirationManagerFacts()", span="15-15"];
m10_85 [cluster="Unk.Query", file="IBootstrapperConfiguration.cs", label="Entry Unk.Query", span=""];
m10_25 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateManager()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateManager()", span="172-172"];
m10_90 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateManager()", file="IBootstrapperConfiguration.cs", label="return new ExpirationManager(_storage);", span="174-174"];
m10_91 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateManager()", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.CreateManager()", span="172-172"];
m10_20 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="IBootstrapperConfiguration.cs", label="Assert.True(IsEntryExpired(connection, entryId))", span="37-37"];
m10_15 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", span="28-28"];
m10_16 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="IBootstrapperConfiguration.cs", label="var connection = ConnectionUtils.CreateConnection()", span="30-30"];
m10_17 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="IBootstrapperConfiguration.cs", label="var entryId = CreateExpirationEntry(connection, DateTime.UtcNow.AddMonths(-1))", span="32-32"];
m10_18 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="IBootstrapperConfiguration.cs", label="var manager = CreateManager()", span="33-33"];
m10_19 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="IBootstrapperConfiguration.cs", label="manager.Execute(_token)", span="35-35"];
m10_21 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_RemovesOutdatedRecords()", span="28-28"];
m10_23 [cluster="System.DateTime.AddMonths(int)", file="IBootstrapperConfiguration.cs", label="Entry System.DateTime.AddMonths(int)", span="0-0"];
m10_14 [cluster="HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="38-38"];
m10_24 [cluster="Unk.CreateExpirationEntry", file="IBootstrapperConfiguration.cs", label="Entry Unk.CreateExpirationEntry", span=""];
m10_11 [cluster="lambda expression", file="IBootstrapperConfiguration.cs", label="Entry lambda expression", span="24-24"];
m10_12 [cluster="lambda expression", file="IBootstrapperConfiguration.cs", label="new ExpirationManager(null)", span="24-24"];
m10_13 [cluster="lambda expression", file="IBootstrapperConfiguration.cs", label="Exit lambda expression", span="24-24"];
m10_6 [cluster="System.Threading.CancellationToken.CancellationToken(bool)", file="IBootstrapperConfiguration.cs", label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0"];
m10_27 [cluster="Unk.IsEntryExpired", file="IBootstrapperConfiguration.cs", label="Entry Unk.IsEntryExpired", span=""];
m10_26 [cluster="HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", span="51-51"];
m10_5 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26"];
m10_4 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="30-30"];
m10_53 [cluster="Unk.Single", file="IBootstrapperConfiguration.cs", label="Entry Unk.Single", span=""];
m10_28 [cluster="Unk.True", file="IBootstrapperConfiguration.cs", label="Entry Unk.True", span=""];
m10_52 [cluster="Unk.Execute", file="IBootstrapperConfiguration.cs", label="Entry Unk.Execute", span=""];
m10_22 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m10_42 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="IBootstrapperConfiguration.cs", label="Assert.False(IsEntryExpired(connection, entryId))", span="65-65"];
m10_37 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", span="56-56"];
m10_38 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="IBootstrapperConfiguration.cs", label="var connection = ConnectionUtils.CreateConnection()", span="58-58"];
m10_39 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="IBootstrapperConfiguration.cs", label="var entryId = CreateExpirationEntry(connection, DateTime.Now.AddMonths(1))", span="60-60"];
m10_40 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="IBootstrapperConfiguration.cs", label="var manager = CreateManager()", span="61-61"];
m10_41 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="IBootstrapperConfiguration.cs", label="manager.Execute(_token)", span="63-63"];
m10_43 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_DoesNotRemoveEntries_WithFreshExpirationTime()", span="56-56"];
m10_44 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", span="70-70"];
m10_45 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="IBootstrapperConfiguration.cs", label="var connection = ConnectionUtils.CreateConnection()", span="72-72"];
m10_46 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="IBootstrapperConfiguration.cs", label="string createSql = @''\r\ninsert into HangFire.Counter ([Key], [Value], ExpireAt) \r\nvalues ('key', 1, @expireAt)''", span="75-77"];
m10_47 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="IBootstrapperConfiguration.cs", label="connection.Execute(createSql, new { expireAt = DateTime.UtcNow.AddMonths(-1) })", span="78-78"];
m10_50 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="IBootstrapperConfiguration.cs", label="Assert.Equal(0, connection.Query<int>(@''select count(*) from HangFire.Counter'').Single())", span="86-86"];
m10_48 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="IBootstrapperConfiguration.cs", label="var manager = CreateManager()", span="80-80"];
m10_49 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="IBootstrapperConfiguration.cs", label="manager.Execute(_token)", span="83-83"];
m10_51 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_CounterTable()", span="70-70"];
m10_71 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", span="133-133"];
m10_72 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="IBootstrapperConfiguration.cs", label="var connection = ConnectionUtils.CreateConnection()", span="135-135"];
m10_73 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="IBootstrapperConfiguration.cs", label="string createSql = @''\r\ninsert into HangFire.[Set] ([Key], [Score], [Value], ExpireAt) \r\nvalues ('key', 0, '', @expireAt)''", span="138-140"];
m10_74 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="IBootstrapperConfiguration.cs", label="connection.Execute(createSql, new { expireAt = DateTime.UtcNow.AddMonths(-1) })", span="141-141"];
m10_77 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="IBootstrapperConfiguration.cs", label="Assert.Equal(0, connection.Query<int>(@''select count(*) from HangFire.[Set]'').Single())", span="149-149"];
m10_75 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="IBootstrapperConfiguration.cs", label="var manager = CreateManager()", span="143-143"];
m10_76 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="IBootstrapperConfiguration.cs", label="manager.Execute(_token)", span="146-146"];
m10_78 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_SetTable()", span="133-133"];
m10_63 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="IBootstrapperConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", span="112-112"];
m10_64 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="IBootstrapperConfiguration.cs", label="var connection = ConnectionUtils.CreateConnection()", span="114-114"];
m10_65 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="IBootstrapperConfiguration.cs", label="string createSql = @''\r\ninsert into HangFire.List ([Key], ExpireAt) \r\nvalues ('key', @expireAt)''", span="117-119"];
m10_66 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="IBootstrapperConfiguration.cs", label="connection.Execute(createSql, new { expireAt = DateTime.UtcNow.AddMonths(-1) })", span="120-120"];
m10_69 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="IBootstrapperConfiguration.cs", label="Assert.Equal(0, connection.Query<int>(@''select count(*) from HangFire.List'').Single())", span="128-128"];
m10_67 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="IBootstrapperConfiguration.cs", label="var manager = CreateManager()", span="122-122"];
m10_68 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="IBootstrapperConfiguration.cs", label="manager.Execute(_token)", span="125-125"];
m10_70 [cluster="HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", file="IBootstrapperConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ExpirationManagerFacts.Execute_Processes_ListTable()", span="112-112"];
m10_92 [file="IBootstrapperConfiguration.cs", label="HangFire.SqlServer.Tests.ExpirationManagerFacts", span=""];
m11_0 [cluster="Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", file="IServerComponent.cs", label="Entry Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", span="24-24"];
m11_1 [cluster="Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", file="IServerComponent.cs", label="Exit Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", span="24-24"];
m13_0 [cluster="Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", file="Job.cs", label="Entry Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", span="35-35"];
m13_1 [cluster="Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", file="Job.cs", label="Exit Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", span="35-35"];
m15_45 [cluster="Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", file="JobFacts.cs", label="Entry Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", span="57-57"];
m15_10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JobFacts.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m15_63 [cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", file="JobFacts.cs", label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", span="28-28"];
m15_62 [cluster="Hangfire.JobStorage.GetConnection()", file="JobFacts.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m15_47 [cluster="Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", file="JobFacts.cs", label="Entry Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", span="35-35"];
m15_48 [cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="JobFacts.cs", label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87"];
m15_65 [cluster="Hangfire.Logging.ILog.DebugException(string, System.Exception)", file="JobFacts.cs", label="Entry Hangfire.Logging.ILog.DebugException(string, System.Exception)", span="133-133"];
m15_23 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="Entry Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="144-144"];
m15_30 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="return UseConnectionDistributedLock(context.Storage, connection =>\r\n            {\r\n                var timestamp = JobHelper.ToTimestamp(DateTime.UtcNow);\r\n\r\n                // TODO: it is very slow. Add batching.\r\n                var jobId = connection.GetFirstByLowestScoreFromSet(''schedule'', 0, timestamp);\r\n\r\n                if (jobId == null)\r\n                {\r\n                    // No more scheduled jobs pending.\r\n                    return false;\r\n                }\r\n                \r\n                var appliedState = _stateChanger.ChangeState(new StateChangeContext(\r\n                    context.Storage,\r\n                    connection,\r\n                    jobId,\r\n                    new EnqueuedState { Reason = $''Triggered by {ToString()}'' }, \r\n                    ScheduledState.StateName));\r\n\r\n                if (appliedState == null)\r\n                {\r\n                    // When a background job with the given id does not exist, we should\r\n                    // remove its id from a schedule manually. This may happen when someone\r\n                    // modifies a storage bypassing Hangfire API.\r\n                    using (var transaction = connection.CreateWriteTransaction())\r\n                    {\r\n                        transaction.RemoveFromSet(''schedule'', jobId);\r\n                        transaction.Commit();\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            });", span="146-179"];
m15_31 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="Exit Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="144-144"];
m15_29 [cluster="object.GetType()", file="JobFacts.cs", label="Entry object.GetType()", span="0-0"];
m15_51 [cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="JobFacts.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43"];
m15_64 [cluster="System.Func<T, TResult>.Invoke(T)", file="JobFacts.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m15_50 [cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", file="JobFacts.cs", label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27"];
m15_11 [cluster="Unk.nameof", file="JobFacts.cs", label="Entry Unk.nameof", span=""];
m15_26 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="JobFacts.cs", label="Entry Hangfire.Server.DelayedJobScheduler.ToString()", span="139-139"];
m15_27 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="JobFacts.cs", label="return GetType().Name;", span="141-141"];
m15_28 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="JobFacts.cs", label="Exit Hangfire.Server.DelayedJobScheduler.ToString()", span="139-139"];
m15_46 [cluster="Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="JobFacts.cs", label="Entry Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="57-57"];
m15_52 [cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", file="JobFacts.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54"];
m15_33 [cluster="lambda expression", file="JobFacts.cs", label="Entry lambda expression", span="146-179"];
m15_38 [cluster="lambda expression", file="JobFacts.cs", label="var appliedState = _stateChanger.ChangeState(new StateChangeContext(\r\n                    context.Storage,\r\n                    connection,\r\n                    jobId,\r\n                    new EnqueuedState { Reason = $''Triggered by {ToString()}'' }, \r\n                    ScheduledState.StateName))", span="159-164"];
m15_35 [cluster="lambda expression", file="JobFacts.cs", label="var jobId = connection.GetFirstByLowestScoreFromSet(''schedule'', 0, timestamp)", span="151-151"];
m15_36 [cluster="lambda expression", file="JobFacts.cs", label="jobId == null", span="153-153"];
m15_39 [cluster="lambda expression", file="JobFacts.cs", label="appliedState == null", span="166-166"];
m15_34 [cluster="lambda expression", file="JobFacts.cs", label="var timestamp = JobHelper.ToTimestamp(DateTime.UtcNow)", span="148-148"];
m15_40 [cluster="lambda expression", file="JobFacts.cs", label="var transaction = connection.CreateWriteTransaction()", span="171-171"];
m15_41 [cluster="lambda expression", file="JobFacts.cs", label="transaction.RemoveFromSet(''schedule'', jobId)", span="173-173"];
m15_37 [cluster="lambda expression", file="JobFacts.cs", label="return false;", span="156-156"];
m15_43 [cluster="lambda expression", file="JobFacts.cs", label="return true;", span="178-178"];
m15_42 [cluster="lambda expression", file="JobFacts.cs", label="transaction.Commit()", span="174-174"];
m15_44 [cluster="lambda expression", file="JobFacts.cs", label="Exit lambda expression", span="146-179"];
m15_24 [cluster="Hangfire.Logging.ILog.Info(string)", file="JobFacts.cs", label="Entry Hangfire.Logging.ILog.Info(string)", span="205-205"];
m15_25 [cluster="Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", file="JobFacts.cs", label="Entry Hangfire.Server.BackgroundProcessContext.Wait(System.TimeSpan)", span="55-55"];
m15_49 [cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="JobFacts.cs", label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25"];
m15_32 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="JobFacts.cs", label="Entry Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", span="182-182"];
m15_59 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="JobFacts.cs", label="Logger.DebugException(\r\n                    $@''An exception was thrown during acquiring distributed lock on the {resource} resource within {DefaultLockTimeout.TotalSeconds} seconds. The scheduled jobs have not been handled this time.\r\nIt will be retried in {_pollingDelay.TotalSeconds} seconds'', \r\n                    e)", span="197-200"];
m15_53 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="JobFacts.cs", label="var resource = ''locks:schedulepoller''", span="184-184"];
m15_58 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="JobFacts.cs", label="e.Resource == resource", span="193-193"];
m15_60 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="JobFacts.cs", label="return default(T);", span="201-201"];
m15_54 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="JobFacts.cs", label="var connection = storage.GetConnection()", span="187-187"];
m15_56 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="JobFacts.cs", label="return action(connection);", span="190-190"];
m15_55 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="JobFacts.cs", label="connection.AcquireDistributedLock(resource, DefaultLockTimeout)", span="188-188"];
m15_57 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="JobFacts.cs", label=DistributedLockTimeoutException, span="193-193"];
m15_61 [cluster="Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", file="JobFacts.cs", label="Exit Hangfire.Server.DelayedJobScheduler.UseConnectionDistributedLock<T>(Hangfire.JobStorage, System.Func<Hangfire.Storage.IStorageConnection, T>)", span="182-182"];
m15_12 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="114-114"];
m15_17 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="JobFacts.cs", label="jobsEnqueued++", prediction=18, span="122-122"];
m15_16 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="EnqueueNextScheduledJob(context)", span="120-120"];
m15_15 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="var jobsEnqueued = 0", span="118-118"];
m15_18 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="context.IsShutdownRequested", span="124-124"];
m15_19 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="jobsEnqueued != 0", span="130-130"];
m15_20 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="Logger.Info($''{jobsEnqueued} scheduled job(s) enqueued.'')", span="132-132"];
m15_13 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="context == null", span="116-116"];
m15_21 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="context.Wait(_pollingDelay)", span="135-135"];
m15_14 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="throw new ArgumentNullException(nameof(context));", span="116-116"];
m15_22 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobFacts.cs", label="Exit Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="114-114"];
m15_4 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="JobFacts.cs", label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="105-105"];
m15_7 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="JobFacts.cs", label="_stateChanger = stateChanger", span="109-109"];
m15_8 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="JobFacts.cs", label="_pollingDelay = pollingDelay", span="110-110"];
m15_5 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="JobFacts.cs", label="stateChanger == null", span="107-107"];
m15_6 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="JobFacts.cs", label="throw new ArgumentNullException(nameof(stateChanger));", span="107-107"];
m15_9 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="JobFacts.cs", label="Exit Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="105-105"];
m15_66 [file="JobFacts.cs", label="Hangfire.Server.DelayedJobScheduler", span=""];
m15_67 [file="JobFacts.cs", label="Hangfire.Server.BackgroundProcessContext", span=""];
m16_13 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="OwinBootstrapper.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m16_19 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string, string)", file="OwinBootstrapper.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string, string, string)", span="10-10"];
m16_16 [cluster="string.Format(string, object, object)", file="OwinBootstrapper.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m16_42 [cluster="System.TimeSpan.Equals(System.TimeSpan)", file="OwinBootstrapper.cs", label="Entry System.TimeSpan.Equals(System.TimeSpan)", span="0-0"];
m16_18 [cluster="HangFire.Client.JobClient.GenerateId()", file="OwinBootstrapper.cs", label="Entry HangFire.Client.JobClient.GenerateId()", span="92-92"];
m16_59 [cluster="HangFire.Client.JobClient.GenerateId()", file="OwinBootstrapper.cs", label="return Guid.NewGuid().ToString();", span="94-94"];
m16_60 [cluster="HangFire.Client.JobClient.GenerateId()", file="OwinBootstrapper.cs", label="Exit HangFire.Client.JobClient.GenerateId()", span="92-92"];
m16_45 [cluster="HangFire.Client.JobClient.Dispose()", file="OwinBootstrapper.cs", label="Entry HangFire.Client.JobClient.Dispose()", span="76-76"];
m16_46 [cluster="HangFire.Client.JobClient.Dispose()", file="OwinBootstrapper.cs", label="_redis.Dispose()", span="78-78"];
m16_47 [cluster="HangFire.Client.JobClient.Dispose()", file="OwinBootstrapper.cs", label="Exit HangFire.Client.JobClient.Dispose()", span="76-76"];
m16_14 [cluster="System.Type.IsAssignableFrom(System.Type)", file="OwinBootstrapper.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m16_57 [cluster="HangFire.JobHelper.ToJson(object)", file="OwinBootstrapper.cs", label="Entry HangFire.JobHelper.ToJson(object)", span="32-32"];
m16_56 [cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="OwinBootstrapper.cs", label="Entry HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", span="49-49"];
m16_58 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="OwinBootstrapper.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
m16_22 [cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", file="OwinBootstrapper.cs", label="Entry HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", span="13-13"];
m16_17 [cluster="HangFire.JobHelper.GetQueue(System.Type)", file="OwinBootstrapper.cs", label="Entry HangFire.JobHelper.GetQueue(System.Type)", span="20-20"];
m16_41 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="OwinBootstrapper.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0"];
m16_0 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="Entry HangFire.Client.JobClient.Async(System.Type, object)", span="12-12"];
m16_1 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="jobType == null", span="14-14"];
m16_3 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="!typeof (BackgroundJob).IsAssignableFrom(jobType)", span="18-18"];
m16_4 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="throw new ArgumentException(\r\n                    String.Format(''The type '{0}' must inherit '{1}'.'', jobType, typeof(BackgroundJob)), \r\n                    ''jobType'');", span="20-22"];
m16_5 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="var queue = JobHelper.GetQueue(jobType)", span="25-25"];
m16_8 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="var job = CreateJob(jobType, args)", span="30-30"];
m16_2 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="throw new ArgumentNullException(''jobType'');", span="16-16"];
m16_6 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="var jobId = GenerateId()", span="27-27"];
m16_7 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="var state = new EnqueuedState(jobId, ''Enqueued by the Сlient'', queue)", span="29-29"];
m16_9 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="var context = new CreateContext(\r\n                new ClientJobDescriptor(_redis, jobId, job, state))", span="32-33"];
m16_11 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="return jobId;", span="37-37"];
m16_10 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="_jobCreator.CreateJob(context)", span="35-35"];
m16_12 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="OwinBootstrapper.cs", label="Exit HangFire.Client.JobClient.Async(System.Type, object)", span="12-12"];
m16_62 [cluster="System.Guid.ToString()", file="OwinBootstrapper.cs", label="Entry System.Guid.ToString()", span="0-0"];
m16_44 [cluster="System.DateTime.Add(System.TimeSpan)", file="OwinBootstrapper.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m16_55 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="OwinBootstrapper.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m16_24 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="Entry HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", span="40-40"];
m16_25 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="jobType == null", span="42-42"];
m16_27 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="!typeof(BackgroundJob).IsAssignableFrom(jobType)", span="46-46"];
m16_28 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="throw new ArgumentException(\r\n                    String.Format(''The type '{0}' must inherit '{1}'.'', jobType, typeof(BackgroundJob)),\r\n                    ''jobType'');", span="48-50"];
m16_29 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="interval != interval.Duration()", span="53-53"];
m16_32 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="return Async(jobType, args);", span="60-60"];
m16_35 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="var job = CreateJob(jobType, args)", span="66-66"];
m16_26 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="throw new ArgumentNullException(''jobType'');", span="44-44"];
m16_30 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="throw new ArgumentOutOfRangeException(''interval'', ''Interval value can not be negative.'');", span="55-55"];
m16_31 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="interval.Equals(TimeSpan.Zero)", span="58-58"];
m16_33 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="var jobId = GenerateId()", span="63-63"];
m16_34 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="var state = new ScheduledState(jobId, ''Scheduled by the Client'', DateTime.UtcNow.Add(interval))", span="65-65"];
m16_36 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="var context = new CreateContext(\r\n                new ClientJobDescriptor(_redis, jobId, job, state))", span="68-69"];
m16_38 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="return jobId;", span="73-73"];
m16_37 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="_jobCreator.CreateJob(context)", span="71-71"];
m16_39 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="OwinBootstrapper.cs", label="Exit HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", span="40-40"];
m16_48 [cluster="Unk.Dispose", file="OwinBootstrapper.cs", label="Entry Unk.Dispose", span=""];
m16_23 [cluster="HangFire.Client.JobCreator.CreateJob(HangFire.Client.CreateContext)", file="OwinBootstrapper.cs", label="Entry HangFire.Client.JobCreator.CreateJob(HangFire.Client.CreateContext)", span="33-33"];
m16_20 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="OwinBootstrapper.cs", label="Entry HangFire.Client.JobClient.CreateJob(System.Type, object)", span="81-81"];
m16_49 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="OwinBootstrapper.cs", label="var job = new Dictionary<string, string>()", span="84-84"];
m16_50 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="OwinBootstrapper.cs", label="job[''Type''] = jobType.AssemblyQualifiedName", span="85-85"];
m16_51 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="OwinBootstrapper.cs", label="job[''Args''] = JobHelper.ToJson(ClientJobDescriptor.SerializeProperties(jobArgs))", span="86-86"];
m16_52 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="OwinBootstrapper.cs", label="job[''CreatedAt''] = JobHelper.ToStringTimestamp(DateTime.UtcNow)", span="87-87"];
m16_53 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="OwinBootstrapper.cs", label="return job;", span="89-89"];
m16_54 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="OwinBootstrapper.cs", label="Exit HangFire.Client.JobClient.CreateJob(System.Type, object)", span="81-81"];
m16_40 [cluster="System.TimeSpan.Duration()", file="OwinBootstrapper.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m16_61 [cluster="System.Guid.NewGuid()", file="OwinBootstrapper.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m16_43 [cluster="HangFire.States.ScheduledState.ScheduledState(string, string, System.DateTime)", file="OwinBootstrapper.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(string, string, System.DateTime)", span="10-10"];
m16_15 [cluster="System.ArgumentException.ArgumentException(string, string)", file="OwinBootstrapper.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m16_21 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", file="OwinBootstrapper.cs", label="Entry HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", span="12-12"];
m16_63 [file="OwinBootstrapper.cs", label="HangFire.Client.JobClient", span=""];
m17_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ProcessingState.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m17_12 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ProcessingState.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m17_13 [cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="ProcessingState.cs", label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68"];
m17_9 [cluster="Hangfire.States.ProcessingState.SerializeData()", file="ProcessingState.cs", label="Entry Hangfire.States.ProcessingState.SerializeData()", span="125-125"];
m17_10 [cluster="Hangfire.States.ProcessingState.SerializeData()", file="ProcessingState.cs", label="return new Dictionary<string, string>\r\n            {\r\n                { ''StartedAt'', JobHelper.SerializeDateTime(StartedAt) },\r\n                { ''ServerId'', ServerId },\r\n                { ''WorkerId'', WorkerId }\r\n            };", span="127-132"];
m17_11 [cluster="Hangfire.States.ProcessingState.SerializeData()", file="ProcessingState.cs", label="Exit Hangfire.States.ProcessingState.SerializeData()", span="125-125"];
m17_7 [cluster="string.IsNullOrWhiteSpace(string)", file="ProcessingState.cs", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
m17_0 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs", label="Entry Hangfire.States.ProcessingState.ProcessingState(string, string)", span="37-37"];
m17_1 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs", label="String.IsNullOrWhiteSpace(serverId)", span="39-39"];
m17_3 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs", label="ServerId = serverId", span="41-41"];
m17_5 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs", label="WorkerId = workerId", span="43-43"];
m17_2 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs", label="throw new ArgumentNullException(''serverId'');", span="39-39"];
m17_4 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs", label="StartedAt = DateTime.UtcNow", span="42-42"];
m17_6 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="ProcessingState.cs", label="Exit Hangfire.States.ProcessingState.ProcessingState(string, string)", span="37-37"];
m17_14 [file="ProcessingState.cs", label="Hangfire.States.ProcessingState", span=""];
m18_60 [cluster="Hangfire.Server.Worker.ToString()", file="RecurringJob.cs", label="Entry Hangfire.Server.Worker.ToString()", span="161-161"];
m18_61 [cluster="Hangfire.Server.Worker.ToString()", file="RecurringJob.cs", label="return $''{GetType().Name} #{_workerId.Substring(0, 8)}'';", span="163-163"];
m18_62 [cluster="Hangfire.Server.Worker.ToString()", file="RecurringJob.cs", label="Exit Hangfire.Server.Worker.ToString()", span="161-161"];
m18_16 [cluster="Hangfire.RecurringJob.AddOrUpdate(System.Linq.Expressions.Expression<System.Action>, string, System.TimeZoneInfo, string)", file="RecurringJob.cs", label="Exit Hangfire.RecurringJob.AddOrUpdate(System.Linq.Expressions.Expression<System.Action>, string, System.TimeZoneInfo, string)", span="46-46"];
m18_83 [cluster="Hangfire.States.FailedState.FailedState(System.Exception)", file="RecurringJob.cs", label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="75-75"];
m18_116 [cluster="System.Diagnostics.Stopwatch.StartNew()", file="RecurringJob.cs", label="Entry System.Diagnostics.Stopwatch.StartNew()", span="0-0"];
m18_19 [cluster="System.Guid.NewGuid()", file="RecurringJob.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m18_59 [cluster="Hangfire.Server.Worker.Requeue(Hangfire.Storage.IFetchedJob)", file="RecurringJob.cs", label="Entry Hangfire.Server.Worker.Requeue(Hangfire.Storage.IFetchedJob)", span="210-210"];
m18_84 [cluster="Hangfire.Server.Worker.Requeue(Hangfire.Storage.IFetchedJob)", file="RecurringJob.cs", label="fetchedJob.Requeue()", span="214-214"];
m18_86 [cluster="Hangfire.Server.Worker.Requeue(Hangfire.Storage.IFetchedJob)", file="RecurringJob.cs", label="Logger.WarnException($''Failed to immediately re-queue the background job '{fetchedJob.JobId}'. Next invocation may be delayed, if invisibility timeout is used'', ex)", span="218-218"];
m18_85 [cluster="Hangfire.Server.Worker.Requeue(Hangfire.Storage.IFetchedJob)", file="RecurringJob.cs", label=Exception, span="216-216"];
m18_87 [cluster="Hangfire.Server.Worker.Requeue(Hangfire.Storage.IFetchedJob)", file="RecurringJob.cs", label="Exit Hangfire.Server.Worker.Requeue(Hangfire.Storage.IFetchedJob)", span="210-210"];
m18_46 [cluster="Hangfire.JobStorage.GetConnection()", file="RecurringJob.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m18_4 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="RecurringJob.cs", label="Entry Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", span="62-62"];
m18_5 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="RecurringJob.cs", label="queues == null", span="67-67"];
m18_6 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="RecurringJob.cs", label="throw new ArgumentNullException(nameof(queues));", span="67-67"];
m18_79 [cluster="string.Format(string, object, object)", file="RecurringJob.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m18_80 [cluster="Hangfire.Logging.ILog.DebugException(string, System.Exception)", file="RecurringJob.cs", label="Entry Hangfire.Logging.ILog.DebugException(string, System.Exception)", span="132-132"];
m18_63 [cluster="object.GetType()", file="RecurringJob.cs", label="Entry object.GetType()", span="0-0"];
m18_28 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(\r\n                        context.CancellationToken,\r\n                        timeoutCts.Token)", span="90-92"];
m18_33 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="fetchedJob.RemoveFromQueue()", span="113-113"];
m18_34 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="return;", span="114-114"];
m18_35 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="var state = PerformJob(context, connection, fetchedJob.JobId)", span="123-123"];
m18_56 [cluster="string.Format(string, object)", file="RecurringJob.cs", label="Entry string.Format(string, object)", span="0-0"];
m18_77 [cluster="Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)", file="RecurringJob.cs", label="Entry Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, System.Collections.Generic.IEnumerable<string>, System.Threading.CancellationToken)", span="45-45"];
m18_49 [cluster="Hangfire.Common.Job.ToString()", file="RecurringJob.cs", label="Entry Hangfire.Common.Job.ToString()", span="155-155"];
m18_89 [cluster="Hangfire.Logging.ILog.WarnException(string, System.Exception)", file="RecurringJob.cs", label="Entry Hangfire.Logging.ILog.WarnException(string, System.Exception)", span="280-280"];
m18_9 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="RecurringJob.cs", label="stateChanger == null", span="69-69"];
m18_10 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="RecurringJob.cs", label="throw new ArgumentNullException(nameof(stateChanger));", span="69-69"];
m18_11 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="RecurringJob.cs", label="_queues = queues.ToArray()", span="71-71"];
m18_55 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="Entry Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", span="222-222"];
m18_90 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="var jobData = connection.GetJobData(jobId)", span="226-226"];
m18_94 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="var backgroundJob = new BackgroundJob(jobId, jobData.Job, jobData.CreatedAt)", span="238-238"];
m18_95 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="var jobToken = new ServerJobCancellationToken(connection, jobId, context.ServerId, _workerId, context.CancellationToken)", span="240-240"];
m18_96 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="var performContext = new PerformContext(connection, backgroundJob, jobToken)", span="241-241"];
m18_107 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="ex is OperationCanceledException && context.IsShutdownRequested", span="267-267"];
m18_91 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="jobData == null", span="227-227"];
m18_93 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="jobData.EnsureLoaded()", span="236-236"];
m18_97 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="var latency = (DateTime.UtcNow - jobData.CreatedAt).TotalMilliseconds", span="243-243"];
m18_92 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="return null;", span="233-233"];
m18_99 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="var result = _performer.Perform(performContext)", span="246-246"];
m18_98 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="var duration = Stopwatch.StartNew()", span="244-244"];
m18_101 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="return new SucceededState(result, (long) latency, duration.ElapsedMilliseconds);", span="249-249"];
m18_100 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="duration.Stop()", span="247-247"];
m18_102 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label=JobAbortedException, span="251-251"];
m18_103 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="return null;", span="256-256"];
m18_104 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label=JobPerformanceException, span="258-258"];
m18_105 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="return new FailedState(ex.InnerException)\r\n                {\r\n                    Reason = ex.Message\r\n                };", span="260-263"];
m18_106 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label=Exception, span="265-265"];
m18_108 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="throw;", span="269-269"];
m18_109 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="return new FailedState(ex)\r\n                {\r\n                    Reason = ''An exception occurred during processing of a background job.''\r\n                };", span="272-275"];
m18_110 [cluster="Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", file="RecurringJob.cs", label="Exit Hangfire.Server.Worker.PerformJob(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, string)", span="222-222"];
m18_81 [cluster="System.TimeSpan.FromSeconds(double)", file="RecurringJob.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m18_118 [cluster="System.Diagnostics.Stopwatch.Stop()", file="RecurringJob.cs", label="Entry System.Diagnostics.Stopwatch.Stop()", span="0-0"];
m18_119 [cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="RecurringJob.cs", label="Entry Hangfire.States.SucceededState.SucceededState(object, long, long)", span="51-51"];
m18_17 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="RecurringJob.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="188-188"];
m18_111 [cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)", file="RecurringJob.cs", label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42"];
m18_20 [cluster="Hangfire.RecurringJob.AddOrUpdate<T>(System.Linq.Expressions.Expression<System.Action<T>>, string, System.TimeZoneInfo, string)", file="RecurringJob.cs", label="var job = Job.FromExpression(methodCall)", span="64-64"];
m18_64 [cluster="string.Substring(int, int)", file="RecurringJob.cs", label="Entry string.Substring(int, int)", span="0-0"];
m18_48 [cluster="Hangfire.RecurringJob.GetRecurringJobId(Hangfire.Common.Job)", file="RecurringJob.cs", label="Exit Hangfire.RecurringJob.GetRecurringJobId(Hangfire.Common.Job)", span="122-122"];
m18_32 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="context.CancellationToken.ThrowIfCancellationRequested()", span="110-110"];
m18_36 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="state != null", span="125-125"];
m18_37 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="TryChangeState(context, connection, fetchedJob, state, new[] { ProcessingState.StateName }, CancellationToken.None)", span="128-128"];
m18_38 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="fetchedJob.RemoveFromQueue()", span="136-136"];
m18_54 [cluster="Hangfire.Storage.IFetchedJob.RemoveFromQueue()", file="RecurringJob.cs", label="Entry Hangfire.Storage.IFetchedJob.RemoveFromQueue()", span="24-24"];
m18_88 [cluster="Hangfire.Storage.IFetchedJob.Requeue()", file="RecurringJob.cs", label="Entry Hangfire.Storage.IFetchedJob.Requeue()", span="25-25"];
m18_112 [cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="RecurringJob.cs", label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29"];
m18_12 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="RecurringJob.cs", label="_performer = performer", span="72-72"];
m18_21 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="Entry Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="78-78"];
m18_22 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="context == null", span="80-80"];
m18_23 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="throw new ArgumentNullException(nameof(context));", span="80-80"];
m18_0 [cluster="Hangfire.Server.Worker.Worker()", file="RecurringJob.cs", label="Entry Hangfire.Server.Worker.Worker()", span="53-53"];
m18_1 [cluster="Hangfire.Server.Worker.Worker()", file="RecurringJob.cs", label="Exit Hangfire.Server.Worker.Worker()", span="53-53"];
m18_2 [cluster="Hangfire.Server.Worker.Worker(params string[])", file="RecurringJob.cs", label="Entry Hangfire.Server.Worker.Worker(params string[])", span="57-57"];
m18_3 [cluster="Hangfire.Server.Worker.Worker(params string[])", file="RecurringJob.cs", label="Exit Hangfire.Server.Worker.Worker(params string[])", span="57-57"];
m18_24 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="var connection = context.Storage.GetConnection()", span="82-82"];
m18_51 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, string)", file="RecurringJob.cs", label="Entry Hangfire.States.ProcessingState.ProcessingState(string, string)", span="39-39"];
m18_8 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="RecurringJob.cs", label="throw new ArgumentNullException(nameof(performer));", span="68-68"];
m18_14 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="RecurringJob.cs", label="_workerId = Guid.NewGuid().ToString()", span="74-74"];
m18_13 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="RecurringJob.cs", label="_stateChanger = stateChanger", span="73-73"];
m18_15 [cluster="Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", file="RecurringJob.cs", label="Exit Hangfire.Server.Worker.Worker(System.Collections.Generic.IEnumerable<string>, Hangfire.Server.IBackgroundJobPerformer, Hangfire.States.IBackgroundJobStateChanger)", span="62-62"];
m18_25 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="var fetchedJob = connection.FetchNextJob(_queues, context.CancellationToken)", span="83-83"];
m18_26 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="context.CancellationToken.ThrowIfCancellationRequested()", span="85-85"];
m18_27 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="var timeoutCts = new CancellationTokenSource(JobInitializationWaitTimeout)", span="89-89"];
m18_53 [cluster="string.Equals(string, System.StringComparison)", file="RecurringJob.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m18_57 [cluster="Hangfire.Logging.ILog.Info(string)", file="RecurringJob.cs", label="Entry Hangfire.Logging.ILog.Info(string)", span="204-204"];
m18_7 [cluster="System.Func<TResult>.Invoke()", file="RecurringJob.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m18_82 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="RecurringJob.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m18_47 [cluster="Hangfire.RecurringJob.GetRecurringJobId(Hangfire.Common.Job)", color=green, community=0, file="RecurringJob.cs", label="return job.ToString();", prediction=19, span="124-124"];
m18_29 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="var processingState = new ProcessingState(context.ServerId, _workerId)", span="94-94"];
m18_30 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="var appliedState = TryChangeState(\r\n                            context, \r\n                            connection, \r\n                            fetchedJob, \r\n                            processingState, \r\n                            new[] { EnqueuedState.StateName, ProcessingState.StateName },\r\n                            linkedCts.Token)", span="96-102"];
m18_31 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="appliedState == null || !appliedState.Name.Equals(ProcessingState.StateName, StringComparison.OrdinalIgnoreCase)", span="106-106"];
m18_18 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="RecurringJob.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m18_78 [cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="RecurringJob.cs", label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25"];
m18_58 [cluster="Hangfire.Logging.ILog.ErrorException(string, System.Exception)", file="RecurringJob.cs", label="Entry Hangfire.Logging.ILog.ErrorException(string, System.Exception)", span="161-161"];
m18_117 [cluster="Hangfire.Server.IBackgroundJobPerformer.Perform(Hangfire.Server.PerformContext)", file="RecurringJob.cs", label="Entry Hangfire.Server.IBackgroundJobPerformer.Perform(Hangfire.Server.PerformContext)", span="20-20"];
m18_40 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="context.IsShutdownRequested", span="143-143"];
m18_41 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="Logger.Info(String.Format(\r\n                            ''Shutdown request requested while processing background job '{0}'. It will be re-queued.'',\r\n                            fetchedJob.JobId))", span="145-147"];
m18_43 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="Requeue(fetchedJob)", span="154-154"];
m18_39 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label=Exception, span="141-141"];
m18_42 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="Logger.ErrorException(''An exception occurred while processing a job. It will be re-queued.'', ex)", span="151-151"];
m18_44 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="throw;", span="155-155"];
m18_45 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RecurringJob.cs", label="Exit Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="78-78"];
m18_114 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, string, System.Threading.CancellationToken)", file="RecurringJob.cs", label="Entry Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(Hangfire.Storage.IStorageConnection, string, string, string, System.Threading.CancellationToken)", span="32-32"];
m18_115 [cluster="Hangfire.Server.PerformContext.PerformContext(Hangfire.Storage.IStorageConnection, Hangfire.BackgroundJob, Hangfire.IJobCancellationToken)", file="RecurringJob.cs", label="Entry Hangfire.Server.PerformContext.PerformContext(Hangfire.Storage.IStorageConnection, Hangfire.BackgroundJob, Hangfire.IJobCancellationToken)", span="36-36"];
m18_52 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="Entry Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", span="166-166"];
m18_65 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="Exception exception = null", span="174-174"];
m18_68 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="return _stateChanger.ChangeState(new StateChangeContext(\r\n                        context.Storage,\r\n                        connection,\r\n                        fetchedJob.JobId,\r\n                        state,\r\n                        expectedStates,\r\n                        cancellationToken));", span="180-186"];
m18_72 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="context.CancellationToken.WaitHandle.WaitOne(TimeSpan.FromSeconds(retryAttempt))", span="197-197"];
m18_73 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="context.CancellationToken.ThrowIfCancellationRequested()", span="198-198"];
m18_75 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="return _stateChanger.ChangeState(new StateChangeContext(\r\n                context.Storage,\r\n                connection,\r\n                fetchedJob.JobId,\r\n                new FailedState(exception) { Reason = $''Failed to change state to a '{state.Name}' one due to an exception after {MaxStateChangeAttempts} retry attempts'' },\r\n                expectedStates,\r\n                cancellationToken));", span="201-207"];
m18_66 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="var retryAttempt = 0", span="176-176"];
m18_67 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="retryAttempt < MaxStateChangeAttempts", span="176-176"];
m18_70 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="Logger.DebugException(\r\n                        String.Format(''State change attempt {0} of {1} failed due to an error, see inner exception for details'', retryAttempt+1, MaxStateChangeAttempts), \r\n                        ex)", span="190-192"];
m18_74 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="retryAttempt++", span="176-176"];
m18_69 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label=Exception, span="188-188"];
m18_71 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="exception = ex", span="194-194"];
m18_76 [cluster="Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RecurringJob.cs", label="Exit Hangfire.Server.Worker.TryChangeState(Hangfire.Server.BackgroundProcessContext, Hangfire.Storage.IStorageConnection, Hangfire.Storage.IFetchedJob, Hangfire.States.IState, string[], System.Threading.CancellationToken)", span="166-166"];
m18_113 [cluster="Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", file="RecurringJob.cs", label="Entry Hangfire.BackgroundJob.BackgroundJob(string, Hangfire.Common.Job, System.DateTime)", span="25-25"];
m18_50 [cluster="System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", file="RecurringJob.cs", label="Entry System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", span="0-0"];
m18_120 [file="RecurringJob.cs", label="Hangfire.Server.Worker", span=""];
m19_15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="ServerOwinExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m19_18 [cluster="System.Threading.Timer.Timer(System.Threading.TimerCallback, object, System.TimeSpan, System.TimeSpan)", file="ServerOwinExtensions.cs", label="Entry System.Threading.Timer.Timer(System.Threading.TimerCallback, object, System.TimeSpan, System.TimeSpan)", span="0-0"];
m19_19 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.RemoveFromQueue()", file="ServerOwinExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerTimeoutJob.RemoveFromQueue()", span="47-47"];
m19_20 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.RemoveFromQueue()", file="ServerOwinExtensions.cs", label=_syncRoot, span="49-49"];
m19_21 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.RemoveFromQueue()", file="ServerOwinExtensions.cs", label="_storage.UseConnection(null, connection =>\r\n                {\r\n                    connection.Execute(\r\n                        $''delete from {_storage.SchemaName}.JobQueue where Id = @id'',\r\n                        new { id = Id },\r\n                        commandTimeout: _storage.CommandTimeout);\r\n                })", span="51-57"];
m19_22 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.RemoveFromQueue()", file="ServerOwinExtensions.cs", label="_removedFromQueue = true", span="59-59"];
m19_23 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.RemoveFromQueue()", file="ServerOwinExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerTimeoutJob.RemoveFromQueue()", span="47-47"];
m19_46 [cluster="System.Threading.Timer.Dispose()", file="ServerOwinExtensions.cs", label="Entry System.Threading.Timer.Dispose()", span="0-0"];
m19_29 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", file="ServerOwinExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", span="63-63"];
m19_30 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", file="ServerOwinExtensions.cs", label=_syncRoot, span="65-65"];
m19_31 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", file="ServerOwinExtensions.cs", label="_storage.UseConnection(null, connection =>\r\n                {\r\n                    connection.Execute(\r\n                        $''update {_storage.SchemaName}.JobQueue set FetchedAt = null where Id = @id'',\r\n                        new { id = Id },\r\n                        commandTimeout: _storage.CommandTimeout);\r\n                })", span="67-73"];
m19_32 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", file="ServerOwinExtensions.cs", label="_requeued = true", span="75-75"];
m19_33 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", file="ServerOwinExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", span="63-63"];
m19_28 [cluster="Unk.Execute", file="ServerOwinExtensions.cs", label="Entry Unk.Execute", span=""];
m19_56 [cluster="Hangfire.Logging.ILog.Trace(string)", file="ServerOwinExtensions.cs", label="Entry Hangfire.Logging.ILog.Trace(string)", span="235-235"];
m19_17 [cluster="System.TimeSpan.FromSeconds(double)", file="ServerOwinExtensions.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m19_24 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection, System.Action<DbConnection>)", file="ServerOwinExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(DbConnection, System.Action<DbConnection>)", span="171-171"];
m19_57 [cluster="Hangfire.Logging.ILog.DebugException(string, System.Exception)", file="ServerOwinExtensions.cs", label="Entry Hangfire.Logging.ILog.DebugException(string, System.Exception)", span="133-133"];
m19_0 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", span="20-20"];
m19_1 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="storage == null", span="26-26"];
m19_2 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="throw new ArgumentNullException(nameof(storage));", span="26-26"];
m19_3 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="jobId == null", span="27-27"];
m19_4 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="throw new ArgumentNullException(nameof(jobId));", span="27-27"];
m19_5 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="queue == null", span="28-28"];
m19_6 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="throw new ArgumentNullException(nameof(queue));", span="28-28"];
m19_7 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="_storage = storage", span="29-29"];
m19_8 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="Id = id", span="31-31"];
m19_9 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="JobId = jobId", span="32-32"];
m19_10 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="Queue = queue", span="33-33"];
m19_11 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="storage.SlidingInvisibilityTimeout.HasValue", span="35-35"];
m19_12 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="var keepAliveInterval =\r\n                    TimeSpan.FromSeconds(storage.SlidingInvisibilityTimeout.Value.TotalSeconds / 5)", span="37-38"];
m19_13 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="_timer = new Timer(ExecuteKeepAliveQuery, null, keepAliveInterval, keepAliveInterval)", span="39-39"];
m19_14 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="ServerOwinExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", span="20-20"];
m19_16 [cluster="Unk.nameof", file="ServerOwinExtensions.cs", label="Entry Unk.nameof", span=""];
m19_37 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="ServerOwinExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", span="79-79"];
m19_38 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="ServerOwinExtensions.cs", label=_disposed, span="81-81"];
m19_39 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="ServerOwinExtensions.cs", label="return;", span="81-81"];
m19_40 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="ServerOwinExtensions.cs", label="_disposed = true", span="82-82"];
m19_41 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="ServerOwinExtensions.cs", label="_timer?.Dispose()", span="84-84"];
m19_42 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="ServerOwinExtensions.cs", label=_syncRoot, span="86-86"];
m19_43 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="ServerOwinExtensions.cs", label="!_removedFromQueue && !_requeued", span="88-88"];
m19_44 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="ServerOwinExtensions.cs", label="Requeue()", span="90-90"];
m19_45 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="ServerOwinExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", span="79-79"];
m19_58 [cluster="lambda expression", file="ServerOwinExtensions.cs", label="Entry lambda expression", span="103-109"];
m19_25 [cluster="lambda expression", file="ServerOwinExtensions.cs", label="Entry lambda expression", span="51-57"];
m19_26 [cluster="lambda expression", file="ServerOwinExtensions.cs", label="connection.Execute(\r\n                        $''delete from {_storage.SchemaName}.JobQueue where Id = @id'',\r\n                        new { id = Id },\r\n                        commandTimeout: _storage.CommandTimeout)", span="53-56"];
m19_27 [cluster="lambda expression", file="ServerOwinExtensions.cs", label="Exit lambda expression", span="51-57"];
m19_34 [cluster="lambda expression", file="ServerOwinExtensions.cs", label="Entry lambda expression", span="67-73"];
m19_35 [cluster="lambda expression", file="ServerOwinExtensions.cs", label="connection.Execute(\r\n                        $''update {_storage.SchemaName}.JobQueue set FetchedAt = null where Id = @id'',\r\n                        new { id = Id },\r\n                        commandTimeout: _storage.CommandTimeout)", span="69-72"];
m19_36 [cluster="lambda expression", file="ServerOwinExtensions.cs", label="Exit lambda expression", span="67-73"];
m19_59 [cluster="lambda expression", file="ServerOwinExtensions.cs", label="connection.Execute(\r\n                            $''update {_storage.SchemaName}.JobQueue set FetchedAt = getutcdate() where Id = @id'',\r\n                            new { id = Id },\r\n                            commandTimeout: _storage.CommandTimeout)", span="105-108"];
m19_60 [cluster="lambda expression", file="ServerOwinExtensions.cs", label="Exit lambda expression", span="103-109"];
m19_47 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="ServerOwinExtensions.cs", label="Entry Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", span="95-95"];
m19_48 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="ServerOwinExtensions.cs", label=_syncRoot, span="97-97"];
m19_49 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="ServerOwinExtensions.cs", label="_requeued || _removedFromQueue", span="99-99"];
m19_50 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="ServerOwinExtensions.cs", label="return;", span="99-99"];
m19_51 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="ServerOwinExtensions.cs", label="_storage.UseConnection(null, connection =>\r\n                    {\r\n                        connection.Execute(\r\n                            $''update {_storage.SchemaName}.JobQueue set FetchedAt = getutcdate() where Id = @id'',\r\n                            new { id = Id },\r\n                            commandTimeout: _storage.CommandTimeout);\r\n                    })", span="103-109"];
m19_52 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="ServerOwinExtensions.cs", label="Logger.Trace($''Keep-alive query for message {Id} sent'')", span="111-111"];
m19_53 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="ServerOwinExtensions.cs", label=Exception, span="113-113"];
m19_54 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="ServerOwinExtensions.cs", label="Logger.DebugException($''Unable to execute keep-alive query for message {Id}'', ex)", span="115-115"];
m19_55 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="ServerOwinExtensions.cs", label="Exit Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", span="95-95"];
m19_61 [file="ServerOwinExtensions.cs", label="Hangfire.SqlServer.SqlServerTimeoutJob", span=""];
m20_0 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="ServerWatchdogOptions.cs", label="Entry Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="23-23"];
m20_1 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="ServerWatchdogOptions.cs", label="ServerTimeout = ServerWatchdog.DefaultServerTimeout", span="25-25"];
m20_2 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="ServerWatchdogOptions.cs", label="CheckInterval = ServerWatchdog.DefaultCheckInterval", span="26-26"];
m20_3 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="ServerWatchdogOptions.cs", label="Exit Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="23-23"];
m20_4 [file="ServerWatchdogOptions.cs", label="Hangfire.Server.ServerWatchdogOptions", span=""];
m21_158 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="197-197"];
m21_159 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="StartupConfiguration.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="199-202"];
m21_160 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="204-217"];
m21_161 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="197-197"];
m21_309 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="432-432"];
m21_310 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="434-440"];
m21_311 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="432-432"];
m21_308 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m21_107 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="120-120"];
m21_108 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="StartupConfiguration.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="122-125"];
m21_109 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n            })", span="127-146"];
m21_110 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="120-120"];
m21_191 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m21_406 [cluster="System.DateTime.AddHours(double)", file="StartupConfiguration.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m21_75 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="StartupConfiguration.cs", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30"];
m21_3 [cluster="Unk.UseConnection", file="StartupConfiguration.cs", label="Entry Unk.UseConnection", span=""];
m21_335 [cluster="string.StartsWith(string)", file="StartupConfiguration.cs", label="Entry string.StartsWith(string)", span="0-0"];
m21_368 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="509-509"];
m21_369 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="StartupConfiguration.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data)\r\nvalues\r\n('server1', ''),\r\n('server2', '')''", span="511-515"];
m21_370 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime?)x.LastHeartbeat);\r\n\r\n                Assert.NotNull(servers[''server1'']);\r\n                Assert.Null(servers[''server2'']);\r\n            })", span="517-528"];
m21_371 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="509-509"];
m21_394 [cluster="System.TimeSpan.FromMinutes(double)", file="StartupConfiguration.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m21_0 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="15-15"];
m21_1 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="17-21"];
m21_2 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="15-15"];
m21_26 [cluster="Unk.Equal", file="StartupConfiguration.cs", label="Entry Unk.Equal", span=""];
m21_10 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="25-25"];
m21_11 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireJobLock(''1'');\r\n                Assert.NotNull(@lock);\r\n            })", span="27-31"];
m21_12 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="25-25"];
m21_31 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m21_79 [cluster="Unk.ToDictionary", file="StartupConfiguration.cs", label="Entry Unk.ToDictionary", span=""];
m21_219 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="302-302"];
m21_220 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="304-310"];
m21_221 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="302-302"];
m21_297 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="420-420"];
m21_298 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="422-428"];
m21_299 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="420-420"];
m21_202 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="268-268"];
m21_203 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="270-274"];
m21_204 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="268-268"];
m21_407 [cluster="System.TimeSpan.FromHours(double)", file="StartupConfiguration.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m21_416 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="571-571"];
m21_417 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="StartupConfiguration.cs", label="var connection = new SqlServerConnection(ConnectionUtils.CreateConnection())", span="573-573"];
m21_418 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="StartupConfiguration.cs", label="action(connection)", span="575-575"];
m21_419 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="571-571"];
m21_181 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="244-244"];
m21_182 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="246-252"];
m21_183 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="244-244"];
m21_272 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="380-380"];
m21_273 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="StartupConfiguration.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="382-383"];
m21_274 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="380-380"];
m21_408 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="562-562"];
m21_409 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="StartupConfiguration.cs", label="var sqlConnection = ConnectionUtils.CreateConnection()", span="564-564"];
m21_411 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="StartupConfiguration.cs", label="action(sqlConnection, connection)", span="567-567"];
m21_410 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="StartupConfiguration.cs", label="var connection = new SqlServerConnection(sqlConnection)", span="565-565"];
m21_412 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="562-562"];
m21_25 [cluster="Unk.>", file="StartupConfiguration.cs", label="Entry Unk.>", span=""];
m21_98 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m21_126 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="150-150"];
m21_127 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="152-158"];
m21_128 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="150-150"];
m21_230 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="314-314"];
m21_231 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null));\r\n\r\n                Assert.Equal(''queue'', exception.ParamName);\r\n            })", span="316-322"];
m21_232 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="314-314"];
m21_8 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="47-47"];
m21_122 [cluster="int.ToString()", file="StartupConfiguration.cs", label="Entry int.ToString()", span="0-0"];
m21_415 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="StartupConfiguration.cs", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
m21_32 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="50-50"];
m21_33 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="52-61"];
m21_34 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="50-50"];
m21_209 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="278-278"];
m21_210 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="StartupConfiguration.cs", label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="280-287"];
m21_211 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="289-298"];
m21_212 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="278-278"];
m21_261 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="368-368"];
m21_262 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="370-376"];
m21_263 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="368-368"];
m21_72 [cluster="Unk.Query", file="StartupConfiguration.cs", label="Entry Unk.Query", span=""];
m21_319 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="444-444"];
m21_320 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.Null(server.HeartBeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="446-471"];
m21_321 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="444-444"];
m21_70 [cluster="System.TimeSpan.FromDays(double)", file="StartupConfiguration.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m21_420 [cluster="System.Action<T>.Invoke(T)", file="StartupConfiguration.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m21_74 [cluster="Unk.ToString", file="StartupConfiguration.cs", label="Entry Unk.ToString", span=""];
m21_77 [cluster="System.DateTime.AddDays(double)", file="StartupConfiguration.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m21_9 [cluster="Unk.NotNull", file="StartupConfiguration.cs", label="Entry Unk.NotNull", span=""];
m21_30 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="StartupConfiguration.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m21_47 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="65-65"];
m21_48 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(ConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''Hello'', job.Arguments[0]);\r\n\r\n                Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            })", span="67-99"];
m21_49 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="65-65"];
m21_218 [cluster="Unk.GetJobParameter", file="StartupConfiguration.cs", label="Entry Unk.GetJobParameter", span=""];
m21_396 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="539-539"];
m21_397 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="StartupConfiguration.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="541-543"];
m21_398 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="545-559"];
m21_399 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="539-539"];
m21_358 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="502-502"];
m21_359 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="504-505"];
m21_360 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="502-502"];
m21_137 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="162-162"];
m21_138 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="164-170"];
m21_139 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="162-162"];
m21_357 [cluster="Unk.NotEqual", file="StartupConfiguration.cs", label="Entry Unk.NotEqual", span=""];
m21_385 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="532-532"];
m21_386 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="StartupConfiguration.cs", label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="534-535"];
m21_387 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="532-532"];
m21_106 [cluster="Unk.Null", file="StartupConfiguration.cs", label="Entry Unk.Null", span=""];
m21_147 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="174-174"];
m21_148 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="StartupConfiguration.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="176-179"];
m21_149 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="181-193"];
m21_150 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="174-174"];
m21_395 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m21_414 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection)", span="35-35"];
m21_307 [cluster="HangFire.Server.ServerContext.ServerContext()", file="StartupConfiguration.cs", label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18"];
m21_99 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="110-110"];
m21_100 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="112-116"];
m21_101 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="110-110"];
m21_50 [cluster="Unk.UseConnections", file="StartupConfiguration.cs", label="Entry Unk.UseConnections", span=""];
m21_400 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="545-559"];
m21_4 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="17-21"];
m21_5 [cluster="lambda expression", file="StartupConfiguration.cs", label="var transaction = connection.CreateWriteTransaction()", span="19-19"];
m21_6 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.NotNull(transaction)", span="20-20"];
m21_7 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="17-21"];
m21_13 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="27-31"];
m21_14 [cluster="lambda expression", file="StartupConfiguration.cs", label="var @lock = connection.AcquireJobLock(''1'')", span="29-29"];
m21_15 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.NotNull(@lock)", span="30-30"];
m21_16 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="27-31"];
m21_21 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="37-46"];
m21_22 [cluster="lambda expression", file="StartupConfiguration.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero))", span="39-43"];
m21_28 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero)", span="40-43"];
m21_23 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''job'', exception.ParamName)", span="45-45"];
m21_27 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="40-43"];
m21_24 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="37-46"];
m21_29 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="40-43"];
m21_35 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="52-61"];
m21_36 [cluster="lambda expression", file="StartupConfiguration.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero))", span="54-58"];
m21_40 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero)", span="55-58"];
m21_37 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''parameters'', exception.ParamName)", span="60-60"];
m21_39 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="55-58"];
m21_38 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="52-61"];
m21_41 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="55-58"];
m21_43 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="56-56"];
m21_44 [cluster="lambda expression", file="StartupConfiguration.cs", label="SampleMethod(''hello'')", span="56-56"];
m21_45 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="56-56"];
m21_51 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="67-99"];
m21_52 [cluster="lambda expression", file="StartupConfiguration.cs", label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1))", span="69-72"];
m21_55 [cluster="lambda expression", file="StartupConfiguration.cs", label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="77-77"];
m21_66 [cluster="lambda expression", file="StartupConfiguration.cs", label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="92-95"];
m21_53 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.NotNull(jobId)", span="74-74"];
m21_80 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="70-70"];
m21_54 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.NotEmpty(jobId)", span="75-75"];
m21_56 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="78-78"];
m21_57 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(null, (int?) sqlJob.StateId)", span="79-79"];
m21_58 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(null, (string) sqlJob.StateName)", span="80-80"];
m21_59 [cluster="lambda expression", file="StartupConfiguration.cs", label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="82-82"];
m21_60 [cluster="lambda expression", file="StartupConfiguration.cs", label="invocationData.Arguments = sqlJob.Arguments", span="83-83"];
m21_65 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1))", span="90-90"];
m21_61 [cluster="lambda expression", file="StartupConfiguration.cs", label="var job = invocationData.Deserialize()", span="85-85"];
m21_62 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(typeof(ConnectionFacts), job.Type)", span="86-86"];
m21_63 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="87-87"];
m21_64 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''Hello'', job.Arguments[0])", span="88-88"];
m21_67 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''Value1'', parameters[''Key1''])", span="97-97"];
m21_83 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="95-95"];
m21_86 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="95-95"];
m21_68 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''Value2'', parameters[''Key2''])", span="98-98"];
m21_69 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="67-99"];
m21_81 [cluster="lambda expression", file="StartupConfiguration.cs", label="SampleMethod(''Hello'')", span="70-70"];
m21_82 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="70-70"];
m21_84 [cluster="lambda expression", file="StartupConfiguration.cs", label="(string) x.Name", span="95-95"];
m21_85 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="95-95"];
m21_87 [cluster="lambda expression", file="StartupConfiguration.cs", label="(string) x.Value", span="95-95"];
m21_88 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="95-95"];
m21_92 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="105-106"];
m21_93 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="105-106"];
m21_96 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.GetJobData(null)", span="106-106"];
m21_94 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="105-106"];
m21_95 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="106-106"];
m21_97 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="106-106"];
m21_102 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="112-116"];
m21_103 [cluster="lambda expression", file="StartupConfiguration.cs", label="var result = connection.GetJobData(''1'')", span="114-114"];
m21_104 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Null(result)", span="115-115"];
m21_105 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="112-116"];
m21_113 [cluster="lambda expression", file="StartupConfiguration.cs", label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="131-138"];
m21_111 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="127-146"];
m21_112 [cluster="lambda expression", file="StartupConfiguration.cs", label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="129-129"];
m21_114 [cluster="lambda expression", file="StartupConfiguration.cs", label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="140-140"];
m21_123 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="129-129"];
m21_115 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.NotNull(result)", span="142-142"];
m21_116 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.NotNull(result.Job)", span="143-143"];
m21_117 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''Succeeded'', result.State)", span="144-144"];
m21_118 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="145-145"];
m21_119 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="127-146"];
m21_124 [cluster="lambda expression", file="StartupConfiguration.cs", label="SampleMethod(''wrong'')", span="129-129"];
m21_125 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="129-129"];
m21_129 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="152-158"];
m21_130 [cluster="lambda expression", file="StartupConfiguration.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="154-155"];
m21_134 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.SetJobParameter(null, ''name'', ''value'')", span="155-155"];
m21_131 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''id'', exception.ParamName)", span="157-157"];
m21_133 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="155-155"];
m21_132 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="152-158"];
m21_135 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="155-155"];
m21_140 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="164-170"];
m21_141 [cluster="lambda expression", file="StartupConfiguration.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="166-167"];
m21_145 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.SetJobParameter(''1'', null, ''value'')", span="167-167"];
m21_142 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''name'', exception.ParamName)", span="169-169"];
m21_144 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="167-167"];
m21_143 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="164-170"];
m21_146 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="167-167"];
m21_152 [cluster="lambda expression", file="StartupConfiguration.cs", label="var job = sql.Query(arrangeSql).Single()", span="183-183"];
m21_151 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="181-193"];
m21_154 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="186-186"];
m21_155 [cluster="lambda expression", file="StartupConfiguration.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="188-190"];
m21_153 [cluster="lambda expression", file="StartupConfiguration.cs", label="string jobId = job.Id.ToString()", span="184-184"];
m21_156 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''Value'', parameter.Value)", span="192-192"];
m21_157 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="181-193"];
m21_163 [cluster="lambda expression", file="StartupConfiguration.cs", label="var job = sql.Query(arrangeSql).Single()", span="206-206"];
m21_162 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="204-217"];
m21_165 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="209-209"];
m21_166 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="210-210"];
m21_167 [cluster="lambda expression", file="StartupConfiguration.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="212-214"];
m21_164 [cluster="lambda expression", file="StartupConfiguration.cs", label="string jobId = job.Id.ToString()", span="207-207"];
m21_168 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''AnotherValue'', parameter.Value)", span="216-216"];
m21_169 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="204-217"];
m21_175 [cluster="lambda expression", file="StartupConfiguration.cs", label="var job = sql.Query(arrangeSql).Single()", span="230-230"];
m21_174 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="228-240"];
m21_177 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.SetJobParameter(jobId, ''Name'', null)", span="233-233"];
m21_178 [cluster="lambda expression", file="StartupConfiguration.cs", label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="235-237"];
m21_176 [cluster="lambda expression", file="StartupConfiguration.cs", label="string jobId = job.Id.ToString()", span="231-231"];
m21_179 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal((string) null, parameter.Value)", span="239-239"];
m21_180 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="228-240"];
m21_184 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="246-252"];
m21_185 [cluster="lambda expression", file="StartupConfiguration.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="248-249"];
m21_189 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.GetJobParameter(null, ''hello'')", span="249-249"];
m21_186 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''id'', exception.ParamName)", span="251-251"];
m21_188 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="249-249"];
m21_187 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="246-252"];
m21_190 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="249-249"];
m21_195 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="258-264"];
m21_196 [cluster="lambda expression", file="StartupConfiguration.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="260-261"];
m21_200 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.GetJobParameter(''1'', null)", span="261-261"];
m21_197 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''name'', exception.ParamName)", span="263-263"];
m21_199 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="261-261"];
m21_198 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="258-264"];
m21_201 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="261-261"];
m21_205 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="270-274"];
m21_206 [cluster="lambda expression", file="StartupConfiguration.cs", label="var value = connection.GetJobParameter(''1'', ''hello'')", span="272-272"];
m21_207 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Null(value)", span="273-273"];
m21_208 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="270-274"];
m21_214 [cluster="lambda expression", file="StartupConfiguration.cs", label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="291-293"];
m21_213 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="289-298"];
m21_215 [cluster="lambda expression", file="StartupConfiguration.cs", label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="295-295"];
m21_216 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''value'', value)", span="297-297"];
m21_217 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="289-298"];
m21_222 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="304-310"];
m21_223 [cluster="lambda expression", file="StartupConfiguration.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''))", span="306-307"];
m21_227 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.DeleteJobFromQueue(null, ''default'')", span="307-307"];
m21_224 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''id'', exception.ParamName)", span="309-309"];
m21_226 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="307-307"];
m21_225 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="304-310"];
m21_228 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="307-307"];
m21_233 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="316-322"];
m21_234 [cluster="lambda expression", file="StartupConfiguration.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null))", span="318-319"];
m21_238 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.DeleteJobFromQueue(''1'', null)", span="319-319"];
m21_235 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''queue'', exception.ParamName)", span="321-321"];
m21_237 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="319-319"];
m21_236 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="316-322"];
m21_239 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="319-319"];
m21_245 [cluster="lambda expression", file="StartupConfiguration.cs", label="sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' })", span="334-334"];
m21_244 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="332-340"];
m21_246 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.DeleteJobFromQueue(''1'', ''default'')", span="336-336"];
m21_247 [cluster="lambda expression", file="StartupConfiguration.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="338-338"];
m21_248 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(0, count)", span="339-339"];
m21_249 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="332-340"];
m21_256 [cluster="lambda expression", file="StartupConfiguration.cs", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    })", span="352-358"];
m21_255 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="350-364"];
m21_257 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.DeleteJobFromQueue(''1'', ''default'')", span="360-360"];
m21_258 [cluster="lambda expression", file="StartupConfiguration.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="362-362"];
m21_259 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(2, count)", span="363-363"];
m21_260 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="350-364"];
m21_264 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="370-376"];
m21_265 [cluster="lambda expression", file="StartupConfiguration.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="372-373"];
m21_269 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="373-373"];
m21_266 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''key'', exception.ParamName)", span="375-375"];
m21_268 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="373-373"];
m21_267 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="370-376"];
m21_270 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="373-373"];
m21_275 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="382-383"];
m21_276 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="382-383"];
m21_279 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="383-383"];
m21_277 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="382-383"];
m21_278 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="383-383"];
m21_280 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="383-383"];
m21_284 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="389-395"];
m21_285 [cluster="lambda expression", file="StartupConfiguration.cs", label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="391-392"];
m21_286 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Null(result)", span="394-394"];
m21_287 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="389-395"];
m21_293 [cluster="lambda expression", file="StartupConfiguration.cs", label="sql.Execute(arrangeSql)", span="411-411"];
m21_292 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="409-416"];
m21_294 [cluster="lambda expression", file="StartupConfiguration.cs", label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="413-413"];
m21_295 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''-1.0'', result)", span="415-415"];
m21_296 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="409-416"];
m21_300 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="422-428"];
m21_301 [cluster="lambda expression", file="StartupConfiguration.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="424-425"];
m21_305 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.AnnounceServer(null, new ServerContext())", span="425-425"];
m21_302 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''serverId'', exception.ParamName)", span="427-427"];
m21_304 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="425-425"];
m21_303 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="422-428"];
m21_306 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="425-425"];
m21_312 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="434-440"];
m21_313 [cluster="lambda expression", file="StartupConfiguration.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="436-437"];
m21_317 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.AnnounceServer(''server'', null)", span="437-437"];
m21_314 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''context'', exception.ParamName)", span="439-439"];
m21_316 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="437-437"];
m21_315 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="434-440"];
m21_318 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="437-437"];
m21_322 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="446-471"];
m21_323 [cluster="lambda expression", file="StartupConfiguration.cs", label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="448-452"];
m21_324 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.AnnounceServer(''server'', context1)", span="453-453"];
m21_325 [cluster="lambda expression", file="StartupConfiguration.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="455-455"];
m21_330 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.AnnounceServer(''server'', context2)", span="467-467"];
m21_331 [cluster="lambda expression", file="StartupConfiguration.cs", label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="468-468"];
m21_326 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''server'', server.Id)", span="456-456"];
m21_327 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="457-459"];
m21_328 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Null(server.HeartBeat)", span="460-460"];
m21_329 [cluster="lambda expression", file="StartupConfiguration.cs", label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="462-466"];
m21_332 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''server'', sameServer.Id)", span="469-469"];
m21_333 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Contains(''1000'', sameServer.Data)", span="470-470"];
m21_334 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="446-471"];
m21_340 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="477-478"];
m21_341 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="477-478"];
m21_344 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.RemoveServer(null)", span="478-478"];
m21_342 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="477-478"];
m21_343 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="478-478"];
m21_345 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="478-478"];
m21_352 [cluster="lambda expression", file="StartupConfiguration.cs", label="sql.Execute(arrangeSql)", span="492-492"];
m21_351 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="490-498"];
m21_353 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.RemoveServer(''Server1'')", span="494-494"];
m21_354 [cluster="lambda expression", file="StartupConfiguration.cs", label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="496-496"];
m21_355 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="497-497"];
m21_356 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="490-498"];
m21_361 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="504-505"];
m21_362 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="504-505"];
m21_365 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.Heartbeat(null)", span="505-505"];
m21_363 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="504-505"];
m21_364 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="505-505"];
m21_366 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="505-505"];
m21_373 [cluster="lambda expression", file="StartupConfiguration.cs", label="sql.Execute(arrangeSql)", span="519-519"];
m21_372 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="517-528"];
m21_374 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.Heartbeat(''server1'')", span="521-521"];
m21_375 [cluster="lambda expression", file="StartupConfiguration.cs", label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime?)x.LastHeartbeat)", span="523-524"];
m21_376 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.NotNull(servers[''server1''])", span="526-526"];
m21_379 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="524-524"];
m21_382 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="524-524"];
m21_377 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Null(servers[''server2''])", span="527-527"];
m21_378 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="517-528"];
m21_380 [cluster="lambda expression", file="StartupConfiguration.cs", label="(string)x.Id", span="524-524"];
m21_381 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="524-524"];
m21_383 [cluster="lambda expression", file="StartupConfiguration.cs", label="(DateTime?)x.LastHeartbeat", span="524-524"];
m21_384 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="524-524"];
m21_388 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="534-535"];
m21_389 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="534-535"];
m21_392 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="535-535"];
m21_390 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="534-535"];
m21_391 [cluster="lambda expression", file="StartupConfiguration.cs", label="Entry lambda expression", span="535-535"];
m21_393 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="535-535"];
m21_401 [cluster="lambda expression", file="StartupConfiguration.cs", label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="547-553"];
m21_402 [cluster="lambda expression", file="StartupConfiguration.cs", label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="555-555"];
m21_403 [cluster="lambda expression", file="StartupConfiguration.cs", label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="557-557"];
m21_404 [cluster="lambda expression", file="StartupConfiguration.cs", label="Assert.Equal(''server2'', liveServer.Id)", span="558-558"];
m21_405 [cluster="lambda expression", file="StartupConfiguration.cs", label="Exit lambda expression", span="545-559"];
m21_229 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m21_46 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="579-579"];
m21_421 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="579-579"];
m21_170 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="221-221"];
m21_171 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="StartupConfiguration.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="223-226"];
m21_172 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="228-240"];
m21_173 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="221-221"];
m21_136 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m21_192 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="256-256"];
m21_193 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="258-264"];
m21_194 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="256-256"];
m21_281 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="387-387"];
m21_282 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="389-395"];
m21_283 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="387-387"];
m21_271 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m21_336 [cluster="Unk.Contains", file="StartupConfiguration.cs", label="Entry Unk.Contains", span=""];
m21_121 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="StartupConfiguration.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m21_17 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="52-52"];
m21_18 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="35-35"];
m21_19 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="37-46"];
m21_20 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="35-35"];
m21_71 [cluster="Unk.NotEmpty", file="StartupConfiguration.cs", label="Entry Unk.NotEmpty", span=""];
m21_73 [cluster="Unk.Single", file="StartupConfiguration.cs", label="Entry Unk.Single", span=""];
m21_251 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="344-344"];
m21_252 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="StartupConfiguration.cs", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="346-348"];
m21_253 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    }); \r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(2, count);\r\n            })", span="350-364"];
m21_254 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="344-344"];
m21_347 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="482-482"];
m21_348 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="StartupConfiguration.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data)\r\nvalues \r\n('Server1', ''),\r\n('Server2', '')''", span="484-488"];
m21_349 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="490-498"];
m21_350 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="482-482"];
m21_78 [cluster="Unk.True", file="StartupConfiguration.cs", label="Entry Unk.True", span=""];
m21_250 [cluster="Unk.Execute", file="StartupConfiguration.cs", label="Entry Unk.Execute", span=""];
m21_76 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="StartupConfiguration.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m21_346 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m21_42 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="StartupConfiguration.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119"];
m21_413 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m21_367 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m21_288 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="399-399"];
m21_289 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="StartupConfiguration.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="401-407"];
m21_290 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="409-416"];
m21_291 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="399-399"];
m21_89 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="103-103"];
m21_90 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="105-106"];
m21_91 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="103-103"];
m21_120 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="StartupConfiguration.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m21_240 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="326-326"];
m21_241 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="StartupConfiguration.cs", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="328-330"];
m21_242 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="StartupConfiguration.cs", label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' });\r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="332-340"];
m21_243 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="326-326"];
m21_337 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="StartupConfiguration.cs", label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="475-475"];
m21_338 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="StartupConfiguration.cs", label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="477-478"];
m21_339 [cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="StartupConfiguration.cs", label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="475-475"];
m21_422 [file="StartupConfiguration.cs", label="HangFire.SqlServer.Tests.ConnectionFacts", span=""];
m21_423 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_424 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_425 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_426 [file="StartupConfiguration.cs", label=arrangeSql, span=""];
m21_427 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_428 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_429 [file="StartupConfiguration.cs", label=arrangeSql, span=""];
m21_430 [file="StartupConfiguration.cs", label=arrangeSql, span=""];
m21_431 [file="StartupConfiguration.cs", label=arrangeSql, span=""];
m21_432 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_433 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_434 [file="StartupConfiguration.cs", label=arrangeSql, span=""];
m21_435 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_436 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_437 [file="StartupConfiguration.cs", label=arrangeSql, span=""];
m21_438 [file="StartupConfiguration.cs", label=arrangeSql, span=""];
m21_439 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_440 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_441 [file="StartupConfiguration.cs", label=arrangeSql, span=""];
m21_442 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_443 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_444 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_445 [file="StartupConfiguration.cs", label=arrangeSql, span=""];
m21_446 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_447 [file="StartupConfiguration.cs", label=arrangeSql, span=""];
m21_448 [file="StartupConfiguration.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m21_449 [file="StartupConfiguration.cs", label=arrangeSql, span=""];
m0_117 -> m0_120  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m0_28 -> m0_28  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_28 -> m0_32  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_95 -> m0_98  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_47 -> m0_58  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m0_47 -> m0_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m0_47 -> m0_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m0_54 -> m0_62  [color=green, key=1, label=jobId, style=dashed];
m0_56 -> m0_61  [color=green, key=1, label=parameterArray, style=dashed];
m0_16 -> m0_19  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m0_16 -> m0_22  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m0_19 -> m0_22  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_19 -> m0_28  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_27 -> m0_31  [color=green, key=1, label=currentQueryIndex, style=dashed];
m0_27 -> m0_34  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
m0_29 -> m0_35  [color=green, key=1, label=idAndQueue, style=dashed];
m0_29 -> m0_36  [color=green, key=1, label=idAndQueue, style=dashed];
m0_32 -> m0_32  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_32 -> m0_35  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m0_34 -> m0_34  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
m0_33 -> m0_33  [color=green, key=1, label="System.Threading.CancellationToken", style=dashed];
m0_4 -> m0_7  [color=darkseagreen4, key=1, label="Hangfire.Client.IBackgroundJobFactory", style=dashed];
m0_4 -> m0_9  [color=darkseagreen4, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m0_137 -> m0_137  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m0_102 -> m0_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_88 -> m0_91  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_109 -> m0_112  [color=darkseagreen4, key=1, label=double, style=dashed];
m0_44 -> m0_21  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobClient", style=dashed];
m0_44 -> m0_22  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobClient", style=dashed];
m0_44 -> m0_23  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobClient", style=dashed];
m0_142 -> m0_7  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_142 -> m0_15  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m0_142 -> m0_61  [color=green, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_0 -> m3_2  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label="Hangfire.DashboardOptions", style=dashed];
m3_0 -> m3_4  [color=darkseagreen4, key=1, label="Hangfire.DashboardOptions", style=dashed];
m3_18 -> m3_11  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.DashboardContext", style=dashed];
m3_18 -> m3_15  [color=darkseagreen4, key=1, label="Hangfire.Dashboard.DashboardContext", style=dashed];
m4_0 -> m4_2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m4_8 -> m4_13  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m4_8 -> m4_14  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m4_8 -> m4_17  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m4_14 -> m4_14  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m4_14 -> m4_17  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m4_11 -> m4_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_11 -> m4_15  [color=darkseagreen4, key=1, label=removedCount, style=dashed];
m4_36 -> m4_17  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m4_36 -> m4_30  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
m8_6 -> m8_9  [color=darkseagreen4, key=1, label="Hangfire.Server.PerformingContext", style=dashed];
m8_6 -> m8_10  [color=darkseagreen4, key=1, label="Hangfire.Server.PerformingContext", style=dashed];
m8_8 -> m8_10  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_8 -> m8_12  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_8 -> m8_14  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_8 -> m8_16  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_8 -> m8_21  [color=darkseagreen4, key=1, label=queue, style=dashed];
m8_3 -> m8_5  [color=green, key=1, label=queues, style=dashed];
m8_3 -> m8_8  [color=green, key=1, label=queues, style=dashed];
m8_23 -> m8_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_23 -> m8_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_24 -> m8_8  [color=darkseagreen4, key=1, label="Hangfire.DisableConcurrentExecutionAttribute", style=dashed];
m8_25 -> m8_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_25 -> m8_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_27 -> m8_27  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_27 -> m8_29  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_32 -> m8_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_32 -> m8_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_36 -> m8_36  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_36 -> m8_38  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_38 -> m8_38  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_21 -> m8_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_29 -> m8_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_29 -> m8_29  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_34 -> m8_36  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_34 -> m8_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_54 -> m8_2  [color=green, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_6  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_9  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_10  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_12  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_22  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_30  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_33  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_36  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_37  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_38  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_40  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_41  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_42  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m8_54 -> m8_43  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.QueuesPage", style=dashed];
m10_56 -> m10_61  [color=darkseagreen4, key=1, label=connection, style=dashed];
m10_8 -> m10_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_30 -> m10_34  [color=darkseagreen4, key=1, label=connection, style=dashed];
m10_31 -> m10_34  [color=darkseagreen4, key=1, label=entryId, style=dashed];
m10_16 -> m10_20  [color=darkseagreen4, key=1, label=connection, style=dashed];
m10_17 -> m10_20  [color=darkseagreen4, key=1, label=entryId, style=dashed];
m10_38 -> m10_42  [color=darkseagreen4, key=1, label=connection, style=dashed];
m10_39 -> m10_42  [color=darkseagreen4, key=1, label=entryId, style=dashed];
m10_45 -> m10_50  [color=darkseagreen4, key=1, label=connection, style=dashed];
m10_72 -> m10_77  [color=darkseagreen4, key=1, label=connection, style=dashed];
m10_64 -> m10_69  [color=darkseagreen4, key=1, label=connection, style=dashed];
m10_92 -> m10_19  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m10_92 -> m10_20  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m10_92 -> m10_33  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m10_92 -> m10_34  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m10_92 -> m10_41  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m10_92 -> m10_42  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m10_92 -> m10_49  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m10_92 -> m10_60  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m10_92 -> m10_68  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m10_92 -> m10_76  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m10_92 -> m10_90  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ExpirationManagerFacts", style=dashed];
m15_30 -> m15_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m15_35 -> m15_41  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m15_40 -> m15_42  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m15_32 -> m15_56  [color=darkseagreen4, key=1, label="System.Func<Hangfire.Storage.IStorageConnection, T>", style=dashed];
m15_53 -> m15_59  [color=darkseagreen4, key=1, label=resource, style=dashed];
m15_53 -> m15_55  [color=darkseagreen4, key=1, label=resource, style=dashed];
m15_53 -> m15_58  [color=darkseagreen4, key=1, label=resource, style=dashed];
m15_54 -> m15_56  [color=darkseagreen4, key=1, label=connection, style=dashed];
m15_12 -> m15_16  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m15_12 -> m15_18  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m15_12 -> m15_14  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m15_12 -> m15_21  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m15_17 -> m15_17  [color=green, key=1, label=jobsEnqueued, style=dashed];
m15_17 -> m15_19  [color=green, key=1, label=jobsEnqueued, style=dashed];
m15_17 -> m15_20  [color=green, key=1, label=jobsEnqueued, style=dashed];
m15_15 -> m15_17  [color=green, key=1, label=jobsEnqueued, style=dashed];
m15_15 -> m15_19  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m15_15 -> m15_20  [color=darkseagreen4, key=1, label=jobsEnqueued, style=dashed];
m15_4 -> m15_6  [color=darkseagreen4, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m15_66 -> m15_16  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m15_66 -> m15_21  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m15_66 -> m15_27  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m15_66 -> m15_59  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m16_0 -> m16_3  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m16_0 -> m16_4  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m16_6 -> m16_11  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m16_24 -> m16_27  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m16_24 -> m16_28  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m16_24 -> m16_29  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m16_24 -> m16_32  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m16_29 -> m16_29  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m16_31 -> m16_31  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m16_33 -> m16_38  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m16_49 -> m16_53  [color=darkseagreen4, key=1, label=job, style=dashed];
m16_63 -> m16_10  [color=darkseagreen4, key=1, label="HangFire.Client.JobClient", style=dashed];
m16_63 -> m16_32  [color=darkseagreen4, key=1, label="HangFire.Client.JobClient", style=dashed];
m16_63 -> m16_37  [color=darkseagreen4, key=1, label="HangFire.Client.JobClient", style=dashed];
m16_63 -> m16_46  [color=darkseagreen4, key=1, label="HangFire.Client.JobClient", style=dashed];
m17_14 -> m17_10  [color=darkseagreen4, key=1, label="Hangfire.States.ProcessingState", style=dashed];
m18_59 -> m18_86  [color=darkseagreen4, key=1, label="Hangfire.Storage.IFetchedJob", style=dashed];
m18_4 -> m18_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m18_4 -> m18_7  [color=darkseagreen4, key=1, label="Hangfire.Server.IBackgroundJobPerformer", style=dashed];
m18_4 -> m18_8  [color=darkseagreen4, key=1, label="Hangfire.Server.IBackgroundJobPerformer", style=dashed];
m18_4 -> m18_9  [color=darkseagreen4, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m18_4 -> m18_10  [color=darkseagreen4, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m18_28 -> m18_34  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_35 -> m18_37  [color=darkseagreen4, key=1, label=state, style=dashed];
m18_55 -> m18_107  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m18_90 -> m18_93  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m18_97 -> m18_101  [color=darkseagreen4, key=1, label=latency, style=dashed];
m18_99 -> m18_101  [color=darkseagreen4, key=1, label=result, style=dashed];
m18_98 -> m18_100  [color=darkseagreen4, key=1, label=duration, style=dashed];
m18_98 -> m18_101  [color=darkseagreen4, key=1, label=duration, style=dashed];
m18_20 -> m18_22  [color=darkseagreen4, key=1, label=job, style=dashed];
m18_32 -> m18_37  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_12 -> m18_22  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_21 -> m18_23  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m18_21 -> m18_26  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m18_21 -> m18_32  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m18_21 -> m18_37  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m18_21 -> m18_40  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m18_24 -> m18_37  [color=darkseagreen4, key=1, label=connection, style=dashed];
m18_8 -> m18_15  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_13 -> m18_15  [color=darkseagreen4, key=1, label=job, style=dashed];
m18_25 -> m18_33  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m18_25 -> m18_37  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m18_25 -> m18_38  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m18_25 -> m18_41  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m18_25 -> m18_43  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m18_52 -> m18_68  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m18_52 -> m18_72  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m18_52 -> m18_73  [color=darkseagreen4, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m18_66 -> m18_70  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m18_66 -> m18_72  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m18_66 -> m18_74  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m18_74 -> m18_74  [color=darkseagreen4, key=1, label=retryAttempt, style=dashed];
m18_120 -> m18_37  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
m18_120 -> m18_61  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
m18_120 -> m18_68  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
m19_21 -> m19_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_31 -> m19_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_0 -> m19_2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m19_0 -> m19_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_0 -> m19_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_0 -> m19_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_0 -> m19_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_0 -> m19_11  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m19_0 -> m19_12  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m19_51 -> m19_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_61 -> m19_20  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m19_61 -> m19_30  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m19_61 -> m19_38  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m19_61 -> m19_41  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m19_61 -> m19_42  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m19_61 -> m19_43  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m19_61 -> m19_44  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m19_61 -> m19_48  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m19_61 -> m19_49  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m19_61 -> m19_52  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m19_61 -> m19_54  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m21_160 -> m21_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_310 -> m21_312  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_109 -> m21_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_369 -> m21_373  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m21_370 -> m21_372  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_1 -> m21_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_11 -> m21_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_220 -> m21_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_298 -> m21_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_203 -> m21_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_416 -> m21_418  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerConnection>", style=dashed];
m21_182 -> m21_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_273 -> m21_275  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_408 -> m21_411  [color=darkseagreen4, key=1, label="System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>", style=dashed];
m21_409 -> m21_411  [color=darkseagreen4, key=1, label=sqlConnection, style=dashed];
m21_127 -> m21_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_231 -> m21_233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_33 -> m21_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_211 -> m21_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_262 -> m21_264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_320 -> m21_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_48 -> m21_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_398 -> m21_400  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_359 -> m21_361  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_138 -> m21_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_386 -> m21_388  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_149 -> m21_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_100 -> m21_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_400 -> m21_402  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_21 -> m21_28  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_22 -> m21_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_35 -> m21_40  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_36 -> m21_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_40 -> m21_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_52 -> m21_80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_52 -> m21_54  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m21_52 -> m21_56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m21_55 -> m21_57  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m21_55 -> m21_58  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m21_55 -> m21_65  [color=darkseagreen4, key=1, label=sqlJob, style=dashed];
m21_66 -> m21_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_66 -> m21_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_66 -> m21_68  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m21_61 -> m21_63  [color=darkseagreen4, key=1, label=job, style=dashed];
m21_61 -> m21_64  [color=darkseagreen4, key=1, label=job, style=dashed];
m21_92 -> m21_96  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_93 -> m21_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_112 -> m21_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_114 -> m21_116  [color=darkseagreen4, key=1, label=result, style=dashed];
m21_114 -> m21_117  [color=darkseagreen4, key=1, label=result, style=dashed];
m21_114 -> m21_118  [color=darkseagreen4, key=1, label=result, style=dashed];
m21_129 -> m21_134  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_130 -> m21_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_140 -> m21_145  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_141 -> m21_144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_151 -> m21_154  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_162 -> m21_165  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_162 -> m21_166  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_164 -> m21_166  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m21_174 -> m21_177  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_184 -> m21_189  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_185 -> m21_188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_195 -> m21_200  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_196 -> m21_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_222 -> m21_227  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_223 -> m21_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_233 -> m21_238  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_234 -> m21_237  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_244 -> m21_246  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_255 -> m21_257  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_264 -> m21_269  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_265 -> m21_268  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_275 -> m21_279  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_276 -> m21_278  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_300 -> m21_305  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_301 -> m21_304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_312 -> m21_317  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_313 -> m21_316  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_322 -> m21_324  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_322 -> m21_330  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_325 -> m21_327  [color=darkseagreen4, key=1, label=server, style=dashed];
m21_325 -> m21_328  [color=darkseagreen4, key=1, label=server, style=dashed];
m21_331 -> m21_333  [color=darkseagreen4, key=1, label=sameServer, style=dashed];
m21_340 -> m21_344  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_341 -> m21_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_351 -> m21_353  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_361 -> m21_365  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_362 -> m21_364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_372 -> m21_374  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_375 -> m21_379  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_375 -> m21_382  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_375 -> m21_377  [color=darkseagreen4, key=1, label=servers, style=dashed];
m21_388 -> m21_392  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_389 -> m21_391  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_172 -> m21_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_193 -> m21_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_282 -> m21_284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_19 -> m21_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_253 -> m21_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_348 -> m21_352  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m21_349 -> m21_351  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_289 -> m21_293  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m21_290 -> m21_292  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_90 -> m21_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_242 -> m21_244  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_338 -> m21_340  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_422 -> m21_90  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m21_422 -> m21_273  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m21_422 -> m21_338  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m21_422 -> m21_359  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m21_422 -> m21_386  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.ConnectionFacts", style=dashed];
m21_423 -> m21_28  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_424 -> m21_40  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_425 -> m21_96  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_427 -> m21_134  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_428 -> m21_145  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_432 -> m21_189  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_433 -> m21_200  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_435 -> m21_227  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_436 -> m21_238  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_439 -> m21_269  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_440 -> m21_279  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_441 -> m21_293  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m21_442 -> m21_305  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_443 -> m21_317  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_444 -> m21_344  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_445 -> m21_352  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m21_446 -> m21_365  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m21_447 -> m21_373  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m21_448 -> m21_392  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
}
