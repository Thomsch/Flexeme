digraph  {
n126 [label=number, span=""];
n127 [label=number, span=""];
n128 [label=iterations, span=""];
n0 [cluster="ConsoleSample.Program.Main()", label="Entry ConsoleSample.Program.Main()", span="12-12"];
n1 [cluster="ConsoleSample.Program.Main()", label="LogManager.Adapter = new ConsoleOutLoggerFactoryAdapter(\r\n                LogLevel.Info, false, false, true, '''')", span="14-15"];
n2 [cluster="ConsoleSample.Program.Main()", label="var sqlServerStorage = new SqlServerStorage(\r\n                @''Server=.\sqlexpress;Database=HangFire.Sample;Trusted_Connection=True;'')", span="17-18"];
n67 [cluster="ConsoleOutLoggerFactoryAdapter.cstr", label="Entry ConsoleOutLoggerFactoryAdapter.cstr", span=""];
n3 [cluster="ConsoleSample.Program.Main()", label="sqlServerStorage.UseMsmqQueues(@''.\Private$\hangfire{0}'', ''default'', ''critical'')", span="19-19"];
n68 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="32-32"];
n4 [cluster="ConsoleSample.Program.Main()", label="JobStorage.Current =\r\n                sqlServerStorage", span="21-22"];
n69 [cluster="HangFire.SqlServer.SqlServerStorage.UseMsmqQueues(string, params string[])", label="Entry HangFire.SqlServer.SqlServerStorage.UseMsmqQueues(string, params string[])", span="28-28"];
n5 [cluster="ConsoleSample.Program.Main()", label="var options = new BackgroundJobServerOptions\r\n            {\r\n                Queues = new[] { ''critical'', ''default'' }\r\n            }", span="25-28"];
n6 [cluster="ConsoleSample.Program.Main()", label="var server = new BackgroundJobServer(options)", span="30-30"];
n70 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", label="Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="13-13"];
n7 [cluster="ConsoleSample.Program.Main()", label="var count = 1", span="32-32"];
n71 [cluster="HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", label="Entry HangFire.BackgroundJobServer.BackgroundJobServer(HangFire.BackgroundJobServerOptions)", span="41-41"];
n12 [cluster="ConsoleSample.Program.Main()", label="server.Start()", span="45-45"];
n8 [cluster="ConsoleSample.Program.Main()", label=true, span="34-34"];
n46 [cluster="ConsoleSample.Program.Main()", label="var number = count++", span="104-104"];
n9 [cluster="ConsoleSample.Program.Main()", label="var command = Console.ReadLine()", span="36-36"];
n64 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(''Press Enter to exit...'')", span="150-150"];
n10 [cluster="ConsoleSample.Program.Main()", label="command == null || command.Equals(''stop'', StringComparison.OrdinalIgnoreCase)", span="38-38"];
n72 [cluster="System.Console.ReadLine()", label="Entry System.Console.ReadLine()", span="0-0"];
n11 [cluster="ConsoleSample.Program.Main()", label="command.Equals(''start'', StringComparison.OrdinalIgnoreCase)", span="43-43"];
n13 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''add'', StringComparison.OrdinalIgnoreCase)", span="48-48"];
n14 [cluster="ConsoleSample.Program.Main()", label="var workCount = int.Parse(command.Substring(4))", span="52-52"];
n23 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''static'', StringComparison.OrdinalIgnoreCase)", span="66-66"];
n24 [cluster="ConsoleSample.Program.Main()", label="var workCount = int.Parse(command.Substring(7))", span="70-70"];
n32 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''error'', StringComparison.OrdinalIgnoreCase)", span="83-83"];
n33 [cluster="ConsoleSample.Program.Main()", label="var workCount = int.Parse(command.Substring(6))", span="85-85"];
n38 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''args'', StringComparison.OrdinalIgnoreCase)", span="92-92"];
n39 [cluster="ConsoleSample.Program.Main()", label="var workCount = int.Parse(command.Substring(5))", span="94-94"];
n44 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''in'', StringComparison.OrdinalIgnoreCase)", span="101-101"];
n45 [cluster="ConsoleSample.Program.Main()", label="var seconds = int.Parse(command.Substring(2))", span="103-103"];
n48 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''cancelable'', StringComparison.OrdinalIgnoreCase)", span="108-108"];
n49 [cluster="ConsoleSample.Program.Main()", label="var iterations = int.Parse(command.Substring(11))", span="110-110"];
n51 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''delete'', StringComparison.OrdinalIgnoreCase)", span="114-114"];
n52 [cluster="ConsoleSample.Program.Main()", label="var workCount = int.Parse(command.Substring(7))", span="116-116"];
n58 [cluster="ConsoleSample.Program.Main()", label="command.StartsWith(''fast'', StringComparison.OrdinalIgnoreCase)", span="124-124"];
n59 [cluster="ConsoleSample.Program.Main()", label="var workCount = int.Parse(command.Substring(5))", span="128-128"];
n73 [cluster="string.Equals(string, System.StringComparison)", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
n74 [cluster="HangFire.BackgroundJobServer.Start()", label="Entry HangFire.BackgroundJobServer.Start()", span="60-60"];
n75 [cluster="string.StartsWith(string, System.StringComparison)", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
n15 [cluster="ConsoleSample.Program.Main()", label="var i = 0", span="53-53"];
n76 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
n77 [cluster="int.Parse(string)", label="Entry int.Parse(string)", span="0-0"];
n16 [cluster="ConsoleSample.Program.Main()", label="i < workCount", span="53-53"];
n17 [cluster="ConsoleSample.Program.Main()", label="var number = i", span="55-55"];
n19 [cluster="ConsoleSample.Program.Main()", label="i++", span="53-53"];
n20 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(''Jobs enqueued.'')", span="58-58"];
n18 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Enqueue<Services>(x => x.Random(number))", span="56-56"];
n86 [cluster="lambda expression", label="x.Random(number)", span="56-56"];
n78 [cluster="HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", label="Entry HangFire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="78-78"];
n85 [cluster="lambda expression", label="Entry lambda expression", span="56-56"];
n21 [cluster="ConsoleSample.Program.Main()", label=Exception, span="60-60"];
n79 [cluster="System.Console.WriteLine(string)", label="Entry System.Console.WriteLine(string)", span="0-0"];
n22 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(ex.Message)", span="62-62"];
n25 [cluster="ConsoleSample.Program.Main()", label="var i = 0", span="71-71"];
n26 [cluster="ConsoleSample.Program.Main()", label="i < workCount", span="71-71"];
n28 [cluster="ConsoleSample.Program.Main()", label="i++", span="71-71"];
n27 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Enqueue(() => Console.WriteLine(''Hello, {0}!'', ''world''))", span="73-73"];
n29 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(''Jobs enqueued.'')", span="75-75"];
n80 [cluster="HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", label="Entry HangFire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="60-60"];
n89 [cluster="lambda expression", label="Entry lambda expression", span="73-73"];
n30 [cluster="ConsoleSample.Program.Main()", label=Exception, span="77-77"];
n31 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(ex.Message)", span="79-79"];
n34 [cluster="ConsoleSample.Program.Main()", label="var i = 0", span="86-86"];
n35 [cluster="ConsoleSample.Program.Main()", label="i < workCount", span="86-86"];
n37 [cluster="ConsoleSample.Program.Main()", label="i++", span="86-86"];
n36 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Enqueue<Services>(x => x.Error())", span="88-88"];
n93 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
n40 [cluster="ConsoleSample.Program.Main()", label="var i = 0", span="95-95"];
n41 [cluster="ConsoleSample.Program.Main()", label="i < workCount", span="95-95"];
n43 [cluster="ConsoleSample.Program.Main()", label="i++", span="95-95"];
n42 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Enqueue<Services>(x => x.Args(Guid.NewGuid().ToString(), 14442, DateTime.UtcNow))", span="97-97"];
n97 [cluster="lambda expression", label="Entry lambda expression", span="97-97"];
n47 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Schedule<Services>(x => x.Random(number), TimeSpan.FromSeconds(seconds))", span="105-105"];
n104 [cluster="lambda expression", label="x.Random(number)", span="105-105"];
n81 [cluster="System.TimeSpan.FromSeconds(double)", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
n82 [cluster="HangFire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", label="Entry HangFire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="148-148"];
n103 [cluster="lambda expression", label="Entry lambda expression", span="105-105"];
n50 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Enqueue<Services>(x => x.Cancelable(iterations, JobCancellationToken.Null))", span="111-111"];
n107 [cluster="lambda expression", label="x.Cancelable(iterations, JobCancellationToken.Null)", span="111-111"];
n106 [cluster="lambda expression", label="Entry lambda expression", span="111-111"];
n53 [cluster="ConsoleSample.Program.Main()", label="var i = 0", span="117-117"];
n54 [cluster="ConsoleSample.Program.Main()", label="i < workCount", span="117-117"];
n57 [cluster="ConsoleSample.Program.Main()", label="i++", span="117-117"];
n55 [cluster="ConsoleSample.Program.Main()", label="var jobId = BackgroundJob.Enqueue<Services>(x => x.EmptyDefault())", span="119-119"];
n56 [cluster="ConsoleSample.Program.Main()", label="BackgroundJob.Delete(jobId)", span="120-120"];
n110 [cluster="lambda expression", label="Entry lambda expression", span="119-119"];
n83 [cluster="HangFire.BackgroundJob.Delete(string)", label="Entry HangFire.BackgroundJob.Delete(string)", span="164-164"];
n60 [cluster="ConsoleSample.Program.Main()", label="Parallel.For(0, workCount, i =>\r\n                            {\r\n                                if (i % 2 == 0)\r\n                                {\r\n                                    BackgroundJob.Enqueue<Services>(x => x.EmptyCritical());\r\n                                }\r\n                                else\r\n                                {\r\n                                    BackgroundJob.Enqueue<Services>(x => x.EmptyDefault());\r\n                                }\r\n                            })", span="129-139"];
n61 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(''Jobs enqueued.'')", span="140-140"];
n84 [cluster="System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)", label="Entry System.Threading.Tasks.Parallel.For(int, int, System.Action<int>)", span="0-0"];
n114 [cluster="lambda expression", label="Entry lambda expression", span="129-139"];
n62 [cluster="ConsoleSample.Program.Main()", label=Exception, span="142-142"];
n63 [cluster="ConsoleSample.Program.Main()", label="Console.WriteLine(ex.Message)", span="144-144"];
n65 [cluster="ConsoleSample.Program.Main()", label="Console.ReadLine()", span="151-151"];
n66 [cluster="ConsoleSample.Program.Main()", label="Exit ConsoleSample.Program.Main()", span="12-12"];
n87 [cluster="lambda expression", label="Exit lambda expression", span="56-56"];
n88 [cluster="ConsoleSample.Services.Random(int)", label="Entry ConsoleSample.Services.Random(int)", span="28-28"];
n90 [cluster="lambda expression", label="Console.WriteLine(''Hello, {0}!'', ''world'')", span="73-73"];
n91 [cluster="lambda expression", label="Exit lambda expression", span="73-73"];
n92 [cluster="System.Console.WriteLine(string, object)", label="Entry System.Console.WriteLine(string, object)", span="0-0"];
n94 [cluster="lambda expression", label="x.Error()", span="88-88"];
n95 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
n96 [cluster="ConsoleSample.Services.Error()", label="Entry ConsoleSample.Services.Error()", span="21-21"];
n98 [cluster="lambda expression", label="x.Args(Guid.NewGuid().ToString(), 14442, DateTime.UtcNow)", span="97-97"];
n99 [cluster="lambda expression", label="Exit lambda expression", span="97-97"];
n100 [cluster="System.Guid.NewGuid()", label="Entry System.Guid.NewGuid()", span="0-0"];
n101 [cluster="System.Guid.ToString()", label="Entry System.Guid.ToString()", span="0-0"];
n102 [cluster="ConsoleSample.Services.Args(string, int, System.DateTime)", label="Entry ConsoleSample.Services.Args(string, int, System.DateTime)", span="64-64"];
n105 [cluster="lambda expression", label="Exit lambda expression", span="105-105"];
n108 [cluster="lambda expression", label="Exit lambda expression", span="111-111"];
n109 [cluster="ConsoleSample.Services.Cancelable(int, HangFire.IJobCancellationToken)", label="Entry ConsoleSample.Services.Cancelable(int, HangFire.IJobCancellationToken)", span="45-45"];
n111 [cluster="lambda expression", label="x.EmptyDefault()", span="119-119"];
n112 [cluster="lambda expression", label="Exit lambda expression", span="119-119"];
n113 [cluster="ConsoleSample.Services.EmptyDefault()", label="Entry ConsoleSample.Services.EmptyDefault()", span="11-11"];
n115 [cluster="lambda expression", label="i % 2 == 0", span="131-131"];
n116 [cluster="lambda expression", label="BackgroundJob.Enqueue<Services>(x => x.EmptyCritical())", span="133-133"];
n117 [cluster="lambda expression", label="BackgroundJob.Enqueue<Services>(x => x.EmptyDefault())", span="137-137"];
n118 [cluster="lambda expression", label="Exit lambda expression", span="129-139"];
n123 [cluster="lambda expression", label="Entry lambda expression", span="137-137"];
n119 [cluster="lambda expression", label="Entry lambda expression", span="133-133"];
n120 [cluster="lambda expression", label="x.EmptyCritical()", span="133-133"];
n121 [cluster="lambda expression", label="Exit lambda expression", span="133-133"];
n122 [cluster="ConsoleSample.Services.EmptyCritical()", label="Entry ConsoleSample.Services.EmptyCritical()", span="16-16"];
n124 [cluster="lambda expression", label="x.EmptyDefault()", span="137-137"];
n125 [cluster="lambda expression", label="Exit lambda expression", span="137-137"];
m0_1 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="WorkerCount = Environment.ProcessorCount * 5", span="15-15"];
m0_2 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ServerName = Environment.MachineName", span="16-16"];
m0_3 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="17-17"];
m0_4 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ShutdownTimeout = TimeSpan.FromSeconds(15)", span="18-18"];
m0_5 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="SchedulePollingInterval = TimeSpan.FromSeconds(15)", span="19-19"];
m0_6 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Exit HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="13-13"];
m0_15 [cluster="Unk.InfoFormat", file="BackgroundJobServerOptions.cs", label="Entry Unk.InfoFormat", span=""];
m0_8 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="BackgroundJobServerOptions.cs", label="Entry HangFire.BackgroundJobServerOptions.Log(ILog)", span="59-59"];
m0_9 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''Using the following options for HangFire Server:'')", span="61-61"];
m0_10 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="62-62"];
m0_11 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="63-63"];
m0_12 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="64-64"];
m0_13 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="65-65"];
m0_14 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="BackgroundJobServerOptions.cs", label="Exit HangFire.BackgroundJobServerOptions.Log(ILog)", span="59-59"];
m0_7 [cluster="System.TimeSpan.FromSeconds(double)", file="BackgroundJobServerOptions.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m0_17 [cluster="Unk.Join", file="BackgroundJobServerOptions.cs", label="Entry Unk.Join", span=""];
m0_18 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="Entry lambda expression", span="63-63"];
m0_19 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="''''' + x + '''''", span="63-63"];
m0_20 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="Exit lambda expression", span="63-63"];
m0_16 [cluster="Unk.Select", file="BackgroundJobServerOptions.cs", label="Entry Unk.Select", span=""];
m0_21 [file="BackgroundJobServerOptions.cs", label="HangFire.BackgroundJobServerOptions", span=""];
m1_10 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStorage.cs", label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="71-71"];
m1_11 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStorage.cs", label="logger.InfoFormat(''Using the following options for Hangfire Server:'')", span="73-73"];
m1_12 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStorage.cs", label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="74-74"];
m1_13 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStorage.cs", label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="75-75"];
m1_14 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStorage.cs", label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="76-76"];
m1_15 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStorage.cs", label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="77-77"];
m1_16 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStorage.cs", label="Exit Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="71-71"];
m1_7 [cluster="System.Math.Min(int, int)", file="JobStorage.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m1_17 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="JobStorage.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
m1_19 [cluster="Unk.Join", file="JobStorage.cs", label="Entry Unk.Join", span=""];
m1_0 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStorage.cs", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="32-32"];
m1_1 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStorage.cs", label="WorkerCount = Math.Min(Environment.ProcessorCount * 5, MaxDefaultWorkerCount)", span="34-34"];
m1_2 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStorage.cs", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="35-35"];
m1_3 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStorage.cs", label="ShutdownTimeout = TimeSpan.FromSeconds(15)", span="36-36"];
m1_4 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStorage.cs", label="SchedulePollingInterval = TimeSpan.FromSeconds(15)", span="37-37"];
m1_5 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStorage.cs", label="ServerWatchdogOptions = new ServerWatchdogOptions()", span="39-39"];
m1_6 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStorage.cs", label="Exit Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="32-32"];
m1_9 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="JobStorage.cs", label="Entry Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="22-22"];
m1_20 [cluster="lambda expression", file="JobStorage.cs", label="Entry lambda expression", span="75-75"];
m1_21 [cluster="lambda expression", file="JobStorage.cs", label="''''' + x + '''''", span="75-75"];
m1_22 [cluster="lambda expression", file="JobStorage.cs", label="Exit lambda expression", span="75-75"];
m1_18 [cluster="Unk.Select", file="JobStorage.cs", label="Entry Unk.Select", span=""];
m1_23 [file="JobStorage.cs", label="Hangfire.BackgroundJobServerOptions", span=""];
m2_3 [cluster="HangFire.Redis.RedisConnection.Dispose()", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.Dispose()", span="40-40"];
m2_4 [cluster="HangFire.Redis.RedisConnection.Dispose()", file="RedisConnection.cs", label="Redis.Dispose()", span="42-42"];
m2_5 [cluster="HangFire.Redis.RedisConnection.Dispose()", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.Dispose()", span="40-40"];
m2_143 [cluster="int.ToString(System.IFormatProvider)", file="RedisConnection.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m2_25 [cluster="Unk.OnScenarioStart", file="RedisConnection.cs", label="Entry Unk.OnScenarioStart", span=""];
m2_12 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="50-50"];
m2_13 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="string jobId", span="52-52"];
m2_16 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="58-58"];
m2_17 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="queueIndex = (queueIndex + 1) % queues.Length", span="60-60"];
m2_18 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="queueName = queues[queueIndex]", span="61-61"];
m2_14 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="string queueName", span="53-53"];
m2_15 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="var queueIndex = 0", span="54-54"];
m2_21 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="queueIndex == 0", span="66-66"];
m2_19 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="var queueKey = RedisStorage.Prefix + String.Format(''queue:{0}'', queueName)", span="63-63"];
m2_20 [cluster="HangFire.Redis.RedisConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisConnection.cs", label="var fetchedKey = RedisStorage.Prefix + String.Format(''queue:{0}:dequeued'', queueName)", span="64-64"];
m2_26 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", file="RedisConnection.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", span="66-66"];
m2_22 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="RedisConnection.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m2_23 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="RedisConnection.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m2_24 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="RedisConnection.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m2_27 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", file="RedisConnection.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m2_59 [cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="RedisConnection.cs", label="this.ScenarioCleanup()", span="129-129"];
m2_201 [cluster="Unk.FromNullableStringTimestamp", file="RedisConnection.cs", label="Entry Unk.FromNullableStringTimestamp", span=""];
m2_61 [cluster="Unk.Commit", file="RedisConnection.cs", label="Entry Unk.Commit", span=""];
m2_66 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="138-140"];
m2_67 [cluster="lambda expression", file="RedisConnection.cs", label="x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn)", span="138-140"];
m2_65 [cluster="Unk.SetRangeInHash", file="RedisConnection.cs", label="Entry Unk.SetRangeInHash", span=""];
m2_63 [cluster="lambda expression", file="RedisConnection.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    storedParameters)", span="134-136"];
m2_68 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="138-140"];
m2_64 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="134-136"];
m2_62 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="134-136"];
m2_69 [cluster="Unk.ExpireEntryIn", file="RedisConnection.cs", label="Entry Unk.ExpireEntryIn", span=""];
m2_121 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="230-230"];
m2_122 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs", label="return Redis.GetRangeFromSortedSetByLowestScore(\r\n                RedisStorage.Prefix + key, fromScore, toScore, 0, 1)\r\n                .FirstOrDefault();", span="232-234"];
m2_123 [cluster="HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="230-230"];
m2_29 [cluster="string.Format(string, object)", file="RedisConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m2_38 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="RedisConnection.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m2_91 [cluster="Unk.GetAllEntriesFromHash", file="RedisConnection.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m2_200 [cluster="Unk.FromStringTimestamp", file="RedisConnection.cs", label="Entry Unk.FromStringTimestamp", span=""];
m2_168 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="293-293"];
m2_169 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var serverNames = Redis.GetAllItemsFromSet(RedisStorage.Prefix + ''servers'')", span="295-295"];
m2_180 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="utcNow > maxTime.Add(timeOut)", span="326-326"];
m2_170 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var heartbeats = new Dictionary<string, Tuple<DateTime, DateTime?>>()", span="296-296"];
m2_173 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label=serverNames, span="302-302"];
m2_171 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var utcNow = DateTime.UtcNow", span="298-298"];
m2_175 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="pipeline.QueueCommand(\r\n                        x => x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat''),\r\n                        x => heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1]))))", span="306-314"];
m2_178 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label=heartbeats, span="321-321"];
m2_172 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var pipeline = Redis.CreatePipeline()", span="300-300"];
m2_176 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="pipeline.Flush()", span="317-317"];
m2_174 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var name = serverName", span="304-304"];
m2_177 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var removedServerCount = 0", span="320-320"];
m2_182 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="removedServerCount++", span="329-329"];
m2_183 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="return removedServerCount;", span="333-333"];
m2_179 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="var maxTime = new DateTime(\r\n                    Math.Max(heartbeat.Value.Item1.Ticks, (heartbeat.Value.Item2 ?? DateTime.MinValue).Ticks))", span="323-324"];
m2_181 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="RemoveServer(Redis, heartbeat.Key)", span="328-328"];
m2_184 [cluster="HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RemoveTimedOutServers(System.TimeSpan)", span="293-293"];
m2_33 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="RedisConnection.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m2_138 [cluster="Unk.AddItemToSet", file="RedisConnection.cs", label="Entry Unk.AddItemToSet", span=""];
m2_117 [cluster="Unk.RemoveEntryFromHash", file="RedisConnection.cs", label="Entry Unk.RemoveEntryFromHash", span=""];
m2_30 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="RedisConnection.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", span="75-75"];
m2_51 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                    expireIn))", span="138-140"];
m2_166 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="287-290"];
m2_165 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.Heartbeat(string)", span="285-285"];
m2_167 [cluster="HangFire.Redis.RedisConnection.Heartbeat(string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.Heartbeat(string)", span="285-285"];
m2_70 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.GetJobData(string)", span="149-149"];
m2_164 [cluster="Unk.RemoveEntry", file="RedisConnection.cs", label="Entry Unk.RemoveEntry", span=""];
m2_154 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId)))", span="277-279"];
m2_151 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="269-269"];
m2_152 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="var transaction = redis.CreateTransaction()", span="271-271"];
m2_153 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId))", span="273-275"];
m2_155 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="transaction.Commit()", span="281-281"];
m2_156 [cluster="HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RemoveServer(IRedisClient, string)", span="269-269"];
m2_34 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="RedisConnection.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="83-83"];
m2_81 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="storedData.ContainsKey(''ParameterTypes'')", span="168-168"];
m2_86 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="job = invocationData.Deserialize()", span="180-180"];
m2_87 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label=JobLoadException, span="182-182"];
m2_83 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="Job job = null", span="173-173"];
m2_84 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="JobLoadException loadException = null", span="174-174"];
m2_82 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="parameterTypes = storedData[''ParameterTypes'']", span="170-170"];
m2_88 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="loadException = ex", span="184-184"];
m2_7 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="45-45"];
m2_8 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="RedisConnection.cs", label="return new RedisWriteOnlyTransaction(Redis.CreateTransaction());", span="47-47"];
m2_9 [cluster="HangFire.Redis.RedisConnection.CreateWriteTransaction()", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.CreateWriteTransaction()", span="45-45"];
m2_99 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="203-203"];
m2_100 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs", label="return Redis.GetValueFromHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name);", span="205-207"];
m2_101 [cluster="HangFire.Redis.RedisConnection.GetJobParameter(string, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.GetJobParameter(string, string)", span="203-203"];
m2_93 [cluster="InvocationData.cstr", file="RedisConnection.cs", label="Entry InvocationData.cstr", span=""];
m2_52 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="transaction.Commit()", span="143-143"];
m2_57 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="RedisConnection.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m2_56 [cluster="HangFire.Tests.Server.JobManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="RedisConnection.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="123-123"];
m2_58 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="RedisConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0"];
m2_54 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="115-115"];
m2_55 [cluster="System.Guid.NewGuid()", file="RedisConnection.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m2_53 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="return jobId;", span="146-146"];
m2_60 [cluster="Unk.QueueCommand", file="RedisConnection.cs", label="Entry Unk.QueueCommand", span=""];
m2_187 [cluster="Unk.Flush", file="RedisConnection.cs", label="Entry Unk.Flush", span=""];
m2_28 [cluster="HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", file="RedisConnection.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.ScenarioCleanup()", span="66-66"];
m2_10 [cluster="RedisWriteOnlyTransaction.cstr", file="RedisConnection.cs", label="Entry RedisWriteOnlyTransaction.cstr", span=""];
m2_202 [cluster="Unk.Add", file="RedisConnection.cs", label="Entry Unk.Add", span=""];
m2_190 [cluster="System.DateTime.Add(System.TimeSpan)", file="RedisConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m2_126 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="237-237"];
m2_127 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="var transaction = Redis.CreateTransaction()", span="239-239"];
m2_128 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId))", span="241-242"];
m2_129 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        }))", span="244-250"];
m2_130 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="context.Queues", span="252-252"];
m2_132 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1))", span="255-257"];
m2_133 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="transaction.Commit()", span="260-260"];
m2_131 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="var queue1 = queue", span="254-254"];
m2_134 [cluster="HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="237-237"];
m2_142 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m2_199 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="RedisConnection.cs", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
m2_40 [cluster="HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="115-115"];
m2_147 [cluster="Unk.AddItemToList", file="RedisConnection.cs", label="Entry Unk.AddItemToList", span=""];
m2_107 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Checked''))", span="222-224"];
m2_103 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", span="210-210"];
m2_104 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="var transaction = Redis.CreateTransaction()", span="212-212"];
m2_105 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    id,\r\n                    -1))", span="214-217"];
m2_106 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="transaction.QueueCommand(x => x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Fetched''))", span="219-221"];
m2_108 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="transaction.Commit()", span="226-226"];
m2_109 [cluster="HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.DeleteJobFromQueue(string, string)", span="210-210"];
m2_6 [cluster="Unk.Dispose", file="RedisConnection.cs", label="Entry Unk.Dispose", span=""];
m2_160 [cluster="Unk.RemoveItemFromSet", file="RedisConnection.cs", label="Entry Unk.RemoveItemFromSet", span=""];
m2_188 [cluster="System.DateTime.DateTime(long)", file="RedisConnection.cs", label="Entry System.DateTime.DateTime(long)", span="0-0"];
m2_148 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RemoveServer(string)", span="264-264"];
m2_149 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs", label="RemoveServer(Redis, serverId)", span="266-266"];
m2_150 [cluster="HangFire.Redis.RedisConnection.RemoveServer(string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RemoveServer(string)", span="264-264"];
m2_189 [cluster="System.Math.Max(long, long)", file="RedisConnection.cs", label="Entry System.Math.Max(long, long)", span="0-0"];
m2_71 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="RedisConnection.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", span="160-160"];
m2_72 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="RedisConnection.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Worker should processes only jobs in the Enqueued state, but it should remove the'' +\r\n                    '' job from the dequeued list anyway'', ((string[])(null)))", span="162-163"];
m2_77 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", color=green, community=0, file="RedisConnection.cs", label="testRunner.Then(''the job should not be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=0, span="173-173"];
m2_78 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", color=green, community=0, file="RedisConnection.cs", label="testRunner.But(''it should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", prediction=0, span="175-175"];
m2_79 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="RedisConnection.cs", label="this.ScenarioCleanup()", span="177-177"];
m2_80 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="RedisConnection.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", span="160-160"];
m2_89 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="HangFire.Tests.Server.JobManagerFeature", span=""];
m2_73 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="RedisConnection.cs", label="this.ScenarioSetup(scenarioInfo)", span="165-165"];
m2_74 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="RedisConnection.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="167-167"];
m2_75 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="RedisConnection.cs", label="testRunner.And(''its state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="169-169"];
m2_76 [cluster="HangFire.Tests.Server.JobManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="RedisConnection.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="171-171"];
m2_90 [cluster="HangFire.Redis.RedisConnection.GetJobData(string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.GetJobData(string)", span="149-149"];
m2_196 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="310-314"];
m2_111 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveItemFromList(\r\n                    String.Format(RedisStorage.Prefix + ''queue:{0}:dequeued'', queue),\r\n                    id,\r\n                    -1)", span="214-217"];
m2_115 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Fetched'')", span="219-221"];
m2_119 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveEntryFromHash(\r\n                    String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                    ''Checked'')", span="222-224"];
m2_110 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="214-217"];
m2_114 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="219-221"];
m2_118 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="222-224"];
m2_112 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="214-217"];
m2_116 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="219-221"];
m2_120 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="222-224"];
m2_136 [cluster="lambda expression", file="RedisConnection.cs", label="x.AddItemToSet(\r\n                    RedisStorage.Prefix + ''servers'', serverId)", span="241-242"];
m2_140 [cluster="lambda expression", file="RedisConnection.cs", label="x.SetRangeInHash(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''WorkerCount'', context.WorkerCount.ToString(CultureInfo.InvariantCulture) },\r\n                            { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                        })", span="244-250"];
m2_145 [cluster="lambda expression", file="RedisConnection.cs", label="x.AddItemToList(\r\n                        String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId),\r\n                        queue1)", span="255-257"];
m2_135 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="241-242"];
m2_139 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="244-250"];
m2_144 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="255-257"];
m2_137 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="241-242"];
m2_141 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="244-250"];
m2_146 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="255-257"];
m2_158 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveItemFromSet(\r\n                    RedisStorage.Prefix + ''servers'',\r\n                    serverId)", span="273-275"];
m2_162 [cluster="lambda expression", file="RedisConnection.cs", label="x.RemoveEntry(\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}'', serverId),\r\n                    String.Format(RedisStorage.Prefix + ''server:{0}:queues'', serverId))", span="277-279"];
m2_157 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="273-275"];
m2_161 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="277-279"];
m2_159 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="273-275"];
m2_163 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="277-279"];
m2_197 [cluster="lambda expression", file="RedisConnection.cs", label="heartbeats.Add(\r\n                            name,\r\n                            new Tuple<DateTime, DateTime?>(\r\n                                JobHelper.FromStringTimestamp(x[0]),\r\n                                JobHelper.FromNullableStringTimestamp(x[1])))", span="310-314"];
m2_192 [cluster="lambda expression", file="RedisConnection.cs", label="x.GetValuesFromHash(\r\n                            String.Format(RedisStorage.Prefix + ''server:{0}'', name),\r\n                            ''StartedAt'', ''Heartbeat'')", span="307-309"];
m2_191 [cluster="lambda expression", file="RedisConnection.cs", label="Entry lambda expression", span="307-309"];
m2_193 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="307-309"];
m2_198 [cluster="lambda expression", file="RedisConnection.cs", label="Exit lambda expression", span="310-314"];
m2_0 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="33-33"];
m2_1 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs", label="Redis = redis", span="35-35"];
m2_2 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="33-33"];
m2_32 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="RedisConnection.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m2_125 [cluster="Unk.FirstOrDefault", file="RedisConnection.cs", label="Entry Unk.FirstOrDefault", span=""];
m2_41 [cluster="Unk.Then", file="RedisConnection.cs", label="Entry Unk.Then", span=""];
m2_42 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="RedisConnection.cs", label="Entry HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", span="94-94"];
m2_43 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="RedisConnection.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Successfully performed job should have the Succeeded state'', ((string[])(null)))", span="96-96"];
m2_50 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="RedisConnection.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", span="94-94"];
m2_44 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="RedisConnection.cs", label="this.ScenarioSetup(scenarioInfo)", span="98-98"];
m2_45 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="RedisConnection.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="100-100"];
m2_46 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="RedisConnection.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="102-102"];
m2_47 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="RedisConnection.cs", label="testRunner.Then(''its state should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="104-104"];
m2_48 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="RedisConnection.cs", label="testRunner.And(''the job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106"];
m2_49 [cluster="HangFire.Tests.Server.JobManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="RedisConnection.cs", label="this.ScenarioCleanup()", span="108-108"];
m2_35 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="RedisConnection.cs", label="testRunner.Then(''the job should be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="85-85"];
m2_36 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="RedisConnection.cs", label="this.ScenarioCleanup()", span="87-87"];
m2_37 [cluster="HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", file="RedisConnection.cs", label="Exit HangFire.Tests.Server.JobManagerFeature.ManagerShouldPerformAJob()", span="75-75"];
m2_113 [cluster="Unk.RemoveItemFromList", file="RedisConnection.cs", label="Entry Unk.RemoveItemFromList", span=""];
m2_97 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs", label="Redis.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', id),\r\n                name,\r\n                value)", span="197-200"];
m2_96 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs", label="Entry HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="195-195"];
m2_98 [cluster="HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", file="RedisConnection.cs", label="Exit HangFire.Redis.RedisConnection.SetJobParameter(string, string, string)", span="195-195"];
m2_186 [cluster="Unk.CreatePipeline", file="RedisConnection.cs", label="Entry Unk.CreatePipeline", span=""];
m2_102 [cluster="Unk.GetValueFromHash", file="RedisConnection.cs", label="Entry Unk.GetValueFromHash", span=""];
m2_185 [cluster="Unk.GetAllItemsFromSet", file="RedisConnection.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m2_31 [cluster="Unk.PopAndPushItemBetweenLists", file="RedisConnection.cs", label="Entry Unk.PopAndPushItemBetweenLists", span=""];
m2_95 [cluster="HangFire.Storage.JobData.JobData()", file="RedisConnection.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m2_39 [cluster="Unk.AcquireLock", file="RedisConnection.cs", label="Entry Unk.AcquireLock", span=""];
m2_94 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="RedisConnection.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m2_194 [cluster="Unk.Format", file="RedisConnection.cs", label="Entry Unk.Format", span=""];
m2_195 [cluster="Unk.GetValuesFromHash", file="RedisConnection.cs", label="Entry Unk.GetValuesFromHash", span=""];
m2_124 [cluster="Unk.GetRangeFromSortedSetByLowestScore", file="RedisConnection.cs", label="Entry Unk.GetRangeFromSortedSetByLowestScore", span=""];
m2_11 [cluster="Unk.CreateTransaction", file="RedisConnection.cs", label="Entry Unk.CreateTransaction", span=""];
m2_92 [cluster="Unk.ContainsKey", file="RedisConnection.cs", label="Entry Unk.ContainsKey", span=""];
m2_203 [file="RedisConnection.cs", label="HangFire.Redis.RedisConnection", span=""];
m2_204 [file="RedisConnection.cs", label=jobId, span=""];
m2_205 [file="RedisConnection.cs", label=storedParameters, span=""];
m2_206 [file="RedisConnection.cs", label="System.TimeSpan", span=""];
m2_207 [file="RedisConnection.cs", label=string, span=""];
m2_208 [file="RedisConnection.cs", label=string, span=""];
m2_209 [file="RedisConnection.cs", label=string, span=""];
m2_210 [file="RedisConnection.cs", label="HangFire.Server.ServerContext", span=""];
m2_211 [file="RedisConnection.cs", label=queue1, span=""];
m2_212 [file="RedisConnection.cs", label=string, span=""];
m2_213 [file="RedisConnection.cs", label=name, span=""];
m2_214 [file="RedisConnection.cs", label=heartbeats, span=""];
m3_19 [cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.GetConnection()", span="73-73"];
m3_20 [cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs", label="return new RedisConnection(_pooledManager.GetClient());", span="75-75"];
m3_21 [cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.GetConnection()", span="73-73"];
m3_13 [cluster="RedisClientManagerConfig.cstr", file="RedisStorage.cs", label="Entry RedisClientManagerConfig.cstr", span=""];
m3_14 [cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.GetMonitoringApi()", span="68-68"];
m3_15 [cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="RedisStorage.cs", label="return new RedisMonitoringApi(_pooledManager.GetClient());", span="70-70"];
m3_16 [cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.GetMonitoringApi()", span="68-68"];
m3_18 [cluster="Unk.GetClient", file="RedisStorage.cs", label="Entry Unk.GetClient", span=""];
m3_4 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="41-41"];
m3_5 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="41-41"];
m3_23 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.GetComponents()", span="78-78"];
m3_24 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="RedisStorage.cs", label="yield return new FetchedJobsWatcher(this, new StateMachineFactory(this));", span="80-80"];
m3_25 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.GetComponents()", span="78-78"];
m3_27 [cluster="HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", file="RedisStorage.cs", label="Entry HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", span="16-16"];
m3_28 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.GetStateHandlers()", span="83-83"];
m3_29 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs", label="yield return new FailedStateHandler();", span="85-85"];
m3_30 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs", label="yield return new ProcessingStateHandler();", span="86-86"];
m3_31 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs", label="yield return new SucceededStateHandler();", span="87-87"];
m3_32 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.GetStateHandlers()", span="83-83"];
m3_34 [cluster="HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", file="RedisStorage.cs", label="Entry HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", span="23-23"];
m3_2 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string)", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage(string)", span="36-36"];
m3_3 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string)", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage(string)", span="36-36"];
m3_12 [cluster="PooledRedisClientManager.cstr", file="RedisStorage.cs", label="Entry PooledRedisClientManager.cstr", span=""];
m3_39 [cluster="string.Format(string, object, object)", file="RedisStorage.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m3_17 [cluster="RedisMonitoringApi.cstr", file="RedisStorage.cs", label="Entry RedisMonitoringApi.cstr", span=""];
m3_33 [cluster="HangFire.Redis.FailedStateHandler.FailedStateHandler()", file="RedisStorage.cs", label="Entry HangFire.Redis.FailedStateHandler.FailedStateHandler()", span="23-23"];
m3_36 [cluster="HangFire.Redis.RedisStorage.ToString()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.ToString()", span="90-90"];
m3_37 [cluster="HangFire.Redis.RedisStorage.ToString()", file="RedisStorage.cs", label="return String.Format(''redis://{0}/{1}'', HostAndPort, Db);", span="92-92"];
m3_38 [cluster="HangFire.Redis.RedisStorage.ToString()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.ToString()", span="90-90"];
m3_0 [cluster="HangFire.Redis.RedisStorage.RedisStorage()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage()", span="31-31"];
m3_1 [cluster="HangFire.Redis.RedisStorage.RedisStorage()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage()", span="31-31"];
m3_6 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", span="46-46"];
m3_7 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="HostAndPort = hostAndPort", span="48-48"];
m3_8 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="Db = db", span="49-49"];
m3_9 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="Options = options", span="50-50"];
m3_10 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="_pooledManager = new PooledRedisClientManager(\r\n                new []{ HostAndPort },\r\n                new string[0],\r\n                new RedisClientManagerConfig\r\n                {\r\n                    DefaultDb = Db,\r\n                    MaxWritePoolSize = Options.ConnectionPoolSize\r\n                })", span="52-59"];
m3_11 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", span="46-46"];
m3_22 [cluster="RedisConnection.cstr", file="RedisStorage.cs", label="Entry RedisConnection.cstr", span=""];
m3_35 [cluster="HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", file="RedisStorage.cs", label="Entry HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", span="21-21"];
m3_26 [cluster="HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage, HangFire.States.IStateMachineFactory)", file="RedisStorage.cs", label="Entry HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage, HangFire.States.IStateMachineFactory)", span="33-33"];
m3_40 [file="RedisStorage.cs", label="HangFire.Redis.RedisStorage", span=""];
m5_96 [cluster="Unk.OnClientException", file="ServerComponentRunnerCollection.cs", label="Entry Unk.OnClientException", span=""];
m5_268 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="299-299"];
m5_269 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ServerComponentRunnerCollection.cs", label="var outerFilter = new Mock<IClientFilter>()", span="302-302"];
m5_270 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ServerComponentRunnerCollection.cs", label="var innerFilter = new Mock<IClientFilter>()", span="303-303"];
m5_271 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(outerFilter.Object)", span="305-305"];
m5_277 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ServerComponentRunnerCollection.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))", span="317-317"];
m5_272 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(innerFilter.Object)", span="306-306"];
m5_273 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ServerComponentRunnerCollection.cs", label="var exception = new InvalidOperationException()", span="308-308"];
m5_274 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ServerComponentRunnerCollection.cs", label="SetupStateMachineThrowsException(exception)", span="309-309"];
m5_275 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="311-311"];
m5_276 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ServerComponentRunnerCollection.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object, _creator.Object))", span="314-315"];
m5_278 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="299-299"];
m5_18 [cluster="System.Collections.Generic.List<T>.List()", file="ServerComponentRunnerCollection.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m5_76 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException<TException>()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException<TException>()", span="382-382"];
m5_344 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException<TException>()", file="ServerComponentRunnerCollection.cs", label="_creator\r\n                .Setup(x => x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()))\r\n                .Throws<TException>()", span="385-387"];
m5_345 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException<TException>()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException<TException>()", span="382-382"];
m5_13 [cluster="Mock<IState>.cstr", file="ServerComponentRunnerCollection.cs", label="Entry Mock<IState>.cstr", span=""];
m5_38 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="42-42"];
m5_39 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="44-44"];
m5_40 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="ServerComponentRunnerCollection.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => process.Run(null, _creator.Object))", span="46-47"];
m5_42 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="42-42"];
m5_44 [cluster="Unk.Equal", file="ServerComponentRunnerCollection.cs", label="Entry Unk.Equal", span=""];
m5_248 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="278-278"];
m5_249 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="var filter = new Mock<IClientFilter>()", span="281-281"];
m5_250 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(filter.Object)", span="282-282"];
m5_255 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="filter.Verify(x => x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception)))", span="294-295"];
m5_251 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="var exception = new InvalidOperationException()", span="284-284"];
m5_252 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="SetupStateMachineThrowsException(exception)", span="285-285"];
m5_253 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="287-287"];
m5_254 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object, _creator.Object))", span="290-291"];
m5_256 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringTheCreationOfAJob()", span="278-278"];
m5_14 [cluster="Mock<CreateContext>.cstr", file="ServerComponentRunnerCollection.cs", label="Entry Mock<CreateContext>.cstr", span=""];
m5_318 [cluster="Unk.DoesNotThrow", file="ServerComponentRunnerCollection.cs", label="Entry Unk.DoesNotThrow", span=""];
m5_48 [cluster="Unk.Run", file="ServerComponentRunnerCollection.cs", label="Entry Unk.Run", span=""];
m5_257 [cluster="System.InvalidOperationException.InvalidOperationException()", file="ServerComponentRunnerCollection.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m5_28 [cluster="Unk.>", file="ServerComponentRunnerCollection.cs", label="Entry Unk.>", span=""];
m5_88 [cluster="Mock<IClientExceptionFilter>.cstr", file="ServerComponentRunnerCollection.cs", label="Entry Mock<IClientExceptionFilter>.cstr", span=""];
m5_15 [cluster="Mock<IJobCreator>.cstr", file="ServerComponentRunnerCollection.cs", label="Entry Mock<IJobCreator>.cstr", span=""];
m5_49 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenCreatorIsNull()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenCreatorIsNull()", span="53-53"];
m5_50 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenCreatorIsNull()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="55-55"];
m5_51 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenCreatorIsNull()", file="ServerComponentRunnerCollection.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => process.Run(_context.Object, null))", span="57-58"];
m5_52 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenCreatorIsNull()", file="ServerComponentRunnerCollection.cs", label="Assert.Equal(''creator'', exception.ParamName)", span="60-60"];
m5_53 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenCreatorIsNull()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ThrowsAnException_WhenCreatorIsNull()", span="53-53"];
m5_71 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="86-86"];
m5_72 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="ServerComponentRunnerCollection.cs", label="SetupStateMachineThrowsException<InvalidOperationException>()", span="88-88"];
m5_73 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="90-90"];
m5_74 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="ServerComponentRunnerCollection.cs", label="Assert.Throws<InvalidOperationException>(() => process.Run(_context.Object, _creator.Object))", span="92-92"];
m5_75 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCatchExceptions()", span="86-86"];
m5_97 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="116-116"];
m5_98 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ServerComponentRunnerCollection.cs", label="var filter1 = new Mock<IClientExceptionFilter>()", span="119-119"];
m5_99 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ServerComponentRunnerCollection.cs", label="var filter2 = new Mock<IClientExceptionFilter>()", span="120-120"];
m5_101 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ServerComponentRunnerCollection.cs", label="filter1.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="123-123"];
m5_102 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(filter1.Object)", span="125-125"];
m5_100 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ServerComponentRunnerCollection.cs", label="filter2.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>())).InSequence()", span="122-122"];
m5_103 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(filter2.Object)", span="126-126"];
m5_104 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ServerComponentRunnerCollection.cs", label="_creator\r\n                .Setup(x => x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()))\r\n                .Throws<InvalidOperationException>()", span="128-130"];
m5_105 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="132-132"];
m5_106 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ServerComponentRunnerCollection.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object, _creator.Object))", span="135-136"];
m5_107 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="116-116"];
m5_159 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="184-184"];
m5_160 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="var outerFilter = new Mock<IClientFilter>()", span="187-187"];
m5_161 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="var innerFilter = new Mock<IClientFilter>()", span="188-188"];
m5_162 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(outerFilter.Object)", span="190-190"];
m5_164 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="outerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="193-193"];
m5_167 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="outerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="196-196"];
m5_163 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(innerFilter.Object)", span="191-191"];
m5_165 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>())).InSequence()", span="194-194"];
m5_166 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>())).InSequence()", span="195-195"];
m5_168 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="198-198"];
m5_169 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, _creator.Object)", span="201-201"];
m5_170 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="184-184"];
m5_57 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", span="64-64"];
m5_58 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="66-66"];
m5_59 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, _creator.Object)", span="68-68"];
m5_60 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", file="ServerComponentRunnerCollection.cs", label="_creator.Verify(\r\n                x => x.CreateJob(It.IsNotNull<Job>(), It.IsNotNull<IDictionary<string, string>>(), It.IsNotNull<IState>()), \r\n                Times.Once)", span="70-72"];
m5_61 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsJobCreator_ToCreateAJob()", span="64-64"];
m5_158 [cluster="Unk.OnCreated", file="ServerComponentRunnerCollection.cs", label="Entry Unk.OnCreated", span=""];
m5_205 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="232-232"];
m5_206 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ServerComponentRunnerCollection.cs", label="var outerFilter = new Mock<IClientFilter>()", span="235-235"];
m5_207 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ServerComponentRunnerCollection.cs", label="var innerFilter = new Mock<IClientFilter>()", span="236-236"];
m5_208 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(outerFilter.Object)", span="238-238"];
m5_213 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ServerComponentRunnerCollection.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Canceled)))", span="250-250"];
m5_209 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(innerFilter.Object)", span="239-239"];
m5_210 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ServerComponentRunnerCollection.cs", label="innerFilter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext context) => context.Canceled = true)", span="241-242"];
m5_211 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="244-244"];
m5_212 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, _creator.Object)", span="247-247"];
m5_214 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="232-232"];
m5_19 [cluster="Mock<IJobFilterProvider>.cstr", file="ServerComponentRunnerCollection.cs", label="Entry Mock<IJobFilterProvider>.cstr", span=""];
m5_89 [cluster="Unk.Add", file="ServerComponentRunnerCollection.cs", label="Entry Unk.Add", span=""];
m5_108 [cluster="Unk.InSequence", file="ServerComponentRunnerCollection.cs", label="Entry Unk.InSequence", span=""];
m5_121 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", span="142-142"];
m5_122 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="SetupStateMachineThrowsException<InvalidOperationException>()", span="145-145"];
m5_123 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var filter = new Mock<IClientExceptionFilter>()", span="147-147"];
m5_124 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="filter.Setup(x => x.OnClientException(It.IsAny<ClientExceptionContext>()))\r\n                .Callback((ClientExceptionContext x) => x.ExceptionHandled = true)", span="148-149"];
m5_125 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(filter.Object)", span="151-151"];
m5_126 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="153-153"];
m5_127 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var jobId = process.Run(_context.Object, _creator.Object)", span="156-156"];
m5_128 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Assert.Null(jobId)", span="158-158"];
m5_129 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_EatsException_WhenItWasHandlerByFilter_AndReturnsNullJobIdentifier()", span="142-142"];
m5_16 [cluster="Unk.Setup", file="ServerComponentRunnerCollection.cs", label="Entry Unk.Setup", span=""];
m5_340 [cluster="Unk.Throws", file="ServerComponentRunnerCollection.cs", label="Entry Unk.Throws", span=""];
m5_131 [cluster="Unk.Null", file="ServerComponentRunnerCollection.cs", label="Entry Unk.Null", span=""];
m5_66 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", span="76-76"];
m5_67 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="78-78"];
m5_68 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var result = process.Run(_context.Object, _creator.Object)", span="80-80"];
m5_69 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Assert.Equal(JobId, result)", span="82-82"];
m5_70 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_ReturnsJobIdentifier()", span="76-76"];
m5_80 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="96-96"];
m5_81 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="ServerComponentRunnerCollection.cs", label="var filter = new Mock<IClientExceptionFilter>()", span="99-99"];
m5_82 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(filter.Object)", span="100-100"];
m5_86 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="ServerComponentRunnerCollection.cs", label="filter.Verify(x => x.OnClientException(\r\n                It.IsNotNull<ClientExceptionContext>()))", span="111-112"];
m5_83 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="ServerComponentRunnerCollection.cs", label="SetupStateMachineThrowsException<InvalidOperationException>()", span="102-102"];
m5_84 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="104-104"];
m5_85 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="ServerComponentRunnerCollection.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object, _creator.Object))", span="107-108"];
m5_87 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsExceptionFilter_OnException()", span="96-96"];
m5_346 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="386-386"];
m5_21 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="24-24"];
m5_25 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="30-33"];
m5_30 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="37-37"];
m5_34 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="38-38"];
m5_22 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="TestMethod()", span="24-24"];
m5_23 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="24-24"];
m5_27 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="30-33"];
m5_31 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.GetFilters(It.IsNotNull<Job>())", span="37-37"];
m5_32 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="37-37"];
m5_35 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="new JobFilter(f, JobFilterScope.Type, null)", span="38-38"];
m5_36 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="38-38"];
m5_46 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="process.Run(null, _creator.Object)", span="47-47"];
m5_45 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="47-47"];
m5_47 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="47-47"];
m5_55 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, null)", span="58-58"];
m5_54 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="58-58"];
m5_56 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="58-58"];
m5_63 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="71-71"];
m5_64 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.CreateJob(It.IsNotNull<Job>(), It.IsNotNull<IDictionary<string, string>>(), It.IsNotNull<IState>())", span="71-71"];
m5_65 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="71-71"];
m5_78 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, _creator.Object)", span="92-92"];
m5_77 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="92-92"];
m5_79 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="92-92"];
m5_91 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, _creator.Object)", span="108-108"];
m5_90 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="108-108"];
m5_93 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="111-112"];
m5_92 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="108-108"];
m5_94 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnClientException(\r\n                It.IsNotNull<ClientExceptionContext>())", span="111-112"];
m5_95 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="111-112"];
m5_109 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="122-122"];
m5_112 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="123-123"];
m5_115 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="129-129"];
m5_119 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, _creator.Object)", span="136-136"];
m5_118 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="136-136"];
m5_110 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="122-122"];
m5_111 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="122-122"];
m5_113 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="123-123"];
m5_114 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="123-123"];
m5_116 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="129-129"];
m5_117 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="129-129"];
m5_120 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="136-136"];
m5_132 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="148-148"];
m5_135 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="149-149"];
m5_133 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnClientException(It.IsAny<ClientExceptionContext>())", span="148-148"];
m5_134 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="148-148"];
m5_136 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.ExceptionHandled = true", span="149-149"];
m5_137 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="149-149"];
m5_148 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="168-168"];
m5_152 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="170-170"];
m5_155 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="173-173"];
m5_149 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreating(It.IsNotNull<CreatingContext>())", span="168-168"];
m5_150 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="168-168"];
m5_153 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="170-170"];
m5_154 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="170-170"];
m5_156 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreated(It.IsNotNull<CreatedContext>())", span="173-173"];
m5_157 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="173-173"];
m5_171 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="193-193"];
m5_174 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="194-194"];
m5_177 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="195-195"];
m5_180 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="196-196"];
m5_172 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="193-193"];
m5_173 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="193-193"];
m5_175 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="194-194"];
m5_176 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="194-194"];
m5_178 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="195-195"];
m5_179 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="195-195"];
m5_181 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="196-196"];
m5_182 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="196-196"];
m5_193 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="213-213"];
m5_196 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="214-214"];
m5_199 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="225-225"];
m5_202 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="228-228"];
m5_194 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="213-213"];
m5_195 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="213-213"];
m5_197 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.Canceled = true", span="214-214"];
m5_198 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="214-214"];
m5_200 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="225-225"];
m5_201 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="225-225"];
m5_203 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="228-228"];
m5_204 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="228-228"];
m5_215 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="241-241"];
m5_218 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="242-242"];
m5_221 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="250-250"];
m5_216 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="241-241"];
m5_217 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="241-241"];
m5_219 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="context.Canceled = true", span="242-242"];
m5_220 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="242-242"];
m5_222 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Canceled))", span="250-250"];
m5_223 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="250-250"];
m5_224 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="250-250"];
m5_225 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="context.Canceled", span="250-250"];
m5_226 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="250-250"];
m5_236 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="260-260"];
m5_240 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, _creator.Object)", span="267-267"];
m5_239 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="267-267"];
m5_242 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="271-271"];
m5_245 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="274-274"];
m5_237 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreating(It.IsAny<CreatingContext>())", span="260-260"];
m5_238 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="260-260"];
m5_241 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="267-267"];
m5_243 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="271-271"];
m5_244 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="271-271"];
m5_246 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="274-274"];
m5_247 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="274-274"];
m5_263 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreated(It.Is<CreatedContext>(\r\n                context => context.Exception == exception))", span="294-295"];
m5_266 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="context.Exception == exception", span="295-295"];
m5_260 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, _creator.Object)", span="291-291"];
m5_259 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="291-291"];
m5_262 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="294-295"];
m5_261 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="291-291"];
m5_264 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="294-295"];
m5_265 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="295-295"];
m5_267 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="295-295"];
m5_283 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="317-317"];
m5_286 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="context.Exception == exception", span="317-317"];
m5_280 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, _creator.Object)", span="315-315"];
m5_279 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="315-315"];
m5_282 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="317-317"];
m5_281 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="315-315"];
m5_284 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="317-317"];
m5_285 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="317-317"];
m5_287 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="317-317"];
m5_299 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception))", span="330-330"];
m5_302 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="context.Exception == exception", span="330-330"];
m5_298 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="330-330"];
m5_304 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="331-331"];
m5_300 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="330-330"];
m5_301 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="330-330"];
m5_303 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="330-330"];
m5_305 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.ExceptionHandled = true", span="331-331"];
m5_306 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="331-331"];
m5_319 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="354-354"];
m5_322 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="355-355"];
m5_326 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, _creator.Object)", span="360-360"];
m5_325 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="360-360"];
m5_328 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="363-363"];
m5_320 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreated(It.IsAny<CreatedContext>())", span="354-354"];
m5_321 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="354-354"];
m5_323 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.ExceptionHandled = true", span="355-355"];
m5_324 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="355-355"];
m5_327 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="360-360"];
m5_329 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null))", span="363-363"];
m5_330 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="363-363"];
m5_331 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="363-363"];
m5_332 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="context.Exception != null", span="363-363"];
m5_333 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="363-363"];
m5_341 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Entry lambda expression", span="378-378"];
m5_342 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="378-378"];
m5_343 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="378-378"];
m5_347 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>())", span="386-386"];
m5_348 [cluster="lambda expression", file="ServerComponentRunnerCollection.cs", label="Exit lambda expression", span="386-386"];
m5_43 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", span="370-370"];
m5_335 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", file="ServerComponentRunnerCollection.cs", label="return new DefaultJobCreationProcess(_filterProvider.Object);", span="372-372"];
m5_336 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.CreateProcess()", span="370-370"];
m5_337 [cluster="DefaultJobCreationProcess.cstr", file="ServerComponentRunnerCollection.cs", label="Entry DefaultJobCreationProcess.cstr", span=""];
m5_20 [cluster="Unk.Select", file="ServerComponentRunnerCollection.cs", label="Entry Unk.Select", span=""];
m5_62 [cluster="Unk.Verify", file="ServerComponentRunnerCollection.cs", label="Entry Unk.Verify", span=""];
m5_288 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", span="321-321"];
m5_289 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var filter = new Mock<IClientFilter>()", span="324-324"];
m5_290 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(filter.Object)", span="325-325"];
m5_293 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="filter.Setup(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception == exception)))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="330-331"];
m5_291 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var exception = new InvalidOperationException()", span="327-327"];
m5_292 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="SetupStateMachineThrowsException(exception)", span="328-328"];
m5_294 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="333-333"];
m5_295 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var jobId = process.Run(_context.Object, _creator.Object)", span="336-336"];
m5_296 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Assert.Null(jobId)", span="339-339"];
m5_297 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotThrow_HandledExceptions_AndReturnsNullJobIdentifier()", span="321-321"];
m5_307 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="343-343"];
m5_308 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ServerComponentRunnerCollection.cs", label="var outerFilter = new Mock<IClientFilter>()", span="346-346"];
m5_309 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ServerComponentRunnerCollection.cs", label="var innerFilter = new Mock<IClientFilter>()", span="347-347"];
m5_310 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(outerFilter.Object)", span="349-349"];
m5_316 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ServerComponentRunnerCollection.cs", label="outerFilter.Verify(x => x.OnCreated(It.Is<CreatedContext>(context => context.Exception != null)))", span="363-363"];
m5_311 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(innerFilter.Object)", span="350-350"];
m5_313 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ServerComponentRunnerCollection.cs", label="innerFilter.Setup(x => x.OnCreated(It.IsAny<CreatedContext>()))\r\n                .Callback((CreatedContext x) => x.ExceptionHandled = true)", span="354-355"];
m5_312 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ServerComponentRunnerCollection.cs", label="SetupStateMachineThrowsException<InvalidOperationException>()", span="352-352"];
m5_314 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="357-357"];
m5_315 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ServerComponentRunnerCollection.cs", label="Assert.DoesNotThrow(() => process.Run(_context.Object, _creator.Object))", span="360-360"];
m5_317 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="343-343"];
m5_151 [cluster="Unk.OnCreating", file="ServerComponentRunnerCollection.cs", label="Entry Unk.OnCreating", span=""];
m5_130 [cluster="Unk.Callback", file="ServerComponentRunnerCollection.cs", label="Entry Unk.Callback", span=""];
m5_24 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", span="366-366"];
m5_334 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.TestMethod()", span="366-366"];
m5_227 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="254-254"];
m5_228 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="ServerComponentRunnerCollection.cs", label="var filter = new Mock<IClientFilter>()", span="257-257"];
m5_229 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(filter.Object)", span="258-258"];
m5_230 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="ServerComponentRunnerCollection.cs", label="filter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Throws<InvalidOperationException>()", span="260-261"];
m5_234 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="ServerComponentRunnerCollection.cs", label="filter.Verify(x => x.OnCreated(It.IsAny<CreatedContext>()), Times.Never)", span="274-274"];
m5_231 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="263-263"];
m5_232 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="ServerComponentRunnerCollection.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object, _creator.Object))", span="266-267"];
m5_233 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="ServerComponentRunnerCollection.cs", label="_creator.Verify(\r\n                x => x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()), \r\n                Times.Never)", span="270-272"];
m5_235 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCall_CreateJob_And_OnCreated_WhenExceptionOccured_DuringCreatingPhase()", span="254-254"];
m5_17 [cluster="Unk.Returns", file="ServerComponentRunnerCollection.cs", label="Entry Unk.Returns", span=""];
m5_29 [cluster="Unk.CreateJob", file="ServerComponentRunnerCollection.cs", label="Entry Unk.CreateJob", span=""];
m5_37 [cluster="Hangfire.Common.JobFilter.JobFilter(object, Hangfire.Common.JobFilterScope, int?)", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Common.JobFilter.JobFilter(object, Hangfire.Common.JobFilterScope, int?)", span="38-38"];
m5_147 [cluster="Mock<IClientFilter>.cstr", file="ServerComponentRunnerCollection.cs", label="Entry Mock<IClientFilter>.cstr", span=""];
m5_183 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", span="207-207"];
m5_184 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var filter = new Mock<IClientFilter>()", span="210-210"];
m5_185 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(filter.Object)", span="211-211"];
m5_186 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="filter.Setup(x => x.OnCreating(It.IsAny<CreatingContext>()))\r\n                .Callback((CreatingContext x) => x.Canceled = true)", span="213-214"];
m5_191 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="filter.Verify(x => x.OnCreated(It.IsAny<CreatedContext>()), Times.Never)", span="228-228"];
m5_187 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="216-216"];
m5_188 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="var jobId = process.Run(_context.Object, _creator.Object)", span="219-219"];
m5_189 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Assert.Null(jobId)", span="222-222"];
m5_190 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="_creator.Verify(\r\n                x => x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()), \r\n                Times.Never)", span="224-226"];
m5_192 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_DoesNotCallBoth_CreateJob_And_OnCreated_WhenFilterCancelsThis_AndReturnsNullJobIdentifier()", span="207-207"];
m5_11 [cluster="Mock<IStorageConnection>.cstr", file="ServerComponentRunnerCollection.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m5_258 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException(System.Exception)", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException(System.Exception)", span="375-375"];
m5_338 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException(System.Exception)", file="ServerComponentRunnerCollection.cs", label="_creator\r\n                .Setup(x => x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()))\r\n                .Throws(exception)", span="377-379"];
m5_339 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException(System.Exception)", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.SetupStateMachineThrowsException(System.Exception)", span="375-375"];
m5_0 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", span="21-21"];
m5_1 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="ServerComponentRunnerCollection.cs", label="var connection = new Mock<IStorageConnection>()", span="23-23"];
m5_2 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="ServerComponentRunnerCollection.cs", label="var job = Job.FromExpression(() => TestMethod())", span="24-24"];
m5_4 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="ServerComponentRunnerCollection.cs", label="_context = new Mock<CreateContext>(connection.Object, job, state.Object)", span="27-27"];
m5_5 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="ServerComponentRunnerCollection.cs", label="_creator = new Mock<IJobCreator>()", span="29-29"];
m5_7 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="ServerComponentRunnerCollection.cs", label="_filters = new List<object>()", span="35-35"];
m5_8 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="ServerComponentRunnerCollection.cs", label="_filterProvider = new Mock<IJobFilterProvider>()", span="36-36"];
m5_9 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="ServerComponentRunnerCollection.cs", label="_filterProvider.Setup(x => x.GetFilters(It.IsNotNull<Job>())).Returns(\r\n                _filters.Select(f => new JobFilter(f, JobFilterScope.Type, null)))", span="37-38"];
m5_10 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.DefaultJobCreationProcessFacts()", span="21-21"];
m5_12 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="149-149"];
m5_33 [cluster="Unk.GetFilters", file="ServerComponentRunnerCollection.cs", label="Entry Unk.GetFilters", span=""];
m5_138 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="Entry Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="162-162"];
m5_139 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="var filter = new Mock<IClientFilter>()", span="165-165"];
m5_140 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="_filters.Add(filter.Object)", span="166-166"];
m5_141 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="filter.Setup(x => x.OnCreating(It.IsNotNull<CreatingContext>())).InSequence()", span="168-168"];
m5_143 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="filter.Setup(x => x.OnCreated(It.IsNotNull<CreatedContext>())).InSequence()", span="173-173"];
m5_142 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="_creator.Setup(x => x.CreateJob(It.IsAny<Job>(), It.IsAny<IDictionary<string, string>>(), It.IsAny<IState>()))\r\n                .InSequence()", span="170-171"];
m5_144 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="var process = CreateProcess()", span="175-175"];
m5_145 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="process.Run(_context.Object, _creator.Object)", span="178-178"];
m5_146 [cluster="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", file="ServerComponentRunnerCollection.cs", label="Exit Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts.Run_CallsClientFilters_BeforeAndAfterTheCreationOfAJob()", span="162-162"];
m5_349 [file="ServerComponentRunnerCollection.cs", label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", span=""];
m5_350 [file="ServerComponentRunnerCollection.cs", label=job, span=""];
m5_351 [file="ServerComponentRunnerCollection.cs", label=state, span=""];
m5_352 [file="ServerComponentRunnerCollection.cs", label=process, span=""];
m5_353 [file="ServerComponentRunnerCollection.cs", label=process, span=""];
m5_354 [file="ServerComponentRunnerCollection.cs", label=process, span=""];
m5_355 [file="ServerComponentRunnerCollection.cs", label=process, span=""];
m5_356 [file="ServerComponentRunnerCollection.cs", label=process, span=""];
m5_357 [file="ServerComponentRunnerCollection.cs", label=process, span=""];
m5_358 [file="ServerComponentRunnerCollection.cs", label=process, span=""];
m5_359 [file="ServerComponentRunnerCollection.cs", label=exception, span=""];
m5_360 [file="ServerComponentRunnerCollection.cs", label=process, span=""];
m5_361 [file="ServerComponentRunnerCollection.cs", label=exception, span=""];
m5_362 [file="ServerComponentRunnerCollection.cs", label=exception, span=""];
m5_363 [file="ServerComponentRunnerCollection.cs", label=process, span=""];
m6_0 [cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="ServerComponentRunnerOptions.cs", label="Entry HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", span="24-24"];
m6_1 [cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="ServerComponentRunnerOptions.cs", label="MaxRetryAttempts = 10", span="26-26"];
m6_3 [cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="ServerComponentRunnerOptions.cs", label="LowerLogVerbosity = false", span="28-28"];
m6_4 [cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="ServerComponentRunnerOptions.cs", label="Exit HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", span="24-24"];
m6_6 [file="ServerComponentRunnerOptions.cs", label="HangFire.Server.ServerComponentRunnerOptions", span=""];
m7_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerConnection.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_119 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m7_120 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="serverId == null", span="238-238"];
m7_122 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="context == null", span="239-239"];
m7_124 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="241-246"];
m7_125 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data)) as Source (Id, Data) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = null ''\r\n                + @''when not matched then insert (Id, Data) values (Source.Id, Source.Data);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data) })", span="250-256"];
m7_121 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="238-238"];
m7_123 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''context'');", span="239-239"];
m7_126 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236"];
m7_97 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m7_98 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="id == null", span="207-207"];
m7_100 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="name == null", span="208-208"];
m7_102 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="210-213"];
m7_99 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="207-207"];
m7_101 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="208-208"];
m7_103 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205"];
m7_127 [cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m7_49 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m7_50 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="job == null", span="111-111"];
m7_52 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="parameters == null", span="112-112"];
m7_55 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="var invocationData = InvocationData.Serialize(job)", span="119-119"];
m7_56 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = DateTime.UtcNow,\r\n                    expireAt = DateTime.UtcNow.Add(expireIn)\r\n                }).Single().ToString()", span="121-129"];
m7_57 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="parameters.Count > 0", span="131-131"];
m7_58 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="var parameterArray = new object[parameters.Count]", span="133-133"];
m7_60 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label=parameters, span="135-135"];
m7_51 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''job'');", span="111-111"];
m7_53 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''parameters'');", span="112-112"];
m7_54 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="114-117"];
m7_61 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="137-142"];
m7_64 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="return jobId;", span="152-152"];
m7_59 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="int parameterIndex = 0", span="134-134"];
m7_63 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="_connection.Execute(insertParameterSql, parameterArray)", span="149-149"];
m7_62 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="145-147"];
m7_65 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106"];
m7_21 [cluster="string.Format(string, object)", file="SqlServerConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m7_0 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", span="35-35"];
m7_1 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs", label="connection == null", span="37-37"];
m7_3 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs", label="options == null", span="38-38"];
m7_5 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs", label="_connection = connection", span="40-40"];
m7_6 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs", label="_options = options", span="41-41"];
m7_2 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''connection'');", span="37-37"];
m7_4 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''options'');", span="38-38"];
m7_7 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", span="35-35"];
m7_43 [cluster="System.TimeSpan.Negate()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m7_47 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="SqlServerConnection.cs", label="Entry HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22"];
m7_69 [cluster="Unk.>", file="SqlServerConnection.cs", label="Entry Unk.>", span=""];
m7_72 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m7_73 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="id == null", span="157-157"];
m7_76 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="162-163"];
m7_74 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="157-157"];
m7_75 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="string sql = \r\n                @''select InvocationData, StateName, Arguments from HangFire.Job where id = @id''", span="159-160"];
m7_77 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="jobData == null", span="165-165"];
m7_79 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="168-168"];
m7_80 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="invocationData.Arguments = jobData.Arguments", span="169-169"];
m7_86 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                LoadException = loadException\r\n            };", span="183-188"];
m7_78 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="return null;", span="165-165"];
m7_83 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="job = invocationData.Deserialize()", span="176-176"];
m7_81 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Job job = null", span="171-171"];
m7_82 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="JobLoadException loadException = null", span="172-172"];
m7_84 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label=JobLoadException, span="178-178"];
m7_85 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="loadException = ex", span="180-180"];
m7_87 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155"];
m7_13 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="49-49"];
m7_14 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="return new SqlServerWriteOnlyTransaction(_connection);", span="51-51"];
m7_15 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="49-49"];
m7_118 [cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m7_44 [cluster="Unk.Query", file="SqlServerConnection.cs", label="Entry Unk.Query", span=""];
m7_48 [cluster="Unk.ToString", file="SqlServerConnection.cs", label="Entry Unk.ToString", span=""];
m7_20 [cluster="SqlServerDistributedLock.cstr", file="SqlServerConnection.cs", label="Entry SqlServerDistributedLock.cstr", span=""];
m7_42 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="SqlServerConnection.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m7_68 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m7_22 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="61-61"];
m7_23 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="queues == null", span="63-63"];
m7_25 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="queues.Length == 0", span="64-64"];
m7_31 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="82-82"];
m7_32 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="SqlServerConnection.cs", label="idAndQueue = _connection.Query(\r\n                    String.Format(fetchJobSqlTemplate, fetchConditions[currentQueryIndex]),\r\n                    new { queues = queues, timeout = _options.JobInvisibilityTimeOut.Negate().TotalSeconds })\r\n                    .SingleOrDefault()", prediction=2, span="84-87"];
m7_24 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''queues'');", span="63-63"];
m7_26 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="throw new ArgumentException(''Queue array must be non-empty.'', ''queues'');", span="64-64"];
m7_27 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="dynamic idAndQueue", span="66-66"];
m7_28 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="string fetchJobSqlTemplate = @''\r\nset transaction isolation level read committed\r\nupdate top (1) HangFire.JobQueue set FetchedAt = GETUTCDATE()\r\noutput INSERTED.JobId, INSERTED.Queue\r\nwhere FetchedAt {0}\r\nand Queue in @queues''", span="68-73"];
m7_29 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="var fetchConditions = new[] { ''is null'', ''< DATEADD(second, @timeout, GETUTCDATE())'' }", span="77-77"];
m7_30 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="var currentQueryIndex = 0", span="78-78"];
m7_34 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="currentQueryIndex == fetchConditions.Length - 1", span="91-91"];
m7_37 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="currentQueryIndex = (currentQueryIndex + 1) % fetchConditions.Length", span="98-98"];
m7_35 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="cancellationToken.WaitHandle.WaitOne(_options.QueuePollInterval)", span="93-93"];
m7_33 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="idAndQueue == null", span="89-89"];
m7_38 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="idAndQueue == null", span="99-99"];
m7_39 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="return new ProcessingJob(\r\n                idAndQueue.JobId.ToString(CultureInfo.InvariantCulture),\r\n                idAndQueue.Queue);", span="101-103"];
m7_36 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="94-94"];
m7_40 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="61-61"];
m7_138 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m7_139 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="timeOut.Duration() != timeOut", span="279-279"];
m7_140 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="281-281"];
m7_141 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="284-286"];
m7_142 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="277-277"];
m7_12 [cluster="Unk.Dispose", file="SqlServerConnection.cs", label="Entry Unk.Dispose", span=""];
m7_143 [cluster="System.TimeSpan.Duration()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m7_9 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Dispose()", span="44-44"];
m7_10 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="_connection.Dispose()", span="46-46"];
m7_11 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Dispose()", span="44-44"];
m7_104 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m7_105 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="id == null", span="218-218"];
m7_107 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="queue == null", span="219-219"];
m7_109 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="_connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = id, queueName = queue })", span="221-222"];
m7_106 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="218-218"];
m7_108 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''queue'');", span="219-219"];
m7_110 [cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216"];
m7_90 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m7_91 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="id == null", span="193-193"];
m7_93 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="name == null", span="194-194"];
m7_95 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="196-202"];
m7_92 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="193-193"];
m7_94 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="194-194"];
m7_96 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191"];
m7_16 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34"];
m7_111 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m7_112 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="key == null", span="227-227"];
m7_114 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="toScore < fromScore", span="228-228"];
m7_116 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="230-233"];
m7_113 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="227-227"];
m7_115 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="228-228"];
m7_117 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225"];
m7_67 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m7_17 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="54-54"];
m7_18 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs", label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:Job:{0}'', jobId), \r\n                _connection);", span="56-58"];
m7_19 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="54-54"];
m7_41 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m7_70 [cluster="Unk.Single", file="SqlServerConnection.cs", label="Entry Unk.Single", span=""];
m7_46 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m7_89 [cluster="HangFire.Storage.JobData.JobData()", file="SqlServerConnection.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m7_71 [cluster="Unk.Execute", file="SqlServerConnection.cs", label="Entry Unk.Execute", span=""];
m7_88 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="SqlServerConnection.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m7_128 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m7_129 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="serverId == null", span="261-261"];
m7_131 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="263-265"];
m7_130 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="261-261"];
m7_132 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="259-259"];
m7_133 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m7_134 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="serverId == null", span="270-270"];
m7_136 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="272-274"];
m7_135 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="270-270"];
m7_137 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="268-268"];
m7_45 [cluster="Unk.SingleOrDefault", file="SqlServerConnection.cs", label="Entry Unk.SingleOrDefault", span=""];
m7_66 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SqlServerConnection.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m7_144 [file="SqlServerConnection.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m8_25 [cluster="Unk.OnScenarioStart", file="SqlServerStorage.cs", label="Entry Unk.OnScenarioStart", span=""];
m8_29 [cluster="Unk.CollectScenarioErrors", file="SqlServerStorage.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m8_21 [cluster="Unk.OnScenarioEnd", file="SqlServerStorage.cs", label="Entry Unk.OnScenarioEnd", span=""];
m8_136 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", span="351-351"];
m8_137 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the `Perform.In<TestJob>(TimeSpan delay, object args)` method should schedule a j'' +\r\n                    ''ob of the given type'', ((string[])(null)))", span="353-354"];
m8_138 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="356-356"];
m8_139 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="358-358"];
m8_140 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.In<TestJob>(TimeSpan.FromDays(1), new { ArticleId = 3 })`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="360-360"];
m8_141 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="362-364"];
m8_142 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="table3.AddRow(new string[] {\r\n                        ''ArticleId'',\r\n                        ''3''})", span="365-367"];
m8_143 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.Then(''the \'TestJob\' should be scheduled for tomorrow with the following arguments:'', ((string)(null)), table3, ''Then '')", span="369-369"];
m8_144 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="371-371"];
m8_145 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayObjectArgsMethodShouldScheduleAJobOfTheGivenType()", span="351-351"];
m8_9 [cluster="HangFire.Tests.ClientFeature.FeatureTearDown()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.FeatureTearDown()", span="39-39"];
m8_10 [cluster="HangFire.Tests.ClientFeature.FeatureTearDown()", file="SqlServerStorage.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m8_11 [cluster="HangFire.Tests.ClientFeature.FeatureTearDown()", file="SqlServerStorage.cs", label="testRunner = null", span="42-42"];
m8_12 [cluster="HangFire.Tests.ClientFeature.FeatureTearDown()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.FeatureTearDown()", span="39-39"];
m8_93 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeObjectArgsMethodShouldCauseException()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeObjectArgsMethodShouldCauseException()", span="238-238"];
m8_94 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeObjectArgsMethodShouldCauseException()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Passing the null type argument to the `Perform.Async(Type type, object args)` met'' +\r\n                    ''hod should cause exception'', ((string[])(null)))", span="240-241"];
m8_95 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeObjectArgsMethodShouldCauseException()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="243-243"];
m8_96 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeObjectArgsMethodShouldCauseException()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="245-245"];
m8_97 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeObjectArgsMethodShouldCauseException()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.Async(null, new { ArticleId = 3 })`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="247-247"];
m8_98 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeObjectArgsMethodShouldCauseException()", file="SqlServerStorage.cs", label="testRunner.Then(''a \'System.ArgumentNullException\' should be thrown'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="249-249"];
m8_99 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeObjectArgsMethodShouldCauseException()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="251-251"];
m8_100 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeObjectArgsMethodShouldCauseException()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeObjectArgsMethodShouldCauseException()", span="238-238"];
m8_5 [cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SqlServerStorage.cs", label="Entry HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17"];
m8_101 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobToItsActualQueue()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobToItsActualQueue()", span="258-258"];
m8_102 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobToItsActualQueue()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the `Perform.Async<TJob>()` method should enqueue a job to its actual queue'', ((string[])(null)))", span="260-260"];
m8_103 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobToItsActualQueue()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="262-262"];
m8_104 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobToItsActualQueue()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="264-264"];
m8_105 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobToItsActualQueue()", file="SqlServerStorage.cs", label="testRunner.Given(''the following job type:'', ''[Queue(\''critical\'')]\r\npublic class CriticalQueueJob : BackgroundJob\r\n{\r\n    public'' +\r\n                    '' override void Perform()\r\n    {\r\n    }\r\n}'', ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="267-268"];
m8_106 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobToItsActualQueue()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.Async<CriticalQueueJob>()`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="270-270"];
m8_107 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobToItsActualQueue()", file="SqlServerStorage.cs", label="testRunner.Then(''the argumentless \'CriticalQueueJob\' should be added to the \'critical\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="272-272"];
m8_108 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobToItsActualQueue()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="274-274"];
m8_109 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobToItsActualQueue()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobToItsActualQueue()", span="258-258"];
m8_58 [cluster="HangFire.Tests.ClientFeature.WhenOneOrMoreOfTheJobArgumentsCanNotBeConvertedUsingTheCustomTypeConverterAnExceptionShouldBeRaised()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.WhenOneOrMoreOfTheJobArgumentsCanNotBeConvertedUsingTheCustomTypeConverterAnExceptionShouldBeRaised()", span="137-137"];
m8_59 [cluster="HangFire.Tests.ClientFeature.WhenOneOrMoreOfTheJobArgumentsCanNotBeConvertedUsingTheCustomTypeConverterAnExceptionShouldBeRaised()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When one or more of the job arguments can not be converted using the custom TypeC'' +\r\n                    ''onverter, an exception should be raised'', ((string[])(null)))", span="139-140"];
m8_60 [cluster="HangFire.Tests.ClientFeature.WhenOneOrMoreOfTheJobArgumentsCanNotBeConvertedUsingTheCustomTypeConverterAnExceptionShouldBeRaised()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="142-142"];
m8_61 [cluster="HangFire.Tests.ClientFeature.WhenOneOrMoreOfTheJobArgumentsCanNotBeConvertedUsingTheCustomTypeConverterAnExceptionShouldBeRaised()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="144-144"];
m8_62 [cluster="HangFire.Tests.ClientFeature.WhenOneOrMoreOfTheJobArgumentsCanNotBeConvertedUsingTheCustomTypeConverterAnExceptionShouldBeRaised()", file="SqlServerStorage.cs", label="testRunner.Given(''the custom types:'', @''[TypeConverter(typeof(CustomTypeConverter))\r\npublic class CustomType {}\r\n\r\npublic class CustomTypeConverter : TypeConverter\r\n{\r\n    public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)\r\n    {\r\n        throw new NotSupportedException();\r\n    }\r\n}'', ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="147-156"];
m8_63 [cluster="HangFire.Tests.ClientFeature.WhenOneOrMoreOfTheJobArgumentsCanNotBeConvertedUsingTheCustomTypeConverterAnExceptionShouldBeRaised()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.Async<TestJob>(new { Author = new CustomType() })`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="158-158"];
m8_64 [cluster="HangFire.Tests.ClientFeature.WhenOneOrMoreOfTheJobArgumentsCanNotBeConvertedUsingTheCustomTypeConverterAnExceptionShouldBeRaised()", file="SqlServerStorage.cs", label="testRunner.Then(''a \'System.InvalidOperationException\' should be thrown'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="160-160"];
m8_65 [cluster="HangFire.Tests.ClientFeature.WhenOneOrMoreOfTheJobArgumentsCanNotBeConvertedUsingTheCustomTypeConverterAnExceptionShouldBeRaised()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="162-162"];
m8_66 [cluster="HangFire.Tests.ClientFeature.WhenOneOrMoreOfTheJobArgumentsCanNotBeConvertedUsingTheCustomTypeConverterAnExceptionShouldBeRaised()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.WhenOneOrMoreOfTheJobArgumentsCanNotBeConvertedUsingTheCustomTypeConverterAnExceptionShouldBeRaised()", span="137-137"];
m8_110 [cluster="HangFire.Tests.ClientFeature.TheQueueNameShouldContainOnlyLowercaseLettersDigitsAndUnderscores()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.TheQueueNameShouldContainOnlyLowercaseLettersDigitsAndUnderscores()", span="281-281"];
m8_111 [cluster="HangFire.Tests.ClientFeature.TheQueueNameShouldContainOnlyLowercaseLettersDigitsAndUnderscores()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the queue name should contain only lowercase letters, digits and underscores'', ((string[])(null)))", span="283-283"];
m8_112 [cluster="HangFire.Tests.ClientFeature.TheQueueNameShouldContainOnlyLowercaseLettersDigitsAndUnderscores()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="285-285"];
m8_113 [cluster="HangFire.Tests.ClientFeature.TheQueueNameShouldContainOnlyLowercaseLettersDigitsAndUnderscores()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="287-287"];
m8_114 [cluster="HangFire.Tests.ClientFeature.TheQueueNameShouldContainOnlyLowercaseLettersDigitsAndUnderscores()", file="SqlServerStorage.cs", label="testRunner.Given(''the following job type:'', ''[Queue(\'' $InvalidQueue\'')]\r\npublic class InvalidQueueJob : BackgroundJob\r\n{\r\n    p'' +\r\n                    ''ublic override void Perform()\r\n    {\r\n    }\r\n}'', ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="290-291"];
m8_115 [cluster="HangFire.Tests.ClientFeature.TheQueueNameShouldContainOnlyLowercaseLettersDigitsAndUnderscores()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.Async<InvalidQueueJob>()`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="293-293"];
m8_116 [cluster="HangFire.Tests.ClientFeature.TheQueueNameShouldContainOnlyLowercaseLettersDigitsAndUnderscores()", file="SqlServerStorage.cs", label="testRunner.Then(''a \'System.InvalidOperationException\' should be thrown'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="295-295"];
m8_117 [cluster="HangFire.Tests.ClientFeature.TheQueueNameShouldContainOnlyLowercaseLettersDigitsAndUnderscores()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="297-297"];
m8_118 [cluster="HangFire.Tests.ClientFeature.TheQueueNameShouldContainOnlyLowercaseLettersDigitsAndUnderscores()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.TheQueueNameShouldContainOnlyLowercaseLettersDigitsAndUnderscores()", span="281-281"];
m8_22 [cluster="HangFire.Tests.ClientFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m8_23 [cluster="HangFire.Tests.ClientFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerStorage.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m8_24 [cluster="HangFire.Tests.ClientFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m8_75 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeMethodShouldCauseException()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeMethodShouldCauseException()", span="189-189"];
m8_76 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeMethodShouldCauseException()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Passing the null type argument to the `Perform.Async(Type type)` method should ca'' +\r\n                    ''use exception'', ((string[])(null)))", span="191-192"];
m8_77 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeMethodShouldCauseException()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="194-194"];
m8_78 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeMethodShouldCauseException()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="196-196"];
m8_79 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeMethodShouldCauseException()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.Async(null)`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="198-198"];
m8_80 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeMethodShouldCauseException()", file="SqlServerStorage.cs", label="testRunner.Then(''a \'System.ArgumentNullException\' should be thrown'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="200-200"];
m8_81 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeMethodShouldCauseException()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="202-202"];
m8_82 [cluster="HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeMethodShouldCauseException()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.PassingTheNullTypeArgumentToThePerform_AsyncTypeTypeMethodShouldCauseException()", span="189-189"];
m8_26 [cluster="HangFire.Tests.ClientFeature.ScenarioCleanup()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ScenarioCleanup()", span="66-66"];
m8_27 [cluster="HangFire.Tests.ClientFeature.ScenarioCleanup()", file="SqlServerStorage.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m8_28 [cluster="HangFire.Tests.ClientFeature.ScenarioCleanup()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ScenarioCleanup()", span="66-66"];
m8_83 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", span="210-210"];
m8_84 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the `Perform.Async(Type type, object args)` method should enqueue job of the give'' +\r\n                    ''n type'', ((string[])(null)))", span="212-213"];
m8_85 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="215-215"];
m8_86 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="217-217"];
m8_87 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.Async(typeof(TestJob), new { ArticleId = 3 })`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="219-219"];
m8_88 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="221-223"];
m8_89 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", file="SqlServerStorage.cs", label="table2.AddRow(new string[] {\r\n                        ''ArticleId'',\r\n                        ''3''})", span="224-226"];
m8_90 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.Then(''the \'TestJob\' should be added to the default queue with the following arguments:'', ((string)(null)), table2, ''Then '')", span="228-228"];
m8_91 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="230-230"];
m8_92 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeObjectArgsMethodShouldEnqueueJobOfTheGivenType()", span="210-210"];
m8_13 [cluster="Unk.OnFeatureEnd", file="SqlServerStorage.cs", label="Entry Unk.OnFeatureEnd", span=""];
m8_7 [cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SqlServerStorage.cs", label="Exit HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17"];
m8_14 [cluster="HangFire.Tests.ClientFeature.TestInitialize()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.TestInitialize()", span="46-46"];
m8_15 [cluster="HangFire.Tests.ClientFeature.TestInitialize()", file="SqlServerStorage.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Client''))", span="48-49"];
m8_16 [cluster="HangFire.Tests.ClientFeature.TestInitialize()", file="SqlServerStorage.cs", label="HangFire.Tests.ClientFeature.FeatureSetup(null)", span="51-51"];
m8_17 [cluster="HangFire.Tests.ClientFeature.TestInitialize()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.TestInitialize()", span="46-46"];
m8_18 [cluster="HangFire.Tests.ClientFeature.ScenarioTearDown()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ScenarioTearDown()", span="56-56"];
m8_19 [cluster="HangFire.Tests.ClientFeature.ScenarioTearDown()", file="SqlServerStorage.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m8_20 [cluster="HangFire.Tests.ClientFeature.ScenarioTearDown()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ScenarioTearDown()", span="56-56"];
m8_43 [cluster="Unk.When", file="SqlServerStorage.cs", label="Entry Unk.When", span=""];
m8_146 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeMethodShouldScheduleAJobOfTheGivenType()", span="379-379"];
m8_147 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the `Perform.In(TimeSpan delay, Type type)` method should schedule a job of the g'' +\r\n                    ''iven type'', ((string[])(null)))", span="381-382"];
m8_148 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="384-384"];
m8_149 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="386-386"];
m8_150 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.In(TimeSpan.FromDays(1), typeof(TestJob))`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="388-388"];
m8_151 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.Then(''the argumentless \'TestJob\' should be scheduled for tomorrow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="390-390"];
m8_152 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="392-392"];
m8_153 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeMethodShouldScheduleAJobOfTheGivenType()", span="379-379"];
m8_45 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", span="106-106"];
m8_46 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the `Perform.Async<TJob>(object args)` method should enqueue job with the given a'' +\r\n                    ''rguments'', ((string[])(null)))", span="108-109"];
m8_47 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="111-111"];
m8_48 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="113-113"];
m8_49 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.Async<TestJob>(new { ArticleId = 3, Author = \''odinserj\'' })`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="115-115"];
m8_50 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="117-119"];
m8_51 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", file="SqlServerStorage.cs", label="table1.AddRow(new string[] {\r\n                        ''ArticleId'',\r\n                        ''3''})", span="120-122"];
m8_52 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", file="SqlServerStorage.cs", label="table1.AddRow(new string[] {\r\n                        ''Author'',\r\n                        ''odinserj''})", span="123-125"];
m8_53 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", file="SqlServerStorage.cs", label="testRunner.Then(''the \'TestJob\' should be added to the default queue with the following arguments:'', ((string)(null)), table1, ''Then '')", span="127-127"];
m8_54 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="129-129"];
m8_55 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ThePerform_AsyncTJobObjectArgsMethodShouldEnqueueJobWithTheGivenArguments()", span="106-106"];
m8_57 [cluster="Unk.AddRow", file="SqlServerStorage.cs", label="Entry Unk.AddRow", span=""];
m8_67 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeMethodShouldEnqueueAJobOfTheGivenType()", span="169-169"];
m8_68 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the `Perform.Async(Type type)` method should enqueue a job of the given type'', ((string[])(null)))", span="171-171"];
m8_69 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="173-173"];
m8_70 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="175-175"];
m8_71 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.Async(typeof(TestJob))`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="177-177"];
m8_72 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.Then(''the argumentless \'TestJob\' should be added to the default queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="179-179"];
m8_73 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="181-181"];
m8_74 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ThePerform_AsyncTypeTypeMethodShouldEnqueueAJobOfTheGivenType()", span="169-169"];
m8_42 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerStorage.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m8_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", color=green, community=0, file="SqlServerStorage.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", prediction=3, span=""];
m8_44 [cluster="Unk.Then", file="SqlServerStorage.cs", label="Entry Unk.Then", span=""];
m8_30 [cluster="HangFire.Tests.ClientFeature.FeatureBackground()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.FeatureBackground()", span="71-71"];
m8_31 [cluster="HangFire.Tests.ClientFeature.FeatureBackground()", file="SqlServerStorage.cs", label="testRunner.Given(''the following job type:'', ''public class TestJob : BackgroundJob\r\n{\r\n    public int ArticleId { get; set; }\r\n'' +\r\n                    ''    public string Author { get; set; }\r\n\r\n    public override void Perform()\r\n  '' +\r\n                    ''  {\r\n    }\r\n}          '', ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="76-78"];
m8_32 [cluster="HangFire.Tests.ClientFeature.FeatureBackground()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.FeatureBackground()", span="71-71"];
m8_33 [cluster="Unk.Given", file="SqlServerStorage.cs", label="Entry Unk.Given", span=""];
m8_128 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayMethodShouldScheduleAJobOfTheGivenType()", span="330-330"];
m8_129 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the `Perform.In<TestJob>(TimeSpan delay)` method should schedule a job of the giv'' +\r\n                    ''en type'', ((string[])(null)))", span="332-333"];
m8_130 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="335-335"];
m8_131 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="337-337"];
m8_132 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.In<TestJob>(TimeSpan.FromDays(1))`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="339-339"];
m8_133 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.Then(''the argumentless \'TestJob\' should be scheduled for tomorrow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="341-341"];
m8_134 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="343-343"];
m8_135 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ThePerform_InTestJobTimeSpanDelayMethodShouldScheduleAJobOfTheGivenType()", span="330-330"];
m8_8 [cluster="Unk.OnFeatureStart", file="SqlServerStorage.cs", label="Entry Unk.OnFeatureStart", span=""];
m8_56 [cluster="TechTalk.SpecFlow.Table.cstr", file="SqlServerStorage.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m8_0 [cluster="HangFire.Tests.ClientFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m8_1 [cluster="HangFire.Tests.ClientFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorage.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m8_2 [cluster="HangFire.Tests.ClientFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Client'', ''\r\n  As a Developer, I want to define and create jobs.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m8_3 [cluster="HangFire.Tests.ClientFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorage.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m8_4 [cluster="HangFire.Tests.ClientFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m8_154 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", span="400-400"];
m8_155 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The `Perform.In(TimeSpan delay, Type type, object args)` method should schedule a'' +\r\n                    '' job of the given type'', ((string[])(null)))", span="402-403"];
m8_156 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="405-405"];
m8_157 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="407-407"];
m8_158 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.In(TimeSpan.FromDays(1), typeof(TestJob), new { ArticleId = 3'' +\r\n                    '' })`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="409-410"];
m8_159 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="412-414"];
m8_160 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="table4.AddRow(new string[] {\r\n                        ''ArticleId'',\r\n                        ''3''})", span="415-417"];
m8_161 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.Then(''the \'TestJob\' should be scheduled for tomorrow with the following arguments:'', ((string)(null)), table4, ''Then '')", span="419-419"];
m8_162 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="421-421"];
m8_163 [cluster="HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ThePerform_InTimeSpanDelayTypeTypeObjectArgsMethodShouldScheduleAJobOfTheGivenType()", span="400-400"];
m8_119 [cluster="HangFire.Tests.ClientFeature.IfTheQueueAttributeContainsAnEmptyOrNullStringThenTheActualQueueShouldBeTheDefaultQueue()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.IfTheQueueAttributeContainsAnEmptyOrNullStringThenTheActualQueueShouldBeTheDefaultQueue()", span="305-305"];
m8_120 [cluster="HangFire.Tests.ClientFeature.IfTheQueueAttributeContainsAnEmptyOrNullStringThenTheActualQueueShouldBeTheDefaultQueue()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''if the QueueAttribute contains an empty or null string, then the actual queue sho'' +\r\n                    ''uld be the default queue'', ((string[])(null)))", span="307-308"];
m8_121 [cluster="HangFire.Tests.ClientFeature.IfTheQueueAttributeContainsAnEmptyOrNullStringThenTheActualQueueShouldBeTheDefaultQueue()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="310-310"];
m8_122 [cluster="HangFire.Tests.ClientFeature.IfTheQueueAttributeContainsAnEmptyOrNullStringThenTheActualQueueShouldBeTheDefaultQueue()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="312-312"];
m8_123 [cluster="HangFire.Tests.ClientFeature.IfTheQueueAttributeContainsAnEmptyOrNullStringThenTheActualQueueShouldBeTheDefaultQueue()", file="SqlServerStorage.cs", label="testRunner.Given(''the following job type:'', ''[Queue(\''\'')]\r\npublic class EmptyQueueJob : BackgroundJob\r\n{\r\n    public override v'' +\r\n                    ''oid Perform()\r\n    {\r\n    }\r\n}'', ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="315-316"];
m8_124 [cluster="HangFire.Tests.ClientFeature.IfTheQueueAttributeContainsAnEmptyOrNullStringThenTheActualQueueShouldBeTheDefaultQueue()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.Async<EmptyQueueJob>()`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="318-318"];
m8_125 [cluster="HangFire.Tests.ClientFeature.IfTheQueueAttributeContainsAnEmptyOrNullStringThenTheActualQueueShouldBeTheDefaultQueue()", file="SqlServerStorage.cs", label="testRunner.Then(''the argumentless \'EmptyQueueJob\' should be added to the default queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="320-320"];
m8_126 [cluster="HangFire.Tests.ClientFeature.IfTheQueueAttributeContainsAnEmptyOrNullStringThenTheActualQueueShouldBeTheDefaultQueue()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="322-322"];
m8_127 [cluster="HangFire.Tests.ClientFeature.IfTheQueueAttributeContainsAnEmptyOrNullStringThenTheActualQueueShouldBeTheDefaultQueue()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.IfTheQueueAttributeContainsAnEmptyOrNullStringThenTheActualQueueShouldBeTheDefaultQueue()", span="305-305"];
m8_34 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Entry HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobOfTheGivenType()", span="86-86"];
m8_35 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the `Perform.Async<TJob>()` method should enqueue a job of the given type'', ((string[])(null)))", span="88-88"];
m8_36 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioSetup(scenarioInfo)", span="90-90"];
m8_37 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.FeatureBackground()", span="92-92"];
m8_38 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.When(''I call the `Perform.Async<TestJob>()`'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="94-94"];
m8_39 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="testRunner.Then(''the argumentless \'TestJob\' should be added to the default queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="96-96"];
m8_40 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="this.ScenarioCleanup()", span="98-98"];
m8_41 [cluster="HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobOfTheGivenType()", file="SqlServerStorage.cs", label="Exit HangFire.Tests.ClientFeature.ThePerform_AsyncTJobMethodShouldEnqueueAJobOfTheGivenType()", span="86-86"];
m8_164 [file="SqlServerStorage.cs", label="HangFire.Tests.ClientFeature", span=""];
m9_6 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerStorageOptions.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m9_0 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m9_1 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="26-26"];
m9_2 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs", label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", prediction=4, span="27-27"];
m9_3 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="PrepareSchemaIfNecessary = true", span="29-29"];
m9_4 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", label="Exit HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m9_7 [file="SqlServerStorageOptions.cs", label="HangFire.SqlServer.SqlServerStorageOptions", span=""];
m10_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="StorageFacts.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m10_54 [cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="StorageFacts.cs", label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29"];
m10_51 [cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", file="StorageFacts.cs", label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", span="28-28"];
m10_55 [cluster="Hangfire.States.FailedState.FailedState(System.Exception)", file="StorageFacts.cs", label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="26-26"];
m10_49 [cluster="System.ArgumentException.ArgumentException(string, string)", file="StorageFacts.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m10_53 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="StorageFacts.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="0-0"];
m10_50 [cluster="string.Format(string, object)", file="StorageFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m10_9 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="Entry Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="40-40"];
m10_10 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="job == null", span="45-45"];
m10_12 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="parameters == null", span="46-46"];
m10_14 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="state == null", span="47-47"];
m10_17 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="var jobId = _connection.CreateExpiredJob(\r\n                job,\r\n                parameters,\r\n                createdAt,\r\n                TimeSpan.FromHours(1))", span="50-54"];
m10_18 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="var context = new StateContext(jobId, job, createdAt, _connection)", span="56-56"];
m10_19 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="_stateChangeProcess.ChangeState(context, state, null)", span="57-57"];
m10_11 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="throw new ArgumentNullException(''job'');", span="45-45"];
m10_13 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="throw new ArgumentNullException(''parameters'');", span="46-46"];
m10_15 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="throw new ArgumentNullException(''state'');", span="47-47"];
m10_16 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="var createdAt = DateTime.UtcNow", span="49-49"];
m10_20 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", color=green, community=0, file="StorageFacts.cs", label="return jobId;", prediction=5, span="59-59"];
m10_21 [cluster="Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StorageFacts.cs", label="Exit Hangfire.States.StateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="40-40"];
m10_0 [cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StorageFacts.cs", label="Entry Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", span="31-31"];
m10_1 [cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StorageFacts.cs", label="connection == null", span="33-33"];
m10_3 [cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StorageFacts.cs", label="stateChangeProcess == null", span="34-34"];
m10_5 [cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StorageFacts.cs", label="_connection = connection", span="36-36"];
m10_6 [cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StorageFacts.cs", label="_stateChangeProcess = stateChangeProcess", span="37-37"];
m10_2 [cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StorageFacts.cs", label="throw new ArgumentNullException(''connection'');", span="33-33"];
m10_4 [cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StorageFacts.cs", label="throw new ArgumentNullException(''stateChangeProcess'');", span="34-34"];
m10_7 [cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StorageFacts.cs", label="Exit Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", span="31-31"];
m10_22 [cluster="System.TimeSpan.FromHours(double)", file="StorageFacts.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m10_24 [cluster="Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime, Hangfire.Storage.IStorageConnection)", file="StorageFacts.cs", label="Entry Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime, Hangfire.Storage.IStorageConnection)", span="24-24"];
m10_52 [cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)", file="StorageFacts.cs", label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42"];
m10_23 [cluster="Hangfire.Storage.IStorageConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="StorageFacts.cs", label="Entry Hangfire.Storage.IStorageConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="30-30"];
m10_26 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="Entry Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", span="62-62"];
m10_27 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", color=green, community=0, file="StorageFacts.cs", label="jobId == null", prediction=6, span="65-65"];
m10_29 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", color=green, community=0, file="StorageFacts.cs", label="toState == null", prediction=7, span="66-66"];
m10_31 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", color=green, community=0, file="StorageFacts.cs", label="fromStates != null && fromStates.Length == 0", prediction=7, span="67-67"];
m10_33 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", color=green, community=0, file="StorageFacts.cs", label="_connection.AcquireDistributedLock(\r\n                String.Format(''job:{0}:state-lock'', jobId),\r\n                JobLockTimeout)", prediction=7, span="78-80"];
m10_34 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="var jobData = _connection.GetJobData(jobId)", span="82-82"];
m10_37 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="fromStates != null && !fromStates.Contains(jobData.State, StringComparer.OrdinalIgnoreCase)", span="91-91"];
m10_42 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="!toState.IgnoreJobLoadException", span="109-109"];
m10_43 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="toState = new FailedState(ex.InnerException)\r\n                        {\r\n                            Reason = String.Format(\r\n                                ''Can not change the state of a job to '{0}': target method was not found.'',\r\n                                toState.Name)\r\n                        }", span="111-116"];
m10_45 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="var context = new StateContext(jobId, jobData.Job, jobData.CreatedAt, _connection)", span="122-122"];
m10_46 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="var stateChanged = _stateChangeProcess.ChangeState(context, toState, jobData.State)", span="123-123"];
m10_28 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", color=green, community=0, file="StorageFacts.cs", label="throw new ArgumentNullException(''jobId'');", prediction=10, span="65-65"];
m10_30 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", color=green, community=0, file="StorageFacts.cs", label="throw new ArgumentNullException(''toState'');", prediction=11, span="66-66"];
m10_32 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", color=green, community=0, file="StorageFacts.cs", label="throw new ArgumentException(''From states array should be null or non-empty.'', ''fromStates'');", prediction=12, span="69-69"];
m10_35 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="jobData == null", span="84-84"];
m10_40 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="jobData.EnsureLoaded()", span="100-100"];
m10_36 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="return false;", span="88-88"];
m10_38 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="return false;", span="93-93"];
m10_39 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="bool loadSucceeded = true", span="96-96"];
m10_47 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="return loadSucceeded && stateChanged;", span="125-125"];
m10_41 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label=JobLoadException, span="102-102"];
m10_44 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="loadSucceeded = false", span="118-118"];
m10_48 [cluster="Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="StorageFacts.cs", label="Exit Hangfire.States.StateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", span="62-62"];
m10_25 [cluster="Hangfire.States.IStateChangeProcess.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="StorageFacts.cs", label="Entry Hangfire.States.IStateChangeProcess.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", span="20-20"];
m10_56 [file="StorageFacts.cs", label="Hangfire.States.StateMachine", span=""];
m11_12 [cluster="Unk.>", file="StorageOptionsFacts.cs", label="Entry Unk.>", span=""];
m11_7 [cluster="Unk.True", file="StorageOptionsFacts.cs", label="Entry Unk.True", span=""];
m11_6 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="StorageOptionsFacts.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m11_29 [cluster="Unk.Equal", file="StorageOptionsFacts.cs", label="Entry Unk.Equal", span=""];
m11_16 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="26-26"];
m11_17 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs", label="var options = new SqlServerStorageOptions()", span="28-28"];
m11_18 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.FromSeconds(-1))", span="29-30"];
m11_19 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", file="StorageOptionsFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsNegative()", span="26-26"];
m11_24 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", span="34-34"];
m11_25 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs", label="var options = new SqlServerStorageOptions()", span="36-36"];
m11_26 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs", label="options.QueuePollInterval = TimeSpan.FromSeconds(1)", span="37-37"];
m11_27 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs", label="Assert.Equal(TimeSpan.FromSeconds(1), options.QueuePollInterval)", span="38-38"];
m11_28 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", file="StorageOptionsFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_SetsTheValue()", span="34-34"];
m11_8 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="18-18"];
m11_9 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs", label="var options = new SqlServerStorageOptions()", span="20-20"];
m11_10 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.QueuePollInterval = TimeSpan.Zero)", span="21-22"];
m11_11 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", file="StorageOptionsFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Set_QueuePollInterval_ShouldThrowAnException_WhenGivenIntervalIsEqualToZero()", span="18-18"];
m11_20 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="Entry lambda expression", span="30-30"];
m11_14 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="options.QueuePollInterval = TimeSpan.Zero", span="22-22"];
m11_13 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="Entry lambda expression", span="22-22"];
m11_15 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="Exit lambda expression", span="22-22"];
m11_21 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="options.QueuePollInterval = TimeSpan.FromSeconds(-1)", span="30-30"];
m11_22 [cluster="lambda expression", file="StorageOptionsFacts.cs", label="Exit lambda expression", span="30-30"];
m11_0 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs", label="Entry HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8"];
m11_1 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs", label="var options = new SqlServerStorageOptions()", span="10-10"];
m11_2 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs", label="Assert.True(options.QueuePollInterval > TimeSpan.Zero)", span="12-12"];
m11_4 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs", label="Assert.True(options.PrepareSchemaIfNecessary)", span="14-14"];
m11_5 [cluster="HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", file="StorageOptionsFacts.cs", label="Exit HangFire.SqlServer.Tests.StorageOptionsFacts.Ctor_SetsTheDefaultOptions()", span="8-8"];
m11_30 [file="StorageOptionsFacts.cs", label=options, span=""];
m11_31 [file="StorageOptionsFacts.cs", label=options, span=""];
m12_13 [cluster="HangFire.Common.Filters.JobFilter.JobFilter(object, HangFire.Common.Filters.JobFilterScope, int?)", file="WorkerManager.cs", label="Entry HangFire.Common.Filters.JobFilter.JobFilter(object, HangFire.Common.Filters.JobFilterScope, int?)", span="38-38"];
m12_37 [cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="WorkerManager.cs", label="Entry HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", span="24-24"];
m12_29 [cluster="HangFire.Server.ServerComponentRunnerCollection.Dispose()", file="WorkerManager.cs", label="Entry HangFire.Server.ServerComponentRunnerCollection.Dispose()", span="55-55"];
m12_45 [cluster="HangFire.Server.Filters.PerformedContext.PerformedContext(HangFire.Server.Performing.PerformContext, bool, System.Exception)", file="WorkerManager.cs", label="Entry HangFire.Server.Filters.PerformedContext.PerformedContext(HangFire.Server.Performing.PerformContext, bool, System.Exception)", span="27-27"];
m12_51 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="Entry HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", span="86-86"];
m12_54 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="return new PerformedContext(\r\n                    preContext, true, null);", span="94-95"];
m12_60 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="postContext = new PerformedContext(\r\n                    preContext, false, ex)", span="107-108"];
m12_52 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="filter.OnPerforming(preContext)", span="91-91"];
m12_53 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="preContext.Canceled", span="92-92"];
m12_57 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="postContext = continuation()", span="102-102"];
m12_61 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="filter.OnPerformed(postContext)", span="109-109"];
m12_65 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="filter.OnPerformed(postContext)", span="119-119"];
m12_59 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="wasError = true", span="106-106"];
m12_62 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="!postContext.ExceptionHandled", span="111-111"];
m12_66 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="return postContext;", span="122-122"];
m12_63 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="throw;", span="113-113"];
m12_55 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="var wasError = false", span="98-98"];
m12_56 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="PerformedContext postContext", span="99-99"];
m12_58 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label=Exception, span="104-104"];
m12_64 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="!wasError", span="117-117"];
m12_67 [cluster="HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", file="WorkerManager.cs", label="Exit HangFire.Server.Performing.JobPerformer.InvokePerformFilter(HangFire.Server.Filters.IServerFilter, HangFire.Server.Filters.PerformingContext, System.Func<HangFire.Server.Filters.PerformedContext>)", span="86-86"];
m12_30 [cluster="HangFire.Server.Performing.JobPerformer.InvokeServerExceptionFilters(HangFire.Server.Filters.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.Filters.IServerExceptionFilter>)", file="WorkerManager.cs", label="Entry HangFire.Server.Performing.JobPerformer.InvokeServerExceptionFilters(HangFire.Server.Filters.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.Filters.IServerExceptionFilter>)", span="125-125"];
m12_31 [cluster="HangFire.Server.Performing.JobPerformer.PerformJobWithFilters(HangFire.Server.Performing.PerformContext, HangFire.Server.Performing.IJobPerformStrategy, System.Collections.Generic.IEnumerable<HangFire.Server.Filters.IServerFilter>)", file="WorkerManager.cs", label="var preContext = new PerformingContext(context)", span="73-73"];
m12_32 [cluster="HangFire.Server.Performing.JobPerformer.PerformJobWithFilters(HangFire.Server.Performing.PerformContext, HangFire.Server.Performing.IJobPerformStrategy, System.Collections.Generic.IEnumerable<HangFire.Server.Filters.IServerFilter>)", file="WorkerManager.cs", label="Func<PerformedContext> continuation = () =>\r\n            {\r\n                strategy.Perform();\r\n                return new PerformedContext(context, false, null);\r\n            }", span="74-78"];
m12_18 [cluster="System.Collections.Generic.List<T>.Add(T)", file="WorkerManager.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m12_14 [cluster="HangFire.Server.Performing.JobPerformer.GetFilters(HangFire.Common.JobMethod)", file="WorkerManager.cs", label="Entry HangFire.Server.Performing.JobPerformer.GetFilters(HangFire.Common.JobMethod)", span="43-43"];
m12_39 [cluster="Unk.thunk", file="WorkerManager.cs", label="Entry Unk.thunk", span=""];
m12_19 [cluster="HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)", file="WorkerManager.cs", label="Entry HangFire.Server.ServerComponentRunnerCollection.ServerComponentRunnerCollection(System.Collections.Generic.IEnumerable<HangFire.Server.IServerComponentRunner>)", span="27-27"];
m12_20 [cluster="HangFire.Server.WorkerManager.Execute(System.Threading.CancellationToken)", color=green, community=0, file="WorkerManager.cs", label="Entry HangFire.Server.WorkerManager.Execute(System.Threading.CancellationToken)", prediction=13, span="47-47"];
m12_24 [cluster="HangFire.Server.ServerComponentRunnerCollection.Start()", file="WorkerManager.cs", label="Entry HangFire.Server.ServerComponentRunnerCollection.Start()", span="39-39"];
m12_23 [cluster="HangFire.Server.WorkerManager.Execute(System.Threading.CancellationToken)", file="WorkerManager.cs", label="Exit HangFire.Server.WorkerManager.Execute(System.Threading.CancellationToken)", span="47-47"];
m12_25 [cluster="System.Threading.WaitHandle.WaitOne()", file="WorkerManager.cs", label="Entry System.Threading.WaitHandle.WaitOne()", span="0-0"];
m12_26 [cluster="HangFire.Server.WorkerManager.Dispose()", file="WorkerManager.cs", label="Entry HangFire.Server.WorkerManager.Dispose()", span="61-61"];
m12_68 [cluster="HangFire.Server.Filters.IServerFilter.OnPerforming(HangFire.Server.Filters.PerformingContext)", file="WorkerManager.cs", label="Entry HangFire.Server.Filters.IServerFilter.OnPerforming(HangFire.Server.Filters.PerformingContext)", span="27-27"];
m12_70 [cluster="HangFire.Server.Filters.IServerFilter.OnPerformed(HangFire.Server.Filters.PerformedContext)", file="WorkerManager.cs", label="Entry HangFire.Server.Filters.IServerFilter.OnPerformed(HangFire.Server.Filters.PerformedContext)", span="33-33"];
m12_36 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="WorkerManager.cs", label="Entry HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m12_38 [cluster="Unk.Aggregate", file="WorkerManager.cs", label="HangFire.Server.WorkerManager", span=""];
m12_44 [cluster="HangFire.Server.Performing.IJobPerformStrategy.Perform()", file="WorkerManager.cs", label="Entry HangFire.Server.Performing.IJobPerformStrategy.Perform()", span="20-20"];
m12_17 [cluster="HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", file="WorkerManager.cs", label="Entry HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", span="71-71"];
m12_28 [cluster="HangFire.Server.WorkerManager.Dispose()", file="WorkerManager.cs", label="Exit HangFire.Server.WorkerManager.Dispose()", span="61-61"];
m12_33 [cluster="HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", file="WorkerManager.cs", label="return new ServerComponentRunner(\r\n                new Worker(context),\r\n                new ServerComponentRunnerOptions { LowerLogVerbosity = true });", span="73-75"];
m12_34 [cluster="HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", file="WorkerManager.cs", label="Exit HangFire.Server.WorkerManager.CreateWorkerRunner(HangFire.Server.WorkerContext)", span="71-71"];
m12_35 [cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)", file="WorkerManager.cs", label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)", span="42-42"];
m12_16 [cluster="HangFire.Server.Performing.JobPerformer.GetFilters(HangFire.Common.JobMethod)", file="WorkerManager.cs", label="Exit HangFire.Server.Performing.JobPerformer.GetFilters(HangFire.Common.JobMethod)", span="43-43"];
m12_2 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="throw new ArgumentNullException(''sharedContext'');", span="31-31"];
m12_4 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="throw new ArgumentOutOfRangeException(''workerCount'', ''Worker count value must be more than zero.'');", span="33-33"];
m12_3 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="workerCount <= 0", span="33-33"];
m12_74 [cluster="HangFire.Server.Filters.IServerExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="WorkerManager.cs", label="Entry HangFire.Server.Filters.IServerExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", span="27-27"];
m12_48 [cluster="lambda expression", file="WorkerManager.cs", label="Entry lambda expression", span="81-81"];
m12_41 [cluster="lambda expression", file="WorkerManager.cs", label="strategy.Perform()", span="76-76"];
m12_42 [cluster="lambda expression", file="WorkerManager.cs", label="return new PerformedContext(context, false, null);", span="77-77"];
m12_49 [cluster="lambda expression", file="WorkerManager.cs", label="InvokePerformFilter(filter, preContext, next)", span="81-81"];
m12_40 [cluster="lambda expression", file="WorkerManager.cs", label="Entry lambda expression", span="74-78"];
m12_43 [cluster="lambda expression", file="WorkerManager.cs", label="Exit lambda expression", span="74-78"];
m12_46 [cluster="lambda expression", file="WorkerManager.cs", label="Entry lambda expression", span="81-81"];
m12_50 [cluster="lambda expression", file="WorkerManager.cs", label="Exit lambda expression", span="81-81"];
m12_47 [cluster="lambda expression", file="WorkerManager.cs", label="Exit lambda expression", span="81-81"];
m12_12 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="Exit HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", span="29-29"];
m12_15 [cluster="System.Collections.Generic.List<T>.List(int)", file="WorkerManager.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m12_71 [cluster="HangFire.Server.Performing.JobPerformer.InvokeServerExceptionFilters(HangFire.Server.Filters.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.Filters.IServerExceptionFilter>)", file="WorkerManager.cs", label="filters.Reverse()", span="129-129"];
m12_72 [cluster="HangFire.Server.Performing.JobPerformer.InvokeServerExceptionFilters(HangFire.Server.Filters.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.Filters.IServerExceptionFilter>)", file="WorkerManager.cs", label="filter.OnServerException(context)", span="131-131"];
m12_73 [cluster="HangFire.Server.Performing.JobPerformer.InvokeServerExceptionFilters(HangFire.Server.Filters.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.Filters.IServerExceptionFilter>)", file="WorkerManager.cs", label="Exit HangFire.Server.Performing.JobPerformer.InvokeServerExceptionFilters(HangFire.Server.Filters.ServerExceptionContext, System.Collections.Generic.IEnumerable<HangFire.Server.Filters.IServerExceptionFilter>)", span="125-125"];
m12_0 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="Entry HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", span="29-29"];
m12_1 [cluster="HangFire.Server.WorkerManager.WorkerManager(HangFire.Server.SharedWorkerContext, int)", file="WorkerManager.cs", label="sharedContext == null", span="31-31"];
m12_69 [cluster="System.Func<TResult>.Invoke()", file="WorkerManager.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m12_75 [file="WorkerManager.cs", label="HangFire.Server.Performing.JobPerformer", span=""];
m12_77 [file="WorkerManager.cs", label="HangFire.Server.Performing.IJobPerformStrategy", span=""];
m12_78 [file="WorkerManager.cs", label="HangFire.Server.Performing.PerformContext", span=""];
m12_76 [file="WorkerManager.cs", label="System.Collections.Generic.IEnumerable<object>", span=""];
m12_79 [file="WorkerManager.cs", label=preContext, span=""];
m12_80 [file="WorkerManager.cs", label="System.Func<HangFire.Server.Filters.PerformedContext>", span=""];
m12_81 [file="WorkerManager.cs", label="HangFire.Server.Filters.IServerFilter", span=""];
n126 -> n86  [color=darkseagreen4, key=1, label=number, style=dashed];
n127 -> n104  [color=darkseagreen4, key=1, label=number, style=dashed];
n128 -> n107  [color=darkseagreen4, key=1, label=iterations, style=dashed];
n2 -> n4  [color=darkseagreen4, key=1, label=sqlServerStorage, style=dashed];
n6 -> n12  [color=darkseagreen4, key=1, label=server, style=dashed];
n46 -> n104  [color=darkseagreen4, key=1, label=number, style=dashed];
n9 -> n11  [color=darkseagreen4, key=1, label=command, style=dashed];
n9 -> n13  [color=darkseagreen4, key=1, label=command, style=dashed];
n9 -> n23  [color=darkseagreen4, key=1, label=command, style=dashed];
n9 -> n32  [color=darkseagreen4, key=1, label=command, style=dashed];
n9 -> n38  [color=darkseagreen4, key=1, label=command, style=dashed];
n9 -> n44  [color=darkseagreen4, key=1, label=command, style=dashed];
n9 -> n48  [color=darkseagreen4, key=1, label=command, style=dashed];
n9 -> n51  [color=darkseagreen4, key=1, label=command, style=dashed];
n9 -> n58  [color=darkseagreen4, key=1, label=command, style=dashed];
n14 -> n16  [color=darkseagreen4, key=1, label=workCount, style=dashed];
n24 -> n26  [color=darkseagreen4, key=1, label=workCount, style=dashed];
n33 -> n35  [color=darkseagreen4, key=1, label=workCount, style=dashed];
n39 -> n41  [color=darkseagreen4, key=1, label=workCount, style=dashed];
n45 -> n47  [color=darkseagreen4, key=1, label=seconds, style=dashed];
n49 -> n107  [color=darkseagreen4, key=1, label=iterations, style=dashed];
n52 -> n54  [color=darkseagreen4, key=1, label=workCount, style=dashed];
n15 -> n19  [color=darkseagreen4, key=1, label=i, style=dashed];
n17 -> n86  [color=darkseagreen4, key=1, label=number, style=dashed];
n19 -> n19  [color=darkseagreen4, key=1, label=i, style=dashed];
n18 -> n85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n25 -> n28  [color=darkseagreen4, key=1, label=i, style=dashed];
n28 -> n28  [color=darkseagreen4, key=1, label=i, style=dashed];
n27 -> n89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n34 -> n37  [color=darkseagreen4, key=1, label=i, style=dashed];
n37 -> n37  [color=darkseagreen4, key=1, label=i, style=dashed];
n36 -> n93  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n40 -> n43  [color=darkseagreen4, key=1, label=i, style=dashed];
n43 -> n43  [color=darkseagreen4, key=1, label=i, style=dashed];
n42 -> n97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n47 -> n103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n50 -> n106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n53 -> n57  [color=darkseagreen4, key=1, label=i, style=dashed];
n57 -> n57  [color=darkseagreen4, key=1, label=i, style=dashed];
n55 -> n110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n60 -> n114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n116 -> n119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n117 -> n123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_8 -> m0_10  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m0_8 -> m0_11  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m0_8 -> m0_12  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m0_8 -> m0_13  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m0_11 -> m0_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_21 -> m0_10  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m0_21 -> m0_11  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m0_21 -> m0_12  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m0_21 -> m0_13  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m1_10 -> m1_12  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m1_10 -> m1_13  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m1_10 -> m1_14  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m1_10 -> m1_15  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m1_13 -> m1_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_23 -> m1_12  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m1_23 -> m1_13  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m1_23 -> m1_14  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m1_23 -> m1_15  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m2_12 -> m2_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m2_16 -> m2_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m2_17 -> m2_21  [color=darkseagreen4, key=1, label=queueIndex, style=dashed];
m2_18 -> m2_26  [color=darkseagreen4, key=1, label=queueName, style=dashed];
m2_19 -> m2_22  [color=darkseagreen4, key=1, label=queueKey, style=dashed];
m2_19 -> m2_23  [color=darkseagreen4, key=1, label=queueKey, style=dashed];
m2_20 -> m2_22  [color=darkseagreen4, key=1, label=fetchedKey, style=dashed];
m2_20 -> m2_23  [color=darkseagreen4, key=1, label=fetchedKey, style=dashed];
m2_22 -> m2_25  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_22 -> m2_26  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_23 -> m2_25  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_23 -> m2_26  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_168 -> m2_180  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_169 -> m2_173  [color=darkseagreen4, key=1, label=serverNames, style=dashed];
m2_170 -> m2_175  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m2_170 -> m2_197  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m2_170 -> m2_178  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m2_171 -> m2_180  [color=darkseagreen4, key=1, label=utcNow, style=dashed];
m2_175 -> m2_191  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_175 -> m2_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_172 -> m2_175  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m2_172 -> m2_176  [color=darkseagreen4, key=1, label=pipeline, style=dashed];
m2_174 -> m2_192  [color=darkseagreen4, key=1, label=name, style=dashed];
m2_174 -> m2_197  [color=darkseagreen4, key=1, label=name, style=dashed];
m2_177 -> m2_182  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m2_177 -> m2_183  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m2_182 -> m2_182  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m2_182 -> m2_183  [color=darkseagreen4, key=1, label=removedServerCount, style=dashed];
m2_179 -> m2_181  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m2_181 -> m2_181  [color=darkseagreen4, key=1, label=heartbeat, style=dashed];
m2_51 -> m2_66  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_154 -> m2_161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_151 -> m2_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_151 -> m2_158  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_151 -> m2_154  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_151 -> m2_162  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_152 -> m2_154  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_152 -> m2_155  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_153 -> m2_157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_126 -> m2_128  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_126 -> m2_136  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_126 -> m2_129  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_126 -> m2_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_126 -> m2_130  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m2_126 -> m2_132  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_126 -> m2_145  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_127 -> m2_129  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_127 -> m2_132  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_127 -> m2_133  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_128 -> m2_135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_129 -> m2_139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_132 -> m2_144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_131 -> m2_145  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m2_40 -> m2_42  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m2_40 -> m2_51  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_40 -> m2_67  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_107 -> m2_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_103 -> m2_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_103 -> m2_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_103 -> m2_106  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_103 -> m2_115  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_103 -> m2_107  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_103 -> m2_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_104 -> m2_106  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_104 -> m2_107  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_104 -> m2_108  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_105 -> m2_110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_106 -> m2_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_71 -> m2_77  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_71 -> m2_78  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_71 -> m2_79  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_71 -> m2_80  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_71 -> m2_81  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_71 -> m2_89  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m2_89 -> m2_79  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m2_89 -> m2_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m2_89 -> m2_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m2_89 -> m2_44  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m2_89 -> m2_49  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m2_89 -> m2_54  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m2_89 -> m2_59  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m2_89 -> m2_63  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m2_89 -> m2_68  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m2_89 -> m2_73  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m2_89 -> m2_87  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobManagerFeature", style=dashed];
m2_41 -> m2_50  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_41 -> m2_63  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_41 -> m2_51  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_41 -> m2_67  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_41 -> m2_53  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_42 -> m2_44  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m2_42 -> m2_45  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m2_42 -> m2_46  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m2_42 -> m2_47  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m2_43 -> m2_45  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m2_43 -> m2_46  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m2_43 -> m2_47  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m2_43 -> m2_48  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m2_43 -> m2_50  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m2_43 -> m2_63  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m2_50 -> m2_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_49 -> m2_51  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_49 -> m2_52  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_203 -> m2_4  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_8  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_22  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_23  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_25  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_36  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_49  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_71  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_97  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_100  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_122  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_149  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_166  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_203 -> m2_181  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m2_204 -> m2_63  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_204 -> m2_67  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m2_205 -> m2_63  [color=darkseagreen4, key=1, label=storedParameters, style=dashed];
m2_206 -> m2_67  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_207 -> m2_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_207 -> m2_115  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_207 -> m2_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_208 -> m2_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_209 -> m2_136  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_209 -> m2_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_209 -> m2_145  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_210 -> m2_140  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m2_211 -> m2_145  [color=darkseagreen4, key=1, label=queue1, style=dashed];
m2_212 -> m2_158  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_212 -> m2_162  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_213 -> m2_192  [color=darkseagreen4, key=1, label=name, style=dashed];
m2_213 -> m2_197  [color=darkseagreen4, key=1, label=name, style=dashed];
m2_214 -> m2_197  [color=darkseagreen4, key=1, label=heartbeats, style=dashed];
m3_40 -> m3_15  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m3_40 -> m3_20  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m3_40 -> m3_24  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m3_40 -> m3_37  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m5_269 -> m5_271  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m5_269 -> m5_277  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m5_270 -> m5_272  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m5_277 -> m5_282  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_273 -> m5_277  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_273 -> m5_283  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_273 -> m5_286  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_275 -> m5_280  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_276 -> m5_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_344 -> m5_346  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_39 -> m5_46  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_40 -> m5_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_249 -> m5_255  [color=darkseagreen4, key=1, label=filter, style=dashed];
m5_255 -> m5_262  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_251 -> m5_255  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_251 -> m5_263  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_251 -> m5_266  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_253 -> m5_260  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_254 -> m5_259  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_50 -> m5_55  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_51 -> m5_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_73 -> m5_78  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_74 -> m5_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_98 -> m5_101  [color=darkseagreen4, key=1, label=filter1, style=dashed];
m5_98 -> m5_102  [color=darkseagreen4, key=1, label=filter1, style=dashed];
m5_99 -> m5_103  [color=darkseagreen4, key=1, label=filter2, style=dashed];
m5_101 -> m5_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_100 -> m5_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_104 -> m5_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_105 -> m5_119  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_106 -> m5_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_160 -> m5_162  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m5_160 -> m5_164  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m5_160 -> m5_167  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m5_161 -> m5_163  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m5_161 -> m5_165  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m5_161 -> m5_166  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m5_164 -> m5_171  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_167 -> m5_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_165 -> m5_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_166 -> m5_177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_60 -> m5_63  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_206 -> m5_208  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m5_206 -> m5_213  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m5_207 -> m5_209  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m5_213 -> m5_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_210 -> m5_215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_210 -> m5_218  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_123 -> m5_125  [color=darkseagreen4, key=1, label=filter, style=dashed];
m5_124 -> m5_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_124 -> m5_135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_81 -> m5_86  [color=darkseagreen4, key=1, label=filter, style=dashed];
m5_86 -> m5_93  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_84 -> m5_91  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_85 -> m5_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_222 -> m5_224  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_263 -> m5_265  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_283 -> m5_285  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_299 -> m5_301  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_329 -> m5_331  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_293 -> m5_298  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_293 -> m5_304  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_291 -> m5_299  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_291 -> m5_302  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_308 -> m5_310  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m5_308 -> m5_316  [color=darkseagreen4, key=1, label=outerFilter, style=dashed];
m5_309 -> m5_311  [color=darkseagreen4, key=1, label=innerFilter, style=dashed];
m5_316 -> m5_328  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_313 -> m5_319  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_313 -> m5_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_314 -> m5_326  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_315 -> m5_325  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_228 -> m5_230  [color=darkseagreen4, key=1, label=filter, style=dashed];
m5_228 -> m5_234  [color=darkseagreen4, key=1, label=filter, style=dashed];
m5_230 -> m5_236  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_234 -> m5_245  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_231 -> m5_240  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_232 -> m5_239  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_233 -> m5_242  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_184 -> m5_191  [color=darkseagreen4, key=1, label=filter, style=dashed];
m5_186 -> m5_193  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_186 -> m5_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_191 -> m5_202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_190 -> m5_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_338 -> m5_341  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_2 -> m5_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_9 -> m5_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_9 -> m5_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_139 -> m5_141  [color=darkseagreen4, key=1, label=filter, style=dashed];
m5_139 -> m5_143  [color=darkseagreen4, key=1, label=filter, style=dashed];
m5_141 -> m5_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_143 -> m5_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_142 -> m5_152  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_349 -> m5_22  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_9  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_46  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_55  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_59  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_60  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_72  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_74  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_78  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_82  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_83  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_85  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_91  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_102  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_103  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_104  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_106  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_119  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_122  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_125  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_140  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_142  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_145  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_162  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_163  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_169  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_185  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_190  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_208  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_209  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_212  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_229  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_232  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_240  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_233  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_250  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_252  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_254  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_260  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_271  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_272  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_274  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_276  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_280  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_290  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_292  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_310  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_311  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_312  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_315  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_326  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_335  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_338  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_349 -> m5_344  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Client.DefaultJobCreationProcessFacts", style=dashed];
m5_352 -> m5_46  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_353 -> m5_55  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_354 -> m5_78  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_355 -> m5_91  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_356 -> m5_119  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_357 -> m5_240  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_358 -> m5_260  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_359 -> m5_263  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_359 -> m5_266  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_360 -> m5_280  [color=darkseagreen4, key=1, label=process, style=dashed];
m5_361 -> m5_283  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_361 -> m5_286  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_362 -> m5_299  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_362 -> m5_302  [color=darkseagreen4, key=1, label=exception, style=dashed];
m5_363 -> m5_326  [color=darkseagreen4, key=1, label=process, style=dashed];
m7_119 -> m7_122  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m7_97 -> m7_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_49 -> m7_52  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m7_49 -> m7_57  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m7_49 -> m7_60  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m7_56 -> m7_64  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m7_58 -> m7_63  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m7_22 -> m7_25  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m7_22 -> m7_31  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_31 -> m7_31  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_31 -> m7_35  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_32 -> m7_38  [color=green, key=1, label=idAndQueue, style=dashed];
m7_32 -> m7_39  [color=green, key=1, label=idAndQueue, style=dashed];
m7_29 -> m7_34  [color=darkseagreen4, key=1, label=fetchConditions, style=dashed];
m7_30 -> m7_34  [color=darkseagreen4, key=1, label=currentQueryIndex, style=dashed];
m7_35 -> m7_35  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_36 -> m7_36  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_139 -> m7_139  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m7_104 -> m7_107  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_90 -> m7_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_111 -> m7_114  [color=darkseagreen4, key=1, label=double, style=dashed];
m7_144 -> m7_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m7_144 -> m7_14  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m7_144 -> m7_18  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m7_144 -> m7_35  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m7_144 -> m7_63  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m8_141 -> m8_143  [color=darkseagreen4, key=1, label=table3, style=dashed];
m8_88 -> m8_90  [color=darkseagreen4, key=1, label=table2, style=dashed];
m8_50 -> m8_52  [color=darkseagreen4, key=1, label=table1, style=dashed];
m8_50 -> m8_53  [color=darkseagreen4, key=1, label=table1, style=dashed];
m8_159 -> m8_161  [color=darkseagreen4, key=1, label=table4, style=dashed];
m8_164 -> m8_36  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_37  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_40  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_47  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_48  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_54  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_60  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_61  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_65  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_69  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_70  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_73  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_77  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_78  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_81  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_85  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_86  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_91  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_95  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_96  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_99  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_103  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_104  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_108  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_112  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_113  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_117  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_121  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_122  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_126  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_130  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_131  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_134  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_138  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_139  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_144  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_148  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_149  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_152  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_156  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_157  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m8_164 -> m8_162  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFeature", style=dashed];
m10_9 -> m10_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m10_9 -> m10_14  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m10_9 -> m10_19  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m10_17 -> m10_20  [color=green, key=1, label=jobId, style=dashed];
m10_0 -> m10_3  [color=darkseagreen4, key=1, label="Hangfire.States.IStateChangeProcess", style=dashed];
m10_26 -> m10_29  [color=green, key=1, label="Hangfire.States.IState", style=dashed];
m10_26 -> m10_31  [color=green, key=1, label="string[]", style=dashed];
m10_26 -> m10_33  [color=green, key=1, label=string, style=dashed];
m10_26 -> m10_37  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m10_26 -> m10_42  [color=darkseagreen4, key=1, label="Hangfire.States.IState", style=dashed];
m10_34 -> m10_37  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m10_34 -> m10_40  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m10_39 -> m10_47  [color=darkseagreen4, key=1, label=loadSucceeded, style=dashed];
m10_44 -> m10_47  [color=darkseagreen4, key=1, label=loadSucceeded, style=dashed];
m10_56 -> m10_19  [color=darkseagreen4, key=1, label="Hangfire.States.StateMachine", style=dashed];
m10_56 -> m10_33  [color=green, key=1, label="Hangfire.States.StateMachine", style=dashed];
m11_18 -> m11_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_25 -> m11_27  [color=darkseagreen4, key=1, label=options, style=dashed];
m11_10 -> m11_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_1 -> m11_4  [color=darkseagreen4, key=1, label=options, style=dashed];
m12_51 -> m12_53  [color=darkseagreen4, key=1, label="HangFire.Server.Filters.PerformingContext", style=dashed];
m12_51 -> m12_54  [color=darkseagreen4, key=1, label="HangFire.Server.Filters.PerformingContext", style=dashed];
m12_51 -> m12_61  [color=darkseagreen4, key=1, label="HangFire.Server.Filters.IServerFilter", style=dashed];
m12_51 -> m12_65  [color=darkseagreen4, key=1, label="HangFire.Server.Filters.IServerFilter", style=dashed];
m12_60 -> m12_62  [color=darkseagreen4, key=1, label=postContext, style=dashed];
m12_60 -> m12_65  [color=darkseagreen4, key=1, label=postContext, style=dashed];
m12_60 -> m12_66  [color=darkseagreen4, key=1, label=postContext, style=dashed];
m12_59 -> m12_64  [color=darkseagreen4, key=1, label=wasError, style=dashed];
m12_30 -> m12_72  [color=darkseagreen4, key=1, label="HangFire.Server.Filters.ServerExceptionContext", style=dashed];
m12_31 -> m12_49  [color=darkseagreen4, key=1, label=preContext, style=dashed];
m12_19 -> m12_23  [color=darkseagreen4, key=1, label="HangFire.Server.Performing.PerformContext", style=dashed];
m12_20 -> m12_24  [color=green, key=1, label=filterInfo, style=dashed];
m12_23 -> m12_25  [color=darkseagreen4, key=1, label=exceptionContext, style=dashed];
m12_28 -> m12_41  [color=darkseagreen4, key=1, label="HangFire.Server.Performing.IJobPerformStrategy", style=dashed];
m12_28 -> m12_42  [color=darkseagreen4, key=1, label="HangFire.Server.Performing.PerformContext", style=dashed];
m12_33 -> m12_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_2 -> m12_4  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<object>", style=dashed];
m12_46 -> m12_49  [color=darkseagreen4, key=1, label="System.Func<HangFire.Server.Filters.PerformedContext>", style=dashed];
m12_0 -> m12_3  [color=darkseagreen4, key=1, label=int, style=dashed];
m12_75 -> m12_20  [color=green, key=1, label="HangFire.Server.Performing.JobPerformer", style=dashed];
m12_75 -> m12_4  [color=darkseagreen4, key=1, label="HangFire.Server.Performing.JobPerformer", style=dashed];
m12_75 -> m12_15  [color=darkseagreen4, key=1, label="HangFire.Server.Performing.JobPerformer", style=dashed];
m12_77 -> m12_41  [color=darkseagreen4, key=1, label="HangFire.Server.Performing.IJobPerformStrategy", style=dashed];
m12_78 -> m12_42  [color=darkseagreen4, key=1, label="HangFire.Server.Performing.PerformContext", style=dashed];
m12_79 -> m12_49  [color=darkseagreen4, key=1, label=preContext, style=dashed];
m12_80 -> m12_49  [color=darkseagreen4, key=1, label="System.Func<HangFire.Server.Filters.PerformedContext>", style=dashed];
m12_81 -> m12_49  [color=darkseagreen4, key=1, label="HangFire.Server.Filters.IServerFilter", style=dashed];
}
