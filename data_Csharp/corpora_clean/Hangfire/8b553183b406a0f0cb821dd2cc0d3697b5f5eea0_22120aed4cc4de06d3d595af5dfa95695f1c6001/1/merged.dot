digraph  {
n0 [label="Entry HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="7-7", cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)"];
n1 [label="context.Transaction.InsertToList(''succeeded'', context.JobId)", span="9-9", cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)"];
n2 [label="context.Transaction.TrimList(''succeeded'', 0, 99)", span="10-10", cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)"];
n4 [label="Entry HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="30-30", cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)"];
n3 [label="Exit HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="7-7", cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)"];
n5 [label="Entry HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="32-32", cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)"];
n6 [label="Entry HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="13-13", cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)"];
n7 [label="context.Transaction.RemoveFromList(''succeeded'', context.JobId)", span="15-15", cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)"];
n8 [label="Exit HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="13-13", cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)"];
n9 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="31-31", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)"];
d5 [label="_failedException = new InvalidOperationException(''Hello'')", span="50-50", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", color=green, community=0];
d257 [label="HangFire.Tests.States.StateSteps", span=""];
d4 [label="Entry HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()"];
d6 [label="_state = new FailedState(_failedException)\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="51-54", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", color=green, community=0];
d8 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)"];
d7 [label="Exit HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()"];
d9 [label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="28-28", cluster="HangFire.States.FailedState.FailedState(System.Exception)"];
d196 [label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId)))", span="388-389", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", color=green, community=0];
d195 [label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()"];
d197 [label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()"];
d198 [label="Entry Unk.Verify", span="", cluster="Unk.Verify"];
d199 [label="Entry lambda expression", span="389-389", cluster="lambda expression"];
d200 [label="x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId))", span="389-389", cluster="lambda expression", color=green, community=0];
d201 [label="Exit lambda expression", span="389-389", cluster="lambda expression"];
d40 [label="Entry Unk.>", span="", cluster="Unk.>"];
d202 [label="Entry Unk.Unapply", span="", cluster="Unk.Unapply"];
d203 [label="Entry lambda expression", span="389-389", cluster="lambda expression"];
d204 [label="y.JobId == JobSteps.DefaultJobId", span="389-389", cluster="lambda expression", color=green, community=0];
d205 [label="Exit lambda expression", span="389-389", cluster="lambda expression"];
d207 [label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.IsAny<StateApplyingContext>()),\r\n                Times.Never)", span="395-397", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", color=green, community=0];
d206 [label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()"];
d208 [label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393", cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()"];
d209 [label="Entry lambda expression", span="396-396", cluster="lambda expression"];
d210 [label="x.Unapply(It.IsAny<StateApplyingContext>())", span="396-396", cluster="lambda expression", color=green, community=0];
d211 [label="Exit lambda expression", span="396-396", cluster="lambda expression"];
d1 [label="_state = new SucceededState { Reason = ''SomeReason'' }", span="44-44", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()"];
d11 [label="_state = new ProcessingState(''TestServer'')\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="60-63", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()"];
d15 [label="_state = new ScheduledState(DateTime.UtcNow.AddDays(1))\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="69-72", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()"];
d20 [label="_state = new EnqueuedState\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="78-81", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()"];
d27 [label="_stateMocks.Add(state, mock)", span="92-92", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)"];
d44 [label="_stateProperties = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="100-100", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)"];
d45 [label="_stateMocks[state].Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(_stateProperties)", span="101-102", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)"];
d60 [label="_filters.Add(new TestStateChangingFilter(name, _stateChangingResults))", span="118-118", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)"];
d66 [label="_filters.Add(\r\n                new TestStateChangingFilter(name, _stateChangingResults, _stateMocks[state].Object))", span="126-127", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)"];
d70 [label="_filters.Add(new TestStateChangedFilter(name, _stateAppliedResults))", span="133-133", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)"];
d74 [label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="175-176", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()"];
d75 [label="stateMachine.ChangeState(JobSteps.DefaultJobId, _state)", span="177-177", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()"];
d86 [label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="192-193", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)"];
d87 [label="stateMachine.ChangeState(jobId, _stateMocks[state].Object)", span="194-194", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)"];
d91 [label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="201-202", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)"];
d92 [label="stateMachine.ChangeState(JobSteps.DefaultJobId, _stateMocks[state].Object, allowedState)", span="203-203", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)"];
d95 [label="Assert.Equal(name, _state.StateName)", span="209-209", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)"];
d133 [label="TableAssert.ContainsFollowingItems(\r\n                table,\r\n                _state.GetData(_defaultData))", span="276-278", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)"];
d217 [label=_stateProperties, span="410-410", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()"];
d224 [label=_stateProperties, span="423-423", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()"];
d230 [label="Assert.Equal(table.RowCount, _stateChangingResults.Count)", span="433-433", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)"];
d233 [label="Assert.Equal(table.Rows[i][''Filter''], _stateChangingResults[i])", span="437-437", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)"];
d237 [label="Assert.Equal(0, _stateChangingResults.Count)", span="444-444", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()"];
d251 [label="Assert.Equal(table.RowCount, _stateAppliedResults.Count)", span="463-463", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)"];
d254 [label="Assert.Equal(table.Rows[i][''Method''], _stateAppliedResults[i])", span="467-467", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)"];
d23 [label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)"];
d240 [label="var serializedHistory = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="450-451", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)"];
d25 [label="mock.Setup(x => x.StateName).Returns(state)", span="88-88", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)"];
d149 [label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()"];
d110 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)"];
d123 [label="keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl));\r\n            })", span="258-264", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()"];
d38 [label="x.GetData(It.IsAny<JobMethod>())", span="89-89", cluster="lambda expression"];
d57 [label="x.GetData(It.IsAny<JobMethod>())", span="101-101", cluster="lambda expression"];
d189 [label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="361-361", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)"];
d215 [label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="407-407", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()"];
d0 [label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()"];
d2 [label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()"];
d3 [label="Entry HangFire.States.SucceededState.SucceededState()", span="23-23", cluster="HangFire.States.SucceededState.SucceededState()"];
d10 [label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()"];
d12 [label="Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58", cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()"];
d13 [label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="28-28", cluster="HangFire.States.ProcessingState.ProcessingState(string)"];
d100 [label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl));\r\n                })", span="222-229", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()"];
d122 [label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="251-256", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()"];
d139 [label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="285-285", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()"];
d14 [label="Entry HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()"];
d16 [label="Exit HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67", cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()"];
d17 [label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="27-27", cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)"];
d18 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)"];
d19 [label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()"];
d21 [label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()"];
d22 [label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="25-25", cluster="HangFire.States.EnqueuedState.EnqueuedState()"];
d24 [label="var mock = new Mock<JobState>()", span="87-87", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)"];
d26 [label="mock.Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(new Dictionary<string, string>())", span="89-90", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)"];
d28 [label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)"];
d33 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)"];
d42 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)"];
d43 [label="Given(String.Format(''a '{0}' state'', state))", span="98-98", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)"];
d49 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary"];
d50 [label="Entry lambda expression", span="100-100", cluster="lambda expression"];
d53 [label="Entry lambda expression", span="100-100", cluster="lambda expression"];
d46 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)"];
d30 [label="Entry Unk.Setup", span="", cluster="Unk.Setup"];
d31 [label="Entry Unk.Returns", span="", cluster="Unk.Returns"];
d56 [label="Entry lambda expression", span="101-101", cluster="lambda expression"];
d59 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)"];
d61 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)"];
d62 [label="Entry HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", span="14-14", cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)"];
d63 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)"];
d64 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)"];
d65 [label="Given(String.Format(''a '{0}' state'', state))", span="124-124", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)"];
d67 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122", cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)"];
d68 [label="Entry TestStateChangingFilter.cstr", span="", cluster="TestStateChangingFilter.cstr"];
d69 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)"];
d71 [label="Exit HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131", cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)"];
d72 [label="Entry HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", span="14-14", cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)"];
d73 [label="Entry HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()"];
d77 [label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", span="41-41", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)"];
d78 [label="Entry HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", span="15-15", cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)"];
d76 [label="Exit HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173", cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()"];
d79 [label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="111-111", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])"];
d85 [label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)"];
d88 [label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)"];
d89 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState"];
d90 [label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)"];
d93 [label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)"];
d94 [label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)"];
d96 [label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207", cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)"];
d97 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d132 [label="Entry HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)"];
d134 [label="Exit HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)"];
d135 [label="Entry HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="26-26", cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)"];
d136 [label="Entry HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="8-8", cluster="HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)"];
d216 [label="Assert.NotNull(history)", span="408-408", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()"];
d219 [label="Assert.Equal(property.Value, history[property.Key])", span="413-413", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()"];
d218 [label="Assert.True(history.ContainsKey(property.Key))", span="412-412", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()"];
d220 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()"];
d223 [label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="420-421", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()"];
d226 [label="Assert.Equal(property.Value, stateEntry[property.Key])", span="426-426", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()"];
d225 [label="Assert.True(stateEntry.ContainsKey(property.Key))", span="425-425", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()"];
d227 [label="Exit HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()"];
d229 [label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)"];
d231 [label="var i = 0", span="435-435", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)"];
d232 [label="i < table.RowCount", span="435-435", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)"];
d234 [label="i++", span="435-435", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)"];
d236 [label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()"];
d238 [label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()"];
d250 [label="Entry HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)"];
d252 [label="var i = 0", span="465-465", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)"];
d253 [label="i < table.RowCount", span="465-465", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)"];
d255 [label="i++", span="465-465", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)"];
d239 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)"];
d241 [label="var history = serializedHistory.Select(JobHelper.FromJson<Dictionary<string, string>>).ToList()", span="452-452", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)"];
d47 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)"];
d247 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList"];
d34 [label="Entry lambda expression", span="88-88", cluster="lambda expression"];
d151 [label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()"];
d150 [label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="303-303", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()"];
d99 [label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="215-220", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()"];
d112 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)"];
d111 [label="Assert.Equal(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="235-237", cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)"];
d124 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()"];
d102 [label="Entry Unk.ForEach", span="", cluster="Unk.ForEach"];
d125 [label="Entry lambda expression", span="258-264", cluster="lambda expression"];
d37 [label="Entry lambda expression", span="89-89", cluster="lambda expression"];
d39 [label="Exit lambda expression", span="89-89", cluster="lambda expression"];
d41 [label="Entry Unk.GetData", span="", cluster="Unk.GetData"];
d58 [label="Exit lambda expression", span="101-101", cluster="lambda expression"];
d187 [label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="357-358", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)"];
d188 [label="Assert.NotNull(entry)", span="359-359", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)"];
d190 [label="Assert.NotNull(history)", span="362-362", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)"];
d191 [label="TableAssert.ContainsFollowingItems(table, history)", span="364-364", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)"];
d213 [label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="403-404", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()"];
d214 [label="Assert.NotNull(entry)", span="405-405", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()"];
d101 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()"];
d103 [label="Entry lambda expression", span="222-229", cluster="lambda expression"];
d121 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249", cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()"];
d138 [label="Assert.Equal(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="284-284", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()"];
d140 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()"];
d142 [label="Entry Unk.SortedSetContainsItem", span="", cluster="Unk.SortedSetContainsItem"];
d109 [label="Entry Unk.True", span="", cluster="Unk.True"];
d166 [label="Assert.True(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="323-323", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()"];
d167 [label="Assert.True(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="324-324", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()"];
d29 [label="Entry Mock<JobState>.cstr", span="", cluster="Mock<JobState>.cstr"];
d32 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
d48 [label="Entry Unk.Given", span="", cluster="Unk.Given"];
d52 [label="Exit lambda expression", span="100-100", cluster="lambda expression"];
d51 [label="x[''Name'']", span="100-100", cluster="lambda expression"];
d55 [label="Exit lambda expression", span="100-100", cluster="lambda expression"];
d54 [label="x[''Value'']", span="100-100", cluster="lambda expression"];
d116 [label="Assert.Equal(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="243-243", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()"];
d117 [label="Assert.Equal(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="244-245", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()"];
d130 [label="Assert.Equal(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="270-270", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()"];
d144 [label="Assert.Equal(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="291-291", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()"];
d178 [label="Assert.Equal(state, job[''State''])", span="343-343", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)"];
d244 [label="Assert.Equal(table.Rows[i][''State''], history[i][''State''])", span="456-456", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)"];
d194 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull"];
d221 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)"];
d212 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()"];
d222 [label="Entry HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()"];
d180 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash"];
d228 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey"];
d235 [label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)"];
d256 [label="Exit HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)"];
d246 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)"];
d243 [label="i < table.RowCount", span="454-454", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)"];
d242 [label="var i = 0", span="454-454", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)"];
d248 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
d249 [label="Entry Unk.ToList", span="", cluster="Unk.ToList"];
d177 [label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="342-342", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)"];
d182 [label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="349-350", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)"];
d36 [label="Exit lambda expression", span="88-88", cluster="lambda expression"];
d35 [label="x.StateName", span="88-88", cluster="lambda expression"];
d152 [label="Entry Unk.False", span="", cluster="Unk.False"];
d98 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()"];
d113 [label="Entry string.Format(string, params object[])", span="0-0", cluster="string.Format(string, params object[])"];
d114 [label="Entry Unk.GetValue", span="", cluster="Unk.GetValue"];
d128 [label="Exit lambda expression", span="258-264", cluster="lambda expression"];
d126 [label="var ttl = Redis.Client.GetTimeToLive(x)", span="260-260", cluster="lambda expression"];
d127 [label="Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl))", span="261-263", cluster="lambda expression"];
d186 [label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)"];
d193 [label="Entry Unk.RemoveStartFromList", span="", cluster="Unk.RemoveStartFromList"];
d192 [label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)"];
d106 [label="Exit lambda expression", span="222-229", cluster="lambda expression"];
d104 [label="var ttl = Redis.Client.GetTimeToLive(x)", span="224-224", cluster="lambda expression"];
d105 [label="Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl))", span="225-228", cluster="lambda expression"];
d137 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()"];
d141 [label="Entry Unk.GetSortedSetCount", span="", cluster="Unk.GetSortedSetCount"];
d147 [label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="297-297", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()"];
d163 [label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="319-319", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()"];
d170 [label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="330-330", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()"];
d156 [label="Assert.True(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="312-312", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()"];
d157 [label="Assert.True(timestamp < DateTime.UtcNow.AddSeconds(1))", span="313-313", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()"];
d173 [label="Assert.True(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="336-336", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)"];
d165 [label="var timestamp = JobHelper.FromTimestamp((long) score)", span="321-321", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()"];
d168 [label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()"];
d115 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()"];
d119 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount"];
d118 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241", cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()"];
d120 [label="Entry Unk.PopItemFromList", span="", cluster="Unk.PopItemFromList"];
d129 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()"];
d131 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()"];
d143 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()"];
d145 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()"];
d176 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)"];
d179 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)"];
d245 [label="i++", span="454-454", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)"];
d181 [label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)"];
d183 [label="TableAssert.ContainsFollowingItems(table, stateEntry)", span="351-351", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)"];
d107 [label="Entry Unk.GetTimeToLive", span="", cluster="Unk.GetTimeToLive"];
d108 [label="Entry Unk.Format", span="", cluster="Unk.Format"];
d146 [label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()"];
d148 [label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295", cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()"];
d162 [label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()"];
d164 [label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="320-320", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()"];
d169 [label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()"];
d171 [label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328", cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()"];
d155 [label="var timestamp = JobHelper.FromTimestamp((long)score)", span="310-310", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()"];
d161 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)"];
d158 [label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()"];
d172 [label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)"];
d174 [label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)"];
d175 [label="Entry Unk.SetContainsItem", span="", cluster="Unk.SetContainsItem"];
d160 [label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="41-41", cluster="HangFire.Common.JobHelper.FromTimestamp(long)"];
d184 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347", cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)"];
d185 [label="Entry Unk.ContainsFollowingItems", span="", cluster="Unk.ContainsFollowingItems"];
d159 [label="Entry Unk.GetItemScoreInSortedSet", span="", cluster="Unk.GetItemScoreInSortedSet"];
d154 [label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="309-309", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()"];
d153 [label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307", cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()"];
m0_20 [label="Entry Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", span="57-57", cluster="Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", file="ScheduledState.cs"];
m0_21 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="42-42", cluster="Hangfire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="ScheduledState.cs"];
m0_0 [label="Entry Hangfire.States.ScheduledState.ScheduledState(System.TimeSpan)", span="27-27", cluster="Hangfire.States.ScheduledState.ScheduledState(System.TimeSpan)", file="ScheduledState.cs"];
m0_1 [label="Exit Hangfire.States.ScheduledState.ScheduledState(System.TimeSpan)", span="27-27", cluster="Hangfire.States.ScheduledState.ScheduledState(System.TimeSpan)", file="ScheduledState.cs"];
m0_22 [label="Entry Hangfire.States.ScheduledState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="71-71", cluster="Hangfire.States.ScheduledState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs"];
m0_23 [label="transaction.RemoveFromSet(''schedule'', context.JobId)", span="73-73", cluster="Hangfire.States.ScheduledState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs"];
m0_24 [label="Exit Hangfire.States.ScheduledState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="71-71", cluster="Hangfire.States.ScheduledState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs"];
m0_10 [label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68", cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="ScheduledState.cs"];
m0_25 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43", cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="ScheduledState.cs"];
m0_11 [label="Entry Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="57-57", cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs"];
m0_12 [label="var scheduledState = context.NewState as ScheduledState", span="59-59", cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs"];
m0_16 [label="transaction.AddToSet(''schedule'', context.JobId, timestamp)", span="68-68", cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs"];
m0_13 [label="scheduledState == null", span="60-60", cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs"];
m0_15 [label="var timestamp = JobHelper.ToTimestamp(scheduledState.EnqueueAt)", span="67-67", cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs"];
m0_14 [label="throw new InvalidOperationException(String.Format(\r\n                        ''`{0}` state handler can be registered only for the Scheduled state.'',\r\n                        typeof(Handler).FullName));", span="62-64", cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs"];
m0_17 [label="Exit Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="57-57", cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs"];
m0_6 [label="Entry Hangfire.States.ScheduledState.SerializeData()", span="46-46", cluster="Hangfire.States.ScheduledState.SerializeData()", file="ScheduledState.cs"];
m0_7 [label="return new Dictionary<string, string>\r\n            {\r\n                { ''EnqueueAt'', JobHelper.SerializeDateTime(EnqueueAt) },\r\n                { ''ScheduledAt'', JobHelper.SerializeDateTime(ScheduledAt) }\r\n            };", span="48-52", cluster="Hangfire.States.ScheduledState.SerializeData()", file="ScheduledState.cs"];
m0_8 [label="Exit Hangfire.States.ScheduledState.SerializeData()", span="46-46", cluster="Hangfire.States.ScheduledState.SerializeData()", file="ScheduledState.cs"];
m0_19 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="ScheduledState.cs"];
m0_18 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ScheduledState.cs"];
m0_2 [label="Entry Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", span="32-32", cluster="Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", file="ScheduledState.cs"];
m0_3 [label="EnqueueAt = enqueueAt", span="34-34", cluster="Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", file="ScheduledState.cs"];
m0_4 [label="ScheduledAt = DateTime.UtcNow", span="35-35", cluster="Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", file="ScheduledState.cs"];
m0_5 [label="Exit Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", span="32-32", cluster="Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", file="ScheduledState.cs"];
m0_26 [label="Hangfire.States.ScheduledState", span="", file="ScheduledState.cs"];
m2_15 [label="Entry Unk.InfoFormat", span="", cluster="Unk.InfoFormat", file="StateMachine.cs"];
m2_8 [label="Entry HangFire.BackgroundJobServerOptions.Log(ILog)", span="59-59", cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs"];
m2_9 [label="logger.InfoFormat(''Using the following options for HangFire Server:'')", span="61-61", cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs"];
m2_10 [label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="62-62", cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs"];
m2_11 [label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="63-63", cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs"];
m2_12 [label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="64-64", cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs"];
m2_13 [label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="65-65", cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs"];
m2_14 [label="Exit HangFire.BackgroundJobServerOptions.Log(ILog)", span="59-59", cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs"];
m2_0 [label="Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="13-13", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs"];
m2_1 [label="WorkerCount = Environment.ProcessorCount * 5", span="15-15", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs"];
m2_2 [label="ServerName = Environment.MachineName", span="16-16", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs"];
m2_3 [label="Queues = new[] { EnqueuedState.DefaultQueue }", span="17-17", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs"];
m2_4 [label="ShutdownTimeout = TimeSpan.FromSeconds(15)", span="18-18", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs"];
m2_5 [label="SchedulePollingInterval = TimeSpan.FromSeconds(15)", span="19-19", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs"];
m2_6 [label="Exit HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="13-13", cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs"];
m2_7 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="StateMachine.cs"];
m2_17 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="StateMachine.cs"];
m2_18 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="StateMachine.cs"];
m2_19 [label="''''' + x + '''''", span="63-63", cluster="lambda expression", file="StateMachine.cs"];
m2_20 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="StateMachine.cs"];
m2_21 [label="HangFire.BackgroundJobServerOptions", span="", file="StateMachine.cs"];
m3_2 [label="Entry HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", span="33-33", cluster="HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="StorageConnectionExtensions.cs"];
m3_3 [label="Exit HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", span="33-33", cluster="HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="StorageConnectionExtensions.cs"];
m3_0 [label="Entry HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", span="27-27", cluster="HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="StorageConnectionExtensions.cs"];
m3_1 [label="Exit HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", span="27-27", cluster="HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="StorageConnectionExtensions.cs"];
m4_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="StorageConnectionExtensionsFacts.cs"];
m4_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="StorageConnectionExtensionsFacts.cs"];
m4_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="StorageConnectionExtensionsFacts.cs"];
m4_55 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_56 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns null when it tries to dequeue a job from an empty queue'', ((string[])(null)))", span="121-121", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_57 [label="this.ScenarioSetup(scenarioInfo)", span="123-123", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_58 [label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="125-125", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_59 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="127-127", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_60 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="129-129", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_61 [label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="131-131", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_62 [label="this.ScenarioCleanup()", span="133-133", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_63 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_0 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StorageConnectionExtensionsFacts.cs"];
m4_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StorageConnectionExtensionsFacts.cs"];
m4_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StorageConnectionExtensionsFacts.cs"];
m4_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StorageConnectionExtensionsFacts.cs"];
m4_4 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StorageConnectionExtensionsFacts.cs"];
m4_76 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_77 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher listens only specified queue'', ((string[])(null)))", span="169-169", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_78 [label="this.ScenarioSetup(scenarioInfo)", span="171-171", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_79 [label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="173-173", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_80 [label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="175-175", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_81 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="177-177", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_82 [label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="179-179", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_83 [label="this.ScenarioCleanup()", span="181-181", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_84 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs"];
m4_41 [label="Entry Unk.And", span="", cluster="Unk.And", file="StorageConnectionExtensionsFacts.cs"];
m4_54 [label="Entry Unk.But", span="", cluster="Unk.But", file="StorageConnectionExtensionsFacts.cs"];
m4_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="StorageConnectionExtensionsFacts.cs"];
m4_9 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="StorageConnectionExtensionsFacts.cs"];
m4_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="StorageConnectionExtensionsFacts.cs"];
m4_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="StorageConnectionExtensionsFacts.cs"];
m4_12 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="StorageConnectionExtensionsFacts.cs"];
m4_22 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StorageConnectionExtensionsFacts.cs"];
m4_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StorageConnectionExtensionsFacts.cs"];
m4_24 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StorageConnectionExtensionsFacts.cs"];
m4_85 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_86 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher sets the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="190-190", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_87 [label="this.ScenarioSetup(scenarioInfo)", span="192-192", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_88 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="194-194", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_89 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="196-196", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_90 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="198-198", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_91 [label="testRunner.Then(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="200-200", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_92 [label="this.ScenarioCleanup()", span="202-202", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_93 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="StorageConnectionExtensionsFacts.cs"];
m4_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="StorageConnectionExtensionsFacts.cs"];
m4_64 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_65 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher dequeues jobs in the FIFO order'', ((string[])(null)))", span="142-142", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_66 [label="this.ScenarioSetup(scenarioInfo)", span="144-144", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_67 [label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="146-146", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_68 [label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="148-148", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_69 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="150-150", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_70 [label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="152-152", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_71 [label="testRunner.Then(''the fetcher returns the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="154-154", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_72 [label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_73 [label="testRunner.Then(''the fetcher returns the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_74 [label="this.ScenarioCleanup()", span="160-160", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_75 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs"];
m4_42 [label="Entry Unk.When", span="", cluster="Unk.When", file="StorageConnectionExtensionsFacts.cs"];
m4_14 [label="Entry HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="StorageConnectionExtensionsFacts.cs"];
m4_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="StorageConnectionExtensionsFacts.cs"];
m4_16 [label="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="StorageConnectionExtensionsFacts.cs"];
m4_17 [label="Exit HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="StorageConnectionExtensionsFacts.cs"];
m4_39 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="StorageConnectionExtensionsFacts.cs"];
m4_43 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="StorageConnectionExtensionsFacts.cs"];
m4_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="StorageConnectionExtensionsFacts.cs"];
m4_26 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="StorageConnectionExtensionsFacts.cs"];
m4_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="StorageConnectionExtensionsFacts.cs"];
m4_28 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="StorageConnectionExtensionsFacts.cs"];
m4_44 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs"];
m4_45 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher removes the dequeued job from the queue and adds it to the dequeued list'', ((string[])(null)))", span="98-98", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs"];
m4_46 [label="this.ScenarioSetup(scenarioInfo)", span="100-100", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs"];
m4_47 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs"];
m4_48 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs"];
m4_49 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs"];
m4_50 [label="testRunner.Then(''the queue does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs"];
m4_51 [label="testRunner.But(''the dequeued jobs list contains it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="110-110", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs"];
m4_52 [label="this.ScenarioCleanup()", span="112-112", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs"];
m4_53 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs"];
m4_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="StorageConnectionExtensionsFacts.cs"];
m4_30 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns the job payload when it dequeues a job'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_33 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_34 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_35 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_36 [label="testRunner.Then(''the fetcher returns the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_37 [label="this.ScenarioCleanup()", span="89-89", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_38 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs"];
m4_18 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="StorageConnectionExtensionsFacts.cs"];
m4_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="StorageConnectionExtensionsFacts.cs"];
m4_20 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="StorageConnectionExtensionsFacts.cs"];
m4_94 [label="HangFire.Tests.Server.JobFetcherFeature", span="", file="StorageConnectionExtensionsFacts.cs"];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateApplyingContext"];
n1 -> n2  [key=0, style=solid];
n1 -> n4  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n5  [key=2, style=dotted];
n3 -> n0  [key=0, style=bold, color=blue];
n6 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n7 -> n9  [key=2, style=dotted];
n8 -> n6  [key=0, style=bold, color=blue];
d5 -> d6  [key=0, style=solid, color=green];
d5 -> d8  [key=2, style=dotted, color=green];
d257 -> d5  [key=1, style=dashed, color=green, label="HangFire.Tests.States.StateSteps"];
d257 -> d6  [key=1, style=dashed, color=green, label="HangFire.Tests.States.StateSteps"];
d257 -> d196  [key=1, style=dashed, color=green, label="HangFire.Tests.States.StateSteps"];
d257 -> d207  [key=1, style=dashed, color=green, label="HangFire.Tests.States.StateSteps"];
d257 -> d1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d86  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d91  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d95  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d133  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d217  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d224  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d230  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d233  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d237  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d251  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d257 -> d254  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.StateSteps"];
d4 -> d5  [key=0, style=solid, color=green];
d4 -> d25  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Logging.LogLevel logLevel"];
d4 -> d44  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Logging.LogLevel logLevel"];
d4 -> d149  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Logging.LogLevel logLevel"];
d4 -> d240  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Log"];
d4 -> d92  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<string> messageFunc"];
d4 -> d110  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<string> messageFunc"];
d4 -> d123  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<string> messageFunc"];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d9  [key=2, style=dotted, color=green];
d7 -> d4  [key=0, style=bold, color=blue];
d196 -> d197  [key=0, style=solid, color=green];
d196 -> d198  [key=2, style=dotted, color=green];
d196 -> d199  [key=1, style=dashed, color=green, label="lambda expression"];
d195 -> d196  [key=0, style=solid, color=green];
d197 -> d195  [key=0, style=bold, color=blue];
d199 -> d200  [key=0, style=solid, color=green];
d200 -> d201  [key=0, style=solid, color=green];
d200 -> d40  [key=2, style=dotted, color=green];
d200 -> d202  [key=2, style=dotted, color=green];
d200 -> d203  [key=1, style=dashed, color=green, label="lambda expression"];
d201 -> d199  [key=0, style=bold, color=blue];
d203 -> d204  [key=0, style=solid, color=green];
d204 -> d205  [key=0, style=solid, color=green];
d205 -> d203  [key=0, style=bold, color=blue];
d207 -> d208  [key=0, style=solid, color=green];
d207 -> d198  [key=2, style=dotted, color=green];
d207 -> d209  [key=1, style=dashed, color=green, label="lambda expression"];
d206 -> d207  [key=0, style=solid, color=green];
d208 -> d206  [key=0, style=bold, color=blue];
d209 -> d210  [key=0, style=solid, color=green];
d210 -> d211  [key=0, style=solid, color=green];
d210 -> d40  [key=2, style=dotted, color=green];
d210 -> d202  [key=2, style=dotted, color=green];
d211 -> d209  [key=0, style=bold, color=blue];
d1 -> d2  [key=0, style=solid];
d1 -> d3  [key=2, style=dotted];
d11 -> d12  [key=0, style=solid];
d11 -> d13  [key=2, style=dotted];
d11 -> d25  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Logging.LogLevel logLevel"];
d11 -> d44  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Logging.LogLevel logLevel"];
d11 -> d100  [key=3, color=darkorchid, style=bold, label="Parameter variable TException exception"];
d11 -> d122  [key=3, color=darkorchid, style=bold, label="Parameter variable TException exception"];
d11 -> d139  [key=3, color=darkorchid, style=bold, label="Parameter variable TException exception"];
d15 -> d16  [key=0, style=solid];
d15 -> d17  [key=2, style=dotted];
d15 -> d18  [key=2, style=dotted];
d20 -> d4  [key=3, color=darkorchid, style=bold, label="method methodReturn bool IsDebugEnabled"];
d20 -> d21  [key=0, style=solid];
d20 -> d22  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d27 -> d33  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d44 -> d49  [key=2, style=dotted];
d44 -> d50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d44 -> d53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d45 -> d46  [key=0, style=solid];
d45 -> d30  [key=2, style=dotted];
d45 -> d31  [key=2, style=dotted];
d45 -> d56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d60 -> d61  [key=0, style=solid];
d60 -> d62  [key=2, style=dotted];
d60 -> d63  [key=2, style=dotted];
d66 -> d67  [key=0, style=solid];
d66 -> d68  [key=2, style=dotted];
d66 -> d63  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d70 -> d72  [key=2, style=dotted];
d70 -> d63  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d74 -> d77  [key=2, style=dotted];
d74 -> d78  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d75 -> d79  [key=2, style=dotted];
d86 -> d87  [key=0, style=solid];
d86 -> d77  [key=2, style=dotted];
d86 -> d78  [key=2, style=dotted];
d87 -> d88  [key=0, style=solid];
d87 -> d89  [key=2, style=dotted];
d91 -> d92  [key=0, style=solid];
d91 -> d77  [key=2, style=dotted];
d91 -> d78  [key=2, style=dotted];
d92 -> d93  [key=0, style=solid];
d92 -> d89  [key=2, style=dotted];
d95 -> d96  [key=0, style=solid];
d95 -> d97  [key=2, style=dotted];
d133 -> d134  [key=0, style=solid];
d133 -> d135  [key=2, style=dotted];
d133 -> d136  [key=2, style=dotted];
d217 -> d218  [key=0, style=solid];
d217 -> d220  [key=0, style=solid];
d224 -> d225  [key=0, style=solid];
d224 -> d227  [key=0, style=solid];
d230 -> d231  [key=0, style=solid];
d230 -> d97  [key=2, style=dotted];
d233 -> d234  [key=0, style=solid];
d233 -> d97  [key=2, style=dotted];
d237 -> d238  [key=0, style=solid];
d237 -> d97  [key=2, style=dotted];
d251 -> d252  [key=0, style=solid];
d251 -> d97  [key=2, style=dotted];
d254 -> d255  [key=0, style=solid];
d254 -> d97  [key=2, style=dotted];
d23 -> d4  [key=3, color=darkorchid, style=bold, label="method methodReturn bool IsErrorEnabled"];
d23 -> d27  [key=1, style=dashed, color=darkseagreen4, label=string];
d23 -> d24  [key=0, style=solid];
d23 -> d25  [key=1, style=dashed, color=darkseagreen4, label=string];
d240 -> d4  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Log"];
d240 -> d241  [key=0, style=solid];
d240 -> d47  [key=2, style=dotted];
d240 -> d247  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d25 -> d30  [key=2, style=dotted];
d25 -> d31  [key=2, style=dotted];
d25 -> d34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d149 -> d44  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Logging.LogLevel logLevel"];
d149 -> d133  [key=3, color=darkorchid, style=bold, label="Parameter variable object[] args"];
d149 -> d25  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Logging.LogLevel logLevel"];
d149 -> d150  [key=0, style=solid];
d149 -> d99  [key=3, color=darkorchid, style=bold, label="Parameter variable object[] args"];
d110 -> d111  [key=0, style=solid];
d123 -> d124  [key=0, style=solid];
d123 -> d102  [key=2, style=dotted];
d123 -> d125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d40  [key=2, style=dotted];
d38 -> d39  [key=0, style=solid];
d38 -> d41  [key=2, style=dotted];
d57 -> d40  [key=2, style=dotted];
d57 -> d58  [key=0, style=solid];
d57 -> d41  [key=2, style=dotted];
d189 -> d40  [key=2, style=dotted];
d189 -> d190  [key=0, style=solid];
d189 -> d191  [key=1, style=dashed, color=darkseagreen4, label=history];
d215 -> d40  [key=2, style=dotted];
d215 -> d216  [key=0, style=solid];
d215 -> d218  [key=1, style=dashed, color=darkseagreen4, label=history];
d215 -> d219  [key=1, style=dashed, color=darkseagreen4, label=history];
d0 -> d1  [key=0, style=solid];
d2 -> d0  [key=0, style=bold, color=blue];
d10 -> d11  [key=0, style=solid];
d12 -> d10  [key=0, style=bold, color=blue];
d100 -> d101  [key=0, style=solid];
d100 -> d102  [key=2, style=dotted];
d100 -> d103  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d122 -> d123  [key=0, style=solid];
d122 -> d47  [key=2, style=dotted];
d139 -> d140  [key=0, style=solid];
d139 -> d142  [key=2, style=dotted];
d139 -> d109  [key=2, style=dotted];
d14 -> d15  [key=0, style=solid];
d16 -> d14  [key=0, style=bold, color=blue];
d19 -> d20  [key=0, style=solid];
d21 -> d19  [key=0, style=bold, color=blue];
d24 -> d27  [key=1, style=dashed, color=darkseagreen4, label=mock];
d24 -> d25  [key=0, style=solid];
d24 -> d29  [key=2, style=dotted];
d24 -> d26  [key=1, style=dashed, color=darkseagreen4, label=mock];
d26 -> d27  [key=0, style=solid];
d26 -> d30  [key=2, style=dotted];
d26 -> d32  [key=2, style=dotted];
d26 -> d31  [key=2, style=dotted];
d26 -> d37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d28 -> d23  [key=0, style=bold, color=blue];
d42 -> d44  [key=1, style=dashed, color=darkseagreen4, label=Table];
d42 -> d45  [key=1, style=dashed, color=darkseagreen4, label=string];
d42 -> d43  [key=0, style=solid];
d43 -> d44  [key=0, style=solid];
d43 -> d47  [key=2, style=dotted];
d43 -> d48  [key=2, style=dotted];
d50 -> d51  [key=0, style=solid];
d53 -> d54  [key=0, style=solid];
d46 -> d42  [key=0, style=bold, color=blue];
d56 -> d57  [key=0, style=solid];
d59 -> d60  [key=0, style=solid];
d61 -> d59  [key=0, style=bold, color=blue];
d64 -> d66  [key=1, style=dashed, color=darkseagreen4, label=string];
d64 -> d65  [key=0, style=solid];
d65 -> d66  [key=0, style=solid];
d65 -> d47  [key=2, style=dotted];
d65 -> d48  [key=2, style=dotted];
d67 -> d64  [key=0, style=bold, color=blue];
d69 -> d70  [key=0, style=solid];
d69 -> d79  [key=3, color=darkorchid, style=bold, label="Parameter variable System.TimeSpan delay"];
d71 -> d69  [key=0, style=bold, color=blue];
d73 -> d74  [key=0, style=solid];
d76 -> d73  [key=0, style=bold, color=blue];
d79 -> d69  [key=3, color=darkorchid, style=bold, label="method methodReturn string In"];
d85 -> d86  [key=0, style=solid];
d85 -> d87  [key=1, style=dashed, color=darkseagreen4, label=string];
d88 -> d85  [key=0, style=bold, color=blue];
d90 -> d91  [key=0, style=solid];
d90 -> d92  [key=1, style=dashed, color=darkseagreen4, label=string];
d93 -> d90  [key=0, style=bold, color=blue];
d94 -> d95  [key=0, style=solid];
d96 -> d94  [key=0, style=bold, color=blue];
d132 -> d133  [key=0, style=solid];
d134 -> d132  [key=0, style=bold, color=blue];
d216 -> d217  [key=0, style=solid];
d216 -> d194  [key=2, style=dotted];
d219 -> d217  [key=0, style=solid];
d219 -> d97  [key=2, style=dotted];
d219 -> d219  [key=1, style=dashed, color=darkseagreen4, label=property];
d218 -> d219  [key=0, style=solid];
d218 -> d218  [key=1, style=dashed, color=darkseagreen4, label=property];
d218 -> d221  [key=2, style=dotted];
d218 -> d109  [key=2, style=dotted];
d220 -> d212  [key=0, style=bold, color=blue];
d223 -> d224  [key=0, style=solid];
d223 -> d47  [key=2, style=dotted];
d223 -> d180  [key=2, style=dotted];
d223 -> d225  [key=1, style=dashed, color=darkseagreen4, label=stateEntry];
d223 -> d226  [key=1, style=dashed, color=darkseagreen4, label=stateEntry];
d226 -> d224  [key=0, style=solid];
d226 -> d97  [key=2, style=dotted];
d226 -> d226  [key=1, style=dashed, color=darkseagreen4, label=property];
d225 -> d226  [key=0, style=solid];
d225 -> d225  [key=1, style=dashed, color=darkseagreen4, label=property];
d225 -> d228  [key=2, style=dotted];
d225 -> d109  [key=2, style=dotted];
d227 -> d222  [key=0, style=bold, color=blue];
d229 -> d230  [key=0, style=solid];
d229 -> d233  [key=1, style=dashed, color=darkseagreen4, label=Table];
d229 -> d232  [key=1, style=dashed, color=darkseagreen4, label=Table];
d231 -> d233  [key=1, style=dashed, color=darkseagreen4, label=i];
d231 -> d232  [key=0, style=solid];
d231 -> d234  [key=1, style=dashed, color=darkseagreen4, label=i];
d232 -> d233  [key=0, style=solid];
d232 -> d235  [key=0, style=solid];
d234 -> d232  [key=0, style=solid];
d234 -> d234  [key=1, style=dashed, color=darkseagreen4, label=i];
d236 -> d237  [key=0, style=solid];
d238 -> d236  [key=0, style=bold, color=blue];
d250 -> d251  [key=0, style=solid];
d250 -> d254  [key=1, style=dashed, color=darkseagreen4, label=Table];
d250 -> d253  [key=1, style=dashed, color=darkseagreen4, label=Table];
d252 -> d254  [key=1, style=dashed, color=darkseagreen4, label=i];
d252 -> d253  [key=0, style=solid];
d252 -> d255  [key=1, style=dashed, color=darkseagreen4, label=i];
d253 -> d254  [key=0, style=solid];
d253 -> d256  [key=0, style=solid];
d255 -> d253  [key=0, style=solid];
d255 -> d255  [key=1, style=dashed, color=darkseagreen4, label=i];
d239 -> d240  [key=0, style=solid];
d239 -> d243  [key=1, style=dashed, color=darkseagreen4, label=Table];
d239 -> d244  [key=1, style=dashed, color=darkseagreen4, label=Table];
d241 -> d242  [key=0, style=solid];
d241 -> d248  [key=2, style=dotted];
d241 -> d249  [key=2, style=dotted];
d241 -> d244  [key=1, style=dashed, color=darkseagreen4, label=history];
d34 -> d35  [key=0, style=solid];
d151 -> d149  [key=0, style=bold, color=blue];
d150 -> d151  [key=0, style=solid];
d150 -> d142  [key=2, style=dotted];
d150 -> d152  [key=2, style=dotted];
d99 -> d100  [key=0, style=solid];
d99 -> d47  [key=2, style=dotted];
d112 -> d110  [key=0, style=bold, color=blue];
d111 -> d97  [key=2, style=dotted];
d111 -> d112  [key=0, style=solid];
d111 -> d113  [key=2, style=dotted];
d111 -> d114  [key=2, style=dotted];
d124 -> d121  [key=0, style=bold, color=blue];
d125 -> d126  [key=0, style=solid];
d125 -> d127  [key=1, style=dashed, color=darkseagreen4, label="?"];
d37 -> d38  [key=0, style=solid];
d39 -> d37  [key=0, style=bold, color=blue];
d58 -> d56  [key=0, style=bold, color=blue];
d187 -> d189  [key=1, style=dashed, color=darkseagreen4, label=entry];
d187 -> d47  [key=2, style=dotted];
d187 -> d188  [key=0, style=solid];
d187 -> d193  [key=2, style=dotted];
d188 -> d189  [key=0, style=solid];
d188 -> d194  [key=2, style=dotted];
d190 -> d191  [key=0, style=solid];
d190 -> d194  [key=2, style=dotted];
d191 -> d136  [key=2, style=dotted];
d191 -> d192  [key=0, style=solid];
d213 -> d215  [key=1, style=dashed, color=darkseagreen4, label=entry];
d213 -> d47  [key=2, style=dotted];
d213 -> d214  [key=0, style=solid];
d213 -> d193  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d214 -> d194  [key=2, style=dotted];
d101 -> d98  [key=0, style=bold, color=blue];
d103 -> d104  [key=0, style=solid];
d103 -> d105  [key=1, style=dashed, color=darkseagreen4, label="?"];
d121 -> d122  [key=0, style=solid];
d138 -> d139  [key=0, style=solid];
d138 -> d97  [key=2, style=dotted];
d138 -> d141  [key=2, style=dotted];
d140 -> d137  [key=0, style=bold, color=blue];
d166 -> d18  [key=2, style=dotted];
d166 -> d109  [key=2, style=dotted];
d166 -> d167  [key=0, style=solid];
d167 -> d18  [key=2, style=dotted];
d167 -> d109  [key=2, style=dotted];
d167 -> d168  [key=0, style=solid];
d52 -> d50  [key=0, style=bold, color=blue];
d51 -> d52  [key=0, style=solid];
d55 -> d53  [key=0, style=bold, color=blue];
d54 -> d55  [key=0, style=solid];
d116 -> d97  [key=2, style=dotted];
d116 -> d117  [key=0, style=solid];
d116 -> d119  [key=2, style=dotted];
d117 -> d97  [key=2, style=dotted];
d117 -> d118  [key=0, style=solid];
d117 -> d120  [key=2, style=dotted];
d130 -> d97  [key=2, style=dotted];
d130 -> d131  [key=0, style=solid];
d130 -> d119  [key=2, style=dotted];
d144 -> d97  [key=2, style=dotted];
d144 -> d145  [key=0, style=solid];
d144 -> d141  [key=2, style=dotted];
d178 -> d97  [key=2, style=dotted];
d178 -> d179  [key=0, style=solid];
d244 -> d97  [key=2, style=dotted];
d244 -> d245  [key=0, style=solid];
d212 -> d213  [key=0, style=solid];
d222 -> d223  [key=0, style=solid];
d235 -> d229  [key=0, style=bold, color=blue];
d256 -> d250  [key=0, style=bold, color=blue];
d246 -> d239  [key=0, style=bold, color=blue];
d243 -> d244  [key=0, style=solid];
d243 -> d246  [key=0, style=solid];
d242 -> d244  [key=1, style=dashed, color=darkseagreen4, label=i];
d242 -> d243  [key=0, style=solid];
d242 -> d245  [key=1, style=dashed, color=darkseagreen4, label=i];
d177 -> d47  [key=2, style=dotted];
d177 -> d178  [key=0, style=solid];
d177 -> d180  [key=2, style=dotted];
d182 -> d47  [key=2, style=dotted];
d182 -> d180  [key=2, style=dotted];
d182 -> d183  [key=0, style=solid];
d36 -> d34  [key=0, style=bold, color=blue];
d35 -> d36  [key=0, style=solid];
d98 -> d99  [key=0, style=solid];
d128 -> d125  [key=0, style=bold, color=blue];
d126 -> d127  [key=0, style=solid];
d126 -> d107  [key=2, style=dotted];
d127 -> d109  [key=2, style=dotted];
d127 -> d128  [key=0, style=solid];
d127 -> d108  [key=2, style=dotted];
d186 -> d187  [key=0, style=solid];
d186 -> d191  [key=1, style=dashed, color=darkseagreen4, label=Table];
d192 -> d186  [key=0, style=bold, color=blue];
d106 -> d103  [key=0, style=bold, color=blue];
d104 -> d105  [key=0, style=solid];
d104 -> d107  [key=2, style=dotted];
d105 -> d109  [key=2, style=dotted];
d105 -> d106  [key=0, style=solid];
d105 -> d108  [key=2, style=dotted];
d137 -> d138  [key=0, style=solid];
d147 -> d142  [key=2, style=dotted];
d147 -> d109  [key=2, style=dotted];
d147 -> d148  [key=0, style=solid];
d163 -> d142  [key=2, style=dotted];
d163 -> d109  [key=2, style=dotted];
d163 -> d164  [key=0, style=solid];
d170 -> d142  [key=2, style=dotted];
d170 -> d152  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d156 -> d109  [key=2, style=dotted];
d156 -> d157  [key=0, style=solid];
d156 -> d161  [key=2, style=dotted];
d157 -> d109  [key=2, style=dotted];
d157 -> d157  [key=3, color=darkorchid, style=bold, label="method methodReturn T Return"];
d157 -> d158  [key=0, style=solid];
d157 -> d161  [key=2, style=dotted];
d173 -> d109  [key=2, style=dotted];
d173 -> d174  [key=0, style=solid];
d173 -> d175  [key=2, style=dotted];
d165 -> d166  [key=0, style=solid];
d165 -> d167  [key=1, style=dashed, color=darkseagreen4, label=timestamp];
d165 -> d160  [key=2, style=dotted];
d168 -> d162  [key=0, style=bold, color=blue];
d115 -> d116  [key=0, style=solid];
d118 -> d115  [key=0, style=bold, color=blue];
d129 -> d130  [key=0, style=solid];
d131 -> d129  [key=0, style=bold, color=blue];
d143 -> d144  [key=0, style=solid];
d145 -> d143  [key=0, style=bold, color=blue];
d176 -> d178  [key=1, style=dashed, color=darkseagreen4, label=string];
d176 -> d177  [key=0, style=solid];
d179 -> d176  [key=0, style=bold, color=blue];
d245 -> d243  [key=0, style=solid];
d245 -> d245  [key=1, style=dashed, color=darkseagreen4, label=i];
d181 -> d182  [key=0, style=solid];
d181 -> d183  [key=1, style=dashed, color=darkseagreen4, label=Table];
d183 -> d184  [key=0, style=solid];
d183 -> d185  [key=2, style=dotted];
d146 -> d147  [key=0, style=solid];
d148 -> d146  [key=0, style=bold, color=blue];
d162 -> d163  [key=0, style=solid];
d164 -> d165  [key=0, style=solid];
d164 -> d159  [key=2, style=dotted];
d169 -> d170  [key=0, style=solid];
d171 -> d169  [key=0, style=bold, color=blue];
d155 -> d156  [key=0, style=solid];
d155 -> d157  [key=1, style=dashed, color=darkseagreen4, label=timestamp];
d155 -> d160  [key=2, style=dotted];
d158 -> d153  [key=0, style=bold, color=blue];
d172 -> d173  [key=0, style=solid];
d174 -> d172  [key=0, style=bold, color=blue];
d184 -> d181  [key=0, style=bold, color=blue];
d154 -> d155  [key=0, style=solid];
d154 -> d159  [key=2, style=dotted];
d153 -> d154  [key=0, style=solid];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [key=0, style=bold, color=blue];
m0_22 -> m0_23  [key=0, style=solid];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=2, style=dotted];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_25 -> m0_25  [key=3, color=darkorchid, style=bold, label="Property variable bool IsFinal"];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ApplyStateContext"];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label=scheduledState];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_21  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_15  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_20  [key=2, style=dotted];
m0_14 -> m0_17  [key=0, style=solid];
m0_14 -> m0_18  [key=2, style=dotted];
m0_14 -> m0_19  [key=2, style=dotted];
m0_17 -> m0_11  [key=0, style=bold, color=blue];
m0_6 -> m0_7  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> d32  [key=2, style=dotted];
m0_7 -> m0_10  [key=2, style=dotted];
m0_8 -> m0_6  [key=0, style=bold, color=blue];
m0_2 -> m0_3  [key=0, style=solid];
m0_3 -> m0_4  [key=0, style=solid];
m0_4 -> m0_5  [key=0, style=solid];
m0_5 -> m0_2  [key=0, style=bold, color=blue];
m0_26 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ScheduledState"];
m0_26 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ScheduledState"];
m0_26 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.ScheduledState"];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label=ILog];
m2_8 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label=ILog];
m2_8 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label=ILog];
m2_8 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=ILog];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_15  [key=2, style=dotted];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_15  [key=2, style=dotted];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> d248  [key=2, style=dotted];
m2_11 -> m2_17  [key=2, style=dotted];
m2_11 -> m2_15  [key=2, style=dotted];
m2_11 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_15  [key=2, style=dotted];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_15  [key=2, style=dotted];
m2_14 -> m2_8  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_7  [key=2, style=dotted];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_7  [key=2, style=dotted];
m2_6 -> m2_0  [key=0, style=bold, color=blue];
m2_18 -> m2_19  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_20 -> m2_18  [key=0, style=bold, color=blue];
m2_21 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m2_21 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m2_21 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m2_21 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m2_21 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m2_21 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m2_21 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m2_21 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m2_21 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.BackgroundJobServerOptions"];
m3_2 -> m3_3  [key=0, style=solid];
m3_3 -> m3_2  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_0  [key=0, style=bold, color=blue];
m4_55 -> m4_56  [key=0, style=solid];
m4_56 -> m4_57  [key=0, style=solid];
m4_56 -> m4_39  [key=2, style=dotted];
m4_57 -> m4_58  [key=0, style=solid];
m4_57 -> m4_22  [key=2, style=dotted];
m4_58 -> m4_59  [key=0, style=solid];
m4_58 -> d48  [key=2, style=dotted];
m4_59 -> m4_60  [key=0, style=solid];
m4_59 -> m4_41  [key=2, style=dotted];
m4_60 -> m4_61  [key=0, style=solid];
m4_60 -> m4_42  [key=2, style=dotted];
m4_61 -> m4_62  [key=0, style=solid];
m4_61 -> m4_43  [key=2, style=dotted];
m4_62 -> m4_63  [key=0, style=solid];
m4_62 -> m4_26  [key=2, style=dotted];
m4_63 -> m4_55  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_5  [key=2, style=dotted];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_6  [key=2, style=dotted];
m4_2 -> m4_7  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_8  [key=2, style=dotted];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_76 -> m4_77  [key=0, style=solid];
m4_77 -> m4_78  [key=0, style=solid];
m4_77 -> m4_39  [key=2, style=dotted];
m4_78 -> m4_79  [key=0, style=solid];
m4_78 -> m4_22  [key=2, style=dotted];
m4_79 -> m4_80  [key=0, style=solid];
m4_79 -> d48  [key=2, style=dotted];
m4_80 -> m4_81  [key=0, style=solid];
m4_80 -> m4_41  [key=2, style=dotted];
m4_81 -> m4_82  [key=0, style=solid];
m4_81 -> m4_42  [key=2, style=dotted];
m4_82 -> m4_83  [key=0, style=solid];
m4_82 -> m4_43  [key=2, style=dotted];
m4_83 -> m4_84  [key=0, style=solid];
m4_83 -> m4_26  [key=2, style=dotted];
m4_84 -> m4_76  [key=0, style=bold, color=blue];
m4_9 -> m4_10  [key=0, style=solid];
m4_10 -> m4_11  [key=0, style=solid];
m4_10 -> m4_13  [key=2, style=dotted];
m4_11 -> m4_12  [key=0, style=solid];
m4_12 -> m4_9  [key=0, style=bold, color=blue];
m4_22 -> m4_23  [key=0, style=solid];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_25  [key=2, style=dotted];
m4_24 -> m4_22  [key=0, style=bold, color=blue];
m4_85 -> m4_86  [key=0, style=solid];
m4_86 -> m4_87  [key=0, style=solid];
m4_86 -> m4_39  [key=2, style=dotted];
m4_87 -> m4_88  [key=0, style=solid];
m4_87 -> m4_22  [key=2, style=dotted];
m4_88 -> m4_89  [key=0, style=solid];
m4_88 -> d48  [key=2, style=dotted];
m4_89 -> m4_90  [key=0, style=solid];
m4_89 -> m4_41  [key=2, style=dotted];
m4_90 -> m4_91  [key=0, style=solid];
m4_90 -> m4_42  [key=2, style=dotted];
m4_91 -> m4_92  [key=0, style=solid];
m4_91 -> m4_43  [key=2, style=dotted];
m4_92 -> m4_93  [key=0, style=solid];
m4_92 -> m4_26  [key=2, style=dotted];
m4_93 -> m4_85  [key=0, style=bold, color=blue];
m4_64 -> m4_65  [key=0, style=solid];
m4_65 -> m4_66  [key=0, style=solid];
m4_65 -> m4_39  [key=2, style=dotted];
m4_66 -> m4_67  [key=0, style=solid];
m4_66 -> m4_22  [key=2, style=dotted];
m4_67 -> m4_68  [key=0, style=solid];
m4_67 -> d48  [key=2, style=dotted];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_41  [key=2, style=dotted];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_41  [key=2, style=dotted];
m4_70 -> m4_71  [key=0, style=solid];
m4_70 -> m4_42  [key=2, style=dotted];
m4_71 -> m4_72  [key=0, style=solid];
m4_71 -> m4_43  [key=2, style=dotted];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_42  [key=2, style=dotted];
m4_73 -> m4_74  [key=0, style=solid];
m4_73 -> m4_43  [key=2, style=dotted];
m4_74 -> m4_75  [key=0, style=solid];
m4_74 -> m4_26  [key=2, style=dotted];
m4_75 -> m4_64  [key=0, style=bold, color=blue];
m4_14 -> m4_15  [key=0, style=solid];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_17  [key=0, style=solid];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_0  [key=2, style=dotted];
m4_17 -> m4_14  [key=0, style=bold, color=blue];
m4_26 -> m4_27  [key=0, style=solid];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_29  [key=2, style=dotted];
m4_28 -> m4_26  [key=0, style=bold, color=blue];
m4_44 -> m4_45  [key=0, style=solid];
m4_45 -> m4_46  [key=0, style=solid];
m4_45 -> m4_39  [key=2, style=dotted];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_22  [key=2, style=dotted];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> d48  [key=2, style=dotted];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_41  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_42  [key=2, style=dotted];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_43  [key=2, style=dotted];
m4_51 -> m4_52  [key=0, style=solid];
m4_51 -> m4_54  [key=2, style=dotted];
m4_52 -> m4_53  [key=0, style=solid];
m4_52 -> m4_26  [key=2, style=dotted];
m4_53 -> m4_44  [key=0, style=bold, color=blue];
m4_30 -> m4_31  [key=0, style=solid];
m4_31 -> m4_32  [key=0, style=solid];
m4_31 -> m4_39  [key=2, style=dotted];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_22  [key=2, style=dotted];
m4_33 -> m4_34  [key=0, style=solid];
m4_33 -> d48  [key=2, style=dotted];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_41  [key=2, style=dotted];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_42  [key=2, style=dotted];
m4_36 -> m4_37  [key=0, style=solid];
m4_36 -> m4_43  [key=2, style=dotted];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> m4_26  [key=2, style=dotted];
m4_38 -> m4_30  [key=0, style=bold, color=blue];
m4_18 -> m4_19  [key=0, style=solid];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_21  [key=2, style=dotted];
m4_20 -> m4_18  [key=0, style=bold, color=blue];
m4_94 -> m4_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m4_94 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m4_94 -> m4_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m4_94 -> m4_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m4_94 -> m4_57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m4_94 -> m4_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m4_94 -> m4_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m4_94 -> m4_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m4_94 -> m4_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m4_94 -> m4_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m4_94 -> m4_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
m4_94 -> m4_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Server.JobFetcherFeature"];
}
