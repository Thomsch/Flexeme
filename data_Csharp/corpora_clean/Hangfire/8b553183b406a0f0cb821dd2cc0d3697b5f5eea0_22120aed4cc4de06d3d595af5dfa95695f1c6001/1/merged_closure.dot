digraph  {
n0 [cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", label="Entry HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="7-7"];
n1 [cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", label="context.Transaction.InsertToList(''succeeded'', context.JobId)", span="9-9"];
n2 [cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", label="context.Transaction.TrimList(''succeeded'', 0, 99)", span="10-10"];
n4 [cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", label="Entry HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="30-30"];
n3 [cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", label="Exit HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="7-7"];
n5 [cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", label="Entry HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="32-32"];
n6 [cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", label="Entry HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="13-13"];
n7 [cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", label="context.Transaction.RemoveFromList(''succeeded'', context.JobId)", span="15-15"];
n8 [cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", label="Exit HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="13-13"];
n9 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="31-31"];
d5 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", color=green, community=0, label="_failedException = new InvalidOperationException(''Hello'')", prediction=0, span="50-50"];
d257 [label="HangFire.Tests.States.StateSteps", span=""];
d4 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", label="Entry HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48"];
d6 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", color=green, community=0, label="_state = new FailedState(_failedException)\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", prediction=1, span="51-54"];
d8 [cluster="System.InvalidOperationException.InvalidOperationException(string)", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
d7 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", label="Exit HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48"];
d9 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="28-28"];
d196 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", color=green, community=0, label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId)))", prediction=2, span="388-389"];
d195 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386"];
d197 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386"];
d198 [cluster="Unk.Verify", label="Entry Unk.Verify", span=""];
d199 [cluster="lambda expression", label="Entry lambda expression", span="389-389"];
d200 [cluster="lambda expression", color=green, community=0, label="x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId))", prediction=3, span="389-389"];
d201 [cluster="lambda expression", label="Exit lambda expression", span="389-389"];
d40 [cluster="Unk.>", label="Entry Unk.>", span=""];
d202 [cluster="Unk.Unapply", label="Entry Unk.Unapply", span=""];
d203 [cluster="lambda expression", label="Entry lambda expression", span="389-389"];
d204 [cluster="lambda expression", color=green, community=0, label="y.JobId == JobSteps.DefaultJobId", prediction=4, span="389-389"];
d205 [cluster="lambda expression", label="Exit lambda expression", span="389-389"];
d207 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", color=green, community=0, label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.IsAny<StateApplyingContext>()),\r\n                Times.Never)", prediction=2, span="395-397"];
d206 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393"];
d208 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393"];
d209 [cluster="lambda expression", label="Entry lambda expression", span="396-396"];
d210 [cluster="lambda expression", color=green, community=0, label="x.Unapply(It.IsAny<StateApplyingContext>())", prediction=6, span="396-396"];
d211 [cluster="lambda expression", label="Exit lambda expression", span="396-396"];
d1 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", label="_state = new SucceededState { Reason = ''SomeReason'' }", span="44-44"];
d11 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", label="_state = new ProcessingState(''TestServer'')\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="60-63"];
d15 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", label="_state = new ScheduledState(DateTime.UtcNow.AddDays(1))\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="69-72"];
d20 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", label="_state = new EnqueuedState\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="78-81"];
d27 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", label="_stateMocks.Add(state, mock)", span="92-92"];
d44 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", label="_stateProperties = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="100-100"];
d45 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", label="_stateMocks[state].Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(_stateProperties)", span="101-102"];
d60 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", label="_filters.Add(new TestStateChangingFilter(name, _stateChangingResults))", span="118-118"];
d66 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", label="_filters.Add(\r\n                new TestStateChangingFilter(name, _stateChangingResults, _stateMocks[state].Object))", span="126-127"];
d70 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", label="_filters.Add(new TestStateChangedFilter(name, _stateAppliedResults))", span="133-133"];
d74 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="175-176"];
d75 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", label="stateMachine.ChangeState(JobSteps.DefaultJobId, _state)", span="177-177"];
d86 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="192-193"];
d87 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", label="stateMachine.ChangeState(jobId, _stateMocks[state].Object)", span="194-194"];
d91 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="201-202"];
d92 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", label="stateMachine.ChangeState(JobSteps.DefaultJobId, _stateMocks[state].Object, allowedState)", span="203-203"];
d95 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", label="Assert.Equal(name, _state.StateName)", span="209-209"];
d133 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", label="TableAssert.ContainsFollowingItems(\r\n                table,\r\n                _state.GetData(_defaultData))", span="276-278"];
d217 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", label=_stateProperties, span="410-410"];
d224 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", label=_stateProperties, span="423-423"];
d230 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", label="Assert.Equal(table.RowCount, _stateChangingResults.Count)", span="433-433"];
d233 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", label="Assert.Equal(table.Rows[i][''Filter''], _stateChangingResults[i])", span="437-437"];
d237 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", label="Assert.Equal(0, _stateChangingResults.Count)", span="444-444"];
d251 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", label="Assert.Equal(table.RowCount, _stateAppliedResults.Count)", span="463-463"];
d254 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", label="Assert.Equal(table.Rows[i][''Method''], _stateAppliedResults[i])", span="467-467"];
d23 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85"];
d240 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", label="var serializedHistory = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="450-451"];
d25 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", label="mock.Setup(x => x.StateName).Returns(state)", span="88-88"];
d149 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301"];
d110 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233"];
d123 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", label="keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl));\r\n            })", span="258-264"];
d38 [cluster="lambda expression", label="x.GetData(It.IsAny<JobMethod>())", span="89-89"];
d57 [cluster="lambda expression", label="x.GetData(It.IsAny<JobMethod>())", span="101-101"];
d189 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="361-361"];
d215 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="407-407"];
d0 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42"];
d2 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42"];
d3 [cluster="HangFire.States.SucceededState.SucceededState()", label="Entry HangFire.States.SucceededState.SucceededState()", span="23-23"];
d10 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58"];
d12 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", label="Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58"];
d13 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="28-28"];
d100 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl));\r\n                })", span="222-229"];
d122 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="251-256"];
d139 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="285-285"];
d14 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", label="Entry HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67"];
d16 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", label="Exit HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67"];
d17 [cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="27-27"];
d18 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
d19 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76"];
d21 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76"];
d22 [cluster="HangFire.States.EnqueuedState.EnqueuedState()", label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="25-25"];
d24 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", label="var mock = new Mock<JobState>()", span="87-87"];
d26 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", label="mock.Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(new Dictionary<string, string>())", span="89-90"];
d28 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85"];
d33 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
d42 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", label="Entry HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96"];
d43 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", label="Given(String.Format(''a '{0}' state'', state))", span="98-98"];
d49 [cluster="Unk.ToDictionary", label="Entry Unk.ToDictionary", span=""];
d50 [cluster="lambda expression", label="Entry lambda expression", span="100-100"];
d53 [cluster="lambda expression", label="Entry lambda expression", span="100-100"];
d46 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", label="Exit HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96"];
d30 [cluster="Unk.Setup", label="Entry Unk.Setup", span=""];
d31 [cluster="Unk.Returns", label="Entry Unk.Returns", span=""];
d56 [cluster="lambda expression", label="Entry lambda expression", span="101-101"];
d59 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116"];
d61 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116"];
d62 [cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", label="Entry HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", span="14-14"];
d63 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
d64 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122"];
d65 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", label="Given(String.Format(''a '{0}' state'', state))", span="124-124"];
d67 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122"];
d68 [cluster="TestStateChangingFilter.cstr", label="Entry TestStateChangingFilter.cstr", span=""];
d69 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", label="Entry HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131"];
d71 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", label="Exit HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131"];
d72 [cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", label="Entry HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", span="14-14"];
d73 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", label="Entry HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173"];
d77 [cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", span="41-41"];
d78 [cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", label="Entry HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", span="15-15"];
d76 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", label="Exit HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173"];
d79 [cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="111-111"];
d85 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190"];
d88 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190"];
d89 [cluster="Unk.ChangeState", label="Entry Unk.ChangeState", span=""];
d90 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198"];
d93 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198"];
d94 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207"];
d96 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207"];
d97 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d132 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", label="Entry HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274"];
d134 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", label="Exit HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274"];
d135 [cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", label="Entry HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="26-26"];
d136 [cluster="HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", label="Entry HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="8-8"];
d216 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", label="Assert.NotNull(history)", span="408-408"];
d219 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", label="Assert.Equal(property.Value, history[property.Key])", span="413-413"];
d218 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", label="Assert.True(history.ContainsKey(property.Key))", span="412-412"];
d220 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401"];
d223 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="420-421"];
d226 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", label="Assert.Equal(property.Value, stateEntry[property.Key])", span="426-426"];
d225 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", label="Assert.True(stateEntry.ContainsKey(property.Key))", span="425-425"];
d227 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418"];
d229 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431"];
d231 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", label="var i = 0", span="435-435"];
d232 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", label="i < table.RowCount", span="435-435"];
d234 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", label="i++", span="435-435"];
d236 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442"];
d238 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442"];
d250 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", label="Entry HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461"];
d252 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", label="var i = 0", span="465-465"];
d253 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", label="i < table.RowCount", span="465-465"];
d255 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", label="i++", span="465-465"];
d239 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448"];
d241 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", label="var history = serializedHistory.Select(JobHelper.FromJson<Dictionary<string, string>>).ToList()", span="452-452"];
d47 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
d247 [cluster="Unk.GetAllItemsFromList", label="Entry Unk.GetAllItemsFromList", span=""];
d34 [cluster="lambda expression", label="Entry lambda expression", span="88-88"];
d151 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301"];
d150 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="303-303"];
d99 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="215-220"];
d112 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233"];
d111 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", label="Assert.Equal(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="235-237"];
d124 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249"];
d102 [cluster="Unk.ForEach", label="Entry Unk.ForEach", span=""];
d125 [cluster="lambda expression", label="Entry lambda expression", span="258-264"];
d37 [cluster="lambda expression", label="Entry lambda expression", span="89-89"];
d39 [cluster="lambda expression", label="Exit lambda expression", span="89-89"];
d41 [cluster="Unk.GetData", label="Entry Unk.GetData", span=""];
d58 [cluster="lambda expression", label="Exit lambda expression", span="101-101"];
d187 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="357-358"];
d188 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", label="Assert.NotNull(entry)", span="359-359"];
d190 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", label="Assert.NotNull(history)", span="362-362"];
d191 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", label="TableAssert.ContainsFollowingItems(table, history)", span="364-364"];
d213 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="403-404"];
d214 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", label="Assert.NotNull(entry)", span="405-405"];
d101 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213"];
d103 [cluster="lambda expression", label="Entry lambda expression", span="222-229"];
d121 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249"];
d138 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", label="Assert.Equal(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="284-284"];
d140 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282"];
d142 [cluster="Unk.SortedSetContainsItem", label="Entry Unk.SortedSetContainsItem", span=""];
d109 [cluster="Unk.True", label="Entry Unk.True", span=""];
d166 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", label="Assert.True(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="323-323"];
d167 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", label="Assert.True(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="324-324"];
d29 [cluster="Mock<JobState>.cstr", label="Entry Mock<JobState>.cstr", span=""];
d32 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
d48 [cluster="Unk.Given", label="Entry Unk.Given", span=""];
d52 [cluster="lambda expression", label="Exit lambda expression", span="100-100"];
d51 [cluster="lambda expression", label="x[''Name'']", span="100-100"];
d55 [cluster="lambda expression", label="Exit lambda expression", span="100-100"];
d54 [cluster="lambda expression", label="x[''Value'']", span="100-100"];
d116 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", label="Assert.Equal(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="243-243"];
d117 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", label="Assert.Equal(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="244-245"];
d130 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", label="Assert.Equal(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="270-270"];
d144 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", label="Assert.Equal(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="291-291"];
d178 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", label="Assert.Equal(state, job[''State''])", span="343-343"];
d244 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", label="Assert.Equal(table.Rows[i][''State''], history[i][''State''])", span="456-456"];
d194 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
d221 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
d212 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401"];
d222 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418"];
d180 [cluster="Unk.GetAllEntriesFromHash", label="Entry Unk.GetAllEntriesFromHash", span=""];
d228 [cluster="Unk.ContainsKey", label="Entry Unk.ContainsKey", span=""];
d235 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431"];
d256 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", label="Exit HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461"];
d246 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448"];
d243 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", label="i < table.RowCount", span="454-454"];
d242 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", label="var i = 0", span="454-454"];
d248 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
d249 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
d177 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="342-342"];
d182 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="349-350"];
d36 [cluster="lambda expression", label="Exit lambda expression", span="88-88"];
d35 [cluster="lambda expression", label="x.StateName", span="88-88"];
d152 [cluster="Unk.False", label="Entry Unk.False", span=""];
d98 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213"];
d113 [cluster="string.Format(string, params object[])", label="Entry string.Format(string, params object[])", span="0-0"];
d114 [cluster="Unk.GetValue", label="Entry Unk.GetValue", span=""];
d128 [cluster="lambda expression", label="Exit lambda expression", span="258-264"];
d126 [cluster="lambda expression", label="var ttl = Redis.Client.GetTimeToLive(x)", span="260-260"];
d127 [cluster="lambda expression", label="Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl))", span="261-263"];
d186 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355"];
d193 [cluster="Unk.RemoveStartFromList", label="Entry Unk.RemoveStartFromList", span=""];
d192 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355"];
d106 [cluster="lambda expression", label="Exit lambda expression", span="222-229"];
d104 [cluster="lambda expression", label="var ttl = Redis.Client.GetTimeToLive(x)", span="224-224"];
d105 [cluster="lambda expression", label="Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl))", span="225-228"];
d137 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282"];
d141 [cluster="Unk.GetSortedSetCount", label="Entry Unk.GetSortedSetCount", span=""];
d147 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="297-297"];
d163 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="319-319"];
d170 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="330-330"];
d156 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", label="Assert.True(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="312-312"];
d157 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", label="Assert.True(timestamp < DateTime.UtcNow.AddSeconds(1))", span="313-313"];
d173 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", label="Assert.True(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="336-336"];
d165 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", label="var timestamp = JobHelper.FromTimestamp((long) score)", span="321-321"];
d168 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317"];
d115 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241"];
d119 [cluster="Unk.GetListCount", label="Entry Unk.GetListCount", span=""];
d118 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241"];
d120 [cluster="Unk.PopItemFromList", label="Entry Unk.PopItemFromList", span=""];
d129 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268"];
d131 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268"];
d143 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289"];
d145 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289"];
d176 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340"];
d179 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340"];
d245 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", label="i++", span="454-454"];
d181 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347"];
d183 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", label="TableAssert.ContainsFollowingItems(table, stateEntry)", span="351-351"];
d107 [cluster="Unk.GetTimeToLive", label="Entry Unk.GetTimeToLive", span=""];
d108 [cluster="Unk.Format", label="Entry Unk.Format", span=""];
d146 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295"];
d148 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295"];
d162 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317"];
d164 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="320-320"];
d169 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328"];
d171 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328"];
d155 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", label="var timestamp = JobHelper.FromTimestamp((long)score)", span="310-310"];
d161 [cluster="System.DateTime.AddSeconds(double)", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
d158 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307"];
d172 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334"];
d174 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334"];
d175 [cluster="Unk.SetContainsItem", label="Entry Unk.SetContainsItem", span=""];
d160 [cluster="HangFire.Common.JobHelper.FromTimestamp(long)", label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="41-41"];
d184 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347"];
d185 [cluster="Unk.ContainsFollowingItems", label="Entry Unk.ContainsFollowingItems", span=""];
d159 [cluster="Unk.GetItemScoreInSortedSet", label="Entry Unk.GetItemScoreInSortedSet", span=""];
d154 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="309-309"];
d153 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307"];
m0_20 [cluster="Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", file="ScheduledState.cs", label="Entry Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", span="57-57"];
m0_21 [cluster="Hangfire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="ScheduledState.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="42-42"];
m0_0 [cluster="Hangfire.States.ScheduledState.ScheduledState(System.TimeSpan)", file="ScheduledState.cs", label="Entry Hangfire.States.ScheduledState.ScheduledState(System.TimeSpan)", span="27-27"];
m0_1 [cluster="Hangfire.States.ScheduledState.ScheduledState(System.TimeSpan)", file="ScheduledState.cs", label="Exit Hangfire.States.ScheduledState.ScheduledState(System.TimeSpan)", span="27-27"];
m0_22 [cluster="Hangfire.States.ScheduledState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs", label="Entry Hangfire.States.ScheduledState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="71-71"];
m0_23 [cluster="Hangfire.States.ScheduledState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs", label="transaction.RemoveFromSet(''schedule'', context.JobId)", span="73-73"];
m0_24 [cluster="Hangfire.States.ScheduledState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs", label="Exit Hangfire.States.ScheduledState.Handler.Unapply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="71-71"];
m0_10 [cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="ScheduledState.cs", label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68"];
m0_25 [cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="ScheduledState.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43"];
m0_11 [cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs", label="Entry Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="57-57"];
m0_12 [cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs", label="var scheduledState = context.NewState as ScheduledState", span="59-59"];
m0_16 [cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs", label="transaction.AddToSet(''schedule'', context.JobId, timestamp)", span="68-68"];
m0_13 [cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs", label="scheduledState == null", span="60-60"];
m0_15 [cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs", label="var timestamp = JobHelper.ToTimestamp(scheduledState.EnqueueAt)", span="67-67"];
m0_14 [cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs", label="throw new InvalidOperationException(String.Format(\r\n                        ''`{0}` state handler can be registered only for the Scheduled state.'',\r\n                        typeof(Handler).FullName));", span="62-64"];
m0_17 [cluster="Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", file="ScheduledState.cs", label="Exit Hangfire.States.ScheduledState.Handler.Apply(Hangfire.States.ApplyStateContext, Hangfire.Storage.IWriteOnlyTransaction)", span="57-57"];
m0_6 [cluster="Hangfire.States.ScheduledState.SerializeData()", file="ScheduledState.cs", label="Entry Hangfire.States.ScheduledState.SerializeData()", span="46-46"];
m0_7 [cluster="Hangfire.States.ScheduledState.SerializeData()", file="ScheduledState.cs", label="return new Dictionary<string, string>\r\n            {\r\n                { ''EnqueueAt'', JobHelper.SerializeDateTime(EnqueueAt) },\r\n                { ''ScheduledAt'', JobHelper.SerializeDateTime(ScheduledAt) }\r\n            };", span="48-52"];
m0_8 [cluster="Hangfire.States.ScheduledState.SerializeData()", file="ScheduledState.cs", label="Exit Hangfire.States.ScheduledState.SerializeData()", span="46-46"];
m0_19 [cluster="string.Format(string, object)", file="ScheduledState.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_18 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ScheduledState.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m0_2 [cluster="Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", file="ScheduledState.cs", label="Entry Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", span="32-32"];
m0_3 [cluster="Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", file="ScheduledState.cs", label="EnqueueAt = enqueueAt", span="34-34"];
m0_4 [cluster="Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", file="ScheduledState.cs", label="ScheduledAt = DateTime.UtcNow", span="35-35"];
m0_5 [cluster="Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", file="ScheduledState.cs", label="Exit Hangfire.States.ScheduledState.ScheduledState(System.DateTime)", span="32-32"];
m0_26 [file="ScheduledState.cs", label="Hangfire.States.ScheduledState", span=""];
m2_15 [cluster="Unk.InfoFormat", file="StateMachine.cs", label="Entry Unk.InfoFormat", span=""];
m2_8 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs", label="Entry HangFire.BackgroundJobServerOptions.Log(ILog)", span="59-59"];
m2_9 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs", label="logger.InfoFormat(''Using the following options for HangFire Server:'')", span="61-61"];
m2_10 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs", label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="62-62"];
m2_11 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs", label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="63-63"];
m2_12 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs", label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="64-64"];
m2_13 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs", label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="65-65"];
m2_14 [cluster="HangFire.BackgroundJobServerOptions.Log(ILog)", file="StateMachine.cs", label="Exit HangFire.BackgroundJobServerOptions.Log(ILog)", span="59-59"];
m2_0 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs", label="Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="13-13"];
m2_1 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs", label="WorkerCount = Environment.ProcessorCount * 5", span="15-15"];
m2_2 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs", label="ServerName = Environment.MachineName", span="16-16"];
m2_3 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="17-17"];
m2_4 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs", label="ShutdownTimeout = TimeSpan.FromSeconds(15)", span="18-18"];
m2_5 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs", label="SchedulePollingInterval = TimeSpan.FromSeconds(15)", span="19-19"];
m2_6 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="StateMachine.cs", label="Exit HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="13-13"];
m2_7 [cluster="System.TimeSpan.FromSeconds(double)", file="StateMachine.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m2_17 [cluster="Unk.Join", file="StateMachine.cs", label="Entry Unk.Join", span=""];
m2_18 [cluster="lambda expression", file="StateMachine.cs", label="Entry lambda expression", span="63-63"];
m2_19 [cluster="lambda expression", file="StateMachine.cs", label="''''' + x + '''''", span="63-63"];
m2_20 [cluster="lambda expression", file="StateMachine.cs", label="Exit lambda expression", span="63-63"];
m2_21 [file="StateMachine.cs", label="HangFire.BackgroundJobServerOptions", span=""];
m3_2 [cluster="HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="StorageConnectionExtensions.cs", label="Entry HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", span="33-33"];
m3_3 [cluster="HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="StorageConnectionExtensions.cs", label="Exit HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", span="33-33"];
m3_0 [cluster="HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="StorageConnectionExtensions.cs", label="Entry HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", span="27-27"];
m3_1 [cluster="HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="StorageConnectionExtensions.cs", label="Exit HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", span="27-27"];
m4_25 [cluster="Unk.OnScenarioStart", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.OnScenarioStart", span=""];
m4_29 [cluster="Unk.CollectScenarioErrors", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m4_21 [cluster="Unk.OnScenarioEnd", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.OnScenarioEnd", span=""];
m4_55 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
m4_56 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns null when it tries to dequeue a job from an empty queue'', ((string[])(null)))", span="121-121"];
m4_57 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="123-123"];
m4_58 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="125-125"];
m4_59 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="127-127"];
m4_60 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="129-129"];
m4_61 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="131-131"];
m4_62 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioCleanup()", span="133-133"];
m4_63 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
m4_0 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m4_1 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StorageConnectionExtensionsFacts.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m4_2 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StorageConnectionExtensionsFacts.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m4_3 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StorageConnectionExtensionsFacts.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m4_4 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m4_76 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
m4_77 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher listens only specified queue'', ((string[])(null)))", span="169-169"];
m4_78 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="171-171"];
m4_79 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="173-173"];
m4_80 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="175-175"];
m4_81 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="177-177"];
m4_82 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="179-179"];
m4_83 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioCleanup()", span="181-181"];
m4_84 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
m4_41 [cluster="Unk.And", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.And", span=""];
m4_54 [cluster="Unk.But", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.But", span=""];
m4_5 [cluster="Unk.GetTestRunner", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.GetTestRunner", span=""];
m4_9 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39"];
m4_10 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m4_11 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="StorageConnectionExtensionsFacts.cs", label="testRunner = null", span="42-42"];
m4_12 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39"];
m4_22 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m4_23 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StorageConnectionExtensionsFacts.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m4_24 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m4_85 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
m4_86 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher sets the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="190-190"];
m4_87 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="192-192"];
m4_88 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="194-194"];
m4_89 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="196-196"];
m4_90 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="198-198"];
m4_91 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Then(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="200-200"];
m4_92 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioCleanup()", span="202-202"];
m4_93 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
m4_13 [cluster="Unk.OnFeatureEnd", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.OnFeatureEnd", span=""];
m4_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="StorageConnectionExtensionsFacts.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m4_64 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
m4_65 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher dequeues jobs in the FIFO order'', ((string[])(null)))", span="142-142"];
m4_66 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="144-144"];
m4_67 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="146-146"];
m4_68 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="148-148"];
m4_69 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="150-150"];
m4_70 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="152-152"];
m4_71 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Then(''the fetcher returns the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="154-154"];
m4_72 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156"];
m4_73 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Then(''the fetcher returns the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158"];
m4_74 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioCleanup()", span="160-160"];
m4_75 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
m4_42 [cluster="Unk.When", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.When", span=""];
m4_14 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46"];
m4_15 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="StorageConnectionExtensionsFacts.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49"];
m4_16 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="StorageConnectionExtensionsFacts.cs", label="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(null)", span="51-51"];
m4_17 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46"];
m4_39 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="StorageConnectionExtensionsFacts.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m4_43 [cluster="Unk.Then", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.Then", span=""];
m4_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="StorageConnectionExtensionsFacts.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m4_26 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m4_27 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m4_28 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m4_44 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
m4_45 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher removes the dequeued job from the queue and adds it to the dequeued list'', ((string[])(null)))", span="98-98"];
m4_46 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="100-100"];
m4_47 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102"];
m4_48 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104"];
m4_49 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106"];
m4_50 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Then(''the queue does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108"];
m4_51 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.But(''the dequeued jobs list contains it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="110-110"];
m4_52 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioCleanup()", span="112-112"];
m4_53 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
m4_8 [cluster="Unk.OnFeatureStart", file="StorageConnectionExtensionsFacts.cs", label="Entry Unk.OnFeatureStart", span=""];
m4_30 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m4_31 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns the job payload when it dequeues a job'', ((string[])(null)))", span="77-77"];
m4_32 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m4_33 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m4_34 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83"];
m4_35 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m4_36 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.Then(''the fetcher returns the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87"];
m4_37 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="this.ScenarioCleanup()", span="89-89"];
m4_38 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m4_18 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="StorageConnectionExtensionsFacts.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
m4_19 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="StorageConnectionExtensionsFacts.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m4_20 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="StorageConnectionExtensionsFacts.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
m4_94 [file="StorageConnectionExtensionsFacts.cs", label="HangFire.Tests.Server.JobFetcherFeature", span=""];
n0 -> n2  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateApplyingContext", style=dashed];
d257 -> d196  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d207  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d27  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d45  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d60  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d66  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d75  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d87  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d92  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d95  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d133  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d217  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d224  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d230  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d233  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d237  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d251  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d257 -> d254  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
d196 -> d199  [color=green, key=1, label="lambda expression", style=dashed];
d200 -> d203  [color=green, key=1, label="lambda expression", style=dashed];
d207 -> d209  [color=green, key=1, label="lambda expression", style=dashed];
d44 -> d50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d44 -> d53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d45 -> d56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d23 -> d27  [color=darkseagreen4, key=1, label=string, style=dashed];
d23 -> d25  [color=darkseagreen4, key=1, label=string, style=dashed];
d25 -> d34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d123 -> d125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d189 -> d191  [color=darkseagreen4, key=1, label=history, style=dashed];
d215 -> d218  [color=darkseagreen4, key=1, label=history, style=dashed];
d215 -> d219  [color=darkseagreen4, key=1, label=history, style=dashed];
d100 -> d103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d24 -> d27  [color=darkseagreen4, key=1, label=mock, style=dashed];
d24 -> d26  [color=darkseagreen4, key=1, label=mock, style=dashed];
d26 -> d37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d42 -> d45  [color=darkseagreen4, key=1, label=string, style=dashed];
d64 -> d66  [color=darkseagreen4, key=1, label=string, style=dashed];
d85 -> d87  [color=darkseagreen4, key=1, label=string, style=dashed];
d90 -> d92  [color=darkseagreen4, key=1, label=string, style=dashed];
d219 -> d219  [color=darkseagreen4, key=1, label=property, style=dashed];
d218 -> d218  [color=darkseagreen4, key=1, label=property, style=dashed];
d223 -> d225  [color=darkseagreen4, key=1, label=stateEntry, style=dashed];
d223 -> d226  [color=darkseagreen4, key=1, label=stateEntry, style=dashed];
d226 -> d226  [color=darkseagreen4, key=1, label=property, style=dashed];
d225 -> d225  [color=darkseagreen4, key=1, label=property, style=dashed];
d229 -> d233  [color=darkseagreen4, key=1, label=Table, style=dashed];
d229 -> d232  [color=darkseagreen4, key=1, label=Table, style=dashed];
d231 -> d233  [color=darkseagreen4, key=1, label=i, style=dashed];
d231 -> d234  [color=darkseagreen4, key=1, label=i, style=dashed];
d234 -> d234  [color=darkseagreen4, key=1, label=i, style=dashed];
d250 -> d254  [color=darkseagreen4, key=1, label=Table, style=dashed];
d250 -> d253  [color=darkseagreen4, key=1, label=Table, style=dashed];
d252 -> d254  [color=darkseagreen4, key=1, label=i, style=dashed];
d252 -> d255  [color=darkseagreen4, key=1, label=i, style=dashed];
d255 -> d255  [color=darkseagreen4, key=1, label=i, style=dashed];
d239 -> d243  [color=darkseagreen4, key=1, label=Table, style=dashed];
d239 -> d244  [color=darkseagreen4, key=1, label=Table, style=dashed];
d241 -> d244  [color=darkseagreen4, key=1, label=history, style=dashed];
d125 -> d127  [color=darkseagreen4, key=1, label="?", style=dashed];
d103 -> d105  [color=darkseagreen4, key=1, label="?", style=dashed];
d242 -> d244  [color=darkseagreen4, key=1, label=i, style=dashed];
d242 -> d245  [color=darkseagreen4, key=1, label=i, style=dashed];
d186 -> d191  [color=darkseagreen4, key=1, label=Table, style=dashed];
d165 -> d167  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
d176 -> d178  [color=darkseagreen4, key=1, label=string, style=dashed];
d245 -> d245  [color=darkseagreen4, key=1, label=i, style=dashed];
d181 -> d183  [color=darkseagreen4, key=1, label=Table, style=dashed];
d155 -> d157  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m0_11 -> m0_16  [color=darkseagreen4, key=1, label="Hangfire.States.ApplyStateContext", style=dashed];
m0_26 -> m0_7  [color=darkseagreen4, key=1, label="Hangfire.States.ScheduledState", style=dashed];
m2_8 -> m2_10  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m2_8 -> m2_11  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m2_8 -> m2_12  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m2_8 -> m2_13  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m2_11 -> m2_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_21 -> m2_10  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m2_21 -> m2_11  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m2_21 -> m2_12  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m2_21 -> m2_13  [color=darkseagreen4, key=1, label="HangFire.BackgroundJobServerOptions", style=dashed];
m4_94 -> m4_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m4_94 -> m4_37  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m4_94 -> m4_46  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m4_94 -> m4_52  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m4_94 -> m4_57  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m4_94 -> m4_62  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m4_94 -> m4_66  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m4_94 -> m4_74  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m4_94 -> m4_78  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m4_94 -> m4_83  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m4_94 -> m4_87  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m4_94 -> m4_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
}
