digraph  {
m1_0 [cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="24-24"];
m1_1 [cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="24-24"];
m1_22 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="41-41"];
m1_23 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="41-41"];
m1_26 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="45-45"];
m1_27 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="45-45"];
m1_2 [cluster="HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", span="25-25"];
m1_3 [cluster="HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", span="25-25"];
m1_18 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="39-39"];
m1_19 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="39-39"];
m1_28 [cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="46-46"];
m1_29 [cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="46-46"];
m1_32 [cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementValue(string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementValue(string)", span="50-50"];
m1_33 [cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementValue(string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.DecrementValue(string)", span="50-50"];
m1_30 [cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementValue(string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementValue(string)", span="49-49"];
m1_31 [cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementValue(string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.IncrementValue(string)", span="49-49"];
m1_34 [cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="51-51"];
m1_35 [cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="51-51"];
m1_8 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", span="30-30"];
m1_9 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", span="30-30"];
m1_12 [cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="34-34"];
m1_13 [cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="34-34"];
m1_36 [cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.Commit()", span="53-53"];
m1_37 [cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.Commit()", span="53-53"];
m1_10 [cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="33-33"];
m1_11 [cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="33-33"];
m1_20 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="40-40"];
m1_21 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="40-40"];
m1_14 [cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="35-35"];
m1_15 [cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="35-35"];
m1_4 [cluster="HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", span="26-26"];
m1_5 [cluster="HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", span="26-26"];
m1_6 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", span="27-27"];
m1_7 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", span="27-27"];
m1_16 [cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="36-36"];
m1_17 [cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="36-36"];
m1_24 [cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="IWriteOnlyTransaction.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="44-44"];
m1_25 [cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="IWriteOnlyTransaction.cs", label="Exit HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="44-44"];
m2_0 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="RedisWriteOnlyTransaction.cs", label="Entry Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="24-24"];
m2_1 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="RedisWriteOnlyTransaction.cs", label="ServerTimeout = ServerWatchdog.DefaultServerTimeout", span="26-26"];
m2_2 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="RedisWriteOnlyTransaction.cs", label="CheckInterval = ServerWatchdog.DefaultCheckInterval", span="27-27"];
m2_3 [cluster="Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", file="RedisWriteOnlyTransaction.cs", label="Exit Hangfire.Server.ServerWatchdogOptions.ServerWatchdogOptions()", span="24-24"];
m2_4 [file="RedisWriteOnlyTransaction.cs", label="Hangfire.Server.ServerWatchdogOptions", span=""];
m3_2 [cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerConnection.cs", label="Entry Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="96-96"];
m3_3 [cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="SqlServerConnection.cs", label="Exit Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="96-96"];
m3_0 [cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="Entry Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="65-65"];
m3_1 [cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="SqlServerConnection.cs", label="Exit Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="65-65"];
m4_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_82 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153"];
m4_83 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="AddToSet(key, value, 0.0)", span="155-155"];
m4_84 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153"];
m4_98 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
m4_99 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value)'',\r\n                new { key, value }))", span="181-183"];
m4_100 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
m4_85 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158"];
m4_86 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs", label="string addSql = @''\r\nmerge HangFire.[Set] as Target\r\nusing (VALUES (@key, @value, @score)) as Source ([Key], Value, Score)\r\non Target.[Key] = Source.[Key] and Target.Value = Source.Value\r\nwhen matched then update set Score = Source.Score\r\nwhen not matched then insert ([Key], Value, Score) values (Source.[Key], Source.Value, Source.Score);''", span="160-165"];
m4_87 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                addSql,\r\n                new { key, value, score }))", span="167-169"];
m4_88 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158"];
m4_64 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="132-132"];
m4_65 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="134-136"];
m4_66 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="132-132"];
m4_44 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", span="96-96"];
m4_45 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="SqlServerWriteOnlyTransaction.cs", label="string addStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data)''", span="98-100"];
m4_46 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                }))", span="102-111"];
m4_47 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.State)", span="96-96"];
m4_145 [cluster="System.Collections.Generic.Queue<T>.Enqueue(T)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Queue<T>.Enqueue(T)", span="0-0"];
m4_35 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", span="76-76"];
m4_36 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="SqlServerWriteOnlyTransaction.cs", label="string addAndSetStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data);\r\nupdate HangFire.Job set StateId = SCOPE_IDENTITY(), StateName = @name where Id = @id;''", span="78-81"];
m4_37 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                }))", span="83-93"];
m4_38 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.State)", span="76-76"];
m4_110 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="193-193"];
m4_111 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="string trimSql = @''\r\nwith cte as (\r\nselect row_number() over (order by Id desc) as row_num, [Key] from HangFire.List)\r\ndelete from cte where row_num not between @start and @end and [Key] = @key''", span="195-198"];
m4_112 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 }))", span="200-202"];
m4_113 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="193-193"];
m4_23 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="256-256"];
m4_143 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs", label="_commandQueue.Enqueue(action)", span="258-258"];
m4_144 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="256-256"];
m4_17 [cluster="Unk.EnlistTransaction", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.EnlistTransaction", span=""];
m4_18 [cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m4_15 [cluster="TransactionScope.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry TransactionScope.cstr", span=""];
m4_76 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="146-146"];
m4_77 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="148-150"];
m4_78 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="146-146"];
m4_70 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139"];
m4_71 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 }))", span="141-143"];
m4_72 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139"];
m4_19 [cluster="Unk.Complete", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Complete", span=""];
m4_27 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m4_92 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="172-172"];
m4_93 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="174-176"];
m4_94 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="172-172"];
m4_20 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="62-62"];
m4_21 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId }))", span="64-66"];
m4_22 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="62-62"];
m4_104 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="186-186"];
m4_105 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="188-190"];
m4_106 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="186-186"];
m4_8 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="45-45"];
m4_9 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="var transaction = new TransactionScope(\r\n                TransactionScopeOption.Required,\r\n                new TransactionOptions { IsolationLevel = IsolationLevel.Serializable })", span="47-49"];
m4_10 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="_connection.EnlistTransaction(Transaction.Current)", span="51-51"];
m4_13 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="transaction.Complete()", span="58-58"];
m4_11 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label=_commandQueue, span="53-53"];
m4_12 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="command(_connection)", span="55-55"];
m4_14 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="45-45"];
m4_16 [cluster="TransactionOptions.cstr", file="SqlServerWriteOnlyTransaction.cs", label="Entry TransactionOptions.cstr", span=""];
m4_137 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="249-249"];
m4_139 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="249-249"];
m4_42 [cluster="HangFire.States.State.SerializeData()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.States.State.SerializeData()", span="27-27"];
m4_140 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="251-253"];
m4_25 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId })", span="64-66"];
m4_24 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="64-66"];
m4_26 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="64-66"];
m4_33 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId })", span="71-73"];
m4_32 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="71-73"];
m4_34 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="71-73"];
m4_40 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                })", span="83-93"];
m4_39 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="83-93"];
m4_41 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="83-93"];
m4_49 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                })", span="102-111"];
m4_48 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="102-111"];
m4_50 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="102-111"];
m4_56 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                enqueueJobSql,\r\n                new { jobId = jobId, queue = queue })", span="120-122"];
m4_55 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="120-122"];
m4_57 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="120-122"];
m4_62 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 })", span="127-129"];
m4_61 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="127-129"];
m4_63 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="127-129"];
m4_68 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="134-136"];
m4_67 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="134-136"];
m4_69 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="134-136"];
m4_74 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 })", span="141-143"];
m4_73 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="141-143"];
m4_75 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="141-143"];
m4_80 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="148-150"];
m4_79 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="148-150"];
m4_81 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="148-150"];
m4_90 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                addSql,\r\n                new { key, value, score })", span="167-169"];
m4_89 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="167-169"];
m4_91 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="167-169"];
m4_96 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="174-176"];
m4_95 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="174-176"];
m4_97 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="174-176"];
m4_102 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value)'',\r\n                new { key, value })", span="181-183"];
m4_101 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="181-183"];
m4_103 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="181-183"];
m4_108 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="188-190"];
m4_107 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="188-190"];
m4_109 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="188-190"];
m4_115 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 })", span="200-202"];
m4_114 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="200-202"];
m4_116 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="200-202"];
m4_122 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="216-224"];
m4_126 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="216-224"];
m4_132 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="238-246"];
m4_136 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="238-246"];
m4_142 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="251-253"];
m4_127 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementValue(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementValue(string)", span="227-227"];
m4_131 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementValue(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementValue(string)", span="227-227"];
m4_0 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34"];
m4_1 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="SqlServerWriteOnlyTransaction.cs", label="connection == null", span="36-36"];
m4_3 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="SqlServerWriteOnlyTransaction.cs", label="_connection = connection", span="38-38"];
m4_2 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''connection'');", span="36-36"];
m4_4 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34"];
m4_117 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementValue(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementValue(string)", span="205-205"];
m4_121 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementValue(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementValue(string)", span="205-205"];
m4_43 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m4_28 [cluster="Unk.Execute", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.Execute", span=""];
m4_51 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="114-114"];
m4_52 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="string enqueueJobSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@jobId, @queue)''", span="116-118"];
m4_53 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                enqueueJobSql,\r\n                new { jobId = jobId, queue = queue }))", span="120-122"];
m4_54 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="114-114"];
m4_58 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125"];
m4_59 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 }))", span="127-129"];
m4_60 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125"];
m4_29 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="69-69"];
m4_30 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs", label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId }))", span="71-73"];
m4_31 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="69-69"];
m4_6 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", span="41-41"];
m4_7 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", span="41-41"];
m4_146 [file="SqlServerWriteOnlyTransaction.cs", label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", span=""];
m4_147 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_148 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m4_149 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_150 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_151 [file="SqlServerWriteOnlyTransaction.cs", label="HangFire.States.State", span=""];
m4_152 [file="SqlServerWriteOnlyTransaction.cs", label=addAndSetStateSql, span=""];
m4_153 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_154 [file="SqlServerWriteOnlyTransaction.cs", label="HangFire.States.State", span=""];
m4_155 [file="SqlServerWriteOnlyTransaction.cs", label=addStateSql, span=""];
m4_156 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_157 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_158 [file="SqlServerWriteOnlyTransaction.cs", label=enqueueJobSql, span=""];
m4_159 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_160 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_161 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m4_162 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_163 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_164 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m4_165 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_166 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_167 [file="SqlServerWriteOnlyTransaction.cs", label=double, span=""];
m4_168 [file="SqlServerWriteOnlyTransaction.cs", label=addSql, span=""];
m4_169 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_170 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_171 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_172 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_173 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_174 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_175 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_176 [file="SqlServerWriteOnlyTransaction.cs", label=int, span=""];
m4_177 [file="SqlServerWriteOnlyTransaction.cs", label=int, span=""];
m4_178 [file="SqlServerWriteOnlyTransaction.cs", label=trimSql, span=""];
m4_179 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_180 [file="SqlServerWriteOnlyTransaction.cs", label=updateSql, span=""];
m4_181 [file="SqlServerWriteOnlyTransaction.cs", label=insertSql, span=""];
m4_182 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_183 [file="SqlServerWriteOnlyTransaction.cs", label=updateSql, span=""];
m4_184 [file="SqlServerWriteOnlyTransaction.cs", label=insertSql, span=""];
m4_185 [file="SqlServerWriteOnlyTransaction.cs", label=string, span=""];
m4_186 [file="SqlServerWriteOnlyTransaction.cs", label="System.TimeSpan", span=""];
m4_98 -> m4_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_99 -> m4_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_85 -> m4_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_85 -> m4_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_86 -> m4_90  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m4_87 -> m4_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_65 -> m4_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_46 -> m4_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_37 -> m4_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_112 -> m4_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_77 -> m4_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_71 -> m4_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_93 -> m4_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_21 -> m4_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_105 -> m4_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_9 -> m4_13  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m4_53 -> m4_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_59 -> m4_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_30 -> m4_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_146 -> m4_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m4_146 -> m4_11  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m4_146 -> m4_12  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m4_146 -> m4_83  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m4_146 -> m4_87  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m4_146 -> m4_99  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m4_146 -> m4_143  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m4_165 -> m4_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_166 -> m4_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_167 -> m4_90  [color=darkseagreen4, key=1, label=double, style=dashed];
m4_168 -> m4_90  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m4_171 -> m4_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_172 -> m4_102  [color=darkseagreen4, key=1, label=string, style=dashed];
}
