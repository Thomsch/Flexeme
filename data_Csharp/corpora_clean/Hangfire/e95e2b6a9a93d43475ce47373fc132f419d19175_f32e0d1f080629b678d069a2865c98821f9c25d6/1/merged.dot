digraph  {
n436 [label="HangFire.SqlServer.Tests.WriteTransactionFacts", span=""];
n437 [label=arrangeSql, span=""];
n438 [label=jobId, span=""];
n439 [label=arrangeSql, span=""];
n440 [label=jobId, span=""];
n441 [label=arrangeSql, span=""];
n442 [label=jobId, span=""];
n443 [label=state, span=""];
n444 [label=arrangeSql, span=""];
n445 [label=jobId, span=""];
n446 [label=state, span=""];
n0 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="15-15", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()"];
n1 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null))", span="17-18", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()"];
n2 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="15-15", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()"];
n3 [label="Entry Unk.>", span="", cluster="Unk.>"];
n4 [label="Entry lambda expression", span="18-18", cluster="lambda expression"];
n5 [label="new SqlServerWriteOnlyTransaction(null)", span="18-18", cluster="lambda expression"];
n6 [label="Exit lambda expression", span="18-18", cluster="lambda expression"];
n7 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)"];
n8 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", span="22-22", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()"];
n9 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="24-27", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()"];
n10 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="29-41", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", color=red, community=0];
n14 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="31-31", cluster="lambda expression", color=red, community=0];
n15 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="32-32", cluster="lambda expression", color=red, community=0];
n11 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", span="22-22", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()"];
n12 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection"];
n13 [label="Entry lambda expression", span="29-41", cluster="lambda expression"];
n16 [label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="34-34", cluster="lambda expression", color=red, community=0];
n17 [label="var job = GetTestJob(sql, jobId)", span="36-36", cluster="lambda expression", color=red, community=0];
n19 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="39-39", cluster="lambda expression"];
n22 [label="Entry Unk.Query", span="", cluster="Unk.Query"];
n23 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
n24 [label="Entry Unk.ToString", span="", cluster="Unk.ToString"];
n31 [label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="34-34", cluster="lambda expression", color=red, community=0];
n25 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="536-536", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)"];
n30 [label="Entry lambda expression", span="34-34", cluster="lambda expression"];
n18 [label="Assert.True(DateTime.UtcNow < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddDays(1))", span="37-37", cluster="lambda expression"];
n26 [label="Entry Unk.GetTestJob", span="", cluster="Unk.GetTestJob"];
n27 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)"];
n28 [label="Entry Unk.True", span="", cluster="Unk.True"];
n20 [label="Assert.Null(anotherJob.ExpireAt)", span="40-40", cluster="lambda expression"];
n21 [label="Exit lambda expression", span="29-41", cluster="lambda expression"];
n29 [label="Entry Unk.Null", span="", cluster="Unk.Null"];
n32 [label="Exit lambda expression", span="34-34", cluster="lambda expression"];
n33 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)"];
n34 [label="Entry Unk.ExpireJob", span="", cluster="Unk.ExpireJob"];
n35 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="45-45", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()"];
n36 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="47-50", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", color=red, community=0];
n37 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="52-64", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", color=red, community=0];
n40 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54", cluster="lambda expression"];
n41 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="55-55", cluster="lambda expression"];
n38 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="45-45", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()"];
n39 [label="Entry lambda expression", span="52-64", cluster="lambda expression"];
n42 [label="Commit(sql, x => x.PersistJob(jobId))", span="57-57", cluster="lambda expression", color=red, community=0];
n43 [label="var job = GetTestJob(sql, jobId)", span="59-59", cluster="lambda expression"];
n45 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="62-62", cluster="lambda expression"];
n50 [label="x.PersistJob(jobId)", span="57-57", cluster="lambda expression", color=red, community=0];
n49 [label="Entry lambda expression", span="57-57", cluster="lambda expression"];
n44 [label="Assert.Null(job.ExpireAt)", span="60-60", cluster="lambda expression"];
n46 [label="Assert.NotNull(anotherJob.ExpireAt)", span="63-63", cluster="lambda expression"];
n47 [label="Exit lambda expression", span="52-64", cluster="lambda expression"];
n48 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull"];
n51 [label="Exit lambda expression", span="57-57", cluster="lambda expression"];
n52 [label="Entry Unk.PersistJob", span="", cluster="Unk.PersistJob"];
n53 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="68-68", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()"];
n54 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="70-73", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", color=red, community=0];
n55 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<State>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n                state.Object.Reason = ''Reason'';\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="75-102", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()"];
n58 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="77-77", cluster="lambda expression"];
n59 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="78-78", cluster="lambda expression"];
n56 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="68-68", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()"];
n57 [label="Entry lambda expression", span="75-102", cluster="lambda expression"];
n64 [label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="86-86", cluster="lambda expression"];
n65 [label="var job = GetTestJob(sql, jobId)", span="88-88", cluster="lambda expression"];
n68 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="92-92", cluster="lambda expression"];
n71 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="96-96", cluster="lambda expression"];
n91 [label="x.SetJobState(jobId, state.Object)", span="86-86", cluster="lambda expression"];
n72 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="97-97", cluster="lambda expression"];
n60 [label="var state = new Mock<State>()", span="80-80", cluster="lambda expression"];
n61 [label="state.Setup(x => x.Name).Returns(''State'')", span="81-81", cluster="lambda expression"];
n78 [label="Entry Mock<State>.cstr", span="", cluster="Mock<State>.cstr"];
n62 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="82-83", cluster="lambda expression"];
n63 [label="state.Object.Reason = ''Reason''", span="84-84", cluster="lambda expression"];
n79 [label="Entry Unk.Setup", span="", cluster="Unk.Setup"];
n80 [label="Entry Unk.Returns", span="", cluster="Unk.Returns"];
n83 [label="Entry lambda expression", span="81-81", cluster="lambda expression"];
n81 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
n86 [label="Entry lambda expression", span="82-82", cluster="lambda expression"];
n90 [label="Entry lambda expression", span="86-86", cluster="lambda expression"];
n66 [label="Assert.Equal(''State'', job.StateName)", span="89-89", cluster="lambda expression"];
n67 [label="Assert.NotNull(job.StateId)", span="90-90", cluster="lambda expression"];
n82 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n69 [label="Assert.Null(anotherJob.StateName)", span="93-93", cluster="lambda expression"];
n70 [label="Assert.Null(anotherJob.StateId)", span="94-94", cluster="lambda expression"];
n73 [label="Assert.Equal(''State'', jobState.Name)", span="98-98", cluster="lambda expression"];
n74 [label="Assert.Equal(''Reason'', jobState.Reason)", span="99-99", cluster="lambda expression"];
n75 [label="Assert.NotNull(jobState.CreatedAt)", span="100-100", cluster="lambda expression"];
n76 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="101-101", cluster="lambda expression"];
n77 [label="Exit lambda expression", span="75-102", cluster="lambda expression"];
n84 [label="x.Name", span="81-81", cluster="lambda expression"];
n85 [label="Exit lambda expression", span="81-81", cluster="lambda expression"];
n87 [label="x.SerializeData()", span="82-82", cluster="lambda expression"];
n88 [label="Exit lambda expression", span="82-82", cluster="lambda expression"];
n89 [label="Entry Unk.SerializeData", span="", cluster="Unk.SerializeData"];
n92 [label="Exit lambda expression", span="86-86", cluster="lambda expression"];
n93 [label="Entry Unk.SetJobState", span="", cluster="Unk.SetJobState"];
n94 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="106-106", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()"];
n95 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="108-111", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()"];
n96 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<State>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n                state.Object.Reason = ''Reason'';\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="113-135", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()"];
n99 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="115-115", cluster="lambda expression"];
n97 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="106-106", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()"];
n98 [label="Entry lambda expression", span="113-135", cluster="lambda expression"];
n104 [label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="123-123", cluster="lambda expression"];
n105 [label="var job = GetTestJob(sql, jobId)", span="125-125", cluster="lambda expression"];
n108 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="129-129", cluster="lambda expression"];
n100 [label="var state = new Mock<State>()", span="117-117", cluster="lambda expression"];
n122 [label="x.AddJobState(jobId, state.Object)", span="123-123", cluster="lambda expression"];
n109 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="130-130", cluster="lambda expression"];
n101 [label="state.Setup(x => x.Name).Returns(''State'')", span="118-118", cluster="lambda expression"];
n102 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="119-120", cluster="lambda expression"];
n103 [label="state.Object.Reason = ''Reason''", span="121-121", cluster="lambda expression"];
n115 [label="Entry lambda expression", span="118-118", cluster="lambda expression"];
n118 [label="Entry lambda expression", span="119-119", cluster="lambda expression"];
n121 [label="Entry lambda expression", span="123-123", cluster="lambda expression"];
n106 [label="Assert.Null(job.StateName)", span="126-126", cluster="lambda expression"];
n107 [label="Assert.Null(job.StateId)", span="127-127", cluster="lambda expression"];
n110 [label="Assert.Equal(''State'', jobState.Name)", span="131-131", cluster="lambda expression"];
n111 [label="Assert.Equal(''Reason'', jobState.Reason)", span="132-132", cluster="lambda expression"];
n112 [label="Assert.NotNull(jobState.CreatedAt)", span="133-133", cluster="lambda expression"];
n113 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="134-134", cluster="lambda expression"];
n114 [label="Exit lambda expression", span="113-135", cluster="lambda expression"];
n116 [label="x.Name", span="118-118", cluster="lambda expression"];
n117 [label="Exit lambda expression", span="118-118", cluster="lambda expression"];
n119 [label="x.SerializeData()", span="119-119", cluster="lambda expression"];
n120 [label="Exit lambda expression", span="119-119", cluster="lambda expression"];
n123 [label="Exit lambda expression", span="123-123", cluster="lambda expression"];
n124 [label="Entry Unk.AddJobState", span="", cluster="Unk.AddJobState"];
n125 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", span="139-139", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()"];
n126 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.JobQueue'').Single();\r\n                Assert.Equal(''1'', record.JobId.ToString());\r\n                Assert.Equal(''default'', record.Queue);\r\n                Assert.Null(record.FetchedAt);\r\n            })", span="141-149", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()"];
n127 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", span="139-139", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()"];
n128 [label="Entry lambda expression", span="141-149", cluster="lambda expression"];
n129 [label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="143-143", cluster="lambda expression"];
n130 [label="var record = sql.Query(''select * from HangFire.JobQueue'').Single()", span="145-145", cluster="lambda expression"];
n135 [label="Entry lambda expression", span="143-143", cluster="lambda expression"];
n131 [label="Assert.Equal(''1'', record.JobId.ToString())", span="146-146", cluster="lambda expression"];
n132 [label="Assert.Equal(''default'', record.Queue)", span="147-147", cluster="lambda expression"];
n133 [label="Assert.Null(record.FetchedAt)", span="148-148", cluster="lambda expression"];
n134 [label="Exit lambda expression", span="141-149", cluster="lambda expression"];
n136 [label="x.AddToQueue(''default'', ''1'')", span="143-143", cluster="lambda expression"];
n137 [label="Exit lambda expression", span="143-143", cluster="lambda expression"];
n138 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="114-114", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)"];
n139 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", span="152-152", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)"];
n140 [label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="154-156", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)"];
n141 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", span="152-152", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)"];
n142 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="160-160", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()"];
n143 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n            })", span="162-170", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()"];
n144 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="160-160", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()"];
n145 [label="Entry lambda expression", span="162-170", cluster="lambda expression"];
n146 [label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="164-164", cluster="lambda expression"];
n147 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="166-166", cluster="lambda expression"];
n151 [label="Entry lambda expression", span="164-164", cluster="lambda expression"];
n148 [label="Assert.Equal(''my-key'', record.Key)", span="168-168", cluster="lambda expression"];
n149 [label="Assert.Equal(1, record.Value)", span="169-169", cluster="lambda expression"];
n150 [label="Exit lambda expression", span="162-170", cluster="lambda expression"];
n152 [label="x.IncrementCounter(''my-key'')", span="164-164", cluster="lambda expression"];
n153 [label="Exit lambda expression", span="164-164", cluster="lambda expression"];
n154 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)"];
n155 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="174-174", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()"];
n156 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="176-187", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()"];
n157 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="174-174", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()"];
n158 [label="Entry lambda expression", span="176-187", cluster="lambda expression"];
n159 [label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="178-182", cluster="lambda expression"];
n160 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="184-184", cluster="lambda expression"];
n163 [label="Entry lambda expression", span="178-182", cluster="lambda expression"];
n161 [label="Assert.Equal(2, recordCount)", span="186-186", cluster="lambda expression"];
n162 [label="Exit lambda expression", span="176-187", cluster="lambda expression"];
n164 [label="x.IncrementCounter(''my-key'')", span="180-180", cluster="lambda expression"];
n165 [label="x.IncrementCounter(''my-key'')", span="181-181", cluster="lambda expression"];
n166 [label="Exit lambda expression", span="178-182", cluster="lambda expression"];
n167 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="191-191", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()"];
n168 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n            })", span="193-201", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()"];
n169 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="191-191", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()"];
n170 [label="Entry lambda expression", span="193-201", cluster="lambda expression"];
n171 [label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="195-195", cluster="lambda expression"];
n172 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="197-197", cluster="lambda expression"];
n176 [label="Entry lambda expression", span="195-195", cluster="lambda expression"];
n173 [label="Assert.Equal(''my-key'', record.Key)", span="199-199", cluster="lambda expression"];
n174 [label="Assert.Equal(-1, record.Value)", span="200-200", cluster="lambda expression"];
n175 [label="Exit lambda expression", span="193-201", cluster="lambda expression"];
n177 [label="x.DecrementCounter(''my-key'')", span="195-195", cluster="lambda expression"];
n178 [label="Exit lambda expression", span="195-195", cluster="lambda expression"];
n179 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)"];
n180 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="205-205", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()"];
n181 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="207-218", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()"];
n182 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="205-205", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()"];
n183 [label="Entry lambda expression", span="207-218", cluster="lambda expression"];
n184 [label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="209-213", cluster="lambda expression"];
n185 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="215-215", cluster="lambda expression"];
n188 [label="Entry lambda expression", span="209-213", cluster="lambda expression"];
n186 [label="Assert.Equal(2, recordCount)", span="217-217", cluster="lambda expression"];
n187 [label="Exit lambda expression", span="207-218", cluster="lambda expression"];
n189 [label="x.DecrementCounter(''my-key'')", span="211-211", cluster="lambda expression"];
n190 [label="x.DecrementCounter(''my-key'')", span="212-212", cluster="lambda expression"];
n191 [label="Exit lambda expression", span="209-213", cluster="lambda expression"];
n192 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="222-222", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()"];
n193 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="224-233", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()"];
n194 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="222-222", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()"];
n195 [label="Entry lambda expression", span="224-233", cluster="lambda expression"];
n196 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="226-226", cluster="lambda expression"];
n197 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="228-228", cluster="lambda expression"];
n202 [label="Entry lambda expression", span="226-226", cluster="lambda expression"];
n198 [label="Assert.Equal(''my-key'', record.Key)", span="230-230", cluster="lambda expression"];
n199 [label="Assert.Equal(''my-value'', record.Value)", span="231-231", cluster="lambda expression"];
n200 [label="Assert.Equal(0.0, record.Score, 2)", span="232-232", cluster="lambda expression"];
n201 [label="Exit lambda expression", span="224-233", cluster="lambda expression"];
n203 [label="x.AddToSet(''my-key'', ''my-value'')", span="226-226", cluster="lambda expression"];
n204 [label="Exit lambda expression", span="226-226", cluster="lambda expression"];
n205 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)"];
n206 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="237-237", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()"];
n207 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="239-250", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()"];
n208 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="237-237", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()"];
n209 [label="Entry lambda expression", span="239-250", cluster="lambda expression"];
n210 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="241-245", cluster="lambda expression"];
n211 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="247-247", cluster="lambda expression"];
n214 [label="Entry lambda expression", span="241-245", cluster="lambda expression"];
n212 [label="Assert.Equal(2, recordCount)", span="249-249", cluster="lambda expression"];
n213 [label="Exit lambda expression", span="239-250", cluster="lambda expression"];
n215 [label="x.AddToSet(''my-key'', ''my-value'')", span="243-243", cluster="lambda expression"];
n216 [label="x.AddToSet(''my-key'', ''another-value'')", span="244-244", cluster="lambda expression"];
n217 [label="Exit lambda expression", span="241-245", cluster="lambda expression"];
n218 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="254-254", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()"];
n219 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="256-267", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()"];
n220 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="254-254", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()"];
n221 [label="Entry lambda expression", span="256-267", cluster="lambda expression"];
n222 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="258-262", cluster="lambda expression"];
n223 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="264-264", cluster="lambda expression"];
n226 [label="Entry lambda expression", span="258-262", cluster="lambda expression"];
n224 [label="Assert.Equal(1, recordCount)", span="266-266", cluster="lambda expression"];
n225 [label="Exit lambda expression", span="256-267", cluster="lambda expression"];
n227 [label="x.AddToSet(''my-key'', ''my-value'')", span="260-260", cluster="lambda expression"];
n228 [label="x.AddToSet(''my-key'', ''my-value'')", span="261-261", cluster="lambda expression"];
n229 [label="Exit lambda expression", span="258-262", cluster="lambda expression"];
n230 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="271-271", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()"];
n231 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="273-282", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()"];
n232 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="271-271", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()"];
n233 [label="Entry lambda expression", span="273-282", cluster="lambda expression"];
n234 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="275-275", cluster="lambda expression"];
n235 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="277-277", cluster="lambda expression"];
n240 [label="Entry lambda expression", span="275-275", cluster="lambda expression"];
n236 [label="Assert.Equal(''my-key'', record.Key)", span="279-279", cluster="lambda expression"];
n237 [label="Assert.Equal(''my-value'', record.Value)", span="280-280", cluster="lambda expression"];
n238 [label="Assert.Equal(3.2, record.Score, 3)", span="281-281", cluster="lambda expression"];
n239 [label="Exit lambda expression", span="273-282", cluster="lambda expression"];
n241 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="275-275", cluster="lambda expression"];
n242 [label="Exit lambda expression", span="275-275", cluster="lambda expression"];
n243 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)"];
n244 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="286-286", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()"];
n245 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="288-299", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()"];
n246 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="286-286", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()"];
n247 [label="Entry lambda expression", span="288-299", cluster="lambda expression"];
n248 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="290-294", cluster="lambda expression"];
n249 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="296-296", cluster="lambda expression"];
n252 [label="Entry lambda expression", span="290-294", cluster="lambda expression"];
n250 [label="Assert.Equal(3.2, record.Score, 3)", span="298-298", cluster="lambda expression"];
n251 [label="Exit lambda expression", span="288-299", cluster="lambda expression"];
n253 [label="x.AddToSet(''my-key'', ''my-value'')", span="292-292", cluster="lambda expression"];
n254 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="293-293", cluster="lambda expression"];
n255 [label="Exit lambda expression", span="290-294", cluster="lambda expression"];
n256 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="303-303", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()"];
n257 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="305-316", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()"];
n258 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="303-303", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()"];
n259 [label="Entry lambda expression", span="305-316", cluster="lambda expression"];
n260 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="307-311", cluster="lambda expression"];
n261 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="313-313", cluster="lambda expression"];
n264 [label="Entry lambda expression", span="307-311", cluster="lambda expression"];
n262 [label="Assert.Equal(0, recordCount)", span="315-315", cluster="lambda expression"];
n263 [label="Exit lambda expression", span="305-316", cluster="lambda expression"];
n265 [label="x.AddToSet(''my-key'', ''my-value'')", span="309-309", cluster="lambda expression"];
n266 [label="x.RemoveFromSet(''my-key'', ''my-value'')", span="310-310", cluster="lambda expression"];
n267 [label="Exit lambda expression", span="307-311", cluster="lambda expression"];
n268 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="172-172", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)"];
n269 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="320-320", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()"];
n270 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="322-333", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()"];
n271 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="320-320", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()"];
n272 [label="Entry lambda expression", span="322-333", cluster="lambda expression"];
n273 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="324-328", cluster="lambda expression"];
n274 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="330-330", cluster="lambda expression"];
n277 [label="Entry lambda expression", span="324-328", cluster="lambda expression"];
n275 [label="Assert.Equal(1, recordCount)", span="332-332", cluster="lambda expression"];
n276 [label="Exit lambda expression", span="322-333", cluster="lambda expression"];
n278 [label="x.AddToSet(''my-key'', ''my-value'')", span="326-326", cluster="lambda expression"];
n279 [label="x.RemoveFromSet(''my-key'', ''different-value'')", span="327-327", cluster="lambda expression"];
n280 [label="Exit lambda expression", span="324-328", cluster="lambda expression"];
n281 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="337-337", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()"];
n282 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="339-350", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()"];
n283 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="337-337", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()"];
n284 [label="Entry lambda expression", span="339-350", cluster="lambda expression"];
n285 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="341-345", cluster="lambda expression"];
n286 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="347-347", cluster="lambda expression"];
n289 [label="Entry lambda expression", span="341-345", cluster="lambda expression"];
n287 [label="Assert.Equal(1, recordCount)", span="349-349", cluster="lambda expression"];
n288 [label="Exit lambda expression", span="339-350", cluster="lambda expression"];
n290 [label="x.AddToSet(''my-key'', ''my-value'')", span="343-343", cluster="lambda expression"];
n291 [label="x.RemoveFromSet(''different-key'', ''my-value'')", span="344-344", cluster="lambda expression"];
n292 [label="Exit lambda expression", span="341-345", cluster="lambda expression"];
n293 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="354-354", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()"];
n294 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="356-364", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()"];
n295 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="354-354", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()"];
n296 [label="Entry lambda expression", span="356-364", cluster="lambda expression"];
n297 [label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="358-358", cluster="lambda expression"];
n298 [label="var record = sql.Query(''select * from HangFire.List'').Single()", span="360-360", cluster="lambda expression"];
n302 [label="Entry lambda expression", span="358-358", cluster="lambda expression"];
n299 [label="Assert.Equal(''my-key'', record.Key)", span="362-362", cluster="lambda expression"];
n300 [label="Assert.Equal(''my-value'', record.Value)", span="363-363", cluster="lambda expression"];
n301 [label="Exit lambda expression", span="356-364", cluster="lambda expression"];
n303 [label="x.InsertToList(''my-key'', ''my-value'')", span="358-358", cluster="lambda expression"];
n304 [label="Exit lambda expression", span="358-358", cluster="lambda expression"];
n305 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="179-179", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)"];
n306 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="368-368", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()"];
n307 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="370-381", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()"];
n308 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="368-368", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()"];
n309 [label="Entry lambda expression", span="370-381", cluster="lambda expression"];
n310 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="372-376", cluster="lambda expression"];
n311 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="378-378", cluster="lambda expression"];
n314 [label="Entry lambda expression", span="372-376", cluster="lambda expression"];
n312 [label="Assert.Equal(2, recordCount)", span="380-380", cluster="lambda expression"];
n313 [label="Exit lambda expression", span="370-381", cluster="lambda expression"];
n315 [label="x.InsertToList(''my-key'', ''my-value'')", span="374-374", cluster="lambda expression"];
n316 [label="x.InsertToList(''my-key'', ''my-value'')", span="375-375", cluster="lambda expression"];
n317 [label="Exit lambda expression", span="372-376", cluster="lambda expression"];
n318 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="385-385", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()"];
n319 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="387-399", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()"];
n320 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="385-385", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()"];
n321 [label="Entry lambda expression", span="387-399", cluster="lambda expression"];
n322 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="389-394", cluster="lambda expression"];
n323 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="396-396", cluster="lambda expression"];
n326 [label="Entry lambda expression", span="389-394", cluster="lambda expression"];
n324 [label="Assert.Equal(0, recordCount)", span="398-398", cluster="lambda expression"];
n325 [label="Exit lambda expression", span="387-399", cluster="lambda expression"];
n327 [label="x.InsertToList(''my-key'', ''my-value'')", span="391-391", cluster="lambda expression"];
n328 [label="x.InsertToList(''my-key'', ''my-value'')", span="392-392", cluster="lambda expression"];
n329 [label="x.RemoveFromList(''my-key'', ''my-value'')", span="393-393", cluster="lambda expression"];
n330 [label="Exit lambda expression", span="389-394", cluster="lambda expression"];
n331 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="186-186", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)"];
n332 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="403-403", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()"];
n333 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="405-416", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()"];
n334 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="403-403", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()"];
n335 [label="Entry lambda expression", span="405-416", cluster="lambda expression"];
n336 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="407-411", cluster="lambda expression"];
n337 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="413-413", cluster="lambda expression"];
n340 [label="Entry lambda expression", span="407-411", cluster="lambda expression"];
n338 [label="Assert.Equal(1, recordCount)", span="415-415", cluster="lambda expression"];
n339 [label="Exit lambda expression", span="405-416", cluster="lambda expression"];
n341 [label="x.InsertToList(''my-key'', ''my-value'')", span="409-409", cluster="lambda expression"];
n342 [label="x.RemoveFromList(''my-key'', ''different-value'')", span="410-410", cluster="lambda expression"];
n343 [label="Exit lambda expression", span="407-411", cluster="lambda expression"];
n344 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="420-420", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()"];
n345 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="422-433", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()"];
n346 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="420-420", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()"];
n347 [label="Entry lambda expression", span="422-433", cluster="lambda expression"];
n348 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="424-428", cluster="lambda expression"];
n349 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="430-430", cluster="lambda expression"];
n352 [label="Entry lambda expression", span="424-428", cluster="lambda expression"];
n350 [label="Assert.Equal(1, recordCount)", span="432-432", cluster="lambda expression"];
n351 [label="Exit lambda expression", span="422-433", cluster="lambda expression"];
n353 [label="x.InsertToList(''my-key'', ''my-value'')", span="426-426", cluster="lambda expression"];
n354 [label="x.RemoveFromList(''different-key'', ''my-value'')", span="427-427", cluster="lambda expression"];
n355 [label="Exit lambda expression", span="424-428", cluster="lambda expression"];
n356 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="437-437", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()"];
n357 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="439-455", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()"];
n358 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="437-437", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()"];
n359 [label="Entry lambda expression", span="439-455", cluster="lambda expression"];
n360 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="441-448", cluster="lambda expression"];
n361 [label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="450-450", cluster="lambda expression"];
n367 [label="Entry lambda expression", span="441-448", cluster="lambda expression"];
n362 [label="Assert.Equal(2, records.Length)", span="452-452", cluster="lambda expression"];
n366 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
n363 [label="Assert.Equal(''1'', records[0].Value)", span="453-453", cluster="lambda expression"];
n364 [label="Assert.Equal(''2'', records[1].Value)", span="454-454", cluster="lambda expression"];
n365 [label="Exit lambda expression", span="439-455", cluster="lambda expression"];
n368 [label="x.InsertToList(''my-key'', ''0'')", span="443-443", cluster="lambda expression"];
n369 [label="x.InsertToList(''my-key'', ''1'')", span="444-444", cluster="lambda expression"];
n370 [label="x.InsertToList(''my-key'', ''2'')", span="445-445", cluster="lambda expression"];
n371 [label="x.InsertToList(''my-key'', ''3'')", span="446-446", cluster="lambda expression"];
n372 [label="x.TrimList(''my-key'', 1, 2)", span="447-447", cluster="lambda expression"];
n373 [label="Exit lambda expression", span="441-448", cluster="lambda expression"];
n374 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="193-193", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)"];
n375 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="459-459", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()"];
n376 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="461-474", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()"];
n377 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="459-459", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()"];
n378 [label="Entry lambda expression", span="461-474", cluster="lambda expression"];
n379 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="463-469", cluster="lambda expression"];
n380 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="471-471", cluster="lambda expression"];
n383 [label="Entry lambda expression", span="463-469", cluster="lambda expression"];
n381 [label="Assert.Equal(2, recordCount)", span="473-473", cluster="lambda expression"];
n382 [label="Exit lambda expression", span="461-474", cluster="lambda expression"];
n384 [label="x.InsertToList(''my-key'', ''0'')", span="465-465", cluster="lambda expression"];
n385 [label="x.InsertToList(''my-key'', ''1'')", span="466-466", cluster="lambda expression"];
n386 [label="x.InsertToList(''my-key'', ''2'')", span="467-467", cluster="lambda expression"];
n387 [label="x.TrimList(''my-key'', 1, 100)", span="468-468", cluster="lambda expression"];
n388 [label="Exit lambda expression", span="463-469", cluster="lambda expression"];
n389 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="478-478", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()"];
n390 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="480-491", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()"];
n391 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="478-478", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()"];
n392 [label="Entry lambda expression", span="480-491", cluster="lambda expression"];
n393 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="482-486", cluster="lambda expression"];
n394 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="488-488", cluster="lambda expression"];
n397 [label="Entry lambda expression", span="482-486", cluster="lambda expression"];
n395 [label="Assert.Equal(0, recordCount)", span="490-490", cluster="lambda expression"];
n396 [label="Exit lambda expression", span="480-491", cluster="lambda expression"];
n398 [label="x.InsertToList(''my-key'', ''0'')", span="484-484", cluster="lambda expression"];
n399 [label="x.TrimList(''my-key'', 1, 100)", span="485-485", cluster="lambda expression"];
n400 [label="Exit lambda expression", span="482-486", cluster="lambda expression"];
n401 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="495-495", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()"];
n402 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="497-508", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()"];
n403 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="495-495", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()"];
n404 [label="Entry lambda expression", span="497-508", cluster="lambda expression"];
n405 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="499-503", cluster="lambda expression"];
n406 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="505-505", cluster="lambda expression"];
n409 [label="Entry lambda expression", span="499-503", cluster="lambda expression"];
n407 [label="Assert.Equal(0, recordCount)", span="507-507", cluster="lambda expression"];
n408 [label="Exit lambda expression", span="497-508", cluster="lambda expression"];
n410 [label="x.InsertToList(''my-key'', ''0'')", span="501-501", cluster="lambda expression"];
n411 [label="x.TrimList(''my-key'', 1, 0)", span="502-502", cluster="lambda expression"];
n412 [label="Exit lambda expression", span="499-503", cluster="lambda expression"];
n413 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="512-512", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()"];
n414 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="514-525", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()"];
n415 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="512-512", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()"];
n416 [label="Entry lambda expression", span="514-525", cluster="lambda expression"];
n417 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="516-520", cluster="lambda expression"];
n418 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="522-522", cluster="lambda expression"];
n421 [label="Entry lambda expression", span="516-520", cluster="lambda expression"];
n419 [label="Assert.Equal(1, recordCount)", span="524-524", cluster="lambda expression"];
n420 [label="Exit lambda expression", span="514-525", cluster="lambda expression"];
n422 [label="x.InsertToList(''my-key'', ''0'')", span="518-518", cluster="lambda expression"];
n423 [label="x.TrimList(''another-key'', 1, 0)", span="519-519", cluster="lambda expression"];
n424 [label="Exit lambda expression", span="516-520", cluster="lambda expression"];
n425 [label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="528-528", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)"];
n426 [label="var connection = ConnectionUtils.CreateConnection()", span="530-530", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)"];
n427 [label="action(connection)", span="532-532", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)"];
n429 [label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()"];
n428 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="528-528", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)"];
n430 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
n431 [label="var transaction = new SqlServerWriteOnlyTransaction(connection)", span="540-540", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)"];
n432 [label="action(transaction)", span="542-542", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)"];
n433 [label="transaction.Commit()", span="543-543", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)"];
n434 [label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="536-536", cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)"];
n435 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="45-45", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()"];
m0_0 [label="Entry Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", span="23-23", cluster="Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", file="BackgroundJobClientException.cs"];
m0_1 [label="Exit Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", span="23-23", cluster="Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", file="BackgroundJobClientException.cs"];
m1_12 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BackgroundJobClientExtensions.cs"];
m1_30 [label="Entry Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", span="85-85", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_42 [label="var parameters = Method.GetParameters()", span="89-89", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_50 [label="value = cancellationToken", span="101-101", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_43 [label="var result = new List<object>(Arguments.Length)", span="90-90", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_45 [label="i < parameters.Length", span="92-92", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_46 [label="var parameter = parameters[i]", span="94-94", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_44 [label="var i = 0", span="92-92", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_56 [label="result.Add(value)", span="131-131", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_58 [label="return result.ToArray();", span="134-134", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_47 [label="var argument = Arguments[i]", span="95-95", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_57 [label="i++", span="92-92", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_49 [label="typeof(IJobCancellationToken).GetTypeInfo().IsAssignableFrom(parameter.ParameterType.GetTypeInfo())", span="99-99", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_51 [label="value = argument != null\r\n                                ? JobHelper.FromJson(argument, parameter.ParameterType)\r\n                                : null", span="107-109", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_53 [label="parameter.ParameterType == typeof(object)", span="113-113", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_48 [label="object value", span="97-97", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_54 [label="value = argument", span="117-117", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_52 [label=Exception, span="111-111", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_55 [label="throw;", span="125-125", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_59 [label=Exception, span="136-136", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_60 [label="throw new JobPerformanceException(\r\n                    ''An exception occurred during arguments deserialization.'',\r\n                    ex);", span="138-140", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_61 [label="Exit Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", span="85-85", cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_15 [label="Entry Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", span="117-117", cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_29 [label="Entry Hangfire.Common.Job.Activate(Hangfire.JobActivator)", span="63-63", cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs"];
m1_32 [label="var instance = activator.ActivateJob(Type)", span="67-67", cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs"];
m1_33 [label="instance == null", span="69-69", cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs"];
m1_35 [label="return instance;", span="74-74", cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs"];
m1_34 [label="throw new InvalidOperationException($''JobActivator returned NULL instance of the '{Type}' type.'');", span="71-71", cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs"];
m1_36 [label=Exception, span="76-76", cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs"];
m1_37 [label="throw new JobPerformanceException(\r\n                    ''An exception occurred during job activation.'',\r\n                    ex);", span="78-80", cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs"];
m1_38 [label="Exit Hangfire.Common.Job.Activate(Hangfire.JobActivator)", span="63-63", cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs"];
m1_0 [label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="16-16", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_1 [label="type == null", span="18-18", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_2 [label="throw new ArgumentNullException(nameof(type));", span="18-18", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_3 [label="method == null", span="19-19", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_4 [label="throw new ArgumentNullException(nameof(method));", span="19-19", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_5 [label="arguments == null", span="20-20", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_6 [label="throw new ArgumentNullException(nameof(arguments));", span="20-20", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_7 [label="Validate(type, nameof(type), method, nameof(method), arguments.Length, nameof(arguments))", span="22-22", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_8 [label="Type = type", span="24-24", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_9 [label="Method = method", span="25-25", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_10 [label="Args = InvocationData.DeserializeArguments(method, arguments)", span="26-26", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_11 [label="Exit Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="16-16", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs"];
m1_16 [label="Entry Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", span="36-36", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_17 [label="activator == null", span="38-38", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_18 [label="throw new ArgumentNullException(nameof(activator));", span="38-38", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_19 [label="cancellationToken == null", span="39-39", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_20 [label="throw new ArgumentNullException(nameof(cancellationToken));", span="39-39", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_24 [label="instance = Activate(activator)", span="48-48", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_25 [label="var deserializedArguments = DeserializeArguments(cancellationToken)", span="51-51", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_26 [label="result = InvokeMethod(instance, deserializedArguments, cancellationToken.ShutdownToken)", span="52-52", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_21 [label="object instance = null", span="41-41", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_22 [label="object result", span="43-43", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_23 [label="!Method.IsStatic", span="46-46", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_27 [label="return result;", span="59-59", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_28 [label="Exit Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", span="36-36", cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_13 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="BackgroundJobClientExtensions.cs"];
m1_40 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="BackgroundJobClientExtensions.cs"];
m1_77 [label="Entry System.Reflection.MethodBase.Invoke(object, object[])", span="0-0", cluster="System.Reflection.MethodBase.Invoke(object, object[])", file="BackgroundJobClientExtensions.cs"];
m1_68 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()", file="BackgroundJobClientExtensions.cs"];
m1_39 [label="Entry Hangfire.JobActivator.ActivateJob(System.Type)", span="45-45", cluster="Hangfire.JobActivator.ActivateJob(System.Type)", file="BackgroundJobClientExtensions.cs"];
m1_64 [label="Entry System.Type.GetTypeInfo()", span="0-0", cluster="System.Type.GetTypeInfo()", file="BackgroundJobClientExtensions.cs"];
m1_63 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="BackgroundJobClientExtensions.cs"];
m1_31 [label="Entry Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", span="145-145", cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_69 [label="return Method.Invoke(instance, deserializedArguments);", span="149-149", cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_73 [label="ex.InnerException is OperationCanceledException &&\r\n                    shutdownToken.IsCancellationRequested", span="161-162", cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_70 [label=TargetInvocationException, span="151-151", cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_71 [label="ex.InnerException is JobAbortedException", span="153-153", cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_72 [label="throw ex.InnerException;", span="158-158", cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_74 [label="throw ex.InnerException;", span="168-168", cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_75 [label="throw new JobPerformanceException(\r\n                    ''An exception occurred during performance of the job.'',\r\n                    ex.InnerException);", span="173-175", cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_76 [label="Exit Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", span="145-145", cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs"];
m1_66 [label="Entry Hangfire.Common.JobHelper.FromJson(string, System.Type)", span="46-46", cluster="Hangfire.Common.JobHelper.FromJson(string, System.Type)", file="BackgroundJobClientExtensions.cs"];
m1_67 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="BackgroundJobClientExtensions.cs"];
m1_41 [label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22", cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="BackgroundJobClientExtensions.cs"];
m1_78 [label="Entry Hangfire.Common.Job.Dispose(object)", span="180-180", cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs"];
m1_79 [label="var disposable = instance as IDisposable", span="184-184", cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs"];
m1_80 [label="disposable?.Dispose()", span="185-185", cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs"];
m1_81 [label=Exception, span="187-187", cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs"];
m1_82 [label="throw new JobPerformanceException(\r\n                    ''Job has been performed, but an exception occurred during disposal.'',\r\n                    ex);", span="189-191", cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs"];
m1_83 [label="Exit Hangfire.Common.Job.Dispose(object)", span="180-180", cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs"];
m1_62 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="BackgroundJobClientExtensions.cs"];
m1_84 [label="Entry System.IDisposable.Dispose()", span="0-0", cluster="System.IDisposable.Dispose()", file="BackgroundJobClientExtensions.cs"];
m1_14 [label="Entry Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", span="358-358", cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="BackgroundJobClientExtensions.cs"];
m1_65 [label="Entry System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)", span="0-0", cluster="System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)", file="BackgroundJobClientExtensions.cs"];
m1_85 [label="Hangfire.Common.Job", span="", file="BackgroundJobClientExtensions.cs"];
m2_2 [label="Entry HangFire.States.SucceededState.GetProperties()", span="19-19", cluster="HangFire.States.SucceededState.GetProperties()", file="BackgroundJobClientFacts.cs"];
m2_3 [label="return new Dictionary<string, string>\r\n                {\r\n                    { ''SucceededAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) }\r\n                };", span="21-24", cluster="HangFire.States.SucceededState.GetProperties()", file="BackgroundJobClientFacts.cs"];
m2_4 [label="Exit HangFire.States.SucceededState.GetProperties()", span="19-19", cluster="HangFire.States.SucceededState.GetProperties()", file="BackgroundJobClientFacts.cs"];
m2_16 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BackgroundJobClientFacts.cs"];
m2_29 [label="Entry Unk.EnqueueItemOnList", span="", cluster="Unk.EnqueueItemOnList", file="BackgroundJobClientFacts.cs"];
m2_37 [label="Entry Unk.IncrementValue", span="", cluster="Unk.IncrementValue", file="BackgroundJobClientFacts.cs"];
m2_33 [label="Entry Unk.TrimList", span="", cluster="Unk.TrimList", file="BackgroundJobClientFacts.cs"];
m2_52 [label="Entry Unk.Persist", span="", cluster="Unk.Persist", file="BackgroundJobClientFacts.cs"];
m2_21 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="BackgroundJobClientFacts.cs"];
m2_38 [label="Entry HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", span="47-47", cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs"];
m2_39 [label="transaction == null", span="49-49", cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs"];
m2_41 [label="transaction.QueueCommand(x => x.DecrementValue(''hangfire:stats:succeeded''))", span="51-51", cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs"];
m2_42 [label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}'', jobId)))", span="52-53", cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs"];
m2_43 [label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId)))", span="54-55", cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs"];
m2_40 [label="throw new ArgumentNullException(''transaction'');", span="49-49", cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs"];
m2_44 [label="Exit HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", span="47-47", cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs"];
m2_17 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="BackgroundJobClientFacts.cs"];
m2_22 [label="Entry Unk.ExpireEntryIn", span="", cluster="Unk.ExpireEntryIn", file="BackgroundJobClientFacts.cs"];
m2_11 [label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:history'', JobId),\r\n                _jobExpirationTimeout))", span="35-37", cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs"];
m2_7 [label="Entry HangFire.States.SucceededState.Apply(IRedisTransaction)", span="27-27", cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs"];
m2_8 [label="transaction == null", span="29-29", cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs"];
m2_10 [label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobExpirationTimeout))", span="31-33", cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs"];
m2_12 [label="transaction.QueueCommand(x => x.EnqueueItemOnList(''hangfire:succeeded'', JobId))", span="39-39", cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs"];
m2_13 [label="transaction.QueueCommand(x => x.TrimList(''hangfire:succeeded'', 0, 99))", span="40-40", cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs"];
m2_14 [label="transaction.QueueCommand(x => x.IncrementValue(''hangfire:stats:succeeded''))", span="42-42", cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs"];
m2_9 [label="throw new ArgumentNullException(''transaction'');", span="29-29", cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs"];
m2_15 [label="Exit HangFire.States.SucceededState.Apply(IRedisTransaction)", span="27-27", cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs"];
m2_0 [label="Entry HangFire.States.SucceededState.SucceededState(string, string)", span="12-12", cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="BackgroundJobClientFacts.cs"];
m2_1 [label="Exit HangFire.States.SucceededState.SucceededState(string, string)", span="12-12", cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="BackgroundJobClientFacts.cs"];
m2_48 [label="Entry Unk.DecrementValue", span="", cluster="Unk.DecrementValue", file="BackgroundJobClientFacts.cs"];
m2_53 [label="Entry lambda expression", span="54-55", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_18 [label="Entry lambda expression", span="31-33", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_23 [label="Entry lambda expression", span="35-37", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_26 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_30 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_34 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_19 [label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobExpirationTimeout)", span="31-33", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_20 [label="Exit lambda expression", span="31-33", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_24 [label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:history'', JobId),\r\n                _jobExpirationTimeout)", span="35-37", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_25 [label="Exit lambda expression", span="35-37", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_27 [label="x.EnqueueItemOnList(''hangfire:succeeded'', JobId)", span="39-39", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_28 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_31 [label="x.TrimList(''hangfire:succeeded'', 0, 99)", span="40-40", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_32 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_35 [label="x.IncrementValue(''hangfire:stats:succeeded'')", span="42-42", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_36 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_50 [label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}'', jobId))", span="52-53", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_54 [label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="54-55", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_45 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_49 [label="Entry lambda expression", span="52-53", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_46 [label="x.DecrementValue(''hangfire:stats:succeeded'')", span="51-51", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_47 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_51 [label="Exit lambda expression", span="52-53", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_55 [label="Exit lambda expression", span="54-55", cluster="lambda expression", file="BackgroundJobClientFacts.cs"];
m2_6 [label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55", cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="BackgroundJobClientFacts.cs"];
m2_56 [label="HangFire.States.SucceededState", span="", file="BackgroundJobClientFacts.cs"];
m2_57 [label=string, span="", file="BackgroundJobClientFacts.cs"];
m3_12 [label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m3_13 [label="logger.InfoFormat(''Using the following options for Hangfire Server:'')", span="88-88", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m3_14 [label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="89-89", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m3_15 [label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="90-90", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m3_16 [label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="91-91", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m3_17 [label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="92-92", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m3_18 [label="Exit Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86", cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs"];
m3_11 [label="Entry System.Math.Min(int, int)", span="0-0", cluster="System.Math.Min(int, int)", file="BackgroundJobServerOptions.cs"];
m3_19 [label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210", cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="BackgroundJobServerOptions.cs"];
m3_21 [label="Entry Unk.Join", span="", cluster="Unk.Join", file="BackgroundJobServerOptions.cs"];
m3_0 [label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m3_1 [label="WorkerCount = Math.Min(Environment.ProcessorCount * 5, MaxDefaultWorkerCount)", span="36-36", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m3_2 [label="Queues = new[] { EnqueuedState.DefaultQueue }", span="37-37", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m3_3 [label="ShutdownTimeout = BackgroundProcessingServer.DefaultShutdownTimeout", span="38-38", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m3_4 [label="SchedulePollingInterval = DelayedJobScheduler.DefaultPollingInterval", span="39-39", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", color=red, community=0, file="BackgroundJobServerOptions.cs"];
m3_5 [label="HeartbeatInterval = ServerHeartbeat.DefaultHeartbeatInterval", span="40-40", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m3_6 [label="ServerTimeout = ServerWatchdog.DefaultServerTimeout", span="41-41", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m3_7 [label="ServerCheckInterval = ServerWatchdog.DefaultCheckInterval", span="42-42", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m3_8 [label="FilterProvider = JobFilterProviders.Providers", span="44-44", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m3_9 [label="Activator = JobActivator.Current", span="45-45", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m3_10 [label="Exit Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs"];
m3_22 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m3_23 [label="''''' + x + '''''", span="90-90", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m3_24 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="BackgroundJobServerOptions.cs"];
m3_20 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="BackgroundJobServerOptions.cs"];
m3_25 [label="Hangfire.BackgroundJobServerOptions", span="", file="BackgroundJobServerOptions.cs"];
m4_42 [label="Entry Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", span="57-57", cluster="Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", file="DelayedJobScheduler.cs"];
m4_10 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="DelayedJobScheduler.cs"];
m4_41 [label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", span="28-28", cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", file="DelayedJobScheduler.cs"];
m4_40 [label="Entry Hangfire.JobStorage.GetConnection()", span="56-56", cluster="Hangfire.JobStorage.GetConnection()", file="DelayedJobScheduler.cs"];
m4_46 [label="Entry Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", span="35-35", cluster="Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", file="DelayedJobScheduler.cs"];
m4_44 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="DelayedJobScheduler.cs"];
m4_43 [label="Entry Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="57-57", cluster="Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="DelayedJobScheduler.cs"];
m4_45 [label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87", cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="DelayedJobScheduler.cs"];
m4_20 [label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210", cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="DelayedJobScheduler.cs"];
m4_47 [label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25", cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="DelayedJobScheduler.cs"];
m4_50 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54", cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", file="DelayedJobScheduler.cs"];
m4_19 [label="Entry Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="78-78", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_33 [label="var appliedState = _stateChanger.ChangeState(new StateChangeContext(\r\n                    context.Storage,\r\n                    connection,\r\n                    jobId, \r\n                    enqueuedState, \r\n                    ScheduledState.StateName))", span="100-105", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_26 [label="var connection = context.Storage.GetConnection()", span="80-80", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_29 [label="var jobId = connection\r\n                    .GetFirstByLowestScoreFromSet(''schedule'', 0, timestamp)", span="86-87", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_32 [label="var enqueuedState = new EnqueuedState\r\n                {\r\n                    Reason = ''Triggered scheduled job''\r\n                }", span="95-98", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_34 [label="appliedState == null", span="107-107", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_28 [label="var timestamp = JobHelper.ToTimestamp(DateTime.UtcNow)", span="83-83", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_30 [label="String.IsNullOrEmpty(jobId)", span="89-89", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_36 [label="transaction.RemoveFromSet(''schedule'', jobId)", span="114-114", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_27 [label="connection.AcquireDistributedLock(''locks:schedulepoller'', DefaultLockTimeout)", span="81-81", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_35 [label="var transaction = connection.CreateWriteTransaction()", span="112-112", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_37 [label="transaction.Commit()", span="115-115", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_38 [label="return true;", span="119-119", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_31 [label="return false;", span="92-92", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_39 [label="Exit Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="78-78", cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_21 [label="Entry Hangfire.Server.BackgroundProcessContext.Sleep(System.TimeSpan)", span="23-23", cluster="Hangfire.Server.BackgroundProcessContext.Sleep(System.TimeSpan)", file="DelayedJobScheduler.cs"];
m4_25 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="DelayedJobScheduler.cs"];
m4_11 [label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="54-54", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_16 [label="context.Sleep(_pollingInterval)", span="64-64", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_13 [label="_enqueuedCount != 0", span="58-58", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_15 [label="_enqueuedCount = 0", span="61-61", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_14 [label="Logger.InfoFormat(''{0} scheduled jobs were enqueued.'', _enqueuedCount)", span="60-60", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_12 [label="!EnqueueNextScheduledJob(context)", span="56-56", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_17 [label="_enqueuedCount++", span="69-69", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_18 [label="Exit Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="54-54", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs"];
m4_48 [label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27", cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", file="DelayedJobScheduler.cs"];
m4_4 [label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="46-46", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs"];
m4_5 [label="stateChanger == null", span="48-48", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_6 [label="throw new ArgumentNullException(''stateChanger'');", span="48-48", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_7 [label="_stateChanger = stateChanger", span="50-50", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_8 [label="_pollingInterval = pollingInterval", span="51-51", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_9 [label="Exit Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="46-46", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs"];
m4_22 [label="Entry Hangfire.Server.DelayedJobScheduler.ToString()", span="73-73", cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="DelayedJobScheduler.cs"];
m4_23 [label="return GetType().Name;", span="75-75", cluster="Hangfire.Server.DelayedJobScheduler.ToString()", color=green, community=0, file="DelayedJobScheduler.cs"];
m4_24 [label="Exit Hangfire.Server.DelayedJobScheduler.ToString()", span="73-73", cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="DelayedJobScheduler.cs"];
m4_49 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43", cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="DelayedJobScheduler.cs"];
m4_51 [label="Hangfire.Server.DelayedJobScheduler", span="", file="DelayedJobScheduler.cs"];
m5_2 [label="Entry Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="63-63", cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="IBackgroundJobClient.cs"];
m5_3 [label="Exit Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="63-63", cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="IBackgroundJobClient.cs"];
m5_0 [label="Entry Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="50-50", cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="IBackgroundJobClient.cs"];
m5_1 [label="Exit Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="50-50", cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="IBackgroundJobClient.cs"];
m6_9 [label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="113-113", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="Job.cs"];
m6_10 [label="Entry lambda expression", span="40-49", cluster="lambda expression", file="Job.cs"];
m6_0 [label="Entry lambda expression", span="26-37", cluster="lambda expression", file="Job.cs"];
m6_1 [label="var connection = JobStorage.Current.GetConnection()", span="28-28", cluster="lambda expression", file="Job.cs"];
m6_4 [label="return stateMachine.ChangeState(jobId, state, FailedState.Name);", span="35-35", cluster="lambda expression", file="Job.cs"];
m6_2 [label="var stateMachine = new StateMachine(connection)", span="32-32", cluster="lambda expression", file="Job.cs"];
m6_3 [label="var state = new EnqueuedState(''The job has been retried by a user.'')", span="33-33", cluster="lambda expression", file="Job.cs"];
m6_5 [label="Exit lambda expression", span="26-37", cluster="lambda expression", file="Job.cs"];
m6_11 [label="var connection = JobStorage.Current.GetConnection()", span="42-42", cluster="lambda expression", file="Job.cs"];
m6_14 [label="return stateMachine.ChangeState(jobId, state, ScheduledState.Name);", span="47-47", cluster="lambda expression", file="Job.cs"];
m6_12 [label="var stateMachine = new StateMachine(connection)", span="44-44", cluster="lambda expression", file="Job.cs"];
m6_13 [label="var state = new EnqueuedState(''The job has been enqueued by a user.'')", span="45-45", cluster="lambda expression", file="Job.cs"];
m6_15 [label="Exit lambda expression", span="40-49", cluster="lambda expression", file="Job.cs"];
m6_7 [label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", span="36-36", cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", file="Job.cs"];
m6_8 [label="Entry HangFire.States.EnqueuedState.EnqueuedState(string)", span="31-31", cluster="HangFire.States.EnqueuedState.EnqueuedState(string)", file="Job.cs"];
m6_6 [label="Entry HangFire.JobStorage.GetConnection()", span="45-45", cluster="HangFire.JobStorage.GetConnection()", file="Job.cs"];
n436 -> n10  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n16  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n17  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n37  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n42  [key=1, style=dashed, color=red, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n55  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n96  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n104  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n105  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n126  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n129  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n143  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n146  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n156  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n159  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n168  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n171  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n181  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n184  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n193  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n196  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n207  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n210  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n219  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n222  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n231  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n234  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n245  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n248  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n257  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n260  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n270  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n273  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n282  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n285  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n294  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n297  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n307  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n310  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n319  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n322  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n333  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n336  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n345  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n348  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n357  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n360  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n376  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n379  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n390  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n393  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n402  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n405  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n414  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n436 -> n417  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.WriteTransactionFacts"];
n437 -> n14  [key=1, style=dashed, color=red, label=arrangeSql];
n437 -> n15  [key=1, style=dashed, color=red, label=arrangeSql];
n438 -> n31  [key=1, style=dashed, color=red, label=jobId];
n439 -> n40  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
n439 -> n41  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
n440 -> n50  [key=1, style=dashed, color=red, label=jobId];
n441 -> n58  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
n441 -> n59  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
n442 -> n91  [key=1, style=dashed, color=darkseagreen4, label=jobId];
n443 -> n91  [key=1, style=dashed, color=darkseagreen4, label=state];
n444 -> n99  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
n445 -> n122  [key=1, style=dashed, color=darkseagreen4, label=jobId];
n446 -> n122  [key=1, style=dashed, color=darkseagreen4, label=state];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n6 -> n4  [key=0, style=bold, color=blue];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid, color=red];
n9 -> n14  [key=1, style=dashed, color=red, label=arrangeSql];
n9 -> n15  [key=1, style=dashed, color=red, label=arrangeSql];
n10 -> n11  [key=0, style=solid, color=red];
n10 -> n12  [key=2, style=dotted, color=red];
n10 -> n13  [key=1, style=dashed, color=red, label="lambda expression"];
n14 -> n15  [key=0, style=solid, color=red];
n14 -> n22  [key=2, style=dotted, color=red];
n14 -> n23  [key=2, style=dotted, color=red];
n14 -> n24  [key=2, style=dotted, color=red];
n14 -> n16  [key=1, style=dashed, color=red, label=jobId];
n14 -> n31  [key=1, style=dashed, color=red, label=jobId];
n14 -> n17  [key=1, style=dashed, color=red, label=jobId];
n15 -> n16  [key=0, style=solid, color=red];
n15 -> n22  [key=2, style=dotted, color=red];
n15 -> n23  [key=2, style=dotted, color=red];
n15 -> n24  [key=2, style=dotted, color=red];
n15 -> n19  [key=1, style=dashed, color=red, label=anotherJobId];
n11 -> n8  [key=0, style=bold, color=blue];
n13 -> n14  [key=0, style=solid, color=red];
n13 -> n15  [key=1, style=dashed, color=red, label=SqlConnection];
n13 -> n16  [key=1, style=dashed, color=red, label=SqlConnection];
n13 -> n17  [key=1, style=dashed, color=red, label=SqlConnection];
n13 -> n19  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n16 -> n17  [key=0, style=solid, color=red];
n16 -> n25  [key=2, style=dotted, color=red];
n16 -> n30  [key=1, style=dashed, color=red, label="lambda expression"];
n17 -> n18  [key=0, style=solid, color=red];
n17 -> n26  [key=2, style=dotted, color=red];
n19 -> n20  [key=0, style=solid];
n19 -> n26  [key=2, style=dotted];
n31 -> n32  [key=0, style=solid, color=red];
n31 -> n33  [key=2, style=dotted, color=red];
n31 -> n34  [key=2, style=dotted, color=red];
n25 -> n431  [key=0, style=solid];
n25 -> n432  [key=1, style=dashed, color=darkseagreen4, label="System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>"];
n30 -> n31  [key=0, style=solid, color=red];
n18 -> n19  [key=0, style=solid];
n18 -> n27  [key=2, style=dotted];
n18 -> n28  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n29  [key=2, style=dotted];
n21 -> n13  [key=0, style=bold, color=blue];
n32 -> n30  [key=0, style=bold, color=blue];
n35 -> n36  [key=0, style=solid, color=red];
n36 -> n37  [key=0, style=solid, color=red];
n36 -> n40  [key=1, style=dashed, color=red, label=arrangeSql];
n36 -> n41  [key=1, style=dashed, color=red, label=arrangeSql];
n37 -> n38  [key=0, style=solid, color=red];
n37 -> n12  [key=2, style=dotted, color=red];
n37 -> n39  [key=1, style=dashed, color=red, label="lambda expression"];
n40 -> n41  [key=0, style=solid];
n40 -> n22  [key=2, style=dotted];
n40 -> n23  [key=2, style=dotted];
n40 -> n24  [key=2, style=dotted];
n40 -> n42  [key=1, style=dashed, color=red, label=jobId];
n40 -> n50  [key=1, style=dashed, color=red, label=jobId];
n40 -> n43  [key=1, style=dashed, color=darkseagreen4, label=jobId];
n41 -> n42  [key=0, style=solid, color=red];
n41 -> n22  [key=2, style=dotted];
n41 -> n23  [key=2, style=dotted];
n41 -> n24  [key=2, style=dotted];
n41 -> n45  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
n38 -> n35  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n39 -> n41  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n39 -> n42  [key=1, style=dashed, color=red, label=SqlConnection];
n39 -> n43  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n39 -> n45  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n42 -> n43  [key=0, style=solid, color=red];
n42 -> n25  [key=2, style=dotted, color=red];
n42 -> n49  [key=1, style=dashed, color=red, label="lambda expression"];
n43 -> n44  [key=0, style=solid];
n43 -> n26  [key=2, style=dotted];
n45 -> n46  [key=0, style=solid];
n45 -> n26  [key=2, style=dotted];
n50 -> n51  [key=0, style=solid, color=red];
n50 -> n52  [key=2, style=dotted, color=red];
n49 -> n50  [key=0, style=solid, color=red];
n44 -> n45  [key=0, style=solid];
n44 -> n29  [key=2, style=dotted];
n46 -> n47  [key=0, style=solid];
n46 -> n48  [key=2, style=dotted];
n47 -> n39  [key=0, style=bold, color=blue];
n51 -> n49  [key=0, style=bold, color=blue];
n53 -> n54  [key=0, style=solid, color=red];
n54 -> n55  [key=0, style=solid, color=red];
n54 -> n58  [key=1, style=dashed, color=red, label=arrangeSql];
n54 -> n59  [key=1, style=dashed, color=red, label=arrangeSql];
n55 -> n56  [key=0, style=solid];
n55 -> n12  [key=2, style=dotted];
n55 -> n57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n58 -> n59  [key=0, style=solid];
n58 -> n22  [key=2, style=dotted];
n58 -> n23  [key=2, style=dotted];
n58 -> n24  [key=2, style=dotted];
n58 -> n64  [key=1, style=dashed, color=darkseagreen4, label=jobId];
n58 -> n91  [key=1, style=dashed, color=darkseagreen4, label=jobId];
n58 -> n65  [key=1, style=dashed, color=darkseagreen4, label=jobId];
n58 -> n72  [key=1, style=dashed, color=darkseagreen4, label=jobId];
n59 -> n60  [key=0, style=solid];
n59 -> n22  [key=2, style=dotted];
n59 -> n23  [key=2, style=dotted];
n59 -> n24  [key=2, style=dotted];
n59 -> n68  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
n56 -> n53  [key=0, style=bold, color=blue];
n57 -> n58  [key=0, style=solid];
n57 -> n59  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n57 -> n64  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n57 -> n65  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n57 -> n68  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n57 -> n71  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n64 -> n65  [key=0, style=solid];
n64 -> n25  [key=2, style=dotted];
n64 -> n90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n65 -> n66  [key=0, style=solid];
n65 -> n26  [key=2, style=dotted];
n65 -> n67  [key=1, style=dashed, color=darkseagreen4, label=job];
n68 -> n69  [key=0, style=solid];
n68 -> n26  [key=2, style=dotted];
n68 -> n70  [key=1, style=dashed, color=darkseagreen4, label=anotherJob];
n71 -> n72  [key=0, style=solid];
n71 -> n22  [key=2, style=dotted];
n71 -> n23  [key=2, style=dotted];
n71 -> n73  [key=1, style=dashed, color=darkseagreen4, label=jobState];
n71 -> n74  [key=1, style=dashed, color=darkseagreen4, label=jobState];
n71 -> n75  [key=1, style=dashed, color=darkseagreen4, label=jobState];
n71 -> n76  [key=1, style=dashed, color=darkseagreen4, label=jobState];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=2, style=dotted];
n72 -> n73  [key=0, style=solid];
n72 -> n24  [key=2, style=dotted];
n72 -> n82  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n60 -> n78  [key=2, style=dotted];
n60 -> n62  [key=1, style=dashed, color=darkseagreen4, label=state];
n60 -> n63  [key=1, style=dashed, color=darkseagreen4, label=state];
n61 -> n62  [key=0, style=solid];
n61 -> n79  [key=2, style=dotted];
n61 -> n80  [key=2, style=dotted];
n61 -> n83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n62 -> n63  [key=0, style=solid];
n62 -> n79  [key=2, style=dotted];
n62 -> n81  [key=2, style=dotted];
n62 -> n80  [key=2, style=dotted];
n62 -> n86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n63 -> n64  [key=0, style=solid];
n63 -> n63  [key=1, style=dashed, color=darkseagreen4, label=state];
n63 -> n91  [key=1, style=dashed, color=darkseagreen4, label=state];
n83 -> n84  [key=0, style=solid];
n86 -> n87  [key=0, style=solid];
n90 -> n91  [key=0, style=solid];
n66 -> n67  [key=0, style=solid];
n66 -> n82  [key=2, style=dotted];
n67 -> n68  [key=0, style=solid];
n67 -> n48  [key=2, style=dotted];
n69 -> n70  [key=0, style=solid];
n69 -> n29  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n70 -> n29  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n73 -> n82  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n74 -> n82  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n48  [key=2, style=dotted];
n76 -> n77  [key=0, style=solid];
n76 -> n82  [key=2, style=dotted];
n77 -> n57  [key=0, style=bold, color=blue];
n84 -> n85  [key=0, style=solid];
n85 -> n83  [key=0, style=bold, color=blue];
n87 -> n88  [key=0, style=solid];
n87 -> n89  [key=2, style=dotted];
n88 -> n86  [key=0, style=bold, color=blue];
n92 -> n90  [key=0, style=bold, color=blue];
n94 -> n95  [key=0, style=solid];
n95 -> n96  [key=0, style=solid];
n95 -> n99  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
n96 -> n97  [key=0, style=solid];
n96 -> n12  [key=2, style=dotted];
n96 -> n98  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n99 -> n100  [key=0, style=solid];
n99 -> n22  [key=2, style=dotted];
n99 -> n23  [key=2, style=dotted];
n99 -> n24  [key=2, style=dotted];
n99 -> n104  [key=1, style=dashed, color=darkseagreen4, label=jobId];
n99 -> n122  [key=1, style=dashed, color=darkseagreen4, label=jobId];
n99 -> n105  [key=1, style=dashed, color=darkseagreen4, label=jobId];
n99 -> n109  [key=1, style=dashed, color=darkseagreen4, label=jobId];
n97 -> n94  [key=0, style=bold, color=blue];
n98 -> n99  [key=0, style=solid];
n98 -> n104  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n98 -> n105  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n98 -> n108  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n104 -> n105  [key=0, style=solid];
n104 -> n25  [key=2, style=dotted];
n104 -> n121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n105 -> n106  [key=0, style=solid];
n105 -> n26  [key=2, style=dotted];
n105 -> n107  [key=1, style=dashed, color=darkseagreen4, label=job];
n108 -> n109  [key=0, style=solid];
n108 -> n22  [key=2, style=dotted];
n108 -> n23  [key=2, style=dotted];
n108 -> n110  [key=1, style=dashed, color=darkseagreen4, label=jobState];
n108 -> n111  [key=1, style=dashed, color=darkseagreen4, label=jobState];
n108 -> n112  [key=1, style=dashed, color=darkseagreen4, label=jobState];
n108 -> n113  [key=1, style=dashed, color=darkseagreen4, label=jobState];
n100 -> n101  [key=0, style=solid];
n100 -> n78  [key=2, style=dotted];
n100 -> n102  [key=1, style=dashed, color=darkseagreen4, label=state];
n100 -> n103  [key=1, style=dashed, color=darkseagreen4, label=state];
n122 -> n123  [key=0, style=solid];
n122 -> n124  [key=2, style=dotted];
n109 -> n110  [key=0, style=solid];
n109 -> n24  [key=2, style=dotted];
n109 -> n82  [key=2, style=dotted];
n101 -> n102  [key=0, style=solid];
n101 -> n79  [key=2, style=dotted];
n101 -> n80  [key=2, style=dotted];
n101 -> n115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n102 -> n103  [key=0, style=solid];
n102 -> n79  [key=2, style=dotted];
n102 -> n81  [key=2, style=dotted];
n102 -> n80  [key=2, style=dotted];
n102 -> n118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n103 -> n104  [key=0, style=solid];
n103 -> n103  [key=1, style=dashed, color=darkseagreen4, label=state];
n103 -> n122  [key=1, style=dashed, color=darkseagreen4, label=state];
n115 -> n116  [key=0, style=solid];
n118 -> n119  [key=0, style=solid];
n121 -> n122  [key=0, style=solid];
n106 -> n107  [key=0, style=solid];
n106 -> n29  [key=2, style=dotted];
n107 -> n108  [key=0, style=solid];
n107 -> n29  [key=2, style=dotted];
n110 -> n111  [key=0, style=solid];
n110 -> n82  [key=2, style=dotted];
n111 -> n112  [key=0, style=solid];
n111 -> n82  [key=2, style=dotted];
n112 -> n113  [key=0, style=solid];
n112 -> n48  [key=2, style=dotted];
n113 -> n114  [key=0, style=solid];
n113 -> n82  [key=2, style=dotted];
n114 -> n98  [key=0, style=bold, color=blue];
n116 -> n117  [key=0, style=solid];
n117 -> n115  [key=0, style=bold, color=blue];
n119 -> n120  [key=0, style=solid];
n119 -> n89  [key=2, style=dotted];
n120 -> n118  [key=0, style=bold, color=blue];
n123 -> n121  [key=0, style=bold, color=blue];
n125 -> n126  [key=0, style=solid];
n126 -> n127  [key=0, style=solid];
n126 -> n12  [key=2, style=dotted];
n126 -> n128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n127 -> n125  [key=0, style=bold, color=blue];
n128 -> n129  [key=0, style=solid];
n128 -> n130  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n129 -> n130  [key=0, style=solid];
n129 -> n25  [key=2, style=dotted];
n129 -> n135  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n130 -> n131  [key=0, style=solid];
n130 -> n22  [key=2, style=dotted];
n130 -> n23  [key=2, style=dotted];
n130 -> n132  [key=1, style=dashed, color=darkseagreen4, label=record];
n130 -> n133  [key=1, style=dashed, color=darkseagreen4, label=record];
n135 -> n136  [key=0, style=solid];
n131 -> n132  [key=0, style=solid];
n131 -> n24  [key=2, style=dotted];
n131 -> n82  [key=2, style=dotted];
n132 -> n133  [key=0, style=solid];
n132 -> n82  [key=2, style=dotted];
n133 -> n134  [key=0, style=solid];
n133 -> n29  [key=2, style=dotted];
n134 -> n128  [key=0, style=bold, color=blue];
n136 -> n137  [key=0, style=solid];
n136 -> n138  [key=2, style=dotted];
n137 -> n135  [key=0, style=bold, color=blue];
n139 -> n140  [key=0, style=solid];
n140 -> n141  [key=0, style=solid];
n140 -> n22  [key=2, style=dotted];
n140 -> n23  [key=2, style=dotted];
n141 -> n139  [key=0, style=bold, color=blue];
n142 -> n143  [key=0, style=solid];
n143 -> n144  [key=0, style=solid];
n143 -> n12  [key=2, style=dotted];
n143 -> n145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n144 -> n142  [key=0, style=bold, color=blue];
n145 -> n146  [key=0, style=solid];
n145 -> n147  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n146 -> n147  [key=0, style=solid];
n146 -> n25  [key=2, style=dotted];
n146 -> n151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n147 -> n148  [key=0, style=solid];
n147 -> n22  [key=2, style=dotted];
n147 -> n23  [key=2, style=dotted];
n147 -> n149  [key=1, style=dashed, color=darkseagreen4, label=record];
n151 -> n152  [key=0, style=solid];
n148 -> n149  [key=0, style=solid];
n148 -> n82  [key=2, style=dotted];
n149 -> n150  [key=0, style=solid];
n149 -> n82  [key=2, style=dotted];
n150 -> n145  [key=0, style=bold, color=blue];
n152 -> n153  [key=0, style=solid];
n152 -> n154  [key=2, style=dotted];
n153 -> n151  [key=0, style=bold, color=blue];
n155 -> n156  [key=0, style=solid];
n156 -> n157  [key=0, style=solid];
n156 -> n12  [key=2, style=dotted];
n156 -> n158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n157 -> n155  [key=0, style=bold, color=blue];
n158 -> n159  [key=0, style=solid];
n158 -> n160  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n159 -> n160  [key=0, style=solid];
n159 -> n25  [key=2, style=dotted];
n159 -> n163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n160 -> n161  [key=0, style=solid];
n160 -> n3  [key=2, style=dotted];
n160 -> n23  [key=2, style=dotted];
n163 -> n164  [key=0, style=solid];
n163 -> n165  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n161 -> n162  [key=0, style=solid];
n161 -> n82  [key=2, style=dotted];
n162 -> n158  [key=0, style=bold, color=blue];
n164 -> n165  [key=0, style=solid];
n164 -> n154  [key=2, style=dotted];
n165 -> n166  [key=0, style=solid];
n165 -> n154  [key=2, style=dotted];
n166 -> n163  [key=0, style=bold, color=blue];
n167 -> n168  [key=0, style=solid];
n168 -> n169  [key=0, style=solid];
n168 -> n12  [key=2, style=dotted];
n168 -> n170  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n169 -> n167  [key=0, style=bold, color=blue];
n170 -> n171  [key=0, style=solid];
n170 -> n172  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n171 -> n172  [key=0, style=solid];
n171 -> n25  [key=2, style=dotted];
n171 -> n176  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n172 -> n173  [key=0, style=solid];
n172 -> n22  [key=2, style=dotted];
n172 -> n23  [key=2, style=dotted];
n172 -> n174  [key=1, style=dashed, color=darkseagreen4, label=record];
n176 -> n177  [key=0, style=solid];
n173 -> n174  [key=0, style=solid];
n173 -> n82  [key=2, style=dotted];
n174 -> n175  [key=0, style=solid];
n174 -> n82  [key=2, style=dotted];
n175 -> n170  [key=0, style=bold, color=blue];
n177 -> n178  [key=0, style=solid];
n177 -> n179  [key=2, style=dotted];
n178 -> n176  [key=0, style=bold, color=blue];
n180 -> n181  [key=0, style=solid];
n181 -> n182  [key=0, style=solid];
n181 -> n12  [key=2, style=dotted];
n181 -> n183  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n182 -> n180  [key=0, style=bold, color=blue];
n183 -> n184  [key=0, style=solid];
n183 -> n185  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n184 -> n185  [key=0, style=solid];
n184 -> n25  [key=2, style=dotted];
n184 -> n188  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n185 -> n186  [key=0, style=solid];
n185 -> n3  [key=2, style=dotted];
n185 -> n23  [key=2, style=dotted];
n188 -> n189  [key=0, style=solid];
n188 -> n190  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n186 -> n187  [key=0, style=solid];
n186 -> n82  [key=2, style=dotted];
n187 -> n183  [key=0, style=bold, color=blue];
n189 -> n190  [key=0, style=solid];
n189 -> n179  [key=2, style=dotted];
n190 -> n191  [key=0, style=solid];
n190 -> n179  [key=2, style=dotted];
n191 -> n188  [key=0, style=bold, color=blue];
n192 -> n193  [key=0, style=solid];
n193 -> n194  [key=0, style=solid];
n193 -> n12  [key=2, style=dotted];
n193 -> n195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n194 -> n192  [key=0, style=bold, color=blue];
n195 -> n196  [key=0, style=solid];
n195 -> n197  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n196 -> n197  [key=0, style=solid];
n196 -> n25  [key=2, style=dotted];
n196 -> n202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n197 -> n198  [key=0, style=solid];
n197 -> n22  [key=2, style=dotted];
n197 -> n23  [key=2, style=dotted];
n197 -> n199  [key=1, style=dashed, color=darkseagreen4, label=record];
n197 -> n200  [key=1, style=dashed, color=darkseagreen4, label=record];
n202 -> n203  [key=0, style=solid];
n198 -> n199  [key=0, style=solid];
n198 -> n82  [key=2, style=dotted];
n199 -> n200  [key=0, style=solid];
n199 -> n82  [key=2, style=dotted];
n200 -> n201  [key=0, style=solid];
n200 -> n82  [key=2, style=dotted];
n201 -> n195  [key=0, style=bold, color=blue];
n203 -> n204  [key=0, style=solid];
n203 -> n205  [key=2, style=dotted];
n204 -> n202  [key=0, style=bold, color=blue];
n206 -> n207  [key=0, style=solid];
n207 -> n208  [key=0, style=solid];
n207 -> n12  [key=2, style=dotted];
n207 -> n209  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n208 -> n206  [key=0, style=bold, color=blue];
n209 -> n210  [key=0, style=solid];
n209 -> n211  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n210 -> n211  [key=0, style=solid];
n210 -> n25  [key=2, style=dotted];
n210 -> n214  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n211 -> n212  [key=0, style=solid];
n211 -> n3  [key=2, style=dotted];
n211 -> n23  [key=2, style=dotted];
n214 -> n215  [key=0, style=solid];
n214 -> n216  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n212 -> n213  [key=0, style=solid];
n212 -> n82  [key=2, style=dotted];
n213 -> n209  [key=0, style=bold, color=blue];
n215 -> n216  [key=0, style=solid];
n215 -> n205  [key=2, style=dotted];
n216 -> n217  [key=0, style=solid];
n216 -> n205  [key=2, style=dotted];
n217 -> n214  [key=0, style=bold, color=blue];
n218 -> n219  [key=0, style=solid];
n219 -> n220  [key=0, style=solid];
n219 -> n12  [key=2, style=dotted];
n219 -> n221  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n220 -> n218  [key=0, style=bold, color=blue];
n221 -> n222  [key=0, style=solid];
n221 -> n223  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n222 -> n223  [key=0, style=solid];
n222 -> n25  [key=2, style=dotted];
n222 -> n226  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n223 -> n224  [key=0, style=solid];
n223 -> n3  [key=2, style=dotted];
n223 -> n23  [key=2, style=dotted];
n226 -> n227  [key=0, style=solid];
n226 -> n228  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n224 -> n225  [key=0, style=solid];
n224 -> n82  [key=2, style=dotted];
n225 -> n221  [key=0, style=bold, color=blue];
n227 -> n228  [key=0, style=solid];
n227 -> n205  [key=2, style=dotted];
n228 -> n229  [key=0, style=solid];
n228 -> n205  [key=2, style=dotted];
n229 -> n226  [key=0, style=bold, color=blue];
n230 -> n231  [key=0, style=solid];
n231 -> n232  [key=0, style=solid];
n231 -> n12  [key=2, style=dotted];
n231 -> n233  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n232 -> n230  [key=0, style=bold, color=blue];
n233 -> n234  [key=0, style=solid];
n233 -> n235  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n234 -> n235  [key=0, style=solid];
n234 -> n25  [key=2, style=dotted];
n234 -> n240  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n235 -> n236  [key=0, style=solid];
n235 -> n22  [key=2, style=dotted];
n235 -> n23  [key=2, style=dotted];
n235 -> n237  [key=1, style=dashed, color=darkseagreen4, label=record];
n235 -> n238  [key=1, style=dashed, color=darkseagreen4, label=record];
n240 -> n241  [key=0, style=solid];
n236 -> n237  [key=0, style=solid];
n236 -> n82  [key=2, style=dotted];
n237 -> n238  [key=0, style=solid];
n237 -> n82  [key=2, style=dotted];
n238 -> n239  [key=0, style=solid];
n238 -> n82  [key=2, style=dotted];
n239 -> n233  [key=0, style=bold, color=blue];
n241 -> n242  [key=0, style=solid];
n241 -> n243  [key=2, style=dotted];
n242 -> n240  [key=0, style=bold, color=blue];
n244 -> n245  [key=0, style=solid];
n245 -> n246  [key=0, style=solid];
n245 -> n12  [key=2, style=dotted];
n245 -> n247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n246 -> n244  [key=0, style=bold, color=blue];
n247 -> n248  [key=0, style=solid];
n247 -> n249  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n248 -> n249  [key=0, style=solid];
n248 -> n25  [key=2, style=dotted];
n248 -> n252  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n249 -> n250  [key=0, style=solid];
n249 -> n22  [key=2, style=dotted];
n249 -> n23  [key=2, style=dotted];
n252 -> n253  [key=0, style=solid];
n252 -> n254  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n250 -> n251  [key=0, style=solid];
n250 -> n82  [key=2, style=dotted];
n251 -> n247  [key=0, style=bold, color=blue];
n253 -> n254  [key=0, style=solid];
n253 -> n205  [key=2, style=dotted];
n254 -> n255  [key=0, style=solid];
n254 -> n243  [key=2, style=dotted];
n255 -> n252  [key=0, style=bold, color=blue];
n256 -> n257  [key=0, style=solid];
n257 -> n258  [key=0, style=solid];
n257 -> n12  [key=2, style=dotted];
n257 -> n259  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n258 -> n256  [key=0, style=bold, color=blue];
n259 -> n260  [key=0, style=solid];
n259 -> n261  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n260 -> n261  [key=0, style=solid];
n260 -> n25  [key=2, style=dotted];
n260 -> n264  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n261 -> n262  [key=0, style=solid];
n261 -> n3  [key=2, style=dotted];
n261 -> n23  [key=2, style=dotted];
n264 -> n265  [key=0, style=solid];
n264 -> n266  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n262 -> n263  [key=0, style=solid];
n262 -> n82  [key=2, style=dotted];
n263 -> n259  [key=0, style=bold, color=blue];
n265 -> n266  [key=0, style=solid];
n265 -> n205  [key=2, style=dotted];
n266 -> n267  [key=0, style=solid];
n266 -> n268  [key=2, style=dotted];
n267 -> n264  [key=0, style=bold, color=blue];
n269 -> n270  [key=0, style=solid];
n270 -> n271  [key=0, style=solid];
n270 -> n12  [key=2, style=dotted];
n270 -> n272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n271 -> n269  [key=0, style=bold, color=blue];
n272 -> n273  [key=0, style=solid];
n272 -> n274  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n273 -> n274  [key=0, style=solid];
n273 -> n25  [key=2, style=dotted];
n273 -> n277  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n274 -> n275  [key=0, style=solid];
n274 -> n3  [key=2, style=dotted];
n274 -> n23  [key=2, style=dotted];
n277 -> n278  [key=0, style=solid];
n277 -> n279  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n275 -> n276  [key=0, style=solid];
n275 -> n82  [key=2, style=dotted];
n276 -> n272  [key=0, style=bold, color=blue];
n278 -> n279  [key=0, style=solid];
n278 -> n205  [key=2, style=dotted];
n279 -> n280  [key=0, style=solid];
n279 -> n268  [key=2, style=dotted];
n280 -> n277  [key=0, style=bold, color=blue];
n281 -> n282  [key=0, style=solid];
n282 -> n283  [key=0, style=solid];
n282 -> n12  [key=2, style=dotted];
n282 -> n284  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n283 -> n281  [key=0, style=bold, color=blue];
n284 -> n285  [key=0, style=solid];
n284 -> n286  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n285 -> n286  [key=0, style=solid];
n285 -> n25  [key=2, style=dotted];
n285 -> n289  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n286 -> n287  [key=0, style=solid];
n286 -> n3  [key=2, style=dotted];
n286 -> n23  [key=2, style=dotted];
n289 -> n290  [key=0, style=solid];
n289 -> n291  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n287 -> n288  [key=0, style=solid];
n287 -> n82  [key=2, style=dotted];
n288 -> n284  [key=0, style=bold, color=blue];
n290 -> n291  [key=0, style=solid];
n290 -> n205  [key=2, style=dotted];
n291 -> n292  [key=0, style=solid];
n291 -> n268  [key=2, style=dotted];
n292 -> n289  [key=0, style=bold, color=blue];
n293 -> n294  [key=0, style=solid];
n294 -> n295  [key=0, style=solid];
n294 -> n12  [key=2, style=dotted];
n294 -> n296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n295 -> n293  [key=0, style=bold, color=blue];
n296 -> n297  [key=0, style=solid];
n296 -> n298  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n297 -> n298  [key=0, style=solid];
n297 -> n25  [key=2, style=dotted];
n297 -> n302  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n298 -> n299  [key=0, style=solid];
n298 -> n22  [key=2, style=dotted];
n298 -> n23  [key=2, style=dotted];
n298 -> n300  [key=1, style=dashed, color=darkseagreen4, label=record];
n302 -> n303  [key=0, style=solid];
n299 -> n300  [key=0, style=solid];
n299 -> n82  [key=2, style=dotted];
n300 -> n301  [key=0, style=solid];
n300 -> n82  [key=2, style=dotted];
n301 -> n296  [key=0, style=bold, color=blue];
n303 -> n304  [key=0, style=solid];
n303 -> n305  [key=2, style=dotted];
n304 -> n302  [key=0, style=bold, color=blue];
n306 -> n307  [key=0, style=solid];
n307 -> n308  [key=0, style=solid];
n307 -> n12  [key=2, style=dotted];
n307 -> n309  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n308 -> n306  [key=0, style=bold, color=blue];
n309 -> n310  [key=0, style=solid];
n309 -> n311  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n310 -> n311  [key=0, style=solid];
n310 -> n25  [key=2, style=dotted];
n310 -> n314  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n311 -> n312  [key=0, style=solid];
n311 -> n3  [key=2, style=dotted];
n311 -> n23  [key=2, style=dotted];
n314 -> n315  [key=0, style=solid];
n314 -> n316  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n312 -> n313  [key=0, style=solid];
n312 -> n82  [key=2, style=dotted];
n313 -> n309  [key=0, style=bold, color=blue];
n315 -> n316  [key=0, style=solid];
n315 -> n305  [key=2, style=dotted];
n316 -> n317  [key=0, style=solid];
n316 -> n305  [key=2, style=dotted];
n317 -> n314  [key=0, style=bold, color=blue];
n318 -> n319  [key=0, style=solid];
n319 -> n320  [key=0, style=solid];
n319 -> n12  [key=2, style=dotted];
n319 -> n321  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n320 -> n318  [key=0, style=bold, color=blue];
n321 -> n322  [key=0, style=solid];
n321 -> n323  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n322 -> n323  [key=0, style=solid];
n322 -> n25  [key=2, style=dotted];
n322 -> n326  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n323 -> n324  [key=0, style=solid];
n323 -> n3  [key=2, style=dotted];
n323 -> n23  [key=2, style=dotted];
n326 -> n327  [key=0, style=solid];
n326 -> n328  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n326 -> n329  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n324 -> n325  [key=0, style=solid];
n324 -> n82  [key=2, style=dotted];
n325 -> n321  [key=0, style=bold, color=blue];
n327 -> n328  [key=0, style=solid];
n327 -> n305  [key=2, style=dotted];
n328 -> n329  [key=0, style=solid];
n328 -> n305  [key=2, style=dotted];
n329 -> n330  [key=0, style=solid];
n329 -> n331  [key=2, style=dotted];
n330 -> n326  [key=0, style=bold, color=blue];
n332 -> n333  [key=0, style=solid];
n333 -> n334  [key=0, style=solid];
n333 -> n12  [key=2, style=dotted];
n333 -> n335  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n334 -> n332  [key=0, style=bold, color=blue];
n335 -> n336  [key=0, style=solid];
n335 -> n337  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n336 -> n337  [key=0, style=solid];
n336 -> n25  [key=2, style=dotted];
n336 -> n340  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n337 -> n338  [key=0, style=solid];
n337 -> n3  [key=2, style=dotted];
n337 -> n23  [key=2, style=dotted];
n340 -> n341  [key=0, style=solid];
n340 -> n342  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n338 -> n339  [key=0, style=solid];
n338 -> n82  [key=2, style=dotted];
n339 -> n335  [key=0, style=bold, color=blue];
n341 -> n342  [key=0, style=solid];
n341 -> n305  [key=2, style=dotted];
n342 -> n343  [key=0, style=solid];
n342 -> n331  [key=2, style=dotted];
n343 -> n340  [key=0, style=bold, color=blue];
n344 -> n345  [key=0, style=solid];
n345 -> n346  [key=0, style=solid];
n345 -> n12  [key=2, style=dotted];
n345 -> n347  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n346 -> n344  [key=0, style=bold, color=blue];
n347 -> n348  [key=0, style=solid];
n347 -> n349  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n348 -> n349  [key=0, style=solid];
n348 -> n25  [key=2, style=dotted];
n348 -> n352  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n349 -> n350  [key=0, style=solid];
n349 -> n3  [key=2, style=dotted];
n349 -> n23  [key=2, style=dotted];
n352 -> n353  [key=0, style=solid];
n352 -> n354  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n350 -> n351  [key=0, style=solid];
n350 -> n82  [key=2, style=dotted];
n351 -> n347  [key=0, style=bold, color=blue];
n353 -> n354  [key=0, style=solid];
n353 -> n305  [key=2, style=dotted];
n354 -> n355  [key=0, style=solid];
n354 -> n331  [key=2, style=dotted];
n355 -> n352  [key=0, style=bold, color=blue];
n356 -> n357  [key=0, style=solid];
n357 -> n358  [key=0, style=solid];
n357 -> n12  [key=2, style=dotted];
n357 -> n359  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n358 -> n356  [key=0, style=bold, color=blue];
n359 -> n360  [key=0, style=solid];
n359 -> n361  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n360 -> n361  [key=0, style=solid];
n360 -> n25  [key=2, style=dotted];
n360 -> n367  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n361 -> n362  [key=0, style=solid];
n361 -> n22  [key=2, style=dotted];
n361 -> n366  [key=2, style=dotted];
n361 -> n363  [key=1, style=dashed, color=darkseagreen4, label=records];
n361 -> n364  [key=1, style=dashed, color=darkseagreen4, label=records];
n367 -> n368  [key=0, style=solid];
n367 -> n369  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n367 -> n370  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n367 -> n371  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n367 -> n372  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n362 -> n363  [key=0, style=solid];
n362 -> n82  [key=2, style=dotted];
n363 -> n364  [key=0, style=solid];
n363 -> n82  [key=2, style=dotted];
n364 -> n365  [key=0, style=solid];
n364 -> n82  [key=2, style=dotted];
n365 -> n359  [key=0, style=bold, color=blue];
n368 -> n369  [key=0, style=solid];
n368 -> n305  [key=2, style=dotted];
n369 -> n370  [key=0, style=solid];
n369 -> n305  [key=2, style=dotted];
n370 -> n371  [key=0, style=solid];
n370 -> n305  [key=2, style=dotted];
n371 -> n372  [key=0, style=solid];
n371 -> n305  [key=2, style=dotted];
n372 -> n373  [key=0, style=solid];
n372 -> n374  [key=2, style=dotted];
n373 -> n367  [key=0, style=bold, color=blue];
n375 -> n376  [key=0, style=solid];
n376 -> n377  [key=0, style=solid];
n376 -> n12  [key=2, style=dotted];
n376 -> n378  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n377 -> n375  [key=0, style=bold, color=blue];
n378 -> n379  [key=0, style=solid];
n378 -> n380  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n379 -> n380  [key=0, style=solid];
n379 -> n25  [key=2, style=dotted];
n379 -> n383  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n380 -> n381  [key=0, style=solid];
n380 -> n3  [key=2, style=dotted];
n380 -> n23  [key=2, style=dotted];
n383 -> n384  [key=0, style=solid];
n383 -> n385  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n383 -> n386  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n383 -> n387  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n381 -> n382  [key=0, style=solid];
n381 -> n82  [key=2, style=dotted];
n382 -> n378  [key=0, style=bold, color=blue];
n384 -> n385  [key=0, style=solid];
n384 -> n305  [key=2, style=dotted];
n385 -> n386  [key=0, style=solid];
n385 -> n305  [key=2, style=dotted];
n386 -> n387  [key=0, style=solid];
n386 -> n305  [key=2, style=dotted];
n387 -> n388  [key=0, style=solid];
n387 -> n374  [key=2, style=dotted];
n388 -> n383  [key=0, style=bold, color=blue];
n389 -> n390  [key=0, style=solid];
n390 -> n391  [key=0, style=solid];
n390 -> n12  [key=2, style=dotted];
n390 -> n392  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n391 -> n389  [key=0, style=bold, color=blue];
n392 -> n393  [key=0, style=solid];
n392 -> n394  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n393 -> n394  [key=0, style=solid];
n393 -> n25  [key=2, style=dotted];
n393 -> n397  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n394 -> n395  [key=0, style=solid];
n394 -> n3  [key=2, style=dotted];
n394 -> n23  [key=2, style=dotted];
n397 -> n398  [key=0, style=solid];
n397 -> n399  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n395 -> n396  [key=0, style=solid];
n395 -> n82  [key=2, style=dotted];
n396 -> n392  [key=0, style=bold, color=blue];
n398 -> n399  [key=0, style=solid];
n398 -> n305  [key=2, style=dotted];
n399 -> n400  [key=0, style=solid];
n399 -> n374  [key=2, style=dotted];
n400 -> n397  [key=0, style=bold, color=blue];
n401 -> n402  [key=0, style=solid];
n402 -> n403  [key=0, style=solid];
n402 -> n12  [key=2, style=dotted];
n402 -> n404  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n403 -> n401  [key=0, style=bold, color=blue];
n404 -> n405  [key=0, style=solid];
n404 -> n406  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n405 -> n406  [key=0, style=solid];
n405 -> n25  [key=2, style=dotted];
n405 -> n409  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n406 -> n407  [key=0, style=solid];
n406 -> n3  [key=2, style=dotted];
n406 -> n23  [key=2, style=dotted];
n409 -> n410  [key=0, style=solid];
n409 -> n411  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n407 -> n408  [key=0, style=solid];
n407 -> n82  [key=2, style=dotted];
n408 -> n404  [key=0, style=bold, color=blue];
n410 -> n411  [key=0, style=solid];
n410 -> n305  [key=2, style=dotted];
n411 -> n412  [key=0, style=solid];
n411 -> n374  [key=2, style=dotted];
n412 -> n409  [key=0, style=bold, color=blue];
n413 -> n414  [key=0, style=solid];
n414 -> n415  [key=0, style=solid];
n414 -> n12  [key=2, style=dotted];
n414 -> n416  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n415 -> n413  [key=0, style=bold, color=blue];
n416 -> n417  [key=0, style=solid];
n416 -> n418  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n417 -> n418  [key=0, style=solid];
n417 -> n25  [key=2, style=dotted];
n417 -> n421  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n418 -> n419  [key=0, style=solid];
n418 -> n3  [key=2, style=dotted];
n418 -> n23  [key=2, style=dotted];
n421 -> n422  [key=0, style=solid];
n421 -> n423  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
n419 -> n420  [key=0, style=solid];
n419 -> n82  [key=2, style=dotted];
n420 -> n416  [key=0, style=bold, color=blue];
n422 -> n423  [key=0, style=solid];
n422 -> n305  [key=2, style=dotted];
n423 -> n424  [key=0, style=solid];
n423 -> n374  [key=2, style=dotted];
n424 -> n421  [key=0, style=bold, color=blue];
n425 -> n426  [key=0, style=solid];
n425 -> n427  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection>"];
n426 -> n427  [key=0, style=solid];
n426 -> n429  [key=2, style=dotted];
n427 -> n428  [key=0, style=solid];
n427 -> n430  [key=2, style=dotted];
n428 -> n425  [key=0, style=bold, color=blue];
n431 -> n432  [key=0, style=solid];
n431 -> n7  [key=2, style=dotted];
n431 -> n433  [key=1, style=dashed, color=darkseagreen4, label=transaction];
n432 -> n433  [key=0, style=solid];
n432 -> n430  [key=2, style=dotted];
n433 -> n434  [key=0, style=solid];
n433 -> n435  [key=2, style=dotted];
n434 -> n25  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [key=0, style=bold, color=blue];
m1_30 -> m1_42  [key=0, style=solid];
m1_30 -> m1_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.IJobCancellationToken"];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_62  [key=2, style=dotted];
m1_42 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m1_42 -> m1_46  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m1_50 -> m1_56  [key=0, style=solid];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_63  [key=2, style=dotted];
m1_43 -> m1_56  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_43 -> m1_58  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_58  [key=0, style=solid];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_49  [key=1, style=dashed, color=darkseagreen4, label=parameter];
m1_46 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label=parameter];
m1_46 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label=parameter];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_46  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_44 -> m1_47  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_44 -> m1_57  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_67  [key=2, style=dotted];
m1_58 -> m1_61  [key=0, style=solid];
m1_58 -> m1_68  [key=2, style=dotted];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label=argument];
m1_47 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label=argument];
m1_57 -> m1_45  [key=0, style=solid];
m1_57 -> m1_57  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_51  [key=0, style=solid];
m1_49 -> m1_64  [key=2, style=dotted];
m1_49 -> m1_65  [key=2, style=dotted];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_56  [key=0, style=solid];
m1_51 -> m1_66  [key=2, style=dotted];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_55  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_54 -> m1_56  [key=0, style=solid];
m1_52 -> m1_53  [key=0, style=solid];
m1_55 -> m1_61  [key=0, style=solid];
m1_59 -> m1_60  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_41  [key=2, style=dotted];
m1_61 -> m1_30  [key=0, style=bold, color=blue];
m1_29 -> m1_32  [key=0, style=solid];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_39  [key=2, style=dotted];
m1_32 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_35  [key=0, style=solid];
m1_35 -> m1_38  [key=0, style=solid];
m1_34 -> m1_38  [key=0, style=solid];
m1_34 -> m1_40  [key=2, style=dotted];
m1_36 -> m1_37  [key=0, style=solid];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_41  [key=2, style=dotted];
m1_38 -> m1_29  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_0 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m1_0 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m1_0 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_0 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m1_0 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_0 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_0 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m1_0 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=0, style=solid];
m1_2 -> m1_11  [key=0, style=solid];
m1_2 -> m1_12  [key=2, style=dotted];
m1_2 -> m1_13  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=0, style=solid];
m1_4 -> m1_12  [key=2, style=dotted];
m1_4 -> m1_13  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_7  [key=0, style=solid];
m1_6 -> m1_11  [key=0, style=solid];
m1_6 -> m1_12  [key=2, style=dotted];
m1_6 -> m1_13  [key=2, style=dotted];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_13  [key=2, style=dotted];
m1_7 -> m1_14  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_15  [key=2, style=dotted];
m1_11 -> m1_0  [key=0, style=bold, color=blue];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobActivator"];
m1_16 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.IJobCancellationToken"];
m1_16 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.IJobCancellationToken"];
m1_16 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobActivator"];
m1_16 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.IJobCancellationToken"];
m1_16 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.IJobCancellationToken"];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=0, style=solid];
m1_18 -> m1_28  [key=0, style=solid];
m1_18 -> m1_12  [key=2, style=dotted];
m1_18 -> m1_13  [key=2, style=dotted];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_21  [key=0, style=solid];
m1_20 -> m1_28  [key=0, style=solid];
m1_20 -> m1_12  [key=2, style=dotted];
m1_20 -> m1_13  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_29  [key=2, style=dotted];
m1_24 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_30  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_31  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=instance];
m1_22 -> m1_23  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_28 -> m1_16  [key=0, style=bold, color=blue];
m1_31 -> m1_69  [key=0, style=solid];
m1_31 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m1_69 -> m1_76  [key=0, style=solid];
m1_69 -> m1_77  [key=2, style=dotted];
m1_73 -> m1_74  [key=0, style=solid];
m1_73 -> m1_75  [key=0, style=solid];
m1_73 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m1_70 -> m1_71  [key=0, style=solid];
m1_71 -> m1_72  [key=0, style=solid];
m1_71 -> m1_73  [key=0, style=solid];
m1_72 -> m1_76  [key=0, style=solid];
m1_74 -> m1_76  [key=0, style=solid];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_41  [key=2, style=dotted];
m1_76 -> m1_31  [key=0, style=bold, color=blue];
m1_78 -> m1_79  [key=0, style=solid];
m1_79 -> m1_80  [key=0, style=solid];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_83  [key=0, style=solid];
m1_80 -> m1_84  [key=2, style=dotted];
m1_81 -> m1_82  [key=0, style=solid];
m1_82 -> m1_83  [key=0, style=solid];
m1_82 -> m1_41  [key=2, style=dotted];
m1_83 -> m1_78  [key=0, style=bold, color=blue];
m1_85 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_42  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_47  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m1_85 -> m1_69  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> n81  [key=2, style=dotted];
m2_3 -> m2_6  [key=2, style=dotted];
m2_4 -> m2_2  [key=0, style=bold, color=blue];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_41  [key=1, style=dashed, color=darkseagreen4, label=IRedisTransaction];
m2_38 -> m2_42  [key=1, style=dashed, color=darkseagreen4, label=IRedisTransaction];
m2_38 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_38 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label=IRedisTransaction];
m2_38 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_41  [key=0, style=solid];
m2_41 -> m2_42  [key=0, style=solid];
m2_41 -> m2_17  [key=2, style=dotted];
m2_41 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_17  [key=2, style=dotted];
m2_42 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_17  [key=2, style=dotted];
m2_43 -> m2_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_40 -> m2_44  [key=0, style=solid];
m2_40 -> m2_16  [key=2, style=dotted];
m2_44 -> m2_38  [key=0, style=bold, color=blue];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_17  [key=2, style=dotted];
m2_11 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label=IRedisTransaction];
m2_7 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label=IRedisTransaction];
m2_7 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label=IRedisTransaction];
m2_7 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=IRedisTransaction];
m2_7 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label=IRedisTransaction];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_10  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_17  [key=2, style=dotted];
m2_10 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_17  [key=2, style=dotted];
m2_12 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_17  [key=2, style=dotted];
m2_13 -> m2_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_17  [key=2, style=dotted];
m2_14 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_9 -> m2_15  [key=0, style=solid];
m2_9 -> m2_16  [key=2, style=dotted];
m2_15 -> m2_7  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
m2_53 -> m2_54  [key=0, style=solid];
m2_18 -> m2_19  [key=0, style=solid];
m2_23 -> m2_24  [key=0, style=solid];
m2_26 -> m2_27  [key=0, style=solid];
m2_30 -> m2_31  [key=0, style=solid];
m2_34 -> m2_35  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_21  [key=2, style=dotted];
m2_19 -> m2_22  [key=2, style=dotted];
m2_20 -> m2_18  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_21  [key=2, style=dotted];
m2_24 -> m2_22  [key=2, style=dotted];
m2_25 -> m2_23  [key=0, style=bold, color=blue];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_29  [key=2, style=dotted];
m2_28 -> m2_26  [key=0, style=bold, color=blue];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_33  [key=2, style=dotted];
m2_32 -> m2_30  [key=0, style=bold, color=blue];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_37  [key=2, style=dotted];
m2_36 -> m2_34  [key=0, style=bold, color=blue];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_21  [key=2, style=dotted];
m2_50 -> m2_52  [key=2, style=dotted];
m2_54 -> m2_55  [key=0, style=solid];
m2_54 -> m2_21  [key=2, style=dotted];
m2_54 -> m2_52  [key=2, style=dotted];
m2_45 -> m2_46  [key=0, style=solid];
m2_49 -> m2_50  [key=0, style=solid];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_48  [key=2, style=dotted];
m2_47 -> m2_45  [key=0, style=bold, color=blue];
m2_51 -> m2_49  [key=0, style=bold, color=blue];
m2_55 -> m2_53  [key=0, style=bold, color=blue];
m2_56 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.SucceededState"];
m2_56 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.SucceededState"];
m2_56 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.SucceededState"];
m2_56 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.SucceededState"];
m2_56 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.SucceededState"];
m2_56 -> m2_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.SucceededState"];
m2_57 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_57 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m3_12 -> m3_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m3_12 -> m3_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m3_12 -> m3_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Logging.ILog"];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_19  [key=2, style=dotted];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_19  [key=2, style=dotted];
m3_15 -> m3_16  [key=0, style=solid];
m3_15 -> m3_20  [key=2, style=dotted];
m3_15 -> m3_21  [key=2, style=dotted];
m3_15 -> m3_19  [key=2, style=dotted];
m3_15 -> m3_22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_19  [key=2, style=dotted];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_19  [key=2, style=dotted];
m3_18 -> m3_12  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_11  [key=2, style=dotted];
m3_2 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid, color=red];
m3_4 -> m3_5  [key=0, style=solid, color=red];
m3_5 -> m3_6  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid];
m3_7 -> m3_8  [key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_9 -> m3_10  [key=0, style=solid];
m3_10 -> m3_0  [key=0, style=bold, color=blue];
m3_22 -> m3_23  [key=0, style=solid];
m3_23 -> m3_24  [key=0, style=solid];
m3_24 -> m3_22  [key=0, style=bold, color=blue];
m3_25 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_4  [key=1, style=dashed, color=red, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m3_25 -> m3_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m4_19 -> m4_33  [key=1, style=dashed, color=green, label="Hangfire.Server.BackgroundProcessContext"];
m4_19 -> m4_38  [key=3, color=green, style=bold, label="method methodReturn bool EnqueueNextScheduledJob"];
m4_19 -> m4_11  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.Server.BackgroundProcessContext context"];
m4_19 -> m4_26  [key=0, style=solid];
m4_19 -> m4_31  [key=3, color=darkorchid, style=bold, label="method methodReturn bool EnqueueNextScheduledJob"];
m4_33 -> m4_34  [key=0, style=solid, color=green];
m4_33 -> m4_46  [key=2, style=dotted, color=green];
m4_33 -> m4_47  [key=2, style=dotted, color=green];
m4_26 -> m4_33  [key=1, style=dashed, color=green, label=connection];
m4_26 -> m4_29  [key=1, style=dashed, color=green, label=connection];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_40  [key=2, style=dotted];
m4_26 -> m4_35  [key=1, style=dashed, color=darkseagreen4, label=connection];
m4_29 -> m4_33  [key=1, style=dashed, color=green, label=jobId];
m4_29 -> m4_30  [key=0, style=solid, color=green];
m4_29 -> m4_43  [key=2, style=dotted, color=green];
m4_29 -> m4_36  [key=1, style=dashed, color=green, label=jobId];
m4_32 -> m4_33  [key=0, style=solid, color=green];
m4_32 -> m4_45  [key=2, style=dotted, color=green];
m4_34 -> m4_35  [key=0, style=solid, color=green];
m4_34 -> m4_38  [key=0, style=solid, color=green];
m4_28 -> m4_29  [key=0, style=solid, color=green];
m4_28 -> m4_42  [key=2, style=dotted, color=green];
m4_30 -> m4_32  [key=0, style=solid, color=green];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_44  [key=2, style=dotted];
m4_36 -> m4_37  [key=0, style=solid, color=green];
m4_36 -> m4_49  [key=2, style=dotted, color=green];
m4_27 -> m4_28  [key=0, style=solid, color=green];
m4_27 -> m4_41  [key=2, style=dotted];
m4_35 -> m4_36  [key=0, style=solid, color=green];
m4_35 -> m4_37  [key=1, style=dashed, color=green, label=transaction];
m4_35 -> m4_48  [key=2, style=dotted];
m4_37 -> m4_38  [key=0, style=solid, color=green];
m4_37 -> m4_50  [key=2, style=dotted, color=green];
m4_38 -> m4_39  [key=0, style=solid, color=green];
m4_31 -> m4_39  [key=0, style=solid];
m4_39 -> m4_19  [key=0, style=bold, color=blue];
m4_11 -> m4_16  [key=1, style=dashed, color=green, label="Hangfire.Server.BackgroundProcessContext"];
m4_11 -> m4_12  [key=0, style=solid];
m4_16 -> m4_18  [key=0, style=solid, color=green];
m4_16 -> m4_21  [key=2, style=dotted, color=green];
m4_13 -> m4_16  [key=0, style=solid, color=green];
m4_13 -> m4_14  [key=0, style=solid, color=green];
m4_15 -> m4_16  [key=0, style=solid, color=green];
m4_14 -> m4_15  [key=0, style=solid, color=green];
m4_14 -> m4_20  [key=2, style=dotted, color=green];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_19  [key=2, style=dotted];
m4_12 -> m4_17  [key=0, style=solid];
m4_17 -> m4_18  [key=0, style=solid];
m4_18 -> m4_11  [key=0, style=bold, color=blue];
m4_4 -> m4_5  [key=0, style=solid, color=green];
m4_4 -> m4_7  [key=1, style=dashed, color=green, label="Hangfire.States.IBackgroundJobStateChanger"];
m4_4 -> m4_8  [key=1, style=dashed, color=green, label="System.TimeSpan"];
m4_5 -> m4_6  [key=0, style=solid, color=green];
m4_5 -> m4_7  [key=0, style=solid, color=green];
m4_6 -> m4_9  [key=0, style=solid, color=green];
m4_6 -> m4_10  [key=2, style=dotted, color=green];
m4_7 -> m4_8  [key=0, style=solid, color=green];
m4_8 -> m4_9  [key=0, style=solid, color=green];
m4_9 -> m4_4  [key=0, style=bold, color=blue];
m4_22 -> m4_23  [key=0, style=solid, color=green];
m4_23 -> m4_24  [key=0, style=solid, color=green];
m4_23 -> m4_25  [key=2, style=dotted, color=green];
m4_24 -> m4_22  [key=0, style=bold, color=blue];
m4_51 -> m4_7  [key=1, style=dashed, color=green, label="Hangfire.Server.DelayedJobScheduler"];
m4_51 -> m4_8  [key=1, style=dashed, color=green, label="Hangfire.Server.DelayedJobScheduler"];
m4_51 -> m4_16  [key=1, style=dashed, color=green, label="Hangfire.Server.DelayedJobScheduler"];
m4_51 -> m4_14  [key=1, style=dashed, color=green, label="Hangfire.Server.DelayedJobScheduler"];
m4_51 -> m4_23  [key=1, style=dashed, color=green, label="Hangfire.Server.DelayedJobScheduler"];
m4_51 -> m4_33  [key=1, style=dashed, color=green, label="Hangfire.Server.DelayedJobScheduler"];
m4_51 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.DelayedJobScheduler"];
m4_51 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.DelayedJobScheduler"];
m4_51 -> m4_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.DelayedJobScheduler"];
m4_51 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.DelayedJobScheduler"];
m5_2 -> m5_3  [key=0, style=solid];
m5_3 -> m5_2  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_0  [key=0, style=bold, color=blue];
m6_10 -> m6_11  [key=0, style=solid];
m6_10 -> m6_14  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_6  [key=2, style=dotted];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_9  [key=2, style=dotted];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_7  [key=2, style=dotted];
m6_2 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_8  [key=2, style=dotted];
m6_5 -> m6_0  [key=0, style=bold, color=blue];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_6  [key=2, style=dotted];
m6_14 -> m6_15  [key=0, style=solid];
m6_14 -> m6_9  [key=2, style=dotted];
m6_12 -> m6_13  [key=0, style=solid];
m6_12 -> m6_7  [key=2, style=dotted];
m6_12 -> m6_14  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_8  [key=2, style=dotted];
m6_15 -> m6_10  [key=0, style=bold, color=blue];
}
