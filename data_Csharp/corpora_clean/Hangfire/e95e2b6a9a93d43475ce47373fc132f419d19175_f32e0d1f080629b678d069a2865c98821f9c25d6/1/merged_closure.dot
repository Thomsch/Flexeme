digraph  {
n436 [label="HangFire.SqlServer.Tests.WriteTransactionFacts", span=""];
n437 [label=arrangeSql, span=""];
n438 [label=jobId, span=""];
n439 [label=arrangeSql, span=""];
n440 [label=jobId, span=""];
n441 [label=arrangeSql, span=""];
n442 [label=jobId, span=""];
n443 [label=state, span=""];
n444 [label=arrangeSql, span=""];
n445 [label=jobId, span=""];
n446 [label=state, span=""];
n0 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="15-15"];
n1 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", label="Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null))", span="17-18"];
n2 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="15-15"];
n3 [cluster="Unk.>", label="Entry Unk.>", span=""];
n4 [cluster="lambda expression", label="Entry lambda expression", span="18-18"];
n5 [cluster="lambda expression", label="new SqlServerWriteOnlyTransaction(null)", span="18-18"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="18-18"];
n7 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34"];
n8 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", span="22-22"];
n9 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="24-27"];
n11 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", span="22-22"];
n12 [cluster="Unk.UseConnection", label="Entry Unk.UseConnection", span=""];
n13 [cluster="lambda expression", label="Entry lambda expression", span="29-41"];
n19 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="39-39"];
n22 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
n23 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n24 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
n25 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="536-536"];
n30 [cluster="lambda expression", label="Entry lambda expression", span="34-34"];
n18 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddDays(1))", span="37-37"];
n26 [cluster="Unk.GetTestJob", label="Entry Unk.GetTestJob", span=""];
n27 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
n28 [cluster="Unk.True", label="Entry Unk.True", span=""];
n20 [cluster="lambda expression", label="Assert.Null(anotherJob.ExpireAt)", span="40-40"];
n21 [cluster="lambda expression", label="Exit lambda expression", span="29-41"];
n29 [cluster="Unk.Null", label="Entry Unk.Null", span=""];
n32 [cluster="lambda expression", label="Exit lambda expression", span="34-34"];
n33 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
n34 [cluster="Unk.ExpireJob", label="Entry Unk.ExpireJob", span=""];
n35 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="45-45"];
n40 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54"];
n41 [cluster="lambda expression", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="55-55"];
n38 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="45-45"];
n39 [cluster="lambda expression", label="Entry lambda expression", span="52-64"];
n43 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="59-59"];
n45 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="62-62"];
n49 [cluster="lambda expression", label="Entry lambda expression", span="57-57"];
n44 [cluster="lambda expression", label="Assert.Null(job.ExpireAt)", span="60-60"];
n46 [cluster="lambda expression", label="Assert.NotNull(anotherJob.ExpireAt)", span="63-63"];
n47 [cluster="lambda expression", label="Exit lambda expression", span="52-64"];
n48 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
n51 [cluster="lambda expression", label="Exit lambda expression", span="57-57"];
n52 [cluster="Unk.PersistJob", label="Entry Unk.PersistJob", span=""];
n53 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="68-68"];
n55 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<State>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n                state.Object.Reason = ''Reason'';\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="75-102"];
n58 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="77-77"];
n59 [cluster="lambda expression", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="78-78"];
n56 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="68-68"];
n57 [cluster="lambda expression", label="Entry lambda expression", span="75-102"];
n64 [cluster="lambda expression", label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="86-86"];
n65 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="88-88"];
n68 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="92-92"];
n71 [cluster="lambda expression", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="96-96"];
n91 [cluster="lambda expression", label="x.SetJobState(jobId, state.Object)", span="86-86"];
n72 [cluster="lambda expression", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="97-97"];
n60 [cluster="lambda expression", label="var state = new Mock<State>()", span="80-80"];
n61 [cluster="lambda expression", label="state.Setup(x => x.Name).Returns(''State'')", span="81-81"];
n78 [cluster="Mock<State>.cstr", label="Entry Mock<State>.cstr", span=""];
n62 [cluster="lambda expression", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="82-83"];
n63 [cluster="lambda expression", label="state.Object.Reason = ''Reason''", span="84-84"];
n79 [cluster="Unk.Setup", label="Entry Unk.Setup", span=""];
n80 [cluster="Unk.Returns", label="Entry Unk.Returns", span=""];
n83 [cluster="lambda expression", label="Entry lambda expression", span="81-81"];
n81 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n86 [cluster="lambda expression", label="Entry lambda expression", span="82-82"];
n90 [cluster="lambda expression", label="Entry lambda expression", span="86-86"];
n66 [cluster="lambda expression", label="Assert.Equal(''State'', job.StateName)", span="89-89"];
n67 [cluster="lambda expression", label="Assert.NotNull(job.StateId)", span="90-90"];
n82 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n69 [cluster="lambda expression", label="Assert.Null(anotherJob.StateName)", span="93-93"];
n70 [cluster="lambda expression", label="Assert.Null(anotherJob.StateId)", span="94-94"];
n73 [cluster="lambda expression", label="Assert.Equal(''State'', jobState.Name)", span="98-98"];
n74 [cluster="lambda expression", label="Assert.Equal(''Reason'', jobState.Reason)", span="99-99"];
n75 [cluster="lambda expression", label="Assert.NotNull(jobState.CreatedAt)", span="100-100"];
n76 [cluster="lambda expression", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="101-101"];
n77 [cluster="lambda expression", label="Exit lambda expression", span="75-102"];
n84 [cluster="lambda expression", label="x.Name", span="81-81"];
n85 [cluster="lambda expression", label="Exit lambda expression", span="81-81"];
n87 [cluster="lambda expression", label="x.SerializeData()", span="82-82"];
n88 [cluster="lambda expression", label="Exit lambda expression", span="82-82"];
n89 [cluster="Unk.SerializeData", label="Entry Unk.SerializeData", span=""];
n92 [cluster="lambda expression", label="Exit lambda expression", span="86-86"];
n93 [cluster="Unk.SetJobState", label="Entry Unk.SetJobState", span=""];
n94 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="106-106"];
n95 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="108-111"];
n96 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<State>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n                state.Object.Reason = ''Reason'';\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="113-135"];
n99 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="115-115"];
n97 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="106-106"];
n98 [cluster="lambda expression", label="Entry lambda expression", span="113-135"];
n104 [cluster="lambda expression", label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="123-123"];
n105 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="125-125"];
n108 [cluster="lambda expression", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="129-129"];
n100 [cluster="lambda expression", label="var state = new Mock<State>()", span="117-117"];
n122 [cluster="lambda expression", label="x.AddJobState(jobId, state.Object)", span="123-123"];
n109 [cluster="lambda expression", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="130-130"];
n101 [cluster="lambda expression", label="state.Setup(x => x.Name).Returns(''State'')", span="118-118"];
n102 [cluster="lambda expression", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="119-120"];
n103 [cluster="lambda expression", label="state.Object.Reason = ''Reason''", span="121-121"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="118-118"];
n118 [cluster="lambda expression", label="Entry lambda expression", span="119-119"];
n121 [cluster="lambda expression", label="Entry lambda expression", span="123-123"];
n106 [cluster="lambda expression", label="Assert.Null(job.StateName)", span="126-126"];
n107 [cluster="lambda expression", label="Assert.Null(job.StateId)", span="127-127"];
n110 [cluster="lambda expression", label="Assert.Equal(''State'', jobState.Name)", span="131-131"];
n111 [cluster="lambda expression", label="Assert.Equal(''Reason'', jobState.Reason)", span="132-132"];
n112 [cluster="lambda expression", label="Assert.NotNull(jobState.CreatedAt)", span="133-133"];
n113 [cluster="lambda expression", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="134-134"];
n114 [cluster="lambda expression", label="Exit lambda expression", span="113-135"];
n116 [cluster="lambda expression", label="x.Name", span="118-118"];
n117 [cluster="lambda expression", label="Exit lambda expression", span="118-118"];
n119 [cluster="lambda expression", label="x.SerializeData()", span="119-119"];
n120 [cluster="lambda expression", label="Exit lambda expression", span="119-119"];
n123 [cluster="lambda expression", label="Exit lambda expression", span="123-123"];
n124 [cluster="Unk.AddJobState", label="Entry Unk.AddJobState", span=""];
n125 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", span="139-139"];
n126 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.JobQueue'').Single();\r\n                Assert.Equal(''1'', record.JobId.ToString());\r\n                Assert.Equal(''default'', record.Queue);\r\n                Assert.Null(record.FetchedAt);\r\n            })", span="141-149"];
n127 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", span="139-139"];
n128 [cluster="lambda expression", label="Entry lambda expression", span="141-149"];
n129 [cluster="lambda expression", label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="143-143"];
n130 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.JobQueue'').Single()", span="145-145"];
n135 [cluster="lambda expression", label="Entry lambda expression", span="143-143"];
n131 [cluster="lambda expression", label="Assert.Equal(''1'', record.JobId.ToString())", span="146-146"];
n132 [cluster="lambda expression", label="Assert.Equal(''default'', record.Queue)", span="147-147"];
n133 [cluster="lambda expression", label="Assert.Null(record.FetchedAt)", span="148-148"];
n134 [cluster="lambda expression", label="Exit lambda expression", span="141-149"];
n136 [cluster="lambda expression", label="x.AddToQueue(''default'', ''1'')", span="143-143"];
n137 [cluster="lambda expression", label="Exit lambda expression", span="143-143"];
n138 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="114-114"];
n139 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", span="152-152"];
n140 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="154-156"];
n141 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", span="152-152"];
n142 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="160-160"];
n143 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n            })", span="162-170"];
n144 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="160-160"];
n145 [cluster="lambda expression", label="Entry lambda expression", span="162-170"];
n146 [cluster="lambda expression", label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="164-164"];
n147 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="166-166"];
n151 [cluster="lambda expression", label="Entry lambda expression", span="164-164"];
n148 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="168-168"];
n149 [cluster="lambda expression", label="Assert.Equal(1, record.Value)", span="169-169"];
n150 [cluster="lambda expression", label="Exit lambda expression", span="162-170"];
n152 [cluster="lambda expression", label="x.IncrementCounter(''my-key'')", span="164-164"];
n153 [cluster="lambda expression", label="Exit lambda expression", span="164-164"];
n154 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125"];
n155 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="174-174"];
n156 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="176-187"];
n157 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="174-174"];
n158 [cluster="lambda expression", label="Entry lambda expression", span="176-187"];
n159 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="178-182"];
n160 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="184-184"];
n163 [cluster="lambda expression", label="Entry lambda expression", span="178-182"];
n161 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="186-186"];
n162 [cluster="lambda expression", label="Exit lambda expression", span="176-187"];
n164 [cluster="lambda expression", label="x.IncrementCounter(''my-key'')", span="180-180"];
n165 [cluster="lambda expression", label="x.IncrementCounter(''my-key'')", span="181-181"];
n166 [cluster="lambda expression", label="Exit lambda expression", span="178-182"];
n167 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="191-191"];
n168 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n            })", span="193-201"];
n169 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="191-191"];
n170 [cluster="lambda expression", label="Entry lambda expression", span="193-201"];
n171 [cluster="lambda expression", label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="195-195"];
n172 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="197-197"];
n176 [cluster="lambda expression", label="Entry lambda expression", span="195-195"];
n173 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="199-199"];
n174 [cluster="lambda expression", label="Assert.Equal(-1, record.Value)", span="200-200"];
n175 [cluster="lambda expression", label="Exit lambda expression", span="193-201"];
n177 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="195-195"];
n178 [cluster="lambda expression", label="Exit lambda expression", span="195-195"];
n179 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139"];
n180 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="205-205"];
n181 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="207-218"];
n182 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="205-205"];
n183 [cluster="lambda expression", label="Entry lambda expression", span="207-218"];
n184 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="209-213"];
n185 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="215-215"];
n188 [cluster="lambda expression", label="Entry lambda expression", span="209-213"];
n186 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="217-217"];
n187 [cluster="lambda expression", label="Exit lambda expression", span="207-218"];
n189 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="211-211"];
n190 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="212-212"];
n191 [cluster="lambda expression", label="Exit lambda expression", span="209-213"];
n192 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="222-222"];
n193 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="224-233"];
n194 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="222-222"];
n195 [cluster="lambda expression", label="Entry lambda expression", span="224-233"];
n196 [cluster="lambda expression", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="226-226"];
n197 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="228-228"];
n202 [cluster="lambda expression", label="Entry lambda expression", span="226-226"];
n198 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="230-230"];
n199 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="231-231"];
n200 [cluster="lambda expression", label="Assert.Equal(0.0, record.Score, 2)", span="232-232"];
n201 [cluster="lambda expression", label="Exit lambda expression", span="224-233"];
n203 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="226-226"];
n204 [cluster="lambda expression", label="Exit lambda expression", span="226-226"];
n205 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153"];
n206 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="237-237"];
n207 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="239-250"];
n208 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="237-237"];
n209 [cluster="lambda expression", label="Entry lambda expression", span="239-250"];
n210 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="241-245"];
n211 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="247-247"];
n214 [cluster="lambda expression", label="Entry lambda expression", span="241-245"];
n212 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="249-249"];
n213 [cluster="lambda expression", label="Exit lambda expression", span="239-250"];
n215 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="243-243"];
n216 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''another-value'')", span="244-244"];
n217 [cluster="lambda expression", label="Exit lambda expression", span="241-245"];
n218 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="254-254"];
n219 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="256-267"];
n220 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="254-254"];
n221 [cluster="lambda expression", label="Entry lambda expression", span="256-267"];
n222 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="258-262"];
n223 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="264-264"];
n226 [cluster="lambda expression", label="Entry lambda expression", span="258-262"];
n224 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="266-266"];
n225 [cluster="lambda expression", label="Exit lambda expression", span="256-267"];
n227 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="260-260"];
n228 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="261-261"];
n229 [cluster="lambda expression", label="Exit lambda expression", span="258-262"];
n230 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="271-271"];
n231 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="273-282"];
n232 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="271-271"];
n233 [cluster="lambda expression", label="Entry lambda expression", span="273-282"];
n234 [cluster="lambda expression", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="275-275"];
n235 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="277-277"];
n240 [cluster="lambda expression", label="Entry lambda expression", span="275-275"];
n236 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="279-279"];
n237 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="280-280"];
n238 [cluster="lambda expression", label="Assert.Equal(3.2, record.Score, 3)", span="281-281"];
n239 [cluster="lambda expression", label="Exit lambda expression", span="273-282"];
n241 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="275-275"];
n242 [cluster="lambda expression", label="Exit lambda expression", span="275-275"];
n243 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158"];
n244 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="286-286"];
n245 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="288-299"];
n246 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="286-286"];
n247 [cluster="lambda expression", label="Entry lambda expression", span="288-299"];
n248 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="290-294"];
n249 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="296-296"];
n252 [cluster="lambda expression", label="Entry lambda expression", span="290-294"];
n250 [cluster="lambda expression", label="Assert.Equal(3.2, record.Score, 3)", span="298-298"];
n251 [cluster="lambda expression", label="Exit lambda expression", span="288-299"];
n253 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="292-292"];
n254 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="293-293"];
n255 [cluster="lambda expression", label="Exit lambda expression", span="290-294"];
n256 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="303-303"];
n257 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="305-316"];
n258 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="303-303"];
n259 [cluster="lambda expression", label="Entry lambda expression", span="305-316"];
n260 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="307-311"];
n261 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="313-313"];
n264 [cluster="lambda expression", label="Entry lambda expression", span="307-311"];
n262 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="315-315"];
n263 [cluster="lambda expression", label="Exit lambda expression", span="305-316"];
n265 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="309-309"];
n266 [cluster="lambda expression", label="x.RemoveFromSet(''my-key'', ''my-value'')", span="310-310"];
n267 [cluster="lambda expression", label="Exit lambda expression", span="307-311"];
n268 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="172-172"];
n269 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="320-320"];
n270 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="322-333"];
n271 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="320-320"];
n272 [cluster="lambda expression", label="Entry lambda expression", span="322-333"];
n273 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="324-328"];
n274 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="330-330"];
n277 [cluster="lambda expression", label="Entry lambda expression", span="324-328"];
n275 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="332-332"];
n276 [cluster="lambda expression", label="Exit lambda expression", span="322-333"];
n278 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="326-326"];
n279 [cluster="lambda expression", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="327-327"];
n280 [cluster="lambda expression", label="Exit lambda expression", span="324-328"];
n281 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="337-337"];
n282 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="339-350"];
n283 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="337-337"];
n284 [cluster="lambda expression", label="Entry lambda expression", span="339-350"];
n285 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="341-345"];
n286 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="347-347"];
n289 [cluster="lambda expression", label="Entry lambda expression", span="341-345"];
n287 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="349-349"];
n288 [cluster="lambda expression", label="Exit lambda expression", span="339-350"];
n290 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="343-343"];
n291 [cluster="lambda expression", label="x.RemoveFromSet(''different-key'', ''my-value'')", span="344-344"];
n292 [cluster="lambda expression", label="Exit lambda expression", span="341-345"];
n293 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="354-354"];
n294 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="356-364"];
n295 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="354-354"];
n296 [cluster="lambda expression", label="Entry lambda expression", span="356-364"];
n297 [cluster="lambda expression", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="358-358"];
n298 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.List'').Single()", span="360-360"];
n302 [cluster="lambda expression", label="Entry lambda expression", span="358-358"];
n299 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="362-362"];
n300 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="363-363"];
n301 [cluster="lambda expression", label="Exit lambda expression", span="356-364"];
n303 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="358-358"];
n304 [cluster="lambda expression", label="Exit lambda expression", span="358-358"];
n305 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
n306 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="368-368"];
n307 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="370-381"];
n308 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="368-368"];
n309 [cluster="lambda expression", label="Entry lambda expression", span="370-381"];
n310 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="372-376"];
n311 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="378-378"];
n314 [cluster="lambda expression", label="Entry lambda expression", span="372-376"];
n312 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="380-380"];
n313 [cluster="lambda expression", label="Exit lambda expression", span="370-381"];
n315 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="374-374"];
n316 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="375-375"];
n317 [cluster="lambda expression", label="Exit lambda expression", span="372-376"];
n318 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="385-385"];
n319 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="387-399"];
n320 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="385-385"];
n321 [cluster="lambda expression", label="Entry lambda expression", span="387-399"];
n322 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="389-394"];
n323 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="396-396"];
n326 [cluster="lambda expression", label="Entry lambda expression", span="389-394"];
n324 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="398-398"];
n325 [cluster="lambda expression", label="Exit lambda expression", span="387-399"];
n327 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="391-391"];
n328 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="392-392"];
n329 [cluster="lambda expression", label="x.RemoveFromList(''my-key'', ''my-value'')", span="393-393"];
n330 [cluster="lambda expression", label="Exit lambda expression", span="389-394"];
n331 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="186-186"];
n332 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="403-403"];
n333 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="405-416"];
n334 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="403-403"];
n335 [cluster="lambda expression", label="Entry lambda expression", span="405-416"];
n336 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="407-411"];
n337 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="413-413"];
n340 [cluster="lambda expression", label="Entry lambda expression", span="407-411"];
n338 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="415-415"];
n339 [cluster="lambda expression", label="Exit lambda expression", span="405-416"];
n341 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="409-409"];
n342 [cluster="lambda expression", label="x.RemoveFromList(''my-key'', ''different-value'')", span="410-410"];
n343 [cluster="lambda expression", label="Exit lambda expression", span="407-411"];
n344 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="420-420"];
n345 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="422-433"];
n346 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="420-420"];
n347 [cluster="lambda expression", label="Entry lambda expression", span="422-433"];
n348 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="424-428"];
n349 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="430-430"];
n352 [cluster="lambda expression", label="Entry lambda expression", span="424-428"];
n350 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="432-432"];
n351 [cluster="lambda expression", label="Exit lambda expression", span="422-433"];
n353 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="426-426"];
n354 [cluster="lambda expression", label="x.RemoveFromList(''different-key'', ''my-value'')", span="427-427"];
n355 [cluster="lambda expression", label="Exit lambda expression", span="424-428"];
n356 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="437-437"];
n357 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="439-455"];
n358 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="437-437"];
n359 [cluster="lambda expression", label="Entry lambda expression", span="439-455"];
n360 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="441-448"];
n361 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="450-450"];
n367 [cluster="lambda expression", label="Entry lambda expression", span="441-448"];
n362 [cluster="lambda expression", label="Assert.Equal(2, records.Length)", span="452-452"];
n366 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n363 [cluster="lambda expression", label="Assert.Equal(''1'', records[0].Value)", span="453-453"];
n364 [cluster="lambda expression", label="Assert.Equal(''2'', records[1].Value)", span="454-454"];
n365 [cluster="lambda expression", label="Exit lambda expression", span="439-455"];
n368 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="443-443"];
n369 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''1'')", span="444-444"];
n370 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''2'')", span="445-445"];
n371 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''3'')", span="446-446"];
n372 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 2)", span="447-447"];
n373 [cluster="lambda expression", label="Exit lambda expression", span="441-448"];
n374 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="193-193"];
n375 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="459-459"];
n376 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="461-474"];
n377 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="459-459"];
n378 [cluster="lambda expression", label="Entry lambda expression", span="461-474"];
n379 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="463-469"];
n380 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="471-471"];
n383 [cluster="lambda expression", label="Entry lambda expression", span="463-469"];
n381 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="473-473"];
n382 [cluster="lambda expression", label="Exit lambda expression", span="461-474"];
n384 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="465-465"];
n385 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''1'')", span="466-466"];
n386 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''2'')", span="467-467"];
n387 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 100)", span="468-468"];
n388 [cluster="lambda expression", label="Exit lambda expression", span="463-469"];
n389 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="478-478"];
n390 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="480-491"];
n391 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="478-478"];
n392 [cluster="lambda expression", label="Entry lambda expression", span="480-491"];
n393 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="482-486"];
n394 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="488-488"];
n397 [cluster="lambda expression", label="Entry lambda expression", span="482-486"];
n395 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="490-490"];
n396 [cluster="lambda expression", label="Exit lambda expression", span="480-491"];
n398 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="484-484"];
n399 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 100)", span="485-485"];
n400 [cluster="lambda expression", label="Exit lambda expression", span="482-486"];
n401 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="495-495"];
n402 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="497-508"];
n403 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="495-495"];
n404 [cluster="lambda expression", label="Entry lambda expression", span="497-508"];
n405 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="499-503"];
n406 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="505-505"];
n409 [cluster="lambda expression", label="Entry lambda expression", span="499-503"];
n407 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="507-507"];
n408 [cluster="lambda expression", label="Exit lambda expression", span="497-508"];
n410 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="501-501"];
n411 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 0)", span="502-502"];
n412 [cluster="lambda expression", label="Exit lambda expression", span="499-503"];
n413 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="512-512"];
n414 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="514-525"];
n415 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="512-512"];
n416 [cluster="lambda expression", label="Entry lambda expression", span="514-525"];
n417 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="516-520"];
n418 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="522-522"];
n421 [cluster="lambda expression", label="Entry lambda expression", span="516-520"];
n419 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="524-524"];
n420 [cluster="lambda expression", label="Exit lambda expression", span="514-525"];
n422 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="518-518"];
n423 [cluster="lambda expression", label="x.TrimList(''another-key'', 1, 0)", span="519-519"];
n424 [cluster="lambda expression", label="Exit lambda expression", span="516-520"];
n425 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="528-528"];
n426 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="var connection = ConnectionUtils.CreateConnection()", span="530-530"];
n427 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="action(connection)", span="532-532"];
n429 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
n428 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="528-528"];
n430 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n431 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", label="var transaction = new SqlServerWriteOnlyTransaction(connection)", span="540-540"];
n432 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", label="action(transaction)", span="542-542"];
n433 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", label="transaction.Commit()", span="543-543"];
n434 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="536-536"];
n435 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="45-45"];
m0_0 [cluster="Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", file="BackgroundJobClientException.cs", label="Entry Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", span="23-23"];
m0_1 [cluster="Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", file="BackgroundJobClientException.cs", label="Exit Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", span="23-23"];
m1_12 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BackgroundJobClientExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_30 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", span="85-85"];
m1_42 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var parameters = Method.GetParameters()", span="89-89"];
m1_50 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="value = cancellationToken", span="101-101"];
m1_43 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var result = new List<object>(Arguments.Length)", span="90-90"];
m1_45 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="i < parameters.Length", span="92-92"];
m1_46 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var parameter = parameters[i]", span="94-94"];
m1_44 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var i = 0", span="92-92"];
m1_56 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="result.Add(value)", span="131-131"];
m1_58 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="return result.ToArray();", span="134-134"];
m1_47 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var argument = Arguments[i]", span="95-95"];
m1_57 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="i++", span="92-92"];
m1_49 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="typeof(IJobCancellationToken).GetTypeInfo().IsAssignableFrom(parameter.ParameterType.GetTypeInfo())", span="99-99"];
m1_51 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="value = argument != null\r\n                                ? JobHelper.FromJson(argument, parameter.ParameterType)\r\n                                : null", span="107-109"];
m1_53 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="parameter.ParameterType == typeof(object)", span="113-113"];
m1_48 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="object value", span="97-97"];
m1_54 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="value = argument", span="117-117"];
m1_52 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label=Exception, span="111-111"];
m1_55 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw;", span="125-125"];
m1_59 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label=Exception, span="136-136"];
m1_60 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw new JobPerformanceException(\r\n                    ''An exception occurred during arguments deserialization.'',\r\n                    ex);", span="138-140"];
m1_61 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", span="85-85"];
m1_15 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", span="117-117"];
m1_29 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.Activate(Hangfire.JobActivator)", span="63-63"];
m1_32 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="var instance = activator.ActivateJob(Type)", span="67-67"];
m1_33 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="instance == null", span="69-69"];
m1_35 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="return instance;", span="74-74"];
m1_34 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="throw new InvalidOperationException($''JobActivator returned NULL instance of the '{Type}' type.'');", span="71-71"];
m1_36 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label=Exception, span="76-76"];
m1_37 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="throw new JobPerformanceException(\r\n                    ''An exception occurred during job activation.'',\r\n                    ex);", span="78-80"];
m1_38 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.Activate(Hangfire.JobActivator)", span="63-63"];
m1_0 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="16-16"];
m1_1 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="type == null", span="18-18"];
m1_2 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="throw new ArgumentNullException(nameof(type));", span="18-18"];
m1_3 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="method == null", span="19-19"];
m1_4 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="throw new ArgumentNullException(nameof(method));", span="19-19"];
m1_5 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="arguments == null", span="20-20"];
m1_6 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="throw new ArgumentNullException(nameof(arguments));", span="20-20"];
m1_7 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Validate(type, nameof(type), method, nameof(method), arguments.Length, nameof(arguments))", span="22-22"];
m1_8 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Type = type", span="24-24"];
m1_9 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Method = method", span="25-25"];
m1_10 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Args = InvocationData.DeserializeArguments(method, arguments)", span="26-26"];
m1_11 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="16-16"];
m1_16 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", span="36-36"];
m1_17 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="activator == null", span="38-38"];
m1_18 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw new ArgumentNullException(nameof(activator));", span="38-38"];
m1_19 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="cancellationToken == null", span="39-39"];
m1_20 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw new ArgumentNullException(nameof(cancellationToken));", span="39-39"];
m1_24 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="instance = Activate(activator)", span="48-48"];
m1_25 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var deserializedArguments = DeserializeArguments(cancellationToken)", span="51-51"];
m1_26 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="result = InvokeMethod(instance, deserializedArguments, cancellationToken.ShutdownToken)", span="52-52"];
m1_21 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="object instance = null", span="41-41"];
m1_22 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="object result", span="43-43"];
m1_23 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="!Method.IsStatic", span="46-46"];
m1_27 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="return result;", span="59-59"];
m1_28 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", span="36-36"];
m1_13 [cluster="Unk.nameof", file="BackgroundJobClientExtensions.cs", label="Entry Unk.nameof", span=""];
m1_40 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="BackgroundJobClientExtensions.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m1_77 [cluster="System.Reflection.MethodBase.Invoke(object, object[])", file="BackgroundJobClientExtensions.cs", label="Entry System.Reflection.MethodBase.Invoke(object, object[])", span="0-0"];
m1_68 [cluster="System.Collections.Generic.List<T>.ToArray()", file="BackgroundJobClientExtensions.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m1_39 [cluster="Hangfire.JobActivator.ActivateJob(System.Type)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.JobActivator.ActivateJob(System.Type)", span="45-45"];
m1_64 [cluster="System.Type.GetTypeInfo()", file="BackgroundJobClientExtensions.cs", label="Entry System.Type.GetTypeInfo()", span="0-0"];
m1_63 [cluster="System.Collections.Generic.List<T>.List(int)", file="BackgroundJobClientExtensions.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m1_31 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", span="145-145"];
m1_69 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="return Method.Invoke(instance, deserializedArguments);", span="149-149"];
m1_73 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="ex.InnerException is OperationCanceledException &&\r\n                    shutdownToken.IsCancellationRequested", span="161-162"];
m1_70 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label=TargetInvocationException, span="151-151"];
m1_71 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="ex.InnerException is JobAbortedException", span="153-153"];
m1_72 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw ex.InnerException;", span="158-158"];
m1_74 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw ex.InnerException;", span="168-168"];
m1_75 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw new JobPerformanceException(\r\n                    ''An exception occurred during performance of the job.'',\r\n                    ex.InnerException);", span="173-175"];
m1_76 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", span="145-145"];
m1_66 [cluster="Hangfire.Common.JobHelper.FromJson(string, System.Type)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.JobHelper.FromJson(string, System.Type)", span="46-46"];
m1_67 [cluster="System.Collections.Generic.List<T>.Add(T)", file="BackgroundJobClientExtensions.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m1_41 [cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22"];
m1_78 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.Dispose(object)", span="180-180"];
m1_79 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label="var disposable = instance as IDisposable", span="184-184"];
m1_80 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label="disposable?.Dispose()", span="185-185"];
m1_81 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label=Exception, span="187-187"];
m1_82 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label="throw new JobPerformanceException(\r\n                    ''Job has been performed, but an exception occurred during disposal.'',\r\n                    ex);", span="189-191"];
m1_83 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.Dispose(object)", span="180-180"];
m1_62 [cluster="System.Reflection.MethodBase.GetParameters()", file="BackgroundJobClientExtensions.cs", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
m1_84 [cluster="System.IDisposable.Dispose()", file="BackgroundJobClientExtensions.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m1_14 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", span="358-358"];
m1_65 [cluster="System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)", file="BackgroundJobClientExtensions.cs", label="Entry System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)", span="0-0"];
m1_85 [file="BackgroundJobClientExtensions.cs", label="Hangfire.Common.Job", span=""];
m2_2 [cluster="HangFire.States.SucceededState.GetProperties()", file="BackgroundJobClientFacts.cs", label="Entry HangFire.States.SucceededState.GetProperties()", span="19-19"];
m2_3 [cluster="HangFire.States.SucceededState.GetProperties()", file="BackgroundJobClientFacts.cs", label="return new Dictionary<string, string>\r\n                {\r\n                    { ''SucceededAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) }\r\n                };", span="21-24"];
m2_4 [cluster="HangFire.States.SucceededState.GetProperties()", file="BackgroundJobClientFacts.cs", label="Exit HangFire.States.SucceededState.GetProperties()", span="19-19"];
m2_16 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BackgroundJobClientFacts.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_29 [cluster="Unk.EnqueueItemOnList", file="BackgroundJobClientFacts.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m2_37 [cluster="Unk.IncrementValue", file="BackgroundJobClientFacts.cs", label="Entry Unk.IncrementValue", span=""];
m2_33 [cluster="Unk.TrimList", file="BackgroundJobClientFacts.cs", label="Entry Unk.TrimList", span=""];
m2_52 [cluster="Unk.Persist", file="BackgroundJobClientFacts.cs", label="Entry Unk.Persist", span=""];
m2_21 [cluster="string.Format(string, object)", file="BackgroundJobClientFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m2_38 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="Entry HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", span="47-47"];
m2_39 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="transaction == null", span="49-49"];
m2_41 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.DecrementValue(''hangfire:stats:succeeded''))", span="51-51"];
m2_42 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}'', jobId)))", span="52-53"];
m2_43 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId)))", span="54-55"];
m2_40 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="throw new ArgumentNullException(''transaction'');", span="49-49"];
m2_44 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="Exit HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", span="47-47"];
m2_17 [cluster="Unk.QueueCommand", file="BackgroundJobClientFacts.cs", label="Entry Unk.QueueCommand", span=""];
m2_22 [cluster="Unk.ExpireEntryIn", file="BackgroundJobClientFacts.cs", label="Entry Unk.ExpireEntryIn", span=""];
m2_11 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:history'', JobId),\r\n                _jobExpirationTimeout))", span="35-37"];
m2_7 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="Entry HangFire.States.SucceededState.Apply(IRedisTransaction)", span="27-27"];
m2_8 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction == null", span="29-29"];
m2_10 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobExpirationTimeout))", span="31-33"];
m2_12 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.EnqueueItemOnList(''hangfire:succeeded'', JobId))", span="39-39"];
m2_13 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.TrimList(''hangfire:succeeded'', 0, 99))", span="40-40"];
m2_14 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.IncrementValue(''hangfire:stats:succeeded''))", span="42-42"];
m2_9 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="throw new ArgumentNullException(''transaction'');", span="29-29"];
m2_15 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="Exit HangFire.States.SucceededState.Apply(IRedisTransaction)", span="27-27"];
m2_0 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="BackgroundJobClientFacts.cs", label="Entry HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m2_1 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="BackgroundJobClientFacts.cs", label="Exit HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m2_48 [cluster="Unk.DecrementValue", file="BackgroundJobClientFacts.cs", label="Entry Unk.DecrementValue", span=""];
m2_53 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="54-55"];
m2_18 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="31-33"];
m2_23 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="35-37"];
m2_26 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="39-39"];
m2_30 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="40-40"];
m2_34 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="42-42"];
m2_19 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobExpirationTimeout)", span="31-33"];
m2_20 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="31-33"];
m2_24 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:history'', JobId),\r\n                _jobExpirationTimeout)", span="35-37"];
m2_25 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="35-37"];
m2_27 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.EnqueueItemOnList(''hangfire:succeeded'', JobId)", span="39-39"];
m2_28 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="39-39"];
m2_31 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.TrimList(''hangfire:succeeded'', 0, 99)", span="40-40"];
m2_32 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="40-40"];
m2_35 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.IncrementValue(''hangfire:stats:succeeded'')", span="42-42"];
m2_36 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="42-42"];
m2_50 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}'', jobId))", span="52-53"];
m2_54 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="54-55"];
m2_45 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="51-51"];
m2_49 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="52-53"];
m2_46 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.DecrementValue(''hangfire:stats:succeeded'')", span="51-51"];
m2_47 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="51-51"];
m2_51 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="52-53"];
m2_55 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="54-55"];
m2_6 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="BackgroundJobClientFacts.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
m2_56 [file="BackgroundJobClientFacts.cs", label="HangFire.States.SucceededState", span=""];
m2_57 [file="BackgroundJobClientFacts.cs", label=string, span=""];
m3_12 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86"];
m3_13 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''Using the following options for Hangfire Server:'')", span="88-88"];
m3_14 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="89-89"];
m3_15 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="90-90"];
m3_16 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="91-91"];
m3_17 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="92-92"];
m3_18 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="Exit Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86"];
m3_11 [cluster="System.Math.Min(int, int)", file="BackgroundJobServerOptions.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m3_19 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
m3_21 [cluster="Unk.Join", file="BackgroundJobServerOptions.cs", label="Entry Unk.Join", span=""];
m3_0 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34"];
m3_1 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="WorkerCount = Math.Min(Environment.ProcessorCount * 5, MaxDefaultWorkerCount)", span="36-36"];
m3_2 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="37-37"];
m3_3 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ShutdownTimeout = BackgroundProcessingServer.DefaultShutdownTimeout", span="38-38"];
m3_5 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="HeartbeatInterval = ServerHeartbeat.DefaultHeartbeatInterval", span="40-40"];
m3_6 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ServerTimeout = ServerWatchdog.DefaultServerTimeout", span="41-41"];
m3_7 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ServerCheckInterval = ServerWatchdog.DefaultCheckInterval", span="42-42"];
m3_8 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="FilterProvider = JobFilterProviders.Providers", span="44-44"];
m3_9 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Activator = JobActivator.Current", span="45-45"];
m3_10 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Exit Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34"];
m3_22 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="Entry lambda expression", span="90-90"];
m3_23 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="''''' + x + '''''", span="90-90"];
m3_24 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="Exit lambda expression", span="90-90"];
m3_20 [cluster="Unk.Select", file="BackgroundJobServerOptions.cs", label="Entry Unk.Select", span=""];
m3_25 [file="BackgroundJobServerOptions.cs", label="Hangfire.BackgroundJobServerOptions", span=""];
m4_42 [cluster="Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", span="57-57"];
m4_10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="DelayedJobScheduler.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_41 [cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", span="28-28"];
m4_40 [cluster="Hangfire.JobStorage.GetConnection()", file="DelayedJobScheduler.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m4_46 [cluster="Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", file="DelayedJobScheduler.cs", label="Entry Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", span="35-35"];
m4_44 [cluster="string.IsNullOrEmpty(string)", file="DelayedJobScheduler.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m4_43 [cluster="Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="57-57"];
m4_45 [cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="DelayedJobScheduler.cs", label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87"];
m4_20 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="DelayedJobScheduler.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
m4_47 [cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="DelayedJobScheduler.cs", label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25"];
m4_50 [cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", file="DelayedJobScheduler.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54"];
m4_19 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="78-78"];
m4_33 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="var appliedState = _stateChanger.ChangeState(new StateChangeContext(\r\n                    context.Storage,\r\n                    connection,\r\n                    jobId, \r\n                    enqueuedState, \r\n                    ScheduledState.StateName))", prediction=0, span="100-105"];
m4_26 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="var connection = context.Storage.GetConnection()", span="80-80"];
m4_29 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="var jobId = connection\r\n                    .GetFirstByLowestScoreFromSet(''schedule'', 0, timestamp)", prediction=1, span="86-87"];
m4_32 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="var enqueuedState = new EnqueuedState\r\n                {\r\n                    Reason = ''Triggered scheduled job''\r\n                }", prediction=2, span="95-98"];
m4_34 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="appliedState == null", prediction=3, span="107-107"];
m4_28 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="var timestamp = JobHelper.ToTimestamp(DateTime.UtcNow)", prediction=4, span="83-83"];
m4_30 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="String.IsNullOrEmpty(jobId)", span="89-89"];
m4_36 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="transaction.RemoveFromSet(''schedule'', jobId)", prediction=1, span="114-114"];
m4_27 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="connection.AcquireDistributedLock(''locks:schedulepoller'', DefaultLockTimeout)", span="81-81"];
m4_35 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="var transaction = connection.CreateWriteTransaction()", span="112-112"];
m4_37 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="transaction.Commit()", prediction=6, span="115-115"];
m4_38 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="return true;", prediction=7, span="119-119"];
m4_31 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="return false;", span="92-92"];
m4_39 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="Exit Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="78-78"];
m4_21 [cluster="Hangfire.Server.BackgroundProcessContext.Sleep(System.TimeSpan)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.BackgroundProcessContext.Sleep(System.TimeSpan)", span="23-23"];
m4_25 [cluster="object.GetType()", file="DelayedJobScheduler.cs", label="Entry object.GetType()", span="0-0"];
m4_11 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="54-54"];
m4_16 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="context.Sleep(_pollingInterval)", prediction=8, span="64-64"];
m4_13 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="_enqueuedCount != 0", span="58-58"];
m4_15 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="_enqueuedCount = 0", span="61-61"];
m4_14 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="Logger.InfoFormat(''{0} scheduled jobs were enqueued.'', _enqueuedCount)", prediction=8, span="60-60"];
m4_12 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="!EnqueueNextScheduledJob(context)", span="56-56"];
m4_17 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="_enqueuedCount++", span="69-69"];
m4_18 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="Exit Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="54-54"];
m4_48 [cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", file="DelayedJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27"];
m4_4 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="46-46"];
m4_5 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs", label="stateChanger == null", prediction=10, span="48-48"];
m4_6 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs", label="throw new ArgumentNullException(''stateChanger'');", prediction=11, span="48-48"];
m4_7 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs", label="_stateChanger = stateChanger", prediction=12, span="50-50"];
m4_8 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs", label="_pollingInterval = pollingInterval", prediction=13, span="51-51"];
m4_9 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs", label="Exit Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="46-46"];
m4_22 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.DelayedJobScheduler.ToString()", span="73-73"];
m4_23 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", color=green, community=0, file="DelayedJobScheduler.cs", label="return GetType().Name;", prediction=8, span="75-75"];
m4_24 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="DelayedJobScheduler.cs", label="Exit Hangfire.Server.DelayedJobScheduler.ToString()", span="73-73"];
m4_49 [cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43"];
m4_51 [file="DelayedJobScheduler.cs", label="Hangfire.Server.DelayedJobScheduler", span=""];
m5_2 [cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="IBackgroundJobClient.cs", label="Entry Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="63-63"];
m5_3 [cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="IBackgroundJobClient.cs", label="Exit Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="63-63"];
m5_0 [cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="IBackgroundJobClient.cs", label="Entry Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="50-50"];
m5_1 [cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="IBackgroundJobClient.cs", label="Exit Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="50-50"];
m6_9 [cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="Job.cs", label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="113-113"];
m6_10 [cluster="lambda expression", file="Job.cs", label="Entry lambda expression", span="40-49"];
m6_0 [cluster="lambda expression", file="Job.cs", label="Entry lambda expression", span="26-37"];
m6_1 [cluster="lambda expression", file="Job.cs", label="var connection = JobStorage.Current.GetConnection()", span="28-28"];
m6_4 [cluster="lambda expression", file="Job.cs", label="return stateMachine.ChangeState(jobId, state, FailedState.Name);", span="35-35"];
m6_2 [cluster="lambda expression", file="Job.cs", label="var stateMachine = new StateMachine(connection)", span="32-32"];
m6_3 [cluster="lambda expression", file="Job.cs", label="var state = new EnqueuedState(''The job has been retried by a user.'')", span="33-33"];
m6_5 [cluster="lambda expression", file="Job.cs", label="Exit lambda expression", span="26-37"];
m6_11 [cluster="lambda expression", file="Job.cs", label="var connection = JobStorage.Current.GetConnection()", span="42-42"];
m6_14 [cluster="lambda expression", file="Job.cs", label="return stateMachine.ChangeState(jobId, state, ScheduledState.Name);", span="47-47"];
m6_12 [cluster="lambda expression", file="Job.cs", label="var stateMachine = new StateMachine(connection)", span="44-44"];
m6_13 [cluster="lambda expression", file="Job.cs", label="var state = new EnqueuedState(''The job has been enqueued by a user.'')", span="45-45"];
m6_15 [cluster="lambda expression", file="Job.cs", label="Exit lambda expression", span="40-49"];
m6_7 [cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", file="Job.cs", label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", span="36-36"];
m6_8 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string)", file="Job.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string)", span="31-31"];
m6_6 [cluster="HangFire.JobStorage.GetConnection()", file="Job.cs", label="Entry HangFire.JobStorage.GetConnection()", span="45-45"];
n436 -> n64  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n104  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n129  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n146  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n159  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n171  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n184  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n196  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n210  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n222  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n234  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n248  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n260  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n273  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n285  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n297  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n310  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n322  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n336  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n348  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n360  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n379  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n393  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n405  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n417  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n442 -> n91  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n443 -> n91  [color=darkseagreen4, key=1, label=state, style=dashed];
n445 -> n122  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n446 -> n122  [color=darkseagreen4, key=1, label=state, style=dashed];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n25 -> n432  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
n55 -> n57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n58 -> n64  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n58 -> n91  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n58 -> n72  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n57 -> n64  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n64 -> n90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n65 -> n67  [color=darkseagreen4, key=1, label=job, style=dashed];
n68 -> n70  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
n71 -> n73  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n71 -> n74  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n71 -> n75  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n71 -> n76  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n60 -> n62  [color=darkseagreen4, key=1, label=state, style=dashed];
n61 -> n83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n62 -> n86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n63 -> n91  [color=darkseagreen4, key=1, label=state, style=dashed];
n96 -> n98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n99 -> n104  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n99 -> n122  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n99 -> n109  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n98 -> n104  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n104 -> n121  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n105 -> n107  [color=darkseagreen4, key=1, label=job, style=dashed];
n108 -> n110  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n108 -> n111  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n108 -> n112  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n108 -> n113  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n100 -> n102  [color=darkseagreen4, key=1, label=state, style=dashed];
n101 -> n115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n102 -> n118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n103 -> n122  [color=darkseagreen4, key=1, label=state, style=dashed];
n126 -> n128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n129 -> n135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n130 -> n132  [color=darkseagreen4, key=1, label=record, style=dashed];
n130 -> n133  [color=darkseagreen4, key=1, label=record, style=dashed];
n143 -> n145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n146 -> n151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n147 -> n149  [color=darkseagreen4, key=1, label=record, style=dashed];
n156 -> n158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n159 -> n163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n163 -> n165  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n168 -> n170  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n171 -> n176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n172 -> n174  [color=darkseagreen4, key=1, label=record, style=dashed];
n181 -> n183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n184 -> n188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n188 -> n190  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n193 -> n195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n196 -> n202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n197 -> n199  [color=darkseagreen4, key=1, label=record, style=dashed];
n197 -> n200  [color=darkseagreen4, key=1, label=record, style=dashed];
n207 -> n209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n210 -> n214  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n214 -> n216  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n219 -> n221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n222 -> n226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n226 -> n228  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n231 -> n233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n234 -> n240  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n235 -> n237  [color=darkseagreen4, key=1, label=record, style=dashed];
n235 -> n238  [color=darkseagreen4, key=1, label=record, style=dashed];
n245 -> n247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n248 -> n252  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n252 -> n254  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n257 -> n259  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n260 -> n264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n264 -> n266  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n270 -> n272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n273 -> n277  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n277 -> n279  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n282 -> n284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n285 -> n289  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n289 -> n291  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n294 -> n296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n297 -> n302  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n298 -> n300  [color=darkseagreen4, key=1, label=record, style=dashed];
n307 -> n309  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n310 -> n314  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n314 -> n316  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n319 -> n321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n322 -> n326  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n326 -> n328  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n326 -> n329  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n333 -> n335  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n336 -> n340  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n340 -> n342  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n345 -> n347  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n348 -> n352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n352 -> n354  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n357 -> n359  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n360 -> n367  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n361 -> n363  [color=darkseagreen4, key=1, label=records, style=dashed];
n361 -> n364  [color=darkseagreen4, key=1, label=records, style=dashed];
n367 -> n369  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n367 -> n370  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n367 -> n371  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n367 -> n372  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n376 -> n378  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n379 -> n383  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n383 -> n385  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n383 -> n386  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n383 -> n387  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n390 -> n392  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n393 -> n397  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n397 -> n399  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n402 -> n404  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n405 -> n409  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n409 -> n411  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n414 -> n416  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n417 -> n421  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n421 -> n423  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n425 -> n427  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
n431 -> n433  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_42 -> m1_45  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m1_43 -> m1_56  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_43 -> m1_58  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_46 -> m1_49  [color=darkseagreen4, key=1, label=parameter, style=dashed];
m1_46 -> m1_53  [color=darkseagreen4, key=1, label=parameter, style=dashed];
m1_44 -> m1_57  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_57 -> m1_57  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_32 -> m1_35  [color=darkseagreen4, key=1, label=instance, style=dashed];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m1_0 -> m1_4  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m1_0 -> m1_5  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_0 -> m1_6  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_0 -> m1_7  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_16 -> m1_18  [color=darkseagreen4, key=1, label="Hangfire.JobActivator", style=dashed];
m1_16 -> m1_19  [color=darkseagreen4, key=1, label="Hangfire.IJobCancellationToken", style=dashed];
m1_16 -> m1_20  [color=darkseagreen4, key=1, label="Hangfire.IJobCancellationToken", style=dashed];
m1_31 -> m1_73  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m1_73 -> m1_73  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m1_85 -> m1_23  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_34  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_69  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m2_38 -> m2_41  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_38 -> m2_42  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_38 -> m2_50  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_38 -> m2_43  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_38 -> m2_54  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_41 -> m2_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_42 -> m2_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_43 -> m2_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_11 -> m2_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_7 -> m2_10  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_7 -> m2_11  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_7 -> m2_12  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_7 -> m2_13  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_7 -> m2_14  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_10 -> m2_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_12 -> m2_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_13 -> m2_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_14 -> m2_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_56 -> m2_10  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_56 -> m2_19  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_56 -> m2_11  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_56 -> m2_24  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_56 -> m2_12  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_56 -> m2_27  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_57 -> m2_50  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_57 -> m2_54  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_12 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_12 -> m3_15  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_12 -> m3_16  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_12 -> m3_17  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_15 -> m3_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_25 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_15  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_16  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_17  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m4_29 -> m4_36  [color=green, key=1, label=jobId, style=dashed];
m4_35 -> m4_37  [color=green, key=1, label=transaction, style=dashed];
m4_11 -> m4_16  [color=green, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m4_51 -> m4_16  [color=green, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_14  [color=green, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_23  [color=green, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_12  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_13  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_17  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m6_10 -> m6_14  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_0 -> m6_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_2 -> m6_4  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m6_12 -> m6_14  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
}
