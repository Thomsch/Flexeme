digraph  {
n436 [label="HangFire.SqlServer.Tests.WriteTransactionFacts", span=""];
n437 [label=arrangeSql, span=""];
n438 [label=jobId, span=""];
n439 [label=arrangeSql, span=""];
n440 [label=jobId, span=""];
n441 [label=arrangeSql, span=""];
n442 [label=jobId, span=""];
n443 [label=state, span=""];
n444 [label=arrangeSql, span=""];
n445 [label=jobId, span=""];
n446 [label=state, span=""];
n0 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="15-15"];
n1 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", label="Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null))", span="17-18"];
n2 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="15-15"];
n3 [cluster="Unk.>", label="Entry Unk.>", span=""];
n4 [cluster="lambda expression", label="Entry lambda expression", span="18-18"];
n5 [cluster="lambda expression", label="new SqlServerWriteOnlyTransaction(null)", span="18-18"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="18-18"];
n7 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection)", span="34-34"];
n8 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", span="22-22"];
n9 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="24-27"];
n10 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", color=red, community=0, label="0: UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="29-41"];
n14 [cluster="lambda expression", color=red, community=0, label="0: var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="31-31"];
n15 [cluster="lambda expression", color=red, community=0, label="0: var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="32-32"];
n11 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.ExpireJob_SetsJobExpirationData()", span="22-22"];
n12 [cluster="Unk.UseConnection", label="Entry Unk.UseConnection", span=""];
n13 [cluster="lambda expression", label="Entry lambda expression", span="29-41"];
n16 [cluster="lambda expression", color=red, community=0, label="0: Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="34-34"];
n17 [cluster="lambda expression", color=red, community=0, label="0: var job = GetTestJob(sql, jobId)", span="36-36"];
n19 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="39-39"];
n22 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
n23 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n24 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
n31 [cluster="lambda expression", color=red, community=0, label="0: x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="34-34"];
n25 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="536-536"];
n30 [cluster="lambda expression", label="Entry lambda expression", span="34-34"];
n18 [cluster="lambda expression", label="Assert.True(DateTime.UtcNow < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddDays(1))", span="37-37"];
n26 [cluster="Unk.GetTestJob", label="Entry Unk.GetTestJob", span=""];
n27 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
n28 [cluster="Unk.True", label="Entry Unk.True", span=""];
n20 [cluster="lambda expression", label="Assert.Null(anotherJob.ExpireAt)", span="40-40"];
n21 [cluster="lambda expression", label="Exit lambda expression", span="29-41"];
n29 [cluster="Unk.Null", label="Entry Unk.Null", span=""];
n32 [cluster="lambda expression", label="Exit lambda expression", span="34-34"];
n33 [cluster="System.TimeSpan.FromDays(double)", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
n34 [cluster="Unk.ExpireJob", label="Entry Unk.ExpireJob", span=""];
n35 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="45-45"];
n36 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", color=red, community=0, label="0: string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="47-50"];
n37 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", color=red, community=0, label="0: UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="52-64"];
n40 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54"];
n41 [cluster="lambda expression", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="55-55"];
n38 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="45-45"];
n39 [cluster="lambda expression", label="Entry lambda expression", span="52-64"];
n42 [cluster="lambda expression", color=red, community=0, label="0: Commit(sql, x => x.PersistJob(jobId))", span="57-57"];
n43 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="59-59"];
n45 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="62-62"];
n50 [cluster="lambda expression", color=red, community=0, label="0: x.PersistJob(jobId)", span="57-57"];
n49 [cluster="lambda expression", label="Entry lambda expression", span="57-57"];
n44 [cluster="lambda expression", label="Assert.Null(job.ExpireAt)", span="60-60"];
n46 [cluster="lambda expression", label="Assert.NotNull(anotherJob.ExpireAt)", span="63-63"];
n47 [cluster="lambda expression", label="Exit lambda expression", span="52-64"];
n48 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
n51 [cluster="lambda expression", label="Exit lambda expression", span="57-57"];
n52 [cluster="Unk.PersistJob", label="Entry Unk.PersistJob", span=""];
n53 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="68-68"];
n54 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", color=red, community=0, label="0: string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="70-73"];
n55 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<State>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n                state.Object.Reason = ''Reason'';\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="75-102"];
n58 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="77-77"];
n59 [cluster="lambda expression", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="78-78"];
n56 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="68-68"];
n57 [cluster="lambda expression", label="Entry lambda expression", span="75-102"];
n64 [cluster="lambda expression", label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="86-86"];
n65 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="88-88"];
n68 [cluster="lambda expression", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="92-92"];
n71 [cluster="lambda expression", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="96-96"];
n91 [cluster="lambda expression", label="x.SetJobState(jobId, state.Object)", span="86-86"];
n72 [cluster="lambda expression", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="97-97"];
n60 [cluster="lambda expression", label="var state = new Mock<State>()", span="80-80"];
n61 [cluster="lambda expression", label="state.Setup(x => x.Name).Returns(''State'')", span="81-81"];
n78 [cluster="Mock<State>.cstr", label="Entry Mock<State>.cstr", span=""];
n62 [cluster="lambda expression", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="82-83"];
n63 [cluster="lambda expression", label="state.Object.Reason = ''Reason''", span="84-84"];
n79 [cluster="Unk.Setup", label="Entry Unk.Setup", span=""];
n80 [cluster="Unk.Returns", label="Entry Unk.Returns", span=""];
n83 [cluster="lambda expression", label="Entry lambda expression", span="81-81"];
n81 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n86 [cluster="lambda expression", label="Entry lambda expression", span="82-82"];
n90 [cluster="lambda expression", label="Entry lambda expression", span="86-86"];
n66 [cluster="lambda expression", label="Assert.Equal(''State'', job.StateName)", span="89-89"];
n67 [cluster="lambda expression", label="Assert.NotNull(job.StateId)", span="90-90"];
n82 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n69 [cluster="lambda expression", label="Assert.Null(anotherJob.StateName)", span="93-93"];
n70 [cluster="lambda expression", label="Assert.Null(anotherJob.StateId)", span="94-94"];
n73 [cluster="lambda expression", label="Assert.Equal(''State'', jobState.Name)", span="98-98"];
n74 [cluster="lambda expression", label="Assert.Equal(''Reason'', jobState.Reason)", span="99-99"];
n75 [cluster="lambda expression", label="Assert.NotNull(jobState.CreatedAt)", span="100-100"];
n76 [cluster="lambda expression", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="101-101"];
n77 [cluster="lambda expression", label="Exit lambda expression", span="75-102"];
n84 [cluster="lambda expression", label="x.Name", span="81-81"];
n85 [cluster="lambda expression", label="Exit lambda expression", span="81-81"];
n87 [cluster="lambda expression", label="x.SerializeData()", span="82-82"];
n88 [cluster="lambda expression", label="Exit lambda expression", span="82-82"];
n89 [cluster="Unk.SerializeData", label="Entry Unk.SerializeData", span=""];
n92 [cluster="lambda expression", label="Exit lambda expression", span="86-86"];
n93 [cluster="Unk.SetJobState", label="Entry Unk.SetJobState", span=""];
n94 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="106-106"];
n95 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="108-111"];
n96 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<State>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n                state.Object.Reason = ''Reason'';\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="113-135"];
n99 [cluster="lambda expression", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="115-115"];
n97 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="106-106"];
n98 [cluster="lambda expression", label="Entry lambda expression", span="113-135"];
n104 [cluster="lambda expression", label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="123-123"];
n105 [cluster="lambda expression", label="var job = GetTestJob(sql, jobId)", span="125-125"];
n108 [cluster="lambda expression", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="129-129"];
n100 [cluster="lambda expression", label="var state = new Mock<State>()", span="117-117"];
n122 [cluster="lambda expression", label="x.AddJobState(jobId, state.Object)", span="123-123"];
n109 [cluster="lambda expression", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="130-130"];
n101 [cluster="lambda expression", label="state.Setup(x => x.Name).Returns(''State'')", span="118-118"];
n102 [cluster="lambda expression", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="119-120"];
n103 [cluster="lambda expression", label="state.Object.Reason = ''Reason''", span="121-121"];
n115 [cluster="lambda expression", label="Entry lambda expression", span="118-118"];
n118 [cluster="lambda expression", label="Entry lambda expression", span="119-119"];
n121 [cluster="lambda expression", label="Entry lambda expression", span="123-123"];
n106 [cluster="lambda expression", label="Assert.Null(job.StateName)", span="126-126"];
n107 [cluster="lambda expression", label="Assert.Null(job.StateId)", span="127-127"];
n110 [cluster="lambda expression", label="Assert.Equal(''State'', jobState.Name)", span="131-131"];
n111 [cluster="lambda expression", label="Assert.Equal(''Reason'', jobState.Reason)", span="132-132"];
n112 [cluster="lambda expression", label="Assert.NotNull(jobState.CreatedAt)", span="133-133"];
n113 [cluster="lambda expression", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="134-134"];
n114 [cluster="lambda expression", label="Exit lambda expression", span="113-135"];
n116 [cluster="lambda expression", label="x.Name", span="118-118"];
n117 [cluster="lambda expression", label="Exit lambda expression", span="118-118"];
n119 [cluster="lambda expression", label="x.SerializeData()", span="119-119"];
n120 [cluster="lambda expression", label="Exit lambda expression", span="119-119"];
n123 [cluster="lambda expression", label="Exit lambda expression", span="123-123"];
n124 [cluster="Unk.AddJobState", label="Entry Unk.AddJobState", span=""];
n125 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", span="139-139"];
n126 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.JobQueue'').Single();\r\n                Assert.Equal(''1'', record.JobId.ToString());\r\n                Assert.Equal(''default'', record.Queue);\r\n                Assert.Null(record.FetchedAt);\r\n            })", span="141-149"];
n127 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToQueue_AddsAJobToTheQueue()", span="139-139"];
n128 [cluster="lambda expression", label="Entry lambda expression", span="141-149"];
n129 [cluster="lambda expression", label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="143-143"];
n130 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.JobQueue'').Single()", span="145-145"];
n135 [cluster="lambda expression", label="Entry lambda expression", span="143-143"];
n131 [cluster="lambda expression", label="Assert.Equal(''1'', record.JobId.ToString())", span="146-146"];
n132 [cluster="lambda expression", label="Assert.Equal(''default'', record.Queue)", span="147-147"];
n133 [cluster="lambda expression", label="Assert.Null(record.FetchedAt)", span="148-148"];
n134 [cluster="lambda expression", label="Exit lambda expression", span="141-149"];
n136 [cluster="lambda expression", label="x.AddToQueue(''default'', ''1'')", span="143-143"];
n137 [cluster="lambda expression", label="Exit lambda expression", span="143-143"];
n138 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="114-114"];
n139 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", span="152-152"];
n140 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="154-156"];
n141 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.GetTestJob(IDbConnection, string)", span="152-152"];
n142 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="160-160"];
n143 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n            })", span="162-170"];
n144 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="160-160"];
n145 [cluster="lambda expression", label="Entry lambda expression", span="162-170"];
n146 [cluster="lambda expression", label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="164-164"];
n147 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="166-166"];
n151 [cluster="lambda expression", label="Entry lambda expression", span="164-164"];
n148 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="168-168"];
n149 [cluster="lambda expression", label="Assert.Equal(1, record.Value)", span="169-169"];
n150 [cluster="lambda expression", label="Exit lambda expression", span="162-170"];
n152 [cluster="lambda expression", label="x.IncrementCounter(''my-key'')", span="164-164"];
n153 [cluster="lambda expression", label="Exit lambda expression", span="164-164"];
n154 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125"];
n155 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="174-174"];
n156 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="176-187"];
n157 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="174-174"];
n158 [cluster="lambda expression", label="Entry lambda expression", span="176-187"];
n159 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="178-182"];
n160 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="184-184"];
n163 [cluster="lambda expression", label="Entry lambda expression", span="178-182"];
n161 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="186-186"];
n162 [cluster="lambda expression", label="Exit lambda expression", span="176-187"];
n164 [cluster="lambda expression", label="x.IncrementCounter(''my-key'')", span="180-180"];
n165 [cluster="lambda expression", label="x.IncrementCounter(''my-key'')", span="181-181"];
n166 [cluster="lambda expression", label="Exit lambda expression", span="178-182"];
n167 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="191-191"];
n168 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n            })", span="193-201"];
n169 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="191-191"];
n170 [cluster="lambda expression", label="Entry lambda expression", span="193-201"];
n171 [cluster="lambda expression", label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="195-195"];
n172 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="197-197"];
n176 [cluster="lambda expression", label="Entry lambda expression", span="195-195"];
n173 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="199-199"];
n174 [cluster="lambda expression", label="Assert.Equal(-1, record.Value)", span="200-200"];
n175 [cluster="lambda expression", label="Exit lambda expression", span="193-201"];
n177 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="195-195"];
n178 [cluster="lambda expression", label="Exit lambda expression", span="195-195"];
n179 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139"];
n180 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="205-205"];
n181 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="207-218"];
n182 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="205-205"];
n183 [cluster="lambda expression", label="Entry lambda expression", span="207-218"];
n184 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="209-213"];
n185 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="215-215"];
n188 [cluster="lambda expression", label="Entry lambda expression", span="209-213"];
n186 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="217-217"];
n187 [cluster="lambda expression", label="Exit lambda expression", span="207-218"];
n189 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="211-211"];
n190 [cluster="lambda expression", label="x.DecrementCounter(''my-key'')", span="212-212"];
n191 [cluster="lambda expression", label="Exit lambda expression", span="209-213"];
n192 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="222-222"];
n193 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="224-233"];
n194 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="222-222"];
n195 [cluster="lambda expression", label="Entry lambda expression", span="224-233"];
n196 [cluster="lambda expression", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="226-226"];
n197 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="228-228"];
n202 [cluster="lambda expression", label="Entry lambda expression", span="226-226"];
n198 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="230-230"];
n199 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="231-231"];
n200 [cluster="lambda expression", label="Assert.Equal(0.0, record.Score, 2)", span="232-232"];
n201 [cluster="lambda expression", label="Exit lambda expression", span="224-233"];
n203 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="226-226"];
n204 [cluster="lambda expression", label="Exit lambda expression", span="226-226"];
n205 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153"];
n206 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="237-237"];
n207 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="239-250"];
n208 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="237-237"];
n209 [cluster="lambda expression", label="Entry lambda expression", span="239-250"];
n210 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="241-245"];
n211 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="247-247"];
n214 [cluster="lambda expression", label="Entry lambda expression", span="241-245"];
n212 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="249-249"];
n213 [cluster="lambda expression", label="Exit lambda expression", span="239-250"];
n215 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="243-243"];
n216 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''another-value'')", span="244-244"];
n217 [cluster="lambda expression", label="Exit lambda expression", span="241-245"];
n218 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="254-254"];
n219 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="256-267"];
n220 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="254-254"];
n221 [cluster="lambda expression", label="Entry lambda expression", span="256-267"];
n222 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="258-262"];
n223 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="264-264"];
n226 [cluster="lambda expression", label="Entry lambda expression", span="258-262"];
n224 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="266-266"];
n225 [cluster="lambda expression", label="Exit lambda expression", span="256-267"];
n227 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="260-260"];
n228 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="261-261"];
n229 [cluster="lambda expression", label="Exit lambda expression", span="258-262"];
n230 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="271-271"];
n231 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="273-282"];
n232 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="271-271"];
n233 [cluster="lambda expression", label="Entry lambda expression", span="273-282"];
n234 [cluster="lambda expression", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="275-275"];
n235 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="277-277"];
n240 [cluster="lambda expression", label="Entry lambda expression", span="275-275"];
n236 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="279-279"];
n237 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="280-280"];
n238 [cluster="lambda expression", label="Assert.Equal(3.2, record.Score, 3)", span="281-281"];
n239 [cluster="lambda expression", label="Exit lambda expression", span="273-282"];
n241 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="275-275"];
n242 [cluster="lambda expression", label="Exit lambda expression", span="275-275"];
n243 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158"];
n244 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="286-286"];
n245 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="288-299"];
n246 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="286-286"];
n247 [cluster="lambda expression", label="Entry lambda expression", span="288-299"];
n248 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="290-294"];
n249 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="296-296"];
n252 [cluster="lambda expression", label="Entry lambda expression", span="290-294"];
n250 [cluster="lambda expression", label="Assert.Equal(3.2, record.Score, 3)", span="298-298"];
n251 [cluster="lambda expression", label="Exit lambda expression", span="288-299"];
n253 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="292-292"];
n254 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="293-293"];
n255 [cluster="lambda expression", label="Exit lambda expression", span="290-294"];
n256 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="303-303"];
n257 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="305-316"];
n258 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="303-303"];
n259 [cluster="lambda expression", label="Entry lambda expression", span="305-316"];
n260 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="307-311"];
n261 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="313-313"];
n264 [cluster="lambda expression", label="Entry lambda expression", span="307-311"];
n262 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="315-315"];
n263 [cluster="lambda expression", label="Exit lambda expression", span="305-316"];
n265 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="309-309"];
n266 [cluster="lambda expression", label="x.RemoveFromSet(''my-key'', ''my-value'')", span="310-310"];
n267 [cluster="lambda expression", label="Exit lambda expression", span="307-311"];
n268 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="172-172"];
n269 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="320-320"];
n270 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="322-333"];
n271 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="320-320"];
n272 [cluster="lambda expression", label="Entry lambda expression", span="322-333"];
n273 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="324-328"];
n274 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="330-330"];
n277 [cluster="lambda expression", label="Entry lambda expression", span="324-328"];
n275 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="332-332"];
n276 [cluster="lambda expression", label="Exit lambda expression", span="322-333"];
n278 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="326-326"];
n279 [cluster="lambda expression", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="327-327"];
n280 [cluster="lambda expression", label="Exit lambda expression", span="324-328"];
n281 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="337-337"];
n282 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="339-350"];
n283 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="337-337"];
n284 [cluster="lambda expression", label="Entry lambda expression", span="339-350"];
n285 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="341-345"];
n286 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="347-347"];
n289 [cluster="lambda expression", label="Entry lambda expression", span="341-345"];
n287 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="349-349"];
n288 [cluster="lambda expression", label="Exit lambda expression", span="339-350"];
n290 [cluster="lambda expression", label="x.AddToSet(''my-key'', ''my-value'')", span="343-343"];
n291 [cluster="lambda expression", label="x.RemoveFromSet(''different-key'', ''my-value'')", span="344-344"];
n292 [cluster="lambda expression", label="Exit lambda expression", span="341-345"];
n293 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="354-354"];
n294 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="356-364"];
n295 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="354-354"];
n296 [cluster="lambda expression", label="Entry lambda expression", span="356-364"];
n297 [cluster="lambda expression", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="358-358"];
n298 [cluster="lambda expression", label="var record = sql.Query(''select * from HangFire.List'').Single()", span="360-360"];
n302 [cluster="lambda expression", label="Entry lambda expression", span="358-358"];
n299 [cluster="lambda expression", label="Assert.Equal(''my-key'', record.Key)", span="362-362"];
n300 [cluster="lambda expression", label="Assert.Equal(''my-value'', record.Value)", span="363-363"];
n301 [cluster="lambda expression", label="Exit lambda expression", span="356-364"];
n303 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="358-358"];
n304 [cluster="lambda expression", label="Exit lambda expression", span="358-358"];
n305 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
n306 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="368-368"];
n307 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="370-381"];
n308 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="368-368"];
n309 [cluster="lambda expression", label="Entry lambda expression", span="370-381"];
n310 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="372-376"];
n311 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="378-378"];
n314 [cluster="lambda expression", label="Entry lambda expression", span="372-376"];
n312 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="380-380"];
n313 [cluster="lambda expression", label="Exit lambda expression", span="370-381"];
n315 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="374-374"];
n316 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="375-375"];
n317 [cluster="lambda expression", label="Exit lambda expression", span="372-376"];
n318 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="385-385"];
n319 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="387-399"];
n320 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="385-385"];
n321 [cluster="lambda expression", label="Entry lambda expression", span="387-399"];
n322 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="389-394"];
n323 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="396-396"];
n326 [cluster="lambda expression", label="Entry lambda expression", span="389-394"];
n324 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="398-398"];
n325 [cluster="lambda expression", label="Exit lambda expression", span="387-399"];
n327 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="391-391"];
n328 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="392-392"];
n329 [cluster="lambda expression", label="x.RemoveFromList(''my-key'', ''my-value'')", span="393-393"];
n330 [cluster="lambda expression", label="Exit lambda expression", span="389-394"];
n331 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="186-186"];
n332 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="403-403"];
n333 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="405-416"];
n334 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="403-403"];
n335 [cluster="lambda expression", label="Entry lambda expression", span="405-416"];
n336 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="407-411"];
n337 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="413-413"];
n340 [cluster="lambda expression", label="Entry lambda expression", span="407-411"];
n338 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="415-415"];
n339 [cluster="lambda expression", label="Exit lambda expression", span="405-416"];
n341 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="409-409"];
n342 [cluster="lambda expression", label="x.RemoveFromList(''my-key'', ''different-value'')", span="410-410"];
n343 [cluster="lambda expression", label="Exit lambda expression", span="407-411"];
n344 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="420-420"];
n345 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="422-433"];
n346 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="420-420"];
n347 [cluster="lambda expression", label="Entry lambda expression", span="422-433"];
n348 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="424-428"];
n349 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="430-430"];
n352 [cluster="lambda expression", label="Entry lambda expression", span="424-428"];
n350 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="432-432"];
n351 [cluster="lambda expression", label="Exit lambda expression", span="422-433"];
n353 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''my-value'')", span="426-426"];
n354 [cluster="lambda expression", label="x.RemoveFromList(''different-key'', ''my-value'')", span="427-427"];
n355 [cluster="lambda expression", label="Exit lambda expression", span="424-428"];
n356 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="437-437"];
n357 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="439-455"];
n358 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="437-437"];
n359 [cluster="lambda expression", label="Entry lambda expression", span="439-455"];
n360 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="441-448"];
n361 [cluster="lambda expression", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="450-450"];
n367 [cluster="lambda expression", label="Entry lambda expression", span="441-448"];
n362 [cluster="lambda expression", label="Assert.Equal(2, records.Length)", span="452-452"];
n366 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n363 [cluster="lambda expression", label="Assert.Equal(''1'', records[0].Value)", span="453-453"];
n364 [cluster="lambda expression", label="Assert.Equal(''2'', records[1].Value)", span="454-454"];
n365 [cluster="lambda expression", label="Exit lambda expression", span="439-455"];
n368 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="443-443"];
n369 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''1'')", span="444-444"];
n370 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''2'')", span="445-445"];
n371 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''3'')", span="446-446"];
n372 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 2)", span="447-447"];
n373 [cluster="lambda expression", label="Exit lambda expression", span="441-448"];
n374 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="193-193"];
n375 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="459-459"];
n376 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="461-474"];
n377 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="459-459"];
n378 [cluster="lambda expression", label="Entry lambda expression", span="461-474"];
n379 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="463-469"];
n380 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="471-471"];
n383 [cluster="lambda expression", label="Entry lambda expression", span="463-469"];
n381 [cluster="lambda expression", label="Assert.Equal(2, recordCount)", span="473-473"];
n382 [cluster="lambda expression", label="Exit lambda expression", span="461-474"];
n384 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="465-465"];
n385 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''1'')", span="466-466"];
n386 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''2'')", span="467-467"];
n387 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 100)", span="468-468"];
n388 [cluster="lambda expression", label="Exit lambda expression", span="463-469"];
n389 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="478-478"];
n390 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="480-491"];
n391 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="478-478"];
n392 [cluster="lambda expression", label="Entry lambda expression", span="480-491"];
n393 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="482-486"];
n394 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="488-488"];
n397 [cluster="lambda expression", label="Entry lambda expression", span="482-486"];
n395 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="490-490"];
n396 [cluster="lambda expression", label="Exit lambda expression", span="480-491"];
n398 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="484-484"];
n399 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 100)", span="485-485"];
n400 [cluster="lambda expression", label="Exit lambda expression", span="482-486"];
n401 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="495-495"];
n402 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="497-508"];
n403 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="495-495"];
n404 [cluster="lambda expression", label="Entry lambda expression", span="497-508"];
n405 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="499-503"];
n406 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="505-505"];
n409 [cluster="lambda expression", label="Entry lambda expression", span="499-503"];
n407 [cluster="lambda expression", label="Assert.Equal(0, recordCount)", span="507-507"];
n408 [cluster="lambda expression", label="Exit lambda expression", span="497-508"];
n410 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="501-501"];
n411 [cluster="lambda expression", label="x.TrimList(''my-key'', 1, 0)", span="502-502"];
n412 [cluster="lambda expression", label="Exit lambda expression", span="499-503"];
n413 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="512-512"];
n414 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="514-525"];
n415 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="512-512"];
n416 [cluster="lambda expression", label="Entry lambda expression", span="514-525"];
n417 [cluster="lambda expression", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="516-520"];
n418 [cluster="lambda expression", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="522-522"];
n421 [cluster="lambda expression", label="Entry lambda expression", span="516-520"];
n419 [cluster="lambda expression", label="Assert.Equal(1, recordCount)", span="524-524"];
n420 [cluster="lambda expression", label="Exit lambda expression", span="514-525"];
n422 [cluster="lambda expression", label="x.InsertToList(''my-key'', ''0'')", span="518-518"];
n423 [cluster="lambda expression", label="x.TrimList(''another-key'', 1, 0)", span="519-519"];
n424 [cluster="lambda expression", label="Exit lambda expression", span="516-520"];
n425 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="Entry HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="528-528"];
n426 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="var connection = ConnectionUtils.CreateConnection()", span="530-530"];
n427 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="action(connection)", span="532-532"];
n429 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
n428 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="528-528"];
n430 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
n431 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", label="var transaction = new SqlServerWriteOnlyTransaction(connection)", span="540-540"];
n432 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", label="action(transaction)", span="542-542"];
n433 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", label="transaction.Commit()", span="543-543"];
n434 [cluster="HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", label="Exit HangFire.SqlServer.Tests.WriteTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="536-536"];
n435 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="45-45"];
m0_0 [cluster="Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", file="BackgroundJobClientException.cs", label="Entry Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", span="23-23"];
m0_1 [cluster="Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", file="BackgroundJobClientException.cs", label="Exit Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", span="23-23"];
m1_12 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BackgroundJobClientExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_30 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", span="85-85"];
m1_42 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var parameters = Method.GetParameters()", span="89-89"];
m1_50 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="value = cancellationToken", span="101-101"];
m1_43 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var result = new List<object>(Arguments.Length)", span="90-90"];
m1_45 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="i < parameters.Length", span="92-92"];
m1_46 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var parameter = parameters[i]", span="94-94"];
m1_44 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var i = 0", span="92-92"];
m1_56 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="result.Add(value)", span="131-131"];
m1_58 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="return result.ToArray();", span="134-134"];
m1_47 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var argument = Arguments[i]", span="95-95"];
m1_57 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="i++", span="92-92"];
m1_49 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="typeof(IJobCancellationToken).GetTypeInfo().IsAssignableFrom(parameter.ParameterType.GetTypeInfo())", span="99-99"];
m1_51 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="value = argument != null\r\n                                ? JobHelper.FromJson(argument, parameter.ParameterType)\r\n                                : null", span="107-109"];
m1_53 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="parameter.ParameterType == typeof(object)", span="113-113"];
m1_48 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="object value", span="97-97"];
m1_54 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="value = argument", span="117-117"];
m1_52 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label=Exception, span="111-111"];
m1_55 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw;", span="125-125"];
m1_59 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label=Exception, span="136-136"];
m1_60 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw new JobPerformanceException(\r\n                    ''An exception occurred during arguments deserialization.'',\r\n                    ex);", span="138-140"];
m1_61 [cluster="Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.DeserializeArguments(Hangfire.IJobCancellationToken)", span="85-85"];
m1_15 [cluster="Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Storage.InvocationData.DeserializeArguments(System.Reflection.MethodInfo, string[])", span="117-117"];
m1_29 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.Activate(Hangfire.JobActivator)", span="63-63"];
m1_32 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="var instance = activator.ActivateJob(Type)", span="67-67"];
m1_33 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="instance == null", span="69-69"];
m1_35 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="return instance;", span="74-74"];
m1_34 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="throw new InvalidOperationException($''JobActivator returned NULL instance of the '{Type}' type.'');", span="71-71"];
m1_36 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label=Exception, span="76-76"];
m1_37 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="throw new JobPerformanceException(\r\n                    ''An exception occurred during job activation.'',\r\n                    ex);", span="78-80"];
m1_38 [cluster="Hangfire.Common.Job.Activate(Hangfire.JobActivator)", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.Activate(Hangfire.JobActivator)", span="63-63"];
m1_0 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="16-16"];
m1_1 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="type == null", span="18-18"];
m1_2 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="throw new ArgumentNullException(nameof(type));", span="18-18"];
m1_3 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="method == null", span="19-19"];
m1_4 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="throw new ArgumentNullException(nameof(method));", span="19-19"];
m1_5 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="arguments == null", span="20-20"];
m1_6 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="throw new ArgumentNullException(nameof(arguments));", span="20-20"];
m1_7 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Validate(type, nameof(type), method, nameof(method), arguments.Length, nameof(arguments))", span="22-22"];
m1_8 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Type = type", span="24-24"];
m1_9 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Method = method", span="25-25"];
m1_10 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Args = InvocationData.DeserializeArguments(method, arguments)", span="26-26"];
m1_11 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="16-16"];
m1_16 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", span="36-36"];
m1_17 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="activator == null", span="38-38"];
m1_18 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw new ArgumentNullException(nameof(activator));", span="38-38"];
m1_19 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="cancellationToken == null", span="39-39"];
m1_20 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw new ArgumentNullException(nameof(cancellationToken));", span="39-39"];
m1_24 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="instance = Activate(activator)", span="48-48"];
m1_25 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="var deserializedArguments = DeserializeArguments(cancellationToken)", span="51-51"];
m1_26 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="result = InvokeMethod(instance, deserializedArguments, cancellationToken.ShutdownToken)", span="52-52"];
m1_21 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="object instance = null", span="41-41"];
m1_22 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="object result", span="43-43"];
m1_23 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="!Method.IsStatic", span="46-46"];
m1_27 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="return result;", span="59-59"];
m1_28 [cluster="Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.Perform(Hangfire.JobActivator, Hangfire.IJobCancellationToken)", span="36-36"];
m1_13 [cluster="Unk.nameof", file="BackgroundJobClientExtensions.cs", label="Entry Unk.nameof", span=""];
m1_40 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="BackgroundJobClientExtensions.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m1_77 [cluster="System.Reflection.MethodBase.Invoke(object, object[])", file="BackgroundJobClientExtensions.cs", label="Entry System.Reflection.MethodBase.Invoke(object, object[])", span="0-0"];
m1_68 [cluster="System.Collections.Generic.List<T>.ToArray()", file="BackgroundJobClientExtensions.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m1_39 [cluster="Hangfire.JobActivator.ActivateJob(System.Type)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.JobActivator.ActivateJob(System.Type)", span="45-45"];
m1_64 [cluster="System.Type.GetTypeInfo()", file="BackgroundJobClientExtensions.cs", label="Entry System.Type.GetTypeInfo()", span="0-0"];
m1_63 [cluster="System.Collections.Generic.List<T>.List(int)", file="BackgroundJobClientExtensions.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m1_31 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", span="145-145"];
m1_69 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="return Method.Invoke(instance, deserializedArguments);", span="149-149"];
m1_73 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="ex.InnerException is OperationCanceledException &&\r\n                    shutdownToken.IsCancellationRequested", span="161-162"];
m1_70 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label=TargetInvocationException, span="151-151"];
m1_71 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="ex.InnerException is JobAbortedException", span="153-153"];
m1_72 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw ex.InnerException;", span="158-158"];
m1_74 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw ex.InnerException;", span="168-168"];
m1_75 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="throw new JobPerformanceException(\r\n                    ''An exception occurred during performance of the job.'',\r\n                    ex.InnerException);", span="173-175"];
m1_76 [cluster="Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.InvokeMethod(object, object[], System.Threading.CancellationToken)", span="145-145"];
m1_66 [cluster="Hangfire.Common.JobHelper.FromJson(string, System.Type)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.JobHelper.FromJson(string, System.Type)", span="46-46"];
m1_67 [cluster="System.Collections.Generic.List<T>.Add(T)", file="BackgroundJobClientExtensions.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m1_41 [cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22"];
m1_78 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.Dispose(object)", span="180-180"];
m1_79 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label="var disposable = instance as IDisposable", span="184-184"];
m1_80 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label="disposable?.Dispose()", span="185-185"];
m1_81 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label=Exception, span="187-187"];
m1_82 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label="throw new JobPerformanceException(\r\n                    ''Job has been performed, but an exception occurred during disposal.'',\r\n                    ex);", span="189-191"];
m1_83 [cluster="Hangfire.Common.Job.Dispose(object)", file="BackgroundJobClientExtensions.cs", label="Exit Hangfire.Common.Job.Dispose(object)", span="180-180"];
m1_62 [cluster="System.Reflection.MethodBase.GetParameters()", file="BackgroundJobClientExtensions.cs", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
m1_84 [cluster="System.IDisposable.Dispose()", file="BackgroundJobClientExtensions.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m1_14 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="BackgroundJobClientExtensions.cs", label="Entry Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", span="358-358"];
m1_65 [cluster="System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)", file="BackgroundJobClientExtensions.cs", label="Entry System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)", span="0-0"];
m1_85 [file="BackgroundJobClientExtensions.cs", label="Hangfire.Common.Job", span=""];
m2_2 [cluster="HangFire.States.SucceededState.GetProperties()", file="BackgroundJobClientFacts.cs", label="Entry HangFire.States.SucceededState.GetProperties()", span="19-19"];
m2_3 [cluster="HangFire.States.SucceededState.GetProperties()", file="BackgroundJobClientFacts.cs", label="return new Dictionary<string, string>\r\n                {\r\n                    { ''SucceededAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) }\r\n                };", span="21-24"];
m2_4 [cluster="HangFire.States.SucceededState.GetProperties()", file="BackgroundJobClientFacts.cs", label="Exit HangFire.States.SucceededState.GetProperties()", span="19-19"];
m2_16 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BackgroundJobClientFacts.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_29 [cluster="Unk.EnqueueItemOnList", file="BackgroundJobClientFacts.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m2_37 [cluster="Unk.IncrementValue", file="BackgroundJobClientFacts.cs", label="Entry Unk.IncrementValue", span=""];
m2_33 [cluster="Unk.TrimList", file="BackgroundJobClientFacts.cs", label="Entry Unk.TrimList", span=""];
m2_52 [cluster="Unk.Persist", file="BackgroundJobClientFacts.cs", label="Entry Unk.Persist", span=""];
m2_21 [cluster="string.Format(string, object)", file="BackgroundJobClientFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m2_38 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="Entry HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", span="47-47"];
m2_39 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="transaction == null", span="49-49"];
m2_41 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.DecrementValue(''hangfire:stats:succeeded''))", span="51-51"];
m2_42 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}'', jobId)))", span="52-53"];
m2_43 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId)))", span="54-55"];
m2_40 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="throw new ArgumentNullException(''transaction'');", span="49-49"];
m2_44 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="BackgroundJobClientFacts.cs", label="Exit HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", span="47-47"];
m2_17 [cluster="Unk.QueueCommand", file="BackgroundJobClientFacts.cs", label="Entry Unk.QueueCommand", span=""];
m2_22 [cluster="Unk.ExpireEntryIn", file="BackgroundJobClientFacts.cs", label="Entry Unk.ExpireEntryIn", span=""];
m2_11 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:history'', JobId),\r\n                _jobExpirationTimeout))", span="35-37"];
m2_7 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="Entry HangFire.States.SucceededState.Apply(IRedisTransaction)", span="27-27"];
m2_8 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction == null", span="29-29"];
m2_10 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobExpirationTimeout))", span="31-33"];
m2_12 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.EnqueueItemOnList(''hangfire:succeeded'', JobId))", span="39-39"];
m2_13 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.TrimList(''hangfire:succeeded'', 0, 99))", span="40-40"];
m2_14 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="transaction.QueueCommand(x => x.IncrementValue(''hangfire:stats:succeeded''))", span="42-42"];
m2_9 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="throw new ArgumentNullException(''transaction'');", span="29-29"];
m2_15 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="BackgroundJobClientFacts.cs", label="Exit HangFire.States.SucceededState.Apply(IRedisTransaction)", span="27-27"];
m2_0 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="BackgroundJobClientFacts.cs", label="Entry HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m2_1 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="BackgroundJobClientFacts.cs", label="Exit HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m2_48 [cluster="Unk.DecrementValue", file="BackgroundJobClientFacts.cs", label="Entry Unk.DecrementValue", span=""];
m2_53 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="54-55"];
m2_18 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="31-33"];
m2_23 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="35-37"];
m2_26 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="39-39"];
m2_30 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="40-40"];
m2_34 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="42-42"];
m2_19 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobExpirationTimeout)", span="31-33"];
m2_20 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="31-33"];
m2_24 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:history'', JobId),\r\n                _jobExpirationTimeout)", span="35-37"];
m2_25 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="35-37"];
m2_27 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.EnqueueItemOnList(''hangfire:succeeded'', JobId)", span="39-39"];
m2_28 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="39-39"];
m2_31 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.TrimList(''hangfire:succeeded'', 0, 99)", span="40-40"];
m2_32 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="40-40"];
m2_35 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.IncrementValue(''hangfire:stats:succeeded'')", span="42-42"];
m2_36 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="42-42"];
m2_50 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}'', jobId))", span="52-53"];
m2_54 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="54-55"];
m2_45 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="51-51"];
m2_49 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Entry lambda expression", span="52-53"];
m2_46 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="x.DecrementValue(''hangfire:stats:succeeded'')", span="51-51"];
m2_47 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="51-51"];
m2_51 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="52-53"];
m2_55 [cluster="lambda expression", file="BackgroundJobClientFacts.cs", label="Exit lambda expression", span="54-55"];
m2_6 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="BackgroundJobClientFacts.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
m2_56 [file="BackgroundJobClientFacts.cs", label="HangFire.States.SucceededState", span=""];
m2_57 [file="BackgroundJobClientFacts.cs", label=string, span=""];
m3_12 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86"];
m3_13 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''Using the following options for Hangfire Server:'')", span="88-88"];
m3_14 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="89-89"];
m3_15 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="90-90"];
m3_16 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="91-91"];
m3_17 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="92-92"];
m3_18 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="Exit Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86"];
m3_11 [cluster="System.Math.Min(int, int)", file="BackgroundJobServerOptions.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m3_19 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
m3_21 [cluster="Unk.Join", file="BackgroundJobServerOptions.cs", label="Entry Unk.Join", span=""];
m3_0 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34"];
m3_1 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="WorkerCount = Math.Min(Environment.ProcessorCount * 5, MaxDefaultWorkerCount)", span="36-36"];
m3_2 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="37-37"];
m3_3 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ShutdownTimeout = BackgroundProcessingServer.DefaultShutdownTimeout", span="38-38"];
m3_4 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", color=red, community=0, file="BackgroundJobServerOptions.cs", label="0: SchedulePollingInterval = DelayedJobScheduler.DefaultPollingInterval", span="39-39"];
m3_5 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="HeartbeatInterval = ServerHeartbeat.DefaultHeartbeatInterval", span="40-40"];
m3_6 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ServerTimeout = ServerWatchdog.DefaultServerTimeout", span="41-41"];
m3_7 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ServerCheckInterval = ServerWatchdog.DefaultCheckInterval", span="42-42"];
m3_8 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="FilterProvider = JobFilterProviders.Providers", span="44-44"];
m3_9 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Activator = JobActivator.Current", span="45-45"];
m3_10 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Exit Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34"];
m3_22 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="Entry lambda expression", span="90-90"];
m3_23 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="''''' + x + '''''", span="90-90"];
m3_24 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="Exit lambda expression", span="90-90"];
m3_20 [cluster="Unk.Select", file="BackgroundJobServerOptions.cs", label="Entry Unk.Select", span=""];
m3_25 [file="BackgroundJobServerOptions.cs", label="Hangfire.BackgroundJobServerOptions", span=""];
m4_42 [cluster="Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Common.JobHelper.ToTimestamp(System.DateTime)", span="57-57"];
m4_10 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="DelayedJobScheduler.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_41 [cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", span="28-28"];
m4_40 [cluster="Hangfire.JobStorage.GetConnection()", file="DelayedJobScheduler.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m4_46 [cluster="Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", file="DelayedJobScheduler.cs", label="Entry Hangfire.States.StateChangeContext.StateChangeContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, Hangfire.States.IState, params string[])", span="35-35"];
m4_44 [cluster="string.IsNullOrEmpty(string)", file="DelayedJobScheduler.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m4_43 [cluster="Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="57-57"];
m4_45 [cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="DelayedJobScheduler.cs", label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87"];
m4_20 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="DelayedJobScheduler.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
m4_47 [cluster="Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", file="DelayedJobScheduler.cs", label="Entry Hangfire.States.IBackgroundJobStateChanger.ChangeState(Hangfire.States.StateChangeContext)", span="25-25"];
m4_50 [cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", file="DelayedJobScheduler.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54"];
m4_19 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="78-78"];
m4_33 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: var appliedState = _stateChanger.ChangeState(new StateChangeContext(\r\n                    context.Storage,\r\n                    connection,\r\n                    jobId, \r\n                    enqueuedState, \r\n                    ScheduledState.StateName))", span="100-105"];
m4_26 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="var connection = context.Storage.GetConnection()", span="80-80"];
m4_29 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: var jobId = connection\r\n                    .GetFirstByLowestScoreFromSet(''schedule'', 0, timestamp)", span="86-87"];
m4_32 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: var enqueuedState = new EnqueuedState\r\n                {\r\n                    Reason = ''Triggered scheduled job''\r\n                }", span="95-98"];
m4_34 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: appliedState == null", span="107-107"];
m4_28 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: var timestamp = JobHelper.ToTimestamp(DateTime.UtcNow)", span="83-83"];
m4_30 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="String.IsNullOrEmpty(jobId)", span="89-89"];
m4_36 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: transaction.RemoveFromSet(''schedule'', jobId)", span="114-114"];
m4_27 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="connection.AcquireDistributedLock(''locks:schedulepoller'', DefaultLockTimeout)", span="81-81"];
m4_35 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="var transaction = connection.CreateWriteTransaction()", span="112-112"];
m4_37 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: transaction.Commit()", span="115-115"];
m4_38 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: return true;", span="119-119"];
m4_31 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="return false;", span="92-92"];
m4_39 [cluster="Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="Exit Hangfire.Server.DelayedJobScheduler.EnqueueNextScheduledJob(Hangfire.Server.BackgroundProcessContext)", span="78-78"];
m4_21 [cluster="Hangfire.Server.BackgroundProcessContext.Sleep(System.TimeSpan)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.BackgroundProcessContext.Sleep(System.TimeSpan)", span="23-23"];
m4_25 [cluster="object.GetType()", file="DelayedJobScheduler.cs", label="Entry object.GetType()", span="0-0"];
m4_11 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="54-54"];
m4_16 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: context.Sleep(_pollingInterval)", span="64-64"];
m4_13 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="_enqueuedCount != 0", span="58-58"];
m4_15 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="_enqueuedCount = 0", span="61-61"];
m4_14 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: Logger.InfoFormat(''{0} scheduled jobs were enqueued.'', _enqueuedCount)", span="60-60"];
m4_12 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="!EnqueueNextScheduledJob(context)", span="56-56"];
m4_17 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="_enqueuedCount++", span="69-69"];
m4_18 [cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="DelayedJobScheduler.cs", label="Exit Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="54-54"];
m4_48 [cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", file="DelayedJobScheduler.cs", label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27"];
m4_4 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="46-46"];
m4_5 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: stateChanger == null", span="48-48"];
m4_6 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: throw new ArgumentNullException(''stateChanger'');", span="48-48"];
m4_7 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: _stateChanger = stateChanger", span="50-50"];
m4_8 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", color=green, community=0, file="DelayedJobScheduler.cs", label="0: _pollingInterval = pollingInterval", span="51-51"];
m4_9 [cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="DelayedJobScheduler.cs", label="Exit Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="46-46"];
m4_22 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="DelayedJobScheduler.cs", label="Entry Hangfire.Server.DelayedJobScheduler.ToString()", span="73-73"];
m4_23 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", color=green, community=0, file="DelayedJobScheduler.cs", label="0: return GetType().Name;", span="75-75"];
m4_24 [cluster="Hangfire.Server.DelayedJobScheduler.ToString()", file="DelayedJobScheduler.cs", label="Exit Hangfire.Server.DelayedJobScheduler.ToString()", span="73-73"];
m4_49 [cluster="Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="DelayedJobScheduler.cs", label="Entry Hangfire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="43-43"];
m4_51 [file="DelayedJobScheduler.cs", label="Hangfire.Server.DelayedJobScheduler", span=""];
m5_2 [cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="IBackgroundJobClient.cs", label="Entry Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="63-63"];
m5_3 [cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="IBackgroundJobClient.cs", label="Exit Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="63-63"];
m5_0 [cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="IBackgroundJobClient.cs", label="Entry Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="50-50"];
m5_1 [cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="IBackgroundJobClient.cs", label="Exit Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="50-50"];
m6_9 [cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="Job.cs", label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="113-113"];
m6_10 [cluster="lambda expression", file="Job.cs", label="Entry lambda expression", span="40-49"];
m6_0 [cluster="lambda expression", file="Job.cs", label="Entry lambda expression", span="26-37"];
m6_1 [cluster="lambda expression", file="Job.cs", label="var connection = JobStorage.Current.GetConnection()", span="28-28"];
m6_4 [cluster="lambda expression", file="Job.cs", label="return stateMachine.ChangeState(jobId, state, FailedState.Name);", span="35-35"];
m6_2 [cluster="lambda expression", file="Job.cs", label="var stateMachine = new StateMachine(connection)", span="32-32"];
m6_3 [cluster="lambda expression", file="Job.cs", label="var state = new EnqueuedState(''The job has been retried by a user.'')", span="33-33"];
m6_5 [cluster="lambda expression", file="Job.cs", label="Exit lambda expression", span="26-37"];
m6_11 [cluster="lambda expression", file="Job.cs", label="var connection = JobStorage.Current.GetConnection()", span="42-42"];
m6_14 [cluster="lambda expression", file="Job.cs", label="return stateMachine.ChangeState(jobId, state, ScheduledState.Name);", span="47-47"];
m6_12 [cluster="lambda expression", file="Job.cs", label="var stateMachine = new StateMachine(connection)", span="44-44"];
m6_13 [cluster="lambda expression", file="Job.cs", label="var state = new EnqueuedState(''The job has been enqueued by a user.'')", span="45-45"];
m6_15 [cluster="lambda expression", file="Job.cs", label="Exit lambda expression", span="40-49"];
m6_7 [cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", file="Job.cs", label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection)", span="36-36"];
m6_8 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string)", file="Job.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string)", span="31-31"];
m6_6 [cluster="HangFire.JobStorage.GetConnection()", file="Job.cs", label="Entry HangFire.JobStorage.GetConnection()", span="45-45"];
n436 -> n10  [color=red, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n16  [color=red, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n17  [color=red, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n19  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n37  [color=red, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n42  [color=red, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n43  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n45  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n55  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n64  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n65  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n68  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n96  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n104  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n105  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n126  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n129  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n143  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n146  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n156  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n159  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n168  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n171  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n181  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n184  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n193  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n196  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n207  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n210  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n219  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n222  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n231  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n234  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n245  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n248  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n257  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n260  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n270  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n273  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n282  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n285  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n294  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n297  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n307  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n310  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n319  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n322  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n333  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n336  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n345  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n348  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n357  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n360  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n376  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n379  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n390  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n393  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n402  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n405  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n414  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n436 -> n417  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.WriteTransactionFacts", style=dashed];
n437 -> n14  [color=red, key=1, label=arrangeSql, style=dashed];
n437 -> n15  [color=red, key=1, label=arrangeSql, style=dashed];
n438 -> n31  [color=red, key=1, label=jobId, style=dashed];
n439 -> n40  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n439 -> n41  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n440 -> n50  [color=red, key=1, label=jobId, style=dashed];
n441 -> n58  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n441 -> n59  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n442 -> n91  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n443 -> n91  [color=darkseagreen4, key=1, label=state, style=dashed];
n444 -> n99  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n445 -> n122  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n446 -> n122  [color=darkseagreen4, key=1, label=state, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n6 -> n4  [color=blue, key=0, style=bold];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [color=red, key=0, style=solid];
n9 -> n14  [color=red, key=1, label=arrangeSql, style=dashed];
n9 -> n15  [color=red, key=1, label=arrangeSql, style=dashed];
n10 -> n11  [color=red, key=0, style=solid];
n10 -> n12  [color=red, key=2, style=dotted];
n10 -> n13  [color=red, key=1, label="lambda expression", style=dashed];
n14 -> n15  [color=red, key=0, style=solid];
n14 -> n22  [color=red, key=2, style=dotted];
n14 -> n23  [color=red, key=2, style=dotted];
n14 -> n24  [color=red, key=2, style=dotted];
n14 -> n16  [color=red, key=1, label=jobId, style=dashed];
n14 -> n31  [color=red, key=1, label=jobId, style=dashed];
n14 -> n17  [color=red, key=1, label=jobId, style=dashed];
n15 -> n16  [color=red, key=0, style=solid];
n15 -> n22  [color=red, key=2, style=dotted];
n15 -> n23  [color=red, key=2, style=dotted];
n15 -> n24  [color=red, key=2, style=dotted];
n15 -> n19  [color=red, key=1, label=anotherJobId, style=dashed];
n11 -> n8  [color=blue, key=0, style=bold];
n13 -> n14  [color=red, key=0, style=solid];
n13 -> n15  [color=red, key=1, label=SqlConnection, style=dashed];
n13 -> n16  [color=red, key=1, label=SqlConnection, style=dashed];
n13 -> n17  [color=red, key=1, label=SqlConnection, style=dashed];
n13 -> n19  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n16 -> n17  [color=red, key=0, style=solid];
n16 -> n25  [color=red, key=2, style=dotted];
n16 -> n30  [color=red, key=1, label="lambda expression", style=dashed];
n17 -> n18  [color=red, key=0, style=solid];
n17 -> n26  [color=red, key=2, style=dotted];
n19 -> n20  [key=0, style=solid];
n19 -> n26  [key=2, style=dotted];
n31 -> n32  [color=red, key=0, style=solid];
n31 -> n33  [color=red, key=2, style=dotted];
n31 -> n34  [color=red, key=2, style=dotted];
n25 -> n431  [key=0, style=solid];
n25 -> n432  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
n30 -> n31  [color=red, key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n18 -> n27  [key=2, style=dotted];
n18 -> n28  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n29  [key=2, style=dotted];
n21 -> n13  [color=blue, key=0, style=bold];
n32 -> n30  [color=blue, key=0, style=bold];
n35 -> n36  [color=red, key=0, style=solid];
n36 -> n37  [color=red, key=0, style=solid];
n36 -> n40  [color=red, key=1, label=arrangeSql, style=dashed];
n36 -> n41  [color=red, key=1, label=arrangeSql, style=dashed];
n37 -> n38  [color=red, key=0, style=solid];
n37 -> n12  [color=red, key=2, style=dotted];
n37 -> n39  [color=red, key=1, label="lambda expression", style=dashed];
n40 -> n41  [key=0, style=solid];
n40 -> n22  [key=2, style=dotted];
n40 -> n23  [key=2, style=dotted];
n40 -> n24  [key=2, style=dotted];
n40 -> n42  [color=red, key=1, label=jobId, style=dashed];
n40 -> n50  [color=red, key=1, label=jobId, style=dashed];
n40 -> n43  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n41 -> n42  [color=red, key=0, style=solid];
n41 -> n22  [key=2, style=dotted];
n41 -> n23  [key=2, style=dotted];
n41 -> n24  [key=2, style=dotted];
n41 -> n45  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
n38 -> n35  [color=blue, key=0, style=bold];
n39 -> n40  [key=0, style=solid];
n39 -> n41  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n39 -> n42  [color=red, key=1, label=SqlConnection, style=dashed];
n39 -> n43  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n39 -> n45  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n42 -> n43  [color=red, key=0, style=solid];
n42 -> n25  [color=red, key=2, style=dotted];
n42 -> n49  [color=red, key=1, label="lambda expression", style=dashed];
n43 -> n44  [key=0, style=solid];
n43 -> n26  [key=2, style=dotted];
n45 -> n46  [key=0, style=solid];
n45 -> n26  [key=2, style=dotted];
n50 -> n51  [color=red, key=0, style=solid];
n50 -> n52  [color=red, key=2, style=dotted];
n49 -> n50  [color=red, key=0, style=solid];
n44 -> n45  [key=0, style=solid];
n44 -> n29  [key=2, style=dotted];
n46 -> n47  [key=0, style=solid];
n46 -> n48  [key=2, style=dotted];
n47 -> n39  [color=blue, key=0, style=bold];
n51 -> n49  [color=blue, key=0, style=bold];
n53 -> n54  [color=red, key=0, style=solid];
n54 -> n55  [color=red, key=0, style=solid];
n54 -> n58  [color=red, key=1, label=arrangeSql, style=dashed];
n54 -> n59  [color=red, key=1, label=arrangeSql, style=dashed];
n55 -> n56  [key=0, style=solid];
n55 -> n12  [key=2, style=dotted];
n55 -> n57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n58 -> n59  [key=0, style=solid];
n58 -> n22  [key=2, style=dotted];
n58 -> n23  [key=2, style=dotted];
n58 -> n24  [key=2, style=dotted];
n58 -> n64  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n58 -> n91  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n58 -> n65  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n58 -> n72  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n59 -> n60  [key=0, style=solid];
n59 -> n22  [key=2, style=dotted];
n59 -> n23  [key=2, style=dotted];
n59 -> n24  [key=2, style=dotted];
n59 -> n68  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
n56 -> n53  [color=blue, key=0, style=bold];
n57 -> n58  [key=0, style=solid];
n57 -> n59  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n57 -> n64  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n57 -> n65  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n57 -> n68  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n57 -> n71  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n64 -> n65  [key=0, style=solid];
n64 -> n25  [key=2, style=dotted];
n64 -> n90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n65 -> n66  [key=0, style=solid];
n65 -> n26  [key=2, style=dotted];
n65 -> n67  [color=darkseagreen4, key=1, label=job, style=dashed];
n68 -> n69  [key=0, style=solid];
n68 -> n26  [key=2, style=dotted];
n68 -> n70  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
n71 -> n72  [key=0, style=solid];
n71 -> n22  [key=2, style=dotted];
n71 -> n23  [key=2, style=dotted];
n71 -> n73  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n71 -> n74  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n71 -> n75  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n71 -> n76  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n91 -> n92  [key=0, style=solid];
n91 -> n93  [key=2, style=dotted];
n72 -> n73  [key=0, style=solid];
n72 -> n24  [key=2, style=dotted];
n72 -> n82  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n60 -> n78  [key=2, style=dotted];
n60 -> n62  [color=darkseagreen4, key=1, label=state, style=dashed];
n60 -> n63  [color=darkseagreen4, key=1, label=state, style=dashed];
n61 -> n62  [key=0, style=solid];
n61 -> n79  [key=2, style=dotted];
n61 -> n80  [key=2, style=dotted];
n61 -> n83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n62 -> n63  [key=0, style=solid];
n62 -> n79  [key=2, style=dotted];
n62 -> n81  [key=2, style=dotted];
n62 -> n80  [key=2, style=dotted];
n62 -> n86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n63 -> n64  [key=0, style=solid];
n63 -> n63  [color=darkseagreen4, key=1, label=state, style=dashed];
n63 -> n91  [color=darkseagreen4, key=1, label=state, style=dashed];
n83 -> n84  [key=0, style=solid];
n86 -> n87  [key=0, style=solid];
n90 -> n91  [key=0, style=solid];
n66 -> n67  [key=0, style=solid];
n66 -> n82  [key=2, style=dotted];
n67 -> n68  [key=0, style=solid];
n67 -> n48  [key=2, style=dotted];
n69 -> n70  [key=0, style=solid];
n69 -> n29  [key=2, style=dotted];
n70 -> n71  [key=0, style=solid];
n70 -> n29  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n73 -> n82  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n74 -> n82  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n48  [key=2, style=dotted];
n76 -> n77  [key=0, style=solid];
n76 -> n82  [key=2, style=dotted];
n77 -> n57  [color=blue, key=0, style=bold];
n84 -> n85  [key=0, style=solid];
n85 -> n83  [color=blue, key=0, style=bold];
n87 -> n88  [key=0, style=solid];
n87 -> n89  [key=2, style=dotted];
n88 -> n86  [color=blue, key=0, style=bold];
n92 -> n90  [color=blue, key=0, style=bold];
n94 -> n95  [key=0, style=solid];
n95 -> n96  [key=0, style=solid];
n95 -> n99  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
n96 -> n97  [key=0, style=solid];
n96 -> n12  [key=2, style=dotted];
n96 -> n98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n99 -> n100  [key=0, style=solid];
n99 -> n22  [key=2, style=dotted];
n99 -> n23  [key=2, style=dotted];
n99 -> n24  [key=2, style=dotted];
n99 -> n104  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n99 -> n122  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n99 -> n105  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n99 -> n109  [color=darkseagreen4, key=1, label=jobId, style=dashed];
n97 -> n94  [color=blue, key=0, style=bold];
n98 -> n99  [key=0, style=solid];
n98 -> n104  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n98 -> n105  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n98 -> n108  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n104 -> n105  [key=0, style=solid];
n104 -> n25  [key=2, style=dotted];
n104 -> n121  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n105 -> n106  [key=0, style=solid];
n105 -> n26  [key=2, style=dotted];
n105 -> n107  [color=darkseagreen4, key=1, label=job, style=dashed];
n108 -> n109  [key=0, style=solid];
n108 -> n22  [key=2, style=dotted];
n108 -> n23  [key=2, style=dotted];
n108 -> n110  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n108 -> n111  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n108 -> n112  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n108 -> n113  [color=darkseagreen4, key=1, label=jobState, style=dashed];
n100 -> n101  [key=0, style=solid];
n100 -> n78  [key=2, style=dotted];
n100 -> n102  [color=darkseagreen4, key=1, label=state, style=dashed];
n100 -> n103  [color=darkseagreen4, key=1, label=state, style=dashed];
n122 -> n123  [key=0, style=solid];
n122 -> n124  [key=2, style=dotted];
n109 -> n110  [key=0, style=solid];
n109 -> n24  [key=2, style=dotted];
n109 -> n82  [key=2, style=dotted];
n101 -> n102  [key=0, style=solid];
n101 -> n79  [key=2, style=dotted];
n101 -> n80  [key=2, style=dotted];
n101 -> n115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n102 -> n103  [key=0, style=solid];
n102 -> n79  [key=2, style=dotted];
n102 -> n81  [key=2, style=dotted];
n102 -> n80  [key=2, style=dotted];
n102 -> n118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n103 -> n104  [key=0, style=solid];
n103 -> n103  [color=darkseagreen4, key=1, label=state, style=dashed];
n103 -> n122  [color=darkseagreen4, key=1, label=state, style=dashed];
n115 -> n116  [key=0, style=solid];
n118 -> n119  [key=0, style=solid];
n121 -> n122  [key=0, style=solid];
n106 -> n107  [key=0, style=solid];
n106 -> n29  [key=2, style=dotted];
n107 -> n108  [key=0, style=solid];
n107 -> n29  [key=2, style=dotted];
n110 -> n111  [key=0, style=solid];
n110 -> n82  [key=2, style=dotted];
n111 -> n112  [key=0, style=solid];
n111 -> n82  [key=2, style=dotted];
n112 -> n113  [key=0, style=solid];
n112 -> n48  [key=2, style=dotted];
n113 -> n114  [key=0, style=solid];
n113 -> n82  [key=2, style=dotted];
n114 -> n98  [color=blue, key=0, style=bold];
n116 -> n117  [key=0, style=solid];
n117 -> n115  [color=blue, key=0, style=bold];
n119 -> n120  [key=0, style=solid];
n119 -> n89  [key=2, style=dotted];
n120 -> n118  [color=blue, key=0, style=bold];
n123 -> n121  [color=blue, key=0, style=bold];
n125 -> n126  [key=0, style=solid];
n126 -> n127  [key=0, style=solid];
n126 -> n12  [key=2, style=dotted];
n126 -> n128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n127 -> n125  [color=blue, key=0, style=bold];
n128 -> n129  [key=0, style=solid];
n128 -> n130  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n129 -> n130  [key=0, style=solid];
n129 -> n25  [key=2, style=dotted];
n129 -> n135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n130 -> n131  [key=0, style=solid];
n130 -> n22  [key=2, style=dotted];
n130 -> n23  [key=2, style=dotted];
n130 -> n132  [color=darkseagreen4, key=1, label=record, style=dashed];
n130 -> n133  [color=darkseagreen4, key=1, label=record, style=dashed];
n135 -> n136  [key=0, style=solid];
n131 -> n132  [key=0, style=solid];
n131 -> n24  [key=2, style=dotted];
n131 -> n82  [key=2, style=dotted];
n132 -> n133  [key=0, style=solid];
n132 -> n82  [key=2, style=dotted];
n133 -> n134  [key=0, style=solid];
n133 -> n29  [key=2, style=dotted];
n134 -> n128  [color=blue, key=0, style=bold];
n136 -> n137  [key=0, style=solid];
n136 -> n138  [key=2, style=dotted];
n137 -> n135  [color=blue, key=0, style=bold];
n139 -> n140  [key=0, style=solid];
n140 -> n141  [key=0, style=solid];
n140 -> n22  [key=2, style=dotted];
n140 -> n23  [key=2, style=dotted];
n141 -> n139  [color=blue, key=0, style=bold];
n142 -> n143  [key=0, style=solid];
n143 -> n144  [key=0, style=solid];
n143 -> n12  [key=2, style=dotted];
n143 -> n145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n144 -> n142  [color=blue, key=0, style=bold];
n145 -> n146  [key=0, style=solid];
n145 -> n147  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n146 -> n147  [key=0, style=solid];
n146 -> n25  [key=2, style=dotted];
n146 -> n151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n147 -> n148  [key=0, style=solid];
n147 -> n22  [key=2, style=dotted];
n147 -> n23  [key=2, style=dotted];
n147 -> n149  [color=darkseagreen4, key=1, label=record, style=dashed];
n151 -> n152  [key=0, style=solid];
n148 -> n149  [key=0, style=solid];
n148 -> n82  [key=2, style=dotted];
n149 -> n150  [key=0, style=solid];
n149 -> n82  [key=2, style=dotted];
n150 -> n145  [color=blue, key=0, style=bold];
n152 -> n153  [key=0, style=solid];
n152 -> n154  [key=2, style=dotted];
n153 -> n151  [color=blue, key=0, style=bold];
n155 -> n156  [key=0, style=solid];
n156 -> n157  [key=0, style=solid];
n156 -> n12  [key=2, style=dotted];
n156 -> n158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n157 -> n155  [color=blue, key=0, style=bold];
n158 -> n159  [key=0, style=solid];
n158 -> n160  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n159 -> n160  [key=0, style=solid];
n159 -> n25  [key=2, style=dotted];
n159 -> n163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n160 -> n161  [key=0, style=solid];
n160 -> n3  [key=2, style=dotted];
n160 -> n23  [key=2, style=dotted];
n163 -> n164  [key=0, style=solid];
n163 -> n165  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n161 -> n162  [key=0, style=solid];
n161 -> n82  [key=2, style=dotted];
n162 -> n158  [color=blue, key=0, style=bold];
n164 -> n165  [key=0, style=solid];
n164 -> n154  [key=2, style=dotted];
n165 -> n166  [key=0, style=solid];
n165 -> n154  [key=2, style=dotted];
n166 -> n163  [color=blue, key=0, style=bold];
n167 -> n168  [key=0, style=solid];
n168 -> n169  [key=0, style=solid];
n168 -> n12  [key=2, style=dotted];
n168 -> n170  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n169 -> n167  [color=blue, key=0, style=bold];
n170 -> n171  [key=0, style=solid];
n170 -> n172  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n171 -> n172  [key=0, style=solid];
n171 -> n25  [key=2, style=dotted];
n171 -> n176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n172 -> n173  [key=0, style=solid];
n172 -> n22  [key=2, style=dotted];
n172 -> n23  [key=2, style=dotted];
n172 -> n174  [color=darkseagreen4, key=1, label=record, style=dashed];
n176 -> n177  [key=0, style=solid];
n173 -> n174  [key=0, style=solid];
n173 -> n82  [key=2, style=dotted];
n174 -> n175  [key=0, style=solid];
n174 -> n82  [key=2, style=dotted];
n175 -> n170  [color=blue, key=0, style=bold];
n177 -> n178  [key=0, style=solid];
n177 -> n179  [key=2, style=dotted];
n178 -> n176  [color=blue, key=0, style=bold];
n180 -> n181  [key=0, style=solid];
n181 -> n182  [key=0, style=solid];
n181 -> n12  [key=2, style=dotted];
n181 -> n183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n182 -> n180  [color=blue, key=0, style=bold];
n183 -> n184  [key=0, style=solid];
n183 -> n185  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n184 -> n185  [key=0, style=solid];
n184 -> n25  [key=2, style=dotted];
n184 -> n188  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n185 -> n186  [key=0, style=solid];
n185 -> n3  [key=2, style=dotted];
n185 -> n23  [key=2, style=dotted];
n188 -> n189  [key=0, style=solid];
n188 -> n190  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n186 -> n187  [key=0, style=solid];
n186 -> n82  [key=2, style=dotted];
n187 -> n183  [color=blue, key=0, style=bold];
n189 -> n190  [key=0, style=solid];
n189 -> n179  [key=2, style=dotted];
n190 -> n191  [key=0, style=solid];
n190 -> n179  [key=2, style=dotted];
n191 -> n188  [color=blue, key=0, style=bold];
n192 -> n193  [key=0, style=solid];
n193 -> n194  [key=0, style=solid];
n193 -> n12  [key=2, style=dotted];
n193 -> n195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n194 -> n192  [color=blue, key=0, style=bold];
n195 -> n196  [key=0, style=solid];
n195 -> n197  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n196 -> n197  [key=0, style=solid];
n196 -> n25  [key=2, style=dotted];
n196 -> n202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n197 -> n198  [key=0, style=solid];
n197 -> n22  [key=2, style=dotted];
n197 -> n23  [key=2, style=dotted];
n197 -> n199  [color=darkseagreen4, key=1, label=record, style=dashed];
n197 -> n200  [color=darkseagreen4, key=1, label=record, style=dashed];
n202 -> n203  [key=0, style=solid];
n198 -> n199  [key=0, style=solid];
n198 -> n82  [key=2, style=dotted];
n199 -> n200  [key=0, style=solid];
n199 -> n82  [key=2, style=dotted];
n200 -> n201  [key=0, style=solid];
n200 -> n82  [key=2, style=dotted];
n201 -> n195  [color=blue, key=0, style=bold];
n203 -> n204  [key=0, style=solid];
n203 -> n205  [key=2, style=dotted];
n204 -> n202  [color=blue, key=0, style=bold];
n206 -> n207  [key=0, style=solid];
n207 -> n208  [key=0, style=solid];
n207 -> n12  [key=2, style=dotted];
n207 -> n209  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n208 -> n206  [color=blue, key=0, style=bold];
n209 -> n210  [key=0, style=solid];
n209 -> n211  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n210 -> n211  [key=0, style=solid];
n210 -> n25  [key=2, style=dotted];
n210 -> n214  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n211 -> n212  [key=0, style=solid];
n211 -> n3  [key=2, style=dotted];
n211 -> n23  [key=2, style=dotted];
n214 -> n215  [key=0, style=solid];
n214 -> n216  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n212 -> n213  [key=0, style=solid];
n212 -> n82  [key=2, style=dotted];
n213 -> n209  [color=blue, key=0, style=bold];
n215 -> n216  [key=0, style=solid];
n215 -> n205  [key=2, style=dotted];
n216 -> n217  [key=0, style=solid];
n216 -> n205  [key=2, style=dotted];
n217 -> n214  [color=blue, key=0, style=bold];
n218 -> n219  [key=0, style=solid];
n219 -> n220  [key=0, style=solid];
n219 -> n12  [key=2, style=dotted];
n219 -> n221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n220 -> n218  [color=blue, key=0, style=bold];
n221 -> n222  [key=0, style=solid];
n221 -> n223  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n222 -> n223  [key=0, style=solid];
n222 -> n25  [key=2, style=dotted];
n222 -> n226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n223 -> n224  [key=0, style=solid];
n223 -> n3  [key=2, style=dotted];
n223 -> n23  [key=2, style=dotted];
n226 -> n227  [key=0, style=solid];
n226 -> n228  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n224 -> n225  [key=0, style=solid];
n224 -> n82  [key=2, style=dotted];
n225 -> n221  [color=blue, key=0, style=bold];
n227 -> n228  [key=0, style=solid];
n227 -> n205  [key=2, style=dotted];
n228 -> n229  [key=0, style=solid];
n228 -> n205  [key=2, style=dotted];
n229 -> n226  [color=blue, key=0, style=bold];
n230 -> n231  [key=0, style=solid];
n231 -> n232  [key=0, style=solid];
n231 -> n12  [key=2, style=dotted];
n231 -> n233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n232 -> n230  [color=blue, key=0, style=bold];
n233 -> n234  [key=0, style=solid];
n233 -> n235  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n234 -> n235  [key=0, style=solid];
n234 -> n25  [key=2, style=dotted];
n234 -> n240  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n235 -> n236  [key=0, style=solid];
n235 -> n22  [key=2, style=dotted];
n235 -> n23  [key=2, style=dotted];
n235 -> n237  [color=darkseagreen4, key=1, label=record, style=dashed];
n235 -> n238  [color=darkseagreen4, key=1, label=record, style=dashed];
n240 -> n241  [key=0, style=solid];
n236 -> n237  [key=0, style=solid];
n236 -> n82  [key=2, style=dotted];
n237 -> n238  [key=0, style=solid];
n237 -> n82  [key=2, style=dotted];
n238 -> n239  [key=0, style=solid];
n238 -> n82  [key=2, style=dotted];
n239 -> n233  [color=blue, key=0, style=bold];
n241 -> n242  [key=0, style=solid];
n241 -> n243  [key=2, style=dotted];
n242 -> n240  [color=blue, key=0, style=bold];
n244 -> n245  [key=0, style=solid];
n245 -> n246  [key=0, style=solid];
n245 -> n12  [key=2, style=dotted];
n245 -> n247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n246 -> n244  [color=blue, key=0, style=bold];
n247 -> n248  [key=0, style=solid];
n247 -> n249  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n248 -> n249  [key=0, style=solid];
n248 -> n25  [key=2, style=dotted];
n248 -> n252  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n249 -> n250  [key=0, style=solid];
n249 -> n22  [key=2, style=dotted];
n249 -> n23  [key=2, style=dotted];
n252 -> n253  [key=0, style=solid];
n252 -> n254  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n250 -> n251  [key=0, style=solid];
n250 -> n82  [key=2, style=dotted];
n251 -> n247  [color=blue, key=0, style=bold];
n253 -> n254  [key=0, style=solid];
n253 -> n205  [key=2, style=dotted];
n254 -> n255  [key=0, style=solid];
n254 -> n243  [key=2, style=dotted];
n255 -> n252  [color=blue, key=0, style=bold];
n256 -> n257  [key=0, style=solid];
n257 -> n258  [key=0, style=solid];
n257 -> n12  [key=2, style=dotted];
n257 -> n259  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n258 -> n256  [color=blue, key=0, style=bold];
n259 -> n260  [key=0, style=solid];
n259 -> n261  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n260 -> n261  [key=0, style=solid];
n260 -> n25  [key=2, style=dotted];
n260 -> n264  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n261 -> n262  [key=0, style=solid];
n261 -> n3  [key=2, style=dotted];
n261 -> n23  [key=2, style=dotted];
n264 -> n265  [key=0, style=solid];
n264 -> n266  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n262 -> n263  [key=0, style=solid];
n262 -> n82  [key=2, style=dotted];
n263 -> n259  [color=blue, key=0, style=bold];
n265 -> n266  [key=0, style=solid];
n265 -> n205  [key=2, style=dotted];
n266 -> n267  [key=0, style=solid];
n266 -> n268  [key=2, style=dotted];
n267 -> n264  [color=blue, key=0, style=bold];
n269 -> n270  [key=0, style=solid];
n270 -> n271  [key=0, style=solid];
n270 -> n12  [key=2, style=dotted];
n270 -> n272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n271 -> n269  [color=blue, key=0, style=bold];
n272 -> n273  [key=0, style=solid];
n272 -> n274  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n273 -> n274  [key=0, style=solid];
n273 -> n25  [key=2, style=dotted];
n273 -> n277  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n274 -> n275  [key=0, style=solid];
n274 -> n3  [key=2, style=dotted];
n274 -> n23  [key=2, style=dotted];
n277 -> n278  [key=0, style=solid];
n277 -> n279  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n275 -> n276  [key=0, style=solid];
n275 -> n82  [key=2, style=dotted];
n276 -> n272  [color=blue, key=0, style=bold];
n278 -> n279  [key=0, style=solid];
n278 -> n205  [key=2, style=dotted];
n279 -> n280  [key=0, style=solid];
n279 -> n268  [key=2, style=dotted];
n280 -> n277  [color=blue, key=0, style=bold];
n281 -> n282  [key=0, style=solid];
n282 -> n283  [key=0, style=solid];
n282 -> n12  [key=2, style=dotted];
n282 -> n284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n283 -> n281  [color=blue, key=0, style=bold];
n284 -> n285  [key=0, style=solid];
n284 -> n286  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n285 -> n286  [key=0, style=solid];
n285 -> n25  [key=2, style=dotted];
n285 -> n289  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n286 -> n287  [key=0, style=solid];
n286 -> n3  [key=2, style=dotted];
n286 -> n23  [key=2, style=dotted];
n289 -> n290  [key=0, style=solid];
n289 -> n291  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n287 -> n288  [key=0, style=solid];
n287 -> n82  [key=2, style=dotted];
n288 -> n284  [color=blue, key=0, style=bold];
n290 -> n291  [key=0, style=solid];
n290 -> n205  [key=2, style=dotted];
n291 -> n292  [key=0, style=solid];
n291 -> n268  [key=2, style=dotted];
n292 -> n289  [color=blue, key=0, style=bold];
n293 -> n294  [key=0, style=solid];
n294 -> n295  [key=0, style=solid];
n294 -> n12  [key=2, style=dotted];
n294 -> n296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n295 -> n293  [color=blue, key=0, style=bold];
n296 -> n297  [key=0, style=solid];
n296 -> n298  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n297 -> n298  [key=0, style=solid];
n297 -> n25  [key=2, style=dotted];
n297 -> n302  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n298 -> n299  [key=0, style=solid];
n298 -> n22  [key=2, style=dotted];
n298 -> n23  [key=2, style=dotted];
n298 -> n300  [color=darkseagreen4, key=1, label=record, style=dashed];
n302 -> n303  [key=0, style=solid];
n299 -> n300  [key=0, style=solid];
n299 -> n82  [key=2, style=dotted];
n300 -> n301  [key=0, style=solid];
n300 -> n82  [key=2, style=dotted];
n301 -> n296  [color=blue, key=0, style=bold];
n303 -> n304  [key=0, style=solid];
n303 -> n305  [key=2, style=dotted];
n304 -> n302  [color=blue, key=0, style=bold];
n306 -> n307  [key=0, style=solid];
n307 -> n308  [key=0, style=solid];
n307 -> n12  [key=2, style=dotted];
n307 -> n309  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n308 -> n306  [color=blue, key=0, style=bold];
n309 -> n310  [key=0, style=solid];
n309 -> n311  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n310 -> n311  [key=0, style=solid];
n310 -> n25  [key=2, style=dotted];
n310 -> n314  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n311 -> n312  [key=0, style=solid];
n311 -> n3  [key=2, style=dotted];
n311 -> n23  [key=2, style=dotted];
n314 -> n315  [key=0, style=solid];
n314 -> n316  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n312 -> n313  [key=0, style=solid];
n312 -> n82  [key=2, style=dotted];
n313 -> n309  [color=blue, key=0, style=bold];
n315 -> n316  [key=0, style=solid];
n315 -> n305  [key=2, style=dotted];
n316 -> n317  [key=0, style=solid];
n316 -> n305  [key=2, style=dotted];
n317 -> n314  [color=blue, key=0, style=bold];
n318 -> n319  [key=0, style=solid];
n319 -> n320  [key=0, style=solid];
n319 -> n12  [key=2, style=dotted];
n319 -> n321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n320 -> n318  [color=blue, key=0, style=bold];
n321 -> n322  [key=0, style=solid];
n321 -> n323  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n322 -> n323  [key=0, style=solid];
n322 -> n25  [key=2, style=dotted];
n322 -> n326  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n323 -> n324  [key=0, style=solid];
n323 -> n3  [key=2, style=dotted];
n323 -> n23  [key=2, style=dotted];
n326 -> n327  [key=0, style=solid];
n326 -> n328  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n326 -> n329  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n324 -> n325  [key=0, style=solid];
n324 -> n82  [key=2, style=dotted];
n325 -> n321  [color=blue, key=0, style=bold];
n327 -> n328  [key=0, style=solid];
n327 -> n305  [key=2, style=dotted];
n328 -> n329  [key=0, style=solid];
n328 -> n305  [key=2, style=dotted];
n329 -> n330  [key=0, style=solid];
n329 -> n331  [key=2, style=dotted];
n330 -> n326  [color=blue, key=0, style=bold];
n332 -> n333  [key=0, style=solid];
n333 -> n334  [key=0, style=solid];
n333 -> n12  [key=2, style=dotted];
n333 -> n335  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n334 -> n332  [color=blue, key=0, style=bold];
n335 -> n336  [key=0, style=solid];
n335 -> n337  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n336 -> n337  [key=0, style=solid];
n336 -> n25  [key=2, style=dotted];
n336 -> n340  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n337 -> n338  [key=0, style=solid];
n337 -> n3  [key=2, style=dotted];
n337 -> n23  [key=2, style=dotted];
n340 -> n341  [key=0, style=solid];
n340 -> n342  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n338 -> n339  [key=0, style=solid];
n338 -> n82  [key=2, style=dotted];
n339 -> n335  [color=blue, key=0, style=bold];
n341 -> n342  [key=0, style=solid];
n341 -> n305  [key=2, style=dotted];
n342 -> n343  [key=0, style=solid];
n342 -> n331  [key=2, style=dotted];
n343 -> n340  [color=blue, key=0, style=bold];
n344 -> n345  [key=0, style=solid];
n345 -> n346  [key=0, style=solid];
n345 -> n12  [key=2, style=dotted];
n345 -> n347  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n346 -> n344  [color=blue, key=0, style=bold];
n347 -> n348  [key=0, style=solid];
n347 -> n349  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n348 -> n349  [key=0, style=solid];
n348 -> n25  [key=2, style=dotted];
n348 -> n352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n349 -> n350  [key=0, style=solid];
n349 -> n3  [key=2, style=dotted];
n349 -> n23  [key=2, style=dotted];
n352 -> n353  [key=0, style=solid];
n352 -> n354  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n350 -> n351  [key=0, style=solid];
n350 -> n82  [key=2, style=dotted];
n351 -> n347  [color=blue, key=0, style=bold];
n353 -> n354  [key=0, style=solid];
n353 -> n305  [key=2, style=dotted];
n354 -> n355  [key=0, style=solid];
n354 -> n331  [key=2, style=dotted];
n355 -> n352  [color=blue, key=0, style=bold];
n356 -> n357  [key=0, style=solid];
n357 -> n358  [key=0, style=solid];
n357 -> n12  [key=2, style=dotted];
n357 -> n359  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n358 -> n356  [color=blue, key=0, style=bold];
n359 -> n360  [key=0, style=solid];
n359 -> n361  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n360 -> n361  [key=0, style=solid];
n360 -> n25  [key=2, style=dotted];
n360 -> n367  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n361 -> n362  [key=0, style=solid];
n361 -> n22  [key=2, style=dotted];
n361 -> n366  [key=2, style=dotted];
n361 -> n363  [color=darkseagreen4, key=1, label=records, style=dashed];
n361 -> n364  [color=darkseagreen4, key=1, label=records, style=dashed];
n367 -> n368  [key=0, style=solid];
n367 -> n369  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n367 -> n370  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n367 -> n371  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n367 -> n372  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n362 -> n363  [key=0, style=solid];
n362 -> n82  [key=2, style=dotted];
n363 -> n364  [key=0, style=solid];
n363 -> n82  [key=2, style=dotted];
n364 -> n365  [key=0, style=solid];
n364 -> n82  [key=2, style=dotted];
n365 -> n359  [color=blue, key=0, style=bold];
n368 -> n369  [key=0, style=solid];
n368 -> n305  [key=2, style=dotted];
n369 -> n370  [key=0, style=solid];
n369 -> n305  [key=2, style=dotted];
n370 -> n371  [key=0, style=solid];
n370 -> n305  [key=2, style=dotted];
n371 -> n372  [key=0, style=solid];
n371 -> n305  [key=2, style=dotted];
n372 -> n373  [key=0, style=solid];
n372 -> n374  [key=2, style=dotted];
n373 -> n367  [color=blue, key=0, style=bold];
n375 -> n376  [key=0, style=solid];
n376 -> n377  [key=0, style=solid];
n376 -> n12  [key=2, style=dotted];
n376 -> n378  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n377 -> n375  [color=blue, key=0, style=bold];
n378 -> n379  [key=0, style=solid];
n378 -> n380  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n379 -> n380  [key=0, style=solid];
n379 -> n25  [key=2, style=dotted];
n379 -> n383  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n380 -> n381  [key=0, style=solid];
n380 -> n3  [key=2, style=dotted];
n380 -> n23  [key=2, style=dotted];
n383 -> n384  [key=0, style=solid];
n383 -> n385  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n383 -> n386  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n383 -> n387  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n381 -> n382  [key=0, style=solid];
n381 -> n82  [key=2, style=dotted];
n382 -> n378  [color=blue, key=0, style=bold];
n384 -> n385  [key=0, style=solid];
n384 -> n305  [key=2, style=dotted];
n385 -> n386  [key=0, style=solid];
n385 -> n305  [key=2, style=dotted];
n386 -> n387  [key=0, style=solid];
n386 -> n305  [key=2, style=dotted];
n387 -> n388  [key=0, style=solid];
n387 -> n374  [key=2, style=dotted];
n388 -> n383  [color=blue, key=0, style=bold];
n389 -> n390  [key=0, style=solid];
n390 -> n391  [key=0, style=solid];
n390 -> n12  [key=2, style=dotted];
n390 -> n392  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n391 -> n389  [color=blue, key=0, style=bold];
n392 -> n393  [key=0, style=solid];
n392 -> n394  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n393 -> n394  [key=0, style=solid];
n393 -> n25  [key=2, style=dotted];
n393 -> n397  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n394 -> n395  [key=0, style=solid];
n394 -> n3  [key=2, style=dotted];
n394 -> n23  [key=2, style=dotted];
n397 -> n398  [key=0, style=solid];
n397 -> n399  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n395 -> n396  [key=0, style=solid];
n395 -> n82  [key=2, style=dotted];
n396 -> n392  [color=blue, key=0, style=bold];
n398 -> n399  [key=0, style=solid];
n398 -> n305  [key=2, style=dotted];
n399 -> n400  [key=0, style=solid];
n399 -> n374  [key=2, style=dotted];
n400 -> n397  [color=blue, key=0, style=bold];
n401 -> n402  [key=0, style=solid];
n402 -> n403  [key=0, style=solid];
n402 -> n12  [key=2, style=dotted];
n402 -> n404  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n403 -> n401  [color=blue, key=0, style=bold];
n404 -> n405  [key=0, style=solid];
n404 -> n406  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n405 -> n406  [key=0, style=solid];
n405 -> n25  [key=2, style=dotted];
n405 -> n409  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n406 -> n407  [key=0, style=solid];
n406 -> n3  [key=2, style=dotted];
n406 -> n23  [key=2, style=dotted];
n409 -> n410  [key=0, style=solid];
n409 -> n411  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n407 -> n408  [key=0, style=solid];
n407 -> n82  [key=2, style=dotted];
n408 -> n404  [color=blue, key=0, style=bold];
n410 -> n411  [key=0, style=solid];
n410 -> n305  [key=2, style=dotted];
n411 -> n412  [key=0, style=solid];
n411 -> n374  [key=2, style=dotted];
n412 -> n409  [color=blue, key=0, style=bold];
n413 -> n414  [key=0, style=solid];
n414 -> n415  [key=0, style=solid];
n414 -> n12  [key=2, style=dotted];
n414 -> n416  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n415 -> n413  [color=blue, key=0, style=bold];
n416 -> n417  [key=0, style=solid];
n416 -> n418  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n417 -> n418  [key=0, style=solid];
n417 -> n25  [key=2, style=dotted];
n417 -> n421  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n418 -> n419  [key=0, style=solid];
n418 -> n3  [key=2, style=dotted];
n418 -> n23  [key=2, style=dotted];
n421 -> n422  [key=0, style=solid];
n421 -> n423  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
n419 -> n420  [key=0, style=solid];
n419 -> n82  [key=2, style=dotted];
n420 -> n416  [color=blue, key=0, style=bold];
n422 -> n423  [key=0, style=solid];
n422 -> n305  [key=2, style=dotted];
n423 -> n424  [key=0, style=solid];
n423 -> n374  [key=2, style=dotted];
n424 -> n421  [color=blue, key=0, style=bold];
n425 -> n426  [key=0, style=solid];
n425 -> n427  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
n426 -> n427  [key=0, style=solid];
n426 -> n429  [key=2, style=dotted];
n427 -> n428  [key=0, style=solid];
n427 -> n430  [key=2, style=dotted];
n428 -> n425  [color=blue, key=0, style=bold];
n431 -> n432  [key=0, style=solid];
n431 -> n7  [key=2, style=dotted];
n431 -> n433  [color=darkseagreen4, key=1, label=transaction, style=dashed];
n432 -> n433  [key=0, style=solid];
n432 -> n430  [key=2, style=dotted];
n433 -> n434  [key=0, style=solid];
n433 -> n435  [key=2, style=dotted];
n434 -> n25  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [color=blue, key=0, style=bold];
m1_30 -> m1_42  [key=0, style=solid];
m1_30 -> m1_50  [color=darkseagreen4, key=1, label="Hangfire.IJobCancellationToken", style=dashed];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_62  [key=2, style=dotted];
m1_42 -> m1_45  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m1_42 -> m1_46  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m1_50 -> m1_56  [key=0, style=solid];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_63  [key=2, style=dotted];
m1_43 -> m1_56  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_43 -> m1_58  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_58  [key=0, style=solid];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_49  [color=darkseagreen4, key=1, label=parameter, style=dashed];
m1_46 -> m1_51  [color=darkseagreen4, key=1, label=parameter, style=dashed];
m1_46 -> m1_53  [color=darkseagreen4, key=1, label=parameter, style=dashed];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_46  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_44 -> m1_47  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_44 -> m1_57  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_56 -> m1_57  [key=0, style=solid];
m1_56 -> m1_67  [key=2, style=dotted];
m1_58 -> m1_61  [key=0, style=solid];
m1_58 -> m1_68  [key=2, style=dotted];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_51  [color=darkseagreen4, key=1, label=argument, style=dashed];
m1_47 -> m1_54  [color=darkseagreen4, key=1, label=argument, style=dashed];
m1_57 -> m1_45  [key=0, style=solid];
m1_57 -> m1_57  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_51  [key=0, style=solid];
m1_49 -> m1_64  [key=2, style=dotted];
m1_49 -> m1_65  [key=2, style=dotted];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_56  [key=0, style=solid];
m1_51 -> m1_66  [key=2, style=dotted];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_55  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_54 -> m1_56  [key=0, style=solid];
m1_52 -> m1_53  [key=0, style=solid];
m1_55 -> m1_61  [key=0, style=solid];
m1_59 -> m1_60  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_41  [key=2, style=dotted];
m1_61 -> m1_30  [color=blue, key=0, style=bold];
m1_29 -> m1_32  [key=0, style=solid];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_39  [key=2, style=dotted];
m1_32 -> m1_35  [color=darkseagreen4, key=1, label=instance, style=dashed];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_35  [key=0, style=solid];
m1_35 -> m1_38  [key=0, style=solid];
m1_34 -> m1_38  [key=0, style=solid];
m1_34 -> m1_40  [key=2, style=dotted];
m1_36 -> m1_37  [key=0, style=solid];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_41  [key=2, style=dotted];
m1_38 -> m1_29  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m1_0 -> m1_4  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m1_0 -> m1_5  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_0 -> m1_6  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_0 -> m1_7  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_0 -> m1_8  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m1_0 -> m1_9  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m1_0 -> m1_10  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=0, style=solid];
m1_2 -> m1_11  [key=0, style=solid];
m1_2 -> m1_12  [key=2, style=dotted];
m1_2 -> m1_13  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=0, style=solid];
m1_4 -> m1_12  [key=2, style=dotted];
m1_4 -> m1_13  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_7  [key=0, style=solid];
m1_6 -> m1_11  [key=0, style=solid];
m1_6 -> m1_12  [key=2, style=dotted];
m1_6 -> m1_13  [key=2, style=dotted];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_13  [key=2, style=dotted];
m1_7 -> m1_14  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_15  [key=2, style=dotted];
m1_11 -> m1_0  [color=blue, key=0, style=bold];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [color=darkseagreen4, key=1, label="Hangfire.JobActivator", style=dashed];
m1_16 -> m1_19  [color=darkseagreen4, key=1, label="Hangfire.IJobCancellationToken", style=dashed];
m1_16 -> m1_20  [color=darkseagreen4, key=1, label="Hangfire.IJobCancellationToken", style=dashed];
m1_16 -> m1_24  [color=darkseagreen4, key=1, label="Hangfire.JobActivator", style=dashed];
m1_16 -> m1_25  [color=darkseagreen4, key=1, label="Hangfire.IJobCancellationToken", style=dashed];
m1_16 -> m1_26  [color=darkseagreen4, key=1, label="Hangfire.IJobCancellationToken", style=dashed];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=0, style=solid];
m1_18 -> m1_28  [key=0, style=solid];
m1_18 -> m1_12  [key=2, style=dotted];
m1_18 -> m1_13  [key=2, style=dotted];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_21  [key=0, style=solid];
m1_20 -> m1_28  [key=0, style=solid];
m1_20 -> m1_12  [key=2, style=dotted];
m1_20 -> m1_13  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_29  [key=2, style=dotted];
m1_24 -> m1_26  [color=darkseagreen4, key=1, label=instance, style=dashed];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_30  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_31  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_26  [color=darkseagreen4, key=1, label=instance, style=dashed];
m1_22 -> m1_23  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_28 -> m1_16  [color=blue, key=0, style=bold];
m1_31 -> m1_69  [key=0, style=solid];
m1_31 -> m1_73  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m1_69 -> m1_76  [key=0, style=solid];
m1_69 -> m1_77  [key=2, style=dotted];
m1_73 -> m1_74  [key=0, style=solid];
m1_73 -> m1_75  [key=0, style=solid];
m1_73 -> m1_73  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m1_70 -> m1_71  [key=0, style=solid];
m1_71 -> m1_72  [key=0, style=solid];
m1_71 -> m1_73  [key=0, style=solid];
m1_72 -> m1_76  [key=0, style=solid];
m1_74 -> m1_76  [key=0, style=solid];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_41  [key=2, style=dotted];
m1_76 -> m1_31  [color=blue, key=0, style=bold];
m1_78 -> m1_79  [key=0, style=solid];
m1_79 -> m1_80  [key=0, style=solid];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_83  [key=0, style=solid];
m1_80 -> m1_84  [key=2, style=dotted];
m1_81 -> m1_82  [key=0, style=solid];
m1_82 -> m1_83  [key=0, style=solid];
m1_82 -> m1_41  [key=2, style=dotted];
m1_83 -> m1_78  [color=blue, key=0, style=bold];
m1_85 -> m1_8  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_9  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_10  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_23  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_24  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_25  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_26  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_32  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_34  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_42  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_43  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_47  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m1_85 -> m1_69  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> n81  [key=2, style=dotted];
m2_3 -> m2_6  [key=2, style=dotted];
m2_4 -> m2_2  [color=blue, key=0, style=bold];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_41  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_38 -> m2_42  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_38 -> m2_50  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_38 -> m2_43  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_38 -> m2_54  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_41  [key=0, style=solid];
m2_41 -> m2_42  [key=0, style=solid];
m2_41 -> m2_17  [key=2, style=dotted];
m2_41 -> m2_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_17  [key=2, style=dotted];
m2_42 -> m2_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_17  [key=2, style=dotted];
m2_43 -> m2_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_40 -> m2_44  [key=0, style=solid];
m2_40 -> m2_16  [key=2, style=dotted];
m2_44 -> m2_38  [color=blue, key=0, style=bold];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_17  [key=2, style=dotted];
m2_11 -> m2_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_10  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_7 -> m2_11  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_7 -> m2_12  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_7 -> m2_13  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_7 -> m2_14  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_10  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_17  [key=2, style=dotted];
m2_10 -> m2_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_17  [key=2, style=dotted];
m2_12 -> m2_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_17  [key=2, style=dotted];
m2_13 -> m2_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_17  [key=2, style=dotted];
m2_14 -> m2_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_9 -> m2_15  [key=0, style=solid];
m2_9 -> m2_16  [key=2, style=dotted];
m2_15 -> m2_7  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [color=blue, key=0, style=bold];
m2_53 -> m2_54  [key=0, style=solid];
m2_18 -> m2_19  [key=0, style=solid];
m2_23 -> m2_24  [key=0, style=solid];
m2_26 -> m2_27  [key=0, style=solid];
m2_30 -> m2_31  [key=0, style=solid];
m2_34 -> m2_35  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_21  [key=2, style=dotted];
m2_19 -> m2_22  [key=2, style=dotted];
m2_20 -> m2_18  [color=blue, key=0, style=bold];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_21  [key=2, style=dotted];
m2_24 -> m2_22  [key=2, style=dotted];
m2_25 -> m2_23  [color=blue, key=0, style=bold];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_29  [key=2, style=dotted];
m2_28 -> m2_26  [color=blue, key=0, style=bold];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_33  [key=2, style=dotted];
m2_32 -> m2_30  [color=blue, key=0, style=bold];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_37  [key=2, style=dotted];
m2_36 -> m2_34  [color=blue, key=0, style=bold];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_21  [key=2, style=dotted];
m2_50 -> m2_52  [key=2, style=dotted];
m2_54 -> m2_55  [key=0, style=solid];
m2_54 -> m2_21  [key=2, style=dotted];
m2_54 -> m2_52  [key=2, style=dotted];
m2_45 -> m2_46  [key=0, style=solid];
m2_49 -> m2_50  [key=0, style=solid];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_48  [key=2, style=dotted];
m2_47 -> m2_45  [color=blue, key=0, style=bold];
m2_51 -> m2_49  [color=blue, key=0, style=bold];
m2_55 -> m2_53  [color=blue, key=0, style=bold];
m2_56 -> m2_10  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_56 -> m2_19  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_56 -> m2_11  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_56 -> m2_24  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_56 -> m2_12  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_56 -> m2_27  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m2_57 -> m2_50  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_57 -> m2_54  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_12 -> m3_15  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_12 -> m3_16  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_12 -> m3_17  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_19  [key=2, style=dotted];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_19  [key=2, style=dotted];
m3_15 -> m3_16  [key=0, style=solid];
m3_15 -> m3_20  [key=2, style=dotted];
m3_15 -> m3_21  [key=2, style=dotted];
m3_15 -> m3_19  [key=2, style=dotted];
m3_15 -> m3_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_19  [key=2, style=dotted];
m3_17 -> m3_18  [key=0, style=solid];
m3_17 -> m3_19  [key=2, style=dotted];
m3_18 -> m3_12  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_11  [key=2, style=dotted];
m3_2 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [color=red, key=0, style=solid];
m3_4 -> m3_5  [color=red, key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid];
m3_7 -> m3_8  [key=0, style=solid];
m3_8 -> m3_9  [key=0, style=solid];
m3_9 -> m3_10  [key=0, style=solid];
m3_10 -> m3_0  [color=blue, key=0, style=bold];
m3_22 -> m3_23  [key=0, style=solid];
m3_23 -> m3_24  [key=0, style=solid];
m3_24 -> m3_22  [color=blue, key=0, style=bold];
m3_25 -> m3_1  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_2  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_3  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_4  [color=red, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_5  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_6  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_7  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_8  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_9  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_15  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_16  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_17  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m4_19 -> m4_33  [color=green, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m4_19 -> m4_38  [color=green, key=3, label="method methodReturn bool EnqueueNextScheduledJob", style=bold];
m4_19 -> m4_11  [color=darkorchid, key=3, label="Parameter variable Hangfire.Server.BackgroundProcessContext context", style=bold];
m4_19 -> m4_26  [key=0, style=solid];
m4_19 -> m4_31  [color=darkorchid, key=3, label="method methodReturn bool EnqueueNextScheduledJob", style=bold];
m4_33 -> m4_34  [color=green, key=0, style=solid];
m4_33 -> m4_46  [color=green, key=2, style=dotted];
m4_33 -> m4_47  [color=green, key=2, style=dotted];
m4_26 -> m4_33  [color=green, key=1, label=connection, style=dashed];
m4_26 -> m4_29  [color=green, key=1, label=connection, style=dashed];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_40  [key=2, style=dotted];
m4_26 -> m4_35  [color=darkseagreen4, key=1, label=connection, style=dashed];
m4_29 -> m4_33  [color=green, key=1, label=jobId, style=dashed];
m4_29 -> m4_30  [color=green, key=0, style=solid];
m4_29 -> m4_43  [color=green, key=2, style=dotted];
m4_29 -> m4_36  [color=green, key=1, label=jobId, style=dashed];
m4_32 -> m4_33  [color=green, key=0, style=solid];
m4_32 -> m4_45  [color=green, key=2, style=dotted];
m4_34 -> m4_35  [color=green, key=0, style=solid];
m4_34 -> m4_38  [color=green, key=0, style=solid];
m4_28 -> m4_29  [color=green, key=0, style=solid];
m4_28 -> m4_42  [color=green, key=2, style=dotted];
m4_30 -> m4_32  [color=green, key=0, style=solid];
m4_30 -> m4_31  [key=0, style=solid];
m4_30 -> m4_44  [key=2, style=dotted];
m4_36 -> m4_37  [color=green, key=0, style=solid];
m4_36 -> m4_49  [color=green, key=2, style=dotted];
m4_27 -> m4_28  [color=green, key=0, style=solid];
m4_27 -> m4_41  [key=2, style=dotted];
m4_35 -> m4_36  [color=green, key=0, style=solid];
m4_35 -> m4_37  [color=green, key=1, label=transaction, style=dashed];
m4_35 -> m4_48  [key=2, style=dotted];
m4_37 -> m4_38  [color=green, key=0, style=solid];
m4_37 -> m4_50  [color=green, key=2, style=dotted];
m4_38 -> m4_39  [color=green, key=0, style=solid];
m4_31 -> m4_39  [key=0, style=solid];
m4_39 -> m4_19  [color=blue, key=0, style=bold];
m4_11 -> m4_16  [color=green, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m4_11 -> m4_12  [key=0, style=solid];
m4_16 -> m4_18  [color=green, key=0, style=solid];
m4_16 -> m4_21  [color=green, key=2, style=dotted];
m4_13 -> m4_16  [color=green, key=0, style=solid];
m4_13 -> m4_14  [color=green, key=0, style=solid];
m4_15 -> m4_16  [color=green, key=0, style=solid];
m4_14 -> m4_15  [color=green, key=0, style=solid];
m4_14 -> m4_20  [color=green, key=2, style=dotted];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_19  [key=2, style=dotted];
m4_12 -> m4_17  [key=0, style=solid];
m4_17 -> m4_18  [key=0, style=solid];
m4_18 -> m4_11  [color=blue, key=0, style=bold];
m4_4 -> m4_5  [color=green, key=0, style=solid];
m4_4 -> m4_7  [color=green, key=1, label="Hangfire.States.IBackgroundJobStateChanger", style=dashed];
m4_4 -> m4_8  [color=green, key=1, label="System.TimeSpan", style=dashed];
m4_5 -> m4_6  [color=green, key=0, style=solid];
m4_5 -> m4_7  [color=green, key=0, style=solid];
m4_6 -> m4_9  [color=green, key=0, style=solid];
m4_6 -> m4_10  [color=green, key=2, style=dotted];
m4_7 -> m4_8  [color=green, key=0, style=solid];
m4_8 -> m4_9  [color=green, key=0, style=solid];
m4_9 -> m4_4  [color=blue, key=0, style=bold];
m4_22 -> m4_23  [color=green, key=0, style=solid];
m4_23 -> m4_24  [color=green, key=0, style=solid];
m4_23 -> m4_25  [color=green, key=2, style=dotted];
m4_24 -> m4_22  [color=blue, key=0, style=bold];
m4_51 -> m4_7  [color=green, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_8  [color=green, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_16  [color=green, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_14  [color=green, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_23  [color=green, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_33  [color=green, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_12  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_13  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_15  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m4_51 -> m4_17  [color=darkseagreen4, key=1, label="Hangfire.Server.DelayedJobScheduler", style=dashed];
m5_2 -> m5_3  [key=0, style=solid];
m5_3 -> m5_2  [color=blue, key=0, style=bold];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_0  [color=blue, key=0, style=bold];
m6_10 -> m6_11  [key=0, style=solid];
m6_10 -> m6_14  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_6  [key=2, style=dotted];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_9  [key=2, style=dotted];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_7  [key=2, style=dotted];
m6_2 -> m6_4  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_8  [key=2, style=dotted];
m6_5 -> m6_0  [color=blue, key=0, style=bold];
m6_11 -> m6_12  [key=0, style=solid];
m6_11 -> m6_6  [key=2, style=dotted];
m6_14 -> m6_15  [key=0, style=solid];
m6_14 -> m6_9  [key=2, style=dotted];
m6_12 -> m6_13  [key=0, style=solid];
m6_12 -> m6_7  [key=2, style=dotted];
m6_12 -> m6_14  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_8  [key=2, style=dotted];
m6_15 -> m6_10  [color=blue, key=0, style=bold];
}
