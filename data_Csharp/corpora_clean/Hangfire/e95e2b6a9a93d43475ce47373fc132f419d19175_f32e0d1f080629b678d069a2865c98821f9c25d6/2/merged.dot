digraph  {
n0 [label="Entry HangFire.IJobStateAppliedFilter.OnStateApplied(IRedisTransaction, HangFire.States.JobState)", span="8-8", cluster="HangFire.IJobStateAppliedFilter.OnStateApplied(IRedisTransaction, HangFire.States.JobState)"];
n1 [label="Exit HangFire.IJobStateAppliedFilter.OnStateApplied(IRedisTransaction, HangFire.States.JobState)", span="8-8", cluster="HangFire.IJobStateAppliedFilter.OnStateApplied(IRedisTransaction, HangFire.States.JobState)"];
n2 [label="Entry HangFire.IJobStateAppliedFilter.OnStateUnapplied(IRedisTransaction, string)", span="9-9", cluster="HangFire.IJobStateAppliedFilter.OnStateUnapplied(IRedisTransaction, string)"];
n3 [label="Exit HangFire.IJobStateAppliedFilter.OnStateUnapplied(IRedisTransaction, string)", span="9-9", cluster="HangFire.IJobStateAppliedFilter.OnStateUnapplied(IRedisTransaction, string)"];
m0_15 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BackgroundJobServer.cs"];
m0_34 [label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", span="28-28", cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedLock(string, System.TimeSpan)", file="BackgroundJobServer.cs"];
m0_74 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="45-45", cluster="Hangfire.Storage.InvocationData.Deserialize()", file="BackgroundJobServer.cs"];
m0_89 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="BackgroundJobServer.cs"];
m0_33 [label="Entry Hangfire.JobStorage.GetConnection()", span="56-56", cluster="Hangfire.JobStorage.GetConnection()", file="BackgroundJobServer.cs"];
m0_106 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)", file="BackgroundJobServer.cs"];
m0_40 [label="Entry Hangfire.Server.RecurringJobScheduler.ToString()", span="150-150", cluster="Hangfire.Server.RecurringJobScheduler.ToString()", file="BackgroundJobServer.cs"];
m0_41 [label="return GetType().Name;", span="152-152", cluster="Hangfire.Server.RecurringJobScheduler.ToString()", file="BackgroundJobServer.cs"];
m0_42 [label="Exit Hangfire.Server.RecurringJobScheduler.ToString()", span="150-150", cluster="Hangfire.Server.RecurringJobScheduler.ToString()", file="BackgroundJobServer.cs"];
m0_83 [label="Entry Hangfire.States.EnqueuedState.EnqueuedState()", span="87-87", cluster="Hangfire.States.EnqueuedState.EnqueuedState()", file="BackgroundJobServer.cs"];
m0_90 [label="Entry Hangfire.Storage.IStorageConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="61-61", cluster="Hangfire.Storage.IStorageConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="BackgroundJobServer.cs"];
m0_43 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="BackgroundJobServer.cs"];
m0_92 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="BackgroundJobServer.cs"];
m0_0 [label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", span="78-78", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", file="BackgroundJobServer.cs"];
m0_1 [label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", span="78-78", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler()", file="BackgroundJobServer.cs"];
m0_38 [label="Entry Hangfire.Logging.ILog.WarnException(string, System.Exception)", span="280-280", cluster="Hangfire.Logging.ILog.WarnException(string, System.Exception)", file="BackgroundJobServer.cs"];
m0_77 [label="Entry System.TimeZoneInfo.FindSystemTimeZoneById(string)", span="0-0", cluster="System.TimeZoneInfo.FindSystemTimeZoneById(string)", file="BackgroundJobServer.cs"];
m0_82 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="BackgroundJobServer.cs"];
m0_85 [label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="37-37", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="BackgroundJobServer.cs"];
m0_16 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="BackgroundJobServer.cs"];
m0_32 [label="Entry Hangfire.Server.IThrottler.Throttle(System.Threading.CancellationToken)", span="22-22", cluster="Hangfire.Server.IThrottler.Throttle(System.Threading.CancellationToken)", file="BackgroundJobServer.cs"];
m0_2 [label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", span="90-90", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", file="BackgroundJobServer.cs"];
m0_3 [label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", span="90-90", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory)", file="BackgroundJobServer.cs"];
m0_79 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="BackgroundJobServer.cs"];
m0_88 [label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68", cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="BackgroundJobServer.cs"];
m0_81 [label="Entry Hangfire.Server.IScheduleInstant.GetNextInstants(System.DateTime)", span="25-25", cluster="Hangfire.Server.IScheduleInstant.GetNextInstants(System.DateTime)", file="BackgroundJobServer.cs"];
m0_73 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="BackgroundJobServer.cs"];
m0_37 [label="Entry Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", span="155-155", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_44 [label="var serializedJob = JobHelper.FromJson<InvocationData>(recurringJob[''Job''])", span="161-161", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_46 [label="var cron = recurringJob[''Cron'']", span="163-163", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_48 [label="var timeZone = recurringJob.ContainsKey(''TimeZoneId'')\r\n                    ? TimeZoneInfo.FindSystemTimeZoneById(recurringJob[''TimeZoneId''])\r\n                    : TimeZoneInfo.Utc", span="168-170", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_51 [label="var lastInstant = GetLastInstant(recurringJob, nowInstant)", span="175-175", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_54 [label="recurringJob.ContainsKey(''Queue'') && !String.IsNullOrEmpty(recurringJob[''Queue''])", span="180-180", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_55 [label="state.Queue = recurringJob[''Queue'']", span="182-182", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_56 [label="var context = new CreateContext(storage, connection, job, state)", span="185-185", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_57 [label="context.Parameters[''RecurringJobId''] = recurringJobId", span="186-186", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_61 [label="Logger.Debug($''Recurring job '{recurringJobId}' execution at '{nowInstant.NowInstant}' has been canceled.'')", span="193-193", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_64 [label="!recurringJob.ContainsKey(''CreatedAt'')", span="201-201", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_67 [label="connection.SetRangeInHash(\r\n                    $''recurring-job:{recurringJobId}'',\r\n                    changedFields)", span="208-210", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_71 [label="Logger.ErrorException(\r\n                    $''Recurring job '{recurringJobId}' was not triggered: {ex.Message}.'',\r\n                    ex)", span="222-224", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_45 [label="var job = serializedJob.Deserialize()", span="162-162", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_47 [label="var cronSchedule = CrontabSchedule.Parse(cron)", span="164-164", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_49 [label="var nowInstant = _instantFactory(cronSchedule, timeZone)", span="172-172", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_50 [label="var changedFields = new Dictionary<string, string>()", span="173-173", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_52 [label="nowInstant.GetNextInstants(lastInstant).Any()", span="177-177", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_62 [label="changedFields.Add(''LastExecution'', JobHelper.SerializeDateTime(nowInstant.NowInstant))", span="196-196", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_65 [label="changedFields.Add(''CreatedAt'', JobHelper.SerializeDateTime(nowInstant.NowInstant))", span="203-203", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_66 [label="changedFields.Add(''NextExecution'', nowInstant.NextInstant.HasValue ? JobHelper.SerializeDateTime(nowInstant.NextInstant.Value) : null)", span="206-206", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_63 [label="changedFields.Add(''LastJobId'', jobId ?? String.Empty)", span="197-197", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_53 [label="var state = new EnqueuedState { Reason = ''Triggered by recurring job scheduler'' }", span="179-179", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_58 [label="var backgroundJob = _factory.Create(context)", span="188-188", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_59 [label="var jobId = backgroundJob?.Id", span="189-189", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_60 [label="String.IsNullOrEmpty(jobId)", span="191-191", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_68 [label=Exception, span="216-216", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_69 [label="!ex.GetType().Name.Equals(''TimeZoneNotFoundException'')", span="219-219", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_70 [label="throw;", span="219-219", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_72 [label="Exit Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", span="155-155", cluster="Hangfire.Server.RecurringJobScheduler.TryScheduleJob(Hangfire.JobStorage, Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.IReadOnlyDictionary<string, string>)", file="BackgroundJobServer.cs"];
m0_84 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="BackgroundJobServer.cs"];
m0_4 [label="Entry Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="95-95", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="BackgroundJobServer.cs"];
m0_5 [label="factory == null", span="100-100", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="BackgroundJobServer.cs"];
m0_6 [label="throw new ArgumentNullException(nameof(factory));", span="100-100", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="BackgroundJobServer.cs"];
m0_7 [label="instantFactory == null", span="101-101", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="BackgroundJobServer.cs"];
m0_8 [label="throw new ArgumentNullException(nameof(instantFactory));", span="101-101", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="BackgroundJobServer.cs"];
m0_9 [label="throttler == null", span="102-102", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="BackgroundJobServer.cs"];
m0_10 [label="throw new ArgumentNullException(nameof(throttler));", span="102-102", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="BackgroundJobServer.cs"];
m0_11 [label="_factory = factory", span="104-104", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="BackgroundJobServer.cs"];
m0_12 [label="_instantFactory = instantFactory", span="105-105", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="BackgroundJobServer.cs"];
m0_13 [label="_throttler = throttler", span="106-106", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="BackgroundJobServer.cs"];
m0_14 [label="Exit Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", span="95-95", cluster="Hangfire.Server.RecurringJobScheduler.RecurringJobScheduler(Hangfire.Client.IBackgroundJobFactory, System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>, Hangfire.Server.IThrottler)", file="BackgroundJobServer.cs"];
m0_105 [label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73", cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", file="BackgroundJobServer.cs"];
m0_17 [label="Entry Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="110-110", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_18 [label="context == null", span="112-112", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_19 [label="throw new ArgumentNullException(nameof(context));", span="112-112", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_20 [label="_throttler.Throttle(context.CancellationToken)", span="114-114", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_21 [label="var connection = context.Storage.GetConnection()", span="116-116", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_27 [label="TryScheduleJob(context.Storage, connection, recurringJobId, recurringJob)", span="133-133", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_30 [label="_throttler.Delay(context.CancellationToken)", span="146-146", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_22 [label="connection.AcquireDistributedLock(''recurring-jobs:lock'', LockTimeout)", span="117-117", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_23 [label="var recurringJobIds = connection.GetAllItemsFromSet(''recurring-jobs'')", span="119-119", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_25 [label="var recurringJob = connection.GetAllEntriesFromHash(\r\n                        $''recurring-job:{recurringJobId}'')", span="123-124", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_24 [label=recurringJobIds, span="121-121", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_29 [label="Logger.WarnException(\r\n                            $''Recurring job '{recurringJobId}' can not be scheduled due to job load exception.'',\r\n                            ex)", span="137-139", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_26 [label="recurringJob == null", span="126-126", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_28 [label=JobLoadException, span="135-135", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_31 [label="Exit Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="110-110", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="BackgroundJobServer.cs"];
m0_39 [label="Entry Hangfire.Server.IThrottler.Delay(System.Threading.CancellationToken)", span="23-23", cluster="Hangfire.Server.IThrottler.Delay(System.Threading.CancellationToken)", file="BackgroundJobServer.cs"];
m0_91 [label="Entry System.Exception.GetType()", span="0-0", cluster="System.Exception.GetType()", file="BackgroundJobServer.cs"];
m0_87 [label="Entry Hangfire.Logging.ILog.Debug(string)", span="116-116", cluster="Hangfire.Logging.ILog.Debug(string)", file="BackgroundJobServer.cs"];
m0_35 [label="Entry Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55", cluster="Hangfire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="BackgroundJobServer.cs"];
m0_36 [label="Entry Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64", cluster="Hangfire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="BackgroundJobServer.cs"];
m0_93 [label="Entry Hangfire.Logging.ILog.ErrorException(string, System.Exception)", span="161-161", cluster="Hangfire.Logging.ILog.ErrorException(string, System.Exception)", file="BackgroundJobServer.cs"];
m0_76 [label="Entry System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)", file="BackgroundJobServer.cs"];
m0_75 [label="Entry NCrontab.CrontabSchedule.Parse(string)", span="93-93", cluster="NCrontab.CrontabSchedule.Parse(string)", file="BackgroundJobServer.cs"];
m0_78 [label="Entry System.Func<T1, T2, TResult>.Invoke(T1, T2)", span="0-0", cluster="System.Func<T1, T2, TResult>.Invoke(T1, T2)", file="BackgroundJobServer.cs"];
m0_80 [label="Entry Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", span="229-229", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_94 [label="DateTime lastInstant", span="231-231", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_95 [label="recurringJob.ContainsKey(''LastExecution'')", span="233-233", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_96 [label="lastInstant = JobHelper.DeserializeDateTime(recurringJob[''LastExecution''])", span="235-235", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_97 [label="recurringJob.ContainsKey(''CreatedAt'')", span="237-237", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_98 [label="lastInstant = JobHelper.DeserializeDateTime(recurringJob[''CreatedAt''])", span="239-239", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_99 [label="recurringJob.ContainsKey(''NextExecution'')", span="241-241", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_100 [label="lastInstant = JobHelper.DeserializeDateTime(recurringJob[''NextExecution''])", span="243-243", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_102 [label="lastInstant = instant.NowInstant.AddSeconds(-1)", span="248-248", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_101 [label="lastInstant = lastInstant.AddSeconds(-1)", span="244-244", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_103 [label="return lastInstant;", span="251-251", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_104 [label="Exit Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", span="229-229", cluster="Hangfire.Server.RecurringJobScheduler.GetLastInstant(System.Collections.Generic.IReadOnlyDictionary<string, string>, Hangfire.Server.IScheduleInstant)", file="BackgroundJobServer.cs"];
m0_86 [label="Entry Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", span="31-31", cluster="Hangfire.Client.IBackgroundJobFactory.Create(Hangfire.Client.CreateContext)", file="BackgroundJobServer.cs"];
m0_107 [label="Hangfire.Server.RecurringJobScheduler", span="", file="BackgroundJobServer.cs"];
m1_0 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", span="15-15", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m1_1 [label="_storage = new Mock<JobStorage>()", span="17-17", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m1_2 [label="_options = new BackgroundJobServerOptions()", span="18-18", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m1_3 [label="_supervisor = new Mock<IServerSupervisor>()", span="20-20", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m1_4 [label="_serverMock = new Mock<BackgroundJobServer>(_options, _storage.Object)\r\n            {\r\n                CallBase = true\r\n            }", span="21-24", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m1_5 [label="_serverMock.Setup(x => x.GetBootstrapSupervisor()).Returns(_supervisor.Object)", span="25-25", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m1_6 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", span="15-15", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.BackgroundJobServerFacts()", file="BackgroundJobServerFacts.cs"];
m1_27 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="38-38", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundJobServerFacts.cs"];
m1_28 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobServer(_options, null))", span="40-41", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundJobServerFacts.cs"];
m1_29 [label="Assert.Equal(''storage'', exception.ParamName)", span="43-43", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundJobServerFacts.cs"];
m1_30 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="38-38", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="BackgroundJobServerFacts.cs"];
m1_57 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValues_ForAllParameters()", span="62-62", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValues_ForAllParameters()", file="BackgroundJobServerFacts.cs"];
m1_59 [label="Assert.DoesNotThrow(() => StartServer(\r\n                () => new BackgroundJobServer()))", span="65-66", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValues_ForAllParameters()", file="BackgroundJobServerFacts.cs"];
m1_58 [label="JobStorage.Current = new Mock<JobStorage>().Object", span="64-64", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValues_ForAllParameters()", file="BackgroundJobServerFacts.cs"];
m1_60 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValues_ForAllParameters()", span="62-62", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValues_ForAllParameters()", file="BackgroundJobServerFacts.cs"];
m1_47 [label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", span="60-60", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", file="BackgroundJobServerFacts.cs"];
m1_67 [label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer()", span="40-40", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer()", file="BackgroundJobServerFacts.cs"];
m1_104 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsDefaultComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", span="112-112", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsDefaultComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_105 [label="var server = CreateServer()", span="115-115", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsDefaultComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_106 [label="var supervisors = server.GetSupervisors()", span="118-118", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsDefaultComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_107 [label="var componentTypes = supervisors.OfType<ServerSupervisor>()\r\n                .Select(x => x.Component)\r\n                .Cast<AutomaticRetryServerComponentWrapper>()\r\n                .Select(x => x.InnerComponent)\r\n                .Select(x => x.GetType())\r\n                .ToArray()", span="121-126", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsDefaultComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_108 [label="Assert.Contains(typeof(Worker), componentTypes)", span="128-128", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsDefaultComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_109 [label="Assert.Contains(typeof(ServerHeartbeat), componentTypes)", span="129-129", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsDefaultComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_110 [label="Assert.Contains(typeof(ServerWatchdog), componentTypes)", span="130-130", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsDefaultComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_111 [label="Assert.Contains(typeof(SchedulePoller), componentTypes)", span="131-131", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsDefaultComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_112 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsDefaultComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", span="112-112", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsDefaultComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_22 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="BackgroundJobServerFacts.cs"];
m1_35 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", span="47-47", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", file="BackgroundJobServerFacts.cs"];
m1_37 [label="Assert.DoesNotThrow(() => StartServer(\r\n                () => new BackgroundJobServer(_options)))", span="50-51", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", file="BackgroundJobServerFacts.cs"];
m1_36 [label="JobStorage.Current = new Mock<JobStorage>().Object", span="49-49", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", file="BackgroundJobServerFacts.cs"];
m1_38 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", span="47-47", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForStorage()", file="BackgroundJobServerFacts.cs"];
m1_48 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForOptions()", span="55-55", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForOptions()", file="BackgroundJobServerFacts.cs"];
m1_49 [label="Assert.DoesNotThrow(() => StartServer(\r\n                () => new BackgroundJobServer(_storage.Object)))", span="57-58", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForOptions()", file="BackgroundJobServerFacts.cs"];
m1_50 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForOptions()", span="55-55", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_HasDefaultValue_ForOptions()", file="BackgroundJobServerFacts.cs"];
m1_68 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheBootstrapSupervisor()", span="70-70", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_69 [label="_serverMock.Object.Start()", span="72-72", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheBootstrapSupervisor()", color=green, community=0, file="BackgroundJobServerFacts.cs"];
m1_70 [label="_supervisor.Verify(x => x.Start())", span="74-74", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_71 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheBootstrapSupervisor()", span="70-70", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Start_StartsTheBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_81 [label="Entry Unk.Stop", span="", cluster="Unk.Stop", file="BackgroundJobServerFacts.cs"];
m1_153 [label="Entry Hangfire.BackgroundJobServer.Start()", span="85-85", cluster="Hangfire.BackgroundJobServer.Start()", file="BackgroundJobServerFacts.cs"];
m1_39 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="BackgroundJobServerFacts.cs"];
m1_9 [label="Entry Mock<IServerSupervisor>.cstr", span="", cluster="Mock<IServerSupervisor>.cstr", file="BackgroundJobServerFacts.cs"];
m1_17 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="29-29", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="BackgroundJobServerFacts.cs"];
m1_18 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobServer(null, _storage.Object))", span="31-32", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="BackgroundJobServerFacts.cs"];
m1_19 [label="Assert.Equal(''options'', exception.ParamName)", span="34-34", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="BackgroundJobServerFacts.cs"];
m1_20 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="29-29", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="BackgroundJobServerFacts.cs"];
m1_21 [label="Entry Unk.>", span="", cluster="Unk.>", file="BackgroundJobServerFacts.cs"];
m1_43 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.StartServer(System.Func<Hangfire.BackgroundJobServer>)", span="161-161", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.StartServer(System.Func<Hangfire.BackgroundJobServer>)", file="BackgroundJobServerFacts.cs"];
m1_149 [label="var server = createFunc()", span="163-163", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.StartServer(System.Func<Hangfire.BackgroundJobServer>)", file="BackgroundJobServerFacts.cs"];
m1_150 [label="server.Start()", span="165-165", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.StartServer(System.Func<Hangfire.BackgroundJobServer>)", file="BackgroundJobServerFacts.cs"];
m1_151 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.StartServer(System.Func<Hangfire.BackgroundJobServer>)", span="161-161", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.StartServer(System.Func<Hangfire.BackgroundJobServer>)", file="BackgroundJobServerFacts.cs"];
m1_140 [label="Entry Unk.GetComponents", span="", cluster="Unk.GetComponents", file="BackgroundJobServerFacts.cs"];
m1_85 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesBootstrapSupervisor()", span="86-86", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_86 [label="_serverMock.Object.Dispose()", span="88-88", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_87 [label="_supervisor.Verify(x => x.Dispose())", span="90-90", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_88 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesBootstrapSupervisor()", span="86-86", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Dispose_DisposesBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_116 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="BackgroundJobServerFacts.cs"];
m1_103 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="BackgroundJobServerFacts.cs"];
m1_102 [label="Entry Hangfire.BackgroundJobServer.GetBootstrapSupervisor()", span="107-107", cluster="Hangfire.BackgroundJobServer.GetBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_16 [label="Entry Unk.GetBootstrapSupervisor", span="", cluster="Unk.GetBootstrapSupervisor", file="BackgroundJobServerFacts.cs"];
m1_77 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheBootstrapSupervisor()", span="78-78", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_78 [label="_serverMock.Object.Stop()", span="80-80", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_79 [label="_supervisor.Verify(x => x.Stop())", span="82-82", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_80 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheBootstrapSupervisor()", span="78-78", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.Stop_StopsTheBootstrapSupervisor()", file="BackgroundJobServerFacts.cs"];
m1_11 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="BackgroundJobServerFacts.cs"];
m1_89 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="BackgroundJobServerFacts.cs"];
m1_10 [label="Entry Mock<BackgroundJobServer>.cstr", span="", cluster="Mock<BackgroundJobServer>.cstr", file="BackgroundJobServerFacts.cs"];
m1_8 [label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="33-33", cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerFacts.cs"];
m1_136 [label="Entry Mock<IServerComponent>.cstr", span="", cluster="Mock<IServerComponent>.cstr", file="BackgroundJobServerFacts.cs"];
m1_114 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="BackgroundJobServerFacts.cs"];
m1_144 [label="Entry lambda expression", span="150-150", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_24 [label="new BackgroundJobServer(null, _storage.Object)", span="32-32", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_32 [label="new BackgroundJobServer(_options, null)", span="41-41", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_41 [label="StartServer(\r\n                () => new BackgroundJobServer(_options))", span="50-51", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_45 [label="new BackgroundJobServer(_options)", span="51-51", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_52 [label="StartServer(\r\n                () => new BackgroundJobServer(_storage.Object))", span="57-58", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_55 [label="new BackgroundJobServer(_storage.Object)", span="58-58", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_62 [label="StartServer(\r\n                () => new BackgroundJobServer())", span="65-66", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_74 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_75 [label="x.Start()", span="74-74", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_13 [label="Entry lambda expression", span="25-25", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_23 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_25 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_31 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_33 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_40 [label="Entry lambda expression", span="50-51", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_42 [label="Exit lambda expression", span="50-51", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_44 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_46 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_51 [label="Entry lambda expression", span="57-58", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_53 [label="Exit lambda expression", span="57-58", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_54 [label="Entry lambda expression", span="58-58", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_56 [label="Exit lambda expression", span="58-58", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_61 [label="Entry lambda expression", span="65-66", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_63 [label="Exit lambda expression", span="65-66", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_64 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_82 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_90 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_137 [label="Entry lambda expression", span="139-139", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_76 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_15 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_14 [label="x.GetBootstrapSupervisor()", span="25-25", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_66 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_65 [label="new BackgroundJobServer()", span="66-66", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_83 [label="x.Stop()", span="82-82", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_84 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_91 [label="x.Dispose()", span="90-90", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_92 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_139 [label="Exit lambda expression", span="139-139", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_138 [label="x.GetComponents()", span="139-139", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_118 [label="Entry lambda expression", span="122-122", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_121 [label="Entry lambda expression", span="124-124", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_124 [label="Entry lambda expression", span="125-125", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_141 [label="Entry lambda expression", span="148-148", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_120 [label="Exit lambda expression", span="122-122", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_119 [label="x.Component", span="122-122", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_123 [label="Exit lambda expression", span="124-124", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_122 [label="x.InnerComponent", span="124-124", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_126 [label="Exit lambda expression", span="125-125", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_125 [label="x.GetType()", span="125-125", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_143 [label="Exit lambda expression", span="148-148", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_142 [label="x.Component", span="148-148", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_145 [label="x.InnerComponent", span="150-150", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_146 [label="Exit lambda expression", span="150-150", cluster="lambda expression", file="BackgroundJobServerFacts.cs"];
m1_117 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="BackgroundJobServerFacts.cs"];
m1_72 [label="Entry Unk.Start", span="", cluster="Unk.Start", file="BackgroundJobServerFacts.cs"];
m1_115 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="BackgroundJobServerFacts.cs"];
m1_128 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsStorageComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", span="135-135", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsStorageComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_130 [label="_storage.Setup(x => x.GetComponents()).Returns(new[] { storageComponent.Object })", span="139-139", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsStorageComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_131 [label="var server = CreateServer()", span="141-141", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsStorageComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_129 [label="var storageComponent = new Mock<IServerComponent>()", span="138-138", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsStorageComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_132 [label="var supervisors = server.GetSupervisors()", span="144-144", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsStorageComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_133 [label="var components = supervisors.OfType<ServerSupervisor>()\r\n                .Select(x => x.Component)\r\n                .Cast<AutomaticRetryServerComponentWrapper>()\r\n                .Select(x => x.InnerComponent)\r\n                .ToArray()", span="147-151", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsStorageComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_134 [label="Assert.Contains(storageComponent.Object, components)", span="153-153", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsStorageComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_135 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsStorageComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", span="135-135", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetSupervisors_ContainsStorageComponents_WrappedTo_AutomaticRetryServerComponentWrapper()", file="BackgroundJobServerFacts.cs"];
m1_127 [label="Entry Unk.GetType", span="", cluster="Unk.GetType", file="BackgroundJobServerFacts.cs"];
m1_101 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.CreateServer()", span="156-156", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="BackgroundJobServerFacts.cs"];
m1_147 [label="return new BackgroundJobServer(_options, _storage.Object);", span="158-158", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="BackgroundJobServerFacts.cs"];
m1_148 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.CreateServer()", span="156-156", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.CreateServer()", file="BackgroundJobServerFacts.cs"];
m1_93 [label="Entry Hangfire.Core.Tests.BackgroundJobServerFacts.GetBootstrapSupervisor_ReturnsBootstrapper_WrappedWithAutomaticRetry()", span="94-94", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetBootstrapSupervisor_ReturnsBootstrapper_WrappedWithAutomaticRetry()", file="BackgroundJobServerFacts.cs"];
m1_94 [label="var server = CreateServer()", span="97-97", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetBootstrapSupervisor_ReturnsBootstrapper_WrappedWithAutomaticRetry()", file="BackgroundJobServerFacts.cs"];
m1_95 [label="var supervisor = server.GetBootstrapSupervisor()", span="100-100", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetBootstrapSupervisor_ReturnsBootstrapper_WrappedWithAutomaticRetry()", file="BackgroundJobServerFacts.cs"];
m1_98 [label="Assert.IsType<AutomaticRetryServerComponentWrapper>(wrapper)", span="107-107", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetBootstrapSupervisor_ReturnsBootstrapper_WrappedWithAutomaticRetry()", file="BackgroundJobServerFacts.cs"];
m1_99 [label="Assert.IsType<ServerBootstrapper>(((AutomaticRetryServerComponentWrapper)wrapper).InnerComponent)", span="108-108", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetBootstrapSupervisor_ReturnsBootstrapper_WrappedWithAutomaticRetry()", file="BackgroundJobServerFacts.cs"];
m1_96 [label="Assert.NotNull(supervisor)", span="103-103", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetBootstrapSupervisor_ReturnsBootstrapper_WrappedWithAutomaticRetry()", file="BackgroundJobServerFacts.cs"];
m1_97 [label="var wrapper = ((ServerSupervisor) supervisor).Component", span="105-105", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetBootstrapSupervisor_ReturnsBootstrapper_WrappedWithAutomaticRetry()", file="BackgroundJobServerFacts.cs"];
m1_100 [label="Exit Hangfire.Core.Tests.BackgroundJobServerFacts.GetBootstrapSupervisor_ReturnsBootstrapper_WrappedWithAutomaticRetry()", span="94-94", cluster="Hangfire.Core.Tests.BackgroundJobServerFacts.GetBootstrapSupervisor_ReturnsBootstrapper_WrappedWithAutomaticRetry()", file="BackgroundJobServerFacts.cs"];
m1_113 [label="Entry Hangfire.BackgroundJobServer.GetSupervisors()", span="129-129", cluster="Hangfire.BackgroundJobServer.GetSupervisors()", file="BackgroundJobServerFacts.cs"];
m1_12 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="BackgroundJobServerFacts.cs"];
m1_34 [label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", span="71-71", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", file="BackgroundJobServerFacts.cs"];
m1_26 [label="Entry BackgroundJobServer.cstr", span="", cluster="BackgroundJobServer.cstr", file="BackgroundJobServerFacts.cs"];
m1_73 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="BackgroundJobServerFacts.cs"];
m1_7 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="BackgroundJobServerFacts.cs"];
m1_152 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="BackgroundJobServerFacts.cs"];
m1_154 [label="Hangfire.Core.Tests.BackgroundJobServerFacts", span="", file="BackgroundJobServerFacts.cs"];
m2_0 [label="Entry HangFire.Filters.IServerJobFilter.OnJobPerforming(HangFire.Filters.JobPerformingContext)", span="4-4", cluster="HangFire.Filters.IServerJobFilter.OnJobPerforming(HangFire.Filters.JobPerformingContext)", file="CleanDatabaseAttribute.cs"];
m2_1 [label="Exit HangFire.Filters.IServerJobFilter.OnJobPerforming(HangFire.Filters.JobPerformingContext)", span="4-4", cluster="HangFire.Filters.IServerJobFilter.OnJobPerforming(HangFire.Filters.JobPerformingContext)", file="CleanDatabaseAttribute.cs"];
m2_2 [label="Entry HangFire.Filters.IServerJobFilter.OnJobPerformed(HangFire.Filters.JobPerformedContext)", span="5-5", cluster="HangFire.Filters.IServerJobFilter.OnJobPerformed(HangFire.Filters.JobPerformedContext)", file="CleanDatabaseAttribute.cs"];
m2_3 [label="Exit HangFire.Filters.IServerJobFilter.OnJobPerformed(HangFire.Filters.JobPerformedContext)", span="5-5", cluster="HangFire.Filters.IServerJobFilter.OnJobPerformed(HangFire.Filters.JobPerformedContext)", file="CleanDatabaseAttribute.cs"];
m3_49 [label="Entry Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_MovesJobStateToEnqueued()", span="53-53", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_MovesJobStateToEnqueued()", file="CronFacts.cs"];
m3_50 [label="var scheduler = CreateScheduler()", span="55-55", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_MovesJobStateToEnqueued()", file="CronFacts.cs"];
m3_51 [label="scheduler.Execute(_context.Object)", span="57-57", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_MovesJobStateToEnqueued()", file="CronFacts.cs"];
m3_52 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is EnqueuedState &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ScheduledState.StateName }))))", span="59-62", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_MovesJobStateToEnqueued()", file="CronFacts.cs"];
m3_53 [label="_connection.Verify(x => x.Dispose())", span="64-64", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_MovesJobStateToEnqueued()", file="CronFacts.cs"];
m3_54 [label="Exit Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_MovesJobStateToEnqueued()", span="53-53", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_MovesJobStateToEnqueued()", file="CronFacts.cs"];
m3_12 [label="Entry Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", span="12-12", cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", file="CronFacts.cs"];
m3_18 [label="Entry Mock<IWriteOnlyTransaction>.cstr", span="", cluster="Mock<IWriteOnlyTransaction>.cstr", file="CronFacts.cs"];
m3_55 [label="Entry Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.CreateScheduler()", span="107-107", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.CreateScheduler()", file="CronFacts.cs"];
m3_115 [label="return new DelayedJobScheduler(Timeout.InfiniteTimeSpan, _stateChanger.Object);", span="109-109", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.CreateScheduler()", file="CronFacts.cs"];
m3_116 [label="Exit Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.CreateScheduler()", span="107-107", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.CreateScheduler()", file="CronFacts.cs"];
m3_44 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="CronFacts.cs"];
m3_13 [label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0", cluster="System.Threading.CancellationTokenSource.Cancel()", file="CronFacts.cs"];
m3_40 [label="Entry Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", span="44-44", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", file="CronFacts.cs"];
m3_41 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new DelayedJobScheduler(Timeout.InfiniteTimeSpan, null))", span="46-47", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", file="CronFacts.cs"];
m3_42 [label="Assert.Equal(''stateChanger'', exception.ParamName)", span="49-49", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", file="CronFacts.cs"];
m3_43 [label="Exit Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", span="44-44", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Ctor_ThrowsAnException_WhenStateChangerIsNull()", file="CronFacts.cs"];
m3_31 [label="Entry Unk.>", span="", cluster="Unk.>", file="CronFacts.cs"];
m3_85 [label="Entry Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", span="82-82", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="CronFacts.cs"];
m3_86 [label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.IsAny<StateChangeContext>()))\r\n                .Returns<IState>(null)", span="84-86", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="CronFacts.cs"];
m3_87 [label="var scheduler = CreateScheduler()", span="88-88", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="CronFacts.cs"];
m3_88 [label="scheduler.Execute(_context.Object)", span="90-90", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="CronFacts.cs"];
m3_89 [label="_transaction.Verify(x => x.RemoveFromSet(''schedule'', JobId))", span="92-92", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="CronFacts.cs"];
m3_90 [label="_transaction.Verify(x => x.Commit())", span="93-93", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="CronFacts.cs"];
m3_91 [label="Exit Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", span="82-82", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_RemovesAJobIdentifierFromTheSet_WhenStateChangeFails()", file="CronFacts.cs"];
m3_36 [label="Entry Unk.GetFirstByLowestScoreFromSet", span="", cluster="Unk.GetFirstByLowestScoreFromSet", file="CronFacts.cs"];
m3_23 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="CronFacts.cs"];
m3_61 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="CronFacts.cs"];
m3_65 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual", file="CronFacts.cs"];
m3_15 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="CronFacts.cs"];
m3_117 [label="Entry DelayedJobScheduler.cstr", span="", cluster="DelayedJobScheduler.cstr", file="CronFacts.cs"];
m3_69 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="CronFacts.cs"];
m3_32 [label="Entry Unk.AcquireDistributedLock", span="", cluster="Unk.AcquireDistributedLock", file="CronFacts.cs"];
m3_19 [label="Entry Mock<IDisposable>.cstr", span="", cluster="Mock<IDisposable>.cstr", file="CronFacts.cs"];
m3_103 [label="Entry Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", span="97-97", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="CronFacts.cs"];
m3_104 [label="var scheduler = CreateScheduler()", span="99-99", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="CronFacts.cs"];
m3_105 [label="scheduler.Execute(_context.Object)", span="101-101", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="CronFacts.cs"];
m3_106 [label="_connection.Verify(x => x.AcquireDistributedLock(It.IsAny<string>(), It.IsAny<TimeSpan>()))", span="103-103", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="CronFacts.cs"];
m3_107 [label="_distributedLock.Verify(x => x.Dispose())", span="104-104", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="CronFacts.cs"];
m3_108 [label="Exit Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", span="97-97", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_ActsWithinADistributedLock()", file="CronFacts.cs"];
m3_17 [label="Entry Mock<IBackgroundJobStateChanger>.cstr", span="", cluster="Mock<IBackgroundJobStateChanger>.cstr", file="CronFacts.cs"];
m3_112 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="CronFacts.cs"];
m3_20 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="CronFacts.cs"];
m3_24 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="CronFacts.cs"];
m3_28 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="CronFacts.cs"];
m3_33 [label="Entry lambda expression", span="39-40", cluster="lambda expression", file="CronFacts.cs"];
m3_21 [label="x.GetConnection()", span="28-28", cluster="lambda expression", file="CronFacts.cs"];
m3_22 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="CronFacts.cs"];
m3_25 [label="x.CreateWriteTransaction()", span="32-32", cluster="lambda expression", file="CronFacts.cs"];
m3_26 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="CronFacts.cs"];
m3_29 [label="x.AcquireDistributedLock(''locks:schedulepoller'', It.IsAny<TimeSpan>())", span="36-36", cluster="lambda expression", file="CronFacts.cs"];
m3_30 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="CronFacts.cs"];
m3_34 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="39-40", cluster="lambda expression", file="CronFacts.cs"];
m3_35 [label="Exit lambda expression", span="39-40", cluster="lambda expression", file="CronFacts.cs"];
m3_37 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="CronFacts.cs"];
m3_38 [label="time > 0", span="40-40", cluster="lambda expression", file="CronFacts.cs"];
m3_39 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="CronFacts.cs"];
m3_45 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="CronFacts.cs"];
m3_46 [label="new DelayedJobScheduler(Timeout.InfiniteTimeSpan, null)", span="47-47", cluster="lambda expression", file="CronFacts.cs"];
m3_47 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="CronFacts.cs"];
m3_58 [label="Entry lambda expression", span="59-62", cluster="lambda expression", file="CronFacts.cs"];
m3_66 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="CronFacts.cs"];
m3_59 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is EnqueuedState &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ScheduledState.StateName })))", span="59-62", cluster="lambda expression", file="CronFacts.cs"];
m3_60 [label="Exit lambda expression", span="59-62", cluster="lambda expression", file="CronFacts.cs"];
m3_62 [label="Entry lambda expression", span="59-62", cluster="lambda expression", file="CronFacts.cs"];
m3_63 [label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is EnqueuedState &&\r\n                ctx.ExpectedStates.SequenceEqual(new[] { ScheduledState.StateName })", span="60-62", cluster="lambda expression", file="CronFacts.cs"];
m3_64 [label="Exit lambda expression", span="59-62", cluster="lambda expression", file="CronFacts.cs"];
m3_67 [label="x.Dispose()", span="64-64", cluster="lambda expression", file="CronFacts.cs"];
m3_68 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="CronFacts.cs"];
m3_76 [label="Entry lambda expression", span="70-71", cluster="lambda expression", file="CronFacts.cs"];
m3_82 [label="Entry lambda expression", span="77-77", cluster="lambda expression", file="CronFacts.cs"];
m3_77 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="70-71", cluster="lambda expression", file="CronFacts.cs"];
m3_78 [label="Exit lambda expression", span="70-71", cluster="lambda expression", file="CronFacts.cs"];
m3_79 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="CronFacts.cs"];
m3_80 [label="time > 0", span="71-71", cluster="lambda expression", file="CronFacts.cs"];
m3_81 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="CronFacts.cs"];
m3_83 [label="x.ChangeState(It.IsAny<StateChangeContext>())", span="77-77", cluster="lambda expression", file="CronFacts.cs"];
m3_84 [label="Exit lambda expression", span="77-77", cluster="lambda expression", file="CronFacts.cs"];
m3_92 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="CronFacts.cs"];
m3_95 [label="Entry lambda expression", span="92-92", cluster="lambda expression", file="CronFacts.cs"];
m3_99 [label="Entry lambda expression", span="93-93", cluster="lambda expression", file="CronFacts.cs"];
m3_93 [label="x.ChangeState(It.IsAny<StateChangeContext>())", span="85-85", cluster="lambda expression", file="CronFacts.cs"];
m3_94 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="CronFacts.cs"];
m3_96 [label="x.RemoveFromSet(''schedule'', JobId)", span="92-92", cluster="lambda expression", file="CronFacts.cs"];
m3_97 [label="Exit lambda expression", span="92-92", cluster="lambda expression", file="CronFacts.cs"];
m3_100 [label="x.Commit()", span="93-93", cluster="lambda expression", file="CronFacts.cs"];
m3_101 [label="Exit lambda expression", span="93-93", cluster="lambda expression", file="CronFacts.cs"];
m3_109 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="CronFacts.cs"];
m3_110 [label="x.AcquireDistributedLock(It.IsAny<string>(), It.IsAny<TimeSpan>())", span="103-103", cluster="lambda expression", file="CronFacts.cs"];
m3_111 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="CronFacts.cs"];
m3_113 [label="x.Dispose()", span="104-104", cluster="lambda expression", file="CronFacts.cs"];
m3_114 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="CronFacts.cs"];
m3_0 [label="Entry Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", span="22-22", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_1 [label="_context = new BackgroundProcessContextMock()", span="24-24", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_2 [label="_context.CancellationTokenSource.Cancel()", span="25-25", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_3 [label="_connection = new Mock<IStorageConnection>()", span="27-27", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_4 [label="_context.Storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="28-28", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_5 [label="_stateChanger = new Mock<IBackgroundJobStateChanger>()", span="30-30", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_6 [label="_transaction = new Mock<IWriteOnlyTransaction>()", span="31-31", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_7 [label="_connection.Setup(x => x.CreateWriteTransaction()).Returns(_transaction.Object)", span="32-32", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_8 [label="_distributedLock = new Mock<IDisposable>()", span="34-34", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_9 [label="_connection\r\n                .Setup(x => x.AcquireDistributedLock(''locks:schedulepoller'', It.IsAny<TimeSpan>()))\r\n                .Returns(_distributedLock.Object)", span="35-37", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_10 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns(JobId)", span="39-40", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_11 [label="Exit Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", span="22-22", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.DelayedJobSchedulerFacts()", file="CronFacts.cs"];
m3_48 [label="Entry Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", span="104-104", cluster="Hangfire.Server.DelayedJobScheduler.DelayedJobScheduler(System.TimeSpan, Hangfire.States.IBackgroundJobStateChanger)", file="CronFacts.cs"];
m3_57 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="CronFacts.cs"];
m3_102 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="CronFacts.cs"];
m3_70 [label="Entry Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", span="68-68", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", file="CronFacts.cs"];
m3_71 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns((string)null)", span="70-71", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", file="CronFacts.cs"];
m3_72 [label="var scheduler = CreateScheduler()", span="72-72", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", file="CronFacts.cs"];
m3_73 [label="scheduler.Execute(_context.Object)", span="74-74", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", file="CronFacts.cs"];
m3_74 [label="_stateChanger.Verify(\r\n                x => x.ChangeState(It.IsAny<StateChangeContext>()),\r\n                Times.Never)", span="76-78", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", file="CronFacts.cs"];
m3_75 [label="Exit Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", span="68-68", cluster="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts.Execute_DoesNotCallStateChanger_IfThereAreNoJobsToEnqueue()", file="CronFacts.cs"];
m3_27 [label="Entry Unk.CreateWriteTransaction", span="", cluster="Unk.CreateWriteTransaction", file="CronFacts.cs"];
m3_98 [label="Entry Unk.RemoveFromSet", span="", cluster="Unk.RemoveFromSet", file="CronFacts.cs"];
m3_16 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="CronFacts.cs"];
m3_56 [label="Entry Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="113-113", cluster="Hangfire.Server.DelayedJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="CronFacts.cs"];
m3_14 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="CronFacts.cs"];
m3_118 [label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts", span="", file="CronFacts.cs"];
m6_2 [label="Entry Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", span="23-23", cluster="Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", file="IStateChangeProcess.cs"];
m6_3 [label="Exit Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", span="23-23", cluster="Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", file="IStateChangeProcess.cs"];
m6_0 [label="Entry Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", span="22-22", cluster="Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", file="IStateChangeProcess.cs"];
m6_1 [label="Exit Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", span="22-22", cluster="Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", file="IStateChangeProcess.cs"];
m7_10 [label="Entry Hangfire.JobStorage.GetConnection()", span="56-56", cluster="Hangfire.JobStorage.GetConnection()", file="Program.cs"];
m7_2 [label="Entry Hangfire.Server.ServerHeartbeat.ServerHeartbeat(System.TimeSpan)", span="31-31", cluster="Hangfire.Server.ServerHeartbeat.ServerHeartbeat(System.TimeSpan)", file="Program.cs"];
m7_3 [label="_heartbeatInterval = heartbeatInterval", span="33-33", cluster="Hangfire.Server.ServerHeartbeat.ServerHeartbeat(System.TimeSpan)", file="Program.cs"];
m7_4 [label="Exit Hangfire.Server.ServerHeartbeat.ServerHeartbeat(System.TimeSpan)", span="31-31", cluster="Hangfire.Server.ServerHeartbeat.ServerHeartbeat(System.TimeSpan)", file="Program.cs"];
m7_5 [label="Entry Hangfire.Server.ServerHeartbeat.Execute(Hangfire.Server.BackgroundProcessContext)", span="36-36", cluster="Hangfire.Server.ServerHeartbeat.Execute(Hangfire.Server.BackgroundProcessContext)", file="Program.cs"];
m7_6 [label="var connection = context.Storage.GetConnection()", span="38-38", cluster="Hangfire.Server.ServerHeartbeat.Execute(Hangfire.Server.BackgroundProcessContext)", file="Program.cs"];
m7_7 [label="connection.Heartbeat(context.ServerId)", span="40-40", cluster="Hangfire.Server.ServerHeartbeat.Execute(Hangfire.Server.BackgroundProcessContext)", file="Program.cs"];
m7_8 [label="context.Sleep(_heartbeatInterval)", span="43-43", cluster="Hangfire.Server.ServerHeartbeat.Execute(Hangfire.Server.BackgroundProcessContext)", color=red, community=0, file="Program.cs"];
m7_9 [label="Exit Hangfire.Server.ServerHeartbeat.Execute(Hangfire.Server.BackgroundProcessContext)", span="36-36", cluster="Hangfire.Server.ServerHeartbeat.Execute(Hangfire.Server.BackgroundProcessContext)", file="Program.cs"];
m7_12 [label="Entry Hangfire.Server.BackgroundProcessContext.Sleep(System.TimeSpan)", span="23-23", cluster="Hangfire.Server.BackgroundProcessContext.Sleep(System.TimeSpan)", file="Program.cs"];
m7_13 [label="Entry Hangfire.Server.ServerHeartbeat.ToString()", span="46-46", cluster="Hangfire.Server.ServerHeartbeat.ToString()", file="Program.cs"];
m7_14 [label="return ''Server Heartbeat'';", span="48-48", cluster="Hangfire.Server.ServerHeartbeat.ToString()", file="Program.cs"];
m7_15 [label="Exit Hangfire.Server.ServerHeartbeat.ToString()", span="46-46", cluster="Hangfire.Server.ServerHeartbeat.ToString()", file="Program.cs"];
m7_0 [label="Entry Hangfire.Server.ServerHeartbeat.ServerHeartbeat()", span="26-26", cluster="Hangfire.Server.ServerHeartbeat.ServerHeartbeat()", file="Program.cs"];
m7_1 [label="Exit Hangfire.Server.ServerHeartbeat.ServerHeartbeat()", span="26-26", cluster="Hangfire.Server.ServerHeartbeat.ServerHeartbeat()", file="Program.cs"];
m7_11 [label="Entry Hangfire.Storage.IStorageConnection.Heartbeat(string)", span="49-49", cluster="Hangfire.Storage.IStorageConnection.Heartbeat(string)", file="Program.cs"];
m7_16 [label="Hangfire.Server.ServerHeartbeat", span="", file="Program.cs"];
m8_5 [label="CountersAggregateInterval = TimeSpan.FromMinutes(5)", span="31-31", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m8_6 [label="PrepareSchemaIfNecessary = true", span="32-32", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m8_9 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerStorageOptions.cs"];
m8_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="SqlServerStorageOptions.cs"];
m8_10 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="SqlServerStorageOptions.cs"];
m8_0 [label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m8_3 [label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", span="29-29", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="SqlServerStorageOptions.cs"];
m8_2 [label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="28-28", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m8_1 [label="TransactionIsolationLevel = IsolationLevel.Serializable", span="27-27", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs", color=red, community=0];
m8_4 [label="JobExpirationCheckInterval = TimeSpan.FromHours(1)", span="30-30", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerStorageOptions.cs"];
m8_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerStorageOptions.cs"];
m8_14 [label="Entry HangFire.Tests.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="SqlServerStorageOptions.cs"];
m8_16 [label="HangFire.Tests.Re_QueueingOfTimedOutJobsFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="SqlServerStorageOptions.cs"];
m8_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Re-queueing of timed out jobs''))", span="48-49", cluster="HangFire.Tests.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="SqlServerStorageOptions.cs"];
m8_17 [label="Exit HangFire.Tests.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Re_QueueingOfTimedOutJobsFeature.TestInitialize()", file="SqlServerStorageOptions.cs"];
m8_11 [label="Hangfire.SqlServer.SqlServerStorageOptions", span="", file="SqlServerStorageOptions.cs"];
m10_9 [label="Entry Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="45-45", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_10 [label="job == null", span="50-50", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_12 [label="parameters == null", span="51-51", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_14 [label="state == null", span="52-52", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_17 [label="var jobId = _connection.CreateExpiredJob(\r\n                job,\r\n                parameters,\r\n                createdAt,\r\n                TimeSpan.FromHours(1))", span="55-59", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_18 [label="var context = new StateContext(jobId, job, createdAt)", span="61-61", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_19 [label="ChangeState(context, state, null)", span="62-62", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_11 [label="throw new ArgumentNullException(''job'');", span="50-50", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_13 [label="throw new ArgumentNullException(''parameters'');", span="51-51", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_15 [label="throw new ArgumentNullException(''state'');", span="52-52", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_16 [label="var createdAt = DateTime.UtcNow", span="54-54", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_20 [label="return jobId;", span="64-64", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_21 [label="Exit Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="45-45", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="StateMachine.cs"];
m10_8 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="StateMachine.cs"];
m10_54 [label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="26-26", cluster="Hangfire.States.FailedState.FailedState(System.Exception)", file="StateMachine.cs"];
m10_52 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="StateMachine.cs"];
m10_67 [label="Entry Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", span="30-30", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="StateMachine.cs"];
m10_22 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="StateMachine.cs"];
m10_24 [label="Entry Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime)", span="24-24", cluster="Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime)", file="StateMachine.cs"];
m10_55 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="StateMachine.cs"];
m10_23 [label="Entry Hangfire.Storage.IStorageConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="30-30", cluster="Hangfire.Storage.IStorageConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="StateMachine.cs"];
m10_50 [label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)", span="26-26", cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)", file="StateMachine.cs"];
m10_93 [label="Entry System.Threading.Thread.Sleep(int)", span="0-0", cluster="System.Threading.Thread.Sleep(int)", file="StateMachine.cs"];
m10_69 [label="Entry Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", span="24-24", cluster="Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", file="StateMachine.cs"];
m10_77 [label="Entry Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", span="23-23", cluster="Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", file="StateMachine.cs"];
m10_76 [label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27", cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", file="StateMachine.cs"];
m10_91 [label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42", cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)", file="StateMachine.cs"];
m10_53 [label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29", cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="StateMachine.cs"];
m10_92 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="StateMachine.cs"];
m10_78 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54", cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", file="StateMachine.cs"];
m10_25 [label="Entry Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", span="131-131", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="StateMachine.cs"];
m10_56 [label="var electStateContext = new ElectStateContext(context, _connection, this, toState, oldStateName)", span="135-135", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=0, file="StateMachine.cs"];
m10_58 [label="var applyStateContext = new ApplyStateContext(\r\n                    context,\r\n                    electStateContext.CandidateState,\r\n                    oldStateName,\r\n                    electStateContext.TraversedStates)", span="138-142", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=1, file="StateMachine.cs"];
m10_63 [label="var applyStateContext = new ApplyStateContext(context, failedState, oldStateName, Enumerable.Empty<IState>())", span="156-156", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=0, file="StateMachine.cs"];
m10_57 [label="_stateChangeProcess.ElectState(_connection, electStateContext)", span="136-136", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=0, file="StateMachine.cs"];
m10_59 [label="ApplyState(applyStateContext, true)", span="144-144", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=0, file="StateMachine.cs"];
m10_60 [label="return true;", span="147-147", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=0, file="StateMachine.cs"];
m10_61 [label=Exception, span="149-149", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=0, file="StateMachine.cs"];
m10_62 [label="var failedState = new FailedState(ex)\r\n                {\r\n                    Reason = ''An exception occurred during the transition of job's state''\r\n                }", span="151-154", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=1, file="StateMachine.cs"];
m10_64 [label="ApplyState(applyStateContext, false)", span="160-160", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=0, file="StateMachine.cs"];
m10_65 [label="return false;", span="163-163", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=0, file="StateMachine.cs"];
m10_66 [label="Exit Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", span="131-131", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="StateMachine.cs"];
m10_49 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="StateMachine.cs"];
m10_26 [label="Entry Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", span="67-67", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_27 [label="jobId == null", span="69-69", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_29 [label="toState == null", span="70-70", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_31 [label="fromStates != null && fromStates.Length == 0", span="71-71", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_33 [label="_connection.AcquireDistributedJobLock(jobId, JobLockTimeout)", span="82-82", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_34 [label="var jobData = GetJobData(jobId, cancellationToken)", span="84-84", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_37 [label="fromStates != null && !fromStates.Contains(jobData.State, StringComparer.OrdinalIgnoreCase)", span="93-93", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_42 [label="!toState.IgnoreJobLoadException", span="111-111", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_43 [label="toState = new FailedState(ex.InnerException)\r\n                        {\r\n                            Reason = String.Format(\r\n                                ''Can not change the state of a job to '{0}': target method was not found.'',\r\n                                toState.Name)\r\n                        }", span="113-118", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_45 [label="var context = new StateContext(jobId, jobData.Job, jobData.CreatedAt)", span="124-124", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_46 [label="var stateChanged = ChangeState(context, toState, jobData.State)", span="125-125", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", color=red, community=0, file="StateMachine.cs"];
m10_28 [label="throw new ArgumentNullException(''jobId'');", span="69-69", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_30 [label="throw new ArgumentNullException(''toState'');", span="70-70", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_32 [label="throw new ArgumentException(''From states array should be null or non-empty.'', ''fromStates'');", span="73-73", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_35 [label="jobData == null", span="86-86", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_40 [label="jobData.EnsureLoaded()", span="102-102", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_36 [label="return false;", span="90-90", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_38 [label="return false;", span="95-95", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_39 [label="bool loadSucceeded = true", span="98-98", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_47 [label="return loadSucceeded && stateChanged;", span="127-127", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", color=red, community=0, file="StateMachine.cs"];
m10_41 [label=JobLoadException, span="104-104", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_44 [label="loadSucceeded = false", span="120-120", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_48 [label="Exit Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", span="67-67", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_51 [label="Entry Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", span="177-177", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_79 [label="var firstAttempt = true", span="179-179", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_81 [label="var jobData = _connection.GetJobData(jobId)", span="183-183", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_86 [label="cancellationToken.IsCancellationRequested", span="194-194", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_80 [label=true, span="181-181", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_88 [label="Thread.Sleep(firstAttempt ? 0 : 100)", span="199-199", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_82 [label="jobData == null", span="184-184", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_84 [label="!String.IsNullOrEmpty(jobData.State)", span="189-189", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_85 [label="return jobData;", span="191-191", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_83 [label="return null;", span="186-186", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_87 [label="return null;", span="196-196", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_89 [label="firstAttempt = false", span="200-200", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_90 [label="Exit Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", span="177-177", cluster="Hangfire.States.StateMachine.GetJobData(string, System.Threading.CancellationToken)", file="StateMachine.cs"];
m10_0 [label="Entry Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", span="34-34", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StateMachine.cs"];
m10_1 [label="connection == null", span="36-36", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StateMachine.cs"];
m10_3 [label="stateChangeProcess == null", span="37-37", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StateMachine.cs"];
m10_5 [label="_connection = connection", span="39-39", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StateMachine.cs"];
m10_6 [label="_stateChangeProcess = stateChangeProcess", span="40-40", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StateMachine.cs"];
m10_2 [label="throw new ArgumentNullException(''connection'');", span="36-36", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StateMachine.cs"];
m10_4 [label="throw new ArgumentNullException(''stateChangeProcess'');", span="37-37", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StateMachine.cs"];
m10_7 [label="Exit Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", span="34-34", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="StateMachine.cs"];
m10_70 [label="Entry Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", span="167-167", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="StateMachine.cs"];
m10_72 [label="var transaction = _connection.CreateWriteTransaction()", span="169-169", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="StateMachine.cs"];
m10_73 [label="_stateChangeProcess.ApplyState(transaction, context, useFilters)", span="171-171", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", color=red, community=0, file="StateMachine.cs"];
m10_74 [label="transaction.Commit()", span="173-173", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="StateMachine.cs"];
m10_75 [label="Exit Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", span="167-167", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="StateMachine.cs"];
m10_68 [label="Entry Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", span="22-22", cluster="Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", file="StateMachine.cs"];
m10_71 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="StateMachine.cs"];
m10_94 [label="Hangfire.States.StateMachine", span="", file="StateMachine.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n2  [key=0, style=bold, color=blue];
m0_40 -> m0_41  [key=0, style=solid];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [key=2, style=dotted];
m0_42 -> m0_40  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_0  [key=0, style=bold, color=blue];
m0_2 -> m0_3  [key=0, style=solid];
m0_3 -> m0_2  [key=0, style=bold, color=blue];
m0_37 -> m0_44  [key=0, style=solid];
m0_37 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_37 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_37 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_37 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_37 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_37 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m0_37 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_37 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_37 -> m0_64  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_37 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m0_37 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_73  [key=2, style=dotted];
m0_46 -> m0_47  [key=0, style=solid];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_76  [key=2, style=dotted];
m0_48 -> m0_77  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_80  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_56  [key=0, style=solid];
m0_54 -> m0_76  [key=2, style=dotted];
m0_54 -> m0_84  [key=2, style=dotted];
m0_55 -> m0_56  [key=0, style=solid];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_85  [key=2, style=dotted];
m0_56 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label=context];
m0_57 -> m0_58  [key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_87  [key=2, style=dotted];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_66  [key=0, style=solid];
m0_64 -> m0_76  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_72  [key=0, style=solid];
m0_67 -> m0_90  [key=2, style=dotted];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_93  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_74  [key=2, style=dotted];
m0_45 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=job];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_75  [key=2, style=dotted];
m0_47 -> m0_49  [key=1, style=dashed, color=darkseagreen4, label=cronSchedule];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_78  [key=2, style=dotted];
m0_49 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label=nowInstant];
m0_49 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label=nowInstant];
m0_49 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=nowInstant];
m0_49 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label=nowInstant];
m0_49 -> m0_65  [key=1, style=dashed, color=darkseagreen4, label=nowInstant];
m0_49 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label=nowInstant];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_79  [key=2, style=dotted];
m0_50 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m0_50 -> m0_63  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m0_50 -> m0_65  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m0_50 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m0_50 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label=changedFields];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_64  [key=0, style=solid];
m0_52 -> m0_81  [key=2, style=dotted];
m0_52 -> m0_82  [key=2, style=dotted];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_88  [key=2, style=dotted];
m0_62 -> m0_89  [key=2, style=dotted];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_88  [key=2, style=dotted];
m0_65 -> m0_89  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_88  [key=2, style=dotted];
m0_66 -> m0_89  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_89  [key=2, style=dotted];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_83  [key=2, style=dotted];
m0_53 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_53 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_86  [key=2, style=dotted];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_63  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_62  [key=0, style=solid];
m0_60 -> m0_84  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_71  [key=0, style=solid];
m0_69 -> m0_91  [key=2, style=dotted];
m0_69 -> m0_92  [key=2, style=dotted];
m0_70 -> m0_72  [key=0, style=solid];
m0_72 -> m0_37  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.IBackgroundJobFactory"];
m0_4 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>"];
m0_4 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>"];
m0_4 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IThrottler"];
m0_4 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IThrottler"];
m0_4 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Client.IBackgroundJobFactory"];
m0_4 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="System.Func<NCrontab.CrontabSchedule, System.TimeZoneInfo, Hangfire.Server.IScheduleInstant>"];
m0_4 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IThrottler"];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_7  [key=0, style=solid];
m0_6 -> m0_14  [key=0, style=solid];
m0_6 -> m0_15  [key=2, style=dotted];
m0_6 -> m0_16  [key=2, style=dotted];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_9  [key=0, style=solid];
m0_8 -> m0_14  [key=0, style=solid];
m0_8 -> m0_15  [key=2, style=dotted];
m0_8 -> m0_16  [key=2, style=dotted];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_11  [key=0, style=solid];
m0_10 -> m0_14  [key=0, style=solid];
m0_10 -> m0_15  [key=2, style=dotted];
m0_10 -> m0_16  [key=2, style=dotted];
m0_11 -> m0_12  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_14 -> m0_4  [key=0, style=bold, color=blue];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m0_17 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m0_17 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m0_17 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m0_17 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=0, style=solid];
m0_19 -> m0_31  [key=0, style=solid];
m0_19 -> m0_15  [key=2, style=dotted];
m0_19 -> m0_16  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_32  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_33  [key=2, style=dotted];
m0_21 -> m0_23  [key=1, style=dashed, color=darkseagreen4, label=connection];
m0_21 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=connection];
m0_21 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=connection];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_24  [key=0, style=solid];
m0_27 -> m0_37  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_39  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_34  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_35  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_36  [key=2, style=dotted];
m0_25 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=recurringJob];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_30  [key=0, style=solid];
m0_24 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=recurringJobId];
m0_24 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=recurringJobId];
m0_29 -> m0_24  [key=0, style=solid];
m0_29 -> m0_38  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_24  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_31 -> m0_17  [key=0, style=bold, color=blue];
m0_80 -> m0_94  [key=0, style=solid];
m0_80 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_80 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_80 -> m0_97  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_80 -> m0_98  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_80 -> m0_99  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_80 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IReadOnlyDictionary<string, string>"];
m0_80 -> m0_102  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IScheduleInstant"];
m0_80 -> m0_49  [key=3, color=green, style=bold, label="Parameter variable Hangfire.Server.IScheduleInstant instant"];
m0_94 -> m0_95  [key=0, style=solid];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_97  [key=0, style=solid];
m0_95 -> m0_76  [key=2, style=dotted];
m0_96 -> m0_103  [key=0, style=solid];
m0_96 -> m0_105  [key=2, style=dotted];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_99  [key=0, style=solid];
m0_97 -> m0_76  [key=2, style=dotted];
m0_98 -> m0_103  [key=0, style=solid];
m0_98 -> m0_105  [key=2, style=dotted];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_102  [key=0, style=solid];
m0_99 -> m0_76  [key=2, style=dotted];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_105  [key=2, style=dotted];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_106  [key=2, style=dotted];
m0_101 -> m0_103  [key=0, style=solid];
m0_101 -> m0_106  [key=2, style=dotted];
m0_101 -> m0_101  [key=1, style=dashed, color=darkseagreen4, label=lastInstant];
m0_103 -> m0_104  [key=0, style=solid];
m0_104 -> m0_80  [key=0, style=bold, color=blue];
m0_107 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m0_107 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m0_107 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m0_107 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m0_107 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m0_107 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m0_107 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m0_107 -> m0_49  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m0_107 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.RecurringJobScheduler"];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_8  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_9  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_10  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_11  [key=2, style=dotted];
m1_5 -> m1_12  [key=2, style=dotted];
m1_5 -> m1_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_6 -> m1_0  [key=0, style=bold, color=blue];
m1_27 -> m1_28  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_21  [key=2, style=dotted];
m1_28 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_22  [key=2, style=dotted];
m1_30 -> m1_27  [key=0, style=bold, color=blue];
m1_57 -> m1_58  [key=0, style=solid];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_39  [key=2, style=dotted];
m1_59 -> m1_61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_7  [key=2, style=dotted];
m1_60 -> m1_57  [key=0, style=bold, color=blue];
m1_104 -> m1_105  [key=0, style=solid];
m1_105 -> m1_106  [key=0, style=solid];
m1_105 -> m1_101  [key=2, style=dotted];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_113  [key=2, style=dotted];
m1_107 -> m1_21  [key=2, style=dotted];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_114  [key=2, style=dotted];
m1_107 -> m1_115  [key=2, style=dotted];
m1_107 -> m1_116  [key=2, style=dotted];
m1_107 -> m1_118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_107 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_107 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_107 -> m1_109  [key=1, style=dashed, color=darkseagreen4, label=componentTypes];
m1_107 -> m1_110  [key=1, style=dashed, color=darkseagreen4, label=componentTypes];
m1_107 -> m1_111  [key=1, style=dashed, color=darkseagreen4, label=componentTypes];
m1_108 -> m1_109  [key=0, style=solid];
m1_108 -> m1_117  [key=2, style=dotted];
m1_109 -> m1_110  [key=0, style=solid];
m1_109 -> m1_117  [key=2, style=dotted];
m1_110 -> m1_111  [key=0, style=solid];
m1_110 -> m1_117  [key=2, style=dotted];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_117  [key=2, style=dotted];
m1_112 -> m1_104  [key=0, style=bold, color=blue];
m1_35 -> m1_36  [key=0, style=solid];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_39  [key=2, style=dotted];
m1_37 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_7  [key=2, style=dotted];
m1_38 -> m1_35  [key=0, style=bold, color=blue];
m1_48 -> m1_49  [key=0, style=solid];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_39  [key=2, style=dotted];
m1_49 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_50 -> m1_48  [key=0, style=bold, color=blue];
m1_68 -> m1_69  [key=0, style=solid, color=green];
m1_69 -> m1_70  [key=0, style=solid, color=green];
m1_69 -> m1_72  [key=2, style=dotted, color=green];
m1_70 -> m1_71  [key=0, style=solid];
m1_70 -> m1_73  [key=2, style=dotted];
m1_70 -> m1_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_71 -> m1_68  [key=0, style=bold, color=blue];
m1_17 -> m1_18  [key=0, style=solid];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_21  [key=2, style=dotted];
m1_18 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_22  [key=2, style=dotted];
m1_20 -> m1_17  [key=0, style=bold, color=blue];
m1_43 -> m1_37  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<Hangfire.BackgroundJobServer> createFunc"];
m1_43 -> m1_49  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<Hangfire.BackgroundJobServer> createFunc"];
m1_43 -> m1_59  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<Hangfire.BackgroundJobServer> createFunc"];
m1_43 -> m1_149  [key=0, style=solid];
m1_149 -> m1_150  [key=0, style=solid];
m1_149 -> m1_152  [key=2, style=dotted];
m1_150 -> m1_151  [key=0, style=solid];
m1_150 -> m1_153  [key=2, style=dotted];
m1_151 -> m1_43  [key=0, style=bold, color=blue];
m1_85 -> m1_86  [key=0, style=solid];
m1_86 -> m1_87  [key=0, style=solid];
m1_86 -> m1_89  [key=2, style=dotted];
m1_87 -> m1_88  [key=0, style=solid];
m1_87 -> m1_73  [key=2, style=dotted];
m1_87 -> m1_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_88 -> m1_85  [key=0, style=bold, color=blue];
m1_77 -> m1_78  [key=0, style=solid];
m1_78 -> m1_79  [key=0, style=solid];
m1_78 -> m1_81  [key=2, style=dotted];
m1_79 -> m1_80  [key=0, style=solid];
m1_79 -> m1_73  [key=2, style=dotted];
m1_79 -> m1_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_80 -> m1_77  [key=0, style=bold, color=blue];
m1_144 -> m1_145  [key=0, style=solid];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_26  [key=2, style=dotted];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_34  [key=2, style=dotted];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_43  [key=2, style=dotted];
m1_41 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_45 -> m1_46  [key=0, style=solid];
m1_45 -> m1_47  [key=2, style=dotted];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_43  [key=2, style=dotted];
m1_52 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_55 -> m1_56  [key=0, style=solid];
m1_55 -> m1_26  [key=2, style=dotted];
m1_62 -> m1_63  [key=0, style=solid];
m1_62 -> m1_43  [key=2, style=dotted];
m1_62 -> m1_64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_74 -> m1_75  [key=0, style=solid];
m1_75 -> m1_72  [key=2, style=dotted];
m1_75 -> m1_76  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_25 -> m1_23  [key=0, style=bold, color=blue];
m1_31 -> m1_32  [key=0, style=solid];
m1_33 -> m1_31  [key=0, style=bold, color=blue];
m1_40 -> m1_41  [key=0, style=solid];
m1_42 -> m1_40  [key=0, style=bold, color=blue];
m1_44 -> m1_45  [key=0, style=solid];
m1_46 -> m1_44  [key=0, style=bold, color=blue];
m1_51 -> m1_52  [key=0, style=solid];
m1_53 -> m1_51  [key=0, style=bold, color=blue];
m1_54 -> m1_55  [key=0, style=solid];
m1_56 -> m1_54  [key=0, style=bold, color=blue];
m1_61 -> m1_62  [key=0, style=solid];
m1_63 -> m1_61  [key=0, style=bold, color=blue];
m1_64 -> m1_65  [key=0, style=solid];
m1_82 -> m1_83  [key=0, style=solid];
m1_90 -> m1_91  [key=0, style=solid];
m1_137 -> m1_138  [key=0, style=solid];
m1_76 -> m1_74  [key=0, style=bold, color=blue];
m1_15 -> m1_13  [key=0, style=bold, color=blue];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_16  [key=2, style=dotted];
m1_66 -> m1_64  [key=0, style=bold, color=blue];
m1_65 -> m1_66  [key=0, style=solid];
m1_65 -> m1_67  [key=2, style=dotted];
m1_83 -> m1_81  [key=2, style=dotted];
m1_83 -> m1_84  [key=0, style=solid];
m1_84 -> m1_82  [key=0, style=bold, color=blue];
m1_91 -> m1_89  [key=2, style=dotted];
m1_91 -> m1_92  [key=0, style=solid];
m1_92 -> m1_90  [key=0, style=bold, color=blue];
m1_139 -> m1_137  [key=0, style=bold, color=blue];
m1_138 -> m1_139  [key=0, style=solid];
m1_138 -> m1_140  [key=2, style=dotted];
m1_118 -> m1_119  [key=0, style=solid];
m1_121 -> m1_122  [key=0, style=solid];
m1_124 -> m1_125  [key=0, style=solid];
m1_141 -> m1_142  [key=0, style=solid];
m1_120 -> m1_118  [key=0, style=bold, color=blue];
m1_119 -> m1_120  [key=0, style=solid];
m1_123 -> m1_121  [key=0, style=bold, color=blue];
m1_122 -> m1_123  [key=0, style=solid];
m1_126 -> m1_124  [key=0, style=bold, color=blue];
m1_125 -> m1_126  [key=0, style=solid];
m1_125 -> m1_127  [key=2, style=dotted];
m1_143 -> m1_141  [key=0, style=bold, color=blue];
m1_142 -> m1_143  [key=0, style=solid];
m1_145 -> m1_146  [key=0, style=solid];
m1_146 -> m1_144  [key=0, style=bold, color=blue];
m1_128 -> m1_129  [key=0, style=solid];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_11  [key=2, style=dotted];
m1_130 -> m1_12  [key=2, style=dotted];
m1_130 -> m1_137  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_131 -> m1_132  [key=0, style=solid];
m1_131 -> m1_101  [key=2, style=dotted];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_136  [key=2, style=dotted];
m1_129 -> m1_134  [key=1, style=dashed, color=darkseagreen4, label=storageComponent];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_113  [key=2, style=dotted];
m1_133 -> m1_21  [key=2, style=dotted];
m1_133 -> m1_134  [key=0, style=solid];
m1_133 -> m1_114  [key=2, style=dotted];
m1_133 -> m1_115  [key=2, style=dotted];
m1_133 -> m1_116  [key=2, style=dotted];
m1_133 -> m1_141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_133 -> m1_144  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_134 -> m1_135  [key=0, style=solid];
m1_134 -> m1_117  [key=2, style=dotted];
m1_135 -> m1_128  [key=0, style=bold, color=blue];
m1_101 -> m1_147  [key=0, style=solid];
m1_147 -> m1_148  [key=0, style=solid];
m1_147 -> m1_26  [key=2, style=dotted];
m1_148 -> m1_101  [key=0, style=bold, color=blue];
m1_93 -> m1_94  [key=0, style=solid];
m1_94 -> m1_95  [key=0, style=solid];
m1_94 -> m1_101  [key=2, style=dotted];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_102  [key=2, style=dotted];
m1_95 -> m1_97  [key=1, style=dashed, color=darkseagreen4, label=supervisor];
m1_98 -> m1_21  [key=2, style=dotted];
m1_98 -> m1_99  [key=0, style=solid];
m1_99 -> m1_21  [key=2, style=dotted];
m1_99 -> m1_100  [key=0, style=solid];
m1_96 -> m1_97  [key=0, style=solid];
m1_96 -> m1_103  [key=2, style=dotted];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_99  [key=1, style=dashed, color=darkseagreen4, label=wrapper];
m1_100 -> m1_93  [key=0, style=bold, color=blue];
m1_154 -> m1_69  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_37  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_45  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_49  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_62  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_70  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_79  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_86  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_131  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m1_154 -> m1_147  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.BackgroundJobServerFacts"];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_2  [key=0, style=bold, color=blue];
m3_49 -> m3_50  [key=0, style=solid];
m3_50 -> m3_51  [key=0, style=solid];
m3_50 -> m3_55  [key=2, style=dotted];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_56  [key=2, style=dotted];
m3_52 -> m3_53  [key=0, style=solid];
m3_52 -> m3_57  [key=2, style=dotted];
m3_52 -> m3_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_53 -> m3_54  [key=0, style=solid];
m3_53 -> m3_57  [key=2, style=dotted];
m3_53 -> m3_66  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_54 -> m3_49  [key=0, style=bold, color=blue];
m3_55 -> m3_115  [key=0, style=solid];
m3_115 -> m3_116  [key=0, style=solid];
m3_115 -> m3_117  [key=2, style=dotted];
m3_116 -> m3_55  [key=0, style=bold, color=blue];
m3_40 -> m3_41  [key=0, style=solid];
m3_41 -> m3_42  [key=0, style=solid];
m3_41 -> m3_31  [key=2, style=dotted];
m3_41 -> m3_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_44  [key=2, style=dotted];
m3_43 -> m3_40  [key=0, style=bold, color=blue];
m3_85 -> m3_86  [key=0, style=solid];
m3_86 -> m3_87  [key=0, style=solid];
m3_86 -> m3_15  [key=2, style=dotted];
m3_86 -> m3_31  [key=2, style=dotted];
m3_86 -> m3_92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_55  [key=2, style=dotted];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_56  [key=2, style=dotted];
m3_89 -> m3_90  [key=0, style=solid];
m3_89 -> m3_57  [key=2, style=dotted];
m3_89 -> m3_95  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_57  [key=2, style=dotted];
m3_90 -> m3_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_91 -> m3_85  [key=0, style=bold, color=blue];
m3_103 -> m3_104  [key=0, style=solid];
m3_104 -> m3_105  [key=0, style=solid];
m3_104 -> m3_55  [key=2, style=dotted];
m3_105 -> m3_106  [key=0, style=solid];
m3_105 -> m3_56  [key=2, style=dotted];
m3_106 -> m3_107  [key=0, style=solid];
m3_106 -> m3_57  [key=2, style=dotted];
m3_106 -> m3_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_57  [key=2, style=dotted];
m3_107 -> m3_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_108 -> m3_103  [key=0, style=bold, color=blue];
m3_112 -> m3_113  [key=0, style=solid];
m3_20 -> m3_21  [key=0, style=solid];
m3_24 -> m3_25  [key=0, style=solid];
m3_28 -> m3_29  [key=0, style=solid];
m3_33 -> m3_34  [key=0, style=solid];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_23  [key=2, style=dotted];
m3_22 -> m3_20  [key=0, style=bold, color=blue];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_27  [key=2, style=dotted];
m3_26 -> m3_24  [key=0, style=bold, color=blue];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_31  [key=2, style=dotted];
m3_29 -> m3_32  [key=2, style=dotted];
m3_30 -> m3_28  [key=0, style=bold, color=blue];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_31  [key=2, style=dotted];
m3_34 -> m3_36  [key=2, style=dotted];
m3_34 -> m3_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_35 -> m3_33  [key=0, style=bold, color=blue];
m3_37 -> m3_38  [key=0, style=solid];
m3_38 -> m3_39  [key=0, style=solid];
m3_39 -> m3_37  [key=0, style=bold, color=blue];
m3_45 -> m3_46  [key=0, style=solid];
m3_46 -> m3_47  [key=0, style=solid];
m3_46 -> m3_48  [key=2, style=dotted];
m3_47 -> m3_45  [key=0, style=bold, color=blue];
m3_58 -> m3_59  [key=0, style=solid];
m3_66 -> m3_67  [key=0, style=solid];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_31  [key=2, style=dotted];
m3_59 -> m3_61  [key=2, style=dotted];
m3_59 -> m3_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_60 -> m3_58  [key=0, style=bold, color=blue];
m3_62 -> m3_63  [key=0, style=solid];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_65  [key=2, style=dotted];
m3_64 -> m3_62  [key=0, style=bold, color=blue];
m3_67 -> m3_68  [key=0, style=solid];
m3_67 -> m3_69  [key=2, style=dotted];
m3_68 -> m3_66  [key=0, style=bold, color=blue];
m3_76 -> m3_77  [key=0, style=solid];
m3_82 -> m3_83  [key=0, style=solid];
m3_77 -> m3_78  [key=0, style=solid];
m3_77 -> m3_31  [key=2, style=dotted];
m3_77 -> m3_36  [key=2, style=dotted];
m3_77 -> m3_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_78 -> m3_76  [key=0, style=bold, color=blue];
m3_79 -> m3_80  [key=0, style=solid];
m3_80 -> m3_81  [key=0, style=solid];
m3_81 -> m3_79  [key=0, style=bold, color=blue];
m3_83 -> m3_84  [key=0, style=solid];
m3_83 -> m3_31  [key=2, style=dotted];
m3_83 -> m3_61  [key=2, style=dotted];
m3_84 -> m3_82  [key=0, style=bold, color=blue];
m3_92 -> m3_93  [key=0, style=solid];
m3_95 -> m3_96  [key=0, style=solid];
m3_99 -> m3_100  [key=0, style=solid];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_31  [key=2, style=dotted];
m3_93 -> m3_61  [key=2, style=dotted];
m3_94 -> m3_92  [key=0, style=bold, color=blue];
m3_96 -> m3_97  [key=0, style=solid];
m3_96 -> m3_98  [key=2, style=dotted];
m3_97 -> m3_95  [key=0, style=bold, color=blue];
m3_100 -> m3_101  [key=0, style=solid];
m3_100 -> m3_102  [key=2, style=dotted];
m3_101 -> m3_99  [key=0, style=bold, color=blue];
m3_109 -> m3_110  [key=0, style=solid];
m3_110 -> m3_111  [key=0, style=solid];
m3_110 -> m3_31  [key=2, style=dotted];
m3_110 -> m3_32  [key=2, style=dotted];
m3_111 -> m3_109  [key=0, style=bold, color=blue];
m3_113 -> m3_114  [key=0, style=solid];
m3_113 -> m3_69  [key=2, style=dotted];
m3_114 -> m3_112  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_12  [key=2, style=dotted];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_13  [key=2, style=dotted];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_14  [key=2, style=dotted];
m3_4 -> m3_5  [key=0, style=solid];
m3_4 -> m3_15  [key=2, style=dotted];
m3_4 -> m3_16  [key=2, style=dotted];
m3_4 -> m3_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_17  [key=2, style=dotted];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_18  [key=2, style=dotted];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_15  [key=2, style=dotted];
m3_7 -> m3_16  [key=2, style=dotted];
m3_7 -> m3_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_19  [key=2, style=dotted];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_15  [key=2, style=dotted];
m3_9 -> m3_16  [key=2, style=dotted];
m3_9 -> m3_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_10 -> m3_11  [key=0, style=solid];
m3_10 -> m3_15  [key=2, style=dotted];
m3_10 -> m3_16  [key=2, style=dotted];
m3_10 -> m3_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_11 -> m3_0  [key=0, style=bold, color=blue];
m3_70 -> m3_71  [key=0, style=solid];
m3_71 -> m3_72  [key=0, style=solid];
m3_71 -> m3_15  [key=2, style=dotted];
m3_71 -> m3_16  [key=2, style=dotted];
m3_71 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_55  [key=2, style=dotted];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_56  [key=2, style=dotted];
m3_74 -> m3_75  [key=0, style=solid];
m3_74 -> m3_57  [key=2, style=dotted];
m3_74 -> m3_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_75 -> m3_70  [key=0, style=bold, color=blue];
m3_118 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_51  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_52  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_72  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_74  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_86  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_88  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_89  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_90  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_104  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_105  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_106  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_107  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m3_118 -> m3_115  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.DelayedJobSchedulerFacts"];
m6_2 -> m6_3  [key=0, style=solid];
m6_3 -> m6_2  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_0  [key=0, style=bold, color=blue];
m7_2 -> m7_3  [key=0, style=solid];
m7_3 -> m7_4  [key=0, style=solid];
m7_4 -> m7_2  [key=0, style=bold, color=blue];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m7_5 -> m7_8  [key=1, style=dashed, color=red, label="Hangfire.Server.BackgroundProcessContext"];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_10  [key=2, style=dotted];
m7_7 -> m7_8  [key=0, style=solid, color=red];
m7_7 -> m7_11  [key=2, style=dotted];
m7_8 -> m7_9  [key=0, style=solid, color=red];
m7_8 -> m7_12  [key=2, style=dotted, color=red];
m7_9 -> m7_5  [key=0, style=bold, color=blue];
m7_13 -> m7_14  [key=0, style=solid];
m7_14 -> m7_15  [key=0, style=solid];
m7_15 -> m7_13  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_0  [key=0, style=bold, color=blue];
m7_16 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.ServerHeartbeat"];
m7_16 -> m7_8  [key=1, style=dashed, color=red, label="Hangfire.Server.ServerHeartbeat"];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_9  [key=2, style=dotted];
m8_6 -> m8_7  [key=0, style=solid];
m8_0 -> m8_1  [key=0, style=solid, color=red];
m8_0 -> m8_16  [key=3, color=darkorchid, style=bold, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext"];
m8_3 -> m8_4  [key=0, style=solid, color=green];
m8_3 -> m8_8  [key=2, style=dotted, color=green];
m8_3 -> m8_9  [key=2, style=dotted];
m8_2 -> m8_3  [key=0, style=solid, color=green];
m8_2 -> m8_6  [key=2, style=dotted];
m8_2 -> m8_7  [key=2, style=dotted];
m8_2 -> m8_8  [key=2, style=dotted];
m8_1 -> m8_2  [key=0, style=solid, color=red];
m8_1 -> m8_5  [key=2, style=dotted];
m8_4 -> m8_0  [key=0, style=bold, color=blue];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_10  [key=2, style=dotted];
m8_7 -> m8_0  [key=0, style=bold, color=blue];
m8_14 -> m8_15  [key=0, style=solid];
m8_16 -> m8_0  [key=2, style=dotted];
m8_16 -> m8_17  [key=0, style=solid];
m8_15 -> m8_16  [key=0, style=solid];
m8_15 -> m8_17  [key=0, style=solid];
m8_17 -> m8_14  [key=0, style=bold, color=blue];
m8_11 -> m8_1  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m8_11 -> m8_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m8_11 -> m8_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m8_11 -> m8_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m8_11 -> m8_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m8_11 -> m8_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m10_9 -> m10_10  [key=0, style=solid];
m10_9 -> m10_12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, string>"];
m10_9 -> m10_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m10_9 -> m10_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m10_9 -> m10_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Common.Job"];
m10_9 -> m10_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m10_10 -> m10_11  [key=0, style=solid];
m10_10 -> m10_12  [key=0, style=solid];
m10_12 -> m10_13  [key=0, style=solid];
m10_12 -> m10_14  [key=0, style=solid];
m10_14 -> m10_15  [key=0, style=solid];
m10_14 -> m10_16  [key=0, style=solid];
m10_17 -> m10_18  [key=0, style=solid];
m10_17 -> m10_22  [key=2, style=dotted];
m10_17 -> m10_23  [key=2, style=dotted];
m10_17 -> m10_20  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m10_18 -> m10_19  [key=0, style=solid];
m10_18 -> m10_24  [key=2, style=dotted];
m10_19 -> m10_20  [key=0, style=solid];
m10_19 -> m10_25  [key=2, style=dotted];
m10_11 -> m10_21  [key=0, style=solid];
m10_11 -> m10_8  [key=2, style=dotted];
m10_13 -> m10_21  [key=0, style=solid];
m10_13 -> m10_8  [key=2, style=dotted];
m10_15 -> m10_21  [key=0, style=solid];
m10_15 -> m10_8  [key=2, style=dotted];
m10_16 -> m10_17  [key=0, style=solid];
m10_16 -> m10_18  [key=1, style=dashed, color=darkseagreen4, label=createdAt];
m10_20 -> m10_21  [key=0, style=solid];
m10_21 -> m10_9  [key=0, style=bold, color=blue];
m10_25 -> m10_56  [key=0, style=solid, color=red];
m10_25 -> m10_58  [key=1, style=dashed, color=red, label="Hangfire.States.StateContext"];
m10_25 -> m10_63  [key=1, style=dashed, color=red, label="Hangfire.States.StateContext"];
m10_25 -> m10_18  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.States.StateContext context"];
m10_25 -> m10_45  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.States.StateContext context"];
m10_25 -> m10_26  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.States.IState toState"];
m10_25 -> m10_19  [key=3, color=darkorchid, style=bold, label="Parameter variable string oldStateName"];
m10_25 -> m10_39  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ChangeState"];
m10_25 -> m10_36  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ChangeState"];
m10_56 -> m10_57  [key=0, style=solid, color=red];
m10_56 -> m10_67  [key=2, style=dotted, color=red];
m10_56 -> m10_58  [key=1, style=dashed, color=red, label=electStateContext];
m10_58 -> m10_59  [key=0, style=solid, color=red];
m10_58 -> m10_69  [key=2, style=dotted, color=red];
m10_63 -> m10_64  [key=0, style=solid, color=red];
m10_63 -> m10_69  [key=2, style=dotted, color=red];
m10_63 -> m10_71  [key=2, style=dotted, color=red];
m10_57 -> m10_58  [key=0, style=solid, color=red];
m10_57 -> m10_68  [key=2, style=dotted, color=red];
m10_59 -> m10_60  [key=0, style=solid, color=red];
m10_59 -> m10_70  [key=2, style=dotted, color=red];
m10_60 -> m10_66  [key=0, style=solid, color=red];
m10_61 -> m10_62  [key=0, style=solid, color=red];
m10_62 -> m10_63  [key=0, style=solid, color=red];
m10_62 -> m10_54  [key=2, style=dotted, color=red];
m10_64 -> m10_65  [key=0, style=solid, color=red];
m10_64 -> m10_70  [key=2, style=dotted, color=red];
m10_65 -> m10_66  [key=0, style=solid, color=red];
m10_66 -> m10_25  [key=0, style=bold, color=blue];
m10_26 -> m10_27  [key=0, style=solid];
m10_26 -> m10_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m10_26 -> m10_31  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m10_26 -> m10_33  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_26 -> m10_34  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_26 -> m10_37  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m10_26 -> m10_42  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m10_26 -> m10_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m10_26 -> m10_45  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_26 -> m10_46  [key=1, style=dashed, color=red, label="Hangfire.States.IState"];
m10_26 -> m10_36  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ChangeState"];
m10_27 -> m10_28  [key=0, style=solid];
m10_27 -> m10_29  [key=0, style=solid];
m10_29 -> m10_30  [key=0, style=solid];
m10_29 -> m10_31  [key=0, style=solid];
m10_31 -> m10_32  [key=0, style=solid];
m10_31 -> m10_33  [key=0, style=solid];
m10_33 -> m10_34  [key=0, style=solid];
m10_33 -> m10_50  [key=2, style=dotted];
m10_34 -> m10_35  [key=0, style=solid];
m10_34 -> m10_51  [key=2, style=dotted];
m10_34 -> m10_37  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_34 -> m10_40  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_34 -> m10_45  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_34 -> m10_46  [key=1, style=dashed, color=red, label=jobData];
m10_37 -> m10_38  [key=0, style=solid];
m10_37 -> m10_39  [key=0, style=solid];
m10_37 -> m10_52  [key=2, style=dotted];
m10_42 -> m10_43  [key=0, style=solid];
m10_42 -> m10_45  [key=0, style=solid];
m10_43 -> m10_44  [key=0, style=solid];
m10_43 -> m10_54  [key=2, style=dotted];
m10_43 -> m10_55  [key=2, style=dotted];
m10_43 -> m10_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IState"];
m10_43 -> m10_46  [key=1, style=dashed, color=red, label="Hangfire.States.IState"];
m10_45 -> m10_46  [key=0, style=solid, color=red];
m10_45 -> m10_24  [key=2, style=dotted];
m10_46 -> m10_47  [key=0, style=solid, color=red];
m10_46 -> m10_25  [key=2, style=dotted, color=red];
m10_28 -> m10_48  [key=0, style=solid];
m10_28 -> m10_8  [key=2, style=dotted];
m10_30 -> m10_48  [key=0, style=solid];
m10_30 -> m10_8  [key=2, style=dotted];
m10_32 -> m10_48  [key=0, style=solid];
m10_32 -> m10_49  [key=2, style=dotted];
m10_35 -> m10_36  [key=0, style=solid];
m10_35 -> m10_37  [key=0, style=solid];
m10_40 -> m10_41  [key=0, style=solid];
m10_40 -> m10_45  [key=0, style=solid];
m10_40 -> m10_53  [key=2, style=dotted];
m10_36 -> m10_48  [key=0, style=solid];
m10_38 -> m10_48  [key=0, style=solid];
m10_39 -> m10_40  [key=0, style=solid];
m10_39 -> m10_47  [key=1, style=dashed, color=red, label=loadSucceeded];
m10_39 -> m10_39  [key=3, color=darkorchid, style=bold, label="Local variable bool loadSucceeded"];
m10_47 -> m10_48  [key=0, style=solid, color=red];
m10_41 -> m10_42  [key=0, style=solid];
m10_44 -> m10_45  [key=0, style=solid];
m10_44 -> m10_47  [key=1, style=dashed, color=red, label=loadSucceeded];
m10_48 -> m10_26  [key=0, style=bold, color=blue];
m10_51 -> m10_79  [key=0, style=solid];
m10_51 -> m10_81  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_51 -> m10_86  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m10_51 -> m10_26  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Threading.CancellationToken cancellationToken"];
m10_51 -> m10_19  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.JobData GetJobData"];
m10_79 -> m10_80  [key=0, style=solid];
m10_79 -> m10_88  [key=1, style=dashed, color=darkseagreen4, label=firstAttempt];
m10_79 -> m10_39  [key=3, color=darkorchid, style=bold, label="Local variable bool firstAttempt"];
m10_81 -> m10_82  [key=0, style=solid];
m10_81 -> m10_91  [key=2, style=dotted];
m10_81 -> m10_84  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_81 -> m10_85  [key=1, style=dashed, color=darkseagreen4, label=jobData];
m10_86 -> m10_87  [key=0, style=solid];
m10_86 -> m10_88  [key=0, style=solid];
m10_86 -> m10_86  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m10_80 -> m10_81  [key=0, style=solid];
m10_80 -> m10_90  [key=0, style=solid];
m10_88 -> m10_89  [key=0, style=solid];
m10_88 -> m10_93  [key=2, style=dotted];
m10_82 -> m10_83  [key=0, style=solid];
m10_82 -> m10_84  [key=0, style=solid];
m10_84 -> m10_85  [key=0, style=solid];
m10_84 -> m10_86  [key=0, style=solid];
m10_84 -> m10_92  [key=2, style=dotted];
m10_85 -> m10_90  [key=0, style=solid];
m10_83 -> m10_90  [key=0, style=solid];
m10_87 -> m10_90  [key=0, style=solid];
m10_89 -> m10_80  [key=0, style=solid];
m10_90 -> m10_51  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_0 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IStateChangeProcess"];
m10_0 -> m10_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Storage.IStorageConnection"];
m10_0 -> m10_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IStateChangeProcess"];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_3  [key=0, style=solid];
m10_3 -> m10_4  [key=0, style=solid];
m10_3 -> m10_5  [key=0, style=solid];
m10_5 -> m10_6  [key=0, style=solid];
m10_6 -> m10_7  [key=0, style=solid];
m10_2 -> m10_7  [key=0, style=solid];
m10_2 -> m10_8  [key=2, style=dotted];
m10_4 -> m10_7  [key=0, style=solid];
m10_4 -> m10_8  [key=2, style=dotted];
m10_7 -> m10_0  [key=0, style=bold, color=blue];
m10_70 -> m10_72  [key=0, style=solid];
m10_70 -> m10_73  [key=1, style=dashed, color=red, label="Hangfire.States.ApplyStateContext"];
m10_70 -> m10_58  [key=3, color=red, style=bold, label="Parameter variable Hangfire.States.ApplyStateContext context"];
m10_70 -> m10_63  [key=3, color=red, style=bold, label="Parameter variable Hangfire.States.ApplyStateContext context"];
m10_70 -> m10_39  [key=3, color=darkorchid, style=bold, label="Parameter variable bool useFilters"];
m10_70 -> m10_36  [key=3, color=darkorchid, style=bold, label="Parameter variable bool useFilters"];
m10_72 -> m10_73  [key=0, style=solid, color=red];
m10_72 -> m10_76  [key=2, style=dotted];
m10_72 -> m10_74  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_73 -> m10_74  [key=0, style=solid, color=red];
m10_73 -> m10_77  [key=2, style=dotted, color=red];
m10_74 -> m10_75  [key=0, style=solid];
m10_74 -> m10_78  [key=2, style=dotted];
m10_75 -> m10_70  [key=0, style=bold, color=blue];
m10_94 -> m10_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m10_94 -> m10_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m10_94 -> m10_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m10_94 -> m10_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m10_94 -> m10_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m10_94 -> m10_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m10_94 -> m10_46  [key=1, style=dashed, color=red, label="Hangfire.States.StateMachine"];
m10_94 -> m10_56  [key=1, style=dashed, color=red, label="Hangfire.States.StateMachine"];
m10_94 -> m10_57  [key=1, style=dashed, color=red, label="Hangfire.States.StateMachine"];
m10_94 -> m10_59  [key=1, style=dashed, color=red, label="Hangfire.States.StateMachine"];
m10_94 -> m10_64  [key=1, style=dashed, color=red, label="Hangfire.States.StateMachine"];
m10_94 -> m10_72  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
m10_94 -> m10_73  [key=1, style=dashed, color=red, label="Hangfire.States.StateMachine"];
m10_94 -> m10_81  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.StateMachine"];
}
