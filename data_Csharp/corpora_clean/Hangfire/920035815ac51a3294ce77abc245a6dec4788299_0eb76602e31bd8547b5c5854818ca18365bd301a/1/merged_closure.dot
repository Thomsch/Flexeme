digraph  {
n124 [label="HangFire.Tests.JobFetcherFeature", span=""];
n0 [cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="Entry HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
n1 [cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
n2 [cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
n5 [cluster="Unk.GetTestRunner", label="Entry Unk.GetTestRunner", span=""];
n3 [cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
n6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
n7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
n4 [cluster="HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", label="Exit HangFire.Tests.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
n8 [cluster="Unk.OnFeatureStart", label="Entry Unk.OnFeatureStart", span=""];
n9 [cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", label="Entry HangFire.Tests.JobFetcherFeature.FeatureTearDown()", span="39-39"];
n10 [cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", label="testRunner.OnFeatureEnd()", span="41-41"];
n11 [cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", label="testRunner = null", span="42-42"];
n13 [cluster="Unk.OnFeatureEnd", label="Entry Unk.OnFeatureEnd", span=""];
n12 [cluster="HangFire.Tests.JobFetcherFeature.FeatureTearDown()", label="Exit HangFire.Tests.JobFetcherFeature.FeatureTearDown()", span="39-39"];
n14 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", label="Entry HangFire.Tests.JobFetcherFeature.TestInitialize()", span="46-46"];
n15 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49"];
n16 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", label="HangFire.Tests.JobFetcherFeature.FeatureSetup(null)", span="51-51"];
n17 [cluster="HangFire.Tests.JobFetcherFeature.TestInitialize()", label="Exit HangFire.Tests.JobFetcherFeature.TestInitialize()", span="46-46"];
n18 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", label="Entry HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
n19 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", label="testRunner.OnScenarioEnd()", span="58-58"];
n20 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", label="Exit HangFire.Tests.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
n21 [cluster="Unk.OnScenarioEnd", label="Entry Unk.OnScenarioEnd", span=""];
n22 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="Entry HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
n23 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
n24 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", label="Exit HangFire.Tests.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
n25 [cluster="Unk.OnScenarioStart", label="Entry Unk.OnScenarioStart", span=""];
n26 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", label="Entry HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
n27 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", label="testRunner.CollectScenarioErrors()", span="68-68"];
n28 [cluster="HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", label="Exit HangFire.Tests.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
n29 [cluster="Unk.CollectScenarioErrors", label="Entry Unk.CollectScenarioErrors", span=""];
n30 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", label="Entry HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", span="75-75"];
n31 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns job id when it dequeues a job'', ((string[])(null)))", span="77-77"];
n32 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
n39 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
n33 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
n34 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83"];
n40 [cluster="Unk.Given", label="Entry Unk.Given", span=""];
n35 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
n41 [cluster="Unk.And", label="Entry Unk.And", span=""];
n36 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", label="testRunner.Then(''the fetcher returns the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87"];
n42 [cluster="Unk.When", label="Entry Unk.When", span=""];
n37 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", label="this.ScenarioCleanup()", span="89-89"];
n43 [cluster="Unk.Then", label="Entry Unk.Then", span=""];
n38 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", label="Exit HangFire.Tests.JobFetcherFeature.FetcherReturnsJobIdWhenItDequeuesAJob()", span="75-75"];
n44 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", label="Entry HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
n45 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher removes the dequeued job from the queue and adds it to the dequeued list'', ((string[])(null)))", span="98-98"];
n46 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", label="this.ScenarioSetup(scenarioInfo)", span="100-100"];
n47 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102"];
n48 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104"];
n49 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106"];
n50 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", label="testRunner.Then(''the queue does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108"];
n51 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", label="testRunner.But(''the dequeued jobs list contains it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="110-110"];
n52 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", label="this.ScenarioCleanup()", span="112-112"];
n54 [cluster="Unk.But", label="Entry Unk.But", span=""];
n53 [cluster="HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", label="Exit HangFire.Tests.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
n55 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", label="Entry HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
n56 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns null when it tries to dequeue a job from an empty queue'', ((string[])(null)))", span="121-121"];
n57 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", label="this.ScenarioSetup(scenarioInfo)", span="123-123"];
n58 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="125-125"];
n59 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="127-127"];
n60 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="129-129"];
n61 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", label="testRunner.Then(''the fetcher returns null'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="131-131"];
n62 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", label="this.ScenarioCleanup()", span="133-133"];
n63 [cluster="HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", label="Exit HangFire.Tests.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
n64 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="Entry HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
n65 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher dequeues jobs in the FIFO order'', ((string[])(null)))", span="142-142"];
n66 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="this.ScenarioSetup(scenarioInfo)", span="144-144"];
n67 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="146-146"];
n68 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="148-148"];
n69 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="150-150"];
n70 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="152-152"];
n71 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="testRunner.Then(''the fetcher returns the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="154-154"];
n72 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156"];
n73 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="testRunner.Then(''the fetcher returns the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158"];
n74 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="this.ScenarioCleanup()", span="160-160"];
n75 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", label="Exit HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
n76 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", label="Entry HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
n77 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher listens only specified queue'', ((string[])(null)))", span="169-169"];
n78 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", label="this.ScenarioSetup(scenarioInfo)", span="171-171"];
n79 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="173-173"];
n80 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="175-175"];
n81 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="177-177"];
n82 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", label="testRunner.Then(''the fetcher returns null'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="179-179"];
n83 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", label="this.ScenarioCleanup()", span="181-181"];
n84 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", label="Exit HangFire.Tests.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
n85 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", label="Entry HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
n86 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher sets the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="190-190"];
n87 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", label="this.ScenarioSetup(scenarioInfo)", span="192-192"];
n88 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="194-194"];
n89 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="196-196"];
n90 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="198-198"];
n91 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", label="testRunner.Then(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="200-200"];
n92 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", label="this.ScenarioCleanup()", span="202-202"];
n93 [cluster="HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", label="Exit HangFire.Tests.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
n94 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="Entry HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", span="209-209"];
n95 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher listening multiple queues dequeues job from all of them'', ((string[])(null)))", span="211-211"];
n96 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="this.ScenarioSetup(scenarioInfo)", span="213-213"];
n97 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Queue'',\r\n                        ''Jobs''})", span="215-217"];
n98 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="table1.AddRow(new string[] {\r\n                        ''first'',\r\n                        ''3''})", span="218-220"];
n106 [cluster="TechTalk.SpecFlow.Table.cstr", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
n99 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="table1.AddRow(new string[] {\r\n                        ''second'',\r\n                        ''2''})", span="221-223"];
n100 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="testRunner.Given(''the following queues:'', ((string)(null)), table1, ''Given '')", span="225-225"];
n107 [cluster="Unk.AddRow", label="Entry Unk.AddRow", span=""];
n101 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="testRunner.And(''the fetcher listening them'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="227-227"];
n102 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="testRunner.When(''it dequeues 5 jobs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="229-229"];
n103 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="testRunner.Then(''all queues are empty'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="231-231"];
n104 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="this.ScenarioCleanup()", span="233-233"];
n105 [cluster="HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", label="Exit HangFire.Tests.JobFetcherFeature.FetcherListeningMultipleQueuesDequeuesJobFromAllOfThem()", span="209-209"];
n108 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="Entry HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", span="240-240"];
n109 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher dequeues jobs from queues in their defined order, from left to right'', ((string[])(null)))", span="242-242"];
n110 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="this.ScenarioSetup(scenarioInfo)", span="244-244"];
n111 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Queue'',\r\n                        ''Jobs''})", span="246-248"];
n112 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="table2.AddRow(new string[] {\r\n                        ''first'',\r\n                        ''5''})", span="249-251"];
n113 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="table2.AddRow(new string[] {\r\n                        ''second'',\r\n                        ''5''})", span="252-254"];
n114 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="testRunner.Given(''the following queues:'', ((string)(null)), table2, ''Given '')", span="256-256"];
n115 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="testRunner.And(''the fetcher listening them'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="258-258"];
n116 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="testRunner.When(''it dequeues 1 job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="260-260"];
n117 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="testRunner.Then(''the \'first\' queue length is 4'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="262-262"];
n118 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="testRunner.When(''it dequeues 1 job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="264-264"];
n119 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="testRunner.Then(''the \'second\' queue length is 4'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="266-266"];
n120 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="testRunner.When(''it dequeues 1 job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="268-268"];
n121 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="testRunner.Then(''the \'first\' queue length is 3'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="270-270"];
n122 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="this.ScenarioCleanup()", span="272-272"];
n123 [cluster="HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", label="Exit HangFire.Tests.JobFetcherFeature.FetcherDequeuesJobsFromQueuesInTheirDefinedOrderFromLeftToRight()", span="240-240"];
d11 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", color=green, community=0, label="_storage.UseConnection(connection =>\r\n                {\r\n                    removedCount = connection.Execute(\r\n                        GetAggregationQuery(_storage),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass },\r\n                        commandTimeout: 0);\r\n                })", prediction=0, span="55-61"];
d36 [label="Hangfire.SqlServer.CountersAggregator", span=""];
d10 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", label="int removedCount = 0", span="51-51"];
d12 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", label="removedCount >= NumberOfRecordsInSinglePass", span="63-63"];
d20 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<DbConnection>)", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<DbConnection>)", span="170-170"];
d24 [cluster="lambda expression", label="Entry lambda expression", span="55-61"];
d15 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", label="removedCount >= NumberOfRecordsInSinglePass", span="69-69"];
d3 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", label="_storage = storage", span="43-43"];
d4 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", label="_interval = interval", span="44-44"];
d25 [cluster="lambda expression", label="removedCount = connection.Execute(\r\n                        GetAggregationQuery(_storage),\r\n                        new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass },\r\n                        commandTimeout: 0)", span="57-60"];
d17 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", label="cancellationToken.WaitHandle.WaitOne(_interval)", span="73-73"];
d30 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", label="return GetType().ToString();", span="78-78"];
d9 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", label="Logger.Debug(''Aggregating records in 'Counter' table...'')", span="49-49"];
d13 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", label="cancellationToken.WaitHandle.WaitOne(DelayBetweenPasses)", span="65-65"];
d26 [cluster="lambda expression", label="Exit lambda expression", span="55-61"];
d14 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", label="cancellationToken.ThrowIfCancellationRequested()", span="66-66"];
d16 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", label="Logger.Trace(''Records from the 'Counter' table aggregated.'')", span="71-71"];
d0 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", label="Entry Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="39-39"];
d1 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", label="storage == null", span="41-41"];
d5 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", label="Exit Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="39-39"];
d27 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", label="Entry Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", span="81-81"];
d28 [cluster="Unk.Execute", label="Entry Unk.Execute", span=""];
d8 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", label="Entry Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="47-47"];
d18 [cluster="Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", label="Exit Hangfire.SqlServer.CountersAggregator.Execute(System.Threading.CancellationToken)", span="47-47"];
d21 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
d29 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", label="Entry Hangfire.SqlServer.CountersAggregator.ToString()", span="76-76"];
d31 [cluster="Hangfire.SqlServer.CountersAggregator.ToString()", label="Exit Hangfire.SqlServer.CountersAggregator.ToString()", span="76-76"];
d32 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
d33 [cluster="System.Type.ToString()", label="Entry System.Type.ToString()", span="0-0"];
d19 [cluster="Hangfire.Logging.ILog.Debug(string)", label="Entry Hangfire.Logging.ILog.Debug(string)", span="116-116"];
d22 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
d23 [cluster="Hangfire.Logging.ILog.Trace(string)", label="Entry Hangfire.Logging.ILog.Trace(string)", span="234-234"];
d2 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", label="throw new ArgumentNullException(nameof(storage));", span="41-41"];
d35 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", label="Exit Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", span="81-81"];
d34 [cluster="Hangfire.SqlServer.CountersAggregator.GetAggregationQuery(Hangfire.SqlServer.SqlServerStorage)", label="return \r\n$@''DECLARE @RecordsToAggregate TABLE\r\n(\r\n	[Key] NVARCHAR(100) NOT NULL,\r\n	[Value] SMALLINT NOT NULL,\r\n	[ExpireAt] DATETIME NULL\r\n)\r\n\r\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED\r\nBEGIN TRAN\r\n\r\nDELETE TOP (@count) C\r\nOUTPUT DELETED.[Key], DELETED.[Value], DELETED.[ExpireAt] INTO @RecordsToAggregate\r\nFROM [{storage.SchemaName}].[Counter] C WITH (READPAST, XLOCK, INDEX(0))\r\n\r\nSET NOCOUNT ON\r\n\r\n;MERGE [{storage.SchemaName}].[AggregatedCounter] WITH (HOLDLOCK) AS [Target]\r\nUSING (\r\n	SELECT [Key], SUM([Value]) as [Value], MAX([ExpireAt]) AS [ExpireAt] FROM @RecordsToAggregate\r\n	GROUP BY [Key]) AS [Source] ([Key], [Value], [ExpireAt])\r\nON [Target].[Key] = [Source].[Key]\r\nWHEN MATCHED THEN UPDATE SET \r\n	[Target].[Value] = [Target].[Value] + [Source].[Value],\r\n	[Target].[ExpireAt] = (SELECT MAX([ExpireAt]) FROM (VALUES ([Source].ExpireAt), ([Target].[ExpireAt])) AS MaxExpireAt([ExpireAt]))\r\nWHEN NOT MATCHED THEN INSERT ([Key], [Value], [ExpireAt]) VALUES ([Source].[Key], [Source].[Value], [Source].[ExpireAt]);\r\n\r\nCOMMIT TRAN'';", span="83-110"];
d6 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
d7 [cluster="Unk.nameof", label="Entry Unk.nameof", span=""];
m4_132 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="239-239"];
m4_133 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="key == null", span="241-241"];
m4_134 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="241-241"];
m4_135 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="toScore < fromScore", span="242-242"];
m4_136 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="242-242"];
m4_138 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="239-239"];
m4_262 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="420-420"];
m4_263 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="key == null", span="422-422"];
m4_264 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="422-422"];
m4_265 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="string query = $@''select min([ExpireAt]) from [{_storage.SchemaName}].Hash with (readcommittedlock) where [Key] = @key''", span="424-424"];
m4_267 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="420-420"];
m4_84 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="45-45"];
m4_82 [cluster="long.Parse(string)", file="SqlServerConnection.cs", label="Entry long.Parse(string)", span="0-0"];
m4_173 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="291-291"];
m4_174 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="serverId == null", span="293-293"];
m4_175 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(serverId));", span="293-293"];
m4_176 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="context == null", span="294-294"];
m4_177 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(context));", span="294-294"];
m4_178 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="296-301"];
m4_180 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="291-291"];
m4_15 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="51-51"];
m4_16 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="queues == null || queues.Length == 0", span="53-53"];
m4_17 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(queues));", span="53-53"];
m4_18 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="var providers = queues\r\n                .Select(queue => _storage.QueueProviders.GetProvider(queue))\r\n                .Distinct()\r\n                .ToArray()", span="55-58"];
m4_20 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="throw new InvalidOperationException(\r\n                    $''Multiple provider instances registered for queues: {String.Join('', '', queues)}. You should choose only one type of persistent queues per server instance.'');", span="62-63"];
m4_22 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="return persistentQueue.Dequeue(queues, cancellationToken);", span="67-67"];
m4_19 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="providers.Length != 1", span="60-60"];
m4_21 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="var persistentQueue = providers[0].GetJobQueue()", span="66-66"];
m4_23 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="51-51"];
m4_161 [cluster="Unk.UseConnection", file="SqlServerConnection.cs", label="Entry Unk.UseConnection", span=""];
m4_34 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m4_166 [cluster="Unk.ToDictionary", file="SqlServerConnection.cs", label="Entry Unk.ToDictionary", span=""];
m4_193 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="329-329"];
m4_194 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="serverId == null", span="331-331"];
m4_195 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(serverId));", span="331-331"];
m4_197 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="329-329"];
m4_221 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="365-365"];
m4_222 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="key == null", span="367-367"];
m4_223 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="367-367"];
m4_224 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="string query =\r\n$@''select [Value] from (\r\n	select [Value], row_number() over (order by [Id] ASC) as row_num\r\n	from [{_storage.SchemaName}].[Set] with (readcommittedlock)\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="369-374"];
m4_226 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="365-365"];
m4_294 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="459-459"];
m4_295 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="key == null", span="461-461"];
m4_296 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="461-461"];
m4_297 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="string query = \r\n$@''select min([ExpireAt]) from [{_storage.SchemaName}].List with (readcommittedlock)\r\nwhere [Key] = @key''", span="463-465"];
m4_299 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="459-459"];
m4_315 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="492-492"];
m4_316 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="key == null", span="494-494"];
m4_317 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="494-494"];
m4_318 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="string query =\r\n$@''select [Value] from [{_storage.SchemaName}].List with (readcommittedlock)\r\nwhere [Key] = @key\r\norder by [Id] desc''", span="496-499"];
m4_320 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="492-492"];
m4_100 [cluster="Hangfire.Storage.StateData.StateData()", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.StateData.StateData()", span="23-23"];
m4_253 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="411-411"];
m4_254 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="key == null", span="413-413"];
m4_255 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="413-413"];
m4_256 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="string query = $@''select count([Id]) from [{_storage.SchemaName}].Hash with (readcommittedlock) where [Key] = @key''", span="415-415"];
m4_258 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="411-411"];
m4_181 [cluster="Hangfire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m4_63 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="124-124"];
m4_64 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="id == null", span="126-126"];
m4_65 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(id));", span="126-126"];
m4_66 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="string sql =\r\n$@''select InvocationData, StateName, Arguments, CreatedAt from [{_storage.SchemaName}].Job with (readcommittedlock) where Id = @id''", span="128-129"];
m4_68 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="124-124"];
m4_156 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="275-275"];
m4_157 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="key == null", span="277-277"];
m4_158 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="277-277"];
m4_160 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="275-275"];
m4_11 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="46-46"];
m4_13 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="46-46"];
m4_59 [cluster="Unk.>", file="SqlServerConnection.cs", label="Entry Unk.>", span=""];
m4_211 [cluster="System.TimeSpan.Negate()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m4_151 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<DbConnection, DbTransaction>)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<DbConnection, DbTransaction>)", span="194-194"];
m4_101 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="195-195"];
m4_102 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="id == null", span="197-197"];
m4_103 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(id));", span="197-197"];
m4_104 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="name == null", span="198-198"];
m4_105 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(name));", span="198-198"];
m4_107 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="195-195"];
m4_139 [cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m4_28 [cluster="string.Join(string, params string[])", file="SqlServerConnection.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m4_243 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerConnection.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m4_44 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="70-70"];
m4_6 [cluster="HangFire.PreserveCultureFilter.PreserveCultureFilter()", file="SqlServerConnection.cs", label="Entry HangFire.PreserveCultureFilter.PreserveCultureFilter()", span="8-8"];
m4_231 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="381-381"];
m4_232 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="key == null", span="383-383"];
m4_233 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="383-383"];
m4_234 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="string query = $@''select min([ExpireAt]) from [{_storage.SchemaName}].[Set] with (readcommittedlock) where [Key] = @key''", span="385-385"];
m4_236 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="381-381"];
m4_244 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="396-396"];
m4_245 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="key == null", span="398-398"];
m4_246 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="398-398"];
m4_247 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="string query = \r\n$@''select sum(s.[Value]) from (select sum([Value]) as [Value] from [{_storage.SchemaName}].Counter with (readcommittedlock)\r\nwhere [Key] = @key\r\nunion all\r\nselect [Value] from [{_storage.SchemaName}].AggregatedCounter with (readcommittedlock)\r\nwhere [Key] = @key) as s''", span="400-405"];
m4_249 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="396-396"];
m4_26 [cluster="Unk.ToArray", file="SqlServerConnection.cs", label="Entry Unk.ToArray", span=""];
m4_61 [cluster="Unk.Parse", file="SqlServerConnection.cs", label="Entry Unk.Parse", span=""];
m4_27 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerConnection.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m4_60 [cluster="Unk.ToString", file="SqlServerConnection.cs", label="Entry Unk.ToString", span=""];
m4_99 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="SqlServerConnection.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
m4_112 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="213-213"];
m4_113 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="id == null", span="215-215"];
m4_114 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(id));", span="215-215"];
m4_115 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="name == null", span="216-216"];
m4_116 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(name));", span="216-216"];
m4_118 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="213-213"];
m4_58 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m4_14 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="60-60"];
m4_185 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="316-316"];
m4_186 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="serverId == null", span="318-318"];
m4_187 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(serverId));", span="318-318"];
m4_189 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="316-316"];
m4_86 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="164-164"];
m4_87 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="jobId == null", span="166-166"];
m4_88 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(jobId));", span="166-166"];
m4_89 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="string sql = \r\n$@''select s.Name, s.Reason, s.Data\r\nfrom [{_storage.SchemaName}].State s with (readcommittedlock)\r\ninner join [{_storage.SchemaName}].Job j with (readcommittedlock) on j.StateId = s.Id\r\nwhere j.Id = @jobId''", span="168-172"];
m4_91 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="164-164"];
m4_306 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="476-476"];
m4_307 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="key == null", span="478-478"];
m4_308 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="478-478"];
m4_309 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="string query =\r\n$@''select [Value] from (\r\n	select [Value], row_number() over (order by [Id] desc) as row_num \r\n	from [{_storage.SchemaName}].List with (readcommittedlock)\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="480-485"];
m4_311 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="476-476"];
m4_10 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage)", span="42-42"];
m4_206 [cluster="System.TimeSpan.Duration()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m4_35 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="70-70"];
m4_36 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="job == null", span="76-76"];
m4_37 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(job));", span="76-76"];
m4_38 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="parameters == null", span="77-77"];
m4_39 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(parameters));", span="77-77"];
m4_41 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="var invocationData = InvocationData.Serialize(job)", span="84-84"];
m4_40 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="string createJobSql =\r\n$@''insert into [{_storage.SchemaName}].Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\noutput inserted.Id\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt)''", span="79-82"];
m4_43 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="70-70"];
m4_57 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m4_30 [cluster="Unk.Dequeue", file="SqlServerConnection.cs", label="Entry Unk.Dequeue", span=""];
m4_321 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="501-501"];
m4_31 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="56-56"];
m4_32 [cluster="lambda expression", file="SqlServerConnection.cs", label="_storage.QueueProviders.GetProvider(queue)", span="56-56"];
m4_33 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="56-56"];
m4_47 [cluster="lambda expression", file="SqlServerConnection.cs", label="var jobId = connection.ExecuteScalar<long>(\r\n                    createJobSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(invocationData),\r\n                        arguments = invocationData.Arguments,\r\n                        createdAt = createdAt,\r\n                        expireAt = createdAt.Add(expireIn)\r\n                    },\r\n                    commandTimeout: _storage.CommandTimeout).ToString()", span="88-97"];
m4_48 [cluster="lambda expression", file="SqlServerConnection.cs", label="parameters.Count > 0", span="99-99"];
m4_51 [cluster="lambda expression", file="SqlServerConnection.cs", label=parameters, span="103-103"];
m4_46 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="86-121"];
m4_55 [cluster="lambda expression", file="SqlServerConnection.cs", label="return jobId;", span="120-120"];
m4_56 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="86-121"];
m4_70 [cluster="lambda expression", file="SqlServerConnection.cs", label="var jobData = connection.Query<SqlJob>(sql, new { id = long.Parse(id) }, commandTimeout: _storage.CommandTimeout)\r\n                    .SingleOrDefault()", span="133-134"];
m4_69 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="131-161"];
m4_71 [cluster="lambda expression", file="SqlServerConnection.cs", label="jobData == null", span="136-136"];
m4_73 [cluster="lambda expression", file="SqlServerConnection.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="139-139"];
m4_74 [cluster="lambda expression", file="SqlServerConnection.cs", label="invocationData.Arguments = jobData.Arguments", span="140-140"];
m4_80 [cluster="lambda expression", file="SqlServerConnection.cs", label="return new JobData\r\n                {\r\n                    Job = job,\r\n                    State = jobData.StateName,\r\n                    CreatedAt = jobData.CreatedAt,\r\n                    LoadException = loadException\r\n                };", span="154-160"];
m4_72 [cluster="lambda expression", file="SqlServerConnection.cs", label="return null;", span="136-136"];
m4_77 [cluster="lambda expression", file="SqlServerConnection.cs", label="job = invocationData.Deserialize()", span="147-147"];
m4_75 [cluster="lambda expression", file="SqlServerConnection.cs", label="Job job = null", span="142-142"];
m4_76 [cluster="lambda expression", file="SqlServerConnection.cs", label="JobLoadException loadException = null", span="143-143"];
m4_78 [cluster="lambda expression", file="SqlServerConnection.cs", label=JobLoadException, span="149-149"];
m4_79 [cluster="lambda expression", file="SqlServerConnection.cs", label="loadException = ex", span="151-151"];
m4_81 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="131-161"];
m4_93 [cluster="lambda expression", file="SqlServerConnection.cs", label="var sqlState = connection.Query<SqlState>(sql, new { jobId = long.Parse(jobId) }, commandTimeout: _storage.CommandTimeout).SingleOrDefault()", span="176-176"];
m4_92 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="174-192"];
m4_94 [cluster="lambda expression", file="SqlServerConnection.cs", label="sqlState == null", span="177-177"];
m4_96 [cluster="lambda expression", file="SqlServerConnection.cs", label="var data = new Dictionary<string, string>(\r\n                    JobHelper.FromJson<Dictionary<string, string>>(sqlState.Data),\r\n                    StringComparer.OrdinalIgnoreCase)", span="182-184"];
m4_97 [cluster="lambda expression", file="SqlServerConnection.cs", label="return new StateData\r\n                {\r\n                    Name = sqlState.Name,\r\n                    Reason = sqlState.Reason,\r\n                    Data = data\r\n                };", span="186-191"];
m4_95 [cluster="lambda expression", file="SqlServerConnection.cs", label="return null;", span="179-179"];
m4_98 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="174-192"];
m4_110 [cluster="lambda expression", file="SqlServerConnection.cs", label="connection.Execute(\r\n$@'';merge [{_storage.SchemaName}].JobParameter with (holdlock) as Target\r\nusing (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) \r\non Target.JobId = Source.JobId AND Target.Name = Source.Name\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                    new { jobId = long.Parse(id), name, value },\r\n                    commandTimeout: _storage.CommandTimeout)", span="202-209"];
m4_109 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="200-210"];
m4_111 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="200-210"];
m4_119 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="218-221"];
m4_121 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="218-221"];
m4_128 [cluster="lambda expression", file="SqlServerConnection.cs", label="var result = connection.Query<string>(\r\n                    $@''select Value from [{_storage.SchemaName}].[Set] with (readcommittedlock) where [Key] = @key'',\r\n                    new { key },\r\n                    commandTimeout: _storage.CommandTimeout)", span="230-233"];
m4_127 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="228-236"];
m4_129 [cluster="lambda expression", file="SqlServerConnection.cs", label="return new HashSet<string>(result);", span="235-235"];
m4_130 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="228-236"];
m4_140 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="244-247"];
m4_142 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="244-247"];
m4_153 [cluster="lambda expression", file="SqlServerConnection.cs", label=keyValuePairs, span="264-264"];
m4_152 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="262-272"];
m4_155 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="262-272"];
m4_163 [cluster="lambda expression", file="SqlServerConnection.cs", label="var result = connection.Query<SqlHash>(\r\n                    $''select Field, Value from [{_storage.SchemaName}].Hash with (forceseek, readcommittedlock) where [Key] = @key'',\r\n                    new { key },\r\n                    commandTimeout: _storage.CommandTimeout)\r\n                    .ToDictionary(x => x.Field, x => x.Value)", span="281-285"];
m4_162 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="279-288"];
m4_164 [cluster="lambda expression", file="SqlServerConnection.cs", label="return result.Count != 0 ? result : null;", span="287-287"];
m4_167 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="285-285"];
m4_170 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="285-285"];
m4_165 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="279-288"];
m4_168 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Field", span="285-285"];
m4_169 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="285-285"];
m4_171 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Value", span="285-285"];
m4_172 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="285-285"];
m4_183 [cluster="lambda expression", file="SqlServerConnection.cs", label="connection.Execute(\r\n$@'';merge [{_storage.SchemaName}].Server with (holdlock) as Target\r\nusing (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat)\r\non Target.Id = Source.Id\r\nwhen matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat\r\nwhen not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                    new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow },\r\n                    commandTimeout: _storage.CommandTimeout)", span="305-312"];
m4_182 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="303-313"];
m4_184 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="303-313"];
m4_191 [cluster="lambda expression", file="SqlServerConnection.cs", label="connection.Execute(\r\n                    $@''delete from [{_storage.SchemaName}].Server where Id = @id'',\r\n                    new { id = serverId },\r\n                    commandTimeout: _storage.CommandTimeout)", span="322-325"];
m4_190 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="320-326"];
m4_192 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="320-326"];
m4_199 [cluster="lambda expression", file="SqlServerConnection.cs", label="connection.Execute(\r\n                    $@''update [{_storage.SchemaName}].Server set LastHeartbeat = @now where Id = @id'',\r\n                    new { now = DateTime.UtcNow, id = serverId },\r\n                    commandTimeout: _storage.CommandTimeout)", span="335-338"];
m4_198 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="333-339"];
m4_200 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="333-339"];
m4_208 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="349-352"];
m4_210 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="349-352"];
m4_217 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="359-362"];
m4_219 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="359-362"];
m4_227 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="376-378"];
m4_229 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="376-378"];
m4_238 [cluster="lambda expression", file="SqlServerConnection.cs", label="var result = connection.ExecuteScalar<DateTime?>(query, new { key = key }, commandTimeout: _storage.CommandTimeout)", span="389-389"];
m4_237 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="387-393"];
m4_239 [cluster="lambda expression", file="SqlServerConnection.cs", label="!result.HasValue", span="390-390"];
m4_241 [cluster="lambda expression", file="SqlServerConnection.cs", label="return result.Value - DateTime.UtcNow;", span="392-392"];
m4_240 [cluster="lambda expression", file="SqlServerConnection.cs", label="return TimeSpan.FromSeconds(-1);", span="390-390"];
m4_242 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="387-393"];
m4_251 [cluster="lambda expression", file="SqlServerConnection.cs", label="connection.ExecuteScalar<long?>(query, new { key = key }, commandTimeout: _storage.CommandTimeout) ?? 0", span="408-408"];
m4_250 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="407-408"];
m4_252 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="407-408"];
m4_259 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="417-417"];
m4_261 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="417-417"];
m4_269 [cluster="lambda expression", file="SqlServerConnection.cs", label="var result = connection.ExecuteScalar<DateTime?>(query, new { key = key }, commandTimeout: _storage.CommandTimeout)", span="428-428"];
m4_268 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="426-432"];
m4_270 [cluster="lambda expression", file="SqlServerConnection.cs", label="!result.HasValue", span="429-429"];
m4_272 [cluster="lambda expression", file="SqlServerConnection.cs", label="return result.Value - DateTime.UtcNow;", span="431-431"];
m4_271 [cluster="lambda expression", file="SqlServerConnection.cs", label="return TimeSpan.FromSeconds(-1);", span="429-429"];
m4_273 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="426-432"];
m4_282 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="444-445"];
m4_284 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="444-445"];
m4_291 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="456-456"];
m4_293 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="456-456"];
m4_301 [cluster="lambda expression", file="SqlServerConnection.cs", label="var result = connection.ExecuteScalar<DateTime?>(query, new { key = key }, commandTimeout: _storage.CommandTimeout)", span="469-469"];
m4_300 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="467-473"];
m4_302 [cluster="lambda expression", file="SqlServerConnection.cs", label="!result.HasValue", span="470-470"];
m4_304 [cluster="lambda expression", file="SqlServerConnection.cs", label="return result.Value - DateTime.UtcNow;", span="472-472"];
m4_303 [cluster="lambda expression", file="SqlServerConnection.cs", label="return TimeSpan.FromSeconds(-1);", span="470-470"];
m4_305 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="467-473"];
m4_312 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="487-489"];
m4_314 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="487-489"];
m4_323 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="501-501"];
m4_25 [cluster="Unk.Distinct", file="SqlServerConnection.cs", label="Entry Unk.Distinct", span=""];
m4_143 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="250-250"];
m4_144 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="key == null", span="252-252"];
m4_145 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="252-252"];
m4_146 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="keyValuePairs == null", span="253-253"];
m4_147 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(keyValuePairs));", span="253-253"];
m4_148 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="string sql =\r\n$@'';merge [{_storage.SchemaName}].Hash with (holdlock) as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="255-260"];
m4_150 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="250-250"];
m4_85 [cluster="Hangfire.Storage.JobData.JobData()", file="SqlServerConnection.cs", label="Entry Hangfire.Storage.JobData.JobData()", span="21-21"];
m4_7 [cluster="HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", file="SqlServerConnection.cs", label="Entry HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", span="17-17"];
m4_9 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="41-41"];
m4_220 [cluster="Unk.First", file="SqlServerConnection.cs", label="Entry Unk.First", span=""];
m4_24 [cluster="Unk.Select", file="SqlServerConnection.cs", label="Entry Unk.Select", span=""];
m4_274 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="435-435"];
m4_275 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="key == null", span="437-437"];
m4_276 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="437-437"];
m4_277 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="name == null", span="438-438"];
m4_278 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(name));", span="438-438"];
m4_279 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="string query =\r\n$@''select [Value] from [{_storage.SchemaName}].Hash with (readcommittedlock)\r\nwhere [Key] = @key and [Field] = @field''", span="440-442"];
m4_281 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="435-435"];
m4_5 [cluster="HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(params string[])", file="SqlServerConnection.cs", label="Entry HangFire.Web.AspNetBackgroundJobServer.AspNetBackgroundJobServer(params string[])", span="10-10"];
m4_212 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="355-355"];
m4_213 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="key == null", span="357-357"];
m4_214 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="357-357"];
m4_216 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="355-355"];
m4_0 [cluster="MvcSample.HangFireConfig.Start()", file="SqlServerConnection.cs", label="Entry MvcSample.HangFireConfig.Start()", span="16-16"];
m4_1 [cluster="MvcSample.HangFireConfig.Start()", color=green, community=0, file="SqlServerConnection.cs", label="RedisFactory.Db = 3", prediction=1, span="20-20"];
m4_2 [cluster="MvcSample.HangFireConfig.Start()", file="SqlServerConnection.cs", label="_server = new AspNetBackgroundJobServer(''default'')\r\n            {\r\n                MachineName = Environment.MachineName,\r\n                WorkersCount = Environment.ProcessorCount * 2\r\n            }", span="22-26"];
m4_3 [cluster="MvcSample.HangFireConfig.Start()", file="SqlServerConnection.cs", label="GlobalJobFilters.Filters.Add(new PreserveCultureFilter())", span="28-28"];
m4_4 [cluster="MvcSample.HangFireConfig.Start()", file="SqlServerConnection.cs", label="Exit MvcSample.HangFireConfig.Start()", span="16-16"];
m4_207 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m4_108 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<DbConnection>)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<DbConnection>)", span="170-170"];
m4_230 [cluster="Unk.ToList", file="SqlServerConnection.cs", label="Entry Unk.ToList", span=""];
m4_62 [cluster="Unk.Execute", file="SqlServerConnection.cs", label="Entry Unk.Execute", span=""];
m4_29 [cluster="Unk.GetJobQueue", file="SqlServerConnection.cs", label="Entry Unk.GetJobQueue", span=""];
m4_131 [cluster="HashSet<string>.cstr", file="SqlServerConnection.cs", label="Entry HashSet<string>.cstr", span=""];
m4_45 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", span="179-179"];
m4_122 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="224-224"];
m4_123 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="key == null", span="226-226"];
m4_124 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="226-226"];
m4_126 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="224-224"];
m4_83 [cluster="Unk.SingleOrDefault", file="SqlServerConnection.cs", label="Entry Unk.SingleOrDefault", span=""];
m4_285 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="448-448"];
m4_286 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="key == null", span="450-450"];
m4_287 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(nameof(key));", span="450-450"];
m4_288 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="string query = \r\n$@''select count([Id]) from [{_storage.SchemaName}].List with (readcommittedlock)\r\nwhere [Key] = @key''", span="452-454"];
m4_290 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="448-448"];
m4_201 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="342-342"];
m4_202 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="timeOut.Duration() != timeOut", span="344-344"];
m4_203 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', nameof(timeOut));", span="346-346"];
m4_205 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="342-342"];
m4_324 [file="SqlServerConnection.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m4_325 [file="SqlServerConnection.cs", label="System.DateTime", span=""];
m4_326 [file="SqlServerConnection.cs", label="System.TimeSpan", span=""];
m4_327 [file="SqlServerConnection.cs", label=createJobSql, span=""];
m4_328 [file="SqlServerConnection.cs", label=invocationData, span=""];
m4_329 [file="SqlServerConnection.cs", label="System.Collections.Generic.IDictionary<string, string>", span=""];
m4_330 [file="SqlServerConnection.cs", label=string, span=""];
m4_331 [file="SqlServerConnection.cs", label=sql, span=""];
m4_332 [file="SqlServerConnection.cs", label=string, span=""];
m4_333 [file="SqlServerConnection.cs", label=sql, span=""];
m4_334 [file="SqlServerConnection.cs", label=string, span=""];
m4_335 [file="SqlServerConnection.cs", label=string, span=""];
m4_336 [file="SqlServerConnection.cs", label=string, span=""];
m4_337 [file="SqlServerConnection.cs", label=string, span=""];
m4_338 [file="SqlServerConnection.cs", label=string, span=""];
m4_339 [file="SqlServerConnection.cs", label=string, span=""];
m4_340 [file="SqlServerConnection.cs", label=string, span=""];
m4_341 [file="SqlServerConnection.cs", label=double, span=""];
m4_342 [file="SqlServerConnection.cs", label=double, span=""];
m4_343 [file="SqlServerConnection.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", span=""];
m4_344 [file="SqlServerConnection.cs", label=string, span=""];
m4_345 [file="SqlServerConnection.cs", label=sql, span=""];
m4_346 [file="SqlServerConnection.cs", label=string, span=""];
m4_347 [file="SqlServerConnection.cs", label=string, span=""];
m4_348 [file="SqlServerConnection.cs", label=data, span=""];
m4_349 [file="SqlServerConnection.cs", label=string, span=""];
m4_350 [file="SqlServerConnection.cs", label=string, span=""];
m4_351 [file="SqlServerConnection.cs", label="System.TimeSpan", span=""];
m4_352 [file="SqlServerConnection.cs", label=string, span=""];
m4_353 [file="SqlServerConnection.cs", label=string, span=""];
m4_354 [file="SqlServerConnection.cs", label=int, span=""];
m4_355 [file="SqlServerConnection.cs", label=int, span=""];
m4_356 [file="SqlServerConnection.cs", label=query, span=""];
m4_357 [file="SqlServerConnection.cs", label=string, span=""];
m4_358 [file="SqlServerConnection.cs", label=query, span=""];
m4_359 [file="SqlServerConnection.cs", label=string, span=""];
m4_360 [file="SqlServerConnection.cs", label=query, span=""];
m4_361 [file="SqlServerConnection.cs", label=string, span=""];
m4_362 [file="SqlServerConnection.cs", label=query, span=""];
m4_363 [file="SqlServerConnection.cs", label=string, span=""];
m4_364 [file="SqlServerConnection.cs", label=query, span=""];
m4_365 [file="SqlServerConnection.cs", label=string, span=""];
m4_366 [file="SqlServerConnection.cs", label=string, span=""];
m4_367 [file="SqlServerConnection.cs", label=query, span=""];
m4_368 [file="SqlServerConnection.cs", label=string, span=""];
m4_369 [file="SqlServerConnection.cs", label=query, span=""];
m4_370 [file="SqlServerConnection.cs", label=string, span=""];
m4_371 [file="SqlServerConnection.cs", label=query, span=""];
m4_372 [file="SqlServerConnection.cs", label=string, span=""];
m4_373 [file="SqlServerConnection.cs", label=int, span=""];
m4_374 [file="SqlServerConnection.cs", label=int, span=""];
m4_375 [file="SqlServerConnection.cs", label=query, span=""];
m4_376 [file="SqlServerConnection.cs", label=string, span=""];
m4_377 [file="SqlServerConnection.cs", label=query, span=""];
m5_22 [cluster="HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)", span="151-151"];
m5_0 [cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="33-33"];
m5_1 [cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", file="SqlServerDistributedLock.cs", label="_storage = storage", span="35-35"];
m5_2 [cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", file="SqlServerDistributedLock.cs", label="Exit HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="33-33"];
m5_33 [cluster="System.Threading.Thread.Join()", file="SqlServerDistributedLock.cs", label="Entry System.Threading.Thread.Join()", span="0-0"];
m5_12 [cluster="Unk.Info", file="SqlServerDistributedLock.cs", label="Entry Unk.Info", span=""];
m5_28 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="76-76"];
m5_29 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="SqlServerDistributedLock.cs", label="_stopped.Set()", span="78-78"];
m5_30 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="SqlServerDistributedLock.cs", label="thread.Join()", span="79-79"];
m5_31 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="SqlServerDistributedLock.cs", label="Exit HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="76-76"];
m5_13 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="SqlServerDistributedLock.cs", label="Entry HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", span="50-50"];
m5_14 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="SqlServerDistributedLock.cs", label="Logger.Info(''Server watchdog has been started.'')", span="54-54"];
m5_15 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="SqlServerDistributedLock.cs", label=true, span="56-56"];
m5_16 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="SqlServerDistributedLock.cs", label="JobServer.RetryOnException(\r\n                        () => RemoveTimedOutServers(ServerTimeout), \r\n                        _stopped)", span="58-60"];
m5_18 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="SqlServerDistributedLock.cs", label="Logger.Info(''Server watchdog has been stopped.'')", span="68-68"];
m5_17 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="SqlServerDistributedLock.cs", label="_stopped.WaitOne(CheckInterval)", span="62-62"];
m5_19 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="SqlServerDistributedLock.cs", label=Exception, span="70-70"];
m5_20 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="SqlServerDistributedLock.cs", label="Logger.Fatal(''Unexpected exception caught.'', ex)", span="72-72"];
m5_21 [cluster="HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", file="SqlServerDistributedLock.cs", label="Exit HangFire.Server.Components.ServerWatchdog.HangFire.Server.IThreadWrappable.Work()", span="50-50"];
m5_3 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", span="38-38"];
m5_4 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerDistributedLock.cs", label="var connection = _storage.GetConnection()", span="40-40"];
m5_5 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerDistributedLock.cs", label="var serversRemoved = connection.RemoveTimedOutServers(timeout)", span="42-42"];
m5_6 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerDistributedLock.cs", label="serversRemoved != 0", span="43-43"];
m5_7 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerDistributedLock.cs", label="Logger.Info(String.Format(''{0} servers were removed due to timeout'', serversRemoved))", span="45-45"];
m5_8 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerDistributedLock.cs", label="Exit HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", span="38-38"];
m5_32 [cluster="System.Threading.EventWaitHandle.Set()", file="SqlServerDistributedLock.cs", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
m5_24 [cluster="Unk.Fatal", file="SqlServerDistributedLock.cs", label="Entry Unk.Fatal", span=""];
m5_9 [cluster="HangFire.JobStorage.GetConnection()", file="SqlServerDistributedLock.cs", label="Entry HangFire.JobStorage.GetConnection()", span="45-45"];
m5_25 [cluster="lambda expression", file="SqlServerDistributedLock.cs", label="Entry lambda expression", span="59-59"];
m5_26 [cluster="lambda expression", file="SqlServerDistributedLock.cs", label="RemoveTimedOutServers(ServerTimeout)", span="59-59"];
m5_27 [cluster="lambda expression", file="SqlServerDistributedLock.cs", label="Exit lambda expression", span="59-59"];
m5_11 [cluster="string.Format(string, object)", file="SqlServerDistributedLock.cs", label="Entry string.Format(string, object)", span="0-0"];
m5_10 [cluster="HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerDistributedLock.cs", label="Entry HangFire.Storage.IStorageConnection.RemoveTimedOutServers(System.TimeSpan)", span="26-26"];
m5_34 [file="SqlServerDistributedLock.cs", label="HangFire.Server.Components.ServerWatchdog", span=""];
m6_8 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", file="SqlServerJobQueue.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", span="43-43"];
m6_9 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", file="SqlServerJobQueue.cs", label="var options = new BackgroundJobServerOptions\r\n            {\r\n                WorkerCount = workerCount\r\n            }", span="47-50"];
m6_10 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", file="SqlServerJobQueue.cs", label="configuration.UseServer(() => new BackgroundJobServer(options))", span="52-52"];
m6_11 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", file="SqlServerJobQueue.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int)", span="43-43"];
m6_44 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", file="SqlServerJobQueue.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", span="141-141"];
m6_45 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", file="SqlServerJobQueue.cs", label="configuration.UseServer(() => new BackgroundJobServer(options, storage))", span="146-146"];
m6_46 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", file="SqlServerJobQueue.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", span="141-141"];
m6_16 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", file="SqlServerJobQueue.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions)", span="58-58"];
m6_7 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer()", file="SqlServerJobQueue.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer()", span="38-38"];
m6_17 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", file="SqlServerJobQueue.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", span="63-63"];
m6_18 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", file="SqlServerJobQueue.cs", label="var options = new BackgroundJobServerOptions\r\n            {\r\n                Queues = queues\r\n            }", span="67-70"];
m6_19 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", file="SqlServerJobQueue.cs", label="configuration.UseServer(() => new BackgroundJobServer(options))", span="72-72"];
m6_20 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", file="SqlServerJobQueue.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, params string[])", span="63-63"];
m6_43 [cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", file="SqlServerJobQueue.cs", label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", span="69-69"];
m6_47 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="146-146"];
m6_4 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="32-32"];
m6_5 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="new BackgroundJobServer()", span="32-32"];
m6_6 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="32-32"];
m6_14 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="new BackgroundJobServer(options)", span="52-52"];
m6_13 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="52-52"];
m6_15 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="52-52"];
m6_22 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="new BackgroundJobServer(options)", span="72-72"];
m6_21 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="72-72"];
m6_23 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="72-72"];
m6_29 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="new BackgroundJobServer(options)", span="96-96"];
m6_28 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="96-96"];
m6_30 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="96-96"];
m6_35 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="new BackgroundJobServer(options)", span="111-111"];
m6_34 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="111-111"];
m6_36 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="111-111"];
m6_41 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="new BackgroundJobServer(\r\n                new BackgroundJobServerOptions(),\r\n                storage)", span="126-128"];
m6_40 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="126-128"];
m6_42 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="126-128"];
m6_48 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="new BackgroundJobServer(options, storage)", span="146-146"];
m6_49 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="146-146"];
m6_3 [cluster="Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="SqlServerJobQueue.cs", label="Entry Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="82-82"];
m6_12 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="SqlServerJobQueue.cs", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34"];
m6_24 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="SqlServerJobQueue.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", span="85-85"];
m6_25 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="SqlServerJobQueue.cs", label="var options = new BackgroundJobServerOptions\r\n            {\r\n                WorkerCount = workerCount,\r\n                Queues = queues\r\n            }", span="90-94"];
m6_26 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="SqlServerJobQueue.cs", label="configuration.UseServer(() => new BackgroundJobServer(options))", span="96-96"];
m6_27 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="SqlServerJobQueue.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", span="85-85"];
m6_31 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.BackgroundJobServerOptions)", file="SqlServerJobQueue.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.BackgroundJobServerOptions)", span="107-107"];
m6_32 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.BackgroundJobServerOptions)", file="SqlServerJobQueue.cs", label="configuration.UseServer(() => new BackgroundJobServer(options))", span="111-111"];
m6_33 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.BackgroundJobServerOptions)", file="SqlServerJobQueue.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.BackgroundJobServerOptions)", span="107-107"];
m6_0 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", file="SqlServerJobQueue.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", span="30-30"];
m6_1 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", file="SqlServerJobQueue.cs", label="configuration.UseServer(() => new BackgroundJobServer())", span="32-32"];
m6_2 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", file="SqlServerJobQueue.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", span="30-30"];
m6_37 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage)", file="SqlServerJobQueue.cs", label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage)", span="122-122"];
m6_38 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage)", file="SqlServerJobQueue.cs", label="configuration.UseServer(() => new BackgroundJobServer(\r\n                new BackgroundJobServerOptions(),\r\n                storage))", span="126-128"];
m6_39 [cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage)", file="SqlServerJobQueue.cs", label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage)", span="122-122"];
m6_50 [file="SqlServerJobQueue.cs", label=options, span=""];
m6_51 [file="SqlServerJobQueue.cs", label=options, span=""];
m6_52 [file="SqlServerJobQueue.cs", label=options, span=""];
m6_53 [file="SqlServerJobQueue.cs", label="Hangfire.BackgroundJobServerOptions", span=""];
m6_54 [file="SqlServerJobQueue.cs", label="Hangfire.JobStorage", span=""];
m6_55 [file="SqlServerJobQueue.cs", label="Hangfire.JobStorage", span=""];
m6_56 [file="SqlServerJobQueue.cs", label="Hangfire.BackgroundJobServerOptions", span=""];
m7_0 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", span="8-8"];
m7_1 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", span="8-8"];
m7_2 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Entry HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", span="13-13"];
m7_3 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="SqlServerJobQueueMonitoringApi.cs", label="WorkerNumber = workerNumber", span="16-16"];
m7_4 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="SqlServerJobQueueMonitoringApi.cs", label="Exit HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", span="13-13"];
m7_5 [file="SqlServerJobQueueMonitoringApi.cs", label="HangFire.Server.WorkerContext", span=""];
m8_90 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m8_372 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="45-45"];
m8_113 [cluster="long.Parse(string)", file="SqlServerMonitoringApi.cs", label="Entry long.Parse(string)", span="0-0"];
m8_389 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="SqlServerMonitoringApi.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m8_91 [cluster="Hangfire.Storage.Monitoring.ServerDto.ServerDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21"];
m8_390 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m8_28 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67"];
m8_29 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, FailedState.StateName));", span="69-70"];
m8_30 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67"];
m8_142 [cluster="Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18"];
m8_46 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", span="499-499"];
m8_373 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="string jobsSql = \r\n$@'';with cte as \r\n(\r\n  select j.Id, row_number() over (order by j.Id desc) as row_num\r\n  from [{_storage.SchemaName}].Job j with (nolock, forceseek)\r\n  where j.StateName = @stateName\r\n)\r\nselect j.*, s.Reason as StateReason, s.Data as StateData\r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\ninner join cte on cte.Id = j.Id \r\nleft join [{_storage.SchemaName}].State s with (nolock) on j.StateId = s.Id\r\nwhere cte.row_num between @start and @end\r\norder by j.Id desc''", span="506-518"];
m8_374 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count },\r\n                        commandTimeout: _storage.CommandTimeout)\r\n                        .ToList()", span="520-524"];
m8_375 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="return DeserializeJobs(jobs, selector);", span="526-526"];
m8_376 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", span="499-499"];
m8_102 [cluster="Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23"];
m8_237 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="311-311"];
m8_238 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, DeletedState.StateName));", span="313-314"];
m8_239 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="311-311"];
m8_403 [cluster="Unk.ToString", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToString", span=""];
m8_250 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
m8_196 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="258-258"];
m8_197 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''failed''));", span="260-261"];
m8_198 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="258-258"];
m8_345 [cluster="Unk.DeserializeJobs", file="SqlServerMonitoringApi.cs", label="Entry Unk.DeserializeJobs", span=""];
m8_243 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="317-317"];
m8_244 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="string sql = String.Format(@''\r\nset transaction isolation level read committed;\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Enqueued';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Failed';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Processing';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Scheduled';\r\nselect count(Id) from [{0}].Server with (nolock);\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter with (readpast) where [Key] = N'stats:succeeded'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter with (nolock) where [Key] = N'stats:succeeded'\r\n) as s;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter with (readpast) where [Key] = N'stats:deleted'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter with (nolock) where [Key] = N'stats:deleted'\r\n) as s;\r\n\r\nselect count(*) from [{0}].[Set] with (nolock) where [Key] = N'recurring-jobs';\r\n                '', _storage.SchemaName)", span="319-338"];
m8_245 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="var statistics = UseConnection(connection =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql, commandTimeout: _storage.CommandTimeout))\r\n                {\r\n                    stats.Enqueued = multi.ReadSingle<int>();\r\n                    stats.Failed = multi.ReadSingle<int>();\r\n                    stats.Processing = multi.ReadSingle<int>();\r\n                    stats.Scheduled = multi.ReadSingle<int>();\r\n\r\n                    stats.Servers = multi.ReadSingle<int>();\r\n\r\n                    stats.Succeeded = multi.ReadSingleOrDefault<long?>() ?? 0;\r\n                    stats.Deleted = multi.ReadSingleOrDefault<long?>() ?? 0;\r\n\r\n                    stats.Recurring = multi.ReadSingle<int>();\r\n                }\r\n                return stats;\r\n            })", span="340-358"];
m8_246 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="statistics.Queues = _storage.QueueProviders\r\n                .SelectMany(x => x.GetJobQueueMonitoringApi().GetQueues())\r\n                .Count()", span="360-362"];
m8_247 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="return statistics;", span="364-364"];
m8_248 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="317-317"];
m8_181 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="28-28"];
m8_176 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="243-243"];
m8_177 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="var queueApi = GetQueueApi(queue)", span="245-245"];
m8_178 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="246-246"];
m8_179 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => FetchedJobs(connection, fetchedJobIds.Select(x => (long)x).ToArray()));", span="249-249"];
m8_180 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="243-243"];
m8_338 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", span="179-179"];
m8_355 [cluster="Hangfire.SqlServer.Entities.SqlJob.SqlJob()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.Entities.SqlJob.SqlJob()", span="20-20"];
m8_321 [cluster="Unk.ContainsKey", file="SqlServerMonitoringApi.cs", label="Entry Unk.ContainsKey", span=""];
m8_112 [cluster="Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23"];
m8_160 [cluster="Unk.EnqueuedJobs", file="SqlServerMonitoringApi.cs", label="Entry Unk.EnqueuedJobs", span=""];
m8_404 [cluster="Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21"];
m8_269 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22"];
m8_169 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="25-25"];
m8_185 [cluster="Unk.FetchedJobs", file="SqlServerMonitoringApi.cs", label="Entry Unk.FetchedJobs", span=""];
m8_146 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", span="21-21"];
m8_52 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m8_124 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="202-202"];
m8_125 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="var tuples = _storage.QueueProviders\r\n                .Select(x => x.GetJobQueueMonitoringApi())\r\n                .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                .OrderBy(x => x.Queue)\r\n                .ToArray()", span="204-208"];
m8_126 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="210-210"];
m8_127 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label=tuples, span="213-213"];
m8_131 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                {\r\n                    Name = tuple.Queue,\r\n                    Length = counters.EnqueuedCount ?? 0,\r\n                    Fetched = counters.FetchedCount,\r\n                    FirstJobs = firstJobs\r\n                })", span="222-228"];
m8_132 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="return result;", span="231-231"];
m8_128 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="215-215"];
m8_129 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="216-216"];
m8_130 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="var firstJobs = UseConnection(connection => \r\n                    EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray()))", span="219-220"];
m8_133 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="202-202"];
m8_137 [cluster="Unk.ToArray", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToArray", span=""];
m8_299 [cluster="System.DateTime.AddDays(double)", file="SqlServerMonitoringApi.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m8_371 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
m8_0 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="37-37"];
m8_1 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="SqlServerMonitoringApi.cs", label="storage == null", span="39-39"];
m8_2 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(nameof(storage));", span="39-39"];
m8_3 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="SqlServerMonitoringApi.cs", label="_storage = storage", span="41-41"];
m8_4 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="SqlServerMonitoringApi.cs", label="_jobListLimit = jobListLimit", span="42-42"];
m8_5 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="37-37"];
m8_114 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="187-187"];
m8_115 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }));", span="189-199"];
m8_116 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="187-187"];
m8_281 [cluster="Unk.GetTimelineStats", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetTimelineStats", span=""];
m8_229 [cluster="Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21"];
m8_356 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="459-467"];
m8_12 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="47-48"];
m8_13 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetNumberOfJobsByStateName(connection, ScheduledState.StateName)", span="48-48"];
m8_14 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="47-48"];
m8_31 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="69-70"];
m8_32 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="70-70"];
m8_33 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="69-70"];
m8_37 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="75-76"];
m8_38 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetNumberOfJobsByStateName(connection, ProcessingState.StateName)", span="76-76"];
m8_39 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="75-76"];
m8_44 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                })", span="81-91"];
m8_43 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="81-91"];
m8_45 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="81-91"];
m8_47 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="85-91"];
m8_48 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }", span="85-91"];
m8_49 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="85-91"];
m8_58 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                })", span="96-106"];
m8_57 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="96-106"];
m8_59 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="96-106"];
m8_60 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="100-106"];
m8_61 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }", span="100-106"];
m8_62 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="100-106"];
m8_67 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="111-112"];
m8_68 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetTimelineStats(connection, ''succeeded'')", span="112-112"];
m8_69 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="111-112"];
m8_74 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="117-118"];
m8_75 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetTimelineStats(connection, ''failed'')", span="118-118"];
m8_76 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="117-118"];
m8_81 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="123-146"];
m8_82 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var servers = connection.Query<Entities.Server>(\r\n                    $@''select * from [{_storage.SchemaName}].Server with (nolock)'', commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()", span="125-127"];
m8_83 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var result = new List<ServerDto>()", span="129-129"];
m8_84 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label=servers, span="132-132"];
m8_86 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt ?? DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="135-142"];
m8_87 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return result;", span="145-145"];
m8_85 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="134-134"];
m8_88 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="123-146"];
m8_97 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", span="151-165"];
m8_96 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="151-165"];
m8_98 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="151-165"];
m8_99 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="156-165"];
m8_100 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", span="156-165"];
m8_101 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="156-165"];
m8_107 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="170-184"];
m8_106 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="170-184"];
m8_108 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="170-184"];
m8_109 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="175-184"];
m8_110 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", span="175-184"];
m8_111 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="175-184"];
m8_118 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                })", span="189-199"];
m8_117 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="189-199"];
m8_119 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="189-199"];
m8_120 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="194-199"];
m8_121 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="194-199"];
m8_122 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="194-199"];
m8_143 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="205-205"];
m8_147 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="206-206"];
m8_151 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="206-206"];
m8_154 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="207-207"];
m8_158 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray())", span="220-220"];
m8_157 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="219-220"];
m8_144 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.GetJobQueueMonitoringApi()", span="205-205"];
m8_145 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="205-205"];
m8_148 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.GetQueues()", span="206-206"];
m8_149 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="206-206"];
m8_152 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new { Monitoring = monitoring, Queue = queue }", span="206-206"];
m8_153 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="206-206"];
m8_155 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Queue", span="207-207"];
m8_156 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="207-207"];
m8_159 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="219-220"];
m8_161 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="220-220"];
m8_162 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(long)x", span="220-220"];
m8_163 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="220-220"];
m8_171 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray())", span="240-240"];
m8_170 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="240-240"];
m8_172 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="240-240"];
m8_173 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="240-240"];
m8_174 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(long)x", span="240-240"];
m8_175 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="240-240"];
m8_183 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="FetchedJobs(connection, fetchedJobIds.Select(x => (long)x).ToArray())", span="249-249"];
m8_182 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="249-249"];
m8_184 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="249-249"];
m8_186 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="249-249"];
m8_187 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(long)x", span="249-249"];
m8_188 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="249-249"];
m8_192 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="254-255"];
m8_193 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetHourlyTimelineStats(connection, ''succeeded'')", span="255-255"];
m8_194 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="254-255"];
m8_199 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="260-261"];
m8_200 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetHourlyTimelineStats(connection, ''failed'')", span="261-261"];
m8_201 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="260-261"];
m8_207 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var multi = connection.QueryMultiple(sql, new { id = jobId }, commandTimeout: _storage.CommandTimeout)", span="273-273"];
m8_205 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="266-302"];
m8_206 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc''", span="268-271"];
m8_208 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="275-275"];
m8_211 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="278-278"];
m8_212 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="279-291"];
m8_209 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="job == null", span="276-276"];
m8_213 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="293-300"];
m8_210 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return null;", span="276-276"];
m8_220 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="278-278"];
m8_223 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="278-278"];
m8_226 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="282-290"];
m8_214 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="266-302"];
m8_221 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Name", span="278-278"];
m8_222 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="278-278"];
m8_224 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Value", span="278-278"];
m8_225 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="278-278"];
m8_227 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            }", span="282-290"];
m8_228 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="282-290"];
m8_234 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="307-308"];
m8_235 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", span="308-308"];
m8_236 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="307-308"];
m8_240 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="313-314"];
m8_241 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="314-314"];
m8_242 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="313-314"];
m8_254 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var multi = connection.QueryMultiple(sql, commandTimeout: _storage.CommandTimeout)", span="343-343"];
m8_252 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="340-358"];
m8_266 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="361-361"];
m8_253 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var stats = new StatisticsDto()", span="342-342"];
m8_255 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Enqueued = multi.ReadSingle<int>()", span="345-345"];
m8_256 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Failed = multi.ReadSingle<int>()", span="346-346"];
m8_257 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Processing = multi.ReadSingle<int>()", span="347-347"];
m8_258 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Scheduled = multi.ReadSingle<int>()", span="348-348"];
m8_259 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Servers = multi.ReadSingle<int>()", span="350-350"];
m8_260 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Succeeded = multi.ReadSingleOrDefault<long?>() ?? 0", span="352-352"];
m8_261 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Deleted = multi.ReadSingleOrDefault<long?>() ?? 0", span="353-353"];
m8_262 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Recurring = multi.ReadSingle<int>()", span="355-355"];
m8_263 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return stats;", span="357-357"];
m8_264 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="340-358"];
m8_267 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.GetJobQueueMonitoringApi().GetQueues()", span="361-361"];
m8_268 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="361-361"];
m8_283 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="$''stats:{type}:{x.ToString(''yyyy-MM-dd-HH'')}''", span="377-377"];
m8_282 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="377-377"];
m8_286 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="377-377"];
m8_284 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="377-377"];
m8_287 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label=x, span="377-377"];
m8_288 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="377-377"];
m8_301 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="$''stats:{type}:{x.ToString(''yyyy-MM-dd'')}''", span="392-392"];
m8_300 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="392-392"];
m8_303 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="392-392"];
m8_302 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="392-392"];
m8_304 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label=x, span="392-392"];
m8_305 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="392-392"];
m8_325 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="409-409"];
m8_328 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="409-409"];
m8_326 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(string)x.Key", span="409-409"];
m8_327 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="409-409"];
m8_329 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(long)x.Count", span="409-409"];
m8_330 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="409-409"];
m8_346 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="451-451"];
m8_349 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="451-451"];
m8_353 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId }", span="454-454"];
m8_352 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="454-454"];
m8_347 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Id", span="451-451"];
m8_348 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="451-451"];
m8_350 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label=x, span="451-451"];
m8_351 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="451-451"];
m8_354 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="454-454"];
m8_357 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="459-467"];
m8_358 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="459-467"];
m8_92 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m8_89 [cluster="Unk.ToList", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToList", span=""];
m8_324 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
m8_23 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="59-59"];
m8_24 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="SqlServerMonitoringApi.cs", label="var queueApi = GetQueueApi(queue)", span="61-61"];
m8_25 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="SqlServerMonitoringApi.cs", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="62-62"];
m8_26 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="SqlServerMonitoringApi.cs", label="return counters.FetchedCount ?? 0;", span="64-64"];
m8_27 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="59-59"];
m8_392 [cluster="Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22"];
m8_393 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", span="557-557"];
m8_394 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlServerMonitoringApi.cs", label="string fetchedJobsSql = \r\n$@''select j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\nleft join [{_storage.SchemaName}].State s with (nolock) on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="559-563"];
m8_395 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlServerMonitoringApi.cs", label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToList()", span="565-569"];
m8_396 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlServerMonitoringApi.cs", label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="571-571"];
m8_397 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlServerMonitoringApi.cs", label=jobs, span="574-574"];
m8_398 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlServerMonitoringApi.cs", label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                    }))", span="576-582"];
m8_399 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlServerMonitoringApi.cs", label="return new JobList<FetchedJobDto>(result);", span="585-585"];
m8_400 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", span="557-557"];
m8_63 [cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23"];
m8_391 [cluster="long.ToString()", file="SqlServerMonitoringApi.cs", label="Entry long.ToString()", span="0-0"];
m8_285 [cluster="System.DateTime.ToString(string)", file="SqlServerMonitoringApi.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m8_103 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168"];
m8_104 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }));", span="170-184"];
m8_105 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168"];
m8_141 [cluster="Unk.UseConnection", file="SqlServerMonitoringApi.cs", label="Entry Unk.UseConnection", span=""];
m8_138 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="SqlServerMonitoringApi.cs", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
m8_22 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="30-30"];
m8_195 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", span="367-367"];
m8_270 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="var endDate = DateTime.UtcNow", span="369-369"];
m8_277 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd-HH'')}'', x => x)", span="377-377"];
m8_278 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="return GetTimelineStats(connection, keyMaps);", span="379-379"];
m8_271 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="var dates = new List<DateTime>()", span="370-370"];
m8_274 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="dates.Add(endDate)", span="373-373"];
m8_275 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="endDate = endDate.AddHours(-1)", span="374-374"];
m8_272 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="var i = 0", span="371-371"];
m8_273 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="i < 24", span="371-371"];
m8_276 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="i++", span="371-371"];
m8_279 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", span="367-367"];
m8_123 [cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7"];
m8_402 [cluster="KeyValuePair<string, FetchedJobDto>.cstr", file="SqlServerMonitoringApi.cs", label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span=""];
m8_202 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264"];
m8_203 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection =>\r\n            {\r\n                string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }, commandTimeout: _storage.CommandTimeout))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="266-302"];
m8_204 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264"];
m8_320 [cluster="Unk.Query", file="SqlServerMonitoringApi.cs", label="Entry Unk.Query", span=""];
m8_8 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45"];
m8_9 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ScheduledState.StateName));", span="47-48"];
m8_10 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45"];
m8_7 [cluster="Unk.nameof", file="SqlServerMonitoringApi.cs", label="Entry Unk.nameof", span=""];
m8_230 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<TKey, TValue>.SafeDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<TKey, TValue>.SafeDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="594-594"];
m8_405 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<TKey, TValue>.SafeDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<TKey, TValue>.SafeDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="594-594"];
m8_322 [cluster="Unk.Add", file="SqlServerMonitoringApi.cs", label="Entry Unk.Add", span=""];
m8_70 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382"];
m8_289 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="var endDate = DateTime.UtcNow.Date", span="384-384"];
m8_296 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd'')}'', x => x)", span="392-392"];
m8_297 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="return GetTimelineStats(connection, keyMaps);", span="394-394"];
m8_290 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="var dates = new List<DateTime>()", span="385-385"];
m8_293 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="dates.Add(endDate)", span="388-388"];
m8_294 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="endDate = endDate.AddDays(-1)", span="389-389"];
m8_291 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="var i = 0", span="386-386"];
m8_292 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="i < 7", span="386-386"];
m8_295 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="i++", span="386-386"];
m8_298 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382"];
m8_11 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434"];
m8_337 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434"];
m8_231 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305"];
m8_232 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="307-308"];
m8_233 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305"];
m8_359 [cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23"];
m8_51 [cluster="string.Equals(string, System.StringComparison)", file="SqlServerMonitoringApi.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m8_401 [cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", file="SqlServerMonitoringApi.cs", label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span=""];
m8_280 [cluster="System.DateTime.AddHours(double)", file="SqlServerMonitoringApi.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m8_93 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149"];
m8_94 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="151-165"];
m8_95 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149"];
m8_364 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484"];
m8_365 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="486-486"];
m8_366 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="data.Arguments = arguments", span="487-487"];
m8_367 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="return data.Deserialize();", span="491-491"];
m8_368 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label=JobLoadException, span="493-493"];
m8_369 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="return null;", span="495-495"];
m8_370 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484"];
m8_77 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="121-121"];
m8_78 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    $@''select * from [{_storage.SchemaName}].Server with (nolock)'', commandTimeout: _storage.CommandTimeout)\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                // ReSharper disable once LoopCanBeConvertedToQuery\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt ?? DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="123-146"];
m8_79 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="121-121"];
m8_215 [cluster="Unk.QueryMultiple", file="SqlServerMonitoringApi.cs", label="Entry Unk.QueryMultiple", span=""];
m8_21 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426"];
m8_331 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="SqlServerMonitoringApi.cs", label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="428-428"];
m8_332 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="SqlServerMonitoringApi.cs", label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="429-429"];
m8_333 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="SqlServerMonitoringApi.cs", label="return monitoringApi;", span="431-431"];
m8_334 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426"];
m8_40 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79"];
m8_41 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }));", span="81-91"];
m8_42 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79"];
m8_54 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94"];
m8_55 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }));", span="96-106"];
m8_56 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94"];
m8_218 [cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22"];
m8_71 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115"];
m8_72 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="117-118"];
m8_73 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115"];
m8_189 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252"];
m8_190 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="254-255"];
m8_191 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252"];
m8_15 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470"];
m8_360 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="var sqlQuery = _jobListLimit.HasValue\r\n                ? $@''select count(j.Id) from (select top (@limit) Id from [{_storage.SchemaName}].Job with (nolock) where StateName = @state) as j''\r\n                : $@''select count(Id) from [{_storage.SchemaName}].Job with (nolock) where StateName = @state''", span="472-474"];
m8_361 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="var count = connection.ExecuteScalar<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName, limit = _jobListLimit },\r\n                 commandTimeout: _storage.CommandTimeout)", span="476-479"];
m8_362 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="return count;", span="481-481"];
m8_363 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470"];
m8_335 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m8_135 [cluster="Unk.SelectMany", file="SqlServerMonitoringApi.cs", label="Entry Unk.SelectMany", span=""];
m8_217 [cluster="Unk.ToDictionary", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToDictionary", span=""];
m8_377 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", span="529-529"];
m8_378 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="533-533"];
m8_379 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label=jobs, span="536-536"];
m8_384 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="547-547"];
m8_385 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="550-551"];
m8_386 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="return new JobList<TDto>(result);", span="554-554"];
m8_380 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var dto = default(TDto)", span="538-538"];
m8_381 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="job.InvocationData != null", span="540-540"];
m8_382 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var deserializedData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="542-542"];
m8_383 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var stateData = deserializedData != null\r\n                        ? new SafeDictionary<string, string>(deserializedData, StringComparer.OrdinalIgnoreCase)\r\n                        : null", span="543-545"];
m8_387 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", span="529-529"];
m8_249 [cluster="string.Format(string, object)", file="SqlServerMonitoringApi.cs", label="Entry string.Format(string, object)", span="0-0"];
m8_80 [cluster="Unk.>", file="SqlServerMonitoringApi.cs", label="Entry Unk.>", span=""];
m8_139 [cluster="Unk.GetEnqueuedJobIds", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetEnqueuedJobIds", span=""];
m8_53 [cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", span="84-84"];
m8_136 [cluster="Unk.OrderBy", file="SqlServerMonitoringApi.cs", label="Entry Unk.OrderBy", span=""];
m8_140 [cluster="Unk.GetEnqueuedAndFetchedCount", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetEnqueuedAndFetchedCount", span=""];
m8_16 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51"];
m8_17 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlServerMonitoringApi.cs", label="var queueApi = GetQueueApi(queue)", span="53-53"];
m8_18 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlServerMonitoringApi.cs", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="54-54"];
m8_19 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlServerMonitoringApi.cs", label="return counters.EnqueuedCount ?? 0;", span="56-56"];
m8_20 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51"];
m8_339 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439"];
m8_340 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlServerMonitoringApi.cs", label="string enqueuedJobsSql = \r\n$@''select j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\nleft join [{_storage.SchemaName}].State s with (nolock) on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="441-445"];
m8_341 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlServerMonitoringApi.cs", label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => x.Id, x => x)", span="447-451"];
m8_342 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlServerMonitoringApi.cs", label="var sortedSqlJobs = jobIds\r\n                .Select(jobId => jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId })\r\n                .ToList()", span="453-455"];
m8_343 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlServerMonitoringApi.cs", label="return DeserializeJobs(\r\n                sortedSqlJobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="457-467"];
m8_344 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439"];
m8_150 [cluster="Unk.GetQueues", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetQueues", span=""];
m8_306 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397"];
m8_307 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="string sqlQuery =\r\n$@''select [Key], [Value] as [Count] from [{_storage.SchemaName}].AggregatedCounter with (nolock)\r\nwhere [Key] in @keys''", span="401-403"];
m8_308 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="405-409"];
m8_309 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="keyMaps.Keys", span="411-411"];
m8_314 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="i < keyMaps.Count", span="417-417"];
m8_315 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="419-419"];
m8_316 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="result.Add(keyMaps.ElementAt(i).Value, value)", span="420-420"];
m8_310 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="!valuesMap.ContainsKey(key)", span="413-413"];
m8_311 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="valuesMap.Add(key, 0)", span="413-413"];
m8_312 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="var result = new Dictionary<DateTime, long>()", span="416-416"];
m8_313 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="var i = 0", span="417-417"];
m8_318 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="return result;", span="423-423"];
m8_317 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="i++", span="417-417"];
m8_319 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397"];
m8_64 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109"];
m8_65 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="111-112"];
m8_66 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109"];
m8_323 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m8_265 [cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18"];
m8_50 [cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23"];
m8_251 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m8_134 [cluster="Unk.Select", file="SqlServerMonitoringApi.cs", label="Entry Unk.Select", span=""];
m8_388 [cluster="System.Collections.Generic.List<T>.List(int)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m8_164 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234"];
m8_165 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="var queueApi = GetQueueApi(queue)", span="236-236"];
m8_166 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="237-237"];
m8_167 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray()));", span="240-240"];
m8_168 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234"];
m8_216 [cluster="Unk.SingleOrDefault", file="SqlServerMonitoringApi.cs", label="Entry Unk.SingleOrDefault", span=""];
m8_34 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73"];
m8_35 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="75-76"];
m8_36 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73"];
m8_219 [cluster="Unk.DeserializeJob", file="SqlServerMonitoringApi.cs", label="Entry Unk.DeserializeJob", span=""];
m8_406 [file="SqlServerMonitoringApi.cs", label="Hangfire.SqlServer.SqlServerMonitoringApi", span=""];
m8_407 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m8_408 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m8_409 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m8_410 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m8_411 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m8_412 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m8_413 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m8_414 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m8_415 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m8_416 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m8_417 [file="SqlServerMonitoringApi.cs", label=enqueuedJobIds, span=""];
m8_418 [file="SqlServerMonitoringApi.cs", label=enqueuedJobIds, span=""];
m8_419 [file="SqlServerMonitoringApi.cs", label=fetchedJobIds, span=""];
m8_420 [file="SqlServerMonitoringApi.cs", label=string, span=""];
m8_421 [file="SqlServerMonitoringApi.cs", label=sql, span=""];
m8_422 [file="SqlServerMonitoringApi.cs", label=string, span=""];
m8_423 [file="SqlServerMonitoringApi.cs", label=string, span=""];
m8_424 [file="SqlServerMonitoringApi.cs", label=jobs, span=""];
m9_163 [cluster="Metric.cstr", file="SqlServerStorage.cs", label="Entry Metric.cstr", span=""];
m9_34 [cluster="Hangfire.SqlServer.SqlServerStorage.GetComponents()", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetComponents()", span="114-114"];
m9_94 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="232-232"];
m9_117 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="var connection = _existingConnection ?? new SqlConnection(_connectionString)", span="234-234"];
m9_118 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="connection.State == ConnectionState.Closed", span="236-236"];
m9_119 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="connection.Open()", span="238-238"];
m9_120 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="return connection;", span="241-241"];
m9_121 [cluster="Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="232-232"];
m9_20 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(DbConnection, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="options == null", span="89-89"];
m9_21 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(DbConnection, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(nameof(options));", span="89-89"];
m9_22 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(DbConnection, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="_existingConnection = existingConnection", span="91-91"];
m9_23 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(DbConnection, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="_options = options", span="92-92"];
m9_14 [cluster="Hangfire.IBackgroundJobClient.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", file="SqlServerStorage.cs", label="Entry Hangfire.IBackgroundJobClient.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="54-54"];
m9_133 [cluster="Hangfire.SqlServer.SqlServerStorage.Initialize()", file="SqlServerStorage.cs", label="_options.PrepareSchemaIfNecessary", span="259-259"];
m9_135 [cluster="Hangfire.SqlServer.SqlServerStorage.Initialize()", file="SqlServerStorage.cs", label="InitializeQueueProviders()", span="267-267"];
m9_136 [cluster="Hangfire.SqlServer.SqlServerStorage.Initialize()", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.Initialize()", span="257-257"];
m9_124 [cluster="Hangfire.SqlServer.SqlServerStorage.IsExistingConnection(IDbConnection)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.IsExistingConnection(IDbConnection)", span="244-244"];
m9_125 [cluster="Hangfire.SqlServer.SqlServerStorage.IsExistingConnection(IDbConnection)", file="SqlServerStorage.cs", label="return connection != null && ReferenceEquals(connection, _existingConnection);", span="246-246"];
m9_126 [cluster="Hangfire.SqlServer.SqlServerStorage.IsExistingConnection(IDbConnection)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.IsExistingConnection(IDbConnection)", span="244-244"];
m9_107 [cluster="Unk.UseConnection", file="SqlServerStorage.cs", label="Entry Unk.UseConnection", span=""];
m9_128 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", span="249-249"];
m9_129 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", file="SqlServerStorage.cs", label="connection != null && !IsExistingConnection(connection)", span="251-251"];
m9_130 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", file="SqlServerStorage.cs", label="connection.Dispose()", span="253-253"];
m9_131 [cluster="Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.ReleaseConnection(IDbConnection)", span="249-249"];
m9_146 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.PersistentJobQueueProviderCollection(Hangfire.SqlServer.IPersistentJobQueueProvider)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.PersistentJobQueueProviderCollection(Hangfire.SqlServer.IPersistentJobQueueProvider)", span="31-31"];
m9_67 [cluster="System.Text.StringBuilder.Append(string)", file="SqlServerStorage.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m9_63 [cluster="Hangfire.BackgroundJob.ContinueWith(string, System.Linq.Expressions.Expression<System.Action>, Hangfire.Continuations.JobContinuationOptions)", file="SqlServerStorage.cs", label="Exit Hangfire.BackgroundJob.ContinueWith(string, System.Linq.Expressions.Expression<System.Action>, Hangfire.Continuations.JobContinuationOptions)", span="207-207"];
m9_17 [cluster="Hangfire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", file="SqlServerStorage.cs", label="return client.Schedule(methodCall, delay);", span="95-95"];
m9_18 [cluster="Hangfire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", file="SqlServerStorage.cs", label="Exit Hangfire.BackgroundJob.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", span="92-92"];
m9_19 [cluster="Hangfire.IBackgroundJobClient.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", file="SqlServerStorage.cs", label="Entry Hangfire.IBackgroundJobClient.Schedule(System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", span="69-69"];
m9_24 [cluster="Hangfire.IBackgroundJobClient.Schedule(System.Linq.Expressions.Expression<System.Action>, System.DateTimeOffset)", file="SqlServerStorage.cs", label="Entry Hangfire.IBackgroundJobClient.Schedule(System.Linq.Expressions.Expression<System.Action>, System.DateTimeOffset)", span="84-84"];
m9_25 [cluster="Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="SqlServerStorage.cs", label="Entry Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="121-121"];
m9_35 [cluster="Hangfire.BackgroundJob.Delete(string)", file="SqlServerStorage.cs", label="Entry Hangfire.BackgroundJob.Delete(string)", span="150-150"];
m9_36 [cluster="Hangfire.BackgroundJob.Delete(string)", file="SqlServerStorage.cs", label="var client = ClientFactory()", span="152-152"];
m9_37 [cluster="Hangfire.BackgroundJob.Delete(string)", file="SqlServerStorage.cs", label="return client.Delete(jobId);", span="153-153"];
m9_141 [cluster="Hangfire.SqlServer.SqlServerObjectsInstaller.Install(DbConnection, string)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerObjectsInstaller.Install(DbConnection, string)", span="38-38"];
m9_155 [cluster="Hangfire.Dashboard.Metric.Metric(string)", file="SqlServerStorage.cs", label="Entry Hangfire.Dashboard.Metric.Metric(string)", span="20-20"];
m9_45 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.ToString()", span="127-127"];
m9_46 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="string canNotParseMessage = ''<Connection string can not be parsed>''", span="129-129"];
m9_47 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="var parts = _connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)\r\n                    .Select(x => x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))\r\n                    .Select(x => new { Key = x[0].Trim(), Value = x[1].Trim() })\r\n                    .ToDictionary(x => x.Key, x => x.Value, StringComparer.OrdinalIgnoreCase)", span="133-136"];
m9_48 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="var builder = new StringBuilder()", span="138-138"];
m9_59 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="return canNotParseMessage;", span="166-166"];
m9_60 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.ToString()", span="127-127"];
m9_61 [cluster="string.Split(char[], System.StringSplitOptions)", color=green, community=0, file="SqlServerStorage.cs", label="Entry string.Split(char[], System.StringSplitOptions)", prediction=2, span="0-0"];
m9_62 [cluster="Unk.Select", color=green, community=0, file="SqlServerStorage.cs", label="Entry Unk.Select", prediction=3, span=""];
m9_66 [cluster="Unk.Append", file="SqlServerStorage.cs", label="Entry Unk.Append", span=""];
m9_161 [cluster="Unk.>", file="SqlServerStorage.cs", label="Entry Unk.>", span=""];
m9_38 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="54-54"];
m9_64 [cluster="Hangfire.IBackgroundJobClient.ContinueWith(string, System.Linq.Expressions.Expression<System.Action>, Hangfire.Continuations.JobContinuationOptions)", file="SqlServerStorage.cs", label="Entry Hangfire.IBackgroundJobClient.ContinueWith(string, System.Linq.Expressions.Expression<System.Action>, Hangfire.Continuations.JobContinuationOptions)", span="130-130"];
m9_95 [cluster="System.Func<T, TResult>.Invoke(T)", file="SqlServerStorage.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m9_30 [cluster="Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.DateTimeOffset)", file="SqlServerStorage.cs", label="Entry Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.DateTimeOffset)", span="136-136"];
m9_31 [cluster="Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.DateTimeOffset)", file="SqlServerStorage.cs", label="var client = ClientFactory()", span="138-138"];
m9_32 [cluster="Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.DateTimeOffset)", file="SqlServerStorage.cs", label="return client.Schedule(methodCall, enqueueAt);", span="139-139"];
m9_96 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<DbConnection, DbTransaction>)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<DbConnection, DbTransaction>)", span="194-194"];
m9_98 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<DbConnection, DbTransaction>)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseTransaction(System.Action<DbConnection, DbTransaction>)", span="194-194"];
m9_104 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="SqlServerStorage.cs", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
m9_40 [cluster="Hangfire.BackgroundJob.Delete(string, string)", file="SqlServerStorage.cs", label="Entry Hangfire.BackgroundJob.Delete(string, string)", span="166-166"];
m9_41 [cluster="Hangfire.BackgroundJob.Delete(string, string)", file="SqlServerStorage.cs", label="var client = ClientFactory()", span="168-168"];
m9_42 [cluster="Hangfire.BackgroundJob.Delete(string, string)", file="SqlServerStorage.cs", label="return client.Delete(jobId, fromState);", span="169-169"];
m9_43 [cluster="Hangfire.BackgroundJob.Delete(string, string)", file="SqlServerStorage.cs", label="Exit Hangfire.BackgroundJob.Delete(string, string)", span="166-166"];
m9_123 [cluster="Unk.Open", file="SqlServerStorage.cs", label="Entry Unk.Open", span=""];
m9_74 [cluster="Unk.Trim", file="SqlServerStorage.cs", label="Entry Unk.Trim", span=""];
m9_127 [cluster="Unk.ReferenceEquals", file="SqlServerStorage.cs", label="Entry Unk.ReferenceEquals", span=""];
m9_44 [cluster="Hangfire.Logging.ILog.Info(string)", file="SqlServerStorage.cs", label="Entry Hangfire.Logging.ILog.Info(string)", span="204-204"];
m9_115 [cluster="Unk.func", file="SqlServerStorage.cs", label="Entry Unk.func", span=""];
m9_122 [cluster="SqlConnection.cstr", file="SqlServerStorage.cs", label="Entry SqlConnection.cstr", span=""];
m9_9 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Initialize()", span="68-68"];
m9_12 [cluster="Hangfire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", file="SqlServerStorage.cs", label="return client.Enqueue(methodCall);", span="81-81"];
m9_89 [cluster="System.Action<T>.Invoke(T)", file="SqlServerStorage.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m9_0 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="43-43"];
m9_1 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="43-43"];
m9_164 [cluster="Unk.ToString", file="SqlServerStorage.cs", label="Entry Unk.ToString", span=""];
m9_49 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="new[] { ''Data Source'', ''Server'', ''Address'', ''Addr'', ''Network Address'' }", span="140-140"];
m9_145 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="26-26"];
m9_54 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="new[] { ''Database'', ''Initial Catalog'' }", span="151-151"];
m9_132 [cluster="Unk.Dispose", file="SqlServerStorage.cs", label="Entry Unk.Dispose", span=""];
m9_39 [cluster="Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.CountersAggregator.CountersAggregator(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="39-39"];
m9_29 [cluster="Hangfire.IBackgroundJobClient.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="SqlServerStorage.cs", label="Entry Hangfire.IBackgroundJobClient.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="104-104"];
m9_99 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<DbConnection, DbTransaction, T>, IsolationLevel?)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<DbConnection, DbTransaction, T>, IsolationLevel?)", span="203-203"];
m9_106 [cluster="Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<DbConnection, DbTransaction, T>, IsolationLevel?)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseTransaction<T>(System.Func<DbConnection, DbTransaction, T>, IsolationLevel?)", span="203-203"];
m9_55 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="parts.ContainsKey(alias)", span="153-153"];
m9_56 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.Append(parts[alias])", span="155-155"];
m9_57 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="return builder.Length != 0\r\n                    ? $''SQL Server: {builder}''\r\n                    : canNotParseMessage;", span="160-162"];
m9_58 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label=Exception, span="164-164"];
m9_33 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", span="35-35"];
m9_171 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="348-359"];
m9_68 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="134-134"];
m9_71 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="135-135"];
m9_75 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="136-136"];
m9_78 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="136-136"];
m9_69 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", span="134-134"];
m9_70 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="134-134"];
m9_72 [cluster="lambda expression", file="SqlServerStorage.cs", label="new { Key = x[0].Trim(), Value = x[1].Trim() }", span="135-135"];
m9_73 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="135-135"];
m9_76 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Key", span="136-136"];
m9_77 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="136-136"];
m9_79 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.Value", span="136-136"];
m9_80 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="136-136"];
m9_86 [cluster="lambda expression", file="SqlServerStorage.cs", label="action(connection)", span="174-174"];
m9_85 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="172-176"];
m9_87 [cluster="lambda expression", file="SqlServerStorage.cs", label="return true;", span="175-175"];
m9_88 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="172-176"];
m9_101 [cluster="lambda expression", file="SqlServerStorage.cs", label="action(connection, transaction)", span="198-198"];
m9_100 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="196-200"];
m9_102 [cluster="lambda expression", file="SqlServerStorage.cs", label="return true;", span="199-199"];
m9_103 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="196-200"];
m9_109 [cluster="lambda expression", file="SqlServerStorage.cs", label="var transaction = connection.BeginTransaction(isolationLevel ?? IsolationLevel.ReadCommitted)", span="221-221"];
m9_110 [cluster="lambda expression", file="SqlServerStorage.cs", label="var result = func(connection, transaction)", span="223-223"];
m9_108 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="219-228"];
m9_111 [cluster="lambda expression", file="SqlServerStorage.cs", label="transaction.Commit()", span="224-224"];
m9_112 [cluster="lambda expression", file="SqlServerStorage.cs", label="return result;", span="226-226"];
m9_113 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="219-228"];
m9_138 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="261-264"];
m9_139 [cluster="lambda expression", file="SqlServerStorage.cs", label="SqlServerObjectsInstaller.Install(connection, _options.SchemaName)", span="263-263"];
m9_140 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="261-264"];
m9_149 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="321-338"];
m9_150 [cluster="lambda expression", file="SqlServerStorage.cs", label="var sqlStorage = page.Storage as SqlServerStorage", span="323-323"];
m9_151 [cluster="lambda expression", file="SqlServerStorage.cs", label="sqlStorage == null", span="324-324"];
m9_152 [cluster="lambda expression", file="SqlServerStorage.cs", label="return new Metric(''???'');", span="324-324"];
m9_154 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="321-338"];
m9_156 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="326-337"];
m9_157 [cluster="lambda expression", file="SqlServerStorage.cs", label="var sqlQuery = @''\r\nselect count(*) from sys.sysprocesses\r\nwhere dbid = db_id(@name) and status != 'background' and status != 'sleeping'''", span="328-330"];
m9_158 [cluster="lambda expression", file="SqlServerStorage.cs", label="var value = connection\r\n                        .Query<int>(sqlQuery, new { name = connection.Database })\r\n                        .Single()", span="332-334"];
m9_159 [cluster="lambda expression", file="SqlServerStorage.cs", label="return new Metric(value.ToString(''N0''));", span="336-336"];
m9_160 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="326-337"];
m9_165 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="343-360"];
m9_166 [cluster="lambda expression", file="SqlServerStorage.cs", label="var sqlStorage = page.Storage as SqlServerStorage", span="345-345"];
m9_167 [cluster="lambda expression", file="SqlServerStorage.cs", label="sqlStorage == null", span="346-346"];
m9_168 [cluster="lambda expression", file="SqlServerStorage.cs", label="return new Metric(''???'');", span="346-346"];
m9_170 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="343-360"];
m9_172 [cluster="lambda expression", file="SqlServerStorage.cs", label="var sqlQuery = @''\r\nselect count(*) from sys.sysprocesses\r\nwhere dbid = db_id(@name) and status != 'background'''", span="350-352"];
m9_173 [cluster="lambda expression", file="SqlServerStorage.cs", label="var value = connection\r\n                        .Query<int>(sqlQuery, new { name = connection.Database })\r\n                        .Single()", span="354-356"];
m9_174 [cluster="lambda expression", file="SqlServerStorage.cs", label="return new Metric(value.ToString(''N0''));", span="358-358"];
m9_175 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="348-359"];
m9_114 [cluster="Unk.BeginTransaction", file="SqlServerStorage.cs", label="Entry Unk.BeginTransaction", span=""];
m9_26 [cluster="Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="SqlServerStorage.cs", label="var client = ClientFactory()", span="123-123"];
m9_27 [cluster="Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="SqlServerStorage.cs", label="return client.Schedule(methodCall, delay);", span="124-124"];
m9_28 [cluster="Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="SqlServerStorage.cs", label="Exit Hangfire.BackgroundJob.Schedule<T>(System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="121-121"];
m9_137 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", span="270-270"];
m9_142 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", file="SqlServerStorage.cs", label="var defaultQueueProvider = new SqlServerJobQueueProvider(this, _options)", span="272-272"];
m9_143 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", file="SqlServerStorage.cs", label="QueueProviders = new PersistentJobQueueProviderCollection(defaultQueueProvider)", span="273-273"];
m9_144 [cluster="Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.InitializeQueueProviders()", span="270-270"];
m9_50 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="parts.ContainsKey(alias)", span="142-142"];
m9_52 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", color=green, community=0, file="SqlServerStorage.cs", label="builder.Length != 0", prediction=4, span="149-149"];
m9_51 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.Append(parts[alias])", span="144-144"];
m9_53 [cluster="Hangfire.SqlServer.SqlServerStorage.ToString()", file="SqlServerStorage.cs", label="builder.Append(''@'')", span="149-149"];
m9_15 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(DbConnection)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(DbConnection)", span="76-76"];
m9_16 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(DbConnection)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(DbConnection)", span="76-76"];
m9_2 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", span="60-60"];
m9_3 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerStorage.cs", label="nameOrConnectionString == null", span="62-62"];
m9_4 [cluster="Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerStorage.cs", label="Entry Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="62-62"];
m9_5 [cluster="Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerStorage.cs", label="var client = ClientFactory()", span="64-64"];
m9_6 [cluster="Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerStorage.cs", label="return client.Enqueue(methodCall);", span="65-65"];
m9_7 [cluster="Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerStorage.cs", label="Exit Hangfire.BackgroundJob.Enqueue(System.Linq.Expressions.Expression<System.Action>)", span="62-62"];
m9_8 [cluster="System.Func<TResult>.Invoke()", file="SqlServerStorage.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m9_10 [cluster="Hangfire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", file="SqlServerStorage.cs", label="Entry Hangfire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="78-78"];
m9_116 [cluster="Unk.Commit", file="SqlServerStorage.cs", label="Entry Unk.Commit", span=""];
m9_81 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<DbConnection>)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<DbConnection>)", span="170-170"];
m9_83 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<DbConnection>)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<DbConnection>)", span="170-170"];
m9_162 [cluster="Unk.Single", file="SqlServerStorage.cs", label="Entry Unk.Single", span=""];
m9_11 [cluster="Hangfire.BackgroundJob.Enqueue<T>(System.Linq.Expressions.Expression<System.Action<T>>)", file="SqlServerStorage.cs", label="var client = ClientFactory()", span="80-80"];
m9_13 [cluster="Hangfire.SqlServer.SqlServerStorage.GetConnectionString(string)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.GetConnectionString(string)", span="276-276"];
m9_84 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", file="SqlServerStorage.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", span="179-179"];
m9_90 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", file="SqlServerStorage.cs", label="DbConnection connection = null", span="181-181"];
m9_92 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", file="SqlServerStorage.cs", label="return func(connection);", span="186-186"];
m9_93 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", span="179-179"];
m9_147 [cluster="Hangfire.SqlServer.SqlServerStorage.GetConnectionString(string)", file="SqlServerStorage.cs", label="return nameOrConnectionString;", span="292-292"];
m9_148 [cluster="Hangfire.SqlServer.SqlServerStorage.GetConnectionString(string)", file="SqlServerStorage.cs", label="Exit Hangfire.SqlServer.SqlServerStorage.GetConnectionString(string)", span="276-276"];
m9_65 [cluster="Unk.ContainsKey", file="SqlServerStorage.cs", label="Entry Unk.ContainsKey", span=""];
m9_176 [file="SqlServerStorage.cs", label="Hangfire.SqlServer.SqlServerStorage", span=""];
m9_177 [file="SqlServerStorage.cs", label="System.Action<DbConnection>", span=""];
m9_178 [file="SqlServerStorage.cs", label="System.Action<DbConnection, DbTransaction>", span=""];
m9_179 [file="SqlServerStorage.cs", label="IsolationLevel?", span=""];
m9_180 [file="SqlServerStorage.cs", label="System.Func<DbConnection, DbTransaction, T>", span=""];
m10_4 [cluster="HangFire.JobStorage.GetComponents()", file="SqlServerStorageOptions.cs", label="Entry HangFire.JobStorage.GetComponents()", span="57-57"];
m10_5 [cluster="HangFire.JobStorage.GetComponents()", file="SqlServerStorageOptions.cs", label="return Enumerable.Empty<IServerComponent>();", span="59-59"];
m10_6 [cluster="HangFire.JobStorage.GetComponents()", file="SqlServerStorageOptions.cs", label="Exit HangFire.JobStorage.GetComponents()", span="57-57"];
m10_0 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="SqlServerStorageOptions.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="53-53"];
m10_1 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="SqlServerStorageOptions.cs", label="Exit HangFire.JobStorage.GetMonitoringApi()", span="53-53"];
m10_8 [cluster="HangFire.JobStorage.GetStateHandlers()", file="SqlServerStorageOptions.cs", label="Entry HangFire.JobStorage.GetStateHandlers()", span="62-62"];
m10_9 [cluster="HangFire.JobStorage.GetStateHandlers()", file="SqlServerStorageOptions.cs", label="return Enumerable.Empty<StateHandler>();", span="64-64"];
m10_10 [cluster="HangFire.JobStorage.GetStateHandlers()", file="SqlServerStorageOptions.cs", label="Exit HangFire.JobStorage.GetStateHandlers()", span="62-62"];
m10_7 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SqlServerStorageOptions.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m10_2 [cluster="HangFire.JobStorage.GetConnection()", file="SqlServerStorageOptions.cs", label="Entry HangFire.JobStorage.GetConnection()", span="55-55"];
m10_3 [cluster="HangFire.JobStorage.GetConnection()", file="SqlServerStorageOptions.cs", label="Exit HangFire.JobStorage.GetConnection()", span="55-55"];
m11_5 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="SqlServerTimeoutJob.cs", label="queue == null", span="28-28"];
m11_57 [cluster="Hangfire.Logging.ILog.DebugException(string, System.Exception)", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.Logging.ILog.DebugException(string, System.Exception)", span="132-132"];
m11_22 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.RemoveFromQueue()", file="SqlServerTimeoutJob.cs", label="_removedFromQueue = true", span="59-59"];
m11_21 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.RemoveFromQueue()", color=green, community=0, file="SqlServerTimeoutJob.cs", label="_storage.UseConnection(null, connection =>\r\n                {\r\n                    connection.Execute(\r\n                        $''delete from {_storage.SchemaName}.JobQueue where Id = @id'',\r\n                        new { id = Id },\r\n                        commandTimeout: _storage.CommandTimeout);\r\n                })", prediction=5, span="51-57"];
m11_23 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.RemoveFromQueue()", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.SqlServer.SqlServerTimeoutJob.RemoveFromQueue()", span="47-47"];
m11_13 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="SqlServerTimeoutJob.cs", label="_timer = new Timer(ExecuteKeepAliveQuery, null, keepAliveInterval, keepAliveInterval)", span="39-39"];
m11_27 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="Exit lambda expression", span="51-57"];
m11_14 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", span="20-20"];
m11_15 [cluster="HangFire.Redis.DataTypes.RedisWriteOnlyValue.HangFire.Storage.IWriteOnlyPersistentValue.Decrement(string)", file="SqlServerTimeoutJob.cs", label="_transaction.QueueCommand(x => x.DecrementValue(RedisStorage.Prefix + key))", span="25-25"];
m11_16 [cluster="Unk.nameof", file="SqlServerTimeoutJob.cs", label="Entry Unk.nameof", span=""];
m11_24 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="Entry lambda expression", span="30-31"];
m11_17 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="Entry lambda expression", span="25-25"];
m11_37 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", span="79-79"];
m11_38 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="SqlServerTimeoutJob.cs", label=_disposed, span="81-81"];
m11_40 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="SqlServerTimeoutJob.cs", label="_disposed = true", span="82-82"];
m11_41 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="SqlServerTimeoutJob.cs", label="_timer?.Dispose()", span="84-84"];
m11_42 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="SqlServerTimeoutJob.cs", label=_syncRoot, span="86-86"];
m11_43 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="SqlServerTimeoutJob.cs", label="!_removedFromQueue && !_requeued", span="88-88"];
m11_44 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="SqlServerTimeoutJob.cs", label="Requeue()", span="90-90"];
m11_39 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="SqlServerTimeoutJob.cs", label="return;", span="81-81"];
m11_45 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.SqlServer.SqlServerTimeoutJob.Dispose()", span="79-79"];
m11_47 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", span="95-95"];
m11_51 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", color=green, community=0, file="SqlServerTimeoutJob.cs", label="_storage.UseConnection(null, connection =>\r\n                    {\r\n                        connection.Execute(\r\n                            $''update {_storage.SchemaName}.JobQueue set FetchedAt = getutcdate() where Id = @id'',\r\n                            new { id = Id },\r\n                            commandTimeout: _storage.CommandTimeout);\r\n                    })", prediction=6, span="103-109"];
m11_49 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="SqlServerTimeoutJob.cs", label="_requeued || _removedFromQueue", span="99-99"];
m11_52 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="SqlServerTimeoutJob.cs", label="Logger.Trace($''Keep-alive query for message {Id} sent'')", span="111-111"];
m11_48 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="SqlServerTimeoutJob.cs", label=_syncRoot, span="97-97"];
m11_54 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="SqlServerTimeoutJob.cs", label="Logger.DebugException($''Unable to execute keep-alive query for message {Id}'', ex)", span="115-115"];
m11_50 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="SqlServerTimeoutJob.cs", label="return;", span="99-99"];
m11_53 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="SqlServerTimeoutJob.cs", label=Exception, span="113-113"];
m11_55 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.SqlServer.SqlServerTimeoutJob.ExecuteKeepAliveQuery(object)", span="95-95"];
m11_6 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="SqlServerTimeoutJob.cs", label="throw new ArgumentNullException(nameof(queue));", span="28-28"];
m11_7 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="SqlServerTimeoutJob.cs", label="_storage = storage", span="29-29"];
m11_8 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.SqlServerTimeoutJob(Hangfire.SqlServer.SqlServerStorage, long, string, string)", file="SqlServerTimeoutJob.cs", label="Id = id", span="31-31"];
m11_18 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="x.DecrementValue(RedisStorage.Prefix + key)", span="25-25"];
m11_19 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="Exit lambda expression", span="25-25"];
m11_20 [cluster="Unk.DecrementValue", file="SqlServerTimeoutJob.cs", label="Entry Unk.DecrementValue", span=""];
m11_56 [cluster="Hangfire.Logging.ILog.Trace(string)", file="SqlServerTimeoutJob.cs", label="Entry Hangfire.Logging.ILog.Trace(string)", span="234-234"];
m11_0 [cluster="HangFire.Redis.DataTypes.RedisWriteOnlyValue.RedisWriteOnlyValue(IRedisTransaction)", file="SqlServerTimeoutJob.cs", label="Entry HangFire.Redis.DataTypes.RedisWriteOnlyValue.RedisWriteOnlyValue(IRedisTransaction)", span="10-10"];
m11_9 [cluster="Unk.QueueCommand", file="SqlServerTimeoutJob.cs", label="Entry Unk.QueueCommand", span=""];
m11_10 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="Entry lambda expression", span="19-20"];
m11_11 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="x.IncrementValue(\r\n                RedisStorage.Prefix+ key)", span="19-20"];
m11_12 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="Exit lambda expression", span="19-20"];
m11_1 [cluster="HangFire.Redis.DataTypes.RedisWriteOnlyValue.RedisWriteOnlyValue(IRedisTransaction)", file="SqlServerTimeoutJob.cs", label="transaction == null", span="12-12"];
m11_2 [cluster="HangFire.Redis.DataTypes.RedisWriteOnlyValue.RedisWriteOnlyValue(IRedisTransaction)", file="SqlServerTimeoutJob.cs", label="throw new ArgumentNullException(''transaction'');", span="12-12"];
m11_3 [cluster="HangFire.Redis.DataTypes.RedisWriteOnlyValue.RedisWriteOnlyValue(IRedisTransaction)", file="SqlServerTimeoutJob.cs", label="_transaction = transaction", span="14-14"];
m11_4 [cluster="HangFire.Redis.DataTypes.RedisWriteOnlyValue.RedisWriteOnlyValue(IRedisTransaction)", file="SqlServerTimeoutJob.cs", label="Exit HangFire.Redis.DataTypes.RedisWriteOnlyValue.RedisWriteOnlyValue(IRedisTransaction)", span="10-10"];
m11_58 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="Entry lambda expression", span="103-109"];
m11_25 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="Entry lambda expression", span="51-57"];
m11_26 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="connection.Execute(\r\n                        $''delete from {_storage.SchemaName}.JobQueue where Id = @id'',\r\n                        new { id = Id },\r\n                        commandTimeout: _storage.CommandTimeout)", span="53-56"];
m11_34 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="Entry lambda expression", span="67-73"];
m11_35 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="connection.Execute(\r\n                        $''update {_storage.SchemaName}.JobQueue set FetchedAt = null where Id = @id'',\r\n                        new { id = Id },\r\n                        commandTimeout: _storage.CommandTimeout)", span="69-72"];
m11_59 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="connection.Execute(\r\n                            $''update {_storage.SchemaName}.JobQueue set FetchedAt = getutcdate() where Id = @id'',\r\n                            new { id = Id },\r\n                            commandTimeout: _storage.CommandTimeout)", span="105-108"];
m11_36 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="Exit lambda expression", span="67-73"];
m11_60 [cluster="lambda expression", file="SqlServerTimeoutJob.cs", label="Exit lambda expression", span="103-109"];
m11_46 [cluster="System.Threading.Timer.Dispose()", file="SqlServerTimeoutJob.cs", label="Entry System.Threading.Timer.Dispose()", span="0-0"];
m11_29 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", file="SqlServerTimeoutJob.cs", label=string, span=""];
m11_31 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", color=green, community=0, file="SqlServerTimeoutJob.cs", label=string, prediction=7, span=""];
m11_30 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", file="SqlServerTimeoutJob.cs", label=string, span=""];
m11_32 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", file="SqlServerTimeoutJob.cs", label="System.TimeSpan", span=""];
m11_33 [cluster="Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", file="SqlServerTimeoutJob.cs", label="Exit Hangfire.SqlServer.SqlServerTimeoutJob.Requeue()", span="63-63"];
m11_28 [cluster="Unk.Execute", file="SqlServerTimeoutJob.cs", label="HangFire.Redis.DataTypes.RedisWriteOnlyValue", span=""];
m11_61 [file="SqlServerTimeoutJob.cs", label="Hangfire.SqlServer.SqlServerTimeoutJob", span=""];
m12_2 [cluster="HangFire.States.SucceededState.GetProperties()", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.States.SucceededState.GetProperties()", span="19-19"];
m12_3 [cluster="HangFire.States.SucceededState.GetProperties()", file="SqlServerWriteOnlyTransaction.cs", label="return new Dictionary<string, string>\r\n                {\r\n                    { ''SucceededAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) }\r\n                };", span="21-24"];
m12_4 [cluster="HangFire.States.SucceededState.GetProperties()", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.States.SucceededState.GetProperties()", span="19-19"];
m12_5 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransaction.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m12_29 [cluster="Unk.EnqueueItemOnList", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m12_37 [cluster="Unk.IncrementValue", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.IncrementValue", span=""];
m12_33 [cluster="Unk.TrimList", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.TrimList", span=""];
m12_21 [cluster="string.Format(string, object)", file="SqlServerWriteOnlyTransaction.cs", label="Entry string.Format(string, object)", span="0-0"];
m12_17 [cluster="Unk.QueueCommand", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.QueueCommand", span=""];
m12_22 [cluster="Unk.ExpireEntryIn", file="SqlServerWriteOnlyTransaction.cs", label="Entry Unk.ExpireEntryIn", span=""];
m12_7 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.States.SucceededState.Apply(IRedisTransaction)", span="27-27"];
m12_8 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="SqlServerWriteOnlyTransaction.cs", label="transaction == null", span="29-29"];
m12_10 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobExpirationTimeout))", span="31-33"];
m12_12 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.EnqueueItemOnList(''hangfire:succeeded'', JobId))", span="39-39"];
m12_13 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="SqlServerWriteOnlyTransaction.cs", label="transaction.QueueCommand(x => x.TrimList(''hangfire:succeeded'', 0, 99))", span="40-40"];
m12_9 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="SqlServerWriteOnlyTransaction.cs", label="throw new ArgumentNullException(''transaction'');", span="29-29"];
m12_15 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.States.SucceededState.Apply(IRedisTransaction)", span="27-27"];
m12_0 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m12_1 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="SqlServerWriteOnlyTransaction.cs", label="Exit HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m12_18 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="31-33"];
m12_23 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="35-37"];
m12_26 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="39-39"];
m12_30 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="40-40"];
m12_34 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Entry lambda expression", span="42-42"];
m12_19 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobExpirationTimeout)", span="31-33"];
m12_20 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="31-33"];
m12_25 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="35-37"];
m12_27 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.EnqueueItemOnList(''hangfire:succeeded'', JobId)", span="39-39"];
m12_28 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="39-39"];
m12_31 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="x.TrimList(''hangfire:succeeded'', 0, 99)", span="40-40"];
m12_32 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="40-40"];
m12_36 [cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs", label="Exit lambda expression", span="42-42"];
m12_6 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="SqlServerWriteOnlyTransaction.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
m12_38 [file="SqlServerWriteOnlyTransaction.cs", label="HangFire.States.SucceededState", span=""];
m13_453 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", span="556-556"];
m13_454 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", prediction=8, span="558-570"];
m13_455 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", span="556-556"];
m13_769 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", span="959-959"];
m13_771 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", prediction=9, span="965-982"];
m13_770 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="961-963"];
m13_772 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", span="959-959"];
m13_664 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m13_536 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", span="678-678"];
m13_537 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", prediction=10, span="680-691"];
m13_538 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", span="678-678"];
m13_441 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", span="537-537"];
m13_442 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", prediction=11, span="539-550"];
m13_443 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", span="537-537"];
m13_803 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="345-345"];
m13_636 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", span="800-800"];
m13_637 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching);\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''), useBatching);\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", prediction=12, span="802-817"];
m13_638 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", span="800-800"];
m13_839 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", span="1044-1044"];
m13_841 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistHash(''hash-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''hash-1'']);\r\n                Assert.NotNull(records[''hash-2'']);\r\n            })", prediction=13, span="1050-1066"];
m13_840 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="1046-1048"];
m13_842 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", span="1044-1044"];
m13_271 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="167-167"];
m13_378 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="198-198"];
m13_43 [cluster="Unk.ToString", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToString", span=""];
m13_178 [cluster="Unk.AddJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.AddJobState", span=""];
m13_907 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", span="1128-1128"];
m13_909 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", prediction=14, span="1134-1150"];
m13_908 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="1130-1132"];
m13_910 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", span="1128-1128"];
m13_479 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", span="595-595"];
m13_480 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", prediction=15, span="597-608"];
m13_481 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", span="595-595"];
m13_732 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="319-319"];
m13_548 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", span="697-697"];
m13_549 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", prediction=16, span="699-710"];
m13_550 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", span="697-697"];
m13_679 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", span="851-851"];
m13_680 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var items = new List<string> { ''1'', ''2'', ''3'' };\r\n\r\n                Commit(sql, x => x.AddRangeToSet(''my-set'', items), useBatching);\r\n\r\n                var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''');\r\n                Assert.Equal(items, records);\r\n            })", prediction=17, span="853-861"];
m13_681 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", span="851-851"];
m13_27 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", span="39-39"];
m13_29 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", prediction=18, span="46-58"];
m13_28 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="41-44"];
m13_30 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", span="39-39"];
m13_825 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", span="1030-1030"];
m13_826 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", prediction=19, span="1032-1038"];
m13_827 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", span="1030-1030"];
m13_237 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="247-247"];
m13_238 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="return connection\r\n                .Query(''select * from HangFire.Job where Id = @id'', new { id = jobId })\r\n                .Single();", span="249-251"];
m13_239 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="247-247"];
m13_838 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="358-358"];
m13_403 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="214-214"];
m13_45 [cluster="Unk.GetTestJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetTestJob", span=""];
m13_7 [cluster="Mock<IPersistentJobQueue>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IPersistentJobQueue>.cstr", span=""];
m13_906 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="380-380"];
m13_253 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="159-159"];
m13_872 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="369-369"];
m13_768 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="332-332"];
m13_2 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="defaultProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(new Mock<IPersistentJobQueue>().Object)", span="21-22"];
m13_3 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="24-24"];
m13_940 [cluster="SqlServerWriteOnlyTransaction.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry SqlServerWriteOnlyTransaction.cstr", span=""];
m13_510 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", span="638-638"];
m13_511 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", prediction=20, span="640-653"];
m13_512 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", span="638-638"];
m13_340 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="193-193"];
m13_327 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", span="373-373"];
m13_328 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", prediction=21, span="375-384"];
m13_329 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", span="373-373"];
m13_379 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", span="445-445"];
m13_380 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                }, useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", prediction=22, span="447-458"];
m13_381 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", span="445-445"];
m13_691 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", span="867-867"];
m13_692 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null), useBatching));\r\n            })", prediction=23, span="869-873"];
m13_693 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", span="867-867"];
m13_212 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", span="230-230"];
m13_217 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''), useBatching);\r\n\r\n                correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''));\r\n            })", prediction=23, span="239-244"];
m13_213 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="232-232"];
m13_216 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="_queueProviders.Add(correctProvider.Object, new[] { ''default'' })", span="237-237"];
m13_215 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="correctProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(correctJobQueue.Object)", span="234-235"];
m13_214 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="233-233"];
m13_218 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", span="230-230"];
m13_573 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="258-258"];
m13_501 [cluster="Unk.ToArray", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToArray", span=""];
m13_47 [cluster="System.DateTime.AddDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m13_44 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", span="1161-1161"];
m13_932 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var storage = new Mock<SqlServerStorage>(connection, new SqlServerStorageOptions { CommandBatchMaxTimeout = useBatching ? TimeSpan.FromMinutes(1) : (TimeSpan?)null })", prediction=25, span="1166-1166"];
m13_933 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="storage.Setup(x => x.QueueProviders).Returns(_queueProviders)", span="1167-1167"];
m13_934 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var transaction = new SqlServerWriteOnlyTransaction(storage.Object, () => null)", prediction=26, span="1169-1169"];
m13_935 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(transaction)", span="1171-1171"];
m13_936 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="transaction.Commit()", span="1172-1172"];
m13_937 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", span="1161-1161"];
m13_0 [cluster="HangFire.Storage.IWriteableStoredValues.Increment(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Storage.IWriteableStoredValues.Increment(string)", span="6-6"];
m13_1 [cluster="HangFire.Storage.IWriteableStoredValues.Increment(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Storage.IWriteableStoredValues.Increment(string)", span="6-6"];
m13_4 [cluster="HangFire.Storage.IWriteableStoredValues.ExpireIn(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.Storage.IWriteableStoredValues.ExpireIn(string, System.TimeSpan)", span="9-9"];
m13_5 [cluster="HangFire.Storage.IWriteableStoredValues.ExpireIn(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.Storage.IWriteableStoredValues.ExpireIn(string, System.TimeSpan)", span="9-9"];
m13_606 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", span="767-767"];
m13_607 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", color=green, community=1, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                }), useBatching);\r\n\r\n                var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(null, result[''Key1'']);\r\n            })", prediction=27, span="769-782"];
m13_608 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", span="767-767"];
m13_179 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", span="196-196"];
m13_180 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", color=green, community=1, file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", prediction=28, span="198-201"];
m13_181 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", color=green, community=1, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns((string)null);\r\n                state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null);\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(null, jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(null, jobState.Data);\r\n            })", prediction=29, span="203-224"];
m13_182 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", span="196-196"];
m13_524 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", span="659-659"];
m13_525 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", prediction=30, span="661-672"];
m13_526 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", span="659-659"];
m13_704 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", span="879-879"];
m13_706 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", prediction=31, span="884-896"];
m13_705 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="881-882"];
m13_707 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", span="879-879"];
m13_221 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="234-234"];
m13_20 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="31-31"];
m13_21 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="new SqlServerWriteOnlyTransaction(null, () => null)", prediction=32, span="31-31"];
m13_22 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="31-31"];
m13_25 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label=null, prediction=33, span="31-31"];
m13_24 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="31-31"];
m13_26 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="31-31"];
m13_32 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="46-58"];
m13_35 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)), useBatching)", prediction=23, span="51-51"];
m13_33 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="48-48"];
m13_34 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="49-49"];
m13_36 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="53-53"];
m13_50 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="51-51"];
m13_51 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", prediction=23, span="51-51"];
m13_52 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="51-51"];
m13_59 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="71-83"];
m13_62 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistJob(jobId), useBatching)", prediction=23, span="76-76"];
m13_60 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="73-73"];
m13_61 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="74-74"];
m13_63 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="78-78"];
m13_69 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="76-76"];
m13_70 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistJob(jobId)", prediction=23, span="76-76"];
m13_71 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="76-76"];
m13_77 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="96-123"];
m13_84 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching)", prediction=23, span="107-107"];
m13_78 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="98-98"];
m13_80 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="101-101"];
m13_83 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="104-105"];
m13_85 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="109-109"];
m13_110 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="107-107"];
m13_111 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetJobState(jobId, state.Object)", prediction=23, span="107-107"];
m13_112 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="107-107"];
m13_119 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", prediction=23, span="138-138"];
m13_118 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="136-155"];
m13_124 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching)", prediction=23, span="145-145"];
m13_120 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", prediction=23, span="140-140"];
m13_123 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null)", prediction=23, span="143-143"];
m13_125 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", prediction=44, span="147-147"];
m13_142 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="145-145"];
m13_143 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetJobState(jobId, state.Object)", prediction=23, span="145-145"];
m13_126 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', job.StateName)", prediction=46, span="148-148"];
m13_127 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(job.StateId)", prediction=44, span="149-149"];
m13_128 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", prediction=48, span="151-151"];
m13_129 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", prediction=49, span="152-152"];
m13_130 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Reason)", prediction=48, span="153-153"];
m13_131 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Data)", prediction=48, span="154-154"];
m13_121 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", prediction=52, span="141-141"];
m13_122 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns((string)null)", prediction=23, span="142-142"];
m13_144 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="145-145"];
m13_133 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="141-141"];
m13_136 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="142-142"];
m13_139 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="143-143"];
m13_132 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="136-155"];
m13_134 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", prediction=54, span="141-141"];
m13_135 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="141-141"];
m13_137 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", prediction=55, span="142-142"];
m13_138 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="142-142"];
m13_140 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", prediction=56, span="143-143"];
m13_141 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="143-143"];
m13_149 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="168-190"];
m13_155 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching)", prediction=23, span="178-178"];
m13_150 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="170-170"];
m13_151 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="172-172"];
m13_154 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="175-176"];
m13_156 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="180-180"];
m13_175 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="178-178"];
m13_176 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddJobState(jobId, state.Object)", prediction=23, span="178-178"];
m13_177 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="178-178"];
m13_184 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", prediction=23, span="205-205"];
m13_183 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="203-224"];
m13_189 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching)", prediction=23, span="212-212"];
m13_185 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", prediction=23, span="207-207"];
m13_188 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null)", prediction=23, span="210-210"];
m13_190 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", prediction=63, span="214-214"];
m13_209 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="212-212"];
m13_210 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddJobState(jobId, state.Object)", prediction=23, span="212-212"];
m13_194 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", prediction=23, span="219-219"];
m13_191 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateName)", prediction=66, span="215-215"];
m13_192 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateId)", prediction=63, span="216-216"];
m13_193 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", prediction=68, span="218-218"];
m13_195 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", prediction=68, span="220-220"];
m13_196 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Reason)", prediction=68, span="221-221"];
m13_197 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", prediction=68, span="222-222"];
m13_198 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Data)", prediction=68, span="223-223"];
m13_186 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", prediction=73, span="208-208"];
m13_187 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns((string)null)", prediction=23, span="209-209"];
m13_211 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="212-212"];
m13_200 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="208-208"];
m13_203 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="209-209"];
m13_206 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="210-210"];
m13_199 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="203-224"];
m13_201 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", prediction=75, span="208-208"];
m13_202 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="208-208"];
m13_204 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", prediction=76, span="209-209"];
m13_205 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="209-209"];
m13_207 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", prediction=77, span="210-210"];
m13_208 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="210-210"];
m13_224 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="239-244"];
m13_225 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToQueue(''default'', ''1''), useBatching)", prediction=23, span="241-241"];
m13_226 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''))", span="243-243"];
m13_229 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="241-241"];
m13_230 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToQueue(''default'', ''1'')", prediction=79, span="241-241"];
m13_231 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="241-241"];
m13_243 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="259-268"];
m13_244 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key''), useBatching)", prediction=23, span="261-261"];
m13_245 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="263-263"];
m13_250 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="261-261"];
m13_251 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", prediction=81, span="261-261"];
m13_252 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="261-261"];
m13_257 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="276-290"];
m13_258 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching)", prediction=23, span="278-278"];
m13_259 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="280-280"];
m13_268 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="278-278"];
m13_269 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", prediction=83, span="278-278"];
m13_270 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="278-278"];
m13_275 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="298-309"];
m13_276 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                }, useBatching)", prediction=23, span="300-304"];
m13_277 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="306-306"];
m13_280 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="300-304"];
m13_287 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="317-326"];
m13_288 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key''), useBatching)", prediction=23, span="319-319"];
m13_289 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="321-321"];
m13_294 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="319-319"];
m13_295 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", prediction=86, span="319-319"];
m13_296 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="319-319"];
m13_301 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="334-348"];
m13_302 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching)", prediction=23, span="336-336"];
m13_303 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="338-338"];
m13_311 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="336-336"];
m13_312 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", prediction=88, span="336-336"];
m13_313 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="336-336"];
m13_318 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="356-367"];
m13_319 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                }, useBatching)", prediction=23, span="358-362"];
m13_320 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="364-364"];
m13_323 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="358-362"];
m13_330 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="375-384"];
m13_331 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''), useBatching)", prediction=23, span="377-377"];
m13_332 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="379-379"];
m13_337 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="377-377"];
m13_338 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", prediction=91, span="377-377"];
m13_339 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="377-377"];
m13_344 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="392-403"];
m13_345 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                }, useBatching)", prediction=23, span="394-398"];
m13_346 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="400-400"];
m13_349 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="394-398"];
m13_356 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="411-422"];
m13_357 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                }, useBatching)", prediction=23, span="413-417"];
m13_358 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="419-419"];
m13_361 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="413-417"];
m13_368 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="430-439"];
m13_369 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2), useBatching)", prediction=23, span="432-432"];
m13_370 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="434-434"];
m13_375 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="432-432"];
m13_376 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", prediction=95, span="432-432"];
m13_377 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="432-432"];
m13_382 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="447-458"];
m13_383 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                }, useBatching)", prediction=23, span="449-453"];
m13_384 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="455-455"];
m13_387 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="449-453"];
m13_394 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="466-477"];
m13_395 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                }, useBatching)", prediction=23, span="468-472"];
m13_396 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="474-474"];
m13_399 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="468-472"];
m13_407 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="485-496"];
m13_408 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                }, useBatching)", prediction=23, span="487-491"];
m13_409 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="493-493"];
m13_412 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="487-491"];
m13_419 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="504-515"];
m13_420 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                }, useBatching)", prediction=23, span="506-510"];
m13_421 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="512-512"];
m13_424 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="506-510"];
m13_431 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="523-531"];
m13_432 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''), useBatching)", prediction=23, span="525-525"];
m13_433 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.List'').Single()", span="527-527"];
m13_437 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="525-525"];
m13_438 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", prediction=101, span="525-525"];
m13_439 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="525-525"];
m13_444 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="539-550"];
m13_445 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                }, useBatching)", prediction=23, span="541-545"];
m13_446 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="547-547"];
m13_449 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="541-545"];
m13_456 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="558-570"];
m13_457 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                }, useBatching)", prediction=23, span="560-565"];
m13_458 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="567-567"];
m13_461 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="560-565"];
m13_470 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="578-589"];
m13_471 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                }, useBatching)", prediction=23, span="580-584"];
m13_472 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="586-586"];
m13_475 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="580-584"];
m13_482 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="597-608"];
m13_483 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                }, useBatching)", prediction=23, span="599-603"];
m13_484 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="605-605"];
m13_487 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="599-603"];
m13_494 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="616-632"];
m13_495 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                }, useBatching)", prediction=23, span="618-625"];
m13_496 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="627-627"];
m13_502 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="618-625"];
m13_513 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="640-653"];
m13_514 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching)", prediction=23, span="642-648"];
m13_515 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="650-650"];
m13_518 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="642-648"];
m13_527 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="661-672"];
m13_528 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching)", prediction=23, span="663-667"];
m13_529 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="669-669"];
m13_532 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="663-667"];
m13_539 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="680-691"];
m13_540 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                }, useBatching)", prediction=23, span="682-686"];
m13_541 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="688-688"];
m13_544 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="682-686"];
m13_551 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="699-710"];
m13_552 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                }, useBatching)", prediction=23, span="701-705"];
m13_553 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="707-707"];
m13_556 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="701-705"];
m13_563 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="718-724"];
m13_564 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching))", prediction=111, span="720-721"];
m13_565 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="723-723"];
m13_567 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="721-721"];
m13_568 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching)", prediction=23, span="721-721"];
m13_569 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="721-721"];
m13_570 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="721-721"];
m13_571 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(null, new Dictionary<string, string>())", prediction=113, span="721-721"];
m13_572 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="721-721"];
m13_577 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="732-738"];
m13_578 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching))", prediction=114, span="734-735"];
m13_579 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="737-737"];
m13_581 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="735-735"];
m13_582 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching)", prediction=23, span="735-735"];
m13_583 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="735-735"];
m13_584 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="735-735"];
m13_585 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', null)", prediction=116, span="735-735"];
m13_586 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="735-735"];
m13_590 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="746-761"];
m13_591 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching)", prediction=23, span="748-752"];
m13_592 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="754-757"];
m13_597 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="748-752"];
m13_598 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", prediction=118, span="748-752"];
m13_599 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="748-752"];
m13_609 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="769-782"];
m13_610 [cluster="lambda expression", color=green, community=1, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                }), useBatching)", prediction=23, span="771-774"];
m13_611 [cluster="lambda expression", color=green, community=1, file="SqlServerWriteOnlyTransactionFacts.cs", label="var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", prediction=120, span="776-779"];
m13_614 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="771-774"];
m13_612 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, result[''Key1''])", prediction=121, span="781-781"];
m13_617 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="779-779"];
m13_620 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="779-779"];
m13_613 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="769-782"];
m13_615 [cluster="lambda expression", color=green, community=1, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                })", prediction=122, span="771-774"];
m13_616 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="771-774"];
m13_618 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Field", prediction=123, span="779-779"];
m13_619 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="779-779"];
m13_621 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Value", prediction=124, span="779-779"];
m13_622 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="779-779"];
m13_626 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="790-794"];
m13_627 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null), useBatching))", prediction=23, span="792-793"];
m13_628 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="790-794"];
m13_629 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="793-793"];
m13_630 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveHash(null), useBatching)", prediction=23, span="793-793"];
m13_631 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="793-793"];
m13_632 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="793-793"];
m13_633 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveHash(null)", prediction=127, span="793-793"];
m13_634 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="793-793"];
m13_639 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="802-817"];
m13_640 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching)", prediction=23, span="805-809"];
m13_641 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveHash(''some-hash''), useBatching)", prediction=23, span="812-812"];
m13_645 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="805-809"];
m13_642 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="815-815"];
m13_648 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="812-812"];
m13_646 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", prediction=130, span="805-809"];
m13_647 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="805-809"];
m13_649 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveHash(''some-hash'')", prediction=131, span="812-812"];
m13_650 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="812-812"];
m13_654 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="825-831"];
m13_655 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching))", prediction=132, span="827-828"];
m13_656 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="830-830"];
m13_658 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="828-828"];
m13_659 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching)", prediction=23, span="828-828"];
m13_660 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="828-828"];
m13_661 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="828-828"];
m13_662 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(null, new List<string>())", prediction=134, span="828-828"];
m13_663 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="828-828"];
m13_669 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="839-845"];
m13_670 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching))", prediction=135, span="841-842"];
m13_671 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''items'', exception.ParamName)", span="844-844"];
m13_673 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="842-842"];
m13_674 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching)", prediction=23, span="842-842"];
m13_675 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="842-842"];
m13_676 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="842-842"];
m13_677 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(''my-set'', null)", prediction=137, span="842-842"];
m13_678 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="842-842"];
m13_682 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="853-861"];
m13_684 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(''my-set'', items), useBatching)", prediction=23, span="857-857"];
m13_683 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="855-855"];
m13_685 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="859-859"];
m13_688 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="857-857"];
m13_689 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(''my-set'', items)", prediction=139, span="857-857"];
m13_690 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="857-857"];
m13_694 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="869-873"];
m13_695 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null), useBatching))", prediction=23, span="871-872"];
m13_696 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="869-873"];
m13_697 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="872-872"];
m13_698 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveSet(null), useBatching)", prediction=23, span="872-872"];
m13_699 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="872-872"];
m13_700 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="872-872"];
m13_701 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveSet(null)", prediction=142, span="872-872"];
m13_702 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="872-872"];
m13_708 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="884-896"];
m13_710 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveSet(''set-1''), useBatching)", prediction=23, span="892-892"];
m13_709 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="886-890"];
m13_711 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="894-894"];
m13_715 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="892-892"];
m13_716 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveSet(''set-1'')", prediction=144, span="892-892"];
m13_717 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="892-892"];
m13_721 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="904-910"];
m13_722 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching))", prediction=145, span="906-907"];
m13_723 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="909-909"];
m13_725 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="907-907"];
m13_726 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching)", prediction=23, span="907-907"];
m13_727 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="907-907"];
m13_728 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="907-907"];
m13_729 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireHash(null, TimeSpan.FromMinutes(5))", prediction=147, span="907-907"];
m13_730 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="907-907"];
m13_737 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="922-939"];
m13_739 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)), useBatching)", prediction=23, span="932-932"];
m13_738 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="925-929"];
m13_740 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="935-935"];
m13_745 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="932-932"];
m13_746 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60))", prediction=149, span="932-932"];
m13_747 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="932-932"];
m13_757 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="947-953"];
m13_758 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching))", prediction=150, span="949-950"];
m13_759 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="952-952"];
m13_761 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="950-950"];
m13_762 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching)", prediction=23, span="950-950"];
m13_763 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="950-950"];
m13_764 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="950-950"];
m13_765 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireSet(null, TimeSpan.FromSeconds(45))", prediction=152, span="950-950"];
m13_766 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="950-950"];
m13_773 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="965-982"];
m13_775 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)), useBatching)", prediction=23, span="975-975"];
m13_774 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="968-972"];
m13_776 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="978-978"];
m13_781 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="975-975"];
m13_782 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60))", prediction=154, span="975-975"];
m13_783 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="975-975"];
m13_793 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="990-996"];
m13_794 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching))", prediction=155, span="992-993"];
m13_795 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="995-995"];
m13_797 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="993-993"];
m13_798 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching)", prediction=23, span="993-993"];
m13_799 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="993-993"];
m13_800 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="993-993"];
m13_801 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireList(null, TimeSpan.FromSeconds(45))", prediction=157, span="993-993"];
m13_802 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="993-993"];
m13_808 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1007-1024"];
m13_810 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)), useBatching)", prediction=23, span="1017-1017"];
m13_809 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="1010-1014"];
m13_811 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1020-1020"];
m13_816 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1017-1017"];
m13_817 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireList(''list-1'', TimeSpan.FromMinutes(60))", prediction=159, span="1017-1017"];
m13_818 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1017-1017"];
m13_828 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1032-1038"];
m13_829 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null), useBatching))", prediction=160, span="1034-1035"];
m13_830 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1037-1037"];
m13_832 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1035-1035"];
m13_833 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistHash(null), useBatching)", prediction=23, span="1035-1035"];
m13_834 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1035-1035"];
m13_835 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1035-1035"];
m13_836 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistHash(null)", prediction=162, span="1035-1035"];
m13_837 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1035-1035"];
m13_843 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1050-1066"];
m13_845 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistHash(''hash-1''), useBatching)", prediction=23, span="1060-1060"];
m13_844 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1053-1057"];
m13_846 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1063-1063"];
m13_850 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1060-1060"];
m13_851 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistHash(''hash-1'')", prediction=164, span="1060-1060"];
m13_852 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1060-1060"];
m13_862 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1074-1080"];
m13_863 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null), useBatching))", prediction=165, span="1076-1077"];
m13_864 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1079-1079"];
m13_866 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1077-1077"];
m13_867 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistSet(null), useBatching)", prediction=23, span="1077-1077"];
m13_868 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1077-1077"];
m13_869 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1077-1077"];
m13_870 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistSet(null)", prediction=167, span="1077-1077"];
m13_871 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1077-1077"];
m13_877 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1092-1108"];
m13_879 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistSet(''set-1''), useBatching)", prediction=23, span="1102-1102"];
m13_878 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1095-1099"];
m13_880 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1105-1105"];
m13_884 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1102-1102"];
m13_885 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistSet(''set-1'')", prediction=169, span="1102-1102"];
m13_886 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1102-1102"];
m13_896 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1116-1122"];
m13_897 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null), useBatching))", prediction=170, span="1118-1119"];
m13_898 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1121-1121"];
m13_900 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1119-1119"];
m13_901 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistList(null), useBatching)", prediction=23, span="1119-1119"];
m13_902 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1119-1119"];
m13_903 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1119-1119"];
m13_904 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistList(null)", prediction=172, span="1119-1119"];
m13_905 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1119-1119"];
m13_911 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1134-1150"];
m13_913 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistList(''list-1''), useBatching)", prediction=23, span="1144-1144"];
m13_912 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1137-1141"];
m13_914 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1147-1147"];
m13_918 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1144-1144"];
m13_919 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistList(''list-1'')", prediction=174, span="1144-1144"];
m13_920 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1144-1144"];
m13_946 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label=null, prediction=175, span="1169-1169"];
m13_945 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1169-1169"];
m13_947 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1169-1169"];
m13_234 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1'')", span="243-243"];
m13_38 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="56-56"];
m13_65 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="81-81"];
m13_88 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="113-113"];
m13_40 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="46-58"];
m13_37 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1))", span="54-54"];
m13_67 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="71-83"];
m13_64 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.ExpireAt)", span="79-79"];
m13_79 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="99-99"];
m13_97 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="96-123"];
m13_91 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="117-117"];
m13_92 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="118-118"];
m13_81 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="102-102"];
m13_82 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="103-103"];
m13_106 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="104-104"];
m13_86 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', job.StateName)", span="110-110"];
m13_87 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(job.StateId)", span="111-111"];
m13_159 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="184-184"];
m13_160 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="185-185"];
m13_152 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="173-173"];
m13_153 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="174-174"];
m13_93 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="119-119"];
m13_94 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="120-120"];
m13_96 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="122-122"];
m13_161 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="186-186"];
m13_162 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="187-187"];
m13_164 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="189-189"];
m13_246 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="265-265"];
m13_247 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="266-266"];
m13_248 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="267-267"];
m13_260 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="282-282"];
m13_261 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="283-283"];
m13_278 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="308-308"];
m13_290 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="323-323"];
m13_291 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="324-324"];
m13_292 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="325-325"];
m13_304 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="340-340"];
m13_305 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="341-341"];
m13_321 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="366-366"];
m13_333 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="381-381"];
m13_334 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="382-382"];
m13_335 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0.0, record.Score, 2)", span="383-383"];
m13_347 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="402-402"];
m13_359 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="421-421"];
m13_371 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="436-436"];
m13_372 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="437-437"];
m13_373 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="438-438"];
m13_385 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="457-457"];
m13_397 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="476-476"];
m13_410 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="495-495"];
m13_422 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="514-514"];
m13_434 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="529-529"];
m13_435 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="530-530"];
m13_447 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="549-549"];
m13_459 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="569-569"];
m13_473 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="588-588"];
m13_485 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="607-607"];
m13_497 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, records.Length)", span="629-629"];
m13_498 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''1'', records[0].Value)", span="630-630"];
m13_499 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''2'', records[1].Value)", span="631-631"];
m13_516 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="652-652"];
m13_530 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="671-671"];
m13_542 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="690-690"];
m13_554 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="709-709"];
m13_593 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="759-759"];
m13_594 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="760-760"];
m13_643 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, count)", span="816-816"];
m13_686 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(items, records)", span="860-860"];
m13_712 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''set-2'', record.Key)", span="895-895"];
m13_66 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(anotherJob.ExpireAt)", span="82-82"];
m13_95 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="121-121"];
m13_163 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="188-188"];
m13_262 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="284-284"];
m13_306 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="342-342"];
m13_848 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''hash-2''])", span="1065-1065"];
m13_882 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''set-2''])", span="1107-1107"];
m13_916 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''list-2''])", span="1149-1149"];
m13_107 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="104-104"];
m13_173 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="175-175"];
m13_165 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="168-190"];
m13_172 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="175-175"];
m13_157 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateName)", span="181-181"];
m13_158 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateId)", span="182-182"];
m13_39 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.ExpireAt)", span="57-57"];
m13_89 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateName)", span="114-114"];
m13_90 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateId)", span="115-115"];
m13_743 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-2''])", span="938-938"];
m13_779 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-2''])", span="981-981"];
m13_814 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-2''])", span="1023-1023"];
m13_847 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-1''])", span="1064-1064"];
m13_881 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-1''])", span="1106-1106"];
m13_915 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-1''])", span="1148-1148"];
m13_227 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="239-244"];
m13_233 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="243-243"];
m13_249 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="259-268"];
m13_281 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="302-302"];
m13_282 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="303-303"];
m13_266 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="276-290"];
m13_263 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime) record.ExpireAt", span="286-286"];
m13_279 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="298-309"];
m13_283 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="300-304"];
m13_293 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="317-326"];
m13_324 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="360-360"];
m13_325 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="361-361"];
m13_310 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="334-348"];
m13_307 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime)record.ExpireAt", span="344-344"];
m13_322 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="356-367"];
m13_326 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="358-362"];
m13_336 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="375-384"];
m13_350 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="396-396"];
m13_351 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''another-value'')", span="397-397"];
m13_362 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="415-415"];
m13_363 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="416-416"];
m13_388 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="451-451"];
m13_400 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="470-470"];
m13_413 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="489-489"];
m13_425 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="508-508"];
m13_348 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="392-403"];
m13_352 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="394-398"];
m13_360 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="411-422"];
m13_364 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="413-417"];
m13_374 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="430-439"];
m13_389 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="452-452"];
m13_386 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="447-458"];
m13_390 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="449-453"];
m13_398 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="466-477"];
m13_402 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="468-472"];
m13_401 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''my-value'')", span="471-471"];
m13_411 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="485-496"];
m13_415 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="487-491"];
m13_414 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="490-490"];
m13_423 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="504-515"];
m13_427 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="506-510"];
m13_426 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''different-key'', ''my-value'')", span="509-509"];
m13_436 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="523-531"];
m13_450 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="543-543"];
m13_451 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="544-544"];
m13_462 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="562-562"];
m13_463 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="563-563"];
m13_476 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="582-582"];
m13_488 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="601-601"];
m13_503 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="620-620"];
m13_504 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="621-621"];
m13_505 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="622-622"];
m13_506 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''3'')", span="623-623"];
m13_519 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="644-644"];
m13_520 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="645-645"];
m13_521 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="646-646"];
m13_533 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="665-665"];
m13_545 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="684-684"];
m13_557 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="703-703"];
m13_448 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="539-550"];
m13_452 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="541-545"];
m13_460 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="558-570"];
m13_465 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="560-565"];
m13_464 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''my-value'')", span="564-564"];
m13_474 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="578-589"];
m13_478 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="580-584"];
m13_477 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''different-value'')", span="583-583"];
m13_486 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="597-608"];
m13_490 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="599-603"];
m13_489 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''different-key'', ''my-value'')", span="602-602"];
m13_500 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="616-632"];
m13_508 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="618-625"];
m13_507 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 2)", span="624-624"];
m13_517 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="640-653"];
m13_523 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="642-648"];
m13_522 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="647-647"];
m13_531 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="661-672"];
m13_535 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="663-667"];
m13_534 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="666-666"];
m13_543 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="680-691"];
m13_547 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="682-686"];
m13_546 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 0)", span="685-685"];
m13_555 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="699-710"];
m13_559 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="701-705"];
m13_558 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''another-key'', 1, 0)", span="704-704"];
m13_566 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="718-724"];
m13_580 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="732-738"];
m13_595 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="746-761"];
m13_600 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="757-757"];
m13_603 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="757-757"];
m13_644 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="802-817"];
m13_657 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="825-831"];
m13_672 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="839-845"];
m13_687 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="853-861"];
m13_713 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="884-896"];
m13_724 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="904-910"];
m13_744 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="922-939"];
m13_741 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="936-936"];
m13_748 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="935-935"];
m13_751 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="935-935"];
m13_742 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="937-937"];
m13_760 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="947-953"];
m13_780 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="965-982"];
m13_777 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="979-979"];
m13_784 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="978-978"];
m13_787 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="978-978"];
m13_778 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="980-980"];
m13_796 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="990-996"];
m13_815 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1007-1024"];
m13_812 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="1021-1021"];
m13_819 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1020-1020"];
m13_822 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1020-1020"];
m13_813 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="1022-1022"];
m13_831 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1032-1038"];
m13_849 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1050-1066"];
m13_853 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1063-1063"];
m13_856 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1063-1063"];
m13_865 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1074-1080"];
m13_883 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1092-1108"];
m13_887 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1105-1105"];
m13_890 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1105-1105"];
m13_899 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1116-1122"];
m13_917 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1134-1150"];
m13_921 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1147-1147"];
m13_924 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1147-1147"];
m13_942 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1167-1167"];
m13_235 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="243-243"];
m13_100 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="102-102"];
m13_103 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="103-103"];
m13_108 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="104-104"];
m13_10 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="21-21"];
m13_166 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="173-173"];
m13_169 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="174-174"];
m13_174 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="175-175"];
m13_265 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="289-289"];
m13_264 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="288-288"];
m13_309 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="347-347"];
m13_308 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="346-346"];
m13_602 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="757-757"];
m13_601 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Field", span="757-757"];
m13_605 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="757-757"];
m13_604 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Value", span="757-757"];
m13_750 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="935-935"];
m13_749 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="935-935"];
m13_753 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="935-935"];
m13_752 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="935-935"];
m13_786 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="978-978"];
m13_785 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="978-978"];
m13_789 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="978-978"];
m13_788 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="978-978"];
m13_821 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1020-1020"];
m13_820 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1020-1020"];
m13_824 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1020-1020"];
m13_823 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1020-1020"];
m13_855 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1063-1063"];
m13_854 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1063-1063"];
m13_858 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1063-1063"];
m13_857 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1063-1063"];
m13_889 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1105-1105"];
m13_888 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1105-1105"];
m13_892 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1105-1105"];
m13_891 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1105-1105"];
m13_923 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1147-1147"];
m13_922 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1147-1147"];
m13_926 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1147-1147"];
m13_925 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1147-1147"];
m13_944 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1167-1167"];
m13_943 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.QueueProviders", span="1167-1167"];
m13_102 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="102-102"];
m13_101 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="102-102"];
m13_105 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="103-103"];
m13_104 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="103-103"];
m13_12 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="21-21"];
m13_11 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.GetJobQueue()", span="21-21"];
m13_168 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="173-173"];
m13_167 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="173-173"];
m13_171 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="174-174"];
m13_170 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="174-174"];
m13_222 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.GetJobQueue()", span="234-234"];
m13_223 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="234-234"];
m13_893 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", span="1114-1114"];
m13_894 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", prediction=176, span="1116-1122"];
m13_895 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", span="1114-1114"];
m13_665 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="291-291"];
m13_391 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", span="464-464"];
m13_392 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", prediction=177, span="466-477"];
m13_393 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", span="464-464"];
m13_754 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", span="945-945"];
m13_755 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", prediction=178, span="947-953"];
m13_756 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", span="945-945"];
m13_416 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", span="502-502"];
m13_417 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", prediction=179, span="504-515"];
m13_418 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", span="502-502"];
m13_859 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", span="1072-1072"];
m13_860 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", prediction=180, span="1074-1080"];
m13_861 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", span="1072-1072"];
m13_466 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="233-233"];
m13_8 [cluster="Unk.Returns", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Returns", span=""];
m13_718 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", span="902-902"];
m13_719 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", prediction=181, span="904-910"];
m13_720 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", span="902-902"];
m13_272 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="296-296"];
m13_273 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", prediction=182, span="298-309"];
m13_274 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="296-296"];
m13_98 [cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IState>.cstr", span=""];
m13_46 [cluster="System.DateTime.AddMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m13_941 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="53-53"];
m13_31 [cluster="Unk.UseConnection", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.UseConnection", span=""];
m13_587 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", span="744-744"];
m13_588 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching);\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", prediction=183, span="746-761"];
m13_589 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", span="744-744"];
m13_19 [cluster="Unk.Equal", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Equal", span=""];
m13_297 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="176-176"];
m13_254 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="274-274"];
m13_255 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", prediction=184, span="276-290"];
m13_256 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="274-274"];
m13_939 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="31-31"];
m13_113 [cluster="Unk.SetJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SetJobState", span=""];
m13_930 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m13_560 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", span="716-716"];
m13_561 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", prediction=185, span="718-724"];
m13_562 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", span="716-716"];
m13_54 [cluster="Unk.ExpireJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ExpireJob", span=""];
m13_938 [cluster="Mock<SqlServerStorage>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<SqlServerStorage>.cstr", span=""];
m13_404 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", span="483-483"];
m13_405 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", prediction=186, span="485-496"];
m13_406 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", span="483-483"];
m13_574 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", span="730-730"];
m13_575 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", prediction=187, span="732-738"];
m13_576 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", span="730-730"];
m13_41 [cluster="Unk.Query", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Query", span=""];
m13_931 [cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m13_353 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", span="409-409"];
m13_354 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", prediction=188, span="411-422"];
m13_355 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", span="409-409"];
m13_635 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="281-281"];
m13_219 [cluster="Unk.Add", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Add", span=""];
m13_68 [cluster="Unk.NotNull", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.NotNull", span=""];
m13_6 [cluster="Unk.Setup", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Setup", span=""];
m13_49 [cluster="Unk.Null", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Null", span=""];
m13_341 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", span="390-390"];
m13_342 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", prediction=189, span="392-403"];
m13_343 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", span="390-390"];
m13_9 [cluster="PersistentJobQueueProviderCollection.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry PersistentJobQueueProviderCollection.cstr", span=""];
m13_220 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="1153-1153"];
m13_927 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="1155-1155"];
m13_928 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(connection)", span="1157-1157"];
m13_929 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="1153-1153"];
m13_315 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="354-354"];
m13_316 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", prediction=190, span="356-367"];
m13_317 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="354-354"];
m13_267 [cluster="System.DateTime.AddHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m13_804 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", span="1002-1002"];
m13_806 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1'']);\r\n                Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''list-2'']);\r\n            })", prediction=191, span="1007-1024"];
m13_805 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="1004-1005"];
m13_807 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", span="1002-1002"];
m13_23 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage, System.Func<DbConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage, System.Func<DbConnection>)", span="45-45"];
m13_55 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", span="64-64"];
m13_57 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", prediction=192, span="71-83"];
m13_56 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="66-69"];
m13_58 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", span="64-64"];
m13_13 [cluster="Unk.GetJobQueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m13_491 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", span="614-614"];
m13_492 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                }, useBatching);\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", prediction=193, span="616-632"];
m13_493 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", span="614-614"];
m13_228 [cluster="Unk.Verify", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Verify", span=""];
m13_873 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", span="1086-1086"];
m13_875 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistSet(''set-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''set-1'']);\r\n                Assert.NotNull(records[''set-2'']);\r\n            })", prediction=194, span="1092-1108"];
m13_874 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="1088-1090"];
m13_876 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", span="1086-1086"];
m13_509 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="242-242"];
m13_467 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", span="576-576"];
m13_468 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", prediction=195, span="578-589"];
m13_469 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", span="576-576"];
m13_731 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m13_596 [cluster="Unk.ToDictionary", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToDictionary", span=""];
m13_314 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="184-184"];
m13_703 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="309-309"];
m13_18 [cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.>", span=""];
m13_666 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", span="837-837"];
m13_667 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", prediction=196, span="839-845"];
m13_668 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", span="837-837"];
m13_298 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="332-332"];
m13_299 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", prediction=197, span="334-348"];
m13_300 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="332-332"];
m13_14 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28"];
m13_15 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null, () => null))", prediction=198, span="30-31"];
m13_16 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="33-33"];
m13_17 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28"];
m13_651 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", span="823-823"];
m13_652 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", prediction=199, span="825-831"];
m13_653 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", span="823-823"];
m13_284 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", span="315-315"];
m13_285 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", prediction=200, span="317-326"];
m13_286 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", span="315-315"];
m13_767 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m13_232 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="140-140"];
m13_53 [cluster="System.TimeSpan.FromDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m13_428 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", span="521-521"];
m13_429 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", prediction=201, span="523-531"];
m13_430 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", span="521-521"];
m13_623 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", span="788-788"];
m13_624 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null), useBatching));\r\n            })", prediction=23, span="790-794"];
m13_625 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", span="788-788"];
m13_236 [cluster="Unk.Enqueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Enqueue", span=""];
m13_790 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", span="988-988"];
m13_791 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", prediction=203, span="990-996"];
m13_792 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", span="988-988"];
m13_73 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", span="89-89"];
m13_75 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", prediction=204, span="96-123"];
m13_74 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="91-94"];
m13_76 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", span="89-89"];
m13_99 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m13_109 [cluster="Unk.SerializeData", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SerializeData", span=""];
m13_240 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", span="257-257"];
m13_241 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", prediction=205, span="259-268"];
m13_242 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", span="257-257"];
m13_365 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", span="428-428"];
m13_366 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", prediction=206, span="430-439"];
m13_367 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", span="428-428"];
m13_42 [cluster="Unk.Single", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Single", span=""];
m13_48 [cluster="Unk.True", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.True", span=""];
m13_114 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", span="129-129"];
m13_115 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", color=green, community=1, file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", prediction=207, span="131-134"];
m13_116 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", color=green, community=1, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns((string)null);\r\n                state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null);\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(null, jobState.Reason);\r\n                Assert.Equal(null, jobState.Data);\r\n            })", prediction=208, span="136-155"];
m13_117 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", span="129-129"];
m13_72 [cluster="Unk.PersistJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.PersistJob", span=""];
m13_145 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", span="161-161"];
m13_147 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", prediction=209, span="168-190"];
m13_146 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="163-166"];
m13_148 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", span="161-161"];
m13_440 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="224-224"];
m13_733 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", span="916-916"];
m13_735 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1'']);\r\n                Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''hash-2'']);\r\n            })", prediction=210, span="922-939"];
m13_734 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="918-920"];
m13_736 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", span="916-916"];
m13_948 [file="SqlServerWriteOnlyTransactionFacts.cs", label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span=""];
m13_950 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_951 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m13_953 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_954 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m13_956 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_957 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m13_958 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m13_960 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_959 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_961 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m13_962 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m13_964 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_965 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m13_966 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m13_968 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_967 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_969 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m13_970 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m13_971 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_973 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_974 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_975 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_976 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_977 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_978 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_979 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_980 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_981 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_982 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_983 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_984 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_985 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_986 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_987 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_988 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_989 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_990 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_991 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_992 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_993 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_994 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_995 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_996 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_997 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_998 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_999 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1000 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_1001 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1002 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1003 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1004 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_1005 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1006 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1007 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_1008 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1009 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_1010 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1011 [file="SqlServerWriteOnlyTransactionFacts.cs", label=items, span=""];
m13_1012 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1013 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_1015 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1016 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1017 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_1019 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1020 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1021 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_1023 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1024 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1025 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_1027 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1028 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1029 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_1031 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1032 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1033 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_1035 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1036 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_1037 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m13_1039 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m13_949 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_952 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_955 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_963 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_972 [file="SqlServerWriteOnlyTransactionFacts.cs", label=correctJobQueue, span=""];
m13_1014 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_1018 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_1022 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_1026 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_1030 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_1034 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m13_1038 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
n124 -> n32  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n37  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n46  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n52  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n57  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n62  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n66  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n74  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n78  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n83  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n87  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n92  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n96  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n104  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n110  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n124 -> n122  [color=darkseagreen4, key=1, label="HangFire.Tests.JobFetcherFeature", style=dashed];
n97 -> n99  [color=darkseagreen4, key=1, label=table1, style=dashed];
n97 -> n100  [color=darkseagreen4, key=1, label=table1, style=dashed];
n111 -> n113  [color=darkseagreen4, key=1, label=table2, style=dashed];
n111 -> n114  [color=darkseagreen4, key=1, label=table2, style=dashed];
d11 -> d24  [color=green, key=1, label="lambda expression", style=dashed];
d11 -> d15  [color=green, key=1, label=removedCount, style=dashed];
d36 -> d17  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
d36 -> d30  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.CountersAggregator", style=dashed];
d17 -> d17  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
d13 -> d13  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
d14 -> d17  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
d14 -> d14  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
d0 -> d2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
d8 -> d17  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
d8 -> d13  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m4_132 -> m4_134  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_132 -> m4_135  [color=darkseagreen4, key=1, label=double, style=dashed];
m4_262 -> m4_264  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_173 -> m4_175  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_173 -> m4_176  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerContext", style=dashed];
m4_173 -> m4_177  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerContext", style=dashed];
m4_15 -> m4_17  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_15 -> m4_20  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_15 -> m4_22  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m4_18 -> m4_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_193 -> m4_195  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_221 -> m4_223  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_294 -> m4_296  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_315 -> m4_317  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_253 -> m4_255  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_63 -> m4_65  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_156 -> m4_158  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_101 -> m4_103  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_101 -> m4_104  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_101 -> m4_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_231 -> m4_233  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_244 -> m4_246  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_112 -> m4_114  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_112 -> m4_115  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_112 -> m4_116  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_185 -> m4_187  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_86 -> m4_88  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_306 -> m4_308  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_35 -> m4_37  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m4_35 -> m4_38  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m4_35 -> m4_39  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m4_35 -> m4_48  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m4_35 -> m4_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m4_47 -> m4_55  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m4_163 -> m4_167  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_163 -> m4_170  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_238 -> m4_241  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_269 -> m4_272  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_301 -> m4_304  [color=darkseagreen4, key=1, label=result, style=dashed];
m4_143 -> m4_145  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_143 -> m4_146  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m4_143 -> m4_147  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m4_143 -> m4_153  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m4_274 -> m4_276  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_274 -> m4_277  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_274 -> m4_278  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_212 -> m4_214  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_0 -> m4_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m4_122 -> m4_124  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_285 -> m4_287  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_202 -> m4_202  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m4_324 -> m4_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m4_324 -> m4_32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m4_324 -> m4_40  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m4_329 -> m4_48  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m4_329 -> m4_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m4_343 -> m4_153  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m5_28 -> m5_30  [color=darkseagreen4, key=1, label="System.Threading.Thread", style=dashed];
m5_16 -> m5_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_5 -> m5_7  [color=darkseagreen4, key=1, label=serversRemoved, style=dashed];
m5_34 -> m5_16  [color=darkseagreen4, key=1, label="HangFire.Server.Components.ServerWatchdog", style=dashed];
m5_34 -> m5_26  [color=darkseagreen4, key=1, label="HangFire.Server.Components.ServerWatchdog", style=dashed];
m5_34 -> m5_17  [color=darkseagreen4, key=1, label="HangFire.Server.Components.ServerWatchdog", style=dashed];
m5_34 -> m5_29  [color=darkseagreen4, key=1, label="HangFire.Server.Components.ServerWatchdog", style=dashed];
m6_8 -> m6_10  [color=darkseagreen4, key=1, label="Hangfire.IBootstrapperConfiguration", style=dashed];
m6_9 -> m6_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_10 -> m6_13  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_44 -> m6_48  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m6_45 -> m6_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_17 -> m6_19  [color=darkseagreen4, key=1, label="Hangfire.IBootstrapperConfiguration", style=dashed];
m6_18 -> m6_22  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_19 -> m6_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_24 -> m6_26  [color=darkseagreen4, key=1, label="Hangfire.IBootstrapperConfiguration", style=dashed];
m6_25 -> m6_29  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_26 -> m6_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_31 -> m6_35  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m6_32 -> m6_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_1 -> m6_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_37 -> m6_41  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m6_38 -> m6_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_50 -> m6_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_51 -> m6_22  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_52 -> m6_29  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_53 -> m6_35  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m6_54 -> m6_41  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m6_55 -> m6_48  [color=darkseagreen4, key=1, label="Hangfire.JobStorage", style=dashed];
m6_56 -> m6_48  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m8_29 -> m8_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_46 -> m8_375  [color=darkseagreen4, key=1, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>", style=dashed];
m8_238 -> m8_240  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_197 -> m8_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_245 -> m8_252  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_245 -> m8_247  [color=darkseagreen4, key=1, label=statistics, style=dashed];
m8_246 -> m8_266  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_178 -> m8_183  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
m8_179 -> m8_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_125 -> m8_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_125 -> m8_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_125 -> m8_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_125 -> m8_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_125 -> m8_127  [color=darkseagreen4, key=1, label=tuples, style=dashed];
m8_126 -> m8_132  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_128 -> m8_158  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m8_130 -> m8_157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_0 -> m8_2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m8_115 -> m8_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_44 -> m8_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_58 -> m8_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_82 -> m8_84  [color=darkseagreen4, key=1, label=servers, style=dashed];
m8_83 -> m8_87  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_97 -> m8_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_107 -> m8_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_118 -> m8_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_158 -> m8_161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_171 -> m8_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_183 -> m8_186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_211 -> m8_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_211 -> m8_223  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_212 -> m8_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_253 -> m8_263  [color=darkseagreen4, key=1, label=stats, style=dashed];
m8_395 -> m8_397  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m8_396 -> m8_399  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_104 -> m8_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_195 -> m8_283  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_195 -> m8_278  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
m8_270 -> m8_274  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m8_277 -> m8_282  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_277 -> m8_286  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_271 -> m8_274  [color=darkseagreen4, key=1, label=dates, style=dashed];
m8_272 -> m8_276  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_276 -> m8_276  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_203 -> m8_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_9 -> m8_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_70 -> m8_301  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_70 -> m8_297  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
m8_289 -> m8_293  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m8_296 -> m8_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_296 -> m8_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_290 -> m8_293  [color=darkseagreen4, key=1, label=dates, style=dashed];
m8_291 -> m8_295  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_295 -> m8_295  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_232 -> m8_234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_94 -> m8_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_365 -> m8_367  [color=darkseagreen4, key=1, label=data, style=dashed];
m8_78 -> m8_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_41 -> m8_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_55 -> m8_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_72 -> m8_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_190 -> m8_192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_377 -> m8_379  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>", style=dashed];
m8_378 -> m8_385  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_378 -> m8_386  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_379 -> m8_381  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_379 -> m8_385  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_380 -> m8_385  [color=darkseagreen4, key=1, label=dto, style=dashed];
m8_341 -> m8_346  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_341 -> m8_349  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_342 -> m8_352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_343 -> m8_356  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_306 -> m8_309  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m8_306 -> m8_314  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m8_306 -> m8_316  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m8_308 -> m8_325  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_308 -> m8_328  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_308 -> m8_310  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m8_308 -> m8_311  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m8_309 -> m8_311  [color=darkseagreen4, key=1, label=key, style=dashed];
m8_312 -> m8_316  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_312 -> m8_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_313 -> m8_316  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_313 -> m8_317  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_317 -> m8_317  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_65 -> m8_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_166 -> m8_171  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m8_167 -> m8_170  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_35 -> m8_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_406 -> m8_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_29  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_35  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_38  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_65  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_68  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_72  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_75  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_158  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_167  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_171  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_179  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_183  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_190  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_193  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_197  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_200  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_232  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_235  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_238  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_241  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_278  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_297  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_307  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_375  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_417 -> m8_158  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m8_418 -> m8_171  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m8_419 -> m8_183  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
m8_422 -> m8_283  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_423 -> m8_301  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_117 -> m9_119  [color=darkseagreen4, key=1, label=connection, style=dashed];
m9_117 -> m9_120  [color=darkseagreen4, key=1, label=connection, style=dashed];
m9_128 -> m9_130  [color=darkseagreen4, key=1, label=IDbConnection, style=dashed];
m9_17 -> m9_19  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
m9_17 -> m9_20  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m9_17 -> m9_21  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m9_25 -> m9_27  [color=darkseagreen4, key=1, label="System.Linq.Expressions.Expression<System.Action<T>>", style=dashed];
m9_35 -> m9_37  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_46 -> m9_57  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m9_46 -> m9_59  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m9_47 -> m9_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_47 -> m9_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_47 -> m9_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_47 -> m9_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_47 -> m9_50  [color=darkseagreen4, key=1, label=parts, style=dashed];
m9_47 -> m9_51  [color=darkseagreen4, key=1, label=parts, style=dashed];
m9_47 -> m9_55  [color=darkseagreen4, key=1, label=parts, style=dashed];
m9_47 -> m9_56  [color=darkseagreen4, key=1, label=parts, style=dashed];
m9_48 -> m9_51  [color=darkseagreen4, key=1, label=builder, style=dashed];
m9_48 -> m9_52  [color=darkseagreen4, key=1, label=builder, style=dashed];
m9_48 -> m9_53  [color=darkseagreen4, key=1, label=builder, style=dashed];
m9_48 -> m9_56  [color=darkseagreen4, key=1, label=builder, style=dashed];
m9_48 -> m9_57  [color=darkseagreen4, key=1, label=builder, style=dashed];
m9_60 -> m9_62  [color=green, key=1, label=string, style=dashed];
m9_30 -> m9_32  [color=darkseagreen4, key=1, label="System.Linq.Expressions.Expression<System.Action<T>>", style=dashed];
m9_96 -> m9_101  [color=darkseagreen4, key=1, label="System.Action<DbConnection, DbTransaction>", style=dashed];
m9_40 -> m9_42  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_49 -> m9_51  [color=darkseagreen4, key=1, label=alias, style=dashed];
m9_54 -> m9_56  [color=darkseagreen4, key=1, label=alias, style=dashed];
m9_55 -> m9_57  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_109 -> m9_111  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_110 -> m9_112  [color=darkseagreen4, key=1, label=result, style=dashed];
m9_50 -> m9_52  [color=green, key=1, label=string, style=dashed];
m9_15 -> m9_17  [color=darkseagreen4, key=1, label="System.Linq.Expressions.Expression<System.Action>", style=dashed];
m9_2 -> m9_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_2 -> m9_6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m9_2 -> m9_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_2 -> m9_8  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m9_4 -> m9_6  [color=darkseagreen4, key=1, label="System.Linq.Expressions.Expression<System.Action>", style=dashed];
m9_10 -> m9_12  [color=darkseagreen4, key=1, label="System.Linq.Expressions.Expression<System.Action<T>>", style=dashed];
m9_81 -> m9_86  [color=darkseagreen4, key=1, label="System.Action<DbConnection>", style=dashed];
m9_84 -> m9_92  [color=darkseagreen4, key=1, label="System.Func<DbConnection, T>", style=dashed];
m9_176 -> m9_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_176 -> m9_8  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_176 -> m9_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_176 -> m9_24  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_176 -> m9_27  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_176 -> m9_35  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_176 -> m9_42  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_176 -> m9_125  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_176 -> m9_129  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_176 -> m9_133  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_176 -> m9_139  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_176 -> m9_135  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m9_177 -> m9_86  [color=darkseagreen4, key=1, label="System.Action<DbConnection>", style=dashed];
m9_178 -> m9_101  [color=darkseagreen4, key=1, label="System.Action<DbConnection, DbTransaction>", style=dashed];
m11_22 -> m11_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_21 -> m11_25  [color=green, key=1, label="lambda expression", style=dashed];
m11_14 -> m11_18  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_15 -> m11_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_51 -> m11_58  [color=green, key=1, label="lambda expression", style=dashed];
m11_6 -> m11_11  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_7 -> m11_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_0 -> m11_9  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_0 -> m11_10  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_0 -> m11_2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_0 -> m11_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_0 -> m11_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_0 -> m11_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_0 -> m11_11  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_0 -> m11_12  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m11_29 -> m11_11  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_31 -> m11_34  [color=green, key=1, label="lambda expression", style=dashed];
m11_31 -> m11_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_30 -> m11_18  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_32 -> m11_25  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m11_28 -> m11_15  [color=darkseagreen4, key=1, label="HangFire.Redis.DataTypes.RedisWriteOnlyValue", style=dashed];
m11_61 -> m11_31  [color=green, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_20  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_30  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_38  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_41  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_42  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_43  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_44  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_48  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_49  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_52  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m11_61 -> m11_54  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerTimeoutJob", style=dashed];
m12_7 -> m12_10  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m12_7 -> m12_12  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m12_7 -> m12_13  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m12_10 -> m12_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_12 -> m12_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_13 -> m12_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_38 -> m12_10  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m12_38 -> m12_19  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m12_38 -> m12_12  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m12_38 -> m12_27  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m13_453 -> m13_457  [color=green, key=1, label=bool, style=dashed];
m13_454 -> m13_456  [color=green, key=1, label="lambda expression", style=dashed];
m13_769 -> m13_775  [color=green, key=1, label=bool, style=dashed];
m13_771 -> m13_773  [color=green, key=1, label="lambda expression", style=dashed];
m13_536 -> m13_540  [color=green, key=1, label=bool, style=dashed];
m13_537 -> m13_539  [color=green, key=1, label="lambda expression", style=dashed];
m13_441 -> m13_445  [color=green, key=1, label=bool, style=dashed];
m13_442 -> m13_444  [color=green, key=1, label="lambda expression", style=dashed];
m13_636 -> m13_640  [color=green, key=1, label=bool, style=dashed];
m13_636 -> m13_641  [color=green, key=1, label=bool, style=dashed];
m13_637 -> m13_639  [color=green, key=1, label="lambda expression", style=dashed];
m13_839 -> m13_845  [color=green, key=1, label=bool, style=dashed];
m13_841 -> m13_843  [color=green, key=1, label="lambda expression", style=dashed];
m13_907 -> m13_913  [color=green, key=1, label=bool, style=dashed];
m13_909 -> m13_911  [color=green, key=1, label="lambda expression", style=dashed];
m13_479 -> m13_483  [color=green, key=1, label=bool, style=dashed];
m13_480 -> m13_482  [color=green, key=1, label="lambda expression", style=dashed];
m13_548 -> m13_552  [color=green, key=1, label=bool, style=dashed];
m13_549 -> m13_551  [color=green, key=1, label="lambda expression", style=dashed];
m13_679 -> m13_684  [color=green, key=1, label=bool, style=dashed];
m13_680 -> m13_682  [color=green, key=1, label="lambda expression", style=dashed];
m13_27 -> m13_35  [color=green, key=1, label=bool, style=dashed];
m13_29 -> m13_32  [color=green, key=1, label="lambda expression", style=dashed];
m13_825 -> m13_833  [color=green, key=1, label=bool, style=dashed];
m13_826 -> m13_828  [color=green, key=1, label="lambda expression", style=dashed];
m13_2 -> m13_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_510 -> m13_514  [color=green, key=1, label=bool, style=dashed];
m13_511 -> m13_513  [color=green, key=1, label="lambda expression", style=dashed];
m13_327 -> m13_331  [color=green, key=1, label=bool, style=dashed];
m13_328 -> m13_330  [color=green, key=1, label="lambda expression", style=dashed];
m13_379 -> m13_383  [color=green, key=1, label=bool, style=dashed];
m13_380 -> m13_382  [color=green, key=1, label="lambda expression", style=dashed];
m13_691 -> m13_695  [color=green, key=1, label=bool, style=dashed];
m13_691 -> m13_698  [color=green, key=1, label=bool, style=dashed];
m13_692 -> m13_694  [color=green, key=1, label="lambda expression", style=dashed];
m13_212 -> m13_217  [color=green, key=1, label=bool, style=dashed];
m13_212 -> m13_225  [color=green, key=1, label=bool, style=dashed];
m13_217 -> m13_224  [color=green, key=1, label="lambda expression", style=dashed];
m13_213 -> m13_217  [color=green, key=1, label=correctJobQueue, style=dashed];
m13_213 -> m13_215  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m13_213 -> m13_226  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m13_215 -> m13_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_214 -> m13_216  [color=darkseagreen4, key=1, label=correctProvider, style=dashed];
m13_44 -> m13_935  [color=darkseagreen4, key=1, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
m13_933 -> m13_942  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_934 -> m13_936  [color=green, key=1, label=transaction, style=dashed];
m13_606 -> m13_610  [color=green, key=1, label=bool, style=dashed];
m13_607 -> m13_609  [color=green, key=1, label="lambda expression", style=dashed];
m13_179 -> m13_189  [color=green, key=1, label=bool, style=dashed];
m13_181 -> m13_183  [color=green, key=1, label="lambda expression", style=dashed];
m13_524 -> m13_528  [color=green, key=1, label=bool, style=dashed];
m13_525 -> m13_527  [color=green, key=1, label="lambda expression", style=dashed];
m13_704 -> m13_710  [color=green, key=1, label=bool, style=dashed];
m13_706 -> m13_708  [color=green, key=1, label="lambda expression", style=dashed];
m13_32 -> m13_35  [color=green, key=1, label=SqlConnection, style=dashed];
m13_35 -> m13_50  [color=green, key=1, label="lambda expression", style=dashed];
m13_33 -> m13_35  [color=green, key=1, label=jobId, style=dashed];
m13_33 -> m13_51  [color=green, key=1, label=jobId, style=dashed];
m13_59 -> m13_62  [color=green, key=1, label=SqlConnection, style=dashed];
m13_62 -> m13_69  [color=green, key=1, label="lambda expression", style=dashed];
m13_60 -> m13_62  [color=green, key=1, label=jobId, style=dashed];
m13_60 -> m13_70  [color=green, key=1, label=jobId, style=dashed];
m13_77 -> m13_84  [color=green, key=1, label=SqlConnection, style=dashed];
m13_84 -> m13_110  [color=green, key=1, label="lambda expression", style=dashed];
m13_78 -> m13_84  [color=green, key=1, label=jobId, style=dashed];
m13_78 -> m13_111  [color=green, key=1, label=jobId, style=dashed];
m13_78 -> m13_92  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m13_80 -> m13_84  [color=green, key=1, label=state, style=dashed];
m13_80 -> m13_111  [color=green, key=1, label=state, style=dashed];
m13_80 -> m13_82  [color=darkseagreen4, key=1, label=state, style=dashed];
m13_80 -> m13_83  [color=darkseagreen4, key=1, label=state, style=dashed];
m13_83 -> m13_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_85 -> m13_87  [color=darkseagreen4, key=1, label=job, style=dashed];
m13_119 -> m13_124  [color=green, key=1, label=jobId, style=dashed];
m13_119 -> m13_143  [color=green, key=1, label=jobId, style=dashed];
m13_118 -> m13_124  [color=green, key=1, label=SqlConnection, style=dashed];
m13_124 -> m13_142  [color=green, key=1, label="lambda expression", style=dashed];
m13_120 -> m13_124  [color=green, key=1, label=state, style=dashed];
m13_120 -> m13_122  [color=green, key=1, label=state, style=dashed];
m13_120 -> m13_123  [color=green, key=1, label=state, style=dashed];
m13_120 -> m13_143  [color=green, key=1, label=state, style=dashed];
m13_123 -> m13_139  [color=green, key=1, label="lambda expression", style=dashed];
m13_125 -> m13_127  [color=green, key=1, label=job, style=dashed];
m13_128 -> m13_130  [color=green, key=1, label=jobState, style=dashed];
m13_128 -> m13_131  [color=green, key=1, label=jobState, style=dashed];
m13_121 -> m13_133  [color=green, key=1, label="lambda expression", style=dashed];
m13_122 -> m13_136  [color=green, key=1, label="lambda expression", style=dashed];
m13_149 -> m13_155  [color=green, key=1, label=SqlConnection, style=dashed];
m13_155 -> m13_175  [color=green, key=1, label="lambda expression", style=dashed];
m13_150 -> m13_155  [color=green, key=1, label=jobId, style=dashed];
m13_150 -> m13_176  [color=green, key=1, label=jobId, style=dashed];
m13_150 -> m13_160  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m13_151 -> m13_155  [color=green, key=1, label=state, style=dashed];
m13_151 -> m13_176  [color=green, key=1, label=state, style=dashed];
m13_151 -> m13_153  [color=darkseagreen4, key=1, label=state, style=dashed];
m13_151 -> m13_154  [color=darkseagreen4, key=1, label=state, style=dashed];
m13_154 -> m13_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_156 -> m13_158  [color=darkseagreen4, key=1, label=job, style=dashed];
m13_184 -> m13_189  [color=green, key=1, label=jobId, style=dashed];
m13_184 -> m13_210  [color=green, key=1, label=jobId, style=dashed];
m13_184 -> m13_194  [color=green, key=1, label=jobId, style=dashed];
m13_183 -> m13_189  [color=green, key=1, label=SqlConnection, style=dashed];
m13_189 -> m13_209  [color=green, key=1, label="lambda expression", style=dashed];
m13_185 -> m13_189  [color=green, key=1, label=state, style=dashed];
m13_185 -> m13_187  [color=green, key=1, label=state, style=dashed];
m13_185 -> m13_188  [color=green, key=1, label=state, style=dashed];
m13_185 -> m13_210  [color=green, key=1, label=state, style=dashed];
m13_188 -> m13_206  [color=green, key=1, label="lambda expression", style=dashed];
m13_190 -> m13_192  [color=green, key=1, label=job, style=dashed];
m13_193 -> m13_195  [color=green, key=1, label=jobState, style=dashed];
m13_193 -> m13_196  [color=green, key=1, label=jobState, style=dashed];
m13_193 -> m13_197  [color=green, key=1, label=jobState, style=dashed];
m13_193 -> m13_198  [color=green, key=1, label=jobState, style=dashed];
m13_186 -> m13_200  [color=green, key=1, label="lambda expression", style=dashed];
m13_187 -> m13_203  [color=green, key=1, label="lambda expression", style=dashed];
m13_225 -> m13_229  [color=green, key=1, label="lambda expression", style=dashed];
m13_226 -> m13_233  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_244 -> m13_250  [color=green, key=1, label="lambda expression", style=dashed];
m13_245 -> m13_247  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_245 -> m13_248  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_258 -> m13_268  [color=green, key=1, label="lambda expression", style=dashed];
m13_259 -> m13_261  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_259 -> m13_262  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_276 -> m13_280  [color=green, key=1, label="lambda expression", style=dashed];
m13_280 -> m13_282  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_288 -> m13_294  [color=green, key=1, label="lambda expression", style=dashed];
m13_289 -> m13_291  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_289 -> m13_292  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_302 -> m13_311  [color=green, key=1, label="lambda expression", style=dashed];
m13_303 -> m13_305  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_303 -> m13_306  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_319 -> m13_323  [color=green, key=1, label="lambda expression", style=dashed];
m13_323 -> m13_325  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_331 -> m13_337  [color=green, key=1, label="lambda expression", style=dashed];
m13_332 -> m13_334  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_332 -> m13_335  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_345 -> m13_349  [color=green, key=1, label="lambda expression", style=dashed];
m13_349 -> m13_351  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_357 -> m13_361  [color=green, key=1, label="lambda expression", style=dashed];
m13_361 -> m13_363  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_369 -> m13_375  [color=green, key=1, label="lambda expression", style=dashed];
m13_370 -> m13_372  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_370 -> m13_373  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_383 -> m13_387  [color=green, key=1, label="lambda expression", style=dashed];
m13_387 -> m13_389  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_395 -> m13_399  [color=green, key=1, label="lambda expression", style=dashed];
m13_399 -> m13_401  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_408 -> m13_412  [color=green, key=1, label="lambda expression", style=dashed];
m13_412 -> m13_414  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_420 -> m13_424  [color=green, key=1, label="lambda expression", style=dashed];
m13_424 -> m13_426  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_432 -> m13_437  [color=green, key=1, label="lambda expression", style=dashed];
m13_433 -> m13_435  [color=darkseagreen4, key=1, label=record, style=dashed];
m13_445 -> m13_449  [color=green, key=1, label="lambda expression", style=dashed];
m13_449 -> m13_451  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_457 -> m13_461  [color=green, key=1, label="lambda expression", style=dashed];
m13_461 -> m13_463  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_461 -> m13_464  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_471 -> m13_475  [color=green, key=1, label="lambda expression", style=dashed];
m13_475 -> m13_477  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_483 -> m13_487  [color=green, key=1, label="lambda expression", style=dashed];
m13_487 -> m13_489  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_495 -> m13_502  [color=green, key=1, label="lambda expression", style=dashed];
m13_496 -> m13_498  [color=darkseagreen4, key=1, label=records, style=dashed];
m13_496 -> m13_499  [color=darkseagreen4, key=1, label=records, style=dashed];
m13_502 -> m13_504  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_502 -> m13_505  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_502 -> m13_506  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_502 -> m13_507  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_514 -> m13_518  [color=green, key=1, label="lambda expression", style=dashed];
m13_518 -> m13_520  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_518 -> m13_521  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_518 -> m13_522  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_528 -> m13_532  [color=green, key=1, label="lambda expression", style=dashed];
m13_532 -> m13_534  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_540 -> m13_544  [color=green, key=1, label="lambda expression", style=dashed];
m13_544 -> m13_546  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_552 -> m13_556  [color=green, key=1, label="lambda expression", style=dashed];
m13_556 -> m13_558  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m13_563 -> m13_568  [color=green, key=1, label=SqlConnection, style=dashed];
m13_564 -> m13_567  [color=green, key=1, label="lambda expression", style=dashed];
m13_568 -> m13_570  [color=green, key=1, label="lambda expression", style=dashed];
m13_577 -> m13_582  [color=green, key=1, label=SqlConnection, style=dashed];
m13_578 -> m13_581  [color=green, key=1, label="lambda expression", style=dashed];
m13_582 -> m13_584  [color=green, key=1, label="lambda expression", style=dashed];
m13_591 -> m13_597  [color=green, key=1, label="lambda expression", style=dashed];
m13_592 -> m13_600  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_592 -> m13_603  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_592 -> m13_594  [color=darkseagreen4, key=1, label=result, style=dashed];
m13_610 -> m13_614  [color=green, key=1, label="lambda expression", style=dashed];
m13_611 -> m13_617  [color=green, key=1, label="lambda expression", style=dashed];
m13_611 -> m13_620  [color=green, key=1, label="lambda expression", style=dashed];
m13_626 -> m13_630  [color=green, key=1, label=SqlConnection, style=dashed];
m13_627 -> m13_629  [color=green, key=1, label="lambda expression", style=dashed];
m13_630 -> m13_632  [color=green, key=1, label="lambda expression", style=dashed];
m13_639 -> m13_641  [color=green, key=1, label=SqlConnection, style=dashed];
m13_640 -> m13_645  [color=green, key=1, label="lambda expression", style=dashed];
m13_641 -> m13_648  [color=green, key=1, label="lambda expression", style=dashed];
m13_654 -> m13_659  [color=green, key=1, label=SqlConnection, style=dashed];
m13_655 -> m13_658  [color=green, key=1, label="lambda expression", style=dashed];
m13_659 -> m13_661  [color=green, key=1, label="lambda expression", style=dashed];
m13_669 -> m13_674  [color=green, key=1, label=SqlConnection, style=dashed];
m13_670 -> m13_673  [color=green, key=1, label="lambda expression", style=dashed];
m13_674 -> m13_676  [color=green, key=1, label="lambda expression", style=dashed];
m13_682 -> m13_684  [color=green, key=1, label=SqlConnection, style=dashed];
m13_684 -> m13_688  [color=green, key=1, label="lambda expression", style=dashed];
m13_683 -> m13_689  [color=green, key=1, label=items, style=dashed];
m13_683 -> m13_686  [color=darkseagreen4, key=1, label=items, style=dashed];
m13_694 -> m13_698  [color=green, key=1, label=SqlConnection, style=dashed];
m13_695 -> m13_697  [color=green, key=1, label="lambda expression", style=dashed];
m13_698 -> m13_700  [color=green, key=1, label="lambda expression", style=dashed];
m13_708 -> m13_710  [color=green, key=1, label=SqlConnection, style=dashed];
m13_710 -> m13_715  [color=green, key=1, label="lambda expression", style=dashed];
m13_721 -> m13_726  [color=green, key=1, label=SqlConnection, style=dashed];
m13_722 -> m13_725  [color=green, key=1, label="lambda expression", style=dashed];
m13_726 -> m13_728  [color=green, key=1, label="lambda expression", style=dashed];
m13_737 -> m13_739  [color=green, key=1, label=SqlConnection, style=dashed];
m13_739 -> m13_745  [color=green, key=1, label="lambda expression", style=dashed];
m13_740 -> m13_748  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_740 -> m13_751  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_740 -> m13_742  [color=darkseagreen4, key=1, label=records, style=dashed];
m13_740 -> m13_743  [color=darkseagreen4, key=1, label=records, style=dashed];
m13_757 -> m13_762  [color=green, key=1, label=SqlConnection, style=dashed];
m13_758 -> m13_761  [color=green, key=1, label="lambda expression", style=dashed];
m13_762 -> m13_764  [color=green, key=1, label="lambda expression", style=dashed];
m13_773 -> m13_775  [color=green, key=1, label=SqlConnection, style=dashed];
m13_775 -> m13_781  [color=green, key=1, label="lambda expression", style=dashed];
m13_776 -> m13_784  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_776 -> m13_787  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_776 -> m13_778  [color=darkseagreen4, key=1, label=records, style=dashed];
m13_776 -> m13_779  [color=darkseagreen4, key=1, label=records, style=dashed];
m13_793 -> m13_798  [color=green, key=1, label=SqlConnection, style=dashed];
m13_794 -> m13_797  [color=green, key=1, label="lambda expression", style=dashed];
m13_798 -> m13_800  [color=green, key=1, label="lambda expression", style=dashed];
m13_808 -> m13_810  [color=green, key=1, label=SqlConnection, style=dashed];
m13_810 -> m13_816  [color=green, key=1, label="lambda expression", style=dashed];
m13_811 -> m13_819  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_811 -> m13_822  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_811 -> m13_813  [color=darkseagreen4, key=1, label=records, style=dashed];
m13_811 -> m13_814  [color=darkseagreen4, key=1, label=records, style=dashed];
m13_828 -> m13_833  [color=green, key=1, label=SqlConnection, style=dashed];
m13_829 -> m13_832  [color=green, key=1, label="lambda expression", style=dashed];
m13_833 -> m13_835  [color=green, key=1, label="lambda expression", style=dashed];
m13_843 -> m13_845  [color=green, key=1, label=SqlConnection, style=dashed];
m13_845 -> m13_850  [color=green, key=1, label="lambda expression", style=dashed];
m13_846 -> m13_853  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_846 -> m13_856  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_846 -> m13_848  [color=darkseagreen4, key=1, label=records, style=dashed];
m13_862 -> m13_867  [color=green, key=1, label=SqlConnection, style=dashed];
m13_863 -> m13_866  [color=green, key=1, label="lambda expression", style=dashed];
m13_867 -> m13_869  [color=green, key=1, label="lambda expression", style=dashed];
m13_877 -> m13_879  [color=green, key=1, label=SqlConnection, style=dashed];
m13_879 -> m13_884  [color=green, key=1, label="lambda expression", style=dashed];
m13_880 -> m13_887  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_880 -> m13_890  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_880 -> m13_882  [color=darkseagreen4, key=1, label=records, style=dashed];
m13_896 -> m13_901  [color=green, key=1, label=SqlConnection, style=dashed];
m13_897 -> m13_900  [color=green, key=1, label="lambda expression", style=dashed];
m13_901 -> m13_903  [color=green, key=1, label="lambda expression", style=dashed];
m13_911 -> m13_913  [color=green, key=1, label=SqlConnection, style=dashed];
m13_913 -> m13_918  [color=green, key=1, label="lambda expression", style=dashed];
m13_914 -> m13_921  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_914 -> m13_924  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_914 -> m13_916  [color=darkseagreen4, key=1, label=records, style=dashed];
m13_88 -> m13_90  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
m13_91 -> m13_93  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m13_91 -> m13_94  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m13_91 -> m13_95  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m13_91 -> m13_96  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m13_81 -> m13_100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_82 -> m13_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_159 -> m13_161  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m13_159 -> m13_162  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m13_159 -> m13_163  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m13_159 -> m13_164  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m13_152 -> m13_166  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_153 -> m13_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m13_263 -> m13_265  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m13_307 -> m13_309  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m13_893 -> m13_901  [color=green, key=1, label=bool, style=dashed];
m13_894 -> m13_896  [color=green, key=1, label="lambda expression", style=dashed];
m13_391 -> m13_395  [color=green, key=1, label=bool, style=dashed];
m13_392 -> m13_394  [color=green, key=1, label="lambda expression", style=dashed];
m13_754 -> m13_762  [color=green, key=1, label=bool, style=dashed];
m13_755 -> m13_757  [color=green, key=1, label="lambda expression", style=dashed];
m13_416 -> m13_420  [color=green, key=1, label=bool, style=dashed];
m13_417 -> m13_419  [color=green, key=1, label="lambda expression", style=dashed];
m13_859 -> m13_867  [color=green, key=1, label=bool, style=dashed];
m13_860 -> m13_862  [color=green, key=1, label="lambda expression", style=dashed];
m13_718 -> m13_726  [color=green, key=1, label=bool, style=dashed];
m13_719 -> m13_721  [color=green, key=1, label="lambda expression", style=dashed];
m13_272 -> m13_276  [color=green, key=1, label=bool, style=dashed];
m13_273 -> m13_275  [color=green, key=1, label="lambda expression", style=dashed];
m13_587 -> m13_591  [color=green, key=1, label=bool, style=dashed];
m13_588 -> m13_590  [color=green, key=1, label="lambda expression", style=dashed];
m13_254 -> m13_258  [color=green, key=1, label=bool, style=dashed];
m13_255 -> m13_257  [color=green, key=1, label="lambda expression", style=dashed];
m13_560 -> m13_568  [color=green, key=1, label=bool, style=dashed];
m13_561 -> m13_563  [color=green, key=1, label="lambda expression", style=dashed];
m13_404 -> m13_408  [color=green, key=1, label=bool, style=dashed];
m13_405 -> m13_407  [color=green, key=1, label="lambda expression", style=dashed];
m13_574 -> m13_582  [color=green, key=1, label=bool, style=dashed];
m13_575 -> m13_577  [color=green, key=1, label="lambda expression", style=dashed];
m13_353 -> m13_357  [color=green, key=1, label=bool, style=dashed];
m13_354 -> m13_356  [color=green, key=1, label="lambda expression", style=dashed];
m13_341 -> m13_345  [color=green, key=1, label=bool, style=dashed];
m13_342 -> m13_344  [color=green, key=1, label="lambda expression", style=dashed];
m13_220 -> m13_928  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m13_315 -> m13_319  [color=green, key=1, label=bool, style=dashed];
m13_316 -> m13_318  [color=green, key=1, label="lambda expression", style=dashed];
m13_804 -> m13_810  [color=green, key=1, label=bool, style=dashed];
m13_806 -> m13_808  [color=green, key=1, label="lambda expression", style=dashed];
m13_55 -> m13_62  [color=green, key=1, label=bool, style=dashed];
m13_57 -> m13_59  [color=green, key=1, label="lambda expression", style=dashed];
m13_491 -> m13_495  [color=green, key=1, label=bool, style=dashed];
m13_492 -> m13_494  [color=green, key=1, label="lambda expression", style=dashed];
m13_873 -> m13_879  [color=green, key=1, label=bool, style=dashed];
m13_875 -> m13_877  [color=green, key=1, label="lambda expression", style=dashed];
m13_467 -> m13_471  [color=green, key=1, label=bool, style=dashed];
m13_468 -> m13_470  [color=green, key=1, label="lambda expression", style=dashed];
m13_666 -> m13_674  [color=green, key=1, label=bool, style=dashed];
m13_667 -> m13_669  [color=green, key=1, label="lambda expression", style=dashed];
m13_298 -> m13_302  [color=green, key=1, label=bool, style=dashed];
m13_299 -> m13_301  [color=green, key=1, label="lambda expression", style=dashed];
m13_15 -> m13_20  [color=green, key=1, label="lambda expression", style=dashed];
m13_651 -> m13_659  [color=green, key=1, label=bool, style=dashed];
m13_652 -> m13_654  [color=green, key=1, label="lambda expression", style=dashed];
m13_284 -> m13_288  [color=green, key=1, label=bool, style=dashed];
m13_285 -> m13_287  [color=green, key=1, label="lambda expression", style=dashed];
m13_428 -> m13_432  [color=green, key=1, label=bool, style=dashed];
m13_429 -> m13_431  [color=green, key=1, label="lambda expression", style=dashed];
m13_623 -> m13_627  [color=green, key=1, label=bool, style=dashed];
m13_623 -> m13_630  [color=green, key=1, label=bool, style=dashed];
m13_624 -> m13_626  [color=green, key=1, label="lambda expression", style=dashed];
m13_790 -> m13_798  [color=green, key=1, label=bool, style=dashed];
m13_791 -> m13_793  [color=green, key=1, label="lambda expression", style=dashed];
m13_73 -> m13_84  [color=green, key=1, label=bool, style=dashed];
m13_75 -> m13_77  [color=green, key=1, label="lambda expression", style=dashed];
m13_240 -> m13_244  [color=green, key=1, label=bool, style=dashed];
m13_241 -> m13_243  [color=green, key=1, label="lambda expression", style=dashed];
m13_365 -> m13_369  [color=green, key=1, label=bool, style=dashed];
m13_366 -> m13_368  [color=green, key=1, label="lambda expression", style=dashed];
m13_114 -> m13_124  [color=green, key=1, label=bool, style=dashed];
m13_116 -> m13_118  [color=green, key=1, label="lambda expression", style=dashed];
m13_145 -> m13_155  [color=green, key=1, label=bool, style=dashed];
m13_147 -> m13_149  [color=green, key=1, label="lambda expression", style=dashed];
m13_733 -> m13_739  [color=green, key=1, label=bool, style=dashed];
m13_735 -> m13_737  [color=green, key=1, label="lambda expression", style=dashed];
m13_948 -> m13_35  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_62  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_84  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_124  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_155  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_189  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_217  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_225  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_244  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_258  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_276  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_288  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_302  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_319  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_331  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_345  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_357  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_369  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_383  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_395  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_408  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_420  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_432  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_445  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_457  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_471  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_483  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_495  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_514  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_528  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_540  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_552  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_568  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_582  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_591  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_610  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_624  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_627  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_630  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_640  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_641  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_659  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_674  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_684  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_692  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_695  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_698  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_710  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_726  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_739  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_762  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_775  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_798  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_810  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_833  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_845  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_867  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_879  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_901  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_913  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_216  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_948 -> m13_933  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m13_950 -> m13_35  [color=green, key=1, label=bool, style=dashed];
m13_951 -> m13_51  [color=green, key=1, label=jobId, style=dashed];
m13_953 -> m13_62  [color=green, key=1, label=bool, style=dashed];
m13_954 -> m13_70  [color=green, key=1, label=jobId, style=dashed];
m13_956 -> m13_84  [color=green, key=1, label=bool, style=dashed];
m13_957 -> m13_111  [color=green, key=1, label=jobId, style=dashed];
m13_958 -> m13_111  [color=green, key=1, label=state, style=dashed];
m13_960 -> m13_124  [color=green, key=1, label=bool, style=dashed];
m13_961 -> m13_143  [color=green, key=1, label=jobId, style=dashed];
m13_962 -> m13_143  [color=green, key=1, label=state, style=dashed];
m13_964 -> m13_155  [color=green, key=1, label=bool, style=dashed];
m13_965 -> m13_176  [color=green, key=1, label=jobId, style=dashed];
m13_966 -> m13_176  [color=green, key=1, label=state, style=dashed];
m13_968 -> m13_189  [color=green, key=1, label=bool, style=dashed];
m13_969 -> m13_210  [color=green, key=1, label=jobId, style=dashed];
m13_970 -> m13_210  [color=green, key=1, label=state, style=dashed];
m13_971 -> m13_225  [color=green, key=1, label=bool, style=dashed];
m13_973 -> m13_244  [color=green, key=1, label=bool, style=dashed];
m13_974 -> m13_258  [color=green, key=1, label=bool, style=dashed];
m13_975 -> m13_276  [color=green, key=1, label=bool, style=dashed];
m13_976 -> m13_288  [color=green, key=1, label=bool, style=dashed];
m13_977 -> m13_302  [color=green, key=1, label=bool, style=dashed];
m13_978 -> m13_319  [color=green, key=1, label=bool, style=dashed];
m13_979 -> m13_331  [color=green, key=1, label=bool, style=dashed];
m13_980 -> m13_345  [color=green, key=1, label=bool, style=dashed];
m13_981 -> m13_357  [color=green, key=1, label=bool, style=dashed];
m13_982 -> m13_369  [color=green, key=1, label=bool, style=dashed];
m13_983 -> m13_383  [color=green, key=1, label=bool, style=dashed];
m13_984 -> m13_395  [color=green, key=1, label=bool, style=dashed];
m13_985 -> m13_408  [color=green, key=1, label=bool, style=dashed];
m13_986 -> m13_420  [color=green, key=1, label=bool, style=dashed];
m13_987 -> m13_432  [color=green, key=1, label=bool, style=dashed];
m13_988 -> m13_445  [color=green, key=1, label=bool, style=dashed];
m13_989 -> m13_457  [color=green, key=1, label=bool, style=dashed];
m13_990 -> m13_471  [color=green, key=1, label=bool, style=dashed];
m13_991 -> m13_483  [color=green, key=1, label=bool, style=dashed];
m13_992 -> m13_495  [color=green, key=1, label=bool, style=dashed];
m13_993 -> m13_514  [color=green, key=1, label=bool, style=dashed];
m13_994 -> m13_528  [color=green, key=1, label=bool, style=dashed];
m13_995 -> m13_540  [color=green, key=1, label=bool, style=dashed];
m13_996 -> m13_552  [color=green, key=1, label=bool, style=dashed];
m13_997 -> m13_568  [color=green, key=1, label=bool, style=dashed];
m13_998 -> m13_568  [color=green, key=1, label=SqlConnection, style=dashed];
m13_999 -> m13_582  [color=green, key=1, label=bool, style=dashed];
m13_1000 -> m13_582  [color=green, key=1, label=SqlConnection, style=dashed];
m13_1001 -> m13_591  [color=green, key=1, label=bool, style=dashed];
m13_1002 -> m13_610  [color=green, key=1, label=bool, style=dashed];
m13_1003 -> m13_627  [color=green, key=1, label=bool, style=dashed];
m13_1003 -> m13_630  [color=green, key=1, label=bool, style=dashed];
m13_1004 -> m13_630  [color=green, key=1, label=SqlConnection, style=dashed];
m13_1005 -> m13_640  [color=green, key=1, label=bool, style=dashed];
m13_1005 -> m13_641  [color=green, key=1, label=bool, style=dashed];
m13_1006 -> m13_659  [color=green, key=1, label=bool, style=dashed];
m13_1007 -> m13_659  [color=green, key=1, label=SqlConnection, style=dashed];
m13_1008 -> m13_674  [color=green, key=1, label=bool, style=dashed];
m13_1009 -> m13_674  [color=green, key=1, label=SqlConnection, style=dashed];
m13_1010 -> m13_684  [color=green, key=1, label=bool, style=dashed];
m13_1011 -> m13_689  [color=green, key=1, label=items, style=dashed];
m13_1012 -> m13_695  [color=green, key=1, label=bool, style=dashed];
m13_1012 -> m13_698  [color=green, key=1, label=bool, style=dashed];
m13_1013 -> m13_698  [color=green, key=1, label=SqlConnection, style=dashed];
m13_1015 -> m13_710  [color=green, key=1, label=bool, style=dashed];
m13_1016 -> m13_726  [color=green, key=1, label=bool, style=dashed];
m13_1017 -> m13_726  [color=green, key=1, label=SqlConnection, style=dashed];
m13_1019 -> m13_739  [color=green, key=1, label=bool, style=dashed];
m13_1020 -> m13_762  [color=green, key=1, label=bool, style=dashed];
m13_1021 -> m13_762  [color=green, key=1, label=SqlConnection, style=dashed];
m13_1023 -> m13_775  [color=green, key=1, label=bool, style=dashed];
m13_1024 -> m13_798  [color=green, key=1, label=bool, style=dashed];
m13_1025 -> m13_798  [color=green, key=1, label=SqlConnection, style=dashed];
m13_1027 -> m13_810  [color=green, key=1, label=bool, style=dashed];
m13_1028 -> m13_833  [color=green, key=1, label=bool, style=dashed];
m13_1029 -> m13_833  [color=green, key=1, label=SqlConnection, style=dashed];
m13_1031 -> m13_845  [color=green, key=1, label=bool, style=dashed];
m13_1032 -> m13_867  [color=green, key=1, label=bool, style=dashed];
m13_1033 -> m13_867  [color=green, key=1, label=SqlConnection, style=dashed];
m13_1035 -> m13_879  [color=green, key=1, label=bool, style=dashed];
m13_1036 -> m13_901  [color=green, key=1, label=bool, style=dashed];
m13_1037 -> m13_901  [color=green, key=1, label=SqlConnection, style=dashed];
m13_1039 -> m13_913  [color=green, key=1, label=bool, style=dashed];
m13_972 -> m13_226  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
}
