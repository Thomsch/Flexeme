digraph  {
m0_8 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.ExpireJob_SetsExpirationDateForAllRelatedKeys()", span="20-20", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.ExpireJob_SetsExpirationDateForAllRelatedKeys()", file="EnqueuedState.feature.cs"];
m0_9 [label="UseConnection(redis =>\r\n            {\r\n                // Arrange\r\n                redis.SetEntry(''hangfire:job:my-job'', ''job'');\r\n                redis.SetEntry(''hangfire:job:my-job:state'', ''state'');\r\n                redis.SetEntry(''hangfire:job:my-job:history'', ''history'');\r\n\r\n                // Act\r\n                Commit(redis, x => x.ExpireJob(''my-job'', TimeSpan.FromDays(1)));\r\n\r\n                // Assert\r\n                var jobEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job'');\r\n                var stateEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job:state'');\r\n                var historyEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job:state'');\r\n\r\n                Assert.True(TimeSpan.FromHours(23) < jobEntryTtl && jobEntryTtl < TimeSpan.FromHours(25));\r\n                Assert.True(TimeSpan.FromHours(23) < stateEntryTtl && stateEntryTtl < TimeSpan.FromHours(25));\r\n                Assert.True(TimeSpan.FromHours(23) < historyEntryTtl && historyEntryTtl < TimeSpan.FromHours(25));\r\n            })", span="22-40", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.ExpireJob_SetsExpirationDateForAllRelatedKeys()", file="EnqueuedState.feature.cs"];
m0_10 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.ExpireJob_SetsExpirationDateForAllRelatedKeys()", span="20-20", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.ExpireJob_SetsExpirationDateForAllRelatedKeys()", file="EnqueuedState.feature.cs"];
m0_11 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="EnqueuedState.feature.cs"];
m0_36 [label="Exit lambda expression", span="111-111", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_35 [label="new BackgroundJobServer(options)", span="111-111", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_34 [label="Entry lambda expression", span="111-111", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_26 [label="configuration.UseServer(() => new BackgroundJobServer(options))", span="96-96", cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="EnqueuedState.feature.cs", color=red, community=0];
m0_241 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="149-149", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="EnqueuedState.feature.cs"];
m0_183 [label="Entry Unk.EnqueueItemOnList", span="", cluster="Unk.EnqueueItemOnList", file="EnqueuedState.feature.cs"];
m0_292 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", span="173-173", cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="EnqueuedState.feature.cs"];
m0_16 [label="Commit(redis, x => x.ExpireJob(''my-job'', TimeSpan.FromDays(1)))", span="30-30", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_45 [label="configuration.UseServer(() => new BackgroundJobServer(options, storage))", span="146-146", cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", file="EnqueuedState.feature.cs"];
m0_249 [label="Entry Unk.SortedSetContainsItem", span="", cluster="Unk.SortedSetContainsItem", file="EnqueuedState.feature.cs"];
m0_201 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate()", span="196-196", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate()", file="EnqueuedState.feature.cs"];
m0_202 [label="UseConnection(redis =>\r\n            {\r\n                redis.SetEntry(''hangfire:entry'', ''3'');\r\n\r\n                Commit(redis, x => x.IncrementCounter(''entry'', TimeSpan.FromDays(1)));\r\n\r\n                var entryTtl = redis.GetTimeToLive(''hangfire:entry'');\r\n                Assert.Equal(''4'', redis.GetValue(''hangfire:entry''));\r\n                Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25));\r\n            })", span="198-207", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate()", file="EnqueuedState.feature.cs"];
m0_203 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate()", span="196-196", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate()", file="EnqueuedState.feature.cs"];
m0_214 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="138-138", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="EnqueuedState.feature.cs"];
m0_324 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", span="185-185", cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="EnqueuedState.feature.cs"];
m0_7 [label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer()", span="49-49", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer()", file="EnqueuedState.feature.cs"];
m0_49 [label="Exit lambda expression", span="146-146", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_50 [label=options, span="", cluster="Unk.Equal", file="EnqueuedState.feature.cs"];
m0_27 [label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", span="85-85", cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="EnqueuedState.feature.cs"];
m0_330 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="EnqueuedState.feature.cs"];
m0_78 [label="Entry Unk.SetEntryInHash", span="", cluster="Unk.SetEntryInHash", file="EnqueuedState.feature.cs"];
m0_175 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_PrependsListWithJob()", span="169-169", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_PrependsListWithJob()", file="EnqueuedState.feature.cs"];
m0_176 [label="UseConnection(redis =>\r\n            {\r\n                redis.EnqueueItemOnList(''hangfire:queue:critical'', ''another-job'');\r\n\r\n                Commit(redis, x => x.AddToQueue(''critical'', ''my-job''));\r\n\r\n                Assert.Equal(''my-job'', redis.GetItemFromList(''hangfire:queue:critical'', 0));\r\n            })", span="171-178", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_PrependsListWithJob()", file="EnqueuedState.feature.cs"];
m0_177 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_PrependsListWithJob()", span="169-169", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_PrependsListWithJob()", file="EnqueuedState.feature.cs"];
m0_61 [label="Entry Unk.SetJobState", span="", cluster="Unk.SetJobState", file="EnqueuedState.feature.cs"];
m0_64 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_RewritesStateEntry()", span="63-63", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_RewritesStateEntry()", file="EnqueuedState.feature.cs"];
m0_63 [label="UseConnection(redis =>\r\n            {\r\n                // Arrange\r\n                redis.SetEntryInHash(''hangfire:job:my-job:state'', ''OldName'', ''OldValue'');\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.SerializeData()).Returns(\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''Name'', ''Value'' }\r\n                    });\r\n                state.Setup(x => x.Name).Returns(''my-state'');\r\n                state.Setup(x => x.Reason).Returns(''my-reason'');\r\n\r\n                // Act\r\n                Commit(redis, x => x.SetJobState(''my-job'', state.Object));\r\n\r\n                // Assert\r\n                var stateHash = redis.GetAllEntriesFromHash(''hangfire:job:my-job:state'');\r\n                Assert.False(stateHash.ContainsKey(''OldName''));\r\n                Assert.Equal(''my-state'', stateHash[''State'']);\r\n                Assert.Equal(''my-reason'', stateHash[''Reason'']);\r\n                Assert.Equal(''Value'', stateHash[''Name'']);\r\n            })", span="65-88", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_RewritesStateEntry()", file="EnqueuedState.feature.cs"];
m0_62 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_RewritesStateEntry()", span="63-63", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_RewritesStateEntry()", file="EnqueuedState.feature.cs"];
m0_24 [label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", span="85-85", cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="EnqueuedState.feature.cs"];
m0_267 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromSet_RemoveSpecifiedItemFromSortedSet()", span="263-263", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromSet_RemoveSpecifiedItemFromSortedSet()", file="EnqueuedState.feature.cs"];
m0_268 [label="UseConnection(redis =>\r\n            {\r\n                redis.AddItemToSortedSet(''hangfire:my-set'', ''my-value'');\r\n\r\n                Commit(redis, x => x.RemoveFromSet(''my-set'', ''my-value''));\r\n\r\n                Assert.False(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''));\r\n            })", span="265-272", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromSet_RemoveSpecifiedItemFromSortedSet()", file="EnqueuedState.feature.cs"];
m0_269 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromSet_RemoveSpecifiedItemFromSortedSet()", span="263-263", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromSet_RemoveSpecifiedItemFromSortedSet()", file="EnqueuedState.feature.cs"];
m0_25 [label="var options = new BackgroundJobServerOptions\r\n            {\r\n                WorkerCount = workerCount,\r\n                Queues = queues\r\n            }", span="90-94", cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, int, params string[])", file="EnqueuedState.feature.cs", color=red, community=0];
m0_325 [label="var transaction = new RedisWriteOnlyTransaction(redis.CreateTransaction())", span="324-324", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", file="EnqueuedState.feature.cs"];
m0_326 [label="action(transaction)", span="326-326", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", file="EnqueuedState.feature.cs"];
m0_327 [label="transaction.Commit()", span="327-327", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", file="EnqueuedState.feature.cs"];
m0_328 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", span="322-322", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", file="EnqueuedState.feature.cs"];
m0_333 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", span="331-331", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", file="EnqueuedState.feature.cs"];
m0_335 [label="action(redis)", span="335-335", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", file="EnqueuedState.feature.cs"];
m0_334 [label="var redis = RedisUtils.CreateClient()", span="333-333", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", file="EnqueuedState.feature.cs"];
m0_336 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", span="331-331", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", file="EnqueuedState.feature.cs"];
m0_162 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_AddsSpecifiedJobToTheQueue()", span="157-157", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_AddsSpecifiedJobToTheQueue()", file="EnqueuedState.feature.cs"];
m0_163 [label="UseConnection(redis =>\r\n            {\r\n                Commit(redis, x => x.AddToQueue(''critical'', ''my-job''));\r\n\r\n                Assert.True(redis.SetContainsItem(''hangfire:queues'', ''critical''));\r\n                Assert.Equal(''my-job'', redis.GetItemFromList(''hangfire:queue:critical'', 0));\r\n            })", span="159-165", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_AddsSpecifiedJobToTheQueue()", file="EnqueuedState.feature.cs"];
m0_164 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_AddsSpecifiedJobToTheQueue()", span="157-157", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_AddsSpecifiedJobToTheQueue()", file="EnqueuedState.feature.cs"];
m0_148 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="EnqueuedState.feature.cs"];
m0_3 [label="Entry Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", span="82-82", cluster="Hangfire.IBootstrapperConfiguration.UseServer(System.Func<Hangfire.BackgroundJobServer>)", file="EnqueuedState.feature.cs"];
m0_262 [label="Entry Unk.GetItemScoreInSortedSet", span="", cluster="Unk.GetItemScoreInSortedSet", file="EnqueuedState.feature.cs"];
m0_293 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromList_RemovesAllGivenValuesFromList()", span="289-289", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromList_RemovesAllGivenValuesFromList()", file="EnqueuedState.feature.cs"];
m0_294 [label="UseConnection(redis =>\r\n            {\r\n                redis.AddItemToList(''hangfire:list'', ''value'');\r\n                redis.AddItemToList(''hangfire:list'', ''another-value'');\r\n                redis.AddItemToList(''hangfire:list'', ''value'');\r\n\r\n                Commit(redis, x => x.RemoveFromList(''list'', ''value''));\r\n\r\n                Assert.Equal(1, redis.GetListCount(''hangfire:list''));\r\n                Assert.Equal(''another-value'', redis.GetItemFromList(''hangfire:list'', 0));\r\n            })", span="291-301", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromList_RemovesAllGivenValuesFromList()", file="EnqueuedState.feature.cs"];
m0_295 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromList_RemovesAllGivenValuesFromList()", span="289-289", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromList_RemovesAllGivenValuesFromList()", file="EnqueuedState.feature.cs"];
m0_80 [label="Entry Unk.False", span="", cluster="Unk.False", file="EnqueuedState.feature.cs"];
m0_128 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", span="77-77", cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="EnqueuedState.feature.cs"];
m0_228 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate()", span="225-225", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate()", file="EnqueuedState.feature.cs"];
m0_229 [label="UseConnection(redis =>\r\n            {\r\n                redis.SetEntry(''hangfire:entry'', ''3'');\r\n\r\n                Commit(redis, x => x.DecrementCounter(''entry'', TimeSpan.FromDays(1)));\r\n\r\n                var entryTtl = redis.GetTimeToLive(''hangfire:entry'');\r\n                Assert.Equal(''2'', redis.GetValue(''hangfire:entry''));\r\n                Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25));\r\n            })", span="227-236", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate()", file="EnqueuedState.feature.cs"];
m0_230 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate()", span="225-225", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate()", file="EnqueuedState.feature.cs"];
m0_0 [label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", span="30-30", cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", file="EnqueuedState.feature.cs"];
m0_1 [label="configuration.UseServer(() => new BackgroundJobServer())", span="32-32", cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", file="EnqueuedState.feature.cs"];
m0_2 [label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", span="30-30", cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration)", file="EnqueuedState.feature.cs"];
m0_275 [label="Entry Unk.AddItemToSortedSet", span="", cluster="Unk.AddItemToSortedSet", file="EnqueuedState.feature.cs"];
m0_227 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", span="144-144", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="EnqueuedState.feature.cs"];
m0_103 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="EnqueuedState.feature.cs"];
m0_253 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", span="155-155", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="EnqueuedState.feature.cs"];
m0_37 [label="Entry lambda expression", span="46-59", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_38 [label="var state = new Mock<IState>()", span="49-49", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_39 [label="state.Setup(x => x.SerializeData()).Returns(new Dictionary<string, string>())", span="50-50", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_32 [label="configuration.UseServer(() => new BackgroundJobServer(options))", span="111-111", cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.BackgroundJobServerOptions)", file="EnqueuedState.feature.cs"];
m0_31 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_33 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="62-62", cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="EnqueuedState.feature.cs"];
m0_217 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_DecrementsTheValueEntry()", span="211-211", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_DecrementsTheValueEntry()", file="EnqueuedState.feature.cs"];
m0_216 [label="UseConnection(redis =>\r\n            {\r\n                redis.SetEntry(''hangfire:entry'', ''3'');\r\n\r\n                Commit(redis, x => x.DecrementCounter(''entry''));\r\n\r\n                Assert.Equal(''2'', redis.GetValue(''hangfire:entry''));\r\n                Assert.True(redis.GetTimeToLive(''entry'') < TimeSpan.Zero);\r\n            })", span="213-221", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_DecrementsTheValueEntry()", file="EnqueuedState.feature.cs"];
m0_215 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_DecrementsTheValueEntry()", span="211-211", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_DecrementsTheValueEntry()", file="EnqueuedState.feature.cs"];
m0_146 [label="Entry Unk.GetItemFromList", span="", cluster="Unk.GetItemFromList", file="EnqueuedState.feature.cs"];
m0_280 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.InsertToList_PrependsListWithSpecifiedValue()", span="276-276", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.InsertToList_PrependsListWithSpecifiedValue()", file="EnqueuedState.feature.cs"];
m0_281 [label="UseConnection(redis =>\r\n            {\r\n                redis.AddItemToList(''hangfire:list'', ''value'');\r\n\r\n                Commit(redis, x => x.InsertToList(''list'', ''new-value''));\r\n\r\n                Assert.Equal(''new-value'', redis.GetItemFromList(''hangfire:list'', 0));\r\n            })", span="278-285", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.InsertToList_PrependsListWithSpecifiedValue()", file="EnqueuedState.feature.cs"];
m0_282 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.InsertToList_PrependsListWithSpecifiedValue()", span="276-276", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.InsertToList_PrependsListWithSpecifiedValue()", file="EnqueuedState.feature.cs"];
m0_331 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="EnqueuedState.feature.cs"];
m0_279 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", span="167-167", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="EnqueuedState.feature.cs"];
m0_93 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_AppendsJobHistoryList()", span="92-92", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_AppendsJobHistoryList()", file="EnqueuedState.feature.cs"];
m0_94 [label="UseConnection(redis =>\r\n            {\r\n                // Arrange\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''my-state'');\r\n                state.Setup(x => x.SerializeData()).Returns(new Dictionary<string, string>());\r\n\r\n                // Act\r\n                Commit(redis, x => x.SetJobState(''my-job'', state.Object));\r\n\r\n                // Assert\r\n                Assert.Equal(1, redis.GetListCount(''hangfire:job:my-job:history''));\r\n            })", span="94-106", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_AppendsJobHistoryList()", color=green, community=0, file="EnqueuedState.feature.cs"];
m0_95 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_AppendsJobHistoryList()", span="92-92", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_AppendsJobHistoryList()", file="EnqueuedState.feature.cs"];
m0_131 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddJobState_AddsJobHistoryEntry_AsJsonObject()", span="130-130", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddJobState_AddsJobHistoryEntry_AsJsonObject()", file="EnqueuedState.feature.cs"];
m0_130 [label="UseConnection(redis =>\r\n            {\r\n                // Arrange\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''my-state'');\r\n                state.Setup(x => x.Reason).Returns(''my-reason'');\r\n                state.Setup(x => x.SerializeData()).Returns(\r\n                    new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                // Act\r\n                Commit(redis, x => x.AddJobState(''my-job'', state.Object));\r\n\r\n                // Assert\r\n                var serializedEntry = redis.GetItemFromList(''hangfire:job:my-job:history'', 0);\r\n                Assert.NotNull(serializedEntry);\r\n\r\n                var entry = JobHelper.FromJson<Dictionary<string, string>>(serializedEntry);\r\n                Assert.Equal(''my-state'', entry[''State'']);\r\n                Assert.Equal(''my-reason'', entry[''Reason'']);\r\n                Assert.Equal(''Value'', entry[''Name'']);\r\n                Assert.True(entry.ContainsKey(''CreatedAt''));\r\n            })", span="132-153", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddJobState_AddsJobHistoryEntry_AsJsonObject()", color=green, community=0, file="EnqueuedState.feature.cs"];
m0_129 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddJobState_AddsJobHistoryEntry_AsJsonObject()", span="130-130", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddJobState_AddsJobHistoryEntry_AsJsonObject()", file="EnqueuedState.feature.cs"];
m0_161 [label="Entry Unk.AddJobState", span="", cluster="Unk.AddJobState", file="EnqueuedState.feature.cs"];
m0_113 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.PersistJob_RemovesExpirationDatesForAllRelatedKeys()", span="110-110", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.PersistJob_RemovesExpirationDatesForAllRelatedKeys()", file="EnqueuedState.feature.cs"];
m0_114 [label="UseConnection(redis =>\r\n            {\r\n                // Arrange\r\n                redis.SetEntry(''hangfire:job:my-job'', ''job'', TimeSpan.FromDays(1));\r\n                redis.SetEntry(''hangfire:job:my-job:state'', ''state'', TimeSpan.FromDays(1));\r\n                redis.SetEntry(''hangfire:job:my-job:history'', ''history'', TimeSpan.FromDays(1));\r\n\r\n                // Act\r\n                Commit(redis, x => x.PersistJob(''my-job''));\r\n\r\n                // Assert\r\n                Assert.True(redis.GetTimeToLive(''hangfire:job:my-job'') < TimeSpan.Zero);\r\n                Assert.True(redis.GetTimeToLive(''hangfire:job:my-job:state'') < TimeSpan.Zero);\r\n                Assert.True(redis.GetTimeToLive(''hangfire:job:my-job:history'') < TimeSpan.Zero);\r\n            })", span="112-126", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.PersistJob_RemovesExpirationDatesForAllRelatedKeys()", color=green, community=0, file="EnqueuedState.feature.cs"];
m0_115 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.PersistJob_RemovesExpirationDatesForAllRelatedKeys()", span="110-110", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.PersistJob_RemovesExpirationDatesForAllRelatedKeys()", file="EnqueuedState.feature.cs"];
m0_242 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_AddsItemToSortedSet()", span="240-240", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_AddsItemToSortedSet()", file="EnqueuedState.feature.cs"];
m0_243 [label="UseConnection(redis =>\r\n            {\r\n                Commit(redis, x => x.AddToSet(''my-set'', ''my-value''));\r\n\r\n                Assert.True(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''));\r\n            })", span="242-247", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_AddsItemToSortedSet()", file="EnqueuedState.feature.cs"];
m0_244 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_AddsItemToSortedSet()", span="240-240", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_AddsItemToSortedSet()", file="EnqueuedState.feature.cs"];
m0_147 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="EnqueuedState.feature.cs"];
m0_47 [label="Entry lambda expression", span="146-146", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_329 [label="Entry RedisWriteOnlyTransaction.cstr", span="", cluster="RedisWriteOnlyTransaction.cstr", file="EnqueuedState.feature.cs"];
m0_46 [label="Exit Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", span="141-141", cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", file="EnqueuedState.feature.cs"];
m0_288 [label="Entry Unk.AddItemToList", span="", cluster="Unk.AddItemToList", file="EnqueuedState.feature.cs"];
m0_17 [label="var jobEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job'')", span="33-33", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_18 [label="var stateEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job:state'')", span="34-34", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_19 [label="var historyEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job:state'')", span="35-35", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_20 [label="Assert.True(TimeSpan.FromHours(23) < jobEntryTtl && jobEntryTtl < TimeSpan.FromHours(25))", span="37-37", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_54 [label="Hangfire.JobStorage", span="", cluster="Unk.SerializeData", file="EnqueuedState.feature.cs"];
m0_12 [label="Entry lambda expression", span="22-40", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_332 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="41-41", cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="EnqueuedState.feature.cs"];
m0_321 [label="Entry lambda expression", span="314-314", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_4 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_5 [label="new BackgroundJobServer()", span="32-32", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_6 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_14 [label="redis.SetEntry(''hangfire:job:my-job:state'', ''state'')", span="26-26", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_13 [label="redis.SetEntry(''hangfire:job:my-job'', ''job'')", span="25-25", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_15 [label="redis.SetEntry(''hangfire:job:my-job:history'', ''history'')", span="27-27", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_22 [label="Assert.True(TimeSpan.FromHours(23) < historyEntryTtl && historyEntryTtl < TimeSpan.FromHours(25))", span="39-39", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_21 [label="Assert.True(TimeSpan.FromHours(23) < stateEntryTtl && stateEntryTtl < TimeSpan.FromHours(25))", span="38-38", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_23 [label="Exit lambda expression", span="22-40", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_29 [label="Entry lambda expression", span="30-30", cluster="lambda expression", color=red, community=0, file="EnqueuedState.feature.cs"];
m0_28 [label="Entry Unk.True", span="", cluster="Unk.True", file="EnqueuedState.feature.cs"];
m0_30 [label="x.ExpireJob(''my-job'', TimeSpan.FromDays(1))", span="30-30", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_41 [label="Commit(redis, x => x.SetJobState(''my-job'', state.Object))", span="54-54", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_40 [label="state.Setup(x => x.Name).Returns(''my-state'')", span="51-51", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_42 [label="var hash = redis.GetAllEntriesFromHash(''hangfire:job:my-job'')", span="57-57", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_48 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="EnqueuedState.feature.cs"];
m0_96 [label="Entry lambda expression", span="94-106", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_101 [label="Assert.Equal(1, redis.GetListCount(''hangfire:job:my-job:history''))", span="105-105", cluster="lambda expression", color=green, community=0, file="EnqueuedState.feature.cs"];
m0_100 [label="Commit(redis, x => x.SetJobState(''my-job'', state.Object))", span="102-102", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_102 [label="Exit lambda expression", span="94-106", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_116 [label="Entry lambda expression", span="112-126", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_119 [label="redis.SetEntry(''hangfire:job:my-job:history'', ''history'', TimeSpan.FromDays(1))", span="117-117", cluster="lambda expression", color=green, community=0, file="EnqueuedState.feature.cs"];
m0_118 [label="redis.SetEntry(''hangfire:job:my-job:state'', ''state'', TimeSpan.FromDays(1))", span="116-116", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_120 [label="Commit(redis, x => x.PersistJob(''my-job''))", span="120-120", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_121 [label="Assert.True(redis.GetTimeToLive(''hangfire:job:my-job'') < TimeSpan.Zero)", span="123-123", cluster="lambda expression", color=green, community=0, file="EnqueuedState.feature.cs"];
m0_122 [label="Assert.True(redis.GetTimeToLive(''hangfire:job:my-job:state'') < TimeSpan.Zero)", span="124-124", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_123 [label="Assert.True(redis.GetTimeToLive(''hangfire:job:my-job:history'') < TimeSpan.Zero)", span="125-125", cluster="lambda expression", color=green, community=0, file="EnqueuedState.feature.cs"];
m0_124 [label="Exit lambda expression", span="112-126", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_132 [label="Entry lambda expression", span="132-153", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_138 [label="var serializedEntry = redis.GetItemFromList(''hangfire:job:my-job:history'', 0)", span="145-145", cluster="lambda expression", color=green, community=0, file="EnqueuedState.feature.cs"];
m0_137 [label="Commit(redis, x => x.AddJobState(''my-job'', state.Object))", span="142-142", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_139 [label="Assert.NotNull(serializedEntry)", span="146-146", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_140 [label="var entry = JobHelper.FromJson<Dictionary<string, string>>(serializedEntry)", span="148-148", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_135 [label="state.Setup(x => x.Reason).Returns(''my-reason'')", span="137-137", cluster="lambda expression", color=green, community=0, file="EnqueuedState.feature.cs"];
m0_133 [label="var state = new Mock<IState>()", span="135-135", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_134 [label="state.Setup(x => x.Name).Returns(''my-state'')", span="136-136", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_136 [label="state.Setup(x => x.SerializeData()).Returns(\r\n                    new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="138-139", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_152 [label="Entry lambda expression", span="137-137", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_153 [label="x.Reason", span="137-137", cluster="lambda expression", color=green, community=0, file="EnqueuedState.feature.cs"];
m0_154 [label="Exit lambda expression", span="137-137", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_97 [label="var state = new Mock<IState>()", span="97-97", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_99 [label="state.Setup(x => x.SerializeData()).Returns(new Dictionary<string, string>())", span="99-99", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_110 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_301 [label="Assert.Equal(1, redis.GetListCount(''hangfire:list''))", span="299-299", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_317 [label="Assert.Equal(2, redis.GetListCount(''hangfire:list''))", span="316-316", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_43 [label="Entry Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", span="80-80", cluster="Hangfire.BackgroundJobServer.BackgroundJobServer(Hangfire.BackgroundJobServerOptions, Hangfire.JobStorage)", file="EnqueuedState.feature.cs"];
m0_74 [label="Assert.Equal(''my-state'', stateHash[''State''])", span="85-85", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_75 [label="Assert.Equal(''my-reason'', stateHash[''Reason''])", span="86-86", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_76 [label="Assert.Equal(''Value'', stateHash[''Name''])", span="87-87", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_141 [label="Assert.Equal(''my-state'', entry[''State''])", span="149-149", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_142 [label="Assert.Equal(''my-reason'', entry[''Reason''])", span="150-150", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_143 [label="Assert.Equal(''Value'', entry[''Name''])", span="151-151", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_168 [label="Assert.Equal(''my-job'', redis.GetItemFromList(''hangfire:queue:critical'', 0))", span="164-164", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_181 [label="Assert.Equal(''my-job'', redis.GetItemFromList(''hangfire:queue:critical'', 0))", span="177-177", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_193 [label="Assert.Equal(''4'', redis.GetValue(''hangfire:entry''))", span="190-190", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_208 [label="Assert.Equal(''4'', redis.GetValue(''hangfire:entry''))", span="205-205", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_221 [label="Assert.Equal(''2'', redis.GetValue(''hangfire:entry''))", span="219-219", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_235 [label="Assert.Equal(''2'', redis.GetValue(''hangfire:entry''))", span="234-234", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_260 [label="Assert.Equal(3.2, redis.GetItemScoreInSortedSet(''hangfire:my-set'', ''my-value''), 3)", span="258-258", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_286 [label="Assert.Equal(''new-value'', redis.GetItemFromList(''hangfire:list'', 0))", span="284-284", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_302 [label="Assert.Equal(''another-value'', redis.GetItemFromList(''hangfire:list'', 0))", span="300-300", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_318 [label="Assert.Equal(''2'', redis.GetItemFromList(''hangfire:list'', 0))", span="317-317", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_319 [label="Assert.Equal(''3'', redis.GetItemFromList(''hangfire:list'', 1))", span="318-318", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_117 [label="redis.SetEntry(''hangfire:job:my-job'', ''job'', TimeSpan.FromDays(1))", span="115-115", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_125 [label="Entry lambda expression", span="120-120", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_212 [label="x.IncrementCounter(''entry'', TimeSpan.FromDays(1))", span="202-202", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_239 [label="x.DecrementCounter(''entry'', TimeSpan.FromDays(1))", span="231-231", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_191 [label="redis.SetEntry(''hangfire:entry'', ''3'')", span="186-186", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_205 [label="redis.SetEntry(''hangfire:entry'', ''3'')", span="200-200", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_219 [label="redis.SetEntry(''hangfire:entry'', ''3'')", span="215-215", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_232 [label="redis.SetEntry(''hangfire:entry'', ''3'')", span="229-229", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_194 [label="Assert.True(redis.GetTimeToLive(''hangfire:entry'') < TimeSpan.Zero)", span="191-191", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_207 [label="var entryTtl = redis.GetTimeToLive(''hangfire:entry'')", span="204-204", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_222 [label="Assert.True(redis.GetTimeToLive(''entry'') < TimeSpan.Zero)", span="220-220", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_234 [label="var entryTtl = redis.GetTimeToLive(''hangfire:entry'')", span="233-233", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_144 [label="Assert.True(entry.ContainsKey(''CreatedAt''))", span="152-152", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_167 [label="Assert.True(redis.SetContainsItem(''hangfire:queues'', ''critical''))", span="163-163", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_209 [label="Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25))", span="206-206", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_236 [label="Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25))", span="235-235", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_247 [label="Assert.True(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''))", span="246-246", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_259 [label="Assert.True(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''))", span="257-257", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_145 [label="Exit lambda expression", span="132-153", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_158 [label="Entry lambda expression", span="142-142", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_159 [label="x.AddJobState(''my-job'', state.Object)", span="142-142", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_149 [label="Entry lambda expression", span="136-136", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_155 [label="Entry lambda expression", span="138-138", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_68 [label="state.Setup(x => x.SerializeData()).Returns(\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''Name'', ''Value'' }\r\n                    })", span="71-75", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_69 [label="state.Setup(x => x.Name).Returns(''my-state'')", span="76-76", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_70 [label="state.Setup(x => x.Reason).Returns(''my-reason'')", span="77-77", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_98 [label="state.Setup(x => x.Name).Returns(''my-state'')", span="98-98", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_65 [label="Entry lambda expression", span="65-88", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_165 [label="Entry lambda expression", span="159-165", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_178 [label="Entry lambda expression", span="171-178", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_190 [label="Entry lambda expression", span="184-192", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_204 [label="Entry lambda expression", span="198-207", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_218 [label="Entry lambda expression", span="213-221", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_231 [label="Entry lambda expression", span="227-236", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_245 [label="Entry lambda expression", span="242-247", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_257 [label="Entry lambda expression", span="253-259", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_270 [label="Entry lambda expression", span="265-272", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_283 [label="Entry lambda expression", span="278-285", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_296 [label="Entry lambda expression", span="291-301", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_311 [label="Entry lambda expression", span="307-319", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_111 [label="x.SetJobState(''my-job'', state.Object)", span="102-102", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_107 [label="Entry lambda expression", span="99-99", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_71 [label="Commit(redis, x => x.SetJobState(''my-job'', state.Object))", span="80-80", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_166 [label="Commit(redis, x => x.AddToQueue(''critical'', ''my-job''))", span="161-161", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_180 [label="Commit(redis, x => x.AddToQueue(''critical'', ''my-job''))", span="175-175", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_192 [label="Commit(redis, x => x.IncrementCounter(''entry''))", span="188-188", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_206 [label="Commit(redis, x => x.IncrementCounter(''entry'', TimeSpan.FromDays(1)))", span="202-202", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_220 [label="Commit(redis, x => x.DecrementCounter(''entry''))", span="217-217", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_233 [label="Commit(redis, x => x.DecrementCounter(''entry'', TimeSpan.FromDays(1)))", span="231-231", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_246 [label="Commit(redis, x => x.AddToSet(''my-set'', ''my-value''))", span="244-244", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_258 [label="Commit(redis, x => x.AddToSet(''my-set'', ''my-value'', 3.2))", span="255-255", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_272 [label="Commit(redis, x => x.RemoveFromSet(''my-set'', ''my-value''))", span="269-269", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_285 [label="Commit(redis, x => x.InsertToList(''list'', ''new-value''))", span="282-282", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_300 [label="Commit(redis, x => x.RemoveFromList(''list'', ''value''))", span="297-297", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_316 [label="Commit(redis, x => x.TrimList(''list'', 1, 2))", span="314-314", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_112 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_44 [label="Entry Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", span="141-141", cluster="Hangfire.BootstrapperConfigurationExtensions.UseServer(Hangfire.IBootstrapperConfiguration, Hangfire.JobStorage, Hangfire.BackgroundJobServerOptions)", file="EnqueuedState.feature.cs"];
m0_72 [label="var stateHash = redis.GetAllEntriesFromHash(''hangfire:job:my-job:state'')", span="83-83", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_73 [label="Assert.False(stateHash.ContainsKey(''OldName''))", span="84-84", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_77 [label="Exit lambda expression", span="65-88", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_169 [label="Exit lambda expression", span="159-165", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_182 [label="Exit lambda expression", span="171-178", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_261 [label="Exit lambda expression", span="253-259", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_287 [label="Exit lambda expression", span="278-285", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_303 [label="Exit lambda expression", span="291-301", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_320 [label="Exit lambda expression", span="307-319", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_127 [label="Exit lambda expression", span="120-120", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_126 [label="x.PersistJob(''my-job'')", span="120-120", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_211 [label="Entry lambda expression", span="202-202", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_213 [label="Exit lambda expression", span="202-202", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_238 [label="Entry lambda expression", span="231-231", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_240 [label="Exit lambda expression", span="231-231", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_195 [label="Exit lambda expression", span="184-192", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_223 [label="Exit lambda expression", span="213-221", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_210 [label="Exit lambda expression", span="198-207", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_237 [label="Exit lambda expression", span="227-236", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_248 [label="Exit lambda expression", span="242-247", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_160 [label="Exit lambda expression", span="142-142", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_67 [label="var state = new Mock<IState>()", span="70-70", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_151 [label="Exit lambda expression", span="136-136", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_150 [label="x.Name", span="136-136", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_157 [label="Exit lambda expression", span="138-138", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_156 [label="x.SerializeData()", span="138-138", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_51 [label=options, span="", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_55 [label="Hangfire.JobStorage", span="", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_81 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_84 [label="Entry lambda expression", span="76-76", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_87 [label="Entry lambda expression", span="77-77", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_104 [label="Entry lambda expression", span="98-98", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_66 [label="redis.SetEntryInHash(''hangfire:job:my-job:state'', ''OldName'', ''OldValue'')", span="68-68", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_179 [label="redis.EnqueueItemOnList(''hangfire:queue:critical'', ''another-job'')", span="173-173", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_274 [label="Exit lambda expression", span="265-272", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_271 [label="redis.AddItemToSortedSet(''hangfire:my-set'', ''my-value'')", span="267-267", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_273 [label="Assert.False(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''))", span="271-271", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_284 [label="redis.AddItemToList(''hangfire:list'', ''value'')", span="280-280", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_297 [label="redis.AddItemToList(''hangfire:list'', ''value'')", span="293-293", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_298 [label="redis.AddItemToList(''hangfire:list'', ''another-value'')", span="294-294", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_299 [label="redis.AddItemToList(''hangfire:list'', ''value'')", span="295-295", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_312 [label="redis.AddItemToList(''hangfire:list'', ''1'')", span="309-309", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_313 [label="redis.AddItemToList(''hangfire:list'', ''2'')", span="310-310", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_314 [label="redis.AddItemToList(''hangfire:list'', ''3'')", span="311-311", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_315 [label="redis.AddItemToList(''hangfire:list'', ''4'')", span="312-312", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_109 [label="Exit lambda expression", span="99-99", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_108 [label="x.SerializeData()", span="99-99", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_58 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_90 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_171 [label="Entry lambda expression", span="161-161", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_184 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_197 [label="Entry lambda expression", span="188-188", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_224 [label="Entry lambda expression", span="217-217", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_250 [label="Entry lambda expression", span="244-244", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_263 [label="Entry lambda expression", span="255-255", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_276 [label="Entry lambda expression", span="269-269", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_289 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_304 [label="Entry lambda expression", span="297-297", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_59 [label="x.SetJobState(''my-job'', state.Object)", span="54-54", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_91 [label="x.SetJobState(''my-job'', state.Object)", span="80-80", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_53 [label="Hangfire.BackgroundJobServerOptions", span="", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_52 [label=options, span="", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_57 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_56 [label="Hangfire.BackgroundJobServerOptions", span="", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_83 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_82 [label="x.SerializeData()", span="71-71", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_86 [label="Exit lambda expression", span="76-76", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_85 [label="x.Name", span="76-76", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_89 [label="Exit lambda expression", span="77-77", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_88 [label="x.Reason", span="77-77", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_106 [label="Exit lambda expression", span="98-98", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_105 [label="x.Name", span="98-98", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_60 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_92 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_173 [label="Exit lambda expression", span="161-161", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_172 [label="x.AddToQueue(''critical'', ''my-job'')", span="161-161", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_186 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_185 [label="x.AddToQueue(''critical'', ''my-job'')", span="175-175", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_199 [label="Exit lambda expression", span="188-188", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_198 [label="x.IncrementCounter(''entry'')", span="188-188", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_226 [label="Exit lambda expression", span="217-217", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_225 [label="x.DecrementCounter(''entry'')", span="217-217", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_252 [label="Exit lambda expression", span="244-244", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_251 [label="x.AddToSet(''my-set'', ''my-value'')", span="244-244", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_265 [label="Exit lambda expression", span="255-255", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_264 [label="x.AddToSet(''my-set'', ''my-value'', 3.2)", span="255-255", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_278 [label="Exit lambda expression", span="269-269", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_277 [label="x.RemoveFromSet(''my-set'', ''my-value'')", span="269-269", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_291 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_290 [label="x.InsertToList(''list'', ''new-value'')", span="282-282", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_306 [label="Exit lambda expression", span="297-297", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_305 [label="x.RemoveFromList(''list'', ''value'')", span="297-297", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_322 [label="x.TrimList(''list'', 1, 2)", span="314-314", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_323 [label="Exit lambda expression", span="314-314", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m0_170 [label="Entry Unk.SetContainsItem", span="", cluster="Unk.SetContainsItem", file="EnqueuedState.feature.cs"];
m0_266 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", span="161-161", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="EnqueuedState.feature.cs"];
m0_337 [label="Entry HangFire.Redis.Tests.RedisUtils.CreateClient()", span="15-15", cluster="HangFire.Redis.Tests.RedisUtils.CreateClient()", file="EnqueuedState.feature.cs"];
m0_200 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", span="133-133", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="EnqueuedState.feature.cs"];
m0_174 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="124-124", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="EnqueuedState.feature.cs"];
m0_196 [label="Entry Unk.GetValue", span="", cluster="Unk.GetValue", file="EnqueuedState.feature.cs"];
m0_254 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_WithScore_AddsItemToSortedSetWithScore()", span="251-251", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_WithScore_AddsItemToSortedSetWithScore()", file="EnqueuedState.feature.cs"];
m0_255 [label="UseConnection(redis =>\r\n            {\r\n                Commit(redis, x => x.AddToSet(''my-set'', ''my-value'', 3.2));\r\n\r\n                Assert.True(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''));\r\n                Assert.Equal(3.2, redis.GetItemScoreInSortedSet(''hangfire:my-set'', ''my-value''), 3);\r\n            })", span="253-259", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_WithScore_AddsItemToSortedSetWithScore()", file="EnqueuedState.feature.cs"];
m0_256 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_WithScore_AddsItemToSortedSetWithScore()", span="251-251", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_WithScore_AddsItemToSortedSetWithScore()", file="EnqueuedState.feature.cs"];
m0_189 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_IncrementValueEntry()", span="182-182", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_IncrementValueEntry()", file="EnqueuedState.feature.cs"];
m0_188 [label="UseConnection(redis =>\r\n            {\r\n                redis.SetEntry(''hangfire:entry'', ''3'');\r\n\r\n                Commit(redis, x => x.IncrementCounter(''entry''));\r\n\r\n                Assert.Equal(''4'', redis.GetValue(''hangfire:entry''));\r\n                Assert.True(redis.GetTimeToLive(''hangfire:entry'') < TimeSpan.Zero);\r\n            })", span="184-192", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_IncrementValueEntry()", file="EnqueuedState.feature.cs"];
m0_187 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_IncrementValueEntry()", span="182-182", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_IncrementValueEntry()", file="EnqueuedState.feature.cs"];
m0_307 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", span="179-179", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="EnqueuedState.feature.cs"];
m0_308 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.TrimList_TrimsListToASpecifiedRange()", span="305-305", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.TrimList_TrimsListToASpecifiedRange()", file="EnqueuedState.feature.cs"];
m0_309 [label="UseConnection(redis =>\r\n            {\r\n                redis.AddItemToList(''hangfire:list'', ''1'');\r\n                redis.AddItemToList(''hangfire:list'', ''2'');\r\n                redis.AddItemToList(''hangfire:list'', ''3'');\r\n                redis.AddItemToList(''hangfire:list'', ''4'');\r\n\r\n                Commit(redis, x => x.TrimList(''list'', 1, 2));\r\n\r\n                Assert.Equal(2, redis.GetListCount(''hangfire:list''));\r\n                Assert.Equal(''2'', redis.GetItemFromList(''hangfire:list'', 0));\r\n                Assert.Equal(''3'', redis.GetItemFromList(''hangfire:list'', 1));\r\n            })", span="307-319", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.TrimList_TrimsListToASpecifiedRange()", file="EnqueuedState.feature.cs"];
m0_310 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.TrimList_TrimsListToASpecifiedRange()", span="305-305", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.TrimList_TrimsListToASpecifiedRange()", file="EnqueuedState.feature.cs"];
m0_79 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="EnqueuedState.feature.cs"];
m0_338 [label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts", span="", file="EnqueuedState.feature.cs"];
m0_342 [label=state, span="", file="EnqueuedState.feature.cs"];
m0_341 [label=state, span="", file="EnqueuedState.feature.cs"];
m0_339 [label=state, span="", file="EnqueuedState.feature.cs"];
m0_340 [label=state, span="", file="EnqueuedState.feature.cs"];
m2_5 [label="CountersAggregateInterval = TimeSpan.FromMinutes(5)", span="32-32", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="FailedState.cs"];
m2_9 [label="TransactionTimeout = TimeSpan.FromMinutes(1)", span="36-36", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="FailedState.cs"];
m2_0 [label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="26-26", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="FailedState.cs"];
m2_1 [label="TransactionIsolationLevel = null", span="28-28", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="FailedState.cs"];
m2_3 [label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", span="30-30", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=red, community=0, file="FailedState.cs"];
m2_2 [label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="29-29", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="FailedState.cs"];
m2_4 [label="JobExpirationCheckInterval = TimeSpan.FromHours(1)", span="31-31", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="FailedState.cs", color=green, community=0];
m2_12 [label="Entry System.Exception.ToString()", span="0-0", cluster="System.Exception.ToString()", file="FailedState.cs"];
m2_11 [label="Entry System.Exception.GetType()", span="0-0", cluster="System.Exception.GetType()", file="FailedState.cs"];
m2_13 [label="HangFire.States.FailedState", span="", cluster="System.TimeSpan.FromHours(double)", file="FailedState.cs"];
m2_6 [label="Entry HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", span="37-37", cluster="HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", file="FailedState.cs"];
m2_7 [label="return new Dictionary<string, string>\r\n                {\r\n                    { ''FailedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''ExceptionType'', Exception.GetType().FullName },\r\n                    { ''ExceptionMessage'', Exception.Message },\r\n                    { ''ExceptionDetails'', Exception.ToString() }\r\n                };", span="39-45", cluster="HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", file="FailedState.cs", color=red, community=0];
m2_8 [label="Exit HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", span="37-37", cluster="HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", file="FailedState.cs"];
m2_10 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="FailedState.cs"];
m2_14 [label="Hangfire.SqlServer.SqlServerStorageOptions", span="", file="FailedState.cs"];
m3_14 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="FailedStateFacts.cs"];
m3_28 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="FailedStateFacts.cs"];
m3_3 [label="new[] { 10, 20, 50, 100 }", span="35-35", cluster="HangFire.Web.Pages.PerPageSelector.Execute()", file="FailedStateFacts.cs"];
m3_13 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="FailedStateFacts.cs"];
m3_20 [label="Entry Unk.Be", span="", cluster="Unk.Be", file="FailedStateFacts.cs"];
m3_7 [label="Write(_pager.RecordsPerPageUrl(count))", span="56-56", cluster="HangFire.Web.Pages.PerPageSelector.Execute()", file="FailedStateFacts.cs"];
m3_29 [label="Entry HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", span="9-9", cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="FailedStateFacts.cs"];
m3_15 [label="Entry HangFire.Web.Pager.RecordsPerPageUrl(int)", span="58-58", cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", file="FailedStateFacts.cs"];
m3_0 [label="Entry HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", span="11-11", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", file="FailedStateFacts.cs"];
m3_1 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new FailedState(null))", span="13-14", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", color=green, community=0, file="FailedStateFacts.cs"];
m3_2 [label="Exit HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", span="11-11", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_ThrowsAnException_IfExceptionParameterIsNull()", file="FailedStateFacts.cs"];
m3_4 [label="Entry lambda expression", span="14-14", cluster="lambda expression", file="FailedStateFacts.cs"];
m3_5 [label="new FailedState(null)", span="14-14", cluster="lambda expression", file="FailedStateFacts.cs"];
m3_6 [label="Exit lambda expression", span="14-14", cluster="lambda expression", file="FailedStateFacts.cs"];
m3_8 [label="Entry HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()", span="18-18", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()", file="FailedStateFacts.cs"];
m3_9 [label="var exception = new Exception()", span="20-20", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()", file="FailedStateFacts.cs", color=red, community=0];
m3_10 [label="var state = new FailedState(exception)", span="21-21", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()", file="FailedStateFacts.cs", color=red, community=0];
m3_11 [label="state.Exception.Should().BeSameAs(exception)", span="23-23", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()", file="FailedStateFacts.cs", color=red, community=0];
m3_12 [label="Exit HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()", span="18-18", cluster="HangFire.Core.Tests.States.FailedStateFacts.Ctor_SetsAllProperties()", file="FailedStateFacts.cs"];
m3_16 [label="HangFire.Web.Pages.PerPageSelector", span="", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="FailedStateFacts.cs"];
m3_17 [label="var state = new FailedState(new Exception())", span="29-29", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="FailedStateFacts.cs"];
m3_18 [label="state.StateName.Should().Be(FailedState.Name)", span="31-31", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", color=red, community=0, file="FailedStateFacts.cs"];
m3_19 [label="Exit HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", span="27-27", cluster="HangFire.Core.Tests.States.FailedStateFacts.StateName_IsCorrect()", file="FailedStateFacts.cs"];
m3_27 [label="Entry HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", span="37-37", cluster="HangFire.States.FailedState.GetProperties(HangFire.Common.JobMethod)", file="FailedStateFacts.cs"];
m3_26 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", file="FailedStateFacts.cs"];
m3_21 [label="Entry HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()", span="35-35", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()", file="FailedStateFacts.cs"];
m3_22 [label="var state = new FailedState(new Exception(''Message''))", span="37-37", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()", file="FailedStateFacts.cs"];
m3_23 [label="var properties = state.GetProperties(null)", span="38-38", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()", color=red, community=0, file="FailedStateFacts.cs"];
m3_24 [label="DictionaryAssert.ContainsFollowingItems(\r\n                new Dictionary<string, string>\r\n                {\r\n                    { ''FailedAt'', ''<UtcNow timestamp>'' },\r\n                    { ''ExceptionType'', ''System.Exception'' },\r\n                    { ''ExceptionMessage'', ''Message'' },\r\n                    { ''ExceptionDetails'', ''<Non-empty>'' }\r\n                }, \r\n                properties)", span="40-48", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()", color=red, community=0, file="FailedStateFacts.cs"];
m3_25 [label="Exit HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()", span="35-35", cluster="HangFire.Core.Tests.States.FailedStateFacts.GetProperties_ReturnsCorrectProperties()", file="FailedStateFacts.cs"];
m4_27 [label="Entry HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", span="38-38", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="JobClientTests.cs"];
m4_28 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new JobClient(_connectionMock.Object, null))", span="40-41", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="JobClientTests.cs"];
m4_29 [label="Exit HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", span="38-38", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="JobClientTests.cs"];
m4_56 [label="Entry HangFire.Tests.Client.JobClientTests.Method()", span="71-71", cluster="HangFire.Tests.Client.JobClientTests.Method()", file="JobClientTests.cs"];
m4_57 [label="Exit HangFire.Tests.Client.JobClientTests.Method()", span="71-71", cluster="HangFire.Tests.Client.JobClientTests.Method()", file="JobClientTests.cs"];
m4_0 [label="Entry HangFire.Tests.Client.JobClientTests.JobClientTests()", span="19-19", cluster="HangFire.Tests.Client.JobClientTests.JobClientTests()", file="JobClientTests.cs"];
m4_1 [label="_connectionMock = new Mock<IStorageConnection>()", span="21-21", cluster="HangFire.Tests.Client.JobClientTests.JobClientTests()", file="JobClientTests.cs"];
m4_2 [label="_connectionMock.Setup(x => x.Storage).Returns(new Mock<JobStorage>().Object)", span="22-22", cluster="HangFire.Tests.Client.JobClientTests.JobClientTests()", file="JobClientTests.cs"];
m4_3 [label="_creatorMock = new Mock<JobCreator>()", span="24-24", cluster="HangFire.Tests.Client.JobClientTests.JobClientTests()", file="JobClientTests.cs"];
m4_4 [label="_client = new JobClient(_connectionMock.Object, _creatorMock.Object)", span="25-25", cluster="HangFire.Tests.Client.JobClientTests.JobClientTests()", file="JobClientTests.cs"];
m4_5 [label="_stateMock = new Mock<JobState>()", span="26-26", cluster="HangFire.Tests.Client.JobClientTests.JobClientTests()", file="JobClientTests.cs"];
m4_6 [label="_method = new JobMethod(typeof(JobClientTests), typeof(JobClientTests).GetMethod(''Method''))", span="27-27", cluster="HangFire.Tests.Client.JobClientTests.JobClientTests()", file="JobClientTests.cs"];
m4_7 [label="Exit HangFire.Tests.Client.JobClientTests.JobClientTests()", span="19-19", cluster="HangFire.Tests.Client.JobClientTests.JobClientTests()", file="JobClientTests.cs"];
m4_14 [label="Entry Mock<JobState>.cstr", span="", cluster="Mock<JobState>.cstr", file="JobClientTests.cs"];
m4_16 [label="Entry System.Type.GetMethod(string)", span="0-0", cluster="System.Type.GetMethod(string)", file="JobClientTests.cs"];
m4_23 [label="Entry Unk.>", span="", cluster="Unk.>", file="JobClientTests.cs"];
m4_15 [label="Entry HangFire.Common.JobMethod.JobMethod(System.Type, System.Reflection.MethodInfo)", span="48-48", cluster="HangFire.Common.JobMethod.JobMethod(System.Type, System.Reflection.MethodInfo)", file="JobClientTests.cs"];
m4_13 [label="Entry JobClient.cstr", span="", cluster="JobClient.cstr", file="JobClientTests.cs"];
m4_46 [label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", span="59-59", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="JobClientTests.cs"];
m4_47 [label="Assert.Throws<ArgumentNullException>(\r\n                () => _client.CreateJob(_method, new string[0], null))", span="61-62", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="JobClientTests.cs"];
m4_48 [label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", span="59-59", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="JobClientTests.cs"];
m4_12 [label="Entry Mock<JobCreator>.cstr", span="", cluster="Mock<JobCreator>.cstr", file="JobClientTests.cs"];
m4_9 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="JobClientTests.cs"];
m4_53 [label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", span="66-66", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="JobClientTests.cs"];
m4_54 [label="_client.CreateJob(_method, new[] { ''hello'', ''3'' }, _stateMock.Object)", span="68-68", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="JobClientTests.cs"];
m4_55 [label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", span="66-66", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="JobClientTests.cs"];
m4_20 [label="Entry HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", span="31-31", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", file="JobClientTests.cs"];
m4_21 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new JobClient(null, _creatorMock.Object))", span="33-34", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", file="JobClientTests.cs"];
m4_22 [label="Exit HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", span="31-31", cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", file="JobClientTests.cs"];
m4_40 [label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", span="52-52", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", file="JobClientTests.cs"];
m4_41 [label="Assert.Throws<ArgumentNullException>(\r\n                () => _client.CreateJob(_method, null, _stateMock.Object))", span="54-55", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", file="JobClientTests.cs"];
m4_42 [label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", span="52-52", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", file="JobClientTests.cs"];
m4_49 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="JobClientTests.cs"];
m4_17 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="JobClientTests.cs"];
m4_18 [label="x.Storage", span="22-22", cluster="lambda expression", file="JobClientTests.cs"];
m4_19 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="JobClientTests.cs"];
m4_24 [label="Entry lambda expression", span="34-34", cluster="lambda expression", file="JobClientTests.cs"];
m4_25 [label="new JobClient(null, _creatorMock.Object)", span="34-34", cluster="lambda expression", file="JobClientTests.cs"];
m4_26 [label="Exit lambda expression", span="34-34", cluster="lambda expression", file="JobClientTests.cs"];
m4_30 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="JobClientTests.cs"];
m4_31 [label="new JobClient(_connectionMock.Object, null)", span="41-41", cluster="lambda expression", file="JobClientTests.cs"];
m4_32 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="JobClientTests.cs"];
m4_36 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="JobClientTests.cs"];
m4_37 [label="_client.CreateJob(null, new string[0], _stateMock.Object)", span="48-48", cluster="lambda expression", file="JobClientTests.cs"];
m4_38 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="JobClientTests.cs"];
m4_43 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="JobClientTests.cs"];
m4_44 [label="_client.CreateJob(_method, null, _stateMock.Object)", span="55-55", cluster="lambda expression", file="JobClientTests.cs"];
m4_45 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="JobClientTests.cs"];
m4_50 [label="_client.CreateJob(_method, new string[0], null)", span="62-62", cluster="lambda expression", file="JobClientTests.cs"];
m4_51 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="JobClientTests.cs"];
m4_52 [label="Entry HangFire.Client.JobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", span="75-75", cluster="HangFire.Client.JobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", file="JobClientTests.cs"];
m4_58 [label="Entry HangFire.Tests.Client.JobClientTests.MethodWithReferenceParameter(ref string)", span="75-75", cluster="HangFire.Tests.Client.JobClientTests.MethodWithReferenceParameter(ref string)", file="JobClientTests.cs"];
m4_59 [label="Exit HangFire.Tests.Client.JobClientTests.MethodWithReferenceParameter(ref string)", span="75-75", cluster="HangFire.Tests.Client.JobClientTests.MethodWithReferenceParameter(ref string)", file="JobClientTests.cs"];
m4_11 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="JobClientTests.cs"];
m4_39 [label="Entry Unk.CreateJob", span="", cluster="Unk.CreateJob", file="JobClientTests.cs"];
m4_60 [label="Entry HangFire.Tests.Client.JobClientTests.MethodWithOutputParameter(out string)", span="79-79", cluster="HangFire.Tests.Client.JobClientTests.MethodWithOutputParameter(out string)", file="JobClientTests.cs"];
m4_61 [label="a = ''hello''", span="81-81", cluster="HangFire.Tests.Client.JobClientTests.MethodWithOutputParameter(out string)", file="JobClientTests.cs"];
m4_62 [label="Exit HangFire.Tests.Client.JobClientTests.MethodWithOutputParameter(out string)", span="79-79", cluster="HangFire.Tests.Client.JobClientTests.MethodWithOutputParameter(out string)", file="JobClientTests.cs"];
m4_8 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="JobClientTests.cs"];
m4_10 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="JobClientTests.cs"];
m4_33 [label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", span="45-45", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", file="JobClientTests.cs"];
m4_34 [label="Assert.Throws<ArgumentNullException>(\r\n                () => _client.CreateJob(null, new string[0], _stateMock.Object))", span="47-48", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", file="JobClientTests.cs"];
m4_35 [label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", span="45-45", cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", file="JobClientTests.cs"];
m4_63 [label="HangFire.Tests.Client.JobClientTests", span="", file="JobClientTests.cs"];
m5_63 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JobMethodTests.cs"];
m5_362 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="JobMethodTests.cs"];
m5_81 [label="Entry long.Parse(string)", span="0-0", cluster="long.Parse(string)", file="JobMethodTests.cs"];
m5_0 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="JobMethodTests.cs"];
m5_1 [label="_connectionString = connectionString", span="39-39", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="JobMethodTests.cs"];
m5_2 [label="_queueProviders = queueProviders", span="40-40", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="JobMethodTests.cs"];
m5_3 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="JobMethodTests.cs"];
m5_137 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", span="544-544", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", file="JobMethodTests.cs"];
m5_366 [label="return UseConnection<JobList<FetchedJobDto>>(connection =>\r\n            {\r\n\r\n                const string fetchedJobsSql = @''\r\nselect j.*, jq.FetchedAt, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is not null'';\r\n\r\n                var jobs = connection.Query<SqlJob>(\r\n                    fetchedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList();\r\n\r\n                var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count);\r\n\r\n                foreach (var job in jobs)\r\n                {\r\n                    result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                        job.Id.ToString(),\r\n                        new FetchedJobDto\r\n                        {\r\n                            Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                            State = job.StateName,\r\n                            FetchedAt = job.FetchedAt\r\n                        }));\r\n                }\r\n\r\n                return new JobList<FetchedJobDto>(result);\r\n            });", span="546-576", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", file="JobMethodTests.cs"];
m5_367 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", span="544-544", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", file="JobMethodTests.cs"];
m5_363 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="JobMethodTests.cs"];
m5_35 [label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55", cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="JobMethodTests.cs"];
m5_180 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="288-288", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="JobMethodTests.cs"];
m5_181 [label="return UseConnection<StatisticsDto>(connection =>\r\n            {\r\n                const string sql = @''\r\nselect StateName as [State], count(id) as [Count] From HangFire.Job \r\ngroup by StateName\r\nhaving StateName is not null;\r\nselect count(Id) from HangFire.Server;\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:succeeded';\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:deleted';\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n'';\r\n\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql))\r\n                {\r\n                    var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count);\r\n\r\n                    Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0;\r\n\r\n                    stats.Enqueued = getCountIfExists(EnqueuedState.StateName);\r\n                    stats.Failed = getCountIfExists(FailedState.StateName);\r\n                    stats.Processing = getCountIfExists(ProcessingState.StateName);\r\n                    stats.Scheduled = getCountIfExists(ScheduledState.StateName);\r\n\r\n                    stats.Servers = multi.Read<int>().Single();\r\n\r\n                    stats.Succeeded = multi.Read<int?>().SingleOrDefault() ?? 0;\r\n                    stats.Deleted = multi.Read<int?>().SingleOrDefault() ?? 0;\r\n\r\n                    stats.Recurring = multi.Read<int>().Single();\r\n                }\r\n\r\n                stats.Queues = _queueProviders\r\n                    .SelectMany(x => x.GetJobQueueMonitoringApi(connection).GetQueues())\r\n                    .Count();\r\n\r\n                return stats;\r\n            });", span="290-327", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="JobMethodTests.cs"];
m5_182 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="288-288", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="JobMethodTests.cs"];
m5_33 [label="Entry HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="JobMethodTests.cs"];
m5_47 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="105-105", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="JobMethodTests.cs"];
m5_48 [label="return GetTimelineStats(''failed'');", span="107-107", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="JobMethodTests.cs"];
m5_49 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="105-105", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="JobMethodTests.cs"];
m5_73 [label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60", cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="JobMethodTests.cs"];
m5_316 [label="Entry Unk.Open", span="", cluster="Unk.Open", file="JobMethodTests.cs"];
m5_148 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="424-424", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobMethodTests.cs"];
m5_306 [label="var transaction = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted })", span="426-426", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobMethodTests.cs"];
m5_309 [label="var result = action(connection)", span="431-431", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobMethodTests.cs"];
m5_307 [label="var connection = new SqlConnection(_connectionString)", span="427-427", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobMethodTests.cs"];
m5_310 [label="transaction.Complete()", span="433-433", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobMethodTests.cs"];
m5_308 [label="connection.Open()", span="429-429", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobMethodTests.cs"];
m5_311 [label="return result;", span="435-435", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobMethodTests.cs"];
m5_312 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="424-424", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="JobMethodTests.cs"];
m5_315 [label="Entry SqlConnection.cstr", span="", cluster="SqlConnection.cstr", file="JobMethodTests.cs"];
m5_219 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", file="JobMethodTests.cs"];
m5_141 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", span="330-330", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="JobMethodTests.cs"];
m5_220 [label="return UseConnection<Dictionary<DateTime, long>>(connection =>\r\n            {\r\n                var endDate = DateTime.UtcNow;\r\n                var dates = new List<DateTime>();\r\n                for (var i = 0; i < 24; i++)\r\n                {\r\n                    dates.Add(endDate);\r\n                    endDate = endDate.AddHours(-1);\r\n                }\r\n\r\n                var keys = dates.Select(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList();\r\n\r\n                const string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys'';\r\n\r\n                var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count);\r\n\r\n                foreach (var key in keys)\r\n                {\r\n                    if (!valuesMap.ContainsKey(key)) valuesMap.Add(key, 0);\r\n                }\r\n\r\n                var result = new Dictionary<DateTime, long>();\r\n                for (var i = 0; i < dates.Count; i++)\r\n                {\r\n                    var value = valuesMap[valuesMap.Keys.ElementAt(i)];\r\n                    result.Add(dates[i], value);\r\n                }\r\n\r\n                return result;\r\n            });", span="332-367", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="JobMethodTests.cs"];
m5_221 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", span="330-330", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="JobMethodTests.cs"];
m5_378 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="JobMethodTests.cs"];
m5_145 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="239-239", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="JobMethodTests.cs"];
m5_146 [label="return UseConnection<JobDetailsDto>(connection =>\r\n            {\r\n\r\n                const string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="241-275", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="JobMethodTests.cs"];
m5_147 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="239-239", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="JobMethodTests.cs"];
m5_204 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="JobMethodTests.cs"];
m5_325 [label="Entry Unk.DeserializeJobs", span="", cluster="Unk.DeserializeJobs", file="JobMethodTests.cs"];
m5_23 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="69-69", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="JobMethodTests.cs"];
m5_24 [label="return GetNumberOfJobsByStateName(ProcessingState.StateName);", span="71-71", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="JobMethodTests.cs"];
m5_25 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="69-69", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="JobMethodTests.cs"];
m5_138 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="229-229", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="JobMethodTests.cs"];
m5_139 [label="return GetHourlyTimelineStats(''succeeded'');", span="231-231", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="JobMethodTests.cs"];
m5_140 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="229-229", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="JobMethodTests.cs"];
m5_136 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="24-24", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="JobMethodTests.cs"];
m5_201 [label="Entry Unk.Read", span="", cluster="Unk.Read", file="JobMethodTests.cs"];
m5_345 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="JobMethodTests.cs"];
m5_74 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="154-154", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="JobMethodTests.cs"];
m5_75 [label="return GetJobs(\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.FromNullableStringTimestamp(stateData[''SucceededAt''])\r\n                });", span="156-167", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="JobMethodTests.cs"];
m5_76 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="154-154", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="JobMethodTests.cs"];
m5_66 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="137-137", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="JobMethodTests.cs"];
m5_67 [label="return GetJobs(\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.FromNullableStringTimestamp(stateData[''FailedAt''])\r\n                });", span="139-151", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="JobMethodTests.cs"];
m5_68 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="137-137", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="JobMethodTests.cs"];
m5_215 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="JobMethodTests.cs"];
m5_42 [label="Entry HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="JobMethodTests.cs"];
m5_109 [label="Entry Unk.EnqueuedJobs", span="", cluster="Unk.EnqueuedJobs", file="JobMethodTests.cs"];
m5_43 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="100-100", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="JobMethodTests.cs"];
m5_44 [label="return GetTimelineStats(''succeeded'');", span="102-102", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="JobMethodTests.cs"];
m5_45 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="100-100", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="JobMethodTests.cs"];
m5_344 [label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30", cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="JobMethodTests.cs"];
m5_15 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="56-56", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="JobMethodTests.cs"];
m5_16 [label="var queueApi = GetQueueApi(queue)", span="58-58", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="JobMethodTests.cs"];
m5_17 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="59-59", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="JobMethodTests.cs"];
m5_18 [label="return counters.FetchedCount ?? 0;", span="61-61", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="JobMethodTests.cs"];
m5_19 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="56-56", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="JobMethodTests.cs"];
m5_34 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="JobMethodTests.cs"];
m5_200 [label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18", cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="JobMethodTests.cs"];
m5_202 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="JobMethodTests.cs"];
m5_364 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()", file="JobMethodTests.cs"];
m5_20 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="64-64", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="JobMethodTests.cs"];
m5_21 [label="return GetNumberOfJobsByStateName(FailedState.StateName);", span="66-66", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="JobMethodTests.cs"];
m5_22 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="64-64", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="JobMethodTests.cs"];
m5_64 [label="Entry HangFire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21", cluster="HangFire.Storage.Monitoring.ServerDto.ServerDto()", file="JobMethodTests.cs"];
m5_353 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="526-526", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="JobMethodTests.cs"];
m5_354 [label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="530-530", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="JobMethodTests.cs"];
m5_355 [label=jobs, span="532-532", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="JobMethodTests.cs"];
m5_357 [label="var dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="535-535", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="JobMethodTests.cs"];
m5_358 [label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="537-538", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="JobMethodTests.cs"];
m5_359 [label="return new JobList<TDto>(result);", span="541-541", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="JobMethodTests.cs"];
m5_356 [label="var stateData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="534-534", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="JobMethodTests.cs"];
m5_360 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="526-526", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="JobMethodTests.cs"];
m5_313 [label="Entry TransactionScope.cstr", span="", cluster="TransactionScope.cstr", file="JobMethodTests.cs"];
m5_104 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="JobMethodTests.cs"];
m5_284 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="JobMethodTests.cs"];
m5_162 [label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22", cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="JobMethodTests.cs"];
m5_305 [label="Entry HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="JobMethodTests.cs"];
m5_13 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="413-413", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="JobMethodTests.cs"];
m5_298 [label="return UseConnection<IPersistentJobQueueMonitoringApi>(connection =>\r\n            {\r\n                var provider = _queueProviders.GetProvider(queueName);\r\n                var monitoringApi = provider.GetJobQueueMonitoringApi(connection);\r\n\r\n                return monitoringApi;\r\n            });", span="415-421", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="JobMethodTests.cs"];
m5_299 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="413-413", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="JobMethodTests.cs"];
m5_88 [label="Entry HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="JobMethodTests.cs"];
m5_368 [label="Entry lambda expression", span="546-576", cluster="lambda expression", file="JobMethodTests.cs"];
m5_30 [label="Entry lambda expression", span="79-84", cluster="lambda expression", file="JobMethodTests.cs"];
m5_31 [label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.FromStringTimestamp(stateData[''StartedAt'']),\r\n                }", span="79-84", cluster="lambda expression", file="JobMethodTests.cs"];
m5_32 [label="Exit lambda expression", span="79-84", cluster="lambda expression", file="JobMethodTests.cs"];
m5_39 [label="Entry lambda expression", span="92-97", cluster="lambda expression", file="JobMethodTests.cs"];
m5_40 [label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.FromStringTimestamp(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.FromStringTimestamp(stateData[''ScheduledAt''])\r\n                }", span="92-97", cluster="lambda expression", file="JobMethodTests.cs"];
m5_41 [label="Exit lambda expression", span="92-97", cluster="lambda expression", file="JobMethodTests.cs"];
m5_54 [label="Entry lambda expression", span="112-134", cluster="lambda expression", file="JobMethodTests.cs"];
m5_55 [label="var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList()", span="114-116", cluster="lambda expression", file="JobMethodTests.cs"];
m5_56 [label="var result = new List<ServerDto>()", span="118-118", cluster="lambda expression", file="JobMethodTests.cs"];
m5_57 [label=servers, span="120-120", cluster="lambda expression", file="JobMethodTests.cs"];
m5_59 [label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="123-130", cluster="lambda expression", file="JobMethodTests.cs"];
m5_60 [label="return result;", span="133-133", cluster="lambda expression", file="JobMethodTests.cs"];
m5_58 [label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="122-122", cluster="lambda expression", file="JobMethodTests.cs"];
m5_61 [label="Exit lambda expression", span="112-134", cluster="lambda expression", file="JobMethodTests.cs"];
m5_69 [label="Entry lambda expression", span="143-151", cluster="lambda expression", file="JobMethodTests.cs"];
m5_70 [label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.FromNullableStringTimestamp(stateData[''FailedAt''])\r\n                }", span="143-151", cluster="lambda expression", file="JobMethodTests.cs"];
m5_71 [label="Exit lambda expression", span="143-151", cluster="lambda expression", file="JobMethodTests.cs"];
m5_77 [label="Entry lambda expression", span="160-167", cluster="lambda expression", file="JobMethodTests.cs"];
m5_78 [label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.FromNullableStringTimestamp(stateData[''SucceededAt''])\r\n                }", span="160-167", cluster="lambda expression", file="JobMethodTests.cs"];
m5_79 [label="Exit lambda expression", span="160-167", cluster="lambda expression", file="JobMethodTests.cs"];
m5_85 [label="Entry lambda expression", span="176-180", cluster="lambda expression", file="JobMethodTests.cs"];
m5_86 [label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.FromNullableStringTimestamp(stateData[''DeletedAt''])\r\n                }", span="176-180", cluster="lambda expression", color=red, community=0, file="JobMethodTests.cs"];
m5_87 [label="Exit lambda expression", span="176-180", cluster="lambda expression", file="JobMethodTests.cs"];
m5_92 [label="Entry lambda expression", span="185-210", cluster="lambda expression", file="JobMethodTests.cs"];
m5_93 [label="var tuples = _queueProviders\r\n                    .Select(x => x.GetJobQueueMonitoringApi(connection))\r\n                    .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                    .OrderBy(x => x.Queue)\r\n                    .ToArray()", span="187-191", cluster="lambda expression", file="JobMethodTests.cs"];
m5_111 [label="x.GetJobQueueMonitoringApi(connection)", span="188-188", cluster="lambda expression", file="JobMethodTests.cs"];
m5_94 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="193-193", cluster="lambda expression", file="JobMethodTests.cs"];
m5_110 [label="Entry lambda expression", span="188-188", cluster="lambda expression", file="JobMethodTests.cs"];
m5_114 [label="Entry lambda expression", span="189-189", cluster="lambda expression", file="JobMethodTests.cs"];
m5_118 [label="Entry lambda expression", span="189-189", cluster="lambda expression", file="JobMethodTests.cs"];
m5_121 [label="Entry lambda expression", span="190-190", cluster="lambda expression", file="JobMethodTests.cs"];
m5_95 [label=tuples, span="195-195", cluster="lambda expression", file="JobMethodTests.cs"];
m5_98 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = tuple.Queue,\r\n                        Length = counters.EnqueuedCount ?? 0,\r\n                        Fetched = counters.FetchedCount,\r\n                        FirstJobs = EnqueuedJobs(enqueuedJobIds)\r\n                    })", span="200-206", cluster="lambda expression", file="JobMethodTests.cs"];
m5_99 [label="return result;", span="209-209", cluster="lambda expression", file="JobMethodTests.cs"];
m5_96 [label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="197-197", cluster="lambda expression", file="JobMethodTests.cs"];
m5_97 [label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="198-198", cluster="lambda expression", file="JobMethodTests.cs"];
m5_100 [label="Exit lambda expression", span="185-210", cluster="lambda expression", file="JobMethodTests.cs"];
m5_112 [label="Exit lambda expression", span="188-188", cluster="lambda expression", file="JobMethodTests.cs"];
m5_115 [label="x.GetQueues()", span="189-189", cluster="lambda expression", file="JobMethodTests.cs"];
m5_116 [label="Exit lambda expression", span="189-189", cluster="lambda expression", file="JobMethodTests.cs"];
m5_119 [label="new { Monitoring = monitoring, Queue = queue }", span="189-189", cluster="lambda expression", file="JobMethodTests.cs"];
m5_120 [label="Exit lambda expression", span="189-189", cluster="lambda expression", file="JobMethodTests.cs"];
m5_122 [label="x.Queue", span="190-190", cluster="lambda expression", file="JobMethodTests.cs"];
m5_123 [label="Exit lambda expression", span="190-190", cluster="lambda expression", file="JobMethodTests.cs"];
m5_151 [label="var multi = connection.QueryMultiple(sql, new { id = jobId })", span="249-249", cluster="lambda expression", file="JobMethodTests.cs"];
m5_149 [label="Entry lambda expression", span="241-275", cluster="lambda expression", file="JobMethodTests.cs"];
m5_150 [label="string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc''", span="244-247", cluster="lambda expression", file="JobMethodTests.cs"];
m5_152 [label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="251-251", cluster="lambda expression", file="JobMethodTests.cs"];
m5_155 [label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="254-254", cluster="lambda expression", file="JobMethodTests.cs"];
m5_156 [label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            })\r\n                            .ToList()", span="255-265", cluster="lambda expression", file="JobMethodTests.cs"];
m5_153 [label="job == null", span="252-252", cluster="lambda expression", file="JobMethodTests.cs"];
m5_157 [label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="267-273", cluster="lambda expression", file="JobMethodTests.cs"];
m5_154 [label="return null;", span="252-252", cluster="lambda expression", file="JobMethodTests.cs"];
m5_164 [label="Entry lambda expression", span="254-254", cluster="lambda expression", file="JobMethodTests.cs"];
m5_167 [label="Entry lambda expression", span="254-254", cluster="lambda expression", file="JobMethodTests.cs"];
m5_170 [label="Entry lambda expression", span="258-264", cluster="lambda expression", file="JobMethodTests.cs"];
m5_158 [label="Exit lambda expression", span="241-275", cluster="lambda expression", file="JobMethodTests.cs"];
m5_165 [label="x.Name", span="254-254", cluster="lambda expression", file="JobMethodTests.cs"];
m5_166 [label="Exit lambda expression", span="254-254", cluster="lambda expression", file="JobMethodTests.cs"];
m5_168 [label="x.Value", span="254-254", cluster="lambda expression", file="JobMethodTests.cs"];
m5_169 [label="Exit lambda expression", span="254-254", cluster="lambda expression", file="JobMethodTests.cs"];
m5_171 [label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            }", span="258-264", cluster="lambda expression", file="JobMethodTests.cs"];
m5_172 [label="Exit lambda expression", span="258-264", cluster="lambda expression", file="JobMethodTests.cs"];
m5_183 [label="Entry lambda expression", span="290-327", cluster="lambda expression", file="JobMethodTests.cs"];
m5_184 [label="string sql = @''\r\nselect StateName as [State], count(id) as [Count] From HangFire.Job \r\ngroup by StateName\r\nhaving StateName is not null;\r\nselect count(Id) from HangFire.Server;\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:succeeded';\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:deleted';\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n''", span="292-300", cluster="lambda expression", file="JobMethodTests.cs"];
m5_186 [label="var multi = connection.QueryMultiple(sql)", span="303-303", cluster="lambda expression", file="JobMethodTests.cs"];
m5_197 [label="stats.Queues = _queueProviders\r\n                    .SelectMany(x => x.GetJobQueueMonitoringApi(connection).GetQueues())\r\n                    .Count()", span="322-324", cluster="lambda expression", file="JobMethodTests.cs"];
m5_217 [label="x.GetJobQueueMonitoringApi(connection).GetQueues()", span="323-323", cluster="lambda expression", file="JobMethodTests.cs"];
m5_185 [label="var stats = new StatisticsDto()", span="302-302", cluster="lambda expression", file="JobMethodTests.cs"];
m5_189 [label="stats.Enqueued = getCountIfExists(EnqueuedState.StateName)", span="309-309", cluster="lambda expression", file="JobMethodTests.cs"];
m5_190 [label="stats.Failed = getCountIfExists(FailedState.StateName)", span="310-310", cluster="lambda expression", file="JobMethodTests.cs"];
m5_191 [label="stats.Processing = getCountIfExists(ProcessingState.StateName)", span="311-311", cluster="lambda expression", file="JobMethodTests.cs"];
m5_192 [label="stats.Scheduled = getCountIfExists(ScheduledState.StateName)", span="312-312", cluster="lambda expression", file="JobMethodTests.cs"];
m5_193 [label="stats.Servers = multi.Read<int>().Single()", span="314-314", cluster="lambda expression", file="JobMethodTests.cs"];
m5_194 [label="stats.Succeeded = multi.Read<int?>().SingleOrDefault() ?? 0", span="316-316", cluster="lambda expression", file="JobMethodTests.cs"];
m5_195 [label="stats.Deleted = multi.Read<int?>().SingleOrDefault() ?? 0", span="317-317", cluster="lambda expression", file="JobMethodTests.cs"];
m5_196 [label="stats.Recurring = multi.Read<int>().Single()", span="319-319", cluster="lambda expression", file="JobMethodTests.cs"];
m5_198 [label="return stats;", span="326-326", cluster="lambda expression", file="JobMethodTests.cs"];
m5_187 [label="var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count)", span="305-305", cluster="lambda expression", file="JobMethodTests.cs"];
m5_188 [label="Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0", span="307-307", cluster="lambda expression", file="JobMethodTests.cs"];
m5_206 [label="Entry lambda expression", span="305-305", cluster="lambda expression", file="JobMethodTests.cs"];
m5_209 [label="Entry lambda expression", span="305-305", cluster="lambda expression", file="JobMethodTests.cs"];
m5_213 [label="countByStates.ContainsKey(name) ? countByStates[name] : 0", span="307-307", cluster="lambda expression", file="JobMethodTests.cs"];
m5_216 [label="Entry lambda expression", span="323-323", cluster="lambda expression", file="JobMethodTests.cs"];
m5_199 [label="Exit lambda expression", span="290-327", cluster="lambda expression", file="JobMethodTests.cs"];
m5_207 [label="x.State", span="305-305", cluster="lambda expression", file="JobMethodTests.cs"];
m5_208 [label="Exit lambda expression", span="305-305", cluster="lambda expression", file="JobMethodTests.cs"];
m5_210 [label="x.Count", span="305-305", cluster="lambda expression", file="JobMethodTests.cs"];
m5_211 [label="Exit lambda expression", span="305-305", cluster="lambda expression", file="JobMethodTests.cs"];
m5_212 [label="Entry lambda expression", span="307-307", cluster="lambda expression", file="JobMethodTests.cs"];
m5_214 [label="Exit lambda expression", span="307-307", cluster="lambda expression", file="JobMethodTests.cs"];
m5_218 [label="Exit lambda expression", span="323-323", cluster="lambda expression", file="JobMethodTests.cs"];
m5_230 [label="var keys = dates.Select(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="342-342", cluster="lambda expression", file="JobMethodTests.cs"];
m5_250 [label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="342-342", cluster="lambda expression", file="JobMethodTests.cs"];
m5_222 [label="Entry lambda expression", span="332-367", cluster="lambda expression", file="JobMethodTests.cs"];
m5_223 [label="var endDate = DateTime.UtcNow", span="334-334", cluster="lambda expression", file="JobMethodTests.cs"];
m5_232 [label="var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="349-352", cluster="lambda expression", file="JobMethodTests.cs"];
m5_224 [label="var dates = new List<DateTime>()", span="335-335", cluster="lambda expression", file="JobMethodTests.cs"];
m5_227 [label="dates.Add(endDate)", span="338-338", cluster="lambda expression", file="JobMethodTests.cs"];
m5_228 [label="endDate = endDate.AddHours(-1)", span="339-339", cluster="lambda expression", file="JobMethodTests.cs"];
m5_225 [label="var i = 0", span="336-336", cluster="lambda expression", file="JobMethodTests.cs"];
m5_238 [label="i < dates.Count", span="360-360", cluster="lambda expression", file="JobMethodTests.cs"];
m5_240 [label="result.Add(dates[i], value)", span="363-363", cluster="lambda expression", file="JobMethodTests.cs"];
m5_226 [label="i < 24", span="336-336", cluster="lambda expression", file="JobMethodTests.cs"];
m5_229 [label="i++", span="336-336", cluster="lambda expression", file="JobMethodTests.cs"];
m5_231 [label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="344-347", cluster="lambda expression", file="JobMethodTests.cs"];
m5_249 [label="Entry lambda expression", span="342-342", cluster="lambda expression", file="JobMethodTests.cs"];
m5_233 [label=keys, span="354-354", cluster="lambda expression", file="JobMethodTests.cs"];
m5_254 [label="Entry lambda expression", span="352-352", cluster="lambda expression", file="JobMethodTests.cs"];
m5_257 [label="Entry lambda expression", span="352-352", cluster="lambda expression", file="JobMethodTests.cs"];
m5_234 [label="!valuesMap.ContainsKey(key)", span="356-356", cluster="lambda expression", file="JobMethodTests.cs"];
m5_235 [label="valuesMap.Add(key, 0)", span="356-356", cluster="lambda expression", file="JobMethodTests.cs"];
m5_239 [label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="362-362", cluster="lambda expression", file="JobMethodTests.cs"];
m5_236 [label="var result = new Dictionary<DateTime, long>()", span="359-359", cluster="lambda expression", file="JobMethodTests.cs"];
m5_237 [label="var i = 0", span="360-360", cluster="lambda expression", file="JobMethodTests.cs"];
m5_242 [label="return result;", span="366-366", cluster="lambda expression", file="JobMethodTests.cs"];
m5_241 [label="i++", span="360-360", cluster="lambda expression", file="JobMethodTests.cs"];
m5_243 [label="Exit lambda expression", span="332-367", cluster="lambda expression", file="JobMethodTests.cs"];
m5_251 [label="Exit lambda expression", span="342-342", cluster="lambda expression", file="JobMethodTests.cs"];
m5_255 [label="(string)x.Key", span="352-352", cluster="lambda expression", file="JobMethodTests.cs"];
m5_256 [label="Exit lambda expression", span="352-352", cluster="lambda expression", file="JobMethodTests.cs"];
m5_258 [label="(long)x.Count", span="352-352", cluster="lambda expression", file="JobMethodTests.cs"];
m5_259 [label="Exit lambda expression", span="352-352", cluster="lambda expression", file="JobMethodTests.cs"];
m5_270 [label="var keys = stringDates.Select(x => String.Format(''stats:{0}:{1}'', type, x)).ToList()", span="385-385", cluster="lambda expression", file="JobMethodTests.cs"];
m5_289 [label="String.Format(''stats:{0}:{1}'', type, x)", span="385-385", cluster="lambda expression", file="JobMethodTests.cs"];
m5_262 [label="Entry lambda expression", span="372-410", cluster="lambda expression", file="JobMethodTests.cs"];
m5_263 [label="var endDate = DateTime.UtcNow.Date", span="374-374", cluster="lambda expression", file="JobMethodTests.cs"];
m5_272 [label="var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="392-395", cluster="lambda expression", file="JobMethodTests.cs"];
m5_264 [label="var startDate = endDate.AddDays(-7)", span="375-375", cluster="lambda expression", file="JobMethodTests.cs"];
m5_266 [label="startDate <= endDate", span="378-378", cluster="lambda expression", file="JobMethodTests.cs"];
m5_267 [label="dates.Add(endDate)", span="380-380", cluster="lambda expression", file="JobMethodTests.cs"];
m5_268 [label="endDate = endDate.AddDays(-1)", span="381-381", cluster="lambda expression", file="JobMethodTests.cs"];
m5_265 [label="var dates = new List<DateTime>()", span="376-376", cluster="lambda expression", file="JobMethodTests.cs"];
m5_269 [label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="384-384", cluster="lambda expression", file="JobMethodTests.cs"];
m5_280 [label="result.Add(dates[i], value)", span="406-406", cluster="lambda expression", file="JobMethodTests.cs"];
m5_285 [label="Entry lambda expression", span="384-384", cluster="lambda expression", file="JobMethodTests.cs"];
m5_278 [label="i < stringDates.Count", span="403-403", cluster="lambda expression", file="JobMethodTests.cs"];
m5_271 [label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="387-390", cluster="lambda expression", file="JobMethodTests.cs"];
m5_288 [label="Entry lambda expression", span="385-385", cluster="lambda expression", file="JobMethodTests.cs"];
m5_273 [label=keys, span="397-397", cluster="lambda expression", file="JobMethodTests.cs"];
m5_292 [label="Entry lambda expression", span="395-395", cluster="lambda expression", file="JobMethodTests.cs"];
m5_295 [label="Entry lambda expression", span="395-395", cluster="lambda expression", file="JobMethodTests.cs"];
m5_274 [label="!valuesMap.ContainsKey(key)", span="399-399", cluster="lambda expression", file="JobMethodTests.cs"];
m5_275 [label="valuesMap.Add(key, 0)", span="399-399", cluster="lambda expression", file="JobMethodTests.cs"];
m5_279 [label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="405-405", cluster="lambda expression", file="JobMethodTests.cs"];
m5_276 [label="var result = new Dictionary<DateTime, long>()", span="402-402", cluster="lambda expression", file="JobMethodTests.cs"];
m5_277 [label="var i = 0", span="403-403", cluster="lambda expression", file="JobMethodTests.cs"];
m5_282 [label="return result;", span="409-409", cluster="lambda expression", file="JobMethodTests.cs"];
m5_281 [label="i++", span="403-403", cluster="lambda expression", file="JobMethodTests.cs"];
m5_283 [label="Exit lambda expression", span="372-410", cluster="lambda expression", file="JobMethodTests.cs"];
m5_286 [label="x.ToString(''yyyy-MM-dd'')", span="384-384", cluster="lambda expression", file="JobMethodTests.cs"];
m5_287 [label="Exit lambda expression", span="384-384", cluster="lambda expression", file="JobMethodTests.cs"];
m5_290 [label="Exit lambda expression", span="385-385", cluster="lambda expression", file="JobMethodTests.cs"];
m5_293 [label="(string)x.Key", span="395-395", cluster="lambda expression", file="JobMethodTests.cs"];
m5_294 [label="Exit lambda expression", span="395-395", cluster="lambda expression", file="JobMethodTests.cs"];
m5_296 [label="(long)x.Count", span="395-395", cluster="lambda expression", file="JobMethodTests.cs"];
m5_297 [label="Exit lambda expression", span="395-395", cluster="lambda expression", file="JobMethodTests.cs"];
m5_301 [label="var provider = _queueProviders.GetProvider(queueName)", span="417-417", cluster="lambda expression", file="JobMethodTests.cs"];
m5_300 [label="Entry lambda expression", span="415-421", cluster="lambda expression", file="JobMethodTests.cs"];
m5_302 [label="var monitoringApi = provider.GetJobQueueMonitoringApi(connection)", span="418-418", cluster="lambda expression", file="JobMethodTests.cs"];
m5_303 [label="return monitoringApi;", span="420-420", cluster="lambda expression", file="JobMethodTests.cs"];
m5_304 [label="Exit lambda expression", span="415-421", cluster="lambda expression", file="JobMethodTests.cs"];
m5_322 [label="var jobs = connection.Query<SqlJob>(\r\n                    enqueuedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList()", span="451-454", cluster="lambda expression", file="JobMethodTests.cs"];
m5_320 [label="Entry lambda expression", span="441-466", cluster="lambda expression", file="JobMethodTests.cs"];
m5_321 [label="string enqueuedJobsSql = @''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is null''", span="444-449", cluster="lambda expression", file="JobMethodTests.cs"];
m5_323 [label="return DeserializeJobs(\r\n                    jobs,\r\n                    (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = sqlJob.StateName,\r\n                        EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                            ? JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                            : null\r\n                    });", span="456-465", cluster="lambda expression", file="JobMethodTests.cs"];
m5_324 [label="Exit lambda expression", span="441-466", cluster="lambda expression", file="JobMethodTests.cs"];
m5_326 [label="Entry lambda expression", span="458-465", cluster="lambda expression", file="JobMethodTests.cs"];
m5_327 [label="new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = sqlJob.StateName,\r\n                        EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                            ? JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                            : null\r\n                    }", span="458-465", cluster="lambda expression", file="JobMethodTests.cs"];
m5_328 [label="Exit lambda expression", span="458-465", cluster="lambda expression", file="JobMethodTests.cs"];
m5_334 [label="var count = connection.Query<int>(\r\n                     sqlQuery,\r\n                     new { state = stateName })\r\n                     .Single()", span="476-479", cluster="lambda expression", file="JobMethodTests.cs"];
m5_332 [label="Entry lambda expression", span="471-482", cluster="lambda expression", file="JobMethodTests.cs"];
m5_333 [label="string sqlQuery = @''\r\nselect count(Id) from HangFire.Job where StateName = @state''", span="473-474", cluster="lambda expression", file="JobMethodTests.cs"];
m5_335 [label="return count;", span="481-481", cluster="lambda expression", file="JobMethodTests.cs"];
m5_336 [label="Exit lambda expression", span="471-482", cluster="lambda expression", file="JobMethodTests.cs"];
m5_350 [label="var jobs = connection.Query<SqlJob>(\r\n                            jobsSql,\r\n                            new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                            .ToList()", span="517-520", cluster="lambda expression", file="JobMethodTests.cs"];
m5_351 [label="return DeserializeJobs(jobs, selector);", span="522-522", cluster="lambda expression", file="JobMethodTests.cs"];
m5_348 [label="Entry lambda expression", span="506-523", cluster="lambda expression", file="JobMethodTests.cs"];
m5_349 [label="string jobsSql = @''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from HangFire.Job j\r\n  left join HangFire.State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n''", span="508-515", cluster="lambda expression", file="JobMethodTests.cs"];
m5_352 [label="Exit lambda expression", span="506-523", cluster="lambda expression", file="JobMethodTests.cs"];
m5_370 [label="var jobs = connection.Query<SqlJob>(\r\n                    fetchedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList()", span="556-559", cluster="lambda expression", file="JobMethodTests.cs"];
m5_369 [label="string fetchedJobsSql = @''\r\nselect j.*, jq.FetchedAt, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is not null''", span="549-554", cluster="lambda expression", file="JobMethodTests.cs"];
m5_371 [label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="561-561", cluster="lambda expression", file="JobMethodTests.cs"];
m5_372 [label=jobs, span="563-563", cluster="lambda expression", file="JobMethodTests.cs"];
m5_373 [label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                        job.Id.ToString(),\r\n                        new FetchedJobDto\r\n                        {\r\n                            Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                            State = job.StateName,\r\n                            FetchedAt = job.FetchedAt\r\n                        }))", span="565-572", cluster="lambda expression", file="JobMethodTests.cs"];
m5_374 [label="return new JobList<FetchedJobDto>(result);", span="575-575", cluster="lambda expression", file="JobMethodTests.cs"];
m5_375 [label="Exit lambda expression", span="546-576", cluster="lambda expression", file="JobMethodTests.cs"];
m5_108 [label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18", cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="JobMethodTests.cs"];
m5_65 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="JobMethodTests.cs"];
m5_62 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="JobMethodTests.cs"];
m5_291 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="JobMethodTests.cs"];
m5_29 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="500-500", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="JobMethodTests.cs"];
m5_346 [label="return UseConnection<JobList<TDto>>(connection =>\r\n            {\r\n                const string jobsSql = @''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from HangFire.Job j\r\n  left join HangFire.State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n'';\r\n\r\n                var jobs = connection.Query<SqlJob>(\r\n                            jobsSql,\r\n                            new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                            .ToList();\r\n\r\n                return DeserializeJobs(jobs, selector);\r\n            });", span="506-523", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="JobMethodTests.cs"];
m5_347 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="500-500", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="JobMethodTests.cs"];
m5_379 [label="Entry HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21", cluster="HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="JobMethodTests.cs"];
m5_252 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="JobMethodTests.cs"];
m5_131 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="221-221", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="JobMethodTests.cs"];
m5_132 [label="var queueApi = GetQueueApi(queue)", span="223-223", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="JobMethodTests.cs"];
m5_133 [label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="224-224", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="JobMethodTests.cs"];
m5_134 [label="return FetchedJobs(fetchedJobIds);", span="226-226", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="JobMethodTests.cs"];
m5_135 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="221-221", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="JobMethodTests.cs"];
m5_105 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="JobMethodTests.cs"];
m5_248 [label="Entry Unk.ElementAt", span="", cluster="Unk.ElementAt", file="JobMethodTests.cs"];
m5_130 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", span="439-439", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", file="JobMethodTests.cs"];
m5_318 [label="return UseConnection<JobList<EnqueuedJobDto>>(connection =>\r\n            {\r\n\r\n                const string enqueuedJobsSql = @''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is null'';\r\n\r\n                var jobs = connection.Query<SqlJob>(\r\n                    enqueuedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList();\r\n\r\n                return DeserializeJobs(\r\n                    jobs,\r\n                    (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = sqlJob.StateName,\r\n                        EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                            ? JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                            : null\r\n                    });\r\n            });", span="441-466", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", file="JobMethodTests.cs"];
m5_319 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", span="439-439", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", file="JobMethodTests.cs"];
m5_377 [label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span="", cluster="KeyValuePair<string, FetchedJobDto>.cstr", file="JobMethodTests.cs"];
m5_245 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="JobMethodTests.cs"];
m5_26 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="74-74", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="JobMethodTests.cs"];
m5_27 [label="return GetJobs(\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.FromStringTimestamp(stateData[''StartedAt'']),\r\n                });", span="76-84", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="JobMethodTests.cs"];
m5_28 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="74-74", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="JobMethodTests.cs"];
m5_246 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="JobMethodTests.cs"];
m5_317 [label="Entry Unk.Complete", span="", cluster="Unk.Complete", file="JobMethodTests.cs"];
m5_314 [label="Entry TransactionOptions.cstr", span="", cluster="TransactionOptions.cstr", file="JobMethodTests.cs"];
m5_376 [label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span="", cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", file="JobMethodTests.cs"];
m5_244 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="JobMethodTests.cs"];
m5_4 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="43-43", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="JobMethodTests.cs"];
m5_5 [label="return GetNumberOfJobsByStateName(ScheduledState.StateName);", span="45-45", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="JobMethodTests.cs"];
m5_6 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="43-43", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="JobMethodTests.cs"];
m5_159 [label="Entry Unk.QueryMultiple", span="", cluster="Unk.QueryMultiple", file="JobMethodTests.cs"];
m5_80 [label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="JobMethodTests.cs"];
m5_36 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="87-87", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="JobMethodTests.cs"];
m5_37 [label="return GetJobs(\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.FromStringTimestamp(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.FromStringTimestamp(stateData[''ScheduledAt''])\r\n                });", span="89-97", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="JobMethodTests.cs"];
m5_38 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="87-87", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="JobMethodTests.cs"];
m5_177 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="283-283", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="JobMethodTests.cs"];
m5_178 [label="return GetNumberOfJobsByStateName(DeletedState.StateName);", span="285-285", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="JobMethodTests.cs"];
m5_179 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="283-283", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="JobMethodTests.cs"];
m5_124 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="213-213", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="JobMethodTests.cs"];
m5_125 [label="var queueApi = GetQueueApi(queue)", span="215-215", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="JobMethodTests.cs"];
m5_126 [label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="216-216", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="JobMethodTests.cs"];
m5_127 [label="return EnqueuedJobs(enqueuedJobIds);", span="218-218", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="JobMethodTests.cs"];
m5_128 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="213-213", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="JobMethodTests.cs"];
m5_50 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="110-110", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="JobMethodTests.cs"];
m5_51 [label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="112-134", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="JobMethodTests.cs"];
m5_52 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="110-110", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="JobMethodTests.cs"];
m5_253 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="JobMethodTests.cs"];
m5_102 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany", file="JobMethodTests.cs"];
m5_161 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="JobMethodTests.cs"];
m5_174 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="278-278", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="JobMethodTests.cs"];
m5_175 [label="return GetNumberOfJobsByStateName(SucceededState.StateName);", span="280-280", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="JobMethodTests.cs"];
m5_176 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="278-278", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="JobMethodTests.cs"];
m5_337 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="485-485", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="JobMethodTests.cs"];
m5_338 [label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="487-487", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="JobMethodTests.cs"];
m5_339 [label="data.Arguments = arguments", span="488-488", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="JobMethodTests.cs"];
m5_340 [label="return data.Deserialize();", span="492-492", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="JobMethodTests.cs"];
m5_341 [label=JobLoadException, span="494-494", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="JobMethodTests.cs"];
m5_342 [label="return null;", span="496-496", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="JobMethodTests.cs"];
m5_343 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="485-485", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="JobMethodTests.cs"];
m5_329 [label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="JobMethodTests.cs"];
m5_72 [label="Entry HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="JobMethodTests.cs"];
m5_14 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="25-25", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="JobMethodTests.cs"];
m5_53 [label="Entry Unk.>", span="", cluster="Unk.>", file="JobMethodTests.cs"];
m5_106 [label="Entry Unk.GetEnqueuedJobIds", span="", cluster="Unk.GetEnqueuedJobIds", file="JobMethodTests.cs"];
m5_103 [label="Entry Unk.OrderBy", span="", cluster="Unk.OrderBy", file="JobMethodTests.cs"];
m5_107 [label="Entry Unk.GetEnqueuedAndFetchedCount", span="", cluster="Unk.GetEnqueuedAndFetchedCount", file="JobMethodTests.cs"];
m5_117 [label="Entry Unk.GetQueues", span="", cluster="Unk.GetQueues", file="JobMethodTests.cs"];
m5_46 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", span="370-370", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="JobMethodTests.cs"];
m5_260 [label="return UseConnection<Dictionary<DateTime, long>>(connection =>\r\n            {\r\n                var endDate = DateTime.UtcNow.Date;\r\n                var startDate = endDate.AddDays(-7);\r\n                var dates = new List<DateTime>();\r\n\r\n                while (startDate <= endDate)\r\n                {\r\n                    dates.Add(endDate);\r\n                    endDate = endDate.AddDays(-1);\r\n                }\r\n\r\n                var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList();\r\n                var keys = stringDates.Select(x => String.Format(''stats:{0}:{1}'', type, x)).ToList();\r\n\r\n                const string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys'';\r\n\r\n                var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count);\r\n\r\n                foreach (var key in keys)\r\n                {\r\n                    if (!valuesMap.ContainsKey(key)) valuesMap.Add(key, 0);\r\n                }\r\n\r\n                var result = new Dictionary<DateTime, long>();\r\n                for (var i = 0; i < stringDates.Count; i++)\r\n                {\r\n                    var value = valuesMap[valuesMap.Keys.ElementAt(i)];\r\n                    result.Add(dates[i], value);\r\n                }\r\n\r\n                return result;\r\n            });", span="372-410", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="JobMethodTests.cs"];
m5_261 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", span="370-370", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="JobMethodTests.cs"];
m5_247 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobMethodTests.cs"];
m5_365 [label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22", cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="JobMethodTests.cs"];
m5_82 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="170-170", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="JobMethodTests.cs"];
m5_83 [label="return GetJobs(\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.FromNullableStringTimestamp(stateData[''DeletedAt''])\r\n                });", span="172-180", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", color=red, community=0, file="JobMethodTests.cs"];
m5_84 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="170-170", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="JobMethodTests.cs"];
m5_8 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="48-48", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="JobMethodTests.cs"];
m5_9 [label="var queueApi = GetQueueApi(queue)", span="50-50", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="JobMethodTests.cs"];
m5_10 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="51-51", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="JobMethodTests.cs"];
m5_11 [label="return counters.EnqueuedCount ?? 0;", span="53-53", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="JobMethodTests.cs"];
m5_12 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="48-48", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="JobMethodTests.cs"];
m5_142 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="234-234", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="JobMethodTests.cs"];
m5_143 [label="return GetHourlyTimelineStats(''failed'');", span="236-236", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="JobMethodTests.cs"];
m5_144 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="234-234", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="JobMethodTests.cs"];
m5_129 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="23-23", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="JobMethodTests.cs"];
m5_205 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="JobMethodTests.cs"];
m5_101 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="JobMethodTests.cs"];
m5_113 [label="Entry Unk.GetJobQueueMonitoringApi", span="", cluster="Unk.GetJobQueueMonitoringApi", file="JobMethodTests.cs"];
m5_173 [label="Entry HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21", cluster="HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="JobMethodTests.cs"];
m5_361 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="JobMethodTests.cs"];
m5_203 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="JobMethodTests.cs"];
m5_89 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="183-183", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="JobMethodTests.cs"];
m5_90 [label="return UseConnection<IList<QueueWithTopEnqueuedJobsDto>>(connection =>\r\n            {\r\n                var tuples = _queueProviders\r\n                    .Select(x => x.GetJobQueueMonitoringApi(connection))\r\n                    .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                    .OrderBy(x => x.Queue)\r\n                    .ToArray();\r\n\r\n                var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length);\r\n\r\n                foreach (var tuple in tuples)\r\n                {\r\n                    var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5);\r\n                    var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue);\r\n\r\n                    result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = tuple.Queue,\r\n                        Length = counters.EnqueuedCount ?? 0,\r\n                        Fetched = counters.FetchedCount,\r\n                        FirstJobs = EnqueuedJobs(enqueuedJobIds)\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="185-210", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="JobMethodTests.cs"];
m5_91 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="183-183", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="JobMethodTests.cs"];
m5_7 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", span="469-469", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="JobMethodTests.cs"];
m5_330 [label="return UseConnection<long>(connection =>\r\n            {\r\n                const string sqlQuery = @''\r\nselect count(Id) from HangFire.Job where StateName = @state'';\r\n\r\n                var count = connection.Query<int>(\r\n                     sqlQuery,\r\n                     new { state = stateName })\r\n                     .Single();\r\n\r\n                return count;\r\n            });", span="471-482", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="JobMethodTests.cs"];
m5_331 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", span="469-469", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="JobMethodTests.cs"];
m5_160 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="JobMethodTests.cs"];
m5_163 [label="Entry Unk.DeserializeJob", span="", cluster="Unk.DeserializeJob", file="JobMethodTests.cs"];
m5_380 [label="HangFire.SqlServer.SqlServerMonitoringApi", span="", file="JobMethodTests.cs"];
m5_381 [label=SqlConnection, span="", file="JobMethodTests.cs"];
m5_382 [label=string, span="", file="JobMethodTests.cs"];
m5_383 [label=countByStates, span="", file="JobMethodTests.cs"];
m5_384 [label=SqlConnection, span="", file="JobMethodTests.cs"];
m5_385 [label=string, span="", file="JobMethodTests.cs"];
m5_386 [label=string, span="", file="JobMethodTests.cs"];
m5_387 [label=string, span="", file="JobMethodTests.cs"];
m5_388 [label="System.Collections.Generic.IEnumerable<int>", span="", file="JobMethodTests.cs"];
m5_389 [label=string, span="", file="JobMethodTests.cs"];
m5_390 [label=int, span="", file="JobMethodTests.cs"];
m5_391 [label=int, span="", file="JobMethodTests.cs"];
m5_392 [label=string, span="", file="JobMethodTests.cs"];
m5_393 [label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", span="", file="JobMethodTests.cs"];
m5_394 [label="System.Collections.Generic.IEnumerable<int>", span="", file="JobMethodTests.cs"];
m6_0 [label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="27-27", cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="ProcessingState.cs"];
m6_1 [label="ServerName = serverName", span="29-29", cluster="HangFire.States.ProcessingState.ProcessingState(string)", color=red, community=0, file="ProcessingState.cs"];
m6_2 [label="Exit HangFire.States.ProcessingState.ProcessingState(string)", span="27-27", cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="ProcessingState.cs"];
m6_7 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ProcessingState.cs"];
m6_6 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ProcessingState.cs"];
m6_3 [label="Entry HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", span="35-35", cluster="HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", file="ProcessingState.cs"];
m6_4 [label="return new Dictionary<string, string>\r\n                {\r\n                    { ''StartedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''ServerName'', ServerName }\r\n                };", span="37-41", cluster="HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", color=green, community=0, file="ProcessingState.cs"];
m6_5 [label="Exit HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", span="35-35", cluster="HangFire.States.ProcessingState.GetProperties(HangFire.Common.JobMethod)", file="ProcessingState.cs"];
m6_8 [label="HangFire.States.ProcessingState", span="", file="ProcessingState.cs"];
m9_14 [label="Entry HangFire.Core.Tests.States.ProcessingStateFacts.StateName_IsCorrect()", span="24-24", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.StateName_IsCorrect()", file="ScheduledState.cs"];
m9_15 [label="var state = new ProcessingState(''Server1'')", span="26-26", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.StateName_IsCorrect()", file="ScheduledState.cs", color=green, community=0];
m9_16 [label="Assert.Equal(ProcessingState.StateName, state.Name)", span="27-27", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.StateName_IsCorrect()", file="ScheduledState.cs"];
m9_17 [label="Exit HangFire.Core.Tests.States.ProcessingStateFacts.StateName_IsCorrect()", span="24-24", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.StateName_IsCorrect()", file="ScheduledState.cs"];
m9_8 [label="Entry HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", span="46-46", cluster="HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="ScheduledState.cs"];
m9_9 [label="var timestamp = long.Parse(stateData[''EnqueueAt''])", span="48-48", cluster="HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="ScheduledState.cs"];
m9_10 [label="context.Transaction.Sets.Add(''schedule'', context.JobId, timestamp)", span="49-49", cluster="HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="ScheduledState.cs"];
m9_6 [label="Exit lambda expression", span="13-13", cluster="lambda expression", file="ScheduledState.cs"];
m9_3 [label="Entry HangFire.States.ScheduledState.GetProperties(HangFire.Common.JobMethod)", span="35-35", cluster="HangFire.States.ScheduledState.GetProperties(HangFire.Common.JobMethod)", file="ScheduledState.cs"];
m9_0 [label="Entry HangFire.Core.Tests.States.ProcessingStateFacts.Ctor_ThrowsAnException_WhenServerNameIsNull()", span="10-10", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.Ctor_ThrowsAnException_WhenServerNameIsNull()", file="ScheduledState.cs"];
m9_1 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new ProcessingState(null))", span="12-13", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.Ctor_ThrowsAnException_WhenServerNameIsNull()", file="ScheduledState.cs"];
m9_2 [label="Exit HangFire.Core.Tests.States.ProcessingStateFacts.Ctor_ThrowsAnException_WhenServerNameIsNull()", span="10-10", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.Ctor_ThrowsAnException_WhenServerNameIsNull()", file="ScheduledState.cs"];
m9_12 [label="new ProcessingState(String.Empty)", span="20-20", cluster="lambda expression", file="ScheduledState.cs"];
m9_4 [label="Entry lambda expression", span="13-13", cluster="lambda expression", file="ScheduledState.cs"];
m9_5 [label="new ProcessingState(null)", span="13-13", cluster="lambda expression", file="ScheduledState.cs"];
m9_31 [label="Entry Unk.False", span="", cluster="Unk.False", file="ScheduledState.cs"];
m9_27 [label="Entry HangFire.Core.Tests.States.ProcessingStateFacts.IsFinal_ReturnsFalse()", span="42-42", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.IsFinal_ReturnsFalse()", file="ScheduledState.cs"];
m9_28 [label="var state = new ProcessingState(''server'')", span="44-44", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.IsFinal_ReturnsFalse()", file="ScheduledState.cs"];
m9_29 [label="Assert.False(state.IsFinal)", span="46-46", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.IsFinal_ReturnsFalse()", file="ScheduledState.cs"];
m9_30 [label="Exit HangFire.Core.Tests.States.ProcessingStateFacts.IsFinal_ReturnsFalse()", span="42-42", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.IsFinal_ReturnsFalse()", file="ScheduledState.cs"];
m9_25 [label="Entry HangFire.States.ProcessingState.SerializeData()", span="41-41", cluster="HangFire.States.ProcessingState.SerializeData()", file="ScheduledState.cs"];
m9_18 [label="HangFire.States.ScheduledState", span="", cluster="Unk.Equal", file="ScheduledState.cs"];
m9_19 [label="Entry HangFire.Core.Tests.States.ProcessingStateFacts.SerializeData_ReturnsCorrectData()", span="31-31", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.SerializeData_ReturnsCorrectData()", file="ScheduledState.cs"];
m9_20 [label="var state = new ProcessingState(''Server1'')", span="33-33", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.SerializeData_ReturnsCorrectData()", file="ScheduledState.cs"];
m9_22 [label="Assert.Equal(JobHelper.ToStringTimestamp(state.StartedAt), data[''StartedAt''])", span="37-37", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.SerializeData_ReturnsCorrectData()", file="ScheduledState.cs"];
m9_23 [label="Assert.Equal(''Server1'', state.ServerName)", span="38-38", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.SerializeData_ReturnsCorrectData()", file="ScheduledState.cs"];
m9_21 [label="var data = state.SerializeData()", span="35-35", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.SerializeData_ReturnsCorrectData()", file="ScheduledState.cs"];
m9_24 [label="Exit HangFire.Core.Tests.States.ProcessingStateFacts.SerializeData_ReturnsCorrectData()", span="31-31", cluster="HangFire.Core.Tests.States.ProcessingStateFacts.SerializeData_ReturnsCorrectData()", file="ScheduledState.cs"];
m9_7 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ScheduledState.cs"];
m9_11 [label="Exit HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", span="46-46", cluster="HangFire.States.ScheduledState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="ScheduledState.cs"];
m9_13 [label="Entry HangFire.Storage.IWriteOnlyPersistentSet.Add(string, string, double)", span="5-5", cluster="HangFire.Storage.IWriteOnlyPersistentSet.Add(string, string, double)", file="ScheduledState.cs"];
m9_26 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ScheduledState.cs"];
m10_66 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="ScheduledState.feature.cs"];
m10_103 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="ScheduledState.feature.cs"];
m10_120 [label="Entry long.Parse(string)", span="0-0", cluster="long.Parse(string)", file="ScheduledState.feature.cs"];
m10_0 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="ScheduledState.feature.cs"];
m10_1 [label="_connectionString = connectionString", span="39-39", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="ScheduledState.feature.cs"];
m10_2 [label="_queueProviders = queueProviders", span="40-40", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="ScheduledState.feature.cs"];
m10_3 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="ScheduledState.feature.cs"];
m10_187 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", span="334-334", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", file="ScheduledState.feature.cs"];
m10_188 [label="return UseConnection<JobList<FetchedJobDto>>(connection =>\r\n            {\r\n\r\n                const string fetchedJobsSql = @''\r\nselect j.*, jq.FetchedAt, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is not null'';\r\n\r\n                var jobs = connection.Query<SqlJob>(\r\n                    fetchedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList();\r\n\r\n                var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count);\r\n\r\n                foreach (var job in jobs)\r\n                {\r\n                    result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                        job.Id.ToString(),\r\n                        new FetchedJobDto\r\n                        {\r\n                            Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                            State = job.StateName,\r\n                            FetchedAt = job.FetchedAt\r\n                        }));\r\n                }\r\n\r\n                return new JobList<FetchedJobDto>(result);\r\n            });", span="336-366", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", file="ScheduledState.feature.cs"];
m10_189 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", span="334-334", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(System.Collections.Generic.IEnumerable<int>)", file="ScheduledState.feature.cs"];
m10_67 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="ScheduledState.feature.cs"];
m10_45 [label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="55-55", cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="ScheduledState.feature.cs"];
m10_243 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="428-428", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="ScheduledState.feature.cs"];
m10_244 [label="return UseConnection<StatisticsDto>(connection =>\r\n            {\r\n                const string sql = @''\r\nselect StateName as [State], count(id) as [Count] From HangFire.Job \r\ngroup by StateName\r\nhaving StateName is not null;\r\nselect count(Id) from HangFire.Server;\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:succeeded';\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:deleted';\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n'';\r\n\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql))\r\n                {\r\n                    var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count);\r\n\r\n                    Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0;\r\n\r\n                    stats.Enqueued = getCountIfExists(EnqueuedState.StateName);\r\n                    stats.Failed = getCountIfExists(FailedState.StateName);\r\n                    stats.Processing = getCountIfExists(ProcessingState.StateName);\r\n                    stats.Scheduled = getCountIfExists(ScheduledState.StateName);\r\n\r\n                    stats.Servers = multi.Read<int>().Single();\r\n\r\n                    stats.Succeeded = multi.Read<int?>().SingleOrDefault() ?? 0;\r\n                    stats.Deleted = multi.Read<int?>().SingleOrDefault() ?? 0;\r\n\r\n                    stats.Recurring = multi.Read<int>().Single();\r\n                }\r\n\r\n                stats.Queues = _queueProviders\r\n                    .SelectMany(x => x.GetJobQueueMonitoringApi(connection).GetQueues())\r\n                    .Count();\r\n\r\n                return stats;\r\n            });", span="430-467", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="ScheduledState.feature.cs"];
m10_245 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="428-428", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="ScheduledState.feature.cs"];
m10_43 [label="Entry HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="ScheduledState.feature.cs"];
m10_89 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="180-180", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="ScheduledState.feature.cs"];
m10_90 [label="return GetTimelineStats(''failed'');", span="182-182", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="ScheduledState.feature.cs"];
m10_91 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="180-180", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="ScheduledState.feature.cs"];
m10_112 [label="Entry HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", span="60-60", cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="ScheduledState.feature.cs"];
m10_378 [label="Entry Unk.Open", span="", cluster="Unk.Open", file="ScheduledState.feature.cs"];
m10_25 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="564-564", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="ScheduledState.feature.cs"];
m10_368 [label="var transaction = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted })", span="566-566", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="ScheduledState.feature.cs"];
m10_371 [label="var result = action(connection)", span="571-571", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="ScheduledState.feature.cs"];
m10_369 [label="var connection = new SqlConnection(_connectionString)", span="567-567", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="ScheduledState.feature.cs"];
m10_372 [label="transaction.Complete()", span="573-573", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="ScheduledState.feature.cs"];
m10_370 [label="connection.Open()", span="569-569", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="ScheduledState.feature.cs"];
m10_373 [label="return result;", span="575-575", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="ScheduledState.feature.cs"];
m10_374 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="564-564", cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="ScheduledState.feature.cs"];
m10_377 [label="Entry SqlConnection.cstr", span="", cluster="SqlConnection.cstr", file="ScheduledState.feature.cs"];
m10_281 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", file="ScheduledState.feature.cs"];
m10_206 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", span="470-470", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="ScheduledState.feature.cs"];
m10_282 [label="return UseConnection<Dictionary<DateTime, long>>(connection =>\r\n            {\r\n                var endDate = DateTime.UtcNow;\r\n                var dates = new List<DateTime>();\r\n                for (var i = 0; i < 24; i++)\r\n                {\r\n                    dates.Add(endDate);\r\n                    endDate = endDate.AddHours(-1);\r\n                }\r\n\r\n                var keys = dates.Select(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList();\r\n\r\n                const string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys'';\r\n\r\n                var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count);\r\n\r\n                foreach (var key in keys)\r\n                {\r\n                    if (!valuesMap.ContainsKey(key)) valuesMap.Add(key, 0);\r\n                }\r\n\r\n                var result = new Dictionary<DateTime, long>();\r\n                for (var i = 0; i < dates.Count; i++)\r\n                {\r\n                    var value = valuesMap[valuesMap.Keys.ElementAt(i)];\r\n                    result.Add(dates[i], value);\r\n                }\r\n\r\n                return result;\r\n            });", span="472-507", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="ScheduledState.feature.cs"];
m10_283 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", span="470-470", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="ScheduledState.feature.cs"];
m10_200 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="ScheduledState.feature.cs"];
m10_210 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="379-379", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="ScheduledState.feature.cs"];
m10_211 [label="return UseConnection<JobDetailsDto>(connection =>\r\n            {\r\n\r\n                const string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="381-415", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="ScheduledState.feature.cs"];
m10_212 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="379-379", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="ScheduledState.feature.cs"];
m10_266 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="ScheduledState.feature.cs"];
m10_54 [label="Entry Unk.DeserializeJobs", span="", cluster="Unk.DeserializeJobs", file="ScheduledState.feature.cs"];
m10_33 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="85-85", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="ScheduledState.feature.cs"];
m10_34 [label="return GetNumberOfJobsByStateName(ProcessingState.StateName);", span="87-87", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", color=red, community=0, file="ScheduledState.feature.cs"];
m10_35 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="85-85", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="ScheduledState.feature.cs"];
m10_203 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="369-369", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="ScheduledState.feature.cs"];
m10_204 [label="return GetHourlyTimelineStats(''succeeded'');", span="371-371", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="ScheduledState.feature.cs"];
m10_205 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="369-369", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="ScheduledState.feature.cs"];
m10_186 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="24-24", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="ScheduledState.feature.cs"];
m10_264 [label="Entry Unk.Read", span="", cluster="Unk.Read", file="ScheduledState.feature.cs"];
m10_77 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()", file="ScheduledState.feature.cs"];
m10_113 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="229-229", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="ScheduledState.feature.cs"];
m10_114 [label="return GetJobs(\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.FromNullableStringTimestamp(stateData[''SucceededAt''])\r\n                });", span="231-242", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="ScheduledState.feature.cs"];
m10_115 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="229-229", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="ScheduledState.feature.cs"];
m10_105 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="212-212", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="ScheduledState.feature.cs"];
m10_106 [label="return GetJobs(\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.FromNullableStringTimestamp(stateData[''FailedAt''])\r\n                });", span="214-226", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="ScheduledState.feature.cs"];
m10_107 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="212-212", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="ScheduledState.feature.cs"];
m10_277 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="ScheduledState.feature.cs"];
m10_84 [label="Entry HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="ScheduledState.feature.cs"];
m10_148 [label="Entry Unk.EnqueuedJobs", span="", cluster="Unk.EnqueuedJobs", file="ScheduledState.feature.cs"];
m10_85 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="175-175", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="ScheduledState.feature.cs"];
m10_86 [label="return GetTimelineStats(''succeeded'');", span="177-177", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="ScheduledState.feature.cs"];
m10_87 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="175-175", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="ScheduledState.feature.cs"];
m10_64 [label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30", cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="ScheduledState.feature.cs"];
m10_15 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="56-56", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="ScheduledState.feature.cs"];
m10_16 [label="var queueApi = GetQueueApi(queue)", span="58-58", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="ScheduledState.feature.cs"];
m10_17 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="59-59", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="ScheduledState.feature.cs"];
m10_18 [label="return counters.FetchedCount ?? 0;", span="61-61", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="ScheduledState.feature.cs"];
m10_19 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="56-56", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="ScheduledState.feature.cs"];
m10_44 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="ScheduledState.feature.cs"];
m10_263 [label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18", cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="ScheduledState.feature.cs"];
m10_265 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="ScheduledState.feature.cs"];
m10_68 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()", file="ScheduledState.feature.cs"];
m10_20 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="64-64", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="ScheduledState.feature.cs"];
m10_21 [label="return GetNumberOfJobsByStateName(FailedState.StateName);", span="66-66", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="ScheduledState.feature.cs"];
m10_22 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="64-64", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="ScheduledState.feature.cs"];
m10_104 [label="Entry HangFire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21", cluster="HangFire.Storage.Monitoring.ServerDto.ServerDto()", file="ScheduledState.feature.cs"];
m10_55 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="129-129", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="ScheduledState.feature.cs"];
m10_56 [label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="133-133", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", color=red, community=0, file="ScheduledState.feature.cs"];
m10_57 [label=jobs, span="135-135", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="ScheduledState.feature.cs"];
m10_59 [label="var dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="138-138", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="ScheduledState.feature.cs"];
m10_60 [label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="140-141", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="ScheduledState.feature.cs"];
m10_61 [label="return new JobList<TDto>(result);", span="144-144", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="ScheduledState.feature.cs"];
m10_58 [label="var stateData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="137-137", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", color=red, community=0, file="ScheduledState.feature.cs"];
m10_62 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="129-129", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="ScheduledState.feature.cs"];
m10_375 [label="Entry TransactionScope.cstr", span="", cluster="TransactionScope.cstr", file="ScheduledState.feature.cs"];
m10_143 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="ScheduledState.feature.cs"];
m10_346 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="ScheduledState.feature.cs"];
m10_226 [label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22", cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="ScheduledState.feature.cs"];
m10_367 [label="Entry HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="ScheduledState.feature.cs"];
m10_13 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="553-553", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="ScheduledState.feature.cs"];
m10_360 [label="return UseConnection<IPersistentJobQueueMonitoringApi>(connection =>\r\n            {\r\n                var provider = _queueProviders.GetProvider(queueName);\r\n                var monitoringApi = provider.GetJobQueueMonitoringApi(connection);\r\n\r\n                return monitoringApi;\r\n            });", span="555-561", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="ScheduledState.feature.cs"];
m10_361 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="553-553", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="ScheduledState.feature.cs"];
m10_127 [label="Entry HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="ScheduledState.feature.cs"];
m10_362 [label="Entry lambda expression", span="555-561", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_28 [label="var count = connection.Query<int>(\r\n                     sqlQuery,\r\n                     new { state = stateName })\r\n                     .Single()", span="76-79", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_26 [label="Entry lambda expression", span="71-82", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_27 [label="string sqlQuery = @''\r\nselect count(Id) from HangFire.Job where StateName = @state''", span="73-74", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_29 [label="return count;", span="81-81", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_30 [label="Exit lambda expression", span="71-82", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_40 [label="Entry lambda expression", span="95-100", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_41 [label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.FromStringTimestamp(stateData[''StartedAt'']),\r\n                }", span="95-100", cluster="lambda expression", color=red, community=0, file="ScheduledState.feature.cs"];
m10_42 [label="Exit lambda expression", span="95-100", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_50 [label="var jobs = connection.Query<SqlJob>(\r\n                            jobsSql,\r\n                            new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                            .ToList()", span="120-123", cluster="lambda expression", color=red, community=0, file="ScheduledState.feature.cs"];
m10_51 [label="return DeserializeJobs(jobs, selector);", span="125-125", cluster="lambda expression", color=red, community=0, file="ScheduledState.feature.cs"];
m10_48 [label="Entry lambda expression", span="109-126", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_49 [label="string jobsSql = @''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from HangFire.Job j\r\n  left join HangFire.State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n''", span="111-118", cluster="lambda expression", color=red, community=0, file="ScheduledState.feature.cs"];
m10_52 [label="Exit lambda expression", span="109-126", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_81 [label="Entry lambda expression", span="167-172", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_82 [label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.FromStringTimestamp(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.FromStringTimestamp(stateData[''ScheduledAt''])\r\n                }", span="167-172", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_83 [label="Exit lambda expression", span="167-172", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_95 [label="Entry lambda expression", span="187-209", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_96 [label="var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList()", span="189-191", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_97 [label="var result = new List<ServerDto>()", span="193-193", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_98 [label=servers, span="195-195", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_100 [label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="198-205", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_101 [label="return result;", span="208-208", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_99 [label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="197-197", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_102 [label="Exit lambda expression", span="187-209", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_108 [label="Entry lambda expression", span="218-226", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_109 [label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.FromNullableStringTimestamp(stateData[''FailedAt''])\r\n                }", span="218-226", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_110 [label="Exit lambda expression", span="218-226", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_116 [label="Entry lambda expression", span="235-242", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_117 [label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.FromNullableStringTimestamp(stateData[''SucceededAt''])\r\n                }", span="235-242", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_118 [label="Exit lambda expression", span="235-242", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_124 [label="Entry lambda expression", span="251-255", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_125 [label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.FromNullableStringTimestamp(stateData[''DeletedAt''])\r\n                }", span="251-255", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_126 [label="Exit lambda expression", span="251-255", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_131 [label="Entry lambda expression", span="260-285", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_132 [label="var tuples = _queueProviders\r\n                    .Select(x => x.GetJobQueueMonitoringApi(connection))\r\n                    .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                    .OrderBy(x => x.Queue)\r\n                    .ToArray()", span="262-266", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_150 [label="x.GetJobQueueMonitoringApi(connection)", span="263-263", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_133 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="268-268", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_149 [label="Entry lambda expression", span="263-263", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_153 [label="Entry lambda expression", span="264-264", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_157 [label="Entry lambda expression", span="264-264", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_160 [label="Entry lambda expression", span="265-265", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_134 [label=tuples, span="270-270", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_137 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = tuple.Queue,\r\n                        Length = counters.EnqueuedCount ?? 0,\r\n                        Fetched = counters.FetchedCount,\r\n                        FirstJobs = EnqueuedJobs(enqueuedJobIds)\r\n                    })", span="275-281", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_138 [label="return result;", span="284-284", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_135 [label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="272-272", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_136 [label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="273-273", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_139 [label="Exit lambda expression", span="260-285", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_151 [label="Exit lambda expression", span="263-263", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_154 [label="x.GetQueues()", span="264-264", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_155 [label="Exit lambda expression", span="264-264", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_158 [label="new { Monitoring = monitoring, Queue = queue }", span="264-264", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_159 [label="Exit lambda expression", span="264-264", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_161 [label="x.Queue", span="265-265", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_162 [label="Exit lambda expression", span="265-265", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_174 [label="var jobs = connection.Query<SqlJob>(\r\n                    enqueuedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList()", span="308-311", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_172 [label="Entry lambda expression", span="298-323", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_173 [label="string enqueuedJobsSql = @''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is null''", span="301-306", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_175 [label="return DeserializeJobs(\r\n                    jobs,\r\n                    (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = sqlJob.StateName,\r\n                        EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                            ? JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                            : null\r\n                    });", span="313-322", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_176 [label="Exit lambda expression", span="298-323", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_177 [label="Entry lambda expression", span="315-322", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_178 [label="new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = sqlJob.StateName,\r\n                        EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                            ? JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                            : null\r\n                    }", span="315-322", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_179 [label="Exit lambda expression", span="315-322", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_192 [label="var jobs = connection.Query<SqlJob>(\r\n                    fetchedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList()", span="346-349", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_190 [label="Entry lambda expression", span="336-366", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_191 [label="string fetchedJobsSql = @''\r\nselect j.*, jq.FetchedAt, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is not null''", span="339-344", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_193 [label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="351-351", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_194 [label=jobs, span="353-353", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_195 [label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                        job.Id.ToString(),\r\n                        new FetchedJobDto\r\n                        {\r\n                            Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                            State = job.StateName,\r\n                            FetchedAt = job.FetchedAt\r\n                        }))", span="355-362", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_196 [label="return new JobList<FetchedJobDto>(result);", span="365-365", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_197 [label="Exit lambda expression", span="336-366", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_215 [label="var multi = connection.QueryMultiple(sql, new { id = jobId })", span="389-389", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_213 [label="Entry lambda expression", span="381-415", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_214 [label="string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc''", span="384-387", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_216 [label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="391-391", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_219 [label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="394-394", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_220 [label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            })\r\n                            .ToList()", span="395-405", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_217 [label="job == null", span="392-392", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_221 [label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="407-413", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_218 [label="return null;", span="392-392", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_227 [label="Entry lambda expression", span="394-394", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_230 [label="Entry lambda expression", span="394-394", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_233 [label="Entry lambda expression", span="398-404", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_222 [label="Exit lambda expression", span="381-415", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_228 [label="x.Name", span="394-394", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_229 [label="Exit lambda expression", span="394-394", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_231 [label="x.Value", span="394-394", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_232 [label="Exit lambda expression", span="394-394", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_234 [label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            }", span="398-404", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_235 [label="Exit lambda expression", span="398-404", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_246 [label="Entry lambda expression", span="430-467", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_247 [label="string sql = @''\r\nselect StateName as [State], count(id) as [Count] From HangFire.Job \r\ngroup by StateName\r\nhaving StateName is not null;\r\nselect count(Id) from HangFire.Server;\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:succeeded';\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:deleted';\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n''", span="432-440", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_249 [label="var multi = connection.QueryMultiple(sql)", span="443-443", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_260 [label="stats.Queues = _queueProviders\r\n                    .SelectMany(x => x.GetJobQueueMonitoringApi(connection).GetQueues())\r\n                    .Count()", span="462-464", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_279 [label="x.GetJobQueueMonitoringApi(connection).GetQueues()", span="463-463", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_248 [label="var stats = new StatisticsDto()", span="442-442", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_252 [label="stats.Enqueued = getCountIfExists(EnqueuedState.StateName)", span="449-449", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_253 [label="stats.Failed = getCountIfExists(FailedState.StateName)", span="450-450", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_254 [label="stats.Processing = getCountIfExists(ProcessingState.StateName)", span="451-451", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_255 [label="stats.Scheduled = getCountIfExists(ScheduledState.StateName)", span="452-452", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_256 [label="stats.Servers = multi.Read<int>().Single()", span="454-454", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_257 [label="stats.Succeeded = multi.Read<int?>().SingleOrDefault() ?? 0", span="456-456", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_258 [label="stats.Deleted = multi.Read<int?>().SingleOrDefault() ?? 0", span="457-457", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_259 [label="stats.Recurring = multi.Read<int>().Single()", span="459-459", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_261 [label="return stats;", span="466-466", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_250 [label="var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count)", span="445-445", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_251 [label="Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0", span="447-447", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_268 [label="Entry lambda expression", span="445-445", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_271 [label="Entry lambda expression", span="445-445", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_275 [label="countByStates.ContainsKey(name) ? countByStates[name] : 0", span="447-447", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_278 [label="Entry lambda expression", span="463-463", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_262 [label="Exit lambda expression", span="430-467", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_269 [label="x.State", span="445-445", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_270 [label="Exit lambda expression", span="445-445", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_272 [label="x.Count", span="445-445", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_273 [label="Exit lambda expression", span="445-445", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_274 [label="Entry lambda expression", span="447-447", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_276 [label="Exit lambda expression", span="447-447", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_280 [label="Exit lambda expression", span="463-463", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_292 [label="var keys = dates.Select(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="482-482", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_312 [label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="482-482", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_284 [label="Entry lambda expression", span="472-507", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_285 [label="var endDate = DateTime.UtcNow", span="474-474", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_294 [label="var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="489-492", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_286 [label="var dates = new List<DateTime>()", span="475-475", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_289 [label="dates.Add(endDate)", span="478-478", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_290 [label="endDate = endDate.AddHours(-1)", span="479-479", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_287 [label="var i = 0", span="476-476", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_300 [label="i < dates.Count", span="500-500", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_302 [label="result.Add(dates[i], value)", span="503-503", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_288 [label="i < 24", span="476-476", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_291 [label="i++", span="476-476", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_293 [label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="484-487", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_311 [label="Entry lambda expression", span="482-482", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_295 [label=keys, span="494-494", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_316 [label="Entry lambda expression", span="492-492", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_319 [label="Entry lambda expression", span="492-492", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_296 [label="!valuesMap.ContainsKey(key)", span="496-496", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_297 [label="valuesMap.Add(key, 0)", span="496-496", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_301 [label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="502-502", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_298 [label="var result = new Dictionary<DateTime, long>()", span="499-499", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_299 [label="var i = 0", span="500-500", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_304 [label="return result;", span="506-506", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_303 [label="i++", span="500-500", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_305 [label="Exit lambda expression", span="472-507", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_313 [label="Exit lambda expression", span="482-482", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_317 [label="(string)x.Key", span="492-492", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_318 [label="Exit lambda expression", span="492-492", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_320 [label="(long)x.Count", span="492-492", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_321 [label="Exit lambda expression", span="492-492", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_332 [label="var keys = stringDates.Select(x => String.Format(''stats:{0}:{1}'', type, x)).ToList()", span="525-525", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_351 [label="String.Format(''stats:{0}:{1}'', type, x)", span="525-525", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_324 [label="Entry lambda expression", span="512-550", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_325 [label="var endDate = DateTime.UtcNow.Date", span="514-514", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_334 [label="var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="532-535", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_326 [label="var startDate = endDate.AddDays(-7)", span="515-515", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_328 [label="startDate <= endDate", span="518-518", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_329 [label="dates.Add(endDate)", span="520-520", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_330 [label="endDate = endDate.AddDays(-1)", span="521-521", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_327 [label="var dates = new List<DateTime>()", span="516-516", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_331 [label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="524-524", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_342 [label="result.Add(dates[i], value)", span="546-546", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_347 [label="Entry lambda expression", span="524-524", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_340 [label="i < stringDates.Count", span="543-543", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_333 [label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="527-530", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_350 [label="Entry lambda expression", span="525-525", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_335 [label=keys, span="537-537", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_354 [label="Entry lambda expression", span="535-535", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_357 [label="Entry lambda expression", span="535-535", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_336 [label="!valuesMap.ContainsKey(key)", span="539-539", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_337 [label="valuesMap.Add(key, 0)", span="539-539", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_341 [label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="545-545", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_338 [label="var result = new Dictionary<DateTime, long>()", span="542-542", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_339 [label="var i = 0", span="543-543", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_344 [label="return result;", span="549-549", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_343 [label="i++", span="543-543", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_345 [label="Exit lambda expression", span="512-550", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_348 [label="x.ToString(''yyyy-MM-dd'')", span="524-524", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_349 [label="Exit lambda expression", span="524-524", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_352 [label="Exit lambda expression", span="525-525", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_355 [label="(string)x.Key", span="535-535", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_356 [label="Exit lambda expression", span="535-535", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_358 [label="(long)x.Count", span="535-535", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_359 [label="Exit lambda expression", span="535-535", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_363 [label="var provider = _queueProviders.GetProvider(queueName)", span="557-557", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_364 [label="var monitoringApi = provider.GetJobQueueMonitoringApi(connection)", span="558-558", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_365 [label="return monitoringApi;", span="560-560", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_366 [label="Exit lambda expression", span="555-561", cluster="lambda expression", file="ScheduledState.feature.cs"];
m10_147 [label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18", cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="ScheduledState.feature.cs"];
m10_69 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="ScheduledState.feature.cs"];
m10_53 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="ScheduledState.feature.cs"];
m10_353 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="ScheduledState.feature.cs"];
m10_39 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="103-103", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="ScheduledState.feature.cs"];
m10_46 [label="return UseConnection<JobList<TDto>>(connection =>\r\n            {\r\n                const string jobsSql = @''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from HangFire.Job j\r\n  left join HangFire.State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n'';\r\n\r\n                var jobs = connection.Query<SqlJob>(\r\n                            jobsSql,\r\n                            new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                            .ToList();\r\n\r\n                return DeserializeJobs(jobs, selector);\r\n            });", span="109-126", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", color=red, community=0, file="ScheduledState.feature.cs"];
m10_47 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="103-103", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="ScheduledState.feature.cs"];
m10_201 [label="Entry HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21", cluster="HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="ScheduledState.feature.cs"];
m10_314 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="ScheduledState.feature.cs"];
m10_181 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="326-326", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="ScheduledState.feature.cs"];
m10_182 [label="var queueApi = GetQueueApi(queue)", span="328-328", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="ScheduledState.feature.cs"];
m10_183 [label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="329-329", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="ScheduledState.feature.cs"];
m10_184 [label="return FetchedJobs(fetchedJobIds);", span="331-331", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="ScheduledState.feature.cs"];
m10_185 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="326-326", cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="ScheduledState.feature.cs"];
m10_144 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="ScheduledState.feature.cs"];
m10_310 [label="Entry Unk.ElementAt", span="", cluster="Unk.ElementAt", file="ScheduledState.feature.cs"];
m10_169 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", span="296-296", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", file="ScheduledState.feature.cs"];
m10_170 [label="return UseConnection<JobList<EnqueuedJobDto>>(connection =>\r\n            {\r\n\r\n                const string enqueuedJobsSql = @''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is null'';\r\n\r\n                var jobs = connection.Query<SqlJob>(\r\n                    enqueuedJobsSql,\r\n                    new { jobIds = jobIds })\r\n                    .ToList();\r\n\r\n                return DeserializeJobs(\r\n                    jobs,\r\n                    (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                    {\r\n                        Job = job,\r\n                        State = sqlJob.StateName,\r\n                        EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                            ? JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                            : null\r\n                    });\r\n            });", span="298-323", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", file="ScheduledState.feature.cs"];
m10_171 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", span="296-296", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(System.Collections.Generic.IEnumerable<int>)", file="ScheduledState.feature.cs"];
m10_199 [label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span="", cluster="KeyValuePair<string, FetchedJobDto>.cstr", file="ScheduledState.feature.cs"];
m10_307 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="ScheduledState.feature.cs"];
m10_36 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="90-90", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="ScheduledState.feature.cs"];
m10_37 [label="return GetJobs(\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.FromStringTimestamp(stateData[''StartedAt'']),\r\n                });", span="92-100", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", color=red, community=0, file="ScheduledState.feature.cs"];
m10_38 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="90-90", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="ScheduledState.feature.cs"];
m10_308 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="ScheduledState.feature.cs"];
m10_379 [label="Entry Unk.Complete", span="", cluster="Unk.Complete", file="ScheduledState.feature.cs"];
m10_376 [label="Entry TransactionOptions.cstr", span="", cluster="TransactionOptions.cstr", file="ScheduledState.feature.cs"];
m10_198 [label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span="", cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", file="ScheduledState.feature.cs"];
m10_306 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="ScheduledState.feature.cs"];
m10_4 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="43-43", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="ScheduledState.feature.cs"];
m10_5 [label="return GetNumberOfJobsByStateName(ScheduledState.StateName);", span="45-45", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="ScheduledState.feature.cs"];
m10_6 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="43-43", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="ScheduledState.feature.cs"];
m10_223 [label="Entry Unk.QueryMultiple", span="", cluster="Unk.QueryMultiple", file="ScheduledState.feature.cs"];
m10_119 [label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="ScheduledState.feature.cs"];
m10_78 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="162-162", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="ScheduledState.feature.cs"];
m10_79 [label="return GetJobs(\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.FromStringTimestamp(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.FromStringTimestamp(stateData[''ScheduledAt''])\r\n                });", span="164-172", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="ScheduledState.feature.cs"];
m10_80 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="162-162", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="ScheduledState.feature.cs"];
m10_240 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="423-423", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="ScheduledState.feature.cs"];
m10_241 [label="return GetNumberOfJobsByStateName(DeletedState.StateName);", span="425-425", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="ScheduledState.feature.cs"];
m10_242 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="423-423", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="ScheduledState.feature.cs"];
m10_163 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="288-288", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="ScheduledState.feature.cs"];
m10_164 [label="var queueApi = GetQueueApi(queue)", span="290-290", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="ScheduledState.feature.cs"];
m10_165 [label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="291-291", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="ScheduledState.feature.cs"];
m10_166 [label="return EnqueuedJobs(enqueuedJobIds);", span="293-293", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="ScheduledState.feature.cs"];
m10_167 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="288-288", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="ScheduledState.feature.cs"];
m10_92 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="185-185", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="ScheduledState.feature.cs"];
m10_93 [label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="187-209", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="ScheduledState.feature.cs"];
m10_94 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="185-185", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="ScheduledState.feature.cs"];
m10_315 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="ScheduledState.feature.cs"];
m10_141 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany", file="ScheduledState.feature.cs"];
m10_225 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="ScheduledState.feature.cs"];
m10_237 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="418-418", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="ScheduledState.feature.cs"];
m10_238 [label="return GetNumberOfJobsByStateName(SucceededState.StateName);", span="420-420", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="ScheduledState.feature.cs"];
m10_239 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="418-418", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="ScheduledState.feature.cs"];
m10_65 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="147-147", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="ScheduledState.feature.cs"];
m10_71 [label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="149-149", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="ScheduledState.feature.cs"];
m10_72 [label="data.Arguments = arguments", span="150-150", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="ScheduledState.feature.cs"];
m10_73 [label="return data.Deserialize();", span="154-154", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="ScheduledState.feature.cs"];
m10_74 [label=JobLoadException, span="156-156", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="ScheduledState.feature.cs"];
m10_75 [label="return null;", span="158-158", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="ScheduledState.feature.cs"];
m10_76 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="147-147", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="ScheduledState.feature.cs"];
m10_180 [label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="ScheduledState.feature.cs"];
m10_111 [label="Entry HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23", cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="ScheduledState.feature.cs"];
m10_14 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="25-25", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="ScheduledState.feature.cs"];
m10_31 [label="Entry Unk.>", span="", cluster="Unk.>", file="ScheduledState.feature.cs"];
m10_145 [label="Entry Unk.GetEnqueuedJobIds", span="", cluster="Unk.GetEnqueuedJobIds", file="ScheduledState.feature.cs"];
m10_142 [label="Entry Unk.OrderBy", span="", cluster="Unk.OrderBy", file="ScheduledState.feature.cs"];
m10_146 [label="Entry Unk.GetEnqueuedAndFetchedCount", span="", cluster="Unk.GetEnqueuedAndFetchedCount", file="ScheduledState.feature.cs"];
m10_156 [label="Entry Unk.GetQueues", span="", cluster="Unk.GetQueues", file="ScheduledState.feature.cs"];
m10_88 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", span="510-510", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="ScheduledState.feature.cs"];
m10_322 [label="return UseConnection<Dictionary<DateTime, long>>(connection =>\r\n            {\r\n                var endDate = DateTime.UtcNow.Date;\r\n                var startDate = endDate.AddDays(-7);\r\n                var dates = new List<DateTime>();\r\n\r\n                while (startDate <= endDate)\r\n                {\r\n                    dates.Add(endDate);\r\n                    endDate = endDate.AddDays(-1);\r\n                }\r\n\r\n                var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList();\r\n                var keys = stringDates.Select(x => String.Format(''stats:{0}:{1}'', type, x)).ToList();\r\n\r\n                const string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys'';\r\n\r\n                var valuesMap = connection.Query(\r\n                    sqlQuery,\r\n                    new { keys = keys })\r\n                    .ToDictionary(x => (string)x.Key, x => (long)x.Count);\r\n\r\n                foreach (var key in keys)\r\n                {\r\n                    if (!valuesMap.ContainsKey(key)) valuesMap.Add(key, 0);\r\n                }\r\n\r\n                var result = new Dictionary<DateTime, long>();\r\n                for (var i = 0; i < stringDates.Count; i++)\r\n                {\r\n                    var value = valuesMap[valuesMap.Keys.ElementAt(i)];\r\n                    result.Add(dates[i], value);\r\n                }\r\n\r\n                return result;\r\n            });", span="512-550", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="ScheduledState.feature.cs"];
m10_323 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", span="510-510", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="ScheduledState.feature.cs"];
m10_309 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ScheduledState.feature.cs"];
m10_70 [label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22", cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="ScheduledState.feature.cs"];
m10_121 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="245-245", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="ScheduledState.feature.cs"];
m10_122 [label="return GetJobs(\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.FromNullableStringTimestamp(stateData[''DeletedAt''])\r\n                });", span="247-255", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="ScheduledState.feature.cs"];
m10_123 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="245-245", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="ScheduledState.feature.cs"];
m10_8 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="48-48", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="ScheduledState.feature.cs"];
m10_9 [label="var queueApi = GetQueueApi(queue)", span="50-50", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="ScheduledState.feature.cs"];
m10_10 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="51-51", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="ScheduledState.feature.cs"];
m10_11 [label="return counters.EnqueuedCount ?? 0;", span="53-53", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="ScheduledState.feature.cs"];
m10_12 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="48-48", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="ScheduledState.feature.cs"];
m10_207 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="374-374", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="ScheduledState.feature.cs"];
m10_208 [label="return GetHourlyTimelineStats(''failed'');", span="376-376", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="ScheduledState.feature.cs"];
m10_209 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="374-374", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="ScheduledState.feature.cs"];
m10_168 [label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="23-23", cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="ScheduledState.feature.cs"];
m10_267 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ScheduledState.feature.cs"];
m10_140 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ScheduledState.feature.cs"];
m10_152 [label="Entry Unk.GetJobQueueMonitoringApi", span="", cluster="Unk.GetJobQueueMonitoringApi", file="ScheduledState.feature.cs"];
m10_236 [label="Entry HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21", cluster="HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="ScheduledState.feature.cs"];
m10_63 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="ScheduledState.feature.cs"];
m10_32 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="ScheduledState.feature.cs"];
m10_128 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="258-258", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="ScheduledState.feature.cs"];
m10_129 [label="return UseConnection<IList<QueueWithTopEnqueuedJobsDto>>(connection =>\r\n            {\r\n                var tuples = _queueProviders\r\n                    .Select(x => x.GetJobQueueMonitoringApi(connection))\r\n                    .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                    .OrderBy(x => x.Queue)\r\n                    .ToArray();\r\n\r\n                var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length);\r\n\r\n                foreach (var tuple in tuples)\r\n                {\r\n                    var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5);\r\n                    var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue);\r\n\r\n                    result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = tuple.Queue,\r\n                        Length = counters.EnqueuedCount ?? 0,\r\n                        Fetched = counters.FetchedCount,\r\n                        FirstJobs = EnqueuedJobs(enqueuedJobIds)\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="260-285", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="ScheduledState.feature.cs"];
m10_130 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="258-258", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="ScheduledState.feature.cs"];
m10_7 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", span="69-69", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="ScheduledState.feature.cs"];
m10_23 [label="return UseConnection<long>(connection =>\r\n            {\r\n                const string sqlQuery = @''\r\nselect count(Id) from HangFire.Job where StateName = @state'';\r\n\r\n                var count = connection.Query<int>(\r\n                     sqlQuery,\r\n                     new { state = stateName })\r\n                     .Single();\r\n\r\n                return count;\r\n            });", span="71-82", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="ScheduledState.feature.cs"];
m10_24 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", span="69-69", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="ScheduledState.feature.cs"];
m10_224 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="ScheduledState.feature.cs"];
m10_202 [label="Entry Unk.DeserializeJob", span="", cluster="Unk.DeserializeJob", file="ScheduledState.feature.cs"];
m10_380 [label="HangFire.SqlServer.SqlServerMonitoringApi", span="", file="ScheduledState.feature.cs"];
m10_381 [label=string, span="", file="ScheduledState.feature.cs"];
m10_382 [label=int, span="", file="ScheduledState.feature.cs"];
m10_383 [label=int, span="", file="ScheduledState.feature.cs"];
m10_384 [label=string, span="", file="ScheduledState.feature.cs"];
m10_385 [label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", span="", file="ScheduledState.feature.cs"];
m10_386 [label=SqlConnection, span="", file="ScheduledState.feature.cs"];
m10_387 [label="System.Collections.Generic.IEnumerable<int>", span="", file="ScheduledState.feature.cs"];
m10_388 [label="System.Collections.Generic.IEnumerable<int>", span="", file="ScheduledState.feature.cs"];
m10_389 [label=string, span="", file="ScheduledState.feature.cs"];
m10_390 [label=countByStates, span="", file="ScheduledState.feature.cs"];
m10_391 [label=SqlConnection, span="", file="ScheduledState.feature.cs"];
m10_392 [label=string, span="", file="ScheduledState.feature.cs"];
m10_393 [label=string, span="", file="ScheduledState.feature.cs"];
m10_394 [label=string, span="", file="ScheduledState.feature.cs"];
m12_0 [label="Entry HangFire.Core.Tests.States.ScheduledStateHandlerFacts.ScheduledStateHandlerFacts()", span="19-19", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.ScheduledStateHandlerFacts()", file="SucceededState.cs"];
m12_1 [label="var job = Job.FromExpression(() => Console.WriteLine())", span="21-21", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.ScheduledStateHandlerFacts()", file="SucceededState.cs"];
m12_2 [label="_transaction = new Mock<IWriteOnlyTransaction>()", span="23-23", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.ScheduledStateHandlerFacts()", file="SucceededState.cs"];
m12_4 [label="_stateContext = new StateContext(JobId, job)", span="25-25", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.ScheduledStateHandlerFacts()", file="SucceededState.cs"];
m12_3 [label="_connection = new Mock<IStorageConnection>()", span="24-24", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.ScheduledStateHandlerFacts()", file="SucceededState.cs"];
m12_5 [label="_context = new ApplyStateContext(\r\n                _connection.Object,\r\n                _stateContext, \r\n                new ScheduledState(EnqueueAt), \r\n                null)", span="26-30", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.ScheduledStateHandlerFacts()", color=red, community=0, file="SucceededState.cs"];
m12_6 [label="Exit HangFire.Core.Tests.States.ScheduledStateHandlerFacts.ScheduledStateHandlerFacts()", span="19-19", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.ScheduledStateHandlerFacts()", file="SucceededState.cs"];
m12_50 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="SucceededState.cs"];
m12_8 [label="Entry Mock<IWriteOnlyTransaction>.cstr", span="", cluster="Mock<IWriteOnlyTransaction>.cstr", file="SucceededState.cs"];
m12_28 [label="Entry Unk.Apply", span="", cluster="Unk.Apply", file="SucceededState.cs"];
m12_23 [label="Entry HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ShouldAddTheJob_ToTheScheduleSet_WithTheCorrectScore()", span="41-41", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ShouldAddTheJob_ToTheScheduleSet_WithTheCorrectScore()", file="SucceededState.cs"];
m12_24 [label="var handler = new ScheduledState.Handler()", span="43-43", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ShouldAddTheJob_ToTheScheduleSet_WithTheCorrectScore()", file="SucceededState.cs"];
m12_25 [label="handler.Apply(_context, _transaction.Object)", span="44-44", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ShouldAddTheJob_ToTheScheduleSet_WithTheCorrectScore()", file="SucceededState.cs"];
m12_26 [label="_transaction.Verify(x => x.AddToSet(\r\n                ''schedule'', JobId, JobHelper.ToTimestamp(EnqueueAt)))", span="46-47", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ShouldAddTheJob_ToTheScheduleSet_WithTheCorrectScore()", file="SucceededState.cs"];
m12_27 [label="Exit HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ShouldAddTheJob_ToTheScheduleSet_WithTheCorrectScore()", span="41-41", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ShouldAddTheJob_ToTheScheduleSet_WithTheCorrectScore()", file="SucceededState.cs"];
m12_35 [label="Entry HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Unapply_ShouldRemoveTheJob_FromTheScheduledSet()", span="51-51", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Unapply_ShouldRemoveTheJob_FromTheScheduledSet()", file="SucceededState.cs"];
m12_36 [label="var handler = new ScheduledState.Handler()", span="53-53", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Unapply_ShouldRemoveTheJob_FromTheScheduledSet()", file="SucceededState.cs"];
m12_37 [label="handler.Unapply(_context, _transaction.Object)", span="54-54", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Unapply_ShouldRemoveTheJob_FromTheScheduledSet()", file="SucceededState.cs"];
m12_38 [label="_transaction.Verify(x => x.RemoveFromSet(''schedule'', JobId))", span="56-56", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Unapply_ShouldRemoveTheJob_FromTheScheduledSet()", file="SucceededState.cs"];
m12_39 [label="Exit HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Unapply_ShouldRemoveTheJob_FromTheScheduledSet()", span="51-51", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Unapply_ShouldRemoveTheJob_FromTheScheduledSet()", file="SucceededState.cs"];
m12_22 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SucceededState.cs"];
m12_21 [label="Entry HangFire.States.ScheduledState.Handler.Handler()", span="54-54", cluster="HangFire.States.ScheduledState.Handler.Handler()", file="SucceededState.cs"];
m12_51 [label="Entry Unk.>", span="", cluster="Unk.>", file="SucceededState.cs"];
m12_10 [label="Entry HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)", span="23-23", cluster="HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)", file="SucceededState.cs"];
m12_34 [label="Entry Unk.AddToSet", span="", cluster="Unk.AddToSet", file="SucceededState.cs"];
m12_33 [label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="39-39", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="SucceededState.cs"];
m12_11 [label="Entry ApplyStateContext.cstr", span="", cluster="ApplyStateContext.cstr", file="SucceededState.cs"];
m12_40 [label="Entry Unk.Unapply", span="", cluster="Unk.Unapply", file="SucceededState.cs"];
m12_45 [label="Entry HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ThrowsAnException_WhenGivenStateIsNotScheduledState()", span="60-60", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ThrowsAnException_WhenGivenStateIsNotScheduledState()", file="SucceededState.cs"];
m12_46 [label="var handler = new ScheduledState.Handler()", span="62-62", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ThrowsAnException_WhenGivenStateIsNotScheduledState()", file="SucceededState.cs"];
m12_47 [label="var context = new ApplyStateContext(\r\n                _connection.Object, _stateContext, new Mock<IState>().Object, null)", span="63-64", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ThrowsAnException_WhenGivenStateIsNotScheduledState()", file="SucceededState.cs"];
m12_48 [label="Assert.Throws<InvalidOperationException>(\r\n                () => handler.Apply(context, _transaction.Object))", span="66-67", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ThrowsAnException_WhenGivenStateIsNotScheduledState()", file="SucceededState.cs"];
m12_49 [label="Exit HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ThrowsAnException_WhenGivenStateIsNotScheduledState()", span="60-60", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.Apply_ThrowsAnException_WhenGivenStateIsNotScheduledState()", file="SucceededState.cs"];
m12_52 [label="Entry lambda expression", span="67-67", cluster="lambda expression", file="SucceededState.cs"];
m12_13 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="SucceededState.cs"];
m12_14 [label="Console.WriteLine()", span="21-21", cluster="lambda expression", file="SucceededState.cs"];
m12_15 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="SucceededState.cs"];
m12_30 [label="Entry lambda expression", span="46-47", cluster="lambda expression", file="SucceededState.cs"];
m12_31 [label="x.AddToSet(\r\n                ''schedule'', JobId, JobHelper.ToTimestamp(EnqueueAt))", span="46-47", cluster="lambda expression", file="SucceededState.cs"];
m12_32 [label="Exit lambda expression", span="46-47", cluster="lambda expression", file="SucceededState.cs"];
m12_41 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="SucceededState.cs"];
m12_42 [label="x.RemoveFromSet(''schedule'', JobId)", span="56-56", cluster="lambda expression", file="SucceededState.cs"];
m12_43 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="SucceededState.cs"];
m12_53 [label="handler.Apply(context, _transaction.Object)", span="67-67", cluster="lambda expression", file="SucceededState.cs"];
m12_54 [label="Exit lambda expression", span="67-67", cluster="lambda expression", file="SucceededState.cs"];
m12_29 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SucceededState.cs"];
m12_17 [label="Entry HangFire.Core.Tests.States.ScheduledStateHandlerFacts.StateName_ShouldBeEqualToScheduledState()", span="34-34", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.StateName_ShouldBeEqualToScheduledState()", file="SucceededState.cs"];
m12_18 [label="var handler = new ScheduledState.Handler()", span="36-36", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.StateName_ShouldBeEqualToScheduledState()", file="SucceededState.cs"];
m12_19 [label="Assert.Equal(ScheduledState.StateName, handler.StateName)", span="37-37", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.StateName_ShouldBeEqualToScheduledState()", file="SucceededState.cs"];
m12_20 [label="Exit HangFire.Core.Tests.States.ScheduledStateHandlerFacts.StateName_ShouldBeEqualToScheduledState()", span="34-34", cluster="HangFire.Core.Tests.States.ScheduledStateHandlerFacts.StateName_ShouldBeEqualToScheduledState()", file="SucceededState.cs"];
m12_12 [label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="32-32", cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="SucceededState.cs"];
m12_7 [label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119", cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SucceededState.cs"];
m12_44 [label="Entry Unk.RemoveFromSet", span="", cluster="Unk.RemoveFromSet", file="SucceededState.cs"];
m12_9 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="SucceededState.cs"];
m12_16 [label="Entry System.Console.WriteLine()", span="0-0", cluster="System.Console.WriteLine()", file="SucceededState.cs"];
m12_55 [label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts", span="", file="SucceededState.cs"];
m12_56 [label=handler, span="", file="SucceededState.cs"];
m12_57 [label=context, span="", file="SucceededState.cs"];
m13_21 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SucceededState.feature.cs"];
m13_37 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SucceededState.feature.cs"];
m13_17 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="SucceededState.feature.cs"];
m13_0 [label="Entry HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", span="13-13", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", file="SucceededState.feature.cs"];
m13_1 [label="_redis = redis", span="18-18", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", file="SucceededState.feature.cs"];
m13_2 [label="_state = state", span="19-19", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", file="SucceededState.feature.cs"];
m13_3 [label="Job = job", span="20-20", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", file="SucceededState.feature.cs"];
m13_4 [label="JobId = jobId", span="21-21", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", file="SucceededState.feature.cs"];
m13_5 [label="Exit HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", span="13-13", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Collections.Generic.Dictionary<string, string>, HangFire.States.JobState)", file="SucceededState.feature.cs"];
m13_18 [label="Entry HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", span="42-42", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="SucceededState.feature.cs"];
m13_19 [label="return Job.ContainsKey(name)\r\n                ? JobHelper.FromJson<T>(Job[name])\r\n                : default(T);", span="44-46", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="SucceededState.feature.cs"];
m13_20 [label="Exit HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", span="42-42", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="SucceededState.feature.cs"];
m13_22 [label="Entry HangFire.JobHelper.FromJson<T>(string)", span="37-37", cluster="HangFire.JobHelper.FromJson<T>(string)", file="SucceededState.feature.cs"];
m13_43 [label="Entry System.InvalidOperationException.InvalidOperationException(string, System.Exception)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string, System.Exception)", file="SucceededState.feature.cs"];
m13_11 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="SucceededState.feature.cs"];
m13_10 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SucceededState.feature.cs"];
m13_39 [label="Entry System.ComponentModel.PropertyDescriptor.GetValue(object)", span="0-0", cluster="System.ComponentModel.PropertyDescriptor.GetValue(object)", file="SucceededState.feature.cs"];
m13_44 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="SucceededState.feature.cs"];
m13_42 [label="Entry System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", span="0-0", cluster="System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", file="SucceededState.feature.cs"];
m13_13 [label="Entry HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="37-37", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="SucceededState.feature.cs"];
m13_14 [label="Job.Add(name, JobHelper.ToJson(value))", span="39-39", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="SucceededState.feature.cs"];
m13_15 [label="Exit HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="37-37", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="SucceededState.feature.cs"];
m13_38 [label="Entry System.ComponentModel.TypeDescriptor.GetProperties(object)", span="0-0", cluster="System.ComponentModel.TypeDescriptor.GetProperties(object)", file="SucceededState.feature.cs"];
m13_16 [label="Entry HangFire.JobHelper.ToJson(object)", span="32-32", cluster="HangFire.JobHelper.ToJson(object)", file="SucceededState.feature.cs"];
m13_6 [label="Entry HangFire.Client.ClientJobDescriptor.Enqueue()", span="28-28", cluster="HangFire.Client.ClientJobDescriptor.Enqueue()", file="SucceededState.feature.cs"];
m13_7 [label="_redis.SetRangeInHash(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                Job)", span="30-32", cluster="HangFire.Client.ClientJobDescriptor.Enqueue()", file="SucceededState.feature.cs"];
m13_8 [label="JobState.Apply(_redis, JobId, _state)", span="34-34", cluster="HangFire.Client.ClientJobDescriptor.Enqueue()", file="SucceededState.feature.cs"];
m13_9 [label="Exit HangFire.Client.ClientJobDescriptor.Enqueue()", span="28-28", cluster="HangFire.Client.ClientJobDescriptor.Enqueue()", file="SucceededState.feature.cs"];
m13_40 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="SucceededState.feature.cs"];
m13_12 [label="Entry HangFire.States.JobState.Apply(IRedisClient, string, HangFire.States.JobState, params string[])", span="51-51", cluster="HangFire.States.JobState.Apply(IRedisClient, string, HangFire.States.JobState, params string[])", file="SucceededState.feature.cs"];
m13_23 [label="Entry HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", span="49-49", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_24 [label="var result = new Dictionary<string, string>()", span="51-51", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_25 [label="jobProperties != null", span="52-52", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_26 [label="TypeDescriptor.GetProperties(jobProperties)", span="54-54", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_27 [label="var propertyValue = descriptor.GetValue(jobProperties)", span="56-56", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_34 [label="result.Add(descriptor.Name, value)", span="77-77", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_35 [label="return result;", span="81-81", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_33 [label="throw new InvalidOperationException(\r\n                                String.Format(\r\n                                    ''Could not convert property '{0}' of type '{1}' to a string. See the inner exception for details.'',\r\n                                    descriptor.Name,\r\n                                    descriptor.PropertyType),\r\n                                ex);", span="68-73", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_28 [label="string value = null", span="57-57", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_29 [label="propertyValue != null", span="59-59", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_30 [label="var converter = TypeDescriptor.GetConverter(propertyValue.GetType())", span="63-63", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_31 [label="value = converter.ConvertToInvariantString(propertyValue)", span="64-64", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_32 [label=Exception, span="66-66", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_36 [label="Exit HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", span="49-49", cluster="HangFire.Client.ClientJobDescriptor.SerializeProperties(object)", file="SucceededState.feature.cs"];
m13_41 [label="Entry System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", span="0-0", cluster="System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", file="SucceededState.feature.cs"];
m13_45 [label="HangFire.Client.ClientJobDescriptor", span="", file="SucceededState.feature.cs"];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.IBootstrapperConfiguration"];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_12  [key=2, style=dotted];
m0_9 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_9 -> m0_11  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_3  [key=2, style=dotted];
m0_10 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_11 -> m0_8  [key=0, style=bold, color=blue];
m0_36 -> m0_34  [key=0, style=bold, color=blue];
m0_35 -> m0_11  [key=2, style=dotted];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_35 -> m0_16  [key=2, style=dotted];
m0_34 -> m0_35  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid, color=red];
m0_26 -> m0_3  [key=2, style=dotted, color=red];
m0_26 -> m0_28  [key=1, style=dashed, color=red, label="lambda expression"];
m0_16 -> m0_25  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_3  [key=2, style=dotted];
m0_45 -> m0_47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_201 -> m0_202  [key=0, style=solid];
m0_202 -> m0_11  [key=2, style=dotted];
m0_202 -> m0_203  [key=0, style=solid];
m0_202 -> m0_204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_203 -> m0_201  [key=0, style=bold, color=blue];
m0_49 -> m0_47  [key=0, style=bold, color=blue];
m0_50 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_27 -> m0_24  [key=0, style=bold, color=blue];
m0_175 -> m0_176  [key=0, style=solid];
m0_176 -> m0_11  [key=2, style=dotted];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_178  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_177 -> m0_175  [key=0, style=bold, color=blue];
m0_64 -> m0_62  [key=0, style=bold, color=blue];
m0_63 -> m0_11  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_62 -> m0_63  [key=0, style=solid];
m0_24 -> m0_25  [key=0, style=solid, color=red];
m0_24 -> m0_26  [key=1, style=dashed, color=red, label="Hangfire.IBootstrapperConfiguration"];
m0_267 -> m0_268  [key=0, style=solid];
m0_268 -> m0_11  [key=2, style=dotted];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_270  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_269 -> m0_267  [key=0, style=bold, color=blue];
m0_25 -> m0_325  [key=0, style=solid];
m0_25 -> m0_326  [key=1, style=dashed, color=darkseagreen4, label="System.Action<HangFire.Redis.RedisWriteOnlyTransaction>"];
m0_25 -> m0_26  [key=0, style=solid, color=red];
m0_25 -> m0_12  [key=2, style=dotted, color=red];
m0_25 -> m0_29  [key=1, style=dashed, color=red, label=options];
m0_325 -> m0_326  [key=0, style=solid];
m0_325 -> m0_329  [key=2, style=dotted];
m0_325 -> m0_330  [key=2, style=dotted];
m0_325 -> m0_327  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m0_326 -> m0_327  [key=0, style=solid];
m0_326 -> m0_331  [key=2, style=dotted];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_332  [key=2, style=dotted];
m0_328 -> m0_25  [key=0, style=bold, color=blue];
m0_333 -> m0_335  [key=1, style=dashed, color=darkseagreen4, label="System.Action<IRedisClient>"];
m0_333 -> m0_334  [key=0, style=solid];
m0_335 -> m0_331  [key=2, style=dotted];
m0_335 -> m0_336  [key=0, style=solid];
m0_334 -> m0_335  [key=0, style=solid];
m0_334 -> m0_337  [key=2, style=dotted];
m0_336 -> m0_333  [key=0, style=bold, color=blue];
m0_162 -> m0_163  [key=0, style=solid];
m0_163 -> m0_11  [key=2, style=dotted];
m0_163 -> m0_164  [key=0, style=solid];
m0_163 -> m0_165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_164 -> m0_162  [key=0, style=bold, color=blue];
m0_293 -> m0_294  [key=0, style=solid];
m0_294 -> m0_11  [key=2, style=dotted];
m0_294 -> m0_295  [key=0, style=solid];
m0_294 -> m0_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_295 -> m0_293  [key=0, style=bold, color=blue];
m0_228 -> m0_229  [key=0, style=solid];
m0_229 -> m0_11  [key=2, style=dotted];
m0_229 -> m0_230  [key=0, style=solid];
m0_229 -> m0_231  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_230 -> m0_228  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_37 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_3  [key=2, style=dotted];
m0_38 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_38 -> m0_45  [key=2, style=dotted];
m0_38 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_38 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_39 -> m0_37  [key=0, style=bold, color=blue];
m0_39 -> m0_46  [key=2, style=dotted];
m0_39 -> m0_48  [key=2, style=dotted];
m0_39 -> m0_47  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_3  [key=2, style=dotted];
m0_32 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m0_31 -> m0_29  [key=0, style=bold, color=blue];
m0_33 -> m0_31  [key=0, style=bold, color=blue];
m0_217 -> m0_215  [key=0, style=bold, color=blue];
m0_216 -> m0_11  [key=2, style=dotted];
m0_216 -> m0_217  [key=0, style=solid];
m0_216 -> m0_218  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_215 -> m0_216  [key=0, style=solid];
m0_280 -> m0_281  [key=0, style=solid];
m0_281 -> m0_11  [key=2, style=dotted];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_283  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_282 -> m0_280  [key=0, style=bold, color=blue];
m0_93 -> m0_94  [key=0, style=solid, color=green];
m0_94 -> m0_95  [key=0, style=solid, color=green];
m0_94 -> m0_11  [key=2, style=dotted, color=green];
m0_94 -> m0_96  [key=1, style=dashed, color=green, label="lambda expression"];
m0_95 -> m0_93  [key=0, style=bold, color=blue];
m0_131 -> m0_129  [key=0, style=bold, color=blue];
m0_130 -> m0_131  [key=0, style=solid, color=green];
m0_130 -> m0_11  [key=2, style=dotted, color=green];
m0_130 -> m0_132  [key=1, style=dashed, color=green, label="lambda expression"];
m0_129 -> m0_130  [key=0, style=solid, color=green];
m0_113 -> m0_114  [key=0, style=solid, color=green];
m0_114 -> m0_115  [key=0, style=solid, color=green];
m0_114 -> m0_11  [key=2, style=dotted, color=green];
m0_114 -> m0_116  [key=1, style=dashed, color=green, label="lambda expression"];
m0_115 -> m0_113  [key=0, style=bold, color=blue];
m0_242 -> m0_243  [key=0, style=solid];
m0_243 -> m0_11  [key=2, style=dotted];
m0_243 -> m0_244  [key=0, style=solid];
m0_243 -> m0_245  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_244 -> m0_242  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_46 -> m0_44  [key=0, style=bold, color=blue];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.IBootstrapperConfiguration"];
m0_17 -> m0_26  [key=2, style=dotted];
m0_17 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label=jobEntryTtl];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_12  [key=2, style=dotted];
m0_18 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_18 -> m0_26  [key=2, style=dotted];
m0_18 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label=stateEntryTtl];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_3  [key=2, style=dotted];
m0_19 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_19 -> m0_26  [key=2, style=dotted];
m0_19 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label=historyEntryTtl];
m0_20 -> m0_17  [key=0, style=bold, color=blue];
m0_20 -> m0_28  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_27  [key=2, style=dotted];
m0_54 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_12 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_12 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_12 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_12 -> m0_19  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_12 -> m0_16  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_321 -> m0_322  [key=0, style=solid];
m0_4 -> m0_5  [key=0, style=solid];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_7  [key=2, style=dotted];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_16  [key=2, style=dotted];
m0_14 -> m0_24  [key=2, style=dotted];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_24  [key=2, style=dotted];
m0_15 -> m0_13  [key=0, style=bold, color=blue];
m0_15 -> m0_24  [key=2, style=dotted];
m0_15 -> m0_16  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_16  [key=2, style=dotted];
m0_22 -> m0_28  [key=2, style=dotted];
m0_22 -> m0_27  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_28  [key=2, style=dotted];
m0_21 -> m0_27  [key=2, style=dotted];
m0_23 -> m0_21  [key=0, style=bold, color=blue];
m0_23 -> m0_12  [key=0, style=bold, color=blue];
m0_29 -> m0_30  [key=0, style=solid, color=red];
m0_29 -> m0_16  [key=2, style=dotted, color=red];
m0_28 -> m0_29  [key=0, style=solid, color=red];
m0_30 -> m0_28  [key=0, style=bold, color=blue];
m0_30 -> m0_32  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_33  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [key=2, style=dotted];
m0_41 -> m0_12  [key=2, style=dotted];
m0_41 -> m0_25  [key=2, style=dotted];
m0_41 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_46  [key=2, style=dotted];
m0_40 -> m0_48  [key=2, style=dotted];
m0_40 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_42 -> m0_40  [key=0, style=bold, color=blue];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_49  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_43  [key=2, style=dotted];
m0_96 -> m0_101  [key=1, style=dashed, color=green, label=IRedisClient];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_101 -> m0_102  [key=0, style=solid, color=green];
m0_101 -> m0_103  [key=2, style=dotted, color=green];
m0_101 -> m0_50  [key=2, style=dotted, color=green];
m0_100 -> m0_101  [key=0, style=solid, color=green];
m0_100 -> m0_25  [key=2, style=dotted];
m0_100 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_102 -> m0_96  [key=0, style=bold, color=blue];
m0_116 -> m0_119  [key=1, style=dashed, color=green, label=IRedisClient];
m0_116 -> m0_121  [key=1, style=dashed, color=green, label=IRedisClient];
m0_116 -> m0_123  [key=1, style=dashed, color=green, label=IRedisClient];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_118  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_116 -> m0_120  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_116 -> m0_122  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_119 -> m0_120  [key=0, style=solid, color=green];
m0_119 -> m0_32  [key=2, style=dotted, color=green];
m0_119 -> m0_24  [key=2, style=dotted, color=green];
m0_118 -> m0_119  [key=0, style=solid, color=green];
m0_118 -> m0_32  [key=2, style=dotted];
m0_118 -> m0_24  [key=2, style=dotted];
m0_120 -> m0_121  [key=0, style=solid, color=green];
m0_120 -> m0_25  [key=2, style=dotted];
m0_120 -> m0_125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_121 -> m0_122  [key=0, style=solid, color=green];
m0_121 -> m0_26  [key=2, style=dotted, color=green];
m0_121 -> m0_28  [key=2, style=dotted, color=green];
m0_122 -> m0_123  [key=0, style=solid, color=green];
m0_122 -> m0_26  [key=2, style=dotted];
m0_122 -> m0_28  [key=2, style=dotted];
m0_123 -> m0_124  [key=0, style=solid, color=green];
m0_123 -> m0_26  [key=2, style=dotted, color=green];
m0_123 -> m0_28  [key=2, style=dotted, color=green];
m0_124 -> m0_116  [key=0, style=bold, color=blue];
m0_132 -> m0_138  [key=1, style=dashed, color=green, label=IRedisClient];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_137  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_138 -> m0_139  [key=0, style=solid, color=green];
m0_138 -> m0_146  [key=2, style=dotted, color=green];
m0_138 -> m0_140  [key=1, style=dashed, color=green, label=serializedEntry];
m0_137 -> m0_138  [key=0, style=solid, color=green];
m0_137 -> m0_25  [key=2, style=dotted];
m0_137 -> m0_158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_147  [key=2, style=dotted];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_3  [key=2, style=dotted];
m0_140 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label=entry];
m0_140 -> m0_143  [key=1, style=dashed, color=darkseagreen4, label=entry];
m0_140 -> m0_144  [key=1, style=dashed, color=darkseagreen4, label=entry];
m0_135 -> m0_136  [key=0, style=solid, color=green];
m0_135 -> m0_46  [key=2, style=dotted, color=green];
m0_135 -> m0_48  [key=2, style=dotted, color=green];
m0_135 -> m0_152  [key=1, style=dashed, color=green, label="lambda expression"];
m0_133 -> m0_135  [key=1, style=dashed, color=green, label=state];
m0_133 -> m0_137  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_45  [key=2, style=dotted];
m0_133 -> m0_136  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_133 -> m0_159  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_134 -> m0_135  [key=0, style=solid, color=green];
m0_134 -> m0_46  [key=2, style=dotted];
m0_134 -> m0_48  [key=2, style=dotted];
m0_134 -> m0_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_46  [key=2, style=dotted];
m0_136 -> m0_47  [key=2, style=dotted];
m0_136 -> m0_48  [key=2, style=dotted];
m0_136 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_152 -> m0_153  [key=0, style=solid, color=green];
m0_153 -> m0_154  [key=0, style=solid, color=green];
m0_154 -> m0_152  [key=0, style=bold, color=blue];
m0_97 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_45  [key=2, style=dotted];
m0_97 -> m0_99  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_97 -> m0_111  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_46  [key=2, style=dotted];
m0_99 -> m0_48  [key=2, style=dotted];
m0_99 -> m0_47  [key=2, style=dotted];
m0_99 -> m0_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_110 -> m0_111  [key=0, style=solid];
m0_301 -> m0_103  [key=2, style=dotted];
m0_301 -> m0_50  [key=2, style=dotted];
m0_301 -> m0_302  [key=0, style=solid];
m0_317 -> m0_103  [key=2, style=dotted];
m0_317 -> m0_50  [key=2, style=dotted];
m0_317 -> m0_318  [key=0, style=solid];
m0_43 -> m0_50  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_74 -> m0_50  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_75 -> m0_50  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_76 -> m0_50  [key=2, style=dotted];
m0_76 -> m0_77  [key=0, style=solid];
m0_141 -> m0_50  [key=2, style=dotted];
m0_141 -> m0_142  [key=0, style=solid];
m0_142 -> m0_50  [key=2, style=dotted];
m0_142 -> m0_143  [key=0, style=solid];
m0_143 -> m0_50  [key=2, style=dotted];
m0_143 -> m0_144  [key=0, style=solid];
m0_168 -> m0_50  [key=2, style=dotted];
m0_168 -> m0_146  [key=2, style=dotted];
m0_168 -> m0_169  [key=0, style=solid];
m0_181 -> m0_50  [key=2, style=dotted];
m0_181 -> m0_146  [key=2, style=dotted];
m0_181 -> m0_182  [key=0, style=solid];
m0_193 -> m0_50  [key=2, style=dotted];
m0_193 -> m0_194  [key=0, style=solid];
m0_193 -> m0_196  [key=2, style=dotted];
m0_208 -> m0_50  [key=2, style=dotted];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_196  [key=2, style=dotted];
m0_221 -> m0_50  [key=2, style=dotted];
m0_221 -> m0_222  [key=0, style=solid];
m0_221 -> m0_196  [key=2, style=dotted];
m0_235 -> m0_50  [key=2, style=dotted];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_196  [key=2, style=dotted];
m0_260 -> m0_50  [key=2, style=dotted];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_262  [key=2, style=dotted];
m0_286 -> m0_50  [key=2, style=dotted];
m0_286 -> m0_146  [key=2, style=dotted];
m0_286 -> m0_287  [key=0, style=solid];
m0_302 -> m0_50  [key=2, style=dotted];
m0_302 -> m0_146  [key=2, style=dotted];
m0_302 -> m0_303  [key=0, style=solid];
m0_318 -> m0_50  [key=2, style=dotted];
m0_318 -> m0_146  [key=2, style=dotted];
m0_318 -> m0_319  [key=0, style=solid];
m0_319 -> m0_50  [key=2, style=dotted];
m0_319 -> m0_146  [key=2, style=dotted];
m0_319 -> m0_320  [key=0, style=solid];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_32  [key=2, style=dotted];
m0_117 -> m0_24  [key=2, style=dotted];
m0_125 -> m0_126  [key=0, style=solid];
m0_212 -> m0_32  [key=2, style=dotted];
m0_212 -> m0_213  [key=0, style=solid];
m0_212 -> m0_214  [key=2, style=dotted];
m0_239 -> m0_32  [key=2, style=dotted];
m0_239 -> m0_240  [key=0, style=solid];
m0_239 -> m0_241  [key=2, style=dotted];
m0_191 -> m0_24  [key=2, style=dotted];
m0_191 -> m0_192  [key=0, style=solid];
m0_205 -> m0_24  [key=2, style=dotted];
m0_205 -> m0_206  [key=0, style=solid];
m0_219 -> m0_24  [key=2, style=dotted];
m0_219 -> m0_220  [key=0, style=solid];
m0_232 -> m0_24  [key=2, style=dotted];
m0_232 -> m0_233  [key=0, style=solid];
m0_194 -> m0_26  [key=2, style=dotted];
m0_194 -> m0_28  [key=2, style=dotted];
m0_194 -> m0_195  [key=0, style=solid];
m0_207 -> m0_26  [key=2, style=dotted];
m0_207 -> m0_208  [key=0, style=solid];
m0_207 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=entryTtl];
m0_222 -> m0_26  [key=2, style=dotted];
m0_222 -> m0_28  [key=2, style=dotted];
m0_222 -> m0_223  [key=0, style=solid];
m0_234 -> m0_26  [key=2, style=dotted];
m0_234 -> m0_235  [key=0, style=solid];
m0_234 -> m0_236  [key=1, style=dashed, color=darkseagreen4, label=entryTtl];
m0_144 -> m0_28  [key=2, style=dotted];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_148  [key=2, style=dotted];
m0_167 -> m0_28  [key=2, style=dotted];
m0_167 -> m0_168  [key=0, style=solid];
m0_167 -> m0_170  [key=2, style=dotted];
m0_209 -> m0_28  [key=2, style=dotted];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_27  [key=2, style=dotted];
m0_236 -> m0_28  [key=2, style=dotted];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_27  [key=2, style=dotted];
m0_247 -> m0_28  [key=2, style=dotted];
m0_247 -> m0_248  [key=0, style=solid];
m0_247 -> m0_249  [key=2, style=dotted];
m0_259 -> m0_28  [key=2, style=dotted];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_249  [key=2, style=dotted];
m0_145 -> m0_132  [key=0, style=bold, color=blue];
m0_158 -> m0_159  [key=0, style=solid];
m0_159 -> m0_160  [key=0, style=solid];
m0_159 -> m0_161  [key=2, style=dotted];
m0_149 -> m0_150  [key=0, style=solid];
m0_155 -> m0_156  [key=0, style=solid];
m0_68 -> m0_46  [key=2, style=dotted];
m0_68 -> m0_48  [key=2, style=dotted];
m0_68 -> m0_47  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_69 -> m0_46  [key=2, style=dotted];
m0_69 -> m0_48  [key=2, style=dotted];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_70 -> m0_46  [key=2, style=dotted];
m0_70 -> m0_48  [key=2, style=dotted];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_98 -> m0_46  [key=2, style=dotted];
m0_98 -> m0_48  [key=2, style=dotted];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_65 -> m0_72  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_165 -> m0_168  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_165 -> m0_167  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_165 -> m0_166  [key=0, style=solid];
m0_178 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_180  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_190 -> m0_193  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_194  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_190 -> m0_192  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_204 -> m0_208  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_204 -> m0_205  [key=0, style=solid];
m0_204 -> m0_207  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_204 -> m0_206  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_218 -> m0_221  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_222  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_218 -> m0_220  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_231 -> m0_235  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_231 -> m0_232  [key=0, style=solid];
m0_231 -> m0_234  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_231 -> m0_233  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_245 -> m0_247  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_245 -> m0_246  [key=0, style=solid];
m0_257 -> m0_260  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_257 -> m0_259  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_257 -> m0_258  [key=0, style=solid];
m0_270 -> m0_271  [key=0, style=solid];
m0_270 -> m0_272  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_270 -> m0_273  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_283 -> m0_286  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_283 -> m0_284  [key=0, style=solid];
m0_283 -> m0_285  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_296 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_296 -> m0_302  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_296 -> m0_297  [key=0, style=solid];
m0_296 -> m0_298  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_296 -> m0_299  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_296 -> m0_300  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_311 -> m0_317  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_311 -> m0_318  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_311 -> m0_319  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_311 -> m0_312  [key=0, style=solid];
m0_311 -> m0_313  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_311 -> m0_314  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_311 -> m0_315  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_311 -> m0_316  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_111 -> m0_112  [key=0, style=solid];
m0_111 -> m0_61  [key=2, style=dotted];
m0_107 -> m0_108  [key=0, style=solid];
m0_71 -> m0_25  [key=2, style=dotted];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_166 -> m0_25  [key=2, style=dotted];
m0_166 -> m0_167  [key=0, style=solid];
m0_166 -> m0_171  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_180 -> m0_25  [key=2, style=dotted];
m0_180 -> m0_181  [key=0, style=solid];
m0_180 -> m0_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_192 -> m0_25  [key=2, style=dotted];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_197  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_206 -> m0_25  [key=2, style=dotted];
m0_206 -> m0_207  [key=0, style=solid];
m0_206 -> m0_211  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_220 -> m0_25  [key=2, style=dotted];
m0_220 -> m0_221  [key=0, style=solid];
m0_220 -> m0_224  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_233 -> m0_25  [key=2, style=dotted];
m0_233 -> m0_234  [key=0, style=solid];
m0_233 -> m0_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_246 -> m0_25  [key=2, style=dotted];
m0_246 -> m0_247  [key=0, style=solid];
m0_246 -> m0_250  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_258 -> m0_25  [key=2, style=dotted];
m0_258 -> m0_259  [key=0, style=solid];
m0_258 -> m0_263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_272 -> m0_25  [key=2, style=dotted];
m0_272 -> m0_273  [key=0, style=solid];
m0_272 -> m0_276  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_285 -> m0_25  [key=2, style=dotted];
m0_285 -> m0_286  [key=0, style=solid];
m0_285 -> m0_289  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_300 -> m0_25  [key=2, style=dotted];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_316 -> m0_25  [key=2, style=dotted];
m0_316 -> m0_317  [key=0, style=solid];
m0_316 -> m0_321  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_112 -> m0_110  [key=0, style=bold, color=blue];
m0_44 -> m0_37  [key=0, style=bold, color=blue];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m0_72 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label=stateHash];
m0_72 -> m0_75  [key=1, style=dashed, color=darkseagreen4, label=stateHash];
m0_72 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label=stateHash];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_49  [key=2, style=dotted];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_79  [key=2, style=dotted];
m0_73 -> m0_80  [key=2, style=dotted];
m0_77 -> m0_65  [key=0, style=bold, color=blue];
m0_169 -> m0_165  [key=0, style=bold, color=blue];
m0_182 -> m0_178  [key=0, style=bold, color=blue];
m0_261 -> m0_257  [key=0, style=bold, color=blue];
m0_287 -> m0_283  [key=0, style=bold, color=blue];
m0_303 -> m0_296  [key=0, style=bold, color=blue];
m0_320 -> m0_311  [key=0, style=bold, color=blue];
m0_127 -> m0_125  [key=0, style=bold, color=blue];
m0_126 -> m0_127  [key=0, style=solid];
m0_126 -> m0_128  [key=2, style=dotted];
m0_211 -> m0_212  [key=0, style=solid];
m0_213 -> m0_211  [key=0, style=bold, color=blue];
m0_238 -> m0_239  [key=0, style=solid];
m0_240 -> m0_238  [key=0, style=bold, color=blue];
m0_195 -> m0_190  [key=0, style=bold, color=blue];
m0_223 -> m0_218  [key=0, style=bold, color=blue];
m0_210 -> m0_204  [key=0, style=bold, color=blue];
m0_237 -> m0_231  [key=0, style=bold, color=blue];
m0_248 -> m0_245  [key=0, style=bold, color=blue];
m0_160 -> m0_158  [key=0, style=bold, color=blue];
m0_67 -> m0_45  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_67 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_67 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_67 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_151 -> m0_149  [key=0, style=bold, color=blue];
m0_150 -> m0_151  [key=0, style=solid];
m0_157 -> m0_155  [key=0, style=bold, color=blue];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_54  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.JobStorage"];
m0_81 -> m0_82  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_87 -> m0_88  [key=0, style=solid];
m0_104 -> m0_105  [key=0, style=solid];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_78  [key=2, style=dotted];
m0_179 -> m0_180  [key=0, style=solid];
m0_179 -> m0_183  [key=2, style=dotted];
m0_274 -> m0_270  [key=0, style=bold, color=blue];
m0_271 -> m0_272  [key=0, style=solid];
m0_271 -> m0_275  [key=2, style=dotted];
m0_273 -> m0_249  [key=2, style=dotted];
m0_273 -> m0_274  [key=0, style=solid];
m0_273 -> m0_80  [key=2, style=dotted];
m0_284 -> m0_285  [key=0, style=solid];
m0_284 -> m0_288  [key=2, style=dotted];
m0_297 -> m0_298  [key=0, style=solid];
m0_297 -> m0_288  [key=2, style=dotted];
m0_298 -> m0_299  [key=0, style=solid];
m0_298 -> m0_288  [key=2, style=dotted];
m0_299 -> m0_300  [key=0, style=solid];
m0_299 -> m0_288  [key=2, style=dotted];
m0_312 -> m0_313  [key=0, style=solid];
m0_312 -> m0_288  [key=2, style=dotted];
m0_313 -> m0_314  [key=0, style=solid];
m0_313 -> m0_288  [key=2, style=dotted];
m0_314 -> m0_315  [key=0, style=solid];
m0_314 -> m0_288  [key=2, style=dotted];
m0_315 -> m0_316  [key=0, style=solid];
m0_315 -> m0_288  [key=2, style=dotted];
m0_109 -> m0_107  [key=0, style=bold, color=blue];
m0_108 -> m0_109  [key=0, style=solid];
m0_108 -> m0_54  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_90 -> m0_91  [key=0, style=solid];
m0_171 -> m0_172  [key=0, style=solid];
m0_184 -> m0_185  [key=0, style=solid];
m0_197 -> m0_198  [key=0, style=solid];
m0_224 -> m0_225  [key=0, style=solid];
m0_250 -> m0_251  [key=0, style=solid];
m0_263 -> m0_264  [key=0, style=solid];
m0_276 -> m0_277  [key=0, style=solid];
m0_289 -> m0_290  [key=0, style=solid];
m0_304 -> m0_305  [key=0, style=solid];
m0_59 -> m0_61  [key=2, style=dotted];
m0_59 -> m0_60  [key=0, style=solid];
m0_91 -> m0_61  [key=2, style=dotted];
m0_91 -> m0_92  [key=0, style=solid];
m0_53 -> m0_51  [key=0, style=bold, color=blue];
m0_53 -> m0_35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m0_52 -> m0_54  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_29  [key=1, style=dashed, color=red, label=options];
m0_57 -> m0_55  [key=0, style=bold, color=blue];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.BackgroundJobServerOptions"];
m0_83 -> m0_81  [key=0, style=bold, color=blue];
m0_82 -> m0_54  [key=2, style=dotted];
m0_82 -> m0_83  [key=0, style=solid];
m0_86 -> m0_84  [key=0, style=bold, color=blue];
m0_85 -> m0_86  [key=0, style=solid];
m0_89 -> m0_87  [key=0, style=bold, color=blue];
m0_88 -> m0_89  [key=0, style=solid];
m0_106 -> m0_104  [key=0, style=bold, color=blue];
m0_105 -> m0_106  [key=0, style=solid];
m0_60 -> m0_58  [key=0, style=bold, color=blue];
m0_92 -> m0_90  [key=0, style=bold, color=blue];
m0_173 -> m0_171  [key=0, style=bold, color=blue];
m0_172 -> m0_173  [key=0, style=solid];
m0_172 -> m0_174  [key=2, style=dotted];
m0_186 -> m0_184  [key=0, style=bold, color=blue];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_174  [key=2, style=dotted];
m0_199 -> m0_197  [key=0, style=bold, color=blue];
m0_198 -> m0_199  [key=0, style=solid];
m0_198 -> m0_200  [key=2, style=dotted];
m0_226 -> m0_224  [key=0, style=bold, color=blue];
m0_225 -> m0_226  [key=0, style=solid];
m0_225 -> m0_227  [key=2, style=dotted];
m0_252 -> m0_250  [key=0, style=bold, color=blue];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_253  [key=2, style=dotted];
m0_265 -> m0_263  [key=0, style=bold, color=blue];
m0_264 -> m0_265  [key=0, style=solid];
m0_264 -> m0_266  [key=2, style=dotted];
m0_278 -> m0_276  [key=0, style=bold, color=blue];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_279  [key=2, style=dotted];
m0_291 -> m0_289  [key=0, style=bold, color=blue];
m0_290 -> m0_291  [key=0, style=solid];
m0_290 -> m0_292  [key=2, style=dotted];
m0_306 -> m0_304  [key=0, style=bold, color=blue];
m0_305 -> m0_306  [key=0, style=solid];
m0_305 -> m0_307  [key=2, style=dotted];
m0_322 -> m0_323  [key=0, style=solid];
m0_322 -> m0_324  [key=2, style=dotted];
m0_323 -> m0_321  [key=0, style=bold, color=blue];
m0_254 -> m0_255  [key=0, style=solid];
m0_255 -> m0_11  [key=2, style=dotted];
m0_255 -> m0_256  [key=0, style=solid];
m0_255 -> m0_257  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_256 -> m0_254  [key=0, style=bold, color=blue];
m0_189 -> m0_187  [key=0, style=bold, color=blue];
m0_188 -> m0_11  [key=2, style=dotted];
m0_188 -> m0_189  [key=0, style=solid];
m0_188 -> m0_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_187 -> m0_188  [key=0, style=solid];
m0_308 -> m0_309  [key=0, style=solid];
m0_309 -> m0_11  [key=2, style=dotted];
m0_309 -> m0_310  [key=0, style=solid];
m0_309 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_310 -> m0_308  [key=0, style=bold, color=blue];
m0_338 -> m0_94  [key=1, style=dashed, color=green, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_114  [key=1, style=dashed, color=green, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_130  [key=1, style=dashed, color=green, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_63  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_163  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_176  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_202  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_216  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_229  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_243  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_255  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_268  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_281  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_294  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_338 -> m0_309  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m0_342 -> m0_159  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_341 -> m0_111  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_339 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label=state];
m0_340 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label=state];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_12  [key=2, style=dotted];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_12  [key=2, style=dotted];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_3  [key=1, style=dashed, color=red, label="System.Exception"];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_3  [key=0, style=solid, color=red];
m2_3 -> m2_4  [key=0, style=solid, color=green];
m2_3 -> m2_12  [key=2, style=dotted];
m2_2 -> m2_4  [key=0, style=solid];
m2_2 -> m2_5  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_11  [key=2, style=dotted];
m2_4 -> m2_0  [key=0, style=bold, color=blue];
m2_4 -> m2_5  [key=0, style=solid, color=green];
m2_4 -> m2_13  [key=2, style=dotted, color=green];
m2_13 -> m2_3  [key=1, style=dashed, color=red, label="HangFire.States.FailedState"];
m2_13 -> m2_7  [key=1, style=dashed, color=red, label="HangFire.States.FailedState"];
m2_6 -> m2_7  [key=0, style=solid, color=red];
m2_7 -> m2_8  [key=0, style=solid, color=red];
m2_7 -> m2_9  [key=2, style=dotted, color=red];
m2_7 -> m2_10  [key=2, style=dotted, color=red];
m2_7 -> m2_11  [key=2, style=dotted, color=red];
m2_7 -> m2_12  [key=2, style=dotted, color=red];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_6  [key=0, style=bold, color=blue];
m2_10 -> m2_0  [key=0, style=bold, color=blue];
m2_14 -> m2_4  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m2_14 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m2_14 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m2_14 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m2_14 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m2_14 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m2_14 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m2_14 -> m2_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m2_14 -> m2_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label=count];
m3_3 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label=count];
m3_3 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label=count];
m3_3 -> m3_11  [key=0, style=solid];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_15  [key=2, style=dotted];
m3_7 -> m3_14  [key=2, style=dotted];
m3_0 -> m3_1  [key=0, style=solid, color=green];
m3_1 -> m3_2  [key=0, style=solid, color=green];
m3_1 -> m3_13  [key=2, style=dotted, color=green];
m3_1 -> m3_3  [key=2, style=dotted];
m3_1 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_13  [key=2, style=dotted];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_4 -> m3_13  [key=2, style=dotted];
m3_4 -> m3_5  [key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_14  [key=2, style=dotted];
m3_5 -> m3_7  [key=2, style=dotted];
m3_6 -> m3_13  [key=2, style=dotted];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_4  [key=0, style=bold, color=blue];
m3_8 -> m3_13  [key=2, style=dotted];
m3_8 -> m3_9  [key=0, style=solid, color=red];
m3_9 -> m3_10  [key=0, style=solid, color=red];
m3_9 -> m3_14  [key=2, style=dotted];
m3_9 -> m3_13  [key=2, style=dotted, color=red];
m3_9 -> m3_11  [key=1, style=dashed, color=red, label=exception];
m3_10 -> m3_13  [key=2, style=dotted];
m3_10 -> m3_3  [key=0, style=solid];
m3_10 -> m3_11  [key=0, style=solid, color=red];
m3_10 -> m3_7  [key=2, style=dotted, color=red];
m3_11 -> m3_13  [key=2, style=dotted];
m3_11 -> m3_12  [key=0, style=solid, color=red];
m3_11 -> m3_14  [key=2, style=dotted, color=red];
m3_11 -> m3_15  [key=2, style=dotted, color=red];
m3_12 -> m3_0  [key=0, style=bold, color=blue];
m3_12 -> m3_8  [key=0, style=bold, color=blue];
m3_16 -> m3_17  [key=0, style=solid];
m3_16 -> m3_1  [key=1, style=dashed, color=green, label="HangFire.Web.Pages.PerPageSelector"];
m3_16 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.PerPageSelector"];
m3_16 -> m3_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.PerPageSelector"];
m3_16 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.PerPageSelector"];
m3_16 -> m3_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.PerPageSelector"];
m3_16 -> m3_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.PerPageSelector"];
m3_16 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.PerPageSelector"];
m3_16 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.PerPageSelector"];
m3_16 -> m3_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.PerPageSelector"];
m3_16 -> m3_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.PerPageSelector"];
m3_17 -> m3_18  [key=0, style=solid, color=red];
m3_17 -> m3_7  [key=2, style=dotted];
m3_17 -> m3_13  [key=2, style=dotted];
m3_18 -> m3_19  [key=0, style=solid, color=red];
m3_18 -> m3_14  [key=2, style=dotted, color=red];
m3_18 -> m3_20  [key=2, style=dotted, color=red];
m3_19 -> m3_16  [key=0, style=bold, color=blue];
m3_21 -> m3_22  [key=0, style=solid];
m3_22 -> m3_23  [key=0, style=solid, color=red];
m3_22 -> m3_7  [key=2, style=dotted];
m3_22 -> m3_26  [key=2, style=dotted];
m3_23 -> m3_24  [key=0, style=solid, color=red];
m3_23 -> m3_27  [key=2, style=dotted, color=red];
m3_24 -> m3_25  [key=0, style=solid, color=red];
m3_24 -> m3_28  [key=2, style=dotted, color=red];
m3_24 -> m3_29  [key=2, style=dotted, color=red];
m3_25 -> m3_21  [key=0, style=bold, color=blue];
m4_27 -> m4_28  [key=0, style=solid];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_23  [key=2, style=dotted];
m4_28 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_29 -> m4_27  [key=0, style=bold, color=blue];
m4_56 -> m4_57  [key=0, style=solid];
m4_57 -> m4_56  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_8  [key=2, style=dotted];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_9  [key=2, style=dotted];
m4_2 -> m4_10  [key=2, style=dotted];
m4_2 -> m4_11  [key=2, style=dotted];
m4_2 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_12  [key=2, style=dotted];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_13  [key=2, style=dotted];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_14  [key=2, style=dotted];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_15  [key=2, style=dotted];
m4_6 -> m4_16  [key=2, style=dotted];
m4_7 -> m4_0  [key=0, style=bold, color=blue];
m4_46 -> m4_47  [key=0, style=solid];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> m4_23  [key=2, style=dotted];
m4_47 -> m4_49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_48 -> m4_46  [key=0, style=bold, color=blue];
m4_53 -> m4_54  [key=0, style=solid];
m4_54 -> m4_55  [key=0, style=solid];
m4_54 -> m4_39  [key=2, style=dotted];
m4_55 -> m4_53  [key=0, style=bold, color=blue];
m4_20 -> m4_21  [key=0, style=solid];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_23  [key=2, style=dotted];
m4_21 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_22 -> m4_20  [key=0, style=bold, color=blue];
m4_40 -> m4_41  [key=0, style=solid];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_23  [key=2, style=dotted];
m4_41 -> m4_43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_42 -> m4_40  [key=0, style=bold, color=blue];
m4_49 -> m4_50  [key=0, style=solid];
m4_17 -> m4_18  [key=0, style=solid];
m4_18 -> m4_19  [key=0, style=solid];
m4_19 -> m4_17  [key=0, style=bold, color=blue];
m4_24 -> m4_25  [key=0, style=solid];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> m4_13  [key=2, style=dotted];
m4_26 -> m4_24  [key=0, style=bold, color=blue];
m4_30 -> m4_31  [key=0, style=solid];
m4_31 -> m4_32  [key=0, style=solid];
m4_31 -> m4_13  [key=2, style=dotted];
m4_32 -> m4_30  [key=0, style=bold, color=blue];
m4_36 -> m4_37  [key=0, style=solid];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> m4_39  [key=2, style=dotted];
m4_38 -> m4_36  [key=0, style=bold, color=blue];
m4_43 -> m4_44  [key=0, style=solid];
m4_44 -> m4_45  [key=0, style=solid];
m4_44 -> m4_39  [key=2, style=dotted];
m4_45 -> m4_43  [key=0, style=bold, color=blue];
m4_50 -> m4_51  [key=0, style=solid];
m4_50 -> m4_52  [key=2, style=dotted];
m4_51 -> m4_49  [key=0, style=bold, color=blue];
m4_58 -> m4_59  [key=0, style=solid];
m4_59 -> m4_58  [key=0, style=bold, color=blue];
m4_60 -> m4_61  [key=0, style=solid];
m4_61 -> m4_62  [key=0, style=solid];
m4_62 -> m4_60  [key=0, style=bold, color=blue];
m4_33 -> m4_34  [key=0, style=solid];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_23  [key=2, style=dotted];
m4_34 -> m4_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_35 -> m4_33  [key=0, style=bold, color=blue];
m4_63 -> m4_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_50  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m4_63 -> m4_54  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.Client.JobClientTests"];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.PersistentJobQueueProviderCollection"];
m5_1 -> m5_2  [key=0, style=solid];
m5_2 -> m5_3  [key=0, style=solid];
m5_3 -> m5_0  [key=0, style=bold, color=blue];
m5_137 -> m5_366  [key=0, style=solid];
m5_137 -> m5_370  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<int>"];
m5_366 -> m5_367  [key=0, style=solid];
m5_366 -> m5_53  [key=2, style=dotted];
m5_366 -> m5_368  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_367 -> m5_137  [key=0, style=bold, color=blue];
m5_180 -> m5_181  [key=0, style=solid];
m5_181 -> m5_182  [key=0, style=solid];
m5_181 -> m5_148  [key=2, style=dotted];
m5_181 -> m5_183  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_182 -> m5_180  [key=0, style=bold, color=blue];
m5_47 -> m5_48  [key=0, style=solid];
m5_48 -> m5_49  [key=0, style=solid];
m5_48 -> m5_46  [key=2, style=dotted];
m5_49 -> m5_47  [key=0, style=bold, color=blue];
m5_148 -> m5_306  [key=0, style=solid];
m5_148 -> m5_309  [key=1, style=dashed, color=darkseagreen4, label="System.Func<SqlConnection, T>"];
m5_306 -> m5_307  [key=0, style=solid];
m5_306 -> m5_313  [key=2, style=dotted];
m5_306 -> m5_314  [key=2, style=dotted];
m5_306 -> m5_310  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m5_309 -> m5_310  [key=0, style=solid];
m5_309 -> m5_202  [key=2, style=dotted];
m5_309 -> m5_311  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_307 -> m5_308  [key=0, style=solid];
m5_307 -> m5_315  [key=2, style=dotted];
m5_307 -> m5_309  [key=1, style=dashed, color=darkseagreen4, label=connection];
m5_310 -> m5_311  [key=0, style=solid];
m5_310 -> m5_317  [key=2, style=dotted];
m5_308 -> m5_309  [key=0, style=solid];
m5_308 -> m5_316  [key=2, style=dotted];
m5_311 -> m5_312  [key=0, style=solid];
m5_312 -> m5_148  [key=0, style=bold, color=blue];
m5_141 -> m5_220  [key=0, style=solid];
m5_141 -> m5_230  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_141 -> m5_250  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_220 -> m5_221  [key=0, style=solid];
m5_220 -> m5_53  [key=2, style=dotted];
m5_220 -> m5_222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_221 -> m5_141  [key=0, style=bold, color=blue];
m5_145 -> m5_146  [key=0, style=solid];
m5_145 -> m5_151  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_146 -> m5_147  [key=0, style=solid];
m5_146 -> m5_148  [key=2, style=dotted];
m5_146 -> m5_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_147 -> m5_145  [key=0, style=bold, color=blue];
m5_23 -> m5_24  [key=0, style=solid];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_7  [key=2, style=dotted];
m5_25 -> m5_23  [key=0, style=bold, color=blue];
m5_138 -> m5_139  [key=0, style=solid];
m5_139 -> m5_140  [key=0, style=solid];
m5_139 -> m5_141  [key=2, style=dotted];
m5_140 -> m5_138  [key=0, style=bold, color=blue];
m5_74 -> m5_75  [key=0, style=solid];
m5_75 -> m5_76  [key=0, style=solid];
m5_75 -> m5_29  [key=2, style=dotted];
m5_75 -> m5_77  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_76 -> m5_74  [key=0, style=bold, color=blue];
m5_66 -> m5_67  [key=0, style=solid];
m5_67 -> m5_68  [key=0, style=solid];
m5_67 -> m5_29  [key=2, style=dotted];
m5_67 -> m5_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_68 -> m5_66  [key=0, style=bold, color=blue];
m5_43 -> m5_44  [key=0, style=solid];
m5_44 -> m5_45  [key=0, style=solid];
m5_44 -> m5_46  [key=2, style=dotted];
m5_45 -> m5_43  [key=0, style=bold, color=blue];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_17  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_13  [key=2, style=dotted];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_14  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_19 -> m5_15  [key=0, style=bold, color=blue];
m5_20 -> m5_21  [key=0, style=solid];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_7  [key=2, style=dotted];
m5_22 -> m5_20  [key=0, style=bold, color=blue];
m5_353 -> m5_354  [key=0, style=solid];
m5_353 -> m5_355  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>"];
m5_353 -> m5_357  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m5_354 -> m5_355  [key=0, style=solid];
m5_354 -> m5_361  [key=2, style=dotted];
m5_354 -> m5_358  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_354 -> m5_359  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_355 -> m5_356  [key=0, style=solid];
m5_355 -> m5_359  [key=0, style=solid];
m5_355 -> m5_357  [key=1, style=dashed, color=darkseagreen4, label=job];
m5_355 -> m5_358  [key=1, style=dashed, color=darkseagreen4, label=job];
m5_357 -> m5_358  [key=0, style=solid];
m5_357 -> m5_337  [key=2, style=dotted];
m5_357 -> m5_362  [key=2, style=dotted];
m5_358 -> m5_355  [key=0, style=solid];
m5_358 -> m5_363  [key=2, style=dotted];
m5_358 -> m5_364  [key=2, style=dotted];
m5_358 -> m5_65  [key=2, style=dotted];
m5_359 -> m5_360  [key=0, style=solid];
m5_359 -> m5_365  [key=2, style=dotted];
m5_356 -> m5_357  [key=0, style=solid];
m5_356 -> m5_344  [key=2, style=dotted];
m5_360 -> m5_353  [key=0, style=bold, color=blue];
m5_13 -> m5_298  [key=0, style=solid];
m5_13 -> m5_301  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_298 -> m5_299  [key=0, style=solid];
m5_298 -> m5_148  [key=2, style=dotted];
m5_298 -> m5_300  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_299 -> m5_13  [key=0, style=bold, color=blue];
m5_368 -> m5_369  [key=0, style=solid];
m5_368 -> m5_370  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_30 -> m5_31  [key=0, style=solid];
m5_31 -> m5_32  [key=0, style=solid];
m5_31 -> m5_33  [key=2, style=dotted];
m5_31 -> m5_34  [key=2, style=dotted];
m5_31 -> m5_35  [key=2, style=dotted];
m5_32 -> m5_30  [key=0, style=bold, color=blue];
m5_39 -> m5_40  [key=0, style=solid];
m5_40 -> m5_41  [key=0, style=solid];
m5_40 -> m5_42  [key=2, style=dotted];
m5_40 -> m5_35  [key=2, style=dotted];
m5_41 -> m5_39  [key=0, style=bold, color=blue];
m5_54 -> m5_55  [key=0, style=solid];
m5_55 -> m5_56  [key=0, style=solid];
m5_55 -> m5_53  [key=2, style=dotted];
m5_55 -> m5_62  [key=2, style=dotted];
m5_55 -> m5_57  [key=1, style=dashed, color=darkseagreen4, label=servers];
m5_56 -> m5_57  [key=0, style=solid];
m5_56 -> m5_63  [key=2, style=dotted];
m5_56 -> m5_59  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_56 -> m5_60  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_57 -> m5_58  [key=0, style=solid];
m5_57 -> m5_60  [key=0, style=solid];
m5_57 -> m5_59  [key=1, style=dashed, color=darkseagreen4, label=server];
m5_59 -> m5_57  [key=0, style=solid];
m5_59 -> m5_64  [key=2, style=dotted];
m5_59 -> m5_65  [key=2, style=dotted];
m5_60 -> m5_61  [key=0, style=solid];
m5_58 -> m5_59  [key=0, style=solid];
m5_58 -> m5_53  [key=2, style=dotted];
m5_61 -> m5_54  [key=0, style=bold, color=blue];
m5_69 -> m5_70  [key=0, style=solid];
m5_70 -> m5_71  [key=0, style=solid];
m5_70 -> m5_72  [key=2, style=dotted];
m5_70 -> m5_73  [key=2, style=dotted];
m5_71 -> m5_69  [key=0, style=bold, color=blue];
m5_77 -> m5_78  [key=0, style=solid];
m5_78 -> m5_79  [key=0, style=solid];
m5_78 -> m5_80  [key=2, style=dotted];
m5_78 -> m5_34  [key=2, style=dotted];
m5_78 -> m5_81  [key=2, style=dotted];
m5_78 -> m5_73  [key=2, style=dotted];
m5_79 -> m5_77  [key=0, style=bold, color=blue];
m5_85 -> m5_86  [key=0, style=solid, color=red];
m5_86 -> m5_87  [key=0, style=solid, color=red];
m5_86 -> m5_88  [key=2, style=dotted, color=red];
m5_86 -> m5_73  [key=2, style=dotted, color=red];
m5_87 -> m5_85  [key=0, style=bold, color=blue];
m5_92 -> m5_93  [key=0, style=solid];
m5_92 -> m5_111  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_93 -> m5_94  [key=0, style=solid];
m5_93 -> m5_101  [key=2, style=dotted];
m5_93 -> m5_102  [key=2, style=dotted];
m5_93 -> m5_103  [key=2, style=dotted];
m5_93 -> m5_104  [key=2, style=dotted];
m5_93 -> m5_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_93 -> m5_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_93 -> m5_118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_93 -> m5_121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_93 -> m5_95  [key=1, style=dashed, color=darkseagreen4, label=tuples];
m5_111 -> m5_112  [key=0, style=solid];
m5_111 -> m5_113  [key=2, style=dotted];
m5_94 -> m5_95  [key=0, style=solid];
m5_94 -> m5_105  [key=2, style=dotted];
m5_94 -> m5_98  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_94 -> m5_99  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_110 -> m5_111  [key=0, style=solid];
m5_114 -> m5_115  [key=0, style=solid];
m5_118 -> m5_119  [key=0, style=solid];
m5_121 -> m5_122  [key=0, style=solid];
m5_95 -> m5_96  [key=0, style=solid];
m5_95 -> m5_99  [key=0, style=solid];
m5_95 -> m5_97  [key=1, style=dashed, color=darkseagreen4, label=tuple];
m5_95 -> m5_98  [key=1, style=dashed, color=darkseagreen4, label=tuple];
m5_98 -> m5_95  [key=0, style=solid];
m5_98 -> m5_108  [key=2, style=dotted];
m5_98 -> m5_109  [key=2, style=dotted];
m5_98 -> m5_65  [key=2, style=dotted];
m5_99 -> m5_100  [key=0, style=solid];
m5_96 -> m5_97  [key=0, style=solid];
m5_96 -> m5_106  [key=2, style=dotted];
m5_96 -> m5_98  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m5_97 -> m5_98  [key=0, style=solid];
m5_97 -> m5_107  [key=2, style=dotted];
m5_100 -> m5_92  [key=0, style=bold, color=blue];
m5_112 -> m5_110  [key=0, style=bold, color=blue];
m5_115 -> m5_116  [key=0, style=solid];
m5_115 -> m5_117  [key=2, style=dotted];
m5_116 -> m5_114  [key=0, style=bold, color=blue];
m5_119 -> m5_120  [key=0, style=solid];
m5_120 -> m5_118  [key=0, style=bold, color=blue];
m5_122 -> m5_123  [key=0, style=solid];
m5_123 -> m5_121  [key=0, style=bold, color=blue];
m5_151 -> m5_152  [key=0, style=solid];
m5_151 -> m5_159  [key=2, style=dotted];
m5_151 -> m5_155  [key=1, style=dashed, color=darkseagreen4, label=multi];
m5_151 -> m5_156  [key=1, style=dashed, color=darkseagreen4, label=multi];
m5_149 -> m5_150  [key=0, style=solid];
m5_149 -> m5_151  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_150 -> m5_151  [key=0, style=solid];
m5_152 -> m5_153  [key=0, style=solid];
m5_152 -> m5_53  [key=2, style=dotted];
m5_152 -> m5_160  [key=2, style=dotted];
m5_152 -> m5_157  [key=1, style=dashed, color=darkseagreen4, label=job];
m5_155 -> m5_156  [key=0, style=solid];
m5_155 -> m5_53  [key=2, style=dotted];
m5_155 -> m5_161  [key=2, style=dotted];
m5_155 -> m5_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_155 -> m5_167  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_155 -> m5_157  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m5_156 -> m5_157  [key=0, style=solid];
m5_156 -> m5_53  [key=2, style=dotted];
m5_156 -> m5_62  [key=2, style=dotted];
m5_156 -> m5_101  [key=2, style=dotted];
m5_156 -> m5_170  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_153 -> m5_154  [key=0, style=solid];
m5_153 -> m5_155  [key=0, style=solid];
m5_157 -> m5_158  [key=0, style=solid];
m5_157 -> m5_162  [key=2, style=dotted];
m5_157 -> m5_163  [key=2, style=dotted];
m5_154 -> m5_158  [key=0, style=solid];
m5_164 -> m5_165  [key=0, style=solid];
m5_167 -> m5_168  [key=0, style=solid];
m5_170 -> m5_171  [key=0, style=solid];
m5_158 -> m5_149  [key=0, style=bold, color=blue];
m5_165 -> m5_166  [key=0, style=solid];
m5_166 -> m5_164  [key=0, style=bold, color=blue];
m5_168 -> m5_169  [key=0, style=solid];
m5_169 -> m5_167  [key=0, style=bold, color=blue];
m5_171 -> m5_172  [key=0, style=solid];
m5_171 -> m5_173  [key=2, style=dotted];
m5_171 -> m5_53  [key=2, style=dotted];
m5_172 -> m5_170  [key=0, style=bold, color=blue];
m5_183 -> m5_184  [key=0, style=solid];
m5_183 -> m5_186  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_183 -> m5_197  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_183 -> m5_217  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_184 -> m5_185  [key=0, style=solid];
m5_184 -> m5_186  [key=1, style=dashed, color=darkseagreen4, label=sql];
m5_186 -> m5_187  [key=0, style=solid];
m5_186 -> m5_159  [key=2, style=dotted];
m5_186 -> m5_193  [key=1, style=dashed, color=darkseagreen4, label=multi];
m5_186 -> m5_194  [key=1, style=dashed, color=darkseagreen4, label=multi];
m5_186 -> m5_195  [key=1, style=dashed, color=darkseagreen4, label=multi];
m5_186 -> m5_196  [key=1, style=dashed, color=darkseagreen4, label=multi];
m5_197 -> m5_198  [key=0, style=solid];
m5_197 -> m5_204  [key=2, style=dotted];
m5_197 -> m5_205  [key=2, style=dotted];
m5_197 -> m5_216  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_217 -> m5_218  [key=0, style=solid];
m5_217 -> m5_113  [key=2, style=dotted];
m5_217 -> m5_219  [key=2, style=dotted];
m5_185 -> m5_186  [key=0, style=solid];
m5_185 -> m5_200  [key=2, style=dotted];
m5_185 -> m5_189  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_185 -> m5_190  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_185 -> m5_191  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_185 -> m5_192  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_185 -> m5_193  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_185 -> m5_194  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_185 -> m5_195  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_185 -> m5_196  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_185 -> m5_197  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_185 -> m5_198  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_189 -> m5_190  [key=0, style=solid];
m5_189 -> m5_202  [key=2, style=dotted];
m5_190 -> m5_191  [key=0, style=solid];
m5_190 -> m5_202  [key=2, style=dotted];
m5_191 -> m5_192  [key=0, style=solid];
m5_191 -> m5_202  [key=2, style=dotted];
m5_192 -> m5_193  [key=0, style=solid];
m5_192 -> m5_202  [key=2, style=dotted];
m5_193 -> m5_194  [key=0, style=solid];
m5_193 -> m5_53  [key=2, style=dotted];
m5_193 -> m5_203  [key=2, style=dotted];
m5_194 -> m5_195  [key=0, style=solid];
m5_194 -> m5_53  [key=2, style=dotted];
m5_194 -> m5_160  [key=2, style=dotted];
m5_195 -> m5_196  [key=0, style=solid];
m5_195 -> m5_53  [key=2, style=dotted];
m5_195 -> m5_160  [key=2, style=dotted];
m5_196 -> m5_197  [key=0, style=solid];
m5_196 -> m5_53  [key=2, style=dotted];
m5_196 -> m5_203  [key=2, style=dotted];
m5_198 -> m5_199  [key=0, style=solid];
m5_187 -> m5_188  [key=0, style=solid];
m5_187 -> m5_201  [key=2, style=dotted];
m5_187 -> m5_161  [key=2, style=dotted];
m5_187 -> m5_206  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_187 -> m5_209  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_187 -> m5_213  [key=1, style=dashed, color=darkseagreen4, label=countByStates];
m5_188 -> m5_189  [key=0, style=solid];
m5_188 -> m5_213  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_188 -> m5_190  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
m5_188 -> m5_191  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
m5_188 -> m5_192  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
m5_206 -> m5_207  [key=0, style=solid];
m5_209 -> m5_210  [key=0, style=solid];
m5_213 -> m5_214  [key=0, style=solid];
m5_213 -> m5_215  [key=2, style=dotted];
m5_216 -> m5_217  [key=0, style=solid];
m5_199 -> m5_183  [key=0, style=bold, color=blue];
m5_207 -> m5_208  [key=0, style=solid];
m5_208 -> m5_206  [key=0, style=bold, color=blue];
m5_210 -> m5_211  [key=0, style=solid];
m5_211 -> m5_209  [key=0, style=bold, color=blue];
m5_212 -> m5_213  [key=0, style=solid];
m5_214 -> m5_212  [key=0, style=bold, color=blue];
m5_218 -> m5_216  [key=0, style=bold, color=blue];
m5_230 -> m5_231  [key=0, style=solid];
m5_230 -> m5_101  [key=2, style=dotted];
m5_230 -> m5_62  [key=2, style=dotted];
m5_230 -> m5_249  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_230 -> m5_232  [key=1, style=dashed, color=darkseagreen4, label=keys];
m5_230 -> m5_233  [key=1, style=dashed, color=darkseagreen4, label=keys];
m5_250 -> m5_251  [key=0, style=solid];
m5_250 -> m5_252  [key=2, style=dotted];
m5_250 -> m5_253  [key=2, style=dotted];
m5_222 -> m5_223  [key=0, style=solid];
m5_222 -> m5_232  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_223 -> m5_224  [key=0, style=solid];
m5_223 -> m5_227  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_223 -> m5_228  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_232 -> m5_233  [key=0, style=solid];
m5_232 -> m5_245  [key=2, style=dotted];
m5_232 -> m5_161  [key=2, style=dotted];
m5_232 -> m5_254  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_232 -> m5_257  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_232 -> m5_234  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_232 -> m5_235  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_232 -> m5_239  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_224 -> m5_225  [key=0, style=solid];
m5_224 -> m5_63  [key=2, style=dotted];
m5_224 -> m5_227  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_224 -> m5_230  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_224 -> m5_238  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_224 -> m5_240  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_227 -> m5_228  [key=0, style=solid];
m5_227 -> m5_65  [key=2, style=dotted];
m5_228 -> m5_229  [key=0, style=solid];
m5_228 -> m5_244  [key=2, style=dotted];
m5_228 -> m5_228  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_225 -> m5_226  [key=0, style=solid];
m5_225 -> m5_229  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_238 -> m5_239  [key=0, style=solid];
m5_238 -> m5_242  [key=0, style=solid];
m5_240 -> m5_241  [key=0, style=solid];
m5_240 -> m5_246  [key=2, style=dotted];
m5_226 -> m5_227  [key=0, style=solid];
m5_226 -> m5_230  [key=0, style=solid];
m5_229 -> m5_226  [key=0, style=solid];
m5_229 -> m5_229  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_231 -> m5_232  [key=0, style=solid];
m5_249 -> m5_250  [key=0, style=solid];
m5_233 -> m5_234  [key=0, style=solid];
m5_233 -> m5_236  [key=0, style=solid];
m5_233 -> m5_235  [key=1, style=dashed, color=darkseagreen4, label=key];
m5_254 -> m5_255  [key=0, style=solid];
m5_257 -> m5_258  [key=0, style=solid];
m5_234 -> m5_235  [key=0, style=solid];
m5_234 -> m5_233  [key=0, style=solid];
m5_234 -> m5_215  [key=2, style=dotted];
m5_235 -> m5_233  [key=0, style=solid];
m5_235 -> m5_246  [key=2, style=dotted];
m5_239 -> m5_240  [key=0, style=solid];
m5_239 -> m5_248  [key=2, style=dotted];
m5_236 -> m5_237  [key=0, style=solid];
m5_236 -> m5_247  [key=2, style=dotted];
m5_236 -> m5_240  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_236 -> m5_242  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_237 -> m5_238  [key=0, style=solid];
m5_237 -> m5_239  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_237 -> m5_240  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_237 -> m5_241  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_242 -> m5_243  [key=0, style=solid];
m5_241 -> m5_238  [key=0, style=solid];
m5_241 -> m5_241  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_243 -> m5_222  [key=0, style=bold, color=blue];
m5_251 -> m5_249  [key=0, style=bold, color=blue];
m5_255 -> m5_256  [key=0, style=solid];
m5_256 -> m5_254  [key=0, style=bold, color=blue];
m5_258 -> m5_259  [key=0, style=solid];
m5_259 -> m5_257  [key=0, style=bold, color=blue];
m5_270 -> m5_271  [key=0, style=solid];
m5_270 -> m5_101  [key=2, style=dotted];
m5_270 -> m5_62  [key=2, style=dotted];
m5_270 -> m5_288  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_270 -> m5_272  [key=1, style=dashed, color=darkseagreen4, label=keys];
m5_270 -> m5_273  [key=1, style=dashed, color=darkseagreen4, label=keys];
m5_289 -> m5_290  [key=0, style=solid];
m5_289 -> m5_291  [key=2, style=dotted];
m5_262 -> m5_263  [key=0, style=solid];
m5_262 -> m5_272  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_263 -> m5_264  [key=0, style=solid];
m5_263 -> m5_266  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_263 -> m5_267  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_263 -> m5_268  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_272 -> m5_273  [key=0, style=solid];
m5_272 -> m5_245  [key=2, style=dotted];
m5_272 -> m5_161  [key=2, style=dotted];
m5_272 -> m5_292  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_272 -> m5_295  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_272 -> m5_274  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_272 -> m5_275  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_272 -> m5_279  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_264 -> m5_265  [key=0, style=solid];
m5_264 -> m5_284  [key=2, style=dotted];
m5_264 -> m5_266  [key=1, style=dashed, color=darkseagreen4, label=startDate];
m5_266 -> m5_267  [key=0, style=solid];
m5_266 -> m5_269  [key=0, style=solid];
m5_267 -> m5_268  [key=0, style=solid];
m5_267 -> m5_65  [key=2, style=dotted];
m5_268 -> m5_266  [key=0, style=solid];
m5_268 -> m5_284  [key=2, style=dotted];
m5_268 -> m5_268  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_265 -> m5_266  [key=0, style=solid];
m5_265 -> m5_63  [key=2, style=dotted];
m5_265 -> m5_267  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_265 -> m5_269  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_265 -> m5_280  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_269 -> m5_270  [key=0, style=solid];
m5_269 -> m5_101  [key=2, style=dotted];
m5_269 -> m5_62  [key=2, style=dotted];
m5_269 -> m5_285  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_269 -> m5_278  [key=1, style=dashed, color=darkseagreen4, label=stringDates];
m5_280 -> m5_281  [key=0, style=solid];
m5_280 -> m5_246  [key=2, style=dotted];
m5_285 -> m5_286  [key=0, style=solid];
m5_278 -> m5_279  [key=0, style=solid];
m5_278 -> m5_282  [key=0, style=solid];
m5_271 -> m5_272  [key=0, style=solid];
m5_288 -> m5_289  [key=0, style=solid];
m5_273 -> m5_274  [key=0, style=solid];
m5_273 -> m5_276  [key=0, style=solid];
m5_273 -> m5_275  [key=1, style=dashed, color=darkseagreen4, label=key];
m5_292 -> m5_293  [key=0, style=solid];
m5_295 -> m5_296  [key=0, style=solid];
m5_274 -> m5_275  [key=0, style=solid];
m5_274 -> m5_273  [key=0, style=solid];
m5_274 -> m5_215  [key=2, style=dotted];
m5_275 -> m5_273  [key=0, style=solid];
m5_275 -> m5_246  [key=2, style=dotted];
m5_279 -> m5_280  [key=0, style=solid];
m5_279 -> m5_248  [key=2, style=dotted];
m5_276 -> m5_277  [key=0, style=solid];
m5_276 -> m5_247  [key=2, style=dotted];
m5_276 -> m5_280  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_276 -> m5_282  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_277 -> m5_278  [key=0, style=solid];
m5_277 -> m5_279  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_277 -> m5_280  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_277 -> m5_281  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_282 -> m5_283  [key=0, style=solid];
m5_281 -> m5_278  [key=0, style=solid];
m5_281 -> m5_281  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_283 -> m5_262  [key=0, style=bold, color=blue];
m5_286 -> m5_287  [key=0, style=solid];
m5_286 -> m5_252  [key=2, style=dotted];
m5_287 -> m5_285  [key=0, style=bold, color=blue];
m5_290 -> m5_288  [key=0, style=bold, color=blue];
m5_293 -> m5_294  [key=0, style=solid];
m5_294 -> m5_292  [key=0, style=bold, color=blue];
m5_296 -> m5_297  [key=0, style=solid];
m5_297 -> m5_295  [key=0, style=bold, color=blue];
m5_301 -> m5_302  [key=0, style=solid];
m5_301 -> m5_305  [key=2, style=dotted];
m5_300 -> m5_301  [key=0, style=solid];
m5_300 -> m5_302  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_302 -> m5_303  [key=0, style=solid];
m5_302 -> m5_113  [key=2, style=dotted];
m5_303 -> m5_304  [key=0, style=solid];
m5_304 -> m5_300  [key=0, style=bold, color=blue];
m5_322 -> m5_323  [key=0, style=solid];
m5_322 -> m5_53  [key=2, style=dotted];
m5_322 -> m5_62  [key=2, style=dotted];
m5_320 -> m5_321  [key=0, style=solid];
m5_320 -> m5_322  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_321 -> m5_322  [key=0, style=solid];
m5_323 -> m5_324  [key=0, style=solid];
m5_323 -> m5_325  [key=2, style=dotted];
m5_323 -> m5_326  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_324 -> m5_320  [key=0, style=bold, color=blue];
m5_326 -> m5_327  [key=0, style=solid];
m5_327 -> m5_328  [key=0, style=solid];
m5_327 -> m5_329  [key=2, style=dotted];
m5_327 -> m5_73  [key=2, style=dotted];
m5_328 -> m5_326  [key=0, style=bold, color=blue];
m5_334 -> m5_335  [key=0, style=solid];
m5_334 -> m5_53  [key=2, style=dotted];
m5_334 -> m5_203  [key=2, style=dotted];
m5_332 -> m5_333  [key=0, style=solid];
m5_332 -> m5_334  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_333 -> m5_334  [key=0, style=solid];
m5_335 -> m5_336  [key=0, style=solid];
m5_336 -> m5_332  [key=0, style=bold, color=blue];
m5_350 -> m5_351  [key=0, style=solid];
m5_350 -> m5_53  [key=2, style=dotted];
m5_350 -> m5_62  [key=2, style=dotted];
m5_351 -> m5_352  [key=0, style=solid];
m5_351 -> m5_325  [key=2, style=dotted];
m5_348 -> m5_349  [key=0, style=solid];
m5_348 -> m5_350  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_349 -> m5_350  [key=0, style=solid];
m5_352 -> m5_348  [key=0, style=bold, color=blue];
m5_370 -> m5_371  [key=0, style=solid];
m5_370 -> m5_53  [key=2, style=dotted];
m5_370 -> m5_62  [key=2, style=dotted];
m5_370 -> m5_372  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m5_369 -> m5_370  [key=0, style=solid];
m5_371 -> m5_372  [key=0, style=solid];
m5_371 -> m5_376  [key=2, style=dotted];
m5_371 -> m5_373  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_371 -> m5_374  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_372 -> m5_373  [key=0, style=solid];
m5_372 -> m5_374  [key=0, style=solid];
m5_373 -> m5_372  [key=0, style=solid];
m5_373 -> m5_377  [key=2, style=dotted];
m5_373 -> m5_378  [key=2, style=dotted];
m5_373 -> m5_379  [key=2, style=dotted];
m5_373 -> m5_163  [key=2, style=dotted];
m5_373 -> m5_65  [key=2, style=dotted];
m5_374 -> m5_375  [key=0, style=solid];
m5_374 -> m5_365  [key=2, style=dotted];
m5_375 -> m5_368  [key=0, style=bold, color=blue];
m5_29 -> m5_346  [key=0, style=solid];
m5_29 -> m5_350  [key=1, style=dashed, color=darkseagreen4, label=int];
m5_29 -> m5_351  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m5_346 -> m5_347  [key=0, style=solid];
m5_346 -> m5_148  [key=2, style=dotted];
m5_346 -> m5_348  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_347 -> m5_29  [key=0, style=bold, color=blue];
m5_131 -> m5_132  [key=0, style=solid];
m5_131 -> m5_133  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_132 -> m5_133  [key=0, style=solid];
m5_132 -> m5_13  [key=2, style=dotted];
m5_133 -> m5_134  [key=0, style=solid];
m5_133 -> m5_136  [key=2, style=dotted];
m5_134 -> m5_135  [key=0, style=solid];
m5_134 -> m5_137  [key=2, style=dotted];
m5_135 -> m5_131  [key=0, style=bold, color=blue];
m5_130 -> m5_318  [key=0, style=solid];
m5_130 -> m5_322  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<int>"];
m5_318 -> m5_319  [key=0, style=solid];
m5_318 -> m5_148  [key=2, style=dotted];
m5_318 -> m5_320  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_319 -> m5_130  [key=0, style=bold, color=blue];
m5_26 -> m5_27  [key=0, style=solid];
m5_27 -> m5_28  [key=0, style=solid];
m5_27 -> m5_29  [key=2, style=dotted];
m5_27 -> m5_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_28 -> m5_26  [key=0, style=bold, color=blue];
m5_4 -> m5_5  [key=0, style=solid];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_7  [key=2, style=dotted];
m5_6 -> m5_4  [key=0, style=bold, color=blue];
m5_36 -> m5_37  [key=0, style=solid];
m5_37 -> m5_38  [key=0, style=solid];
m5_37 -> m5_29  [key=2, style=dotted];
m5_37 -> m5_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_38 -> m5_36  [key=0, style=bold, color=blue];
m5_177 -> m5_178  [key=0, style=solid];
m5_178 -> m5_179  [key=0, style=solid];
m5_178 -> m5_7  [key=2, style=dotted];
m5_179 -> m5_177  [key=0, style=bold, color=blue];
m5_124 -> m5_125  [key=0, style=solid];
m5_124 -> m5_126  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_125 -> m5_126  [key=0, style=solid];
m5_125 -> m5_13  [key=2, style=dotted];
m5_126 -> m5_127  [key=0, style=solid];
m5_126 -> m5_129  [key=2, style=dotted];
m5_127 -> m5_128  [key=0, style=solid];
m5_127 -> m5_130  [key=2, style=dotted];
m5_128 -> m5_124  [key=0, style=bold, color=blue];
m5_50 -> m5_51  [key=0, style=solid];
m5_51 -> m5_52  [key=0, style=solid];
m5_51 -> m5_53  [key=2, style=dotted];
m5_51 -> m5_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_52 -> m5_50  [key=0, style=bold, color=blue];
m5_174 -> m5_175  [key=0, style=solid];
m5_175 -> m5_176  [key=0, style=solid];
m5_175 -> m5_7  [key=2, style=dotted];
m5_176 -> m5_174  [key=0, style=bold, color=blue];
m5_337 -> m5_338  [key=0, style=solid];
m5_337 -> m5_339  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_338 -> m5_339  [key=0, style=solid];
m5_338 -> m5_344  [key=2, style=dotted];
m5_338 -> m5_340  [key=1, style=dashed, color=darkseagreen4, label=data];
m5_339 -> m5_340  [key=0, style=solid];
m5_340 -> m5_343  [key=0, style=solid];
m5_340 -> m5_345  [key=2, style=dotted];
m5_341 -> m5_342  [key=0, style=solid];
m5_342 -> m5_343  [key=0, style=solid];
m5_343 -> m5_337  [key=0, style=bold, color=blue];
m5_46 -> m5_260  [key=0, style=solid];
m5_46 -> m5_270  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_46 -> m5_289  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_260 -> m5_261  [key=0, style=solid];
m5_260 -> m5_53  [key=2, style=dotted];
m5_260 -> m5_262  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_261 -> m5_46  [key=0, style=bold, color=blue];
m5_82 -> m5_83  [key=0, style=solid, color=red];
m5_83 -> m5_84  [key=0, style=solid, color=red];
m5_83 -> m5_29  [key=2, style=dotted, color=red];
m5_83 -> m5_85  [key=1, style=dashed, color=red, label="lambda expression"];
m5_84 -> m5_82  [key=0, style=bold, color=blue];
m5_8 -> m5_9  [key=0, style=solid];
m5_8 -> m5_10  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_9 -> m5_10  [key=0, style=solid];
m5_9 -> m5_13  [key=2, style=dotted];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_14  [key=2, style=dotted];
m5_11 -> m5_12  [key=0, style=solid];
m5_12 -> m5_8  [key=0, style=bold, color=blue];
m5_142 -> m5_143  [key=0, style=solid];
m5_143 -> m5_144  [key=0, style=solid];
m5_143 -> m5_141  [key=2, style=dotted];
m5_144 -> m5_142  [key=0, style=bold, color=blue];
m5_89 -> m5_90  [key=0, style=solid];
m5_90 -> m5_91  [key=0, style=solid];
m5_90 -> m5_53  [key=2, style=dotted];
m5_90 -> m5_92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_91 -> m5_89  [key=0, style=bold, color=blue];
m5_7 -> m5_330  [key=0, style=solid];
m5_7 -> m5_334  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_330 -> m5_331  [key=0, style=solid];
m5_330 -> m5_148  [key=2, style=dotted];
m5_330 -> m5_332  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_331 -> m5_7  [key=0, style=bold, color=blue];
m5_380 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_27  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_51  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_83  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_90  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_93  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_98  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_125  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_127  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_132  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_134  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_139  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_143  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_146  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_157  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_175  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_178  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_181  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_197  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_220  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_260  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_298  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_301  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_307  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_318  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_323  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_330  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_346  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_351  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_366  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_380 -> m5_373  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_381 -> m5_111  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_382 -> m5_151  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_383 -> m5_213  [key=1, style=dashed, color=darkseagreen4, label=countByStates];
m5_384 -> m5_217  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m5_385 -> m5_230  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_385 -> m5_250  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_386 -> m5_270  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_386 -> m5_289  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_387 -> m5_301  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_388 -> m5_322  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<int>"];
m5_389 -> m5_334  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_390 -> m5_350  [key=1, style=dashed, color=darkseagreen4, label=int];
m5_391 -> m5_350  [key=1, style=dashed, color=darkseagreen4, label=int];
m5_392 -> m5_350  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_393 -> m5_351  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m5_394 -> m5_370  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<int>"];
m6_0 -> m6_1  [key=0, style=solid, color=red];
m6_1 -> m6_2  [key=0, style=solid, color=red];
m6_2 -> m6_0  [key=0, style=bold, color=blue];
m6_3 -> m6_4  [key=0, style=solid, color=green];
m6_4 -> m6_5  [key=0, style=solid, color=green];
m6_4 -> m6_6  [key=2, style=dotted, color=green];
m6_4 -> m6_7  [key=2, style=dotted, color=green];
m6_5 -> m6_3  [key=0, style=bold, color=blue];
m6_8 -> m6_1  [key=1, style=dashed, color=red, label="HangFire.States.ProcessingState"];
m6_8 -> m6_4  [key=1, style=dashed, color=green, label="HangFire.States.ProcessingState"];
m9_14 -> m9_15  [key=0, style=solid, color=green];
m9_15 -> m9_16  [key=0, style=solid, color=green];
m9_15 -> m9_17  [key=2, style=dotted];
m9_15 -> m9_7  [key=2, style=dotted, color=green];
m9_16 -> m9_14  [key=0, style=bold, color=blue];
m9_16 -> m9_17  [key=0, style=solid];
m9_16 -> m9_18  [key=2, style=dotted];
m9_17 -> m9_14  [key=0, style=bold, color=blue];
m9_8 -> m9_9  [key=0, style=solid];
m9_8 -> m9_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.StateApplyingContext"];
m9_9 -> m9_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_9 -> m9_10  [key=0, style=solid];
m9_9 -> m9_3  [key=2, style=dotted];
m9_9 -> m9_12  [key=2, style=dotted];
m9_10 -> m9_8  [key=0, style=bold, color=blue];
m9_10 -> m9_11  [key=0, style=solid];
m9_10 -> m9_13  [key=2, style=dotted];
m9_6 -> m9_4  [key=0, style=bold, color=blue];
m9_3 -> m9_4  [key=0, style=solid];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m9_1 -> m9_3  [key=2, style=dotted];
m9_2 -> m9_0  [key=0, style=bold, color=blue];
m9_12 -> m9_7  [key=2, style=dotted];
m9_12 -> m9_13  [key=0, style=solid];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> m9_6  [key=2, style=dotted];
m9_4 -> m9_7  [key=2, style=dotted];
m9_5 -> m9_3  [key=0, style=bold, color=blue];
m9_5 -> m9_7  [key=2, style=dotted];
m9_5 -> m9_6  [key=0, style=solid];
m9_27 -> m9_28  [key=0, style=solid];
m9_28 -> m9_7  [key=2, style=dotted];
m9_28 -> m9_29  [key=0, style=solid];
m9_29 -> m9_30  [key=0, style=solid];
m9_29 -> m9_31  [key=2, style=dotted];
m9_30 -> m9_27  [key=0, style=bold, color=blue];
m9_18 -> m9_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ScheduledState"];
m9_18 -> m9_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.ScheduledState"];
m9_19 -> m9_20  [key=0, style=solid];
m9_20 -> m9_7  [key=2, style=dotted];
m9_20 -> m9_21  [key=0, style=solid];
m9_20 -> m9_22  [key=1, style=dashed, color=darkseagreen4, label=state];
m9_20 -> m9_23  [key=1, style=dashed, color=darkseagreen4, label=state];
m9_22 -> m9_18  [key=2, style=dotted];
m9_22 -> m9_23  [key=0, style=solid];
m9_22 -> m9_26  [key=2, style=dotted];
m9_23 -> m9_18  [key=2, style=dotted];
m9_23 -> m9_24  [key=0, style=solid];
m9_21 -> m9_22  [key=0, style=solid];
m9_21 -> m9_25  [key=2, style=dotted];
m9_24 -> m9_19  [key=0, style=bold, color=blue];
m9_11 -> m9_12  [key=0, style=solid];
m9_11 -> m9_8  [key=0, style=bold, color=blue];
m9_13 -> m9_11  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_0 -> m10_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.PersistentJobQueueProviderCollection"];
m10_1 -> m10_2  [key=0, style=solid];
m10_2 -> m10_3  [key=0, style=solid];
m10_3 -> m10_0  [key=0, style=bold, color=blue];
m10_187 -> m10_188  [key=0, style=solid];
m10_187 -> m10_192  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<int>"];
m10_188 -> m10_189  [key=0, style=solid];
m10_188 -> m10_31  [key=2, style=dotted];
m10_188 -> m10_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_189 -> m10_187  [key=0, style=bold, color=blue];
m10_243 -> m10_244  [key=0, style=solid];
m10_244 -> m10_245  [key=0, style=solid];
m10_244 -> m10_25  [key=2, style=dotted];
m10_244 -> m10_246  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_245 -> m10_243  [key=0, style=bold, color=blue];
m10_89 -> m10_90  [key=0, style=solid];
m10_90 -> m10_91  [key=0, style=solid];
m10_90 -> m10_88  [key=2, style=dotted];
m10_91 -> m10_89  [key=0, style=bold, color=blue];
m10_25 -> m10_368  [key=0, style=solid];
m10_25 -> m10_371  [key=1, style=dashed, color=darkseagreen4, label="System.Func<SqlConnection, T>"];
m10_368 -> m10_369  [key=0, style=solid];
m10_368 -> m10_375  [key=2, style=dotted];
m10_368 -> m10_376  [key=2, style=dotted];
m10_368 -> m10_372  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_371 -> m10_372  [key=0, style=solid];
m10_371 -> m10_265  [key=2, style=dotted];
m10_371 -> m10_373  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_369 -> m10_370  [key=0, style=solid];
m10_369 -> m10_377  [key=2, style=dotted];
m10_369 -> m10_371  [key=1, style=dashed, color=darkseagreen4, label=connection];
m10_372 -> m10_373  [key=0, style=solid];
m10_372 -> m10_379  [key=2, style=dotted];
m10_370 -> m10_371  [key=0, style=solid];
m10_370 -> m10_378  [key=2, style=dotted];
m10_373 -> m10_374  [key=0, style=solid];
m10_374 -> m10_25  [key=0, style=bold, color=blue];
m10_206 -> m10_282  [key=0, style=solid];
m10_206 -> m10_292  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_206 -> m10_312  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_282 -> m10_283  [key=0, style=solid];
m10_282 -> m10_31  [key=2, style=dotted];
m10_282 -> m10_284  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_283 -> m10_206  [key=0, style=bold, color=blue];
m10_210 -> m10_211  [key=0, style=solid];
m10_210 -> m10_215  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_211 -> m10_212  [key=0, style=solid];
m10_211 -> m10_25  [key=2, style=dotted];
m10_211 -> m10_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_212 -> m10_210  [key=0, style=bold, color=blue];
m10_33 -> m10_34  [key=0, style=solid, color=red];
m10_34 -> m10_35  [key=0, style=solid, color=red];
m10_34 -> m10_7  [key=2, style=dotted, color=red];
m10_35 -> m10_33  [key=0, style=bold, color=blue];
m10_203 -> m10_204  [key=0, style=solid];
m10_204 -> m10_205  [key=0, style=solid];
m10_204 -> m10_206  [key=2, style=dotted];
m10_205 -> m10_203  [key=0, style=bold, color=blue];
m10_113 -> m10_114  [key=0, style=solid];
m10_114 -> m10_115  [key=0, style=solid];
m10_114 -> m10_39  [key=2, style=dotted];
m10_114 -> m10_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_115 -> m10_113  [key=0, style=bold, color=blue];
m10_105 -> m10_106  [key=0, style=solid];
m10_106 -> m10_107  [key=0, style=solid];
m10_106 -> m10_39  [key=2, style=dotted];
m10_106 -> m10_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_107 -> m10_105  [key=0, style=bold, color=blue];
m10_85 -> m10_86  [key=0, style=solid];
m10_86 -> m10_87  [key=0, style=solid];
m10_86 -> m10_88  [key=2, style=dotted];
m10_87 -> m10_85  [key=0, style=bold, color=blue];
m10_15 -> m10_16  [key=0, style=solid];
m10_15 -> m10_17  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_15 -> m10_36  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m10_15 -> m10_72  [key=3, color=darkorchid, style=bold, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo"];
m10_16 -> m10_17  [key=0, style=solid];
m10_16 -> m10_13  [key=2, style=dotted];
m10_17 -> m10_18  [key=0, style=solid];
m10_17 -> m10_14  [key=2, style=dotted];
m10_18 -> m10_19  [key=0, style=solid];
m10_19 -> m10_15  [key=0, style=bold, color=blue];
m10_20 -> m10_21  [key=0, style=solid];
m10_21 -> m10_22  [key=0, style=solid];
m10_21 -> m10_7  [key=2, style=dotted];
m10_22 -> m10_20  [key=0, style=bold, color=blue];
m10_55 -> m10_56  [key=0, style=solid, color=red];
m10_55 -> m10_57  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>"];
m10_55 -> m10_59  [key=1, style=dashed, color=darkseagreen4, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m10_56 -> m10_57  [key=0, style=solid, color=red];
m10_56 -> m10_63  [key=2, style=dotted, color=red];
m10_56 -> m10_60  [key=1, style=dashed, color=red, label=result];
m10_56 -> m10_61  [key=1, style=dashed, color=red, label=result];
m10_57 -> m10_58  [key=0, style=solid, color=red];
m10_57 -> m10_61  [key=0, style=solid];
m10_57 -> m10_59  [key=1, style=dashed, color=darkseagreen4, label=job];
m10_57 -> m10_60  [key=1, style=dashed, color=darkseagreen4, label=job];
m10_59 -> m10_60  [key=0, style=solid];
m10_59 -> m10_65  [key=2, style=dotted];
m10_59 -> m10_66  [key=2, style=dotted];
m10_60 -> m10_57  [key=0, style=solid];
m10_60 -> m10_67  [key=2, style=dotted];
m10_60 -> m10_68  [key=2, style=dotted];
m10_60 -> m10_69  [key=2, style=dotted];
m10_61 -> m10_62  [key=0, style=solid];
m10_61 -> m10_70  [key=2, style=dotted];
m10_58 -> m10_59  [key=0, style=solid, color=red];
m10_58 -> m10_64  [key=2, style=dotted, color=red];
m10_62 -> m10_55  [key=0, style=bold, color=blue];
m10_13 -> m10_360  [key=0, style=solid];
m10_13 -> m10_363  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_360 -> m10_361  [key=0, style=solid];
m10_360 -> m10_25  [key=2, style=dotted];
m10_360 -> m10_362  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_361 -> m10_13  [key=0, style=bold, color=blue];
m10_362 -> m10_363  [key=0, style=solid];
m10_362 -> m10_364  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_28 -> m10_29  [key=0, style=solid];
m10_28 -> m10_31  [key=2, style=dotted];
m10_28 -> m10_32  [key=2, style=dotted];
m10_26 -> m10_27  [key=0, style=solid];
m10_26 -> m10_28  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_27 -> m10_28  [key=0, style=solid];
m10_29 -> m10_30  [key=0, style=solid];
m10_30 -> m10_26  [key=0, style=bold, color=blue];
m10_40 -> m10_41  [key=0, style=solid, color=red];
m10_41 -> m10_42  [key=0, style=solid, color=red];
m10_41 -> m10_43  [key=2, style=dotted, color=red];
m10_41 -> m10_44  [key=2, style=dotted, color=red];
m10_41 -> m10_45  [key=2, style=dotted, color=red];
m10_42 -> m10_40  [key=0, style=bold, color=blue];
m10_50 -> m10_51  [key=0, style=solid, color=red];
m10_50 -> m10_31  [key=2, style=dotted, color=red];
m10_50 -> m10_53  [key=2, style=dotted, color=red];
m10_51 -> m10_52  [key=0, style=solid, color=red];
m10_51 -> m10_54  [key=2, style=dotted, color=red];
m10_48 -> m10_49  [key=0, style=solid, color=red];
m10_48 -> m10_50  [key=1, style=dashed, color=red, label=SqlConnection];
m10_49 -> m10_50  [key=0, style=solid, color=red];
m10_52 -> m10_48  [key=0, style=bold, color=blue];
m10_81 -> m10_82  [key=0, style=solid];
m10_82 -> m10_83  [key=0, style=solid];
m10_82 -> m10_84  [key=2, style=dotted];
m10_82 -> m10_45  [key=2, style=dotted];
m10_83 -> m10_81  [key=0, style=bold, color=blue];
m10_95 -> m10_96  [key=0, style=solid];
m10_96 -> m10_97  [key=0, style=solid];
m10_96 -> m10_31  [key=2, style=dotted];
m10_96 -> m10_53  [key=2, style=dotted];
m10_96 -> m10_98  [key=1, style=dashed, color=darkseagreen4, label=servers];
m10_97 -> m10_98  [key=0, style=solid];
m10_97 -> m10_103  [key=2, style=dotted];
m10_97 -> m10_100  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_97 -> m10_101  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_98 -> m10_99  [key=0, style=solid];
m10_98 -> m10_101  [key=0, style=solid];
m10_98 -> m10_100  [key=1, style=dashed, color=darkseagreen4, label=server];
m10_100 -> m10_98  [key=0, style=solid];
m10_100 -> m10_104  [key=2, style=dotted];
m10_100 -> m10_69  [key=2, style=dotted];
m10_101 -> m10_102  [key=0, style=solid];
m10_99 -> m10_100  [key=0, style=solid];
m10_99 -> m10_31  [key=2, style=dotted];
m10_102 -> m10_95  [key=0, style=bold, color=blue];
m10_108 -> m10_109  [key=0, style=solid];
m10_109 -> m10_110  [key=0, style=solid];
m10_109 -> m10_111  [key=2, style=dotted];
m10_109 -> m10_112  [key=2, style=dotted];
m10_110 -> m10_108  [key=0, style=bold, color=blue];
m10_116 -> m10_117  [key=0, style=solid];
m10_117 -> m10_118  [key=0, style=solid];
m10_117 -> m10_119  [key=2, style=dotted];
m10_117 -> m10_44  [key=2, style=dotted];
m10_117 -> m10_120  [key=2, style=dotted];
m10_117 -> m10_112  [key=2, style=dotted];
m10_118 -> m10_116  [key=0, style=bold, color=blue];
m10_124 -> m10_125  [key=0, style=solid];
m10_125 -> m10_126  [key=0, style=solid];
m10_125 -> m10_127  [key=2, style=dotted];
m10_125 -> m10_112  [key=2, style=dotted];
m10_126 -> m10_124  [key=0, style=bold, color=blue];
m10_131 -> m10_132  [key=0, style=solid];
m10_131 -> m10_150  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_132 -> m10_133  [key=0, style=solid];
m10_132 -> m10_140  [key=2, style=dotted];
m10_132 -> m10_141  [key=2, style=dotted];
m10_132 -> m10_142  [key=2, style=dotted];
m10_132 -> m10_143  [key=2, style=dotted];
m10_132 -> m10_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_132 -> m10_153  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_132 -> m10_157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_132 -> m10_160  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_132 -> m10_134  [key=1, style=dashed, color=darkseagreen4, label=tuples];
m10_150 -> m10_151  [key=0, style=solid];
m10_150 -> m10_152  [key=2, style=dotted];
m10_133 -> m10_134  [key=0, style=solid];
m10_133 -> m10_144  [key=2, style=dotted];
m10_133 -> m10_137  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_133 -> m10_138  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_149 -> m10_150  [key=0, style=solid];
m10_153 -> m10_154  [key=0, style=solid];
m10_157 -> m10_158  [key=0, style=solid];
m10_160 -> m10_161  [key=0, style=solid];
m10_134 -> m10_135  [key=0, style=solid];
m10_134 -> m10_138  [key=0, style=solid];
m10_134 -> m10_136  [key=1, style=dashed, color=darkseagreen4, label=tuple];
m10_134 -> m10_137  [key=1, style=dashed, color=darkseagreen4, label=tuple];
m10_137 -> m10_134  [key=0, style=solid];
m10_137 -> m10_147  [key=2, style=dotted];
m10_137 -> m10_148  [key=2, style=dotted];
m10_137 -> m10_69  [key=2, style=dotted];
m10_138 -> m10_139  [key=0, style=solid];
m10_135 -> m10_136  [key=0, style=solid];
m10_135 -> m10_145  [key=2, style=dotted];
m10_135 -> m10_137  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m10_136 -> m10_137  [key=0, style=solid];
m10_136 -> m10_146  [key=2, style=dotted];
m10_139 -> m10_131  [key=0, style=bold, color=blue];
m10_151 -> m10_149  [key=0, style=bold, color=blue];
m10_154 -> m10_155  [key=0, style=solid];
m10_154 -> m10_156  [key=2, style=dotted];
m10_155 -> m10_153  [key=0, style=bold, color=blue];
m10_158 -> m10_159  [key=0, style=solid];
m10_159 -> m10_157  [key=0, style=bold, color=blue];
m10_161 -> m10_162  [key=0, style=solid];
m10_162 -> m10_160  [key=0, style=bold, color=blue];
m10_174 -> m10_175  [key=0, style=solid];
m10_174 -> m10_31  [key=2, style=dotted];
m10_174 -> m10_53  [key=2, style=dotted];
m10_172 -> m10_173  [key=0, style=solid];
m10_172 -> m10_174  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_173 -> m10_174  [key=0, style=solid];
m10_175 -> m10_176  [key=0, style=solid];
m10_175 -> m10_54  [key=2, style=dotted];
m10_175 -> m10_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_176 -> m10_172  [key=0, style=bold, color=blue];
m10_177 -> m10_178  [key=0, style=solid];
m10_178 -> m10_179  [key=0, style=solid];
m10_178 -> m10_180  [key=2, style=dotted];
m10_178 -> m10_112  [key=2, style=dotted];
m10_179 -> m10_177  [key=0, style=bold, color=blue];
m10_192 -> m10_193  [key=0, style=solid];
m10_192 -> m10_31  [key=2, style=dotted];
m10_192 -> m10_53  [key=2, style=dotted];
m10_192 -> m10_194  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m10_190 -> m10_191  [key=0, style=solid];
m10_190 -> m10_192  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_191 -> m10_192  [key=0, style=solid];
m10_193 -> m10_194  [key=0, style=solid];
m10_193 -> m10_198  [key=2, style=dotted];
m10_193 -> m10_195  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_193 -> m10_196  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_194 -> m10_195  [key=0, style=solid];
m10_194 -> m10_196  [key=0, style=solid];
m10_195 -> m10_194  [key=0, style=solid];
m10_195 -> m10_199  [key=2, style=dotted];
m10_195 -> m10_200  [key=2, style=dotted];
m10_195 -> m10_201  [key=2, style=dotted];
m10_195 -> m10_202  [key=2, style=dotted];
m10_195 -> m10_69  [key=2, style=dotted];
m10_196 -> m10_197  [key=0, style=solid];
m10_196 -> m10_70  [key=2, style=dotted];
m10_197 -> m10_190  [key=0, style=bold, color=blue];
m10_215 -> m10_216  [key=0, style=solid];
m10_215 -> m10_223  [key=2, style=dotted];
m10_215 -> m10_219  [key=1, style=dashed, color=darkseagreen4, label=multi];
m10_215 -> m10_220  [key=1, style=dashed, color=darkseagreen4, label=multi];
m10_213 -> m10_214  [key=0, style=solid];
m10_213 -> m10_215  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_214 -> m10_215  [key=0, style=solid];
m10_216 -> m10_217  [key=0, style=solid];
m10_216 -> m10_31  [key=2, style=dotted];
m10_216 -> m10_224  [key=2, style=dotted];
m10_216 -> m10_221  [key=1, style=dashed, color=darkseagreen4, label=job];
m10_219 -> m10_220  [key=0, style=solid];
m10_219 -> m10_31  [key=2, style=dotted];
m10_219 -> m10_225  [key=2, style=dotted];
m10_219 -> m10_227  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_219 -> m10_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_219 -> m10_221  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m10_220 -> m10_221  [key=0, style=solid];
m10_220 -> m10_31  [key=2, style=dotted];
m10_220 -> m10_53  [key=2, style=dotted];
m10_220 -> m10_140  [key=2, style=dotted];
m10_220 -> m10_233  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_217 -> m10_218  [key=0, style=solid];
m10_217 -> m10_219  [key=0, style=solid];
m10_221 -> m10_222  [key=0, style=solid];
m10_221 -> m10_226  [key=2, style=dotted];
m10_221 -> m10_202  [key=2, style=dotted];
m10_218 -> m10_222  [key=0, style=solid];
m10_227 -> m10_228  [key=0, style=solid];
m10_230 -> m10_231  [key=0, style=solid];
m10_233 -> m10_234  [key=0, style=solid];
m10_222 -> m10_213  [key=0, style=bold, color=blue];
m10_228 -> m10_229  [key=0, style=solid];
m10_229 -> m10_227  [key=0, style=bold, color=blue];
m10_231 -> m10_232  [key=0, style=solid];
m10_232 -> m10_230  [key=0, style=bold, color=blue];
m10_234 -> m10_235  [key=0, style=solid];
m10_234 -> m10_236  [key=2, style=dotted];
m10_234 -> m10_31  [key=2, style=dotted];
m10_235 -> m10_233  [key=0, style=bold, color=blue];
m10_246 -> m10_247  [key=0, style=solid];
m10_246 -> m10_249  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_246 -> m10_260  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_246 -> m10_279  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_247 -> m10_248  [key=0, style=solid];
m10_247 -> m10_249  [key=1, style=dashed, color=darkseagreen4, label=sql];
m10_249 -> m10_250  [key=0, style=solid];
m10_249 -> m10_223  [key=2, style=dotted];
m10_249 -> m10_256  [key=1, style=dashed, color=darkseagreen4, label=multi];
m10_249 -> m10_257  [key=1, style=dashed, color=darkseagreen4, label=multi];
m10_249 -> m10_258  [key=1, style=dashed, color=darkseagreen4, label=multi];
m10_249 -> m10_259  [key=1, style=dashed, color=darkseagreen4, label=multi];
m10_260 -> m10_261  [key=0, style=solid];
m10_260 -> m10_266  [key=2, style=dotted];
m10_260 -> m10_267  [key=2, style=dotted];
m10_260 -> m10_278  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_279 -> m10_280  [key=0, style=solid];
m10_279 -> m10_152  [key=2, style=dotted];
m10_279 -> m10_281  [key=2, style=dotted];
m10_248 -> m10_249  [key=0, style=solid];
m10_248 -> m10_263  [key=2, style=dotted];
m10_248 -> m10_252  [key=1, style=dashed, color=darkseagreen4, label=stats];
m10_248 -> m10_253  [key=1, style=dashed, color=darkseagreen4, label=stats];
m10_248 -> m10_254  [key=1, style=dashed, color=darkseagreen4, label=stats];
m10_248 -> m10_255  [key=1, style=dashed, color=darkseagreen4, label=stats];
m10_248 -> m10_256  [key=1, style=dashed, color=darkseagreen4, label=stats];
m10_248 -> m10_257  [key=1, style=dashed, color=darkseagreen4, label=stats];
m10_248 -> m10_258  [key=1, style=dashed, color=darkseagreen4, label=stats];
m10_248 -> m10_259  [key=1, style=dashed, color=darkseagreen4, label=stats];
m10_248 -> m10_260  [key=1, style=dashed, color=darkseagreen4, label=stats];
m10_248 -> m10_261  [key=1, style=dashed, color=darkseagreen4, label=stats];
m10_252 -> m10_253  [key=0, style=solid];
m10_252 -> m10_265  [key=2, style=dotted];
m10_253 -> m10_254  [key=0, style=solid];
m10_253 -> m10_265  [key=2, style=dotted];
m10_254 -> m10_255  [key=0, style=solid];
m10_254 -> m10_265  [key=2, style=dotted];
m10_255 -> m10_256  [key=0, style=solid];
m10_255 -> m10_265  [key=2, style=dotted];
m10_256 -> m10_257  [key=0, style=solid];
m10_256 -> m10_31  [key=2, style=dotted];
m10_256 -> m10_32  [key=2, style=dotted];
m10_257 -> m10_258  [key=0, style=solid];
m10_257 -> m10_31  [key=2, style=dotted];
m10_257 -> m10_224  [key=2, style=dotted];
m10_258 -> m10_259  [key=0, style=solid];
m10_258 -> m10_31  [key=2, style=dotted];
m10_258 -> m10_224  [key=2, style=dotted];
m10_259 -> m10_260  [key=0, style=solid];
m10_259 -> m10_31  [key=2, style=dotted];
m10_259 -> m10_32  [key=2, style=dotted];
m10_261 -> m10_262  [key=0, style=solid];
m10_250 -> m10_251  [key=0, style=solid];
m10_250 -> m10_264  [key=2, style=dotted];
m10_250 -> m10_225  [key=2, style=dotted];
m10_250 -> m10_268  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_250 -> m10_271  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_250 -> m10_275  [key=1, style=dashed, color=darkseagreen4, label=countByStates];
m10_251 -> m10_252  [key=0, style=solid];
m10_251 -> m10_275  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_251 -> m10_253  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
m10_251 -> m10_254  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
m10_251 -> m10_255  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
m10_268 -> m10_269  [key=0, style=solid];
m10_271 -> m10_272  [key=0, style=solid];
m10_275 -> m10_276  [key=0, style=solid];
m10_275 -> m10_277  [key=2, style=dotted];
m10_278 -> m10_279  [key=0, style=solid];
m10_262 -> m10_246  [key=0, style=bold, color=blue];
m10_269 -> m10_270  [key=0, style=solid];
m10_270 -> m10_268  [key=0, style=bold, color=blue];
m10_272 -> m10_273  [key=0, style=solid];
m10_273 -> m10_271  [key=0, style=bold, color=blue];
m10_274 -> m10_275  [key=0, style=solid];
m10_276 -> m10_274  [key=0, style=bold, color=blue];
m10_280 -> m10_278  [key=0, style=bold, color=blue];
m10_292 -> m10_293  [key=0, style=solid];
m10_292 -> m10_140  [key=2, style=dotted];
m10_292 -> m10_53  [key=2, style=dotted];
m10_292 -> m10_311  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_292 -> m10_294  [key=1, style=dashed, color=darkseagreen4, label=keys];
m10_292 -> m10_295  [key=1, style=dashed, color=darkseagreen4, label=keys];
m10_312 -> m10_313  [key=0, style=solid];
m10_312 -> m10_314  [key=2, style=dotted];
m10_312 -> m10_315  [key=2, style=dotted];
m10_284 -> m10_285  [key=0, style=solid];
m10_284 -> m10_294  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_285 -> m10_286  [key=0, style=solid];
m10_285 -> m10_289  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m10_285 -> m10_290  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m10_294 -> m10_295  [key=0, style=solid];
m10_294 -> m10_307  [key=2, style=dotted];
m10_294 -> m10_225  [key=2, style=dotted];
m10_294 -> m10_316  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_294 -> m10_319  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_294 -> m10_296  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m10_294 -> m10_297  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m10_294 -> m10_301  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m10_286 -> m10_287  [key=0, style=solid];
m10_286 -> m10_103  [key=2, style=dotted];
m10_286 -> m10_289  [key=1, style=dashed, color=darkseagreen4, label=dates];
m10_286 -> m10_292  [key=1, style=dashed, color=darkseagreen4, label=dates];
m10_286 -> m10_300  [key=1, style=dashed, color=darkseagreen4, label=dates];
m10_286 -> m10_302  [key=1, style=dashed, color=darkseagreen4, label=dates];
m10_289 -> m10_290  [key=0, style=solid];
m10_289 -> m10_69  [key=2, style=dotted];
m10_290 -> m10_291  [key=0, style=solid];
m10_290 -> m10_306  [key=2, style=dotted];
m10_290 -> m10_290  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m10_287 -> m10_288  [key=0, style=solid];
m10_287 -> m10_291  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_300 -> m10_301  [key=0, style=solid];
m10_300 -> m10_304  [key=0, style=solid];
m10_302 -> m10_303  [key=0, style=solid];
m10_302 -> m10_308  [key=2, style=dotted];
m10_288 -> m10_289  [key=0, style=solid];
m10_288 -> m10_292  [key=0, style=solid];
m10_291 -> m10_288  [key=0, style=solid];
m10_291 -> m10_291  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_293 -> m10_294  [key=0, style=solid];
m10_311 -> m10_312  [key=0, style=solid];
m10_295 -> m10_296  [key=0, style=solid];
m10_295 -> m10_298  [key=0, style=solid];
m10_295 -> m10_297  [key=1, style=dashed, color=darkseagreen4, label=key];
m10_316 -> m10_317  [key=0, style=solid];
m10_319 -> m10_320  [key=0, style=solid];
m10_296 -> m10_297  [key=0, style=solid];
m10_296 -> m10_295  [key=0, style=solid];
m10_296 -> m10_277  [key=2, style=dotted];
m10_297 -> m10_295  [key=0, style=solid];
m10_297 -> m10_308  [key=2, style=dotted];
m10_301 -> m10_302  [key=0, style=solid];
m10_301 -> m10_310  [key=2, style=dotted];
m10_298 -> m10_299  [key=0, style=solid];
m10_298 -> m10_309  [key=2, style=dotted];
m10_298 -> m10_302  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_298 -> m10_304  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_299 -> m10_300  [key=0, style=solid];
m10_299 -> m10_301  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_299 -> m10_302  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_299 -> m10_303  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_304 -> m10_305  [key=0, style=solid];
m10_303 -> m10_300  [key=0, style=solid];
m10_303 -> m10_303  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_305 -> m10_284  [key=0, style=bold, color=blue];
m10_313 -> m10_311  [key=0, style=bold, color=blue];
m10_317 -> m10_318  [key=0, style=solid];
m10_318 -> m10_316  [key=0, style=bold, color=blue];
m10_320 -> m10_321  [key=0, style=solid];
m10_321 -> m10_319  [key=0, style=bold, color=blue];
m10_332 -> m10_333  [key=0, style=solid];
m10_332 -> m10_140  [key=2, style=dotted];
m10_332 -> m10_53  [key=2, style=dotted];
m10_332 -> m10_350  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_332 -> m10_334  [key=1, style=dashed, color=darkseagreen4, label=keys];
m10_332 -> m10_335  [key=1, style=dashed, color=darkseagreen4, label=keys];
m10_351 -> m10_352  [key=0, style=solid];
m10_351 -> m10_353  [key=2, style=dotted];
m10_324 -> m10_325  [key=0, style=solid];
m10_324 -> m10_334  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_325 -> m10_326  [key=0, style=solid];
m10_325 -> m10_328  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m10_325 -> m10_329  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m10_325 -> m10_330  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m10_334 -> m10_335  [key=0, style=solid];
m10_334 -> m10_307  [key=2, style=dotted];
m10_334 -> m10_225  [key=2, style=dotted];
m10_334 -> m10_354  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_334 -> m10_357  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_334 -> m10_336  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m10_334 -> m10_337  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m10_334 -> m10_341  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m10_326 -> m10_327  [key=0, style=solid];
m10_326 -> m10_346  [key=2, style=dotted];
m10_326 -> m10_328  [key=1, style=dashed, color=darkseagreen4, label=startDate];
m10_328 -> m10_329  [key=0, style=solid];
m10_328 -> m10_331  [key=0, style=solid];
m10_329 -> m10_330  [key=0, style=solid];
m10_329 -> m10_69  [key=2, style=dotted];
m10_330 -> m10_328  [key=0, style=solid];
m10_330 -> m10_346  [key=2, style=dotted];
m10_330 -> m10_330  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m10_327 -> m10_328  [key=0, style=solid];
m10_327 -> m10_103  [key=2, style=dotted];
m10_327 -> m10_329  [key=1, style=dashed, color=darkseagreen4, label=dates];
m10_327 -> m10_331  [key=1, style=dashed, color=darkseagreen4, label=dates];
m10_327 -> m10_342  [key=1, style=dashed, color=darkseagreen4, label=dates];
m10_331 -> m10_332  [key=0, style=solid];
m10_331 -> m10_140  [key=2, style=dotted];
m10_331 -> m10_53  [key=2, style=dotted];
m10_331 -> m10_347  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_331 -> m10_340  [key=1, style=dashed, color=darkseagreen4, label=stringDates];
m10_342 -> m10_343  [key=0, style=solid];
m10_342 -> m10_308  [key=2, style=dotted];
m10_347 -> m10_348  [key=0, style=solid];
m10_340 -> m10_341  [key=0, style=solid];
m10_340 -> m10_344  [key=0, style=solid];
m10_333 -> m10_334  [key=0, style=solid];
m10_350 -> m10_351  [key=0, style=solid];
m10_335 -> m10_336  [key=0, style=solid];
m10_335 -> m10_338  [key=0, style=solid];
m10_335 -> m10_337  [key=1, style=dashed, color=darkseagreen4, label=key];
m10_354 -> m10_355  [key=0, style=solid];
m10_357 -> m10_358  [key=0, style=solid];
m10_336 -> m10_337  [key=0, style=solid];
m10_336 -> m10_335  [key=0, style=solid];
m10_336 -> m10_277  [key=2, style=dotted];
m10_337 -> m10_335  [key=0, style=solid];
m10_337 -> m10_308  [key=2, style=dotted];
m10_341 -> m10_342  [key=0, style=solid];
m10_341 -> m10_310  [key=2, style=dotted];
m10_338 -> m10_339  [key=0, style=solid];
m10_338 -> m10_309  [key=2, style=dotted];
m10_338 -> m10_342  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_338 -> m10_344  [key=1, style=dashed, color=darkseagreen4, label=result];
m10_339 -> m10_340  [key=0, style=solid];
m10_339 -> m10_341  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_339 -> m10_342  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_339 -> m10_343  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_344 -> m10_345  [key=0, style=solid];
m10_343 -> m10_340  [key=0, style=solid];
m10_343 -> m10_343  [key=1, style=dashed, color=darkseagreen4, label=i];
m10_345 -> m10_324  [key=0, style=bold, color=blue];
m10_348 -> m10_349  [key=0, style=solid];
m10_348 -> m10_314  [key=2, style=dotted];
m10_349 -> m10_347  [key=0, style=bold, color=blue];
m10_352 -> m10_350  [key=0, style=bold, color=blue];
m10_355 -> m10_356  [key=0, style=solid];
m10_356 -> m10_354  [key=0, style=bold, color=blue];
m10_358 -> m10_359  [key=0, style=solid];
m10_359 -> m10_357  [key=0, style=bold, color=blue];
m10_363 -> m10_364  [key=0, style=solid];
m10_363 -> m10_367  [key=2, style=dotted];
m10_364 -> m10_365  [key=0, style=solid];
m10_364 -> m10_152  [key=2, style=dotted];
m10_365 -> m10_366  [key=0, style=solid];
m10_366 -> m10_362  [key=0, style=bold, color=blue];
m10_39 -> m10_46  [key=0, style=solid, color=red];
m10_39 -> m10_50  [key=1, style=dashed, color=red, label=int];
m10_39 -> m10_51  [key=1, style=dashed, color=red, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m10_46 -> m10_47  [key=0, style=solid, color=red];
m10_46 -> m10_25  [key=2, style=dotted, color=red];
m10_46 -> m10_48  [key=1, style=dashed, color=red, label="lambda expression"];
m10_47 -> m10_39  [key=0, style=bold, color=blue];
m10_181 -> m10_182  [key=0, style=solid];
m10_181 -> m10_183  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_182 -> m10_183  [key=0, style=solid];
m10_182 -> m10_13  [key=2, style=dotted];
m10_183 -> m10_184  [key=0, style=solid];
m10_183 -> m10_186  [key=2, style=dotted];
m10_184 -> m10_185  [key=0, style=solid];
m10_184 -> m10_187  [key=2, style=dotted];
m10_185 -> m10_181  [key=0, style=bold, color=blue];
m10_169 -> m10_170  [key=0, style=solid];
m10_169 -> m10_174  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<int>"];
m10_170 -> m10_171  [key=0, style=solid];
m10_170 -> m10_25  [key=2, style=dotted];
m10_170 -> m10_172  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_171 -> m10_169  [key=0, style=bold, color=blue];
m10_36 -> m10_37  [key=0, style=solid, color=red];
m10_37 -> m10_38  [key=0, style=solid, color=red];
m10_37 -> m10_39  [key=2, style=dotted, color=red];
m10_37 -> m10_40  [key=1, style=dashed, color=red, label="lambda expression"];
m10_38 -> m10_36  [key=0, style=bold, color=blue];
m10_4 -> m10_5  [key=0, style=solid];
m10_5 -> m10_6  [key=0, style=solid];
m10_5 -> m10_7  [key=2, style=dotted];
m10_6 -> m10_4  [key=0, style=bold, color=blue];
m10_78 -> m10_79  [key=0, style=solid];
m10_79 -> m10_80  [key=0, style=solid];
m10_79 -> m10_39  [key=2, style=dotted];
m10_79 -> m10_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_80 -> m10_78  [key=0, style=bold, color=blue];
m10_240 -> m10_241  [key=0, style=solid];
m10_241 -> m10_242  [key=0, style=solid];
m10_241 -> m10_7  [key=2, style=dotted];
m10_242 -> m10_240  [key=0, style=bold, color=blue];
m10_163 -> m10_164  [key=0, style=solid];
m10_163 -> m10_165  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_164 -> m10_165  [key=0, style=solid];
m10_164 -> m10_13  [key=2, style=dotted];
m10_165 -> m10_166  [key=0, style=solid];
m10_165 -> m10_168  [key=2, style=dotted];
m10_166 -> m10_167  [key=0, style=solid];
m10_166 -> m10_169  [key=2, style=dotted];
m10_167 -> m10_163  [key=0, style=bold, color=blue];
m10_92 -> m10_93  [key=0, style=solid];
m10_93 -> m10_94  [key=0, style=solid];
m10_93 -> m10_31  [key=2, style=dotted];
m10_93 -> m10_95  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_94 -> m10_92  [key=0, style=bold, color=blue];
m10_237 -> m10_238  [key=0, style=solid];
m10_238 -> m10_239  [key=0, style=solid];
m10_238 -> m10_7  [key=2, style=dotted];
m10_239 -> m10_237  [key=0, style=bold, color=blue];
m10_65 -> m10_71  [key=0, style=solid];
m10_65 -> m10_72  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_71 -> m10_72  [key=0, style=solid];
m10_71 -> m10_64  [key=2, style=dotted];
m10_71 -> m10_73  [key=1, style=dashed, color=darkseagreen4, label=data];
m10_72 -> m10_73  [key=0, style=solid];
m10_73 -> m10_76  [key=0, style=solid];
m10_73 -> m10_77  [key=2, style=dotted];
m10_74 -> m10_75  [key=0, style=solid];
m10_75 -> m10_76  [key=0, style=solid];
m10_76 -> m10_65  [key=0, style=bold, color=blue];
m10_88 -> m10_322  [key=0, style=solid];
m10_88 -> m10_332  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_88 -> m10_351  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_322 -> m10_323  [key=0, style=solid];
m10_322 -> m10_31  [key=2, style=dotted];
m10_322 -> m10_324  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_323 -> m10_88  [key=0, style=bold, color=blue];
m10_121 -> m10_122  [key=0, style=solid];
m10_122 -> m10_123  [key=0, style=solid];
m10_122 -> m10_39  [key=2, style=dotted];
m10_122 -> m10_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_123 -> m10_121  [key=0, style=bold, color=blue];
m10_8 -> m10_9  [key=0, style=solid];
m10_8 -> m10_10  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_9 -> m10_10  [key=0, style=solid];
m10_9 -> m10_13  [key=2, style=dotted];
m10_10 -> m10_11  [key=0, style=solid];
m10_10 -> m10_14  [key=2, style=dotted];
m10_11 -> m10_12  [key=0, style=solid];
m10_12 -> m10_8  [key=0, style=bold, color=blue];
m10_207 -> m10_208  [key=0, style=solid];
m10_208 -> m10_209  [key=0, style=solid];
m10_208 -> m10_206  [key=2, style=dotted];
m10_209 -> m10_207  [key=0, style=bold, color=blue];
m10_128 -> m10_129  [key=0, style=solid];
m10_129 -> m10_130  [key=0, style=solid];
m10_129 -> m10_31  [key=2, style=dotted];
m10_129 -> m10_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_130 -> m10_128  [key=0, style=bold, color=blue];
m10_7 -> m10_23  [key=0, style=solid];
m10_7 -> m10_28  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_23 -> m10_24  [key=0, style=solid];
m10_23 -> m10_25  [key=2, style=dotted];
m10_23 -> m10_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_24 -> m10_7  [key=0, style=bold, color=blue];
m10_380 -> m10_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_23  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_34  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_37  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_46  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_51  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_86  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_90  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_93  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_106  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_114  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_122  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_129  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_132  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_137  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_164  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_166  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_170  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_175  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_182  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_184  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_188  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_195  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_204  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_208  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_211  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_221  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_238  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_241  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_244  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_260  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_282  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_322  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_360  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_363  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_380 -> m10_369  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m10_381 -> m10_28  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_382 -> m10_50  [key=1, style=dashed, color=red, label=int];
m10_383 -> m10_50  [key=1, style=dashed, color=red, label=int];
m10_384 -> m10_50  [key=1, style=dashed, color=red, label=string];
m10_385 -> m10_51  [key=1, style=dashed, color=red, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m10_386 -> m10_150  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_387 -> m10_174  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<int>"];
m10_388 -> m10_192  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<int>"];
m10_389 -> m10_215  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_390 -> m10_275  [key=1, style=dashed, color=darkseagreen4, label=countByStates];
m10_391 -> m10_279  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m10_392 -> m10_292  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_392 -> m10_312  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_393 -> m10_332  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_393 -> m10_351  [key=1, style=dashed, color=darkseagreen4, label=string];
m10_394 -> m10_363  [key=1, style=dashed, color=darkseagreen4, label=string];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_7  [key=2, style=dotted];
m12_1 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_1 -> m12_4  [key=1, style=dashed, color=darkseagreen4, label=job];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_8  [key=2, style=dotted];
m12_4 -> m12_5  [key=0, style=solid, color=red];
m12_4 -> m12_10  [key=2, style=dotted];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_9  [key=2, style=dotted];
m12_5 -> m12_6  [key=0, style=solid, color=red];
m12_5 -> m12_11  [key=2, style=dotted, color=red];
m12_5 -> m12_12  [key=2, style=dotted, color=red];
m12_5 -> m12_5  [key=3, color=red, style=bold, label="Property variable string StateName"];
m12_6 -> m12_0  [key=0, style=bold, color=blue];
m12_23 -> m12_24  [key=0, style=solid];
m12_24 -> m12_25  [key=0, style=solid];
m12_24 -> m12_21  [key=2, style=dotted];
m12_25 -> m12_26  [key=0, style=solid];
m12_25 -> m12_28  [key=2, style=dotted];
m12_26 -> m12_27  [key=0, style=solid];
m12_26 -> m12_29  [key=2, style=dotted];
m12_26 -> m12_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_27 -> m12_23  [key=0, style=bold, color=blue];
m12_35 -> m12_36  [key=0, style=solid];
m12_36 -> m12_37  [key=0, style=solid];
m12_36 -> m12_21  [key=2, style=dotted];
m12_37 -> m12_38  [key=0, style=solid];
m12_37 -> m12_40  [key=2, style=dotted];
m12_38 -> m12_39  [key=0, style=solid];
m12_38 -> m12_29  [key=2, style=dotted];
m12_38 -> m12_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_39 -> m12_35  [key=0, style=bold, color=blue];
m12_21 -> m12_5  [key=3, color=red, style=bold, label="Property variable string StateName"];
m12_45 -> m12_46  [key=0, style=solid];
m12_46 -> m12_47  [key=0, style=solid];
m12_46 -> m12_21  [key=2, style=dotted];
m12_46 -> m12_48  [key=1, style=dashed, color=darkseagreen4, label=handler];
m12_46 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label=handler];
m12_47 -> m12_48  [key=0, style=solid];
m12_47 -> m12_11  [key=2, style=dotted];
m12_47 -> m12_50  [key=2, style=dotted];
m12_47 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label=context];
m12_48 -> m12_49  [key=0, style=solid];
m12_48 -> m12_51  [key=2, style=dotted];
m12_48 -> m12_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_49 -> m12_45  [key=0, style=bold, color=blue];
m12_52 -> m12_53  [key=0, style=solid];
m12_13 -> m12_14  [key=0, style=solid];
m12_14 -> m12_15  [key=0, style=solid];
m12_14 -> m12_16  [key=2, style=dotted];
m12_15 -> m12_13  [key=0, style=bold, color=blue];
m12_30 -> m12_31  [key=0, style=solid];
m12_31 -> m12_32  [key=0, style=solid];
m12_31 -> m12_33  [key=2, style=dotted];
m12_31 -> m12_34  [key=2, style=dotted];
m12_32 -> m12_30  [key=0, style=bold, color=blue];
m12_41 -> m12_42  [key=0, style=solid];
m12_42 -> m12_43  [key=0, style=solid];
m12_42 -> m12_44  [key=2, style=dotted];
m12_43 -> m12_41  [key=0, style=bold, color=blue];
m12_53 -> m12_54  [key=0, style=solid];
m12_53 -> m12_28  [key=2, style=dotted];
m12_54 -> m12_52  [key=0, style=bold, color=blue];
m12_17 -> m12_18  [key=0, style=solid];
m12_18 -> m12_19  [key=0, style=solid];
m12_18 -> m12_21  [key=2, style=dotted];
m12_19 -> m12_20  [key=0, style=solid];
m12_19 -> m12_22  [key=2, style=dotted];
m12_20 -> m12_17  [key=0, style=bold, color=blue];
m12_55 -> m12_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_55 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_55 -> m12_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_55 -> m12_5  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_55 -> m12_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_55 -> m12_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_55 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_55 -> m12_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_55 -> m12_38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_55 -> m12_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_55 -> m12_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_55 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.ScheduledStateHandlerFacts"];
m12_56 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label=handler];
m12_57 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label=context];
m13_0 -> m13_1  [key=0, style=solid];
m13_0 -> m13_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.JobState"];
m13_0 -> m13_3  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.Dictionary<string, string>"];
m13_0 -> m13_4  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_1 -> m13_2  [key=0, style=solid];
m13_2 -> m13_3  [key=0, style=solid];
m13_3 -> m13_4  [key=0, style=solid];
m13_4 -> m13_5  [key=0, style=solid];
m13_5 -> m13_0  [key=0, style=bold, color=blue];
m13_18 -> m13_19  [key=0, style=solid];
m13_19 -> m13_20  [key=0, style=solid];
m13_19 -> m13_21  [key=2, style=dotted];
m13_19 -> m13_22  [key=2, style=dotted];
m13_20 -> m13_18  [key=0, style=bold, color=blue];
m13_13 -> m13_14  [key=0, style=solid];
m13_14 -> m13_15  [key=0, style=solid];
m13_14 -> m13_16  [key=2, style=dotted];
m13_14 -> m13_17  [key=2, style=dotted];
m13_15 -> m13_13  [key=0, style=bold, color=blue];
m13_6 -> m13_7  [key=0, style=solid];
m13_7 -> m13_8  [key=0, style=solid];
m13_7 -> m13_10  [key=2, style=dotted];
m13_7 -> m13_11  [key=2, style=dotted];
m13_8 -> m13_9  [key=0, style=solid];
m13_8 -> m13_12  [key=2, style=dotted];
m13_9 -> m13_6  [key=0, style=bold, color=blue];
m13_23 -> m13_24  [key=0, style=solid];
m13_23 -> m13_25  [key=1, style=dashed, color=darkseagreen4, label=object];
m13_23 -> m13_26  [key=1, style=dashed, color=darkseagreen4, label=object];
m13_23 -> m13_27  [key=1, style=dashed, color=darkseagreen4, label=object];
m13_24 -> m13_25  [key=0, style=solid];
m13_24 -> m13_37  [key=2, style=dotted];
m13_24 -> m13_34  [key=1, style=dashed, color=darkseagreen4, label=result];
m13_24 -> m13_35  [key=1, style=dashed, color=darkseagreen4, label=result];
m13_25 -> m13_26  [key=0, style=solid];
m13_25 -> m13_35  [key=0, style=solid];
m13_26 -> m13_27  [key=0, style=solid];
m13_26 -> m13_35  [key=0, style=solid];
m13_26 -> m13_38  [key=2, style=dotted];
m13_26 -> m13_33  [key=1, style=dashed, color=darkseagreen4, label=descriptor];
m13_26 -> m13_34  [key=1, style=dashed, color=darkseagreen4, label=descriptor];
m13_27 -> m13_28  [key=0, style=solid];
m13_27 -> m13_39  [key=2, style=dotted];
m13_27 -> m13_29  [key=1, style=dashed, color=darkseagreen4, label=propertyValue];
m13_27 -> m13_30  [key=1, style=dashed, color=darkseagreen4, label=propertyValue];
m13_27 -> m13_31  [key=1, style=dashed, color=darkseagreen4, label=propertyValue];
m13_34 -> m13_26  [key=0, style=solid];
m13_34 -> m13_17  [key=2, style=dotted];
m13_35 -> m13_36  [key=0, style=solid];
m13_33 -> m13_36  [key=0, style=solid];
m13_33 -> m13_43  [key=2, style=dotted];
m13_33 -> m13_44  [key=2, style=dotted];
m13_28 -> m13_29  [key=0, style=solid];
m13_28 -> m13_34  [key=1, style=dashed, color=darkseagreen4, label=value];
m13_29 -> m13_30  [key=0, style=solid];
m13_29 -> m13_34  [key=0, style=solid];
m13_30 -> m13_31  [key=0, style=solid];
m13_30 -> m13_40  [key=2, style=dotted];
m13_30 -> m13_41  [key=2, style=dotted];
m13_31 -> m13_32  [key=0, style=solid];
m13_31 -> m13_34  [key=0, style=solid];
m13_31 -> m13_42  [key=2, style=dotted];
m13_32 -> m13_33  [key=0, style=solid];
m13_36 -> m13_23  [key=0, style=bold, color=blue];
m13_45 -> m13_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m13_45 -> m13_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m13_45 -> m13_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m13_45 -> m13_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m13_45 -> m13_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m13_45 -> m13_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m13_45 -> m13_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
m13_45 -> m13_19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.ClientJobDescriptor"];
}
