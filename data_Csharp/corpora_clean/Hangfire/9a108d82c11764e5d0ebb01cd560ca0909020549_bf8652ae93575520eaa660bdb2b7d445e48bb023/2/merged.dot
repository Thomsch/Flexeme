digraph  {
m0_75 [label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="80-80", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="HangFirePageFactory.cs"];
m0_76 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns((string)null)", span="82-83", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="HangFirePageFactory.cs"];
m0_77 [label="var scheduler = CreateScheduler()", span="84-84", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="HangFirePageFactory.cs"];
m0_78 [label="scheduler.Execute(_token)", span="86-86", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="HangFirePageFactory.cs"];
m0_79 [label="_stateMachine.Verify(\r\n                x => x.TryToChangeState(It.IsAny<string>(), It.IsAny<State>(), It.IsAny<string[]>()),\r\n                Times.Never)", span="88-90", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="HangFirePageFactory.cs"];
m0_80 [label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="80-80", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="HangFirePageFactory.cs"];
m0_14 [label="Entry Mock<IStateMachineFactory>.cstr", span="", cluster="Mock<IStateMachineFactory>.cstr", file="HangFirePageFactory.cs"];
m0_57 [label="Entry HangFire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", span="47-47", cluster="HangFire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", file="HangFirePageFactory.cs"];
m0_42 [label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0", cluster="System.TimeSpan.FromMilliseconds(double)", file="HangFirePageFactory.cs"];
m0_37 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="HangFirePageFactory.cs"];
m0_66 [label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="67-67", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="HangFirePageFactory.cs"];
m0_67 [label="var scheduler = CreateScheduler()", span="69-69", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="HangFirePageFactory.cs"];
m0_68 [label="scheduler.Execute(_token)", span="71-71", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="HangFirePageFactory.cs"];
m0_69 [label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName }))", span="73-76", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="HangFirePageFactory.cs"];
m0_70 [label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="67-67", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="HangFirePageFactory.cs"];
m0_20 [label="Entry Unk.>", span="", cluster="Unk.>", file="HangFirePageFactory.cs"];
m0_41 [label="Entry SchedulePoller.cstr", span="", cluster="SchedulePoller.cstr", file="HangFirePageFactory.cs"];
m0_29 [label="Entry Unk.GetFirstByLowestScoreFromSet", span="", cluster="Unk.GetFirstByLowestScoreFromSet", file="HangFirePageFactory.cs"];
m0_25 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="HangFirePageFactory.cs"];
m0_50 [label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="56-56", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="HangFirePageFactory.cs"];
m0_51 [label="var scheduler = CreateScheduler()", span="58-58", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="HangFirePageFactory.cs"];
m0_52 [label="scheduler.Execute(_token)", span="60-60", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="HangFirePageFactory.cs"];
m0_53 [label="_storage.Verify(x => x.GetConnection())", span="62-62", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="HangFirePageFactory.cs"];
m0_54 [label="_connection.Verify(x => x.Dispose())", span="63-63", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="HangFirePageFactory.cs"];
m0_55 [label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="56-56", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="HangFirePageFactory.cs"];
m0_33 [label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="36-36", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="HangFirePageFactory.cs"];
m0_34 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, TimeSpan.FromMilliseconds(-1)))", span="38-40", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="HangFirePageFactory.cs"];
m0_35 [label="Assert.Equal(''storage'', exception.ParamName)", span="42-42", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="HangFirePageFactory.cs"];
m0_36 [label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="36-36", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="HangFirePageFactory.cs"];
m0_15 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="HangFirePageFactory.cs"];
m0_65 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="HangFirePageFactory.cs"];
m0_74 [label="Entry Unk.TryToChangeState", span="", cluster="Unk.TryToChangeState", file="HangFirePageFactory.cs"];
m0_0 [label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="HangFirePageFactory.cs"];
m0_1 [label="_storage = new Mock<JobStorage>()", span="21-21", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="HangFirePageFactory.cs"];
m0_2 [label="_connection = new Mock<IStorageConnection>()", span="22-22", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="HangFirePageFactory.cs"];
m0_3 [label="_stateMachine = new Mock<IStateMachine>()", span="23-23", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="HangFirePageFactory.cs"];
m0_4 [label="_token = new CancellationToken(true)", span="24-24", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="HangFirePageFactory.cs"];
m0_5 [label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="26-26", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="HangFirePageFactory.cs"];
m0_6 [label="_stateMachineFactory.Setup(x => x.Create(It.IsNotNull<IStorageConnection>()))\r\n                .Returns(_stateMachine.Object)", span="27-28", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="HangFirePageFactory.cs"];
m0_7 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="30-30", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="HangFirePageFactory.cs"];
m0_8 [label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns(JobId)", span="31-32", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="HangFirePageFactory.cs"];
m0_9 [label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="HangFirePageFactory.cs"];
m0_84 [label="Entry lambda expression", span="83-83", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_17 [label="Entry lambda expression", span="27-27", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_22 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_26 [label="Entry lambda expression", span="31-32", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_18 [label="x.Create(It.IsNotNull<IStorageConnection>())", span="27-27", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_19 [label="Exit lambda expression", span="27-27", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_23 [label="x.GetConnection()", span="30-30", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_24 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_27 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="31-32", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_28 [label="Exit lambda expression", span="31-32", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_30 [label="Entry lambda expression", span="32-32", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_31 [label="time > 0", span="32-32", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_32 [label="Exit lambda expression", span="32-32", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_38 [label="Entry lambda expression", span="39-40", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_39 [label="new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, TimeSpan.FromMilliseconds(-1))", span="39-40", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_40 [label="Exit lambda expression", span="39-40", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_47 [label="Entry lambda expression", span="49-50", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_48 [label="new SchedulePoller(\r\n                    _storage.Object, null, TimeSpan.FromMilliseconds(-1))", span="49-50", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_49 [label="Exit lambda expression", span="49-50", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_59 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_62 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_60 [label="x.GetConnection()", span="62-62", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_61 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_63 [label="x.Dispose()", span="63-63", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_64 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_71 [label="Entry lambda expression", span="73-76", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_72 [label="x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName })", span="73-76", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_73 [label="Exit lambda expression", span="73-76", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_81 [label="Entry lambda expression", span="82-83", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_87 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_82 [label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="82-83", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_83 [label="Exit lambda expression", span="82-83", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_85 [label="time > 0", span="83-83", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_86 [label="Exit lambda expression", span="83-83", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_88 [label="x.TryToChangeState(It.IsAny<string>(), It.IsAny<State>(), It.IsAny<string[]>())", span="89-89", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_89 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="HangFirePageFactory.cs"];
m0_13 [label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken(bool)", file="HangFirePageFactory.cs"];
m0_58 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="HangFirePageFactory.cs"];
m0_56 [label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="93-93", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="HangFirePageFactory.cs"];
m0_90 [label="return new SchedulePoller(_storage.Object, _stateMachineFactory.Object, TimeSpan.Zero);", span="95-95", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="HangFirePageFactory.cs"];
m0_91 [label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="93-93", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="HangFirePageFactory.cs"];
m0_12 [label="Entry Mock<IStateMachine>.cstr", span="", cluster="Mock<IStateMachine>.cstr", file="HangFirePageFactory.cs"];
m0_21 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="HangFirePageFactory.cs"];
m0_16 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="HangFirePageFactory.cs"];
m0_11 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="HangFirePageFactory.cs"];
m0_10 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="HangFirePageFactory.cs"];
m0_43 [label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="46-46", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="HangFirePageFactory.cs"];
m0_44 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    _storage.Object, null, TimeSpan.FromMilliseconds(-1)))", span="48-50", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="HangFirePageFactory.cs"];
m0_45 [label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="52-52", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="HangFirePageFactory.cs"];
m0_46 [label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="46-46", cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="HangFirePageFactory.cs"];
m0_92 [label="HangFire.Core.Tests.Server.SchedulePollerFacts", span="", file="HangFirePageFactory.cs"];
m2_21 [label="Entry HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)", span="151-151", cluster="HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)", file="IWriteOnlyTransaction.cs"];
m2_29 [label="Entry System.Threading.Thread.Join()", span="0-0", cluster="System.Threading.Thread.Join()", file="IWriteOnlyTransaction.cs"];
m2_22 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="IWriteOnlyTransaction.cs"];
m2_10 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="IWriteOnlyTransaction.cs"];
m2_8 [label="Entry HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="81-81", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="IWriteOnlyTransaction.cs"];
m2_28 [label="Entry System.Threading.EventWaitHandle.Set()", span="0-0", cluster="System.Threading.EventWaitHandle.Set()", file="IWriteOnlyTransaction.cs"];
m2_23 [label="Entry Unk.Fatal", span="", cluster="Unk.Fatal", file="IWriteOnlyTransaction.cs"];
m2_24 [label="Entry HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="70-70", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="IWriteOnlyTransaction.cs"];
m2_25 [label="_stopped.Set()", span="72-72", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="IWriteOnlyTransaction.cs"];
m2_26 [label="thread.Join()", span="73-73", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="IWriteOnlyTransaction.cs"];
m2_27 [label="Exit HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="70-70", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", file="IWriteOnlyTransaction.cs"];
m2_3 [label="Entry HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", span="31-31", cluster="HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", file="IWriteOnlyTransaction.cs"];
m2_4 [label="var connection = _storage.CreateAndOpenConnection()", span="33-33", cluster="HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", file="IWriteOnlyTransaction.cs"];
m2_5 [label=ProcessedTables, span="35-35", cluster="HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", file="IWriteOnlyTransaction.cs"];
m2_6 [label="connection.Execute(\r\n                        String.Format(@''delete from HangFire.[{0}] with (tablock) where ExpireAt < @now'', table),\r\n                        new { now = DateTime.UtcNow })", span="37-39", cluster="HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", file="IWriteOnlyTransaction.cs"];
m2_7 [label="Exit HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", span="31-31", cluster="HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", file="IWriteOnlyTransaction.cs"];
m2_0 [label="Entry HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="26-26", cluster="HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="IWriteOnlyTransaction.cs"];
m2_1 [label="_storage = storage", span="28-28", cluster="HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="IWriteOnlyTransaction.cs"];
m2_2 [label="Exit HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="26-26", cluster="HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", file="IWriteOnlyTransaction.cs"];
m2_11 [label="Entry HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", span="44-44", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs"];
m2_14 [label="JobServer.RetryOnException(\r\n                        RemoveExpiredRecords,\r\n                        _stopped)", span="52-54", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", color=green, community=0, file="IWriteOnlyTransaction.cs"];
m2_13 [label=true, span="50-50", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs"];
m2_15 [label="_stopped.WaitOne(CheckInterval)", span="56-56", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs"];
m2_12 [label="Logger.Info(''Expiration manager has been started.'')", span="48-48", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs"];
m2_16 [label="Logger.Info(''Expiration manager has been stopped.'')", span="62-62", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs"];
m2_17 [label=Exception, span="64-64", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs"];
m2_18 [label="Logger.Fatal(''Unexpected exception caught.'', ex)", span="66-66", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs"];
m2_19 [label="Exit HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", span="44-44", cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", file="IWriteOnlyTransaction.cs"];
m2_9 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="IWriteOnlyTransaction.cs"];
m2_20 [label="Entry Unk.Info", span="", cluster="Unk.Info", file="IWriteOnlyTransaction.cs"];
m2_30 [label="HangFire.SqlServer.Components.ExpirationManager", span="", file="IWriteOnlyTransaction.cs"];
m3_199 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CancelableJob(Hangfire.IJobCancellationToken)", span="289-289", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CancelableJob(Hangfire.IJobCancellationToken)", file="RecurringJob.cs"];
m3_236 [label="token.ThrowIfCancellationRequested()", span="291-291", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CancelableJob(Hangfire.IJobCancellationToken)", file="RecurringJob.cs"];
m3_237 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CancelableJob(Hangfire.IJobCancellationToken)", span="289-289", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CancelableJob(Hangfire.IJobCancellationToken)", file="RecurringJob.cs"];
m3_207 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", span="237-237", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="RecurringJob.cs"];
m3_208 [label="_context.BackgroundJob.Job = Job.FromExpression<JobFacts.Instance>(x => x.FunctionReturningValue())", span="239-239", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="RecurringJob.cs"];
m3_209 [label="var process = CreateProcess()", span="240-240", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="RecurringJob.cs"];
m3_210 [label="var result = process.Run(_context.Object)", span="242-242", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="RecurringJob.cs"];
m3_211 [label="Assert.Equal(''Return value'', result)", span="244-244", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="RecurringJob.cs"];
m3_212 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", span="237-237", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="RecurringJob.cs"];
m3_90 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="RecurringJob.cs"];
m3_229 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Dispose()", span="278-278", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Dispose()", file="RecurringJob.cs"];
m3_230 [label="_disposed = true", span="280-280", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Dispose()", file="RecurringJob.cs"];
m3_231 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Dispose()", span="278-278", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Dispose()", file="RecurringJob.cs"];
m3_77 [label="Entry System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", span="0-0", cluster="System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", file="RecurringJob.cs"];
m3_30 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.StaticMethod()", span="301-301", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.StaticMethod()", file="RecurringJob.cs"];
m3_242 [label="_methodInvoked = true", span="303-303", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.StaticMethod()", file="RecurringJob.cs"];
m3_243 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.StaticMethod()", span="301-301", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.StaticMethod()", file="RecurringJob.cs"];
m3_11 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RecurringJob.cs"];
m3_157 [label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, params object[])", span="120-120", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, params object[])", file="RecurringJob.cs"];
m3_172 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.BrokenDispose.Method()", span="267-267", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.BrokenDispose.Method()", file="RecurringJob.cs"];
m3_224 [label="_methodInvoked = true", span="269-269", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.BrokenDispose.Method()", file="RecurringJob.cs"];
m3_225 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.BrokenDispose.Method()", span="267-267", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.BrokenDispose.Method()", file="RecurringJob.cs"];
m3_15 [label="Entry Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", span="35-35", cluster="Hangfire.Server.CoreJobPerformanceProcess.CoreJobPerformanceProcess(Hangfire.JobActivator)", file="RecurringJob.cs"];
m3_31 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeInstanceMethods()", span="48-48", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeInstanceMethods()", file="RecurringJob.cs"];
m3_32 [label="_methodInvoked = false", span="50-50", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeInstanceMethods()", file="RecurringJob.cs"];
m3_33 [label="_context.BackgroundJob.Job = Job.FromExpression<CoreJobPerformanceProcessFacts>(x => x.InstanceMethod())", span="51-51", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeInstanceMethods()", file="RecurringJob.cs"];
m3_34 [label="var process = CreateProcess()", span="52-52", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeInstanceMethods()", file="RecurringJob.cs"];
m3_35 [label="process.Run(_context.Object)", span="54-54", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeInstanceMethods()", file="RecurringJob.cs"];
m3_36 [label="Assert.True(_methodInvoked)", span="56-56", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeInstanceMethods()", file="RecurringJob.cs"];
m3_37 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeInstanceMethods()", span="48-48", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeInstanceMethods()", file="RecurringJob.cs"];
m3_16 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeStaticMethods()", span="36-36", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeStaticMethods()", file="RecurringJob.cs"];
m3_17 [label="_methodInvoked = false", span="38-38", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeStaticMethods()", file="RecurringJob.cs"];
m3_18 [label="_context.BackgroundJob.Job = Job.FromExpression(() => StaticMethod())", span="39-39", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeStaticMethods()", file="RecurringJob.cs"];
m3_19 [label="var process = CreateProcess()", span="40-40", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeStaticMethods()", file="RecurringJob.cs"];
m3_20 [label="process.Run(_context.Object)", span="42-42", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeStaticMethods()", file="RecurringJob.cs"];
m3_21 [label="Assert.True(_methodInvoked)", span="44-44", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeStaticMethods()", file="RecurringJob.cs"];
m3_22 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeStaticMethods()", span="36-36", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_CanInvokeStaticMethods()", file="RecurringJob.cs"];
m3_78 [label="Entry System.Type.GetMethod(string)", span="0-0", cluster="System.Type.GetMethod(string)", file="RecurringJob.cs"];
m3_79 [label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="13-13", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="RecurringJob.cs"];
m3_162 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", span="198-198", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="RecurringJob.cs"];
m3_163 [label="_methodInvoked = false", span="200-200", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="RecurringJob.cs"];
m3_164 [label="_context.BackgroundJob.Job = Job.FromExpression<BrokenDispose>(x => x.Method())", span="201-201", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="RecurringJob.cs"];
m3_165 [label="var process = CreateProcess()", span="202-202", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="RecurringJob.cs"];
m3_166 [label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="204-205", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="RecurringJob.cs"];
m3_167 [label="Assert.True(_methodInvoked)", span="207-207", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="RecurringJob.cs"];
m3_168 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", span="198-198", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="RecurringJob.cs"];
m3_120 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="RecurringJob.cs"];
m3_176 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", span="211-211", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="RecurringJob.cs"];
m3_177 [label="_context.BackgroundJob.Job = Job.FromExpression(() => ExceptionMethod())", span="213-213", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="RecurringJob.cs"];
m3_178 [label="var process = CreateProcess()", span="214-214", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="RecurringJob.cs"];
m3_179 [label="var thrownException = Assert.Throws<JobPerformanceException>(\r\n                () => process.Run(_context.Object))", span="216-217", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="RecurringJob.cs"];
m3_180 [label="Assert.IsType<InvalidOperationException>(thrownException.InnerException)", span="219-219", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="RecurringJob.cs"];
m3_181 [label="Assert.Equal(''exception'', thrownException.InnerException.Message)", span="220-220", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="RecurringJob.cs"];
m3_182 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", span="211-211", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="RecurringJob.cs"];
m3_10 [label="Entry Unk.>", span="", cluster="Unk.>", file="RecurringJob.cs"];
m3_24 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CreateProcess()", span="319-319", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CreateProcess()", file="RecurringJob.cs"];
m3_251 [label="return new CoreJobPerformanceProcess(_activator.Object);", span="321-321", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CreateProcess()", file="RecurringJob.cs"];
m3_252 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CreateProcess()", span="319-319", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CreateProcess()", file="RecurringJob.cs"];
m3_64 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithArguments(string, int)", span="306-306", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithArguments(string, int)", file="RecurringJob.cs"];
m3_244 [label="_methodInvoked = true", span="308-308", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithArguments(string, int)", file="RecurringJob.cs"];
m3_245 [label="Assert.Equal(''hello'', stringArg)", span="310-310", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithArguments(string, int)", file="RecurringJob.cs"];
m3_246 [label="Assert.Equal(5, intArg)", span="311-311", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithArguments(string, int)", file="RecurringJob.cs"];
m3_247 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithArguments(string, int)", span="306-306", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithArguments(string, int)", file="RecurringJob.cs"];
m3_190 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", span="224-224", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="RecurringJob.cs"];
m3_191 [label="_context.BackgroundJob.Job = Job.FromExpression(() => CancelableJob(JobCancellationToken.Null))", span="227-227", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="RecurringJob.cs"];
m3_192 [label="_context.CancellationToken.Setup(x => x.ThrowIfCancellationRequested()).Throws<OperationCanceledException>()", span="228-228", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="RecurringJob.cs"];
m3_193 [label="var process = CreateProcess()", span="229-229", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="RecurringJob.cs"];
m3_194 [label="Assert.Throws<OperationCanceledException>(\r\n                () => process.Run(_context.Object))", span="232-233", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="RecurringJob.cs"];
m3_195 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", span="224-224", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="RecurringJob.cs"];
m3_203 [label="Entry Unk.ThrowIfCancellationRequested", span="", cluster="Unk.ThrowIfCancellationRequested", file="RecurringJob.cs"];
m3_221 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Disposable.Dispose()", span="259-259", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Disposable.Dispose()", file="RecurringJob.cs"];
m3_222 [label="_disposed = true", span="261-261", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Disposable.Dispose()", file="RecurringJob.cs"];
m3_223 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Disposable.Dispose()", span="259-259", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Disposable.Dispose()", file="RecurringJob.cs"];
m3_65 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", span="87-87", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="RecurringJob.cs"];
m3_66 [label="_methodInvoked = false", span="90-90", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="RecurringJob.cs"];
m3_67 [label="var typeConverter = TypeDescriptor.GetConverter(typeof(DateTime))", span="91-91", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="RecurringJob.cs"];
m3_68 [label="var convertedDate = typeConverter.ConvertToInvariantString(SomeDateTime)", span="92-92", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="RecurringJob.cs"];
m3_69 [label="var type = typeof(CoreJobPerformanceProcessFacts)", span="94-94", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="RecurringJob.cs"];
m3_71 [label="_context.BackgroundJob.Job = new Job(type, method, new[] { convertedDate })", span="97-97", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="RecurringJob.cs"];
m3_70 [label="var method = type.GetMethod(''MethodWithDateTimeArgument'')", span="95-95", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="RecurringJob.cs"];
m3_72 [label="var process = CreateProcess()", span="98-98", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="RecurringJob.cs"];
m3_73 [label="process.Run(_context.Object)", span="101-101", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="RecurringJob.cs"];
m3_74 [label="Assert.True(_methodInvoked)", span="104-104", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="RecurringJob.cs"];
m3_75 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", span="87-87", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingTypeConverter()", file="RecurringJob.cs"];
m3_91 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTimeArguments()", span="128-128", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTimeArguments()", file="RecurringJob.cs"];
m3_92 [label="_methodInvoked = false", span="131-131", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTimeArguments()", file="RecurringJob.cs"];
m3_93 [label="_context.BackgroundJob.Job = Job.FromExpression(() => MethodWithDateTimeArgument(SomeDateTime))", span="132-132", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTimeArguments()", file="RecurringJob.cs"];
m3_94 [label="var process = CreateProcess()", span="133-133", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTimeArguments()", file="RecurringJob.cs"];
m3_95 [label="process.Run(_context.Object)", span="136-136", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTimeArguments()", file="RecurringJob.cs"];
m3_96 [label="Assert.True(_methodInvoked)", span="139-139", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTimeArguments()", file="RecurringJob.cs"];
m3_97 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTimeArguments()", span="128-128", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTimeArguments()", file="RecurringJob.cs"];
m3_53 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Disposable.Method()", span="254-254", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Disposable.Method()", file="RecurringJob.cs"];
m3_219 [label="_methodInvoked = true", span="256-256", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Disposable.Method()", file="RecurringJob.cs"];
m3_220 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Disposable.Method()", span="254-254", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Disposable.Method()", file="RecurringJob.cs"];
m3_113 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", span="158-158", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="RecurringJob.cs"];
m3_114 [label="var exception = new InvalidOperationException()", span="161-161", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="RecurringJob.cs"];
m3_115 [label="_activator.Setup(x => x.ActivateJob(It.IsAny<Type>())).Throws(exception)", span="162-162", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="RecurringJob.cs"];
m3_116 [label="_context.BackgroundJob.Job = Job.FromExpression(() => InstanceMethod())", span="164-164", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="RecurringJob.cs"];
m3_117 [label="var process = CreateProcess()", span="165-165", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="RecurringJob.cs"];
m3_118 [label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="168-169", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="RecurringJob.cs"];
m3_119 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", span="158-158", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsException_WhenActivatorThrowsAnException()", file="RecurringJob.cs"];
m3_54 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesArguments_ToACallingMethod()", span="72-72", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesArguments_ToACallingMethod()", file="RecurringJob.cs"];
m3_55 [label="_methodInvoked = false", span="75-75", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesArguments_ToACallingMethod()", file="RecurringJob.cs"];
m3_56 [label="_context.BackgroundJob.Job = Job.FromExpression(() => MethodWithArguments(''hello'', 5))", span="76-76", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesArguments_ToACallingMethod()", file="RecurringJob.cs"];
m3_57 [label="var process = CreateProcess()", span="77-77", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesArguments_ToACallingMethod()", file="RecurringJob.cs"];
m3_58 [label="process.Run(_context.Object)", span="80-80", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesArguments_ToACallingMethod()", file="RecurringJob.cs"];
m3_59 [label="Assert.True(_methodInvoked)", span="83-83", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesArguments_ToACallingMethod()", file="RecurringJob.cs"];
m3_60 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesArguments_ToACallingMethod()", span="72-72", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesArguments_ToACallingMethod()", file="RecurringJob.cs"];
m3_250 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="RecurringJob.cs"];
m3_226 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.BrokenDispose.Dispose()", span="272-272", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.BrokenDispose.Dispose()", file="RecurringJob.cs"];
m3_227 [label="throw new InvalidOperationException();", span="274-274", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.BrokenDispose.Dispose()", file="RecurringJob.cs"];
m3_228 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.BrokenDispose.Dispose()", span="272-272", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.BrokenDispose.Dispose()", file="RecurringJob.cs"];
m3_76 [label="Entry System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", span="0-0", cluster="System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", file="RecurringJob.cs"];
m3_42 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.InstanceMethod()", span="247-247", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.InstanceMethod()", file="RecurringJob.cs"];
m3_217 [label="_methodInvoked = true", span="249-249", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.InstanceMethod()", file="RecurringJob.cs"];
m3_218 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.InstanceMethod()", span="247-247", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.InstanceMethod()", file="RecurringJob.cs"];
m3_112 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.NullArgumentMethod(string[])", span="283-283", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.NullArgumentMethod(string[])", file="RecurringJob.cs"];
m3_232 [label="_methodInvoked = true", span="285-285", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.NullArgumentMethod(string[])", file="RecurringJob.cs"];
m3_233 [label="Assert.Null(argument)", span="286-286", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.NullArgumentMethod(string[])", file="RecurringJob.cs"];
m3_234 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.NullArgumentMethod(string[])", span="283-283", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.NullArgumentMethod(string[])", file="RecurringJob.cs"];
m3_25 [label="Entry Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", span="41-41", cluster="Hangfire.Server.CoreJobPerformanceProcess.Run(Hangfire.Server.PerformContext)", file="RecurringJob.cs"];
m3_158 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="RecurringJob.cs"];
m3_186 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.ExceptionMethod()", span="314-314", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.ExceptionMethod()", file="RecurringJob.cs"];
m3_248 [label="throw new InvalidOperationException(''exception'');", span="316-316", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.ExceptionMethod()", file="RecurringJob.cs"];
m3_249 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.ExceptionMethod()", span="314-314", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.ExceptionMethod()", file="RecurringJob.cs"];
m3_43 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_DisposesDisposableInstance_AfterPerformance()", span="60-60", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="RecurringJob.cs"];
m3_44 [label="_disposed = false", span="62-62", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="RecurringJob.cs"];
m3_45 [label="_context.BackgroundJob.Job = Job.FromExpression<Disposable>(x => x.Method())", span="63-63", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="RecurringJob.cs"];
m3_46 [label="var process = CreateProcess()", span="64-64", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="RecurringJob.cs"];
m3_47 [label="process.Run(_context.Object)", span="66-66", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="RecurringJob.cs"];
m3_48 [label="Assert.True(_disposed)", span="68-68", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="RecurringJob.cs"];
m3_49 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_DisposesDisposableInstance_AfterPerformance()", span="60-60", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_DisposesDisposableInstance_AfterPerformance()", file="RecurringJob.cs"];
m3_121 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RecurringJob.cs"];
m3_122 [label="Entry Unk.Throws", span="", cluster="Unk.Throws", file="RecurringJob.cs"];
m3_235 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="RecurringJob.cs"];
m3_38 [label="Entry Hangfire.Common.Job.FromExpression<T>(System.Linq.Expressions.Expression<System.Action<T>>)", span="230-230", cluster="Hangfire.Common.Job.FromExpression<T>(System.Linq.Expressions.Expression<System.Action<T>>)", file="RecurringJob.cs"];
m3_133 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", span="173-173", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="RecurringJob.cs"];
m3_134 [label="_activator.Setup(x => x.ActivateJob(It.IsNotNull<Type>())).Returns(null)", span="175-175", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="RecurringJob.cs"];
m3_135 [label="_context.BackgroundJob.Job = Job.FromExpression(() => InstanceMethod())", span="176-176", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="RecurringJob.cs"];
m3_136 [label="var process = CreateProcess()", span="177-177", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="RecurringJob.cs"];
m3_137 [label="Assert.Throws<InvalidOperationException>(\r\n                () => process.Run(_context.Object))", span="179-180", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="RecurringJob.cs"];
m3_138 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", span="173-173", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="RecurringJob.cs"];
m3_102 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_WorksCorrectly_WithNullValues()", span="143-143", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_WorksCorrectly_WithNullValues()", file="RecurringJob.cs"];
m3_103 [label="_methodInvoked = false", span="146-146", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_WorksCorrectly_WithNullValues()", file="RecurringJob.cs"];
m3_104 [label="_context.BackgroundJob.Job = Job.FromExpression(() => NullArgumentMethod(null))", span="147-147", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_WorksCorrectly_WithNullValues()", file="RecurringJob.cs"];
m3_105 [label="var process = CreateProcess()", span="149-149", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_WorksCorrectly_WithNullValues()", file="RecurringJob.cs"];
m3_106 [label="process.Run(_context.Object)", span="151-151", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_WorksCorrectly_WithNullValues()", file="RecurringJob.cs"];
m3_107 [label="Assert.True(_methodInvoked)", span="154-154", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_WorksCorrectly_WithNullValues()", file="RecurringJob.cs"];
m3_108 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_WorksCorrectly_WithNullValues()", span="143-143", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_WorksCorrectly_WithNullValues()", file="RecurringJob.cs"];
m3_213 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="RecurringJob.cs"];
m3_12 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="RecurringJob.cs"];
m3_13 [label="new CoreJobPerformanceProcess(null)", span="30-30", cluster="lambda expression", file="RecurringJob.cs"];
m3_14 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="RecurringJob.cs"];
m3_27 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="RecurringJob.cs"];
m3_28 [label="StaticMethod()", span="39-39", cluster="lambda expression", file="RecurringJob.cs"];
m3_29 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="RecurringJob.cs"];
m3_39 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="RecurringJob.cs"];
m3_40 [label="x.InstanceMethod()", span="51-51", cluster="lambda expression", file="RecurringJob.cs"];
m3_41 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="RecurringJob.cs"];
m3_50 [label="Entry lambda expression", span="63-63", cluster="lambda expression", file="RecurringJob.cs"];
m3_51 [label="x.Method()", span="63-63", cluster="lambda expression", file="RecurringJob.cs"];
m3_52 [label="Exit lambda expression", span="63-63", cluster="lambda expression", file="RecurringJob.cs"];
m3_61 [label="Entry lambda expression", span="76-76", cluster="lambda expression", file="RecurringJob.cs"];
m3_62 [label="MethodWithArguments(''hello'', 5)", span="76-76", cluster="lambda expression", file="RecurringJob.cs"];
m3_63 [label="Exit lambda expression", span="76-76", cluster="lambda expression", file="RecurringJob.cs"];
m3_98 [label="Entry lambda expression", span="132-132", cluster="lambda expression", file="RecurringJob.cs"];
m3_99 [label="MethodWithDateTimeArgument(SomeDateTime)", span="132-132", cluster="lambda expression", file="RecurringJob.cs"];
m3_100 [label="Exit lambda expression", span="132-132", cluster="lambda expression", file="RecurringJob.cs"];
m3_109 [label="Entry lambda expression", span="147-147", cluster="lambda expression", file="RecurringJob.cs"];
m3_110 [label="NullArgumentMethod(null)", span="147-147", cluster="lambda expression", file="RecurringJob.cs"];
m3_111 [label="Exit lambda expression", span="147-147", cluster="lambda expression", file="RecurringJob.cs"];
m3_123 [label="Entry lambda expression", span="162-162", cluster="lambda expression", file="RecurringJob.cs"];
m3_127 [label="Entry lambda expression", span="164-164", cluster="lambda expression", file="RecurringJob.cs"];
m3_131 [label="process.Run(_context.Object)", span="169-169", cluster="lambda expression", file="RecurringJob.cs"];
m3_130 [label="Entry lambda expression", span="169-169", cluster="lambda expression", file="RecurringJob.cs"];
m3_124 [label="x.ActivateJob(It.IsAny<Type>())", span="162-162", cluster="lambda expression", file="RecurringJob.cs"];
m3_125 [label="Exit lambda expression", span="162-162", cluster="lambda expression", file="RecurringJob.cs"];
m3_128 [label="InstanceMethod()", span="164-164", cluster="lambda expression", file="RecurringJob.cs"];
m3_129 [label="Exit lambda expression", span="164-164", cluster="lambda expression", file="RecurringJob.cs"];
m3_132 [label="Exit lambda expression", span="169-169", cluster="lambda expression", file="RecurringJob.cs"];
m3_140 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="RecurringJob.cs"];
m3_143 [label="Entry lambda expression", span="176-176", cluster="lambda expression", file="RecurringJob.cs"];
m3_147 [label="process.Run(_context.Object)", span="180-180", cluster="lambda expression", file="RecurringJob.cs"];
m3_146 [label="Entry lambda expression", span="180-180", cluster="lambda expression", file="RecurringJob.cs"];
m3_141 [label="x.ActivateJob(It.IsNotNull<Type>())", span="175-175", cluster="lambda expression", file="RecurringJob.cs"];
m3_142 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="RecurringJob.cs"];
m3_144 [label="InstanceMethod()", span="176-176", cluster="lambda expression", file="RecurringJob.cs"];
m3_145 [label="Exit lambda expression", span="176-176", cluster="lambda expression", file="RecurringJob.cs"];
m3_148 [label="Exit lambda expression", span="180-180", cluster="lambda expression", file="RecurringJob.cs"];
m3_160 [label="process.Run(_context.Object)", span="192-192", cluster="lambda expression", file="RecurringJob.cs"];
m3_159 [label="Entry lambda expression", span="192-192", cluster="lambda expression", file="RecurringJob.cs"];
m3_161 [label="Exit lambda expression", span="192-192", cluster="lambda expression", file="RecurringJob.cs"];
m3_169 [label="Entry lambda expression", span="201-201", cluster="lambda expression", file="RecurringJob.cs"];
m3_174 [label="process.Run(_context.Object)", span="205-205", cluster="lambda expression", file="RecurringJob.cs"];
m3_173 [label="Entry lambda expression", span="205-205", cluster="lambda expression", file="RecurringJob.cs"];
m3_170 [label="x.Method()", span="201-201", cluster="lambda expression", file="RecurringJob.cs"];
m3_171 [label="Exit lambda expression", span="201-201", cluster="lambda expression", file="RecurringJob.cs"];
m3_175 [label="Exit lambda expression", span="205-205", cluster="lambda expression", file="RecurringJob.cs"];
m3_183 [label="Entry lambda expression", span="213-213", cluster="lambda expression", file="RecurringJob.cs"];
m3_188 [label="process.Run(_context.Object)", span="217-217", cluster="lambda expression", file="RecurringJob.cs"];
m3_187 [label="Entry lambda expression", span="217-217", cluster="lambda expression", file="RecurringJob.cs"];
m3_184 [label="ExceptionMethod()", span="213-213", cluster="lambda expression", file="RecurringJob.cs"];
m3_185 [label="Exit lambda expression", span="213-213", cluster="lambda expression", file="RecurringJob.cs"];
m3_189 [label="Exit lambda expression", span="217-217", cluster="lambda expression", file="RecurringJob.cs"];
m3_196 [label="Entry lambda expression", span="227-227", cluster="lambda expression", file="RecurringJob.cs"];
m3_200 [label="Entry lambda expression", span="228-228", cluster="lambda expression", file="RecurringJob.cs"];
m3_205 [label="process.Run(_context.Object)", span="233-233", cluster="lambda expression", file="RecurringJob.cs"];
m3_204 [label="Entry lambda expression", span="233-233", cluster="lambda expression", file="RecurringJob.cs"];
m3_197 [label="CancelableJob(JobCancellationToken.Null)", span="227-227", cluster="lambda expression", file="RecurringJob.cs"];
m3_198 [label="Exit lambda expression", span="227-227", cluster="lambda expression", file="RecurringJob.cs"];
m3_201 [label="x.ThrowIfCancellationRequested()", span="228-228", cluster="lambda expression", file="RecurringJob.cs"];
m3_202 [label="Exit lambda expression", span="228-228", cluster="lambda expression", file="RecurringJob.cs"];
m3_206 [label="Exit lambda expression", span="233-233", cluster="lambda expression", file="RecurringJob.cs"];
m3_214 [label="x.FunctionReturningValue()", span="239-239", cluster="lambda expression", file="RecurringJob.cs"];
m3_215 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="RecurringJob.cs"];
m3_216 [label="Entry Hangfire.Core.Tests.Common.JobFacts.Instance.FunctionReturningValue()", span="584-584", cluster="Hangfire.Core.Tests.Common.JobFacts.Instance.FunctionReturningValue()", file="RecurringJob.cs"];
m3_0 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CoreJobPerformanceProcessFacts()", span="19-19", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CoreJobPerformanceProcessFacts()", file="RecurringJob.cs"];
m3_1 [label="_activator = new Mock<JobActivator>() { CallBase = true }", span="21-21", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CoreJobPerformanceProcessFacts()", file="RecurringJob.cs"];
m3_2 [label="_context = new PerformContextMock()", span="22-22", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CoreJobPerformanceProcessFacts()", file="RecurringJob.cs"];
m3_3 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CoreJobPerformanceProcessFacts()", span="19-19", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.CoreJobPerformanceProcessFacts()", file="RecurringJob.cs"];
m3_126 [label="Entry Unk.ActivateJob", span="", cluster="Unk.ActivateJob", file="RecurringJob.cs"];
m3_4 [label="Entry Mock<JobActivator>.cstr", span="", cluster="Mock<JobActivator>.cstr", file="RecurringJob.cs"];
m3_238 [label="Entry Hangfire.IJobCancellationToken.ThrowIfCancellationRequested()", span="24-24", cluster="Hangfire.IJobCancellationToken.ThrowIfCancellationRequested()", file="RecurringJob.cs"];
m3_6 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", span="26-26", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", file="RecurringJob.cs"];
m3_7 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                // ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new CoreJobPerformanceProcess(null))", span="28-30", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", file="RecurringJob.cs"];
m3_8 [label="Assert.Equal(''activator'', exception.ParamName)", span="32-32", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", file="RecurringJob.cs"];
m3_9 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", span="26-26", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", file="RecurringJob.cs"];
m3_149 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", span="184-184", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="RecurringJob.cs"];
m3_150 [label="var type = typeof(JobFacts)", span="186-186", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="RecurringJob.cs"];
m3_151 [label="var method = type.GetMethod(''MethodWithDateTimeArgument'')", span="187-187", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="RecurringJob.cs"];
m3_152 [label="_context.BackgroundJob.Job = new Job(type, method, new object[] { ''sdfa'' })", span="188-188", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="RecurringJob.cs"];
m3_153 [label="var process = CreateProcess()", span="189-189", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="RecurringJob.cs"];
m3_154 [label="var exception = Assert.Throws<JobPerformanceException>(\r\n                () => process.Run(_context.Object))", span="191-192", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="RecurringJob.cs"];
m3_155 [label="Assert.NotNull(exception.InnerException)", span="194-194", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="RecurringJob.cs"];
m3_156 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", span="184-184", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="RecurringJob.cs"];
m3_26 [label="Entry Unk.True", span="", cluster="Unk.True", file="RecurringJob.cs"];
m3_80 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", span="108-108", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="RecurringJob.cs"];
m3_81 [label="_methodInvoked = false", span="111-111", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="RecurringJob.cs"];
m3_82 [label="var convertedDate = SomeDateTime.ToString(''MM/dd/yyyy HH:mm:ss.ffff'')", span="112-112", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="RecurringJob.cs"];
m3_83 [label="var type = typeof(CoreJobPerformanceProcessFacts)", span="114-114", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="RecurringJob.cs"];
m3_85 [label="_context.BackgroundJob.Job = new Job(type, method, new[] { convertedDate })", span="117-117", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="RecurringJob.cs"];
m3_84 [label="var method = type.GetMethod(''MethodWithDateTimeArgument'')", span="115-115", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="RecurringJob.cs"];
m3_86 [label="var process = CreateProcess()", span="118-118", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="RecurringJob.cs"];
m3_87 [label="process.Run(_context.Object)", span="121-121", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="RecurringJob.cs"];
m3_88 [label="Assert.True(_methodInvoked)", span="124-124", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="RecurringJob.cs"];
m3_89 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", span="108-108", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="RecurringJob.cs"];
m3_253 [label="Entry CoreJobPerformanceProcess.cstr", span="", cluster="CoreJobPerformanceProcess.cstr", file="RecurringJob.cs"];
m3_101 [label="Entry Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithDateTimeArgument(System.DateTime)", span="294-294", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithDateTimeArgument(System.DateTime)", file="RecurringJob.cs"];
m3_239 [label="_methodInvoked = true", span="296-296", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithDateTimeArgument(System.DateTime)", file="RecurringJob.cs"];
m3_240 [label="Assert.Equal(SomeDateTime, argument)", span="298-298", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithDateTimeArgument(System.DateTime)", file="RecurringJob.cs"];
m3_241 [label="Exit Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithDateTimeArgument(System.DateTime)", span="294-294", cluster="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts.MethodWithDateTimeArgument(System.DateTime)", file="RecurringJob.cs"];
m3_139 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="RecurringJob.cs"];
m3_5 [label="Entry Hangfire.Core.Tests.PerformContextMock.PerformContextMock()", span="12-12", cluster="Hangfire.Core.Tests.PerformContextMock.PerformContextMock()", file="RecurringJob.cs"];
m3_23 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="187-187", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="RecurringJob.cs"];
m3_254 [label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts", span="", file="RecurringJob.cs"];
m3_255 [label=process, span="", file="RecurringJob.cs"];
m3_256 [label=process, span="", file="RecurringJob.cs"];
m3_257 [label=process, span="", file="RecurringJob.cs"];
m3_258 [label=process, span="", file="RecurringJob.cs"];
m3_259 [label=process, span="", file="RecurringJob.cs"];
m3_260 [label=process, span="", file="RecurringJob.cs"];
m4_90 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="RecurringJobManager.cs"];
m4_372 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="45-45", cluster="Hangfire.Storage.InvocationData.Deserialize()", file="RecurringJobManager.cs"];
m4_113 [label="Entry long.Parse(string)", span="0-0", cluster="long.Parse(string)", file="RecurringJobManager.cs"];
m4_389 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="RecurringJobManager.cs"];
m4_91 [label="Entry Hangfire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.ServerDto.ServerDto()", file="RecurringJobManager.cs"];
m4_390 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="RecurringJobManager.cs"];
m4_28 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="RecurringJobManager.cs"];
m4_29 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, FailedState.StateName));", span="69-70", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="RecurringJobManager.cs"];
m4_30 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="67-67", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="RecurringJobManager.cs"];
m4_142 [label="Entry Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18", cluster="Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="RecurringJobManager.cs"];
m4_46 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", span="499-499", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_373 [label="string jobsSql = \r\n$@'';with cte as \r\n(\r\n  select j.Id, row_number() over (order by j.Id desc) as row_num\r\n  from [{_storage.SchemaName}].Job j with (nolock, forceseek)\r\n  where j.StateName = @stateName\r\n)\r\nselect j.*, s.Reason as StateReason, s.Data as StateData\r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\ninner join cte on cte.Id = j.Id \r\nleft join [{_storage.SchemaName}].State s with (nolock) on j.StateId = s.Id\r\nwhere cte.row_num between @start and @end\r\norder by j.Id desc''", span="506-518", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_374 [label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count },\r\n                        commandTimeout: _storage.CommandTimeout)\r\n                        .ToList()", span="520-524", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_375 [label="return DeserializeJobs(jobs, selector);", span="526-526", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_376 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", span="499-499", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_102 [label="Entry Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="RecurringJobManager.cs"];
m4_237 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="311-311", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="RecurringJobManager.cs"];
m4_238 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, DeletedState.StateName));", span="313-314", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="RecurringJobManager.cs"];
m4_239 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="311-311", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="RecurringJobManager.cs"];
m4_403 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="RecurringJobManager.cs"];
m4_250 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="RecurringJobManager.cs"];
m4_196 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="258-258", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="RecurringJobManager.cs"];
m4_197 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''failed''));", span="260-261", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="RecurringJobManager.cs"];
m4_198 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="258-258", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="RecurringJobManager.cs"];
m4_345 [label="Entry Unk.DeserializeJobs", span="", cluster="Unk.DeserializeJobs", file="RecurringJobManager.cs"];
m4_243 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="317-317", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManager.cs"];
m4_244 [label="string sql = String.Format(@''\r\nset transaction isolation level read committed;\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Enqueued';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Failed';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Processing';\r\nselect count(Id) from [{0}].Job with (nolock) where StateName = N'Scheduled';\r\nselect count(Id) from [{0}].Server with (nolock);\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter with (readpast) where [Key] = N'stats:succeeded'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter with (nolock) where [Key] = N'stats:succeeded'\r\n) as s;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter with (readpast) where [Key] = N'stats:deleted'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter with (nolock) where [Key] = N'stats:deleted'\r\n) as s;\r\n\r\nselect count(*) from [{0}].[Set] with (nolock) where [Key] = N'recurring-jobs';\r\n                '', _storage.SchemaName)", span="319-338", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManager.cs"];
m4_245 [label="var statistics = UseConnection(connection =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql, commandTimeout: _storage.CommandTimeout))\r\n                {\r\n                    stats.Enqueued = multi.ReadSingle<int>();\r\n                    stats.Failed = multi.ReadSingle<int>();\r\n                    stats.Processing = multi.ReadSingle<int>();\r\n                    stats.Scheduled = multi.ReadSingle<int>();\r\n\r\n                    stats.Servers = multi.ReadSingle<int>();\r\n\r\n                    stats.Succeeded = multi.ReadSingleOrDefault<long?>() ?? 0;\r\n                    stats.Deleted = multi.ReadSingleOrDefault<long?>() ?? 0;\r\n\r\n                    stats.Recurring = multi.ReadSingle<int>();\r\n                }\r\n                return stats;\r\n            })", span="340-358", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManager.cs"];
m4_246 [label="statistics.Queues = _storage.QueueProviders\r\n                .SelectMany(x => x.GetJobQueueMonitoringApi().GetQueues())\r\n                .Count()", span="360-362", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManager.cs"];
m4_247 [label="return statistics;", span="364-364", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManager.cs"];
m4_248 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="317-317", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManager.cs"];
m4_181 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="28-28", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="RecurringJobManager.cs"];
m4_176 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="243-243", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="RecurringJobManager.cs"];
m4_177 [label="var queueApi = GetQueueApi(queue)", span="245-245", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="RecurringJobManager.cs"];
m4_178 [label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="246-246", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="RecurringJobManager.cs"];
m4_179 [label="return UseConnection(connection => FetchedJobs(connection, fetchedJobIds.Select(x => (long)x).ToArray()));", span="249-249", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="RecurringJobManager.cs"];
m4_180 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="243-243", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="RecurringJobManager.cs"];
m4_338 [label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", span="179-179", cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", file="RecurringJobManager.cs"];
m4_355 [label="Entry Hangfire.SqlServer.Entities.SqlJob.SqlJob()", span="20-20", cluster="Hangfire.SqlServer.Entities.SqlJob.SqlJob()", file="RecurringJobManager.cs"];
m4_321 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="RecurringJobManager.cs"];
m4_6 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="RecurringJobManager.cs"];
m4_112 [label="Entry Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="RecurringJobManager.cs"];
m4_160 [label="Entry Unk.EnqueuedJobs", span="", cluster="Unk.EnqueuedJobs", file="RecurringJobManager.cs"];
m4_404 [label="Entry Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="RecurringJobManager.cs"];
m4_269 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", file="RecurringJobManager.cs"];
m4_169 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="25-25", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="RecurringJobManager.cs"];
m4_185 [label="Entry Unk.FetchedJobs", span="", cluster="Unk.FetchedJobs", file="RecurringJobManager.cs"];
m4_146 [label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", span="21-21", cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", file="RecurringJobManager.cs"];
m4_52 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="RecurringJobManager.cs"];
m4_124 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="202-202", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManager.cs"];
m4_125 [label="var tuples = _storage.QueueProviders\r\n                .Select(x => x.GetJobQueueMonitoringApi())\r\n                .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                .OrderBy(x => x.Queue)\r\n                .ToArray()", span="204-208", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManager.cs"];
m4_126 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="210-210", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManager.cs"];
m4_127 [label=tuples, span="213-213", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManager.cs"];
m4_131 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                {\r\n                    Name = tuple.Queue,\r\n                    Length = counters.EnqueuedCount ?? 0,\r\n                    Fetched = counters.FetchedCount,\r\n                    FirstJobs = firstJobs\r\n                })", span="222-228", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManager.cs"];
m4_132 [label="return result;", span="231-231", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManager.cs"];
m4_128 [label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="215-215", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManager.cs"];
m4_129 [label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="216-216", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManager.cs"];
m4_130 [label="var firstJobs = UseConnection(connection => \r\n                    EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray()))", span="219-220", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManager.cs"];
m4_133 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="202-202", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManager.cs"];
m4_137 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="RecurringJobManager.cs"];
m4_299 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="RecurringJobManager.cs"];
m4_371 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="RecurringJobManager.cs"];
m4_0 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="37-37", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="RecurringJobManager.cs"];
m4_1 [label="storage == null", span="39-39", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="RecurringJobManager.cs"];
m4_2 [label="throw new ArgumentNullException(nameof(storage));", span="39-39", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="RecurringJobManager.cs"];
m4_3 [label="_storage = storage", span="41-41", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="RecurringJobManager.cs"];
m4_4 [label="_jobListLimit = jobListLimit", span="42-42", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", color=red, community=0, file="RecurringJobManager.cs"];
m4_5 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="37-37", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="RecurringJobManager.cs"];
m4_114 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="187-187", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="RecurringJobManager.cs"];
m4_115 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }));", span="189-199", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="RecurringJobManager.cs"];
m4_116 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="187-187", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="RecurringJobManager.cs"];
m4_281 [label="Entry Unk.GetTimelineStats", span="", cluster="Unk.GetTimelineStats", file="RecurringJobManager.cs"];
m4_229 [label="Entry Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="RecurringJobManager.cs"];
m4_356 [label="Entry lambda expression", span="459-467", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_12 [label="Entry lambda expression", span="47-48", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_13 [label="GetNumberOfJobsByStateName(connection, ScheduledState.StateName)", span="48-48", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_14 [label="Exit lambda expression", span="47-48", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_31 [label="Entry lambda expression", span="69-70", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_32 [label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="70-70", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_33 [label="Exit lambda expression", span="69-70", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_37 [label="Entry lambda expression", span="75-76", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_38 [label="GetNumberOfJobsByStateName(connection, ProcessingState.StateName)", span="76-76", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_39 [label="Exit lambda expression", span="75-76", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_44 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                })", span="81-91", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_43 [label="Entry lambda expression", span="81-91", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_45 [label="Exit lambda expression", span="81-91", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_47 [label="Entry lambda expression", span="85-91", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_48 [label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }", span="85-91", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_49 [label="Exit lambda expression", span="85-91", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_58 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                })", span="96-106", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_57 [label="Entry lambda expression", span="96-106", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_59 [label="Exit lambda expression", span="96-106", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_60 [label="Entry lambda expression", span="100-106", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_61 [label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }", span="100-106", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_62 [label="Exit lambda expression", span="100-106", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_67 [label="Entry lambda expression", span="111-112", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_68 [label="GetTimelineStats(connection, ''succeeded'')", span="112-112", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_69 [label="Exit lambda expression", span="111-112", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_74 [label="Entry lambda expression", span="117-118", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_75 [label="GetTimelineStats(connection, ''failed'')", span="118-118", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_76 [label="Exit lambda expression", span="117-118", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_81 [label="Entry lambda expression", span="123-146", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_82 [label="var servers = connection.Query<Entities.Server>(\r\n                    $@''select * from [{_storage.SchemaName}].Server with (nolock)'', commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()", span="125-127", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_83 [label="var result = new List<ServerDto>()", span="129-129", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_84 [label=servers, span="132-132", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_86 [label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt ?? DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="135-142", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_87 [label="return result;", span="145-145", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_85 [label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="134-134", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_88 [label="Exit lambda expression", span="123-146", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_97 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", span="151-165", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_96 [label="Entry lambda expression", span="151-165", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_98 [label="Exit lambda expression", span="151-165", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_99 [label="Entry lambda expression", span="156-165", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_100 [label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", span="156-165", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_101 [label="Exit lambda expression", span="156-165", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_107 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="170-184", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_106 [label="Entry lambda expression", span="170-184", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_108 [label="Exit lambda expression", span="170-184", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_109 [label="Entry lambda expression", span="175-184", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_110 [label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", span="175-184", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_111 [label="Exit lambda expression", span="175-184", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_118 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                })", span="189-199", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_117 [label="Entry lambda expression", span="189-199", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_119 [label="Exit lambda expression", span="189-199", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_120 [label="Entry lambda expression", span="194-199", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_121 [label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="194-199", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_122 [label="Exit lambda expression", span="194-199", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_143 [label="Entry lambda expression", span="205-205", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_147 [label="Entry lambda expression", span="206-206", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_151 [label="Entry lambda expression", span="206-206", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_154 [label="Entry lambda expression", span="207-207", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_158 [label="EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray())", span="220-220", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_157 [label="Entry lambda expression", span="219-220", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_144 [label="x.GetJobQueueMonitoringApi()", span="205-205", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_145 [label="Exit lambda expression", span="205-205", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_148 [label="x.GetQueues()", span="206-206", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_149 [label="Exit lambda expression", span="206-206", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_152 [label="new { Monitoring = monitoring, Queue = queue }", span="206-206", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_153 [label="Exit lambda expression", span="206-206", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_155 [label="x.Queue", span="207-207", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_156 [label="Exit lambda expression", span="207-207", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_159 [label="Exit lambda expression", span="219-220", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_161 [label="Entry lambda expression", span="220-220", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_162 [label="(long)x", span="220-220", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_163 [label="Exit lambda expression", span="220-220", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_171 [label="EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray())", span="240-240", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_170 [label="Entry lambda expression", span="240-240", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_172 [label="Exit lambda expression", span="240-240", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_173 [label="Entry lambda expression", span="240-240", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_174 [label="(long)x", span="240-240", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_175 [label="Exit lambda expression", span="240-240", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_183 [label="FetchedJobs(connection, fetchedJobIds.Select(x => (long)x).ToArray())", span="249-249", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_182 [label="Entry lambda expression", span="249-249", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_184 [label="Exit lambda expression", span="249-249", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_186 [label="Entry lambda expression", span="249-249", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_187 [label="(long)x", span="249-249", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_188 [label="Exit lambda expression", span="249-249", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_192 [label="Entry lambda expression", span="254-255", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_193 [label="GetHourlyTimelineStats(connection, ''succeeded'')", span="255-255", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_194 [label="Exit lambda expression", span="254-255", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_199 [label="Entry lambda expression", span="260-261", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_200 [label="GetHourlyTimelineStats(connection, ''failed'')", span="261-261", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_201 [label="Exit lambda expression", span="260-261", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_207 [label="var multi = connection.QueryMultiple(sql, new { id = jobId }, commandTimeout: _storage.CommandTimeout)", span="273-273", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_205 [label="Entry lambda expression", span="266-302", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_206 [label="string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc''", span="268-271", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_208 [label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="275-275", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_211 [label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="278-278", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_212 [label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="279-291", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_209 [label="job == null", span="276-276", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_213 [label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="293-300", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_210 [label="return null;", span="276-276", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_220 [label="Entry lambda expression", span="278-278", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_223 [label="Entry lambda expression", span="278-278", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_226 [label="Entry lambda expression", span="282-290", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_214 [label="Exit lambda expression", span="266-302", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_221 [label="x.Name", span="278-278", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_222 [label="Exit lambda expression", span="278-278", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_224 [label="x.Value", span="278-278", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_225 [label="Exit lambda expression", span="278-278", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_227 [label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            }", span="282-290", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_228 [label="Exit lambda expression", span="282-290", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_234 [label="Entry lambda expression", span="307-308", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_235 [label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", span="308-308", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_236 [label="Exit lambda expression", span="307-308", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_240 [label="Entry lambda expression", span="313-314", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_241 [label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="314-314", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_242 [label="Exit lambda expression", span="313-314", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_254 [label="var multi = connection.QueryMultiple(sql, commandTimeout: _storage.CommandTimeout)", span="343-343", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_252 [label="Entry lambda expression", span="340-358", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_266 [label="Entry lambda expression", span="361-361", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_253 [label="var stats = new StatisticsDto()", span="342-342", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_255 [label="stats.Enqueued = multi.ReadSingle<int>()", span="345-345", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_256 [label="stats.Failed = multi.ReadSingle<int>()", span="346-346", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_257 [label="stats.Processing = multi.ReadSingle<int>()", span="347-347", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_258 [label="stats.Scheduled = multi.ReadSingle<int>()", span="348-348", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_259 [label="stats.Servers = multi.ReadSingle<int>()", span="350-350", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_260 [label="stats.Succeeded = multi.ReadSingleOrDefault<long?>() ?? 0", span="352-352", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_261 [label="stats.Deleted = multi.ReadSingleOrDefault<long?>() ?? 0", span="353-353", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_262 [label="stats.Recurring = multi.ReadSingle<int>()", span="355-355", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_263 [label="return stats;", span="357-357", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_264 [label="Exit lambda expression", span="340-358", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_267 [label="x.GetJobQueueMonitoringApi().GetQueues()", span="361-361", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_268 [label="Exit lambda expression", span="361-361", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_283 [label="$''stats:{type}:{x.ToString(''yyyy-MM-dd-HH'')}''", span="377-377", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_282 [label="Entry lambda expression", span="377-377", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_286 [label="Entry lambda expression", span="377-377", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_284 [label="Exit lambda expression", span="377-377", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_287 [label=x, span="377-377", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_288 [label="Exit lambda expression", span="377-377", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_301 [label="$''stats:{type}:{x.ToString(''yyyy-MM-dd'')}''", span="392-392", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_300 [label="Entry lambda expression", span="392-392", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_303 [label="Entry lambda expression", span="392-392", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_302 [label="Exit lambda expression", span="392-392", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_304 [label=x, span="392-392", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_305 [label="Exit lambda expression", span="392-392", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_325 [label="Entry lambda expression", span="409-409", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_328 [label="Entry lambda expression", span="409-409", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_326 [label="(string)x.Key", span="409-409", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_327 [label="Exit lambda expression", span="409-409", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_329 [label="(long)x.Count", span="409-409", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_330 [label="Exit lambda expression", span="409-409", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_346 [label="Entry lambda expression", span="451-451", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_349 [label="Entry lambda expression", span="451-451", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_353 [label="jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId }", span="454-454", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_352 [label="Entry lambda expression", span="454-454", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_347 [label="x.Id", span="451-451", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_348 [label="Exit lambda expression", span="451-451", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_350 [label=x, span="451-451", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_351 [label="Exit lambda expression", span="451-451", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_354 [label="Exit lambda expression", span="454-454", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_357 [label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="459-467", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_358 [label="Exit lambda expression", span="459-467", cluster="lambda expression", file="RecurringJobManager.cs"];
m4_92 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="RecurringJobManager.cs"];
m4_89 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="RecurringJobManager.cs"];
m4_324 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="RecurringJobManager.cs"];
m4_23 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="59-59", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="RecurringJobManager.cs"];
m4_24 [label="var queueApi = GetQueueApi(queue)", span="61-61", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="RecurringJobManager.cs"];
m4_25 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="62-62", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", color=red, community=0, file="RecurringJobManager.cs"];
m4_26 [label="return counters.FetchedCount ?? 0;", span="64-64", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="RecurringJobManager.cs"];
m4_27 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="59-59", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="RecurringJobManager.cs"];
m4_392 [label="Entry Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22", cluster="Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="RecurringJobManager.cs"];
m4_393 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", span="557-557", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="RecurringJobManager.cs"];
m4_394 [label="string fetchedJobsSql = \r\n$@''select j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\nleft join [{_storage.SchemaName}].State s with (nolock) on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="559-563", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="RecurringJobManager.cs"];
m4_395 [label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToList()", span="565-569", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="RecurringJobManager.cs"];
m4_396 [label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="571-571", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="RecurringJobManager.cs"];
m4_397 [label=jobs, span="574-574", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="RecurringJobManager.cs"];
m4_398 [label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                    }))", span="576-582", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="RecurringJobManager.cs"];
m4_399 [label="return new JobList<FetchedJobDto>(result);", span="585-585", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="RecurringJobManager.cs"];
m4_400 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", span="557-557", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="RecurringJobManager.cs"];
m4_63 [label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="RecurringJobManager.cs"];
m4_391 [label="Entry long.ToString()", span="0-0", cluster="long.ToString()", file="RecurringJobManager.cs"];
m4_285 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="RecurringJobManager.cs"];
m4_103 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="RecurringJobManager.cs"];
m4_104 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }));", span="170-184", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="RecurringJobManager.cs"];
m4_105 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="RecurringJobManager.cs"];
m4_141 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="RecurringJobManager.cs"];
m4_138 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="RecurringJobManager.cs"];
m4_22 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="30-30", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="RecurringJobManager.cs"];
m4_195 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", span="367-367", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_270 [label="var endDate = DateTime.UtcNow", span="369-369", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_277 [label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd-HH'')}'', x => x)", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_278 [label="return GetTimelineStats(connection, keyMaps);", span="379-379", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_271 [label="var dates = new List<DateTime>()", span="370-370", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_274 [label="dates.Add(endDate)", span="373-373", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_275 [label="endDate = endDate.AddHours(-1)", span="374-374", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_272 [label="var i = 0", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_273 [label="i < 24", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_276 [label="i++", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_279 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", span="367-367", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_123 [label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7", cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="RecurringJobManager.cs"];
m4_402 [label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span="", cluster="KeyValuePair<string, FetchedJobDto>.cstr", file="RecurringJobManager.cs"];
m4_202 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManager.cs"];
m4_203 [label="return UseConnection(connection =>\r\n            {\r\n                string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }, commandTimeout: _storage.CommandTimeout))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="266-302", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManager.cs"];
m4_204 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManager.cs"];
m4_320 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="RecurringJobManager.cs"];
m4_8 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="RecurringJobManager.cs"];
m4_9 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ScheduledState.StateName));", span="47-48", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="RecurringJobManager.cs"];
m4_10 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="RecurringJobManager.cs"];
m4_7 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="RecurringJobManager.cs"];
m4_230 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<TKey, TValue>.SafeDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="594-594", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<TKey, TValue>.SafeDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="RecurringJobManager.cs"];
m4_405 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<TKey, TValue>.SafeDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="594-594", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<TKey, TValue>.SafeDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="RecurringJobManager.cs"];
m4_322 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="RecurringJobManager.cs"];
m4_70 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_289 [label="var endDate = DateTime.UtcNow.Date", span="384-384", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_296 [label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd'')}'', x => x)", span="392-392", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_297 [label="return GetTimelineStats(connection, keyMaps);", span="394-394", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_290 [label="var dates = new List<DateTime>()", span="385-385", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_293 [label="dates.Add(endDate)", span="388-388", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_294 [label="endDate = endDate.AddDays(-1)", span="389-389", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_291 [label="var i = 0", span="386-386", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_292 [label="i < 7", span="386-386", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_295 [label="i++", span="386-386", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_298 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="RecurringJobManager.cs"];
m4_11 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="RecurringJobManager.cs"];
m4_336 [label="return _storage.UseConnection(action);", span="436-436", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="RecurringJobManager.cs"];
m4_337 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="RecurringJobManager.cs"];
m4_231 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="RecurringJobManager.cs"];
m4_232 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="307-308", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="RecurringJobManager.cs"];
m4_233 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="RecurringJobManager.cs"];
m4_359 [label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="RecurringJobManager.cs"];
m4_51 [label="Entry string.Equals(string, System.StringComparison)", span="0-0", cluster="string.Equals(string, System.StringComparison)", file="RecurringJobManager.cs"];
m4_401 [label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span="", cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", file="RecurringJobManager.cs"];
m4_280 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="RecurringJobManager.cs"];
m4_93 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="RecurringJobManager.cs"];
m4_94 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="151-165", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="RecurringJobManager.cs"];
m4_95 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="RecurringJobManager.cs"];
m4_364 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="RecurringJobManager.cs"];
m4_365 [label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="486-486", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="RecurringJobManager.cs"];
m4_366 [label="data.Arguments = arguments", span="487-487", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="RecurringJobManager.cs"];
m4_367 [label="return data.Deserialize();", span="491-491", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="RecurringJobManager.cs"];
m4_368 [label=JobLoadException, span="493-493", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="RecurringJobManager.cs"];
m4_369 [label="return null;", span="495-495", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="RecurringJobManager.cs"];
m4_370 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="RecurringJobManager.cs"];
m4_77 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="121-121", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="RecurringJobManager.cs"];
m4_78 [label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    $@''select * from [{_storage.SchemaName}].Server with (nolock)'', commandTimeout: _storage.CommandTimeout)\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                // ReSharper disable once LoopCanBeConvertedToQuery\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt ?? DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="123-146", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="RecurringJobManager.cs"];
m4_79 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="121-121", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", file="RecurringJobManager.cs"];
m4_215 [label="Entry Unk.QueryMultiple", span="", cluster="Unk.QueryMultiple", file="RecurringJobManager.cs"];
m4_21 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="RecurringJobManager.cs"];
m4_331 [label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="428-428", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="RecurringJobManager.cs"];
m4_332 [label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="429-429", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="RecurringJobManager.cs"];
m4_333 [label="return monitoringApi;", span="431-431", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="RecurringJobManager.cs"];
m4_334 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="RecurringJobManager.cs"];
m4_40 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="RecurringJobManager.cs"];
m4_41 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }));", span="81-91", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="RecurringJobManager.cs"];
m4_42 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="RecurringJobManager.cs"];
m4_54 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="RecurringJobManager.cs"];
m4_55 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }));", span="96-106", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="RecurringJobManager.cs"];
m4_56 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="RecurringJobManager.cs"];
m4_218 [label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22", cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="RecurringJobManager.cs"];
m4_71 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="RecurringJobManager.cs"];
m4_72 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="117-118", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="RecurringJobManager.cs"];
m4_73 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="RecurringJobManager.cs"];
m4_189 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="RecurringJobManager.cs"];
m4_190 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="254-255", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="RecurringJobManager.cs"];
m4_191 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="RecurringJobManager.cs"];
m4_15 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="RecurringJobManager.cs"];
m4_360 [label="var sqlQuery = _jobListLimit.HasValue\r\n                ? $@''select count(j.Id) from (select top (@limit) Id from [{_storage.SchemaName}].Job with (nolock) where StateName = @state) as j''\r\n                : $@''select count(Id) from [{_storage.SchemaName}].Job with (nolock) where StateName = @state''", span="472-474", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="RecurringJobManager.cs"];
m4_361 [label="var count = connection.ExecuteScalar<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName, limit = _jobListLimit },\r\n                 commandTimeout: _storage.CommandTimeout)", span="476-479", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="RecurringJobManager.cs"];
m4_362 [label="return count;", span="481-481", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="RecurringJobManager.cs"];
m4_363 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="RecurringJobManager.cs"];
m4_335 [label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="RecurringJobManager.cs"];
m4_135 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany", file="RecurringJobManager.cs"];
m4_217 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="RecurringJobManager.cs"];
m4_377 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", span="529-529", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_378 [label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="533-533", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_379 [label=jobs, span="536-536", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_384 [label="dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="547-547", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_385 [label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="550-551", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_386 [label="return new JobList<TDto>(result);", span="554-554", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_380 [label="var dto = default(TDto)", span="538-538", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_381 [label="job.InvocationData != null", span="540-540", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_382 [label="var deserializedData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="542-542", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_383 [label="var stateData = deserializedData != null\r\n                        ? new SafeDictionary<string, string>(deserializedData, StringComparer.OrdinalIgnoreCase)\r\n                        : null", span="543-545", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_387 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", span="529-529", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>)", file="RecurringJobManager.cs"];
m4_249 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RecurringJobManager.cs"];
m4_80 [label="Entry Unk.>", span="", cluster="Unk.>", file="RecurringJobManager.cs"];
m4_139 [label="Entry Unk.GetEnqueuedJobIds", span="", cluster="Unk.GetEnqueuedJobIds", file="RecurringJobManager.cs"];
m4_53 [label="Entry Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", span="84-84", cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", file="RecurringJobManager.cs"];
m4_136 [label="Entry Unk.OrderBy", span="", cluster="Unk.OrderBy", file="RecurringJobManager.cs"];
m4_140 [label="Entry Unk.GetEnqueuedAndFetchedCount", span="", cluster="Unk.GetEnqueuedAndFetchedCount", file="RecurringJobManager.cs"];
m4_16 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="RecurringJobManager.cs"];
m4_17 [label="var queueApi = GetQueueApi(queue)", span="53-53", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="RecurringJobManager.cs"];
m4_18 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="54-54", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="RecurringJobManager.cs"];
m4_19 [label="return counters.EnqueuedCount ?? 0;", span="56-56", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="RecurringJobManager.cs"];
m4_20 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="RecurringJobManager.cs"];
m4_339 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="RecurringJobManager.cs"];
m4_340 [label="string enqueuedJobsSql = \r\n$@''select j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\nleft join [{_storage.SchemaName}].State s with (nolock) on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="441-445", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="RecurringJobManager.cs"];
m4_341 [label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => x.Id, x => x)", span="447-451", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="RecurringJobManager.cs"];
m4_342 [label="var sortedSqlJobs = jobIds\r\n                .Select(jobId => jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId })\r\n                .ToList()", span="453-455", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="RecurringJobManager.cs"];
m4_343 [label="return DeserializeJobs(\r\n                sortedSqlJobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="457-467", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="RecurringJobManager.cs"];
m4_344 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="RecurringJobManager.cs"];
m4_150 [label="Entry Unk.GetQueues", span="", cluster="Unk.GetQueues", file="RecurringJobManager.cs"];
m4_306 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_307 [label="string sqlQuery =\r\n$@''select [Key], [Value] as [Count] from [{_storage.SchemaName}].AggregatedCounter with (nolock)\r\nwhere [Key] in @keys''", span="401-403", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_308 [label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="405-409", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_309 [label="keyMaps.Keys", span="411-411", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_314 [label="i < keyMaps.Count", span="417-417", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_315 [label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="419-419", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_316 [label="result.Add(keyMaps.ElementAt(i).Value, value)", span="420-420", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_310 [label="!valuesMap.ContainsKey(key)", span="413-413", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_311 [label="valuesMap.Add(key, 0)", span="413-413", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_312 [label="var result = new Dictionary<DateTime, long>()", span="416-416", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_313 [label="var i = 0", span="417-417", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_318 [label="return result;", span="423-423", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_317 [label="i++", span="417-417", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_319 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="RecurringJobManager.cs"];
m4_64 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="RecurringJobManager.cs"];
m4_65 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="111-112", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="RecurringJobManager.cs"];
m4_66 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="RecurringJobManager.cs"];
m4_323 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobManager.cs"];
m4_265 [label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18", cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="RecurringJobManager.cs"];
m4_50 [label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="RecurringJobManager.cs"];
m4_251 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="RecurringJobManager.cs"];
m4_134 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="RecurringJobManager.cs"];
m4_388 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="RecurringJobManager.cs"];
m4_164 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="RecurringJobManager.cs"];
m4_165 [label="var queueApi = GetQueueApi(queue)", span="236-236", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="RecurringJobManager.cs"];
m4_166 [label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="237-237", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="RecurringJobManager.cs"];
m4_167 [label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray()));", span="240-240", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="RecurringJobManager.cs"];
m4_168 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="RecurringJobManager.cs"];
m4_216 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="RecurringJobManager.cs"];
m4_34 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="RecurringJobManager.cs"];
m4_35 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="75-76", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="RecurringJobManager.cs"];
m4_36 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="RecurringJobManager.cs"];
m4_219 [label="Entry Unk.DeserializeJob", span="", cluster="Unk.DeserializeJob", file="RecurringJobManager.cs"];
m4_406 [label="Hangfire.SqlServer.SqlServerMonitoringApi", span="", file="RecurringJobManager.cs"];
m4_407 [label=int, span="", file="RecurringJobManager.cs"];
m4_408 [label=int, span="", file="RecurringJobManager.cs"];
m4_409 [label=int, span="", file="RecurringJobManager.cs"];
m4_410 [label=int, span="", file="RecurringJobManager.cs"];
m4_411 [label=int, span="", file="RecurringJobManager.cs"];
m4_412 [label=int, span="", file="RecurringJobManager.cs"];
m4_413 [label=int, span="", file="RecurringJobManager.cs"];
m4_414 [label=int, span="", file="RecurringJobManager.cs"];
m4_415 [label=int, span="", file="RecurringJobManager.cs"];
m4_416 [label=int, span="", file="RecurringJobManager.cs"];
m4_417 [label=enqueuedJobIds, span="", file="RecurringJobManager.cs"];
m4_418 [label=enqueuedJobIds, span="", file="RecurringJobManager.cs"];
m4_419 [label=fetchedJobIds, span="", file="RecurringJobManager.cs"];
m4_420 [label=string, span="", file="RecurringJobManager.cs"];
m4_421 [label=sql, span="", file="RecurringJobManager.cs"];
m4_422 [label=string, span="", file="RecurringJobManager.cs"];
m4_423 [label=string, span="", file="RecurringJobManager.cs"];
m4_424 [label=jobs, span="", file="RecurringJobManager.cs"];
m5_94 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_71 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RecurringJobManagerFacts.cs"];
m5_141 [label="Entry HangFire.Storage.Monitoring.DequeuedJobDto.DequeuedJobDto()", span="5-5", cluster="HangFire.Storage.Monitoring.DequeuedJobDto.DequeuedJobDto()", file="RecurringJobManagerFacts.cs"];
m5_50 [label="Entry HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", span="53-53", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", file="RecurringJobManagerFacts.cs"];
m5_51 [label="var manager = CreateManager()", span="55-55", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", color=green, community=0, file="RecurringJobManagerFacts.cs"];
m5_52 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => manager.AddOrUpdate(_id, null, Cron.Daily()))", span="57-58", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", color=green, community=0, file="RecurringJobManagerFacts.cs"];
m5_55 [label="Entry lambda expression", span="58-58", cluster="lambda expression", color=green, community=0, file="RecurringJobManagerFacts.cs"];
m5_56 [label="manager.AddOrUpdate(_id, null, Cron.Daily())", span="58-58", cluster="lambda expression", color=green, community=0, file="RecurringJobManagerFacts.cs"];
m5_53 [label="Assert.Equal(''job'', exception.ParamName)", span="60-60", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", color=green, community=0, file="RecurringJobManagerFacts.cs"];
m5_54 [label="Exit HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", span="53-53", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenJobIsNull()", color=green, community=0, file="RecurringJobManagerFacts.cs"];
m5_57 [label="Exit lambda expression", span="58-58", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_62 [label="Exit HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", span="64-64", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="RecurringJobManagerFacts.cs"];
m5_43 [label="Exit HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", span="42-42", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs"];
m5_177 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="351-351", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_180 [label="var multi = _connection.QueryMultiple(sql)", span="362-362", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_179 [label="string sql = @''\r\nselect [State], count(id) as [Count] From HangFire.Job group by [State]\r\nselect count(Id) from HangFire.Server\r\nselect count(distinct Queue) from HangFire.JobQueue\r\nselect IntValue from HangFire.Value where [Key] = 'stats:succeeded'\r\n''", span="355-360", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_181 [label="var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count)", span="364-364", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_187 [label="stats.Servers = multi.Read<int>().Single()", span="373-373", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_188 [label="stats.Queues = multi.Read<int>().Single()", span="374-374", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_189 [label="stats.Succeeded = multi.Read<int>().SingleOrDefault()", span="376-376", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_178 [label="var stats = new StatisticsDto()", span="353-353", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_182 [label="Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0", span="366-366", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_186 [label="stats.Scheduled = getCountIfExists(ScheduledState.Name)", span="371-371", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_190 [label="return stats;", span="379-379", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_183 [label="stats.Enqueued = getCountIfExists(EnqueuedState.Name)", span="368-368", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_184 [label="stats.Failed = getCountIfExists(FailedState.Name)", span="369-369", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_185 [label="stats.Processing = getCountIfExists(ProcessingState.Name)", span="370-370", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_191 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="351-351", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="RecurringJobManagerFacts.cs"];
m5_42 [label="Assert.Equal(''id'', exception.ParamName)", span="49-49", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs", color=red, community=0];
m5_83 [label="Exit lambda expression", span="91-94", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_84 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="RecurringJobManagerFacts.cs"];
m5_85 [label="Entry lambda expression", span="93-94", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_103 [label=manager, span="", cluster="HangFire.Common.JobHelper.FromNullableStringTimestamp(string)", file="RecurringJobManagerFacts.cs"];
m5_7 [label="_transaction = new Mock<IWriteOnlyTransaction>()", span="28-28", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="RecurringJobManagerFacts.cs"];
m5_146 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", span="382-382", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_213 [label="var valuesMap = _connection.Query(\r\n                @''select [Key], IntValue from HangFire.Value where [Key] in @keys'',\r\n                new { keys = keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.IntValue)", span="393-396", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_209 [label="dates.Add(endDate)", span="388-388", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_212 [label="var keys = dates.Select(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="392-392", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_214 [label=keys, span="398-398", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_215 [label="!valuesMap.ContainsKey(key)", span="400-400", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_216 [label="valuesMap.Add(key, 0)", span="400-400", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_220 [label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="406-406", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_205 [label="var endDate = DateTime.UtcNow", span="384-384", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_206 [label="var dates = new List<DateTime>()", span="385-385", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_208 [label="i < 24", span="386-386", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_210 [label="endDate = endDate.AddHours(-1)", span="389-389", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_217 [label="var result = new Dictionary<DateTime, long>()", span="403-403", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_219 [label="i < dates.Count", span="404-404", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_218 [label="var i = 0", span="404-404", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_221 [label="result.Add(dates[i], value)", span="407-407", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_207 [label="var i = 0", span="386-386", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_211 [label="i++", span="386-386", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_223 [label="return result;", span="410-410", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_222 [label="i++", span="404-404", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_224 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", span="382-382", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_140 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="RecurringJobManagerFacts.cs"];
m5_150 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="315-315", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManagerFacts.cs"];
m5_152 [label="var multi = _connection.QueryMultiple(sql, new { id = jobId })", span="322-322", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManagerFacts.cs"];
m5_158 [label="return new JobDetailsDto\r\n                {\r\n                    Arguments = JobHelper.FromJson<string[]>(job.Arguments),\r\n                    CreatedAt = job.CreatedAt,\r\n                    State = job.State,\r\n                    Method = DeserializeJobMethod(job.InvocationData),\r\n                    History = history,\r\n                    Properties = parameters\r\n                };", span="334-342", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManagerFacts.cs"];
m5_151 [label="string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.JobHistory where JobId = @id order by CreatedAt desc''", span="317-320", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManagerFacts.cs"];
m5_153 [label="var job = multi.Read<Job>().SingleOrDefault()", span="324-324", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManagerFacts.cs"];
m5_156 [label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="327-327", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManagerFacts.cs"];
m5_157 [label="var history =\r\n                    multi.Read<JobHistory>()\r\n                        .ToList()\r\n                        .Select(x => JobHelper.FromJson<Dictionary<string, string>>(x.Data))\r\n                        .ToList()", span="328-332", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManagerFacts.cs"];
m5_154 [label="job == null", span="325-325", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManagerFacts.cs"];
m5_155 [label="return null;", span="325-325", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManagerFacts.cs"];
m5_159 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="315-315", cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="RecurringJobManagerFacts.cs"];
m5_49 [label="Entry HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", span="40-40", cluster="HangFire.RecurringJobManager.AddOrUpdate(string, HangFire.Common.Job, string)", file="RecurringJobManagerFacts.cs"];
m5_32 [label="Exit HangFire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="33-33", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobManagerFacts.cs"];
m5_33 [label="Entry Unk.>", span="", cluster="Unk.>", file="RecurringJobManagerFacts.cs"];
m5_34 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RecurringJobManagerFacts.cs"];
m5_143 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="305-305", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="RecurringJobManagerFacts.cs"];
m5_144 [label="return GetHourlyTimelineStats(''succeeded'');", span="307-307", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="RecurringJobManagerFacts.cs"];
m5_145 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="305-305", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="RecurringJobManagerFacts.cs"];
m5_193 [label="Entry Unk.Read", span="", cluster="Unk.Read", file="RecurringJobManagerFacts.cs"];
m5_88 [label="var result = new List<ServerDto>()", span="170-170", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="RecurringJobManagerFacts.cs"];
m5_104 [label=manager, span="", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="RecurringJobManagerFacts.cs"];
m5_105 [label=manager, span="", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="RecurringJobManagerFacts.cs"];
m5_106 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="204-204", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="RecurringJobManagerFacts.cs"];
m5_96 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_97 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="RecurringJobManagerFacts.cs"];
m5_98 [label="return new RecurringJobManager(_storage.Object);", span="109-109", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.CreateManager()", file="RecurringJobManagerFacts.cs"];
m5_12 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", span="30-30", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", file="RecurringJobManagerFacts.cs"];
m5_204 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="RecurringJobManagerFacts.cs"];
m5_100 [label="new FailedJobDto\r\n                {\r\n                    Method = method,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.FromNullableStringTimestamp(stateData[''FailedAt''])\r\n                }", span="194-201", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_79 [label="_transaction.Verify(x => x.SetRangeInHash(\r\n                _id,\r\n                It.Is<Dictionary<string, string>>(rj => \r\n                    rj[''Cron''] == ''* * * * *'' && !String.IsNullOrEmpty(rj[''Job'']))))", span="91-94", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="RecurringJobManagerFacts.cs", color=red, community=0];
m5_80 [label="Exit HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", span="85-85", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="RecurringJobManagerFacts.cs"];
m5_81 [label="Entry lambda expression", span="91-94", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_16 [label="return GetNumberOfJobsByStateName(ScheduledState.Name);", span="39-39", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="RecurringJobManagerFacts.cs"];
m5_59 [label="var manager = CreateManager()", span="66-66", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="RecurringJobManagerFacts.cs"];
m5_60 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => manager.AddOrUpdate(_id, _job, null))", span="68-69", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="RecurringJobManagerFacts.cs"];
m5_66 [label="Entry HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", span="75-75", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="RecurringJobManagerFacts.cs"];
m5_67 [label="var manager = CreateManager()", span="77-77", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="RecurringJobManagerFacts.cs"];
m5_69 [label="_transaction.Verify(x => x.AddToSet(''recurring-jobs'', _id))", span="81-81", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="RecurringJobManagerFacts.cs"];
m5_68 [label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="79-79", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="RecurringJobManagerFacts.cs"];
m5_70 [label="Exit HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", span="75-75", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_AddsAJob_ToTheRecurringJobsSet()", file="RecurringJobManagerFacts.cs"];
m5_138 [label="Entry List<KeyValuePair<string, DequeuedJobDto>>.cstr", span="", cluster="List<KeyValuePair<string, DequeuedJobDto>>.cstr", file="RecurringJobManagerFacts.cs"];
m5_192 [label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="2-2", cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="RecurringJobManagerFacts.cs"];
m5_194 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="RecurringJobManagerFacts.cs"];
m5_63 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_27 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_28 [label="Entry Unk.CreateWriteTransaction", span="", cluster="Unk.CreateWriteTransaction", file="RecurringJobManagerFacts.cs"];
m5_29 [label="Entry HangFire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="33-33", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobManagerFacts.cs"];
m5_95 [label="x.Commit()", span="104-104", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_142 [label="Entry Unk.DeserializeJobMethod", span="", cluster="Unk.DeserializeJobMethod", file="RecurringJobManagerFacts.cs"];
m5_5 [label="_connection = new Mock<IStorageConnection>()", span="25-25", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.RecurringJobManagerFacts()", file="RecurringJobManagerFacts.cs"];
m5_261 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="RecurringJobManagerFacts.cs"];
m5_14 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RecurringJobManagerFacts.cs"];
m5_164 [label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="6-6", cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="RecurringJobManagerFacts.cs"];
m5_24 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="RecurringJobManagerFacts.cs"];
m5_25 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_26 [label="x.CreateWriteTransaction()", span="29-29", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_201 [label="Entry lambda expression", span="366-366", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_17 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="37-37", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="RecurringJobManagerFacts.cs"];
m5_21 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="42-42", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="RecurringJobManagerFacts.cs"];
m5_18 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", span="65-65", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="RecurringJobManagerFacts.cs"];
m5_19 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="42-42", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="RecurringJobManagerFacts.cs"];
m5_22 [label="Entry Unk.>", span="", cluster="Unk.>", file="RecurringJobManagerFacts.cs"];
m5_23 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="RecurringJobManagerFacts.cs"];
m5_35 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="78-78", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="RecurringJobManagerFacts.cs"];
m5_36 [label="return GetJobs(\r\n                from, count,\r\n                ProcessingState.Name,\r\n                (method, stateData) => new ProcessingJobDto\r\n                {\r\n                    Method = method,\r\n                    ServerName = stateData[''ServerName''],\r\n                    StartedAt = JobHelper.FromStringTimestamp(stateData[''StartedAt'']),\r\n                });", span="80-88", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="RecurringJobManagerFacts.cs"];
m5_37 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="78-78", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="RecurringJobManagerFacts.cs"];
m5_46 [label="return DeserializeJobs(jobs, selector);", span="107-107", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="RecurringJobManagerFacts.cs", color=green, community=0];
m5_45 [label="var jobs = _connection.Query<Job>(\r\n                jobsSql,\r\n                new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                .ToList()", span="102-105", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="RecurringJobManagerFacts.cs"];
m5_47 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="91-91", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="RecurringJobManagerFacts.cs"];
m5_64 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="RecurringJobManagerFacts.cs"];
m5_65 [label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="7-7", cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="RecurringJobManagerFacts.cs"];
m5_72 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="142-142", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="RecurringJobManagerFacts.cs"];
m5_73 [label="return GetJobs(\r\n                from, count,\r\n                ScheduledState.Name,\r\n                (method, stateData) => new ScheduleDto\r\n                {\r\n                    Method = method,\r\n                    ScheduledAt = JobHelper.FromStringTimestamp(stateData[''ScheduledAt''])\r\n                });", span="144-151", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="RecurringJobManagerFacts.cs"];
m5_74 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="142-142", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="RecurringJobManagerFacts.cs"];
m5_82 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", span="413-413", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", color=red, community=0, file="RecurringJobManagerFacts.cs"];
m5_86 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="164-164", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="RecurringJobManagerFacts.cs"];
m5_87 [label="var servers = _connection.Query<Entities.Server>(\r\n                @''select * from HangFire.Server'')\r\n                .ToList()", span="166-168", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="RecurringJobManagerFacts.cs"];
m5_75 [label="Entry Unk.AddToSet", span="", cluster="Unk.AddToSet", file="RecurringJobManagerFacts.cs"];
m5_99 [label="Exit HangFire.Core.Tests.RecurringJobManagerFacts.CreateManager()", span="107-107", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.CreateManager()", file="RecurringJobManagerFacts.cs"];
m5_107 [label="Entry lambda expression", span="210-214", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_126 [label="Entry lambda expression", span="266-270", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_235 [label="Entry lambda expression", span="396-396", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_238 [label="Entry lambda expression", span="396-396", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_269 [label="Entry lambda expression", span="431-431", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_272 [label="Entry lambda expression", span="431-431", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_172 [label="JobHelper.FromJson<Dictionary<string, string>>(x.Data)", span="331-331", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_77 [label="var manager = CreateManager()", span="87-87", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="RecurringJobManagerFacts.cs"];
m5_76 [label="Entry HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", span="85-85", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="RecurringJobManagerFacts.cs"];
m5_266 [label="String.Format(''stats:{0}:{1}'', type, x)", span="426-426", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_101 [label="Exit HangFire.Core.Tests.RecurringJobManagerFacts.Method()", span="112-112", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.Method()", file="RecurringJobManagerFacts.cs"];
m5_109 [label="Exit lambda expression", span="210-214", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_108 [label="new SucceededJobDto\r\n                {\r\n                    Method = method,\r\n                    SucceededAt = JobHelper.FromNullableStringTimestamp(stateData[''SucceededAt''])\r\n                }", span="210-214", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_128 [label="Exit lambda expression", span="266-270", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_127 [label="new EnqueuedJobDto\r\n                {\r\n                    Method = method,\r\n                    EnqueuedAt = JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                }", span="266-270", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_231 [label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="392-392", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_165 [label="Entry lambda expression", span="327-327", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_168 [label="Entry lambda expression", span="327-327", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_171 [label="Entry lambda expression", span="331-331", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_195 [label="Entry lambda expression", span="364-364", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_198 [label="Entry lambda expression", span="364-364", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_202 [label="countByStates.ContainsKey(name) ? countByStates[name] : 0", span="366-366", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_230 [label="Entry lambda expression", span="392-392", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_237 [label="Exit lambda expression", span="396-396", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_236 [label="(string)x.Key", span="396-396", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_240 [label="Exit lambda expression", span="396-396", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_239 [label="(long)x.IntValue", span="396-396", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_265 [label="Entry lambda expression", span="426-426", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_271 [label="Exit lambda expression", span="431-431", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_270 [label="(string)x.Key", span="431-431", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_274 [label="Exit lambda expression", span="431-431", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_273 [label="(long)x.IntValue", span="431-431", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_173 [label="Exit lambda expression", span="331-331", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_262 [label="Entry lambda expression", span="425-425", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_267 [label="Exit lambda expression", span="426-426", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_232 [label="Exit lambda expression", span="392-392", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_167 [label="Exit lambda expression", span="327-327", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_166 [label="x.Name", span="327-327", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_170 [label="Exit lambda expression", span="327-327", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_169 [label="x.Value", span="327-327", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_197 [label="Exit lambda expression", span="364-364", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_196 [label="x.State", span="364-364", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_200 [label="Exit lambda expression", span="364-364", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_199 [label="x.Count", span="364-364", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_203 [label="Exit lambda expression", span="366-366", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_263 [label="x.ToString(''yyyy-MM-dd'')", span="425-425", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_40 [label="var manager = CreateManager()", span="44-44", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs"];
m5_264 [label="Exit lambda expression", span="425-425", cluster="lambda expression", file="RecurringJobManagerFacts.cs"];
m5_0 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", span="20-20", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", file="RecurringJobManagerFacts.cs"];
m5_1 [label="_connection = connection", span="22-22", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", file="RecurringJobManagerFacts.cs"];
m5_2 [label="_transaction = new TransactionScope(\r\n                TransactionScopeOption.RequiresNew,\r\n                new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted })", span="23-25", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", file="RecurringJobManagerFacts.cs"];
m5_3 [label="_connection.EnlistTransaction(Transaction.Current)", span="27-27", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", file="RecurringJobManagerFacts.cs"];
m5_4 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", span="20-20", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", file="RecurringJobManagerFacts.cs"];
m5_6 [label="Entry TransactionOptions.cstr", span="", cluster="TransactionOptions.cstr", file="RecurringJobManagerFacts.cs"];
m5_8 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", span="30-30", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", file="RecurringJobManagerFacts.cs"];
m5_9 [label="_transaction.Complete()", span="32-32", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", file="RecurringJobManagerFacts.cs"];
m5_120 [label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="4-4", cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="RecurringJobManagerFacts.cs"];
m5_39 [label="Entry HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", span="42-42", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs"];
m5_41 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => manager.AddOrUpdate(null, _job, Cron.Daily()))", span="46-47", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenIdIsNull()", file="RecurringJobManagerFacts.cs"];
m5_48 [label="Entry HangFire.Cron.Daily()", span="53-53", cluster="HangFire.Cron.Daily()", file="RecurringJobManagerFacts.cs"];
m5_268 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="RecurringJobManagerFacts.cs"];
m5_10 [label="_transaction.Dispose()", span="33-33", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", file="RecurringJobManagerFacts.cs"];
m5_15 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="37-37", cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="RecurringJobManagerFacts.cs"];
m5_44 [label="string jobsSql = @''\r\nselect * from (select *, row_number() over (order by CreatedAt desc) as row_num\r\nfrom HangFire.Job where State = @stateName) as j where j.row_num between @start and @end\r\n''", span="97-100", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="RecurringJobManagerFacts.cs"];
m5_38 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="91-91", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(int, int, string, System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="RecurringJobManagerFacts.cs"];
m5_61 [label="Assert.Equal(''cronExpression'', exception.ParamName)", span="71-71", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_ThrowsAnException_WhenCronExpressionIsNull()", file="RecurringJobManagerFacts.cs"];
m5_233 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="RecurringJobManagerFacts.cs"];
m5_119 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="RecurringJobManagerFacts.cs"];
m5_229 [label="Entry Unk.ElementAt", span="", cluster="Unk.ElementAt", file="RecurringJobManagerFacts.cs"];
m5_78 [label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="89-89", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_SetsTheRecurringJobEntry()", file="RecurringJobManagerFacts.cs"];
m5_11 [label="_connection.Dispose()", span="34-34", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Dispose()", file="RecurringJobManagerFacts.cs"];
m5_226 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="RecurringJobManagerFacts.cs"];
m5_227 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="RecurringJobManagerFacts.cs"];
m5_13 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="RecurringJobManagerFacts.cs"];
m5_58 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="RecurringJobManagerFacts.cs"];
m5_20 [label="return _connection.Query<int>(\r\n                @''select count(JobId) from HangFire.JobQueue '' \r\n                + @''where Queue = @queue and FetchedAt is NULL'',\r\n                new { queue = queue })\r\n                .Single();", span="44-48", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="RecurringJobManagerFacts.cs"];
m5_225 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="RecurringJobManagerFacts.cs"];
m5_160 [label="Entry Unk.QueryMultiple", span="", cluster="Unk.QueryMultiple", file="RecurringJobManagerFacts.cs"];
m5_110 [label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="RecurringJobManagerFacts.cs"];
m5_139 [label="Entry KeyValuePair<string, DequeuedJobDto>.cstr", span="", cluster="KeyValuePair<string, DequeuedJobDto>.cstr", file="RecurringJobManagerFacts.cs"];
m5_121 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="250-250", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_123 [label="var jobs = _connection.Query<Job>(\r\n                enqueuedJobsSql,\r\n                new { queue = queue, start = from + 1, end = @from + perPage })\r\n                .ToList()", span="259-262", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_124 [label="return DeserializeJobs(\r\n                jobs,\r\n                (method, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Method = method,\r\n                    EnqueuedAt = JobHelper.FromNullableStringTimestamp(stateData[''EnqueuedAt''])\r\n                });", span="264-270", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_122 [label="string enqueuedJobsSql = @''\r\nselect * from\r\n(select j.*, row_number() over (order by j.CreatedAt) as row_num from HangFire.JobQueue jq\r\nleft join HangFire.Job j on jq.JobId = j.Id\r\nwhere jq.Queue = @queue and jq.FetchedAt is null) as r\r\nwhere r.row_num between @start and @end''", span="252-257", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_125 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="250-250", cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_91 [label="manager.AddOrUpdate(_id, _job, _cronExpression)", span="102-102", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="RecurringJobManagerFacts.cs"];
m5_89 [label="Entry HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", span="98-98", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="RecurringJobManagerFacts.cs"];
m5_90 [label="var manager = CreateManager()", span="100-100", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="RecurringJobManagerFacts.cs"];
m5_92 [label="_transaction.Verify(x => x.Commit())", span="104-104", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="RecurringJobManagerFacts.cs"];
m5_93 [label="Exit HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", span="98-98", cluster="HangFire.Core.Tests.RecurringJobManagerFacts.AddOrUpdate_CommitsTransaction()", file="RecurringJobManagerFacts.cs"];
m5_234 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="RecurringJobManagerFacts.cs"];
m5_162 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="RecurringJobManagerFacts.cs"];
m5_174 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="346-346", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="RecurringJobManagerFacts.cs"];
m5_175 [label="return GetNumberOfJobsByStateName(SucceededState.Name);", span="348-348", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="RecurringJobManagerFacts.cs"];
m5_176 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="346-346", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="RecurringJobManagerFacts.cs"];
m5_129 [label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="7-7", cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="RecurringJobManagerFacts.cs"];
m5_161 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="RecurringJobManagerFacts.cs"];
m5_102 [label="HangFire.Core.Tests.RecurringJobManagerFacts", span="", cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="RecurringJobManagerFacts.cs"];
m5_249 [label="var valuesMap = _connection.Query(\r\n                @''select [Key], IntValue from HangFire.Value where [Key] in @keys'',\r\n                new { keys = keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.IntValue)", span="428-431", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_245 [label="dates.Add(endDate)", span="421-421", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_248 [label="var keys = stringDates.Select(x => String.Format(''stats:{0}:{1}'', type, x)).ToList()", span="426-426", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_250 [label=keys, span="433-433", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_251 [label="!valuesMap.ContainsKey(key)", span="435-435", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_252 [label="valuesMap.Add(key, 0)", span="435-435", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_256 [label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="441-441", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_247 [label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="425-425", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_241 [label="var endDate = DateTime.UtcNow.Date", span="415-415", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_244 [label="startDate <= endDate", span="419-419", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_243 [label="var dates = new List<DateTime>()", span="417-417", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_246 [label="endDate = endDate.AddDays(-1)", span="422-422", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_253 [label="var result = new Dictionary<DateTime, long>()", span="438-438", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_255 [label="i < stringDates.Count", span="439-439", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_254 [label="var i = 0", span="439-439", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_257 [label="result.Add(dates[i], value)", span="442-442", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_242 [label="var startDate = endDate.AddDays(-7)", span="416-416", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_259 [label="return result;", span="445-445", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_258 [label="i++", span="439-439", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_260 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", span="413-413", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(string)", file="RecurringJobManagerFacts.cs"];
m5_228 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobManagerFacts.cs"];
m5_147 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="310-310", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="RecurringJobManagerFacts.cs"];
m5_148 [label="return GetHourlyTimelineStats(''failed'');", span="312-312", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="RecurringJobManagerFacts.cs"];
m5_149 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="310-310", cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="RecurringJobManagerFacts.cs"];
m5_163 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="RecurringJobManagerFacts.cs"];
m5_30 [label="return _connection.Query<int>(\r\n                @''select count(Id) from HangFire.Job where State = @state'',\r\n                new { state = stateName })\r\n                .Single();", span="67-70", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="RecurringJobManagerFacts.cs"];
m5_31 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", span="65-65", cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(string)", file="RecurringJobManagerFacts.cs"];
m5_111 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="224-224", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManagerFacts.cs"];
m5_113 [label="var queues = _connection.Query<QueueStatusDto>(queuesAndStatusSql).ToList()", span="233-233", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManagerFacts.cs"];
m5_116 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                {\r\n                    Name = queue.Queue,\r\n                    Length = queue.Enqueued,\r\n                    Dequeued = queue.Fetched,\r\n                    FirstJobs = new List<KeyValuePair<string, EnqueuedJobDto>>() // TODO: implement\r\n                })", span="238-244", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManagerFacts.cs"];
m5_112 [label="string queuesAndStatusSql = @''\r\nselect distinct [Queue],\r\n	(select count(JobId) from HangFire.JobQueue as a where q.Queue = a.Queue and a.FetchedAt is null) as Enqueued,\r\n	(select count(JobId) from HangFire.JobQueue as b where q.Queue = b.Queue and b.FetchedAt is not null) as Fetched\r\nfrom HangFire.[JobQueue] as q\r\n''", span="226-231", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManagerFacts.cs"];
m5_114 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(queues.Count)", span="234-234", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManagerFacts.cs"];
m5_115 [label=queues, span="236-236", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManagerFacts.cs"];
m5_117 [label="return result;", span="247-247", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManagerFacts.cs"];
m5_118 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="224-224", cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="RecurringJobManagerFacts.cs"];
m5_130 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", span="273-273", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_132 [label="var jobs = _connection.Query<Job>(\r\n                fetchedJobsSql,\r\n                new { queue = queue, start = from + 1, end = @from + perPage })\r\n                .ToList()", span="282-285", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_135 [label="result.Add(new KeyValuePair<string, DequeuedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new DequeuedJobDto\r\n                    {\r\n                        Method = DeserializeJobMethod(job.InvocationData),\r\n                        State = job.State,\r\n                        CreatedAt = job.CreatedAt,\r\n                        FetchedAt = job.FetchedAt\r\n                    }))", span="291-299", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_136 [label="return new JobList<DequeuedJobDto>(result);", span="302-302", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_131 [label="string fetchedJobsSql = @''\r\nselect * from\r\n(select j.*, jq.FetchedAt, row_number() over (order by j.CreatedAt) as row_num from HangFire.JobQueue jq\r\nleft join HangFire.Job j on jq.JobId = j.Id\r\nwhere jq.Queue = @queue and jq.FetchedAt is not null) as r\r\nwhere r.row_num between @start and @end''", span="275-280", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_133 [label="var result = new List<KeyValuePair<string, DequeuedJobDto>>(jobs.Count)", span="287-287", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_134 [label=jobs, span="289-289", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_137 [label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", span="273-273", cluster="HangFire.SqlServer.SqlServerMonitoringApi.DequeuedJobs(string, int, int)", file="RecurringJobManagerFacts.cs"];
m5_275 [label="HangFire.SqlServer.SqlServerMonitoringApi", span="", file="RecurringJobManagerFacts.cs"];
m5_278 [label=string, span="", file="RecurringJobManagerFacts.cs"];
m5_277 [label=string, span="", file="RecurringJobManagerFacts.cs"];
m5_276 [label=countByStates, span="", file="RecurringJobManagerFacts.cs"];
m7_77 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", span="77-77", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", file="RecurringJobSchedulerFacts.cs"];
m7_78 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RecurringJobScheduler(_storage.Object, _client.Object, null))", span="79-80", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_79 [label="Assert.Equal(''dateTimeProvider'', exception.ParamName)", span="82-82", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_80 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", span="77-77", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", file="RecurringJobSchedulerFacts.cs"];
m7_69 [label="Entry RecurringJobScheduler.cstr", span="", cluster="RecurringJobScheduler.cstr", file="RecurringJobSchedulerFacts.cs"];
m7_104 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="RecurringJobSchedulerFacts.cs"];
m7_16 [label="Entry Mock<IBackgroundJobClient>.cstr", span="", cluster="Mock<IBackgroundJobClient>.cstr", file="RecurringJobSchedulerFacts.cs"];
m7_60 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="RecurringJobSchedulerFacts.cs"];
m7_65 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RecurringJobSchedulerFacts.cs"];
m7_18 [label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken()", file="RecurringJobSchedulerFacts.cs"];
m7_59 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RecurringJobSchedulerFacts.cs"];
m7_136 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="RecurringJobSchedulerFacts.cs"];
m7_40 [label="Entry Unk.GetNextOccurrence", span="", cluster="Unk.GetNextOccurrence", file="RecurringJobSchedulerFacts.cs"];
m7_19 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int)", file="RecurringJobSchedulerFacts.cs"];
m7_162 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", file="RecurringJobSchedulerFacts.cs"];
m7_39 [label="Entry Unk.>", span="", cluster="Unk.>", file="RecurringJobSchedulerFacts.cs"];
m7_91 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="169-169", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="RecurringJobSchedulerFacts.cs"];
m7_170 [label="return new RecurringJobScheduler(_storage.Object, _client.Object, _dateTimeProvider.Object);", span="171-171", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_171 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="169-169", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="RecurringJobSchedulerFacts.cs"];
m7_108 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", span="105-105", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", file="RecurringJobSchedulerFacts.cs"];
m7_109 [label="_recurringJob[''NextExecution''] = JobHelper.ToStringTimestamp(_currentTime.AddDays(1))", span="107-107", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_110 [label="var scheduler = CreateScheduler()", span="108-108", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_111 [label="scheduler.Execute(_token)", span="110-110", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_112 [label="_client.Verify(\r\n                x => x.Create(It.IsAny<Job>(), It.IsAny<EnqueuedState>()),\r\n                Times.Never)", span="112-114", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_113 [label="_connection.Verify(\r\n                x => x.SetRangeInHash(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<IEnumerable<KeyValuePair<string, string>>>()),\r\n                Times.Never)", span="116-120", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_114 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", span="105-105", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", file="RecurringJobSchedulerFacts.cs"];
m7_163 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="RecurringJobSchedulerFacts.cs"];
m7_143 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", span="145-145", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", file="RecurringJobSchedulerFacts.cs"];
m7_144 [label="_recurringJob.Remove(''NextExecution'')", span="147-147", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_145 [label="var scheduler = CreateScheduler()", span="148-148", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_146 [label="scheduler.Execute(_token)", span="150-150", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_147 [label="_connection.Setup(x => x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime))))", span="152-155", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_148 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", span="145-145", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", file="RecurringJobSchedulerFacts.cs"];
m7_51 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="RecurringJobSchedulerFacts.cs"];
m7_15 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="RecurringJobSchedulerFacts.cs"];
m7_115 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="RecurringJobSchedulerFacts.cs"];
m7_23 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobSchedulerFacts.cs"];
m7_21 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RecurringJobSchedulerFacts.cs"];
m7_156 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", span="159-159", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", file="RecurringJobSchedulerFacts.cs"];
m7_157 [label="_dateTimeProvider.Setup(x => x.CurrentDateTime).Returns(\r\n                new DateTime(2012, 12, 12, 12, 12, 12))", span="161-162", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_158 [label="var scheduler = CreateScheduler()", span="163-163", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_159 [label="var cts = new CancellationTokenSource(TimeSpan.FromSeconds(3))", span="164-164", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_160 [label="Assert.Throws<OperationCanceledException>(() => scheduler.Execute(cts.Token))", span="166-166", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_161 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", span="159-159", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", file="RecurringJobSchedulerFacts.cs"];
m7_61 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="59-59", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m7_62 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RecurringJobScheduler(null, _client.Object, _dateTimeProvider.Object))", span="61-62", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_63 [label="Assert.Equal(''storage'', exception.ParamName)", span="64-64", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_64 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="59-59", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m7_17 [label="Entry Mock<IDateTimeProvider>.cstr", span="", cluster="Mock<IDateTimeProvider>.cstr", file="RecurringJobSchedulerFacts.cs"];
m7_167 [label="Entry lambda expression", span="166-166", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_30 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_33 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_36 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_41 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_44 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_48 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_52 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_56 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_31 [label="x.CurrentDateTime", span="37-37", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_32 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_34 [label=_currentTime, span="37-37", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_35 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_37 [label="x.GetNextOccurrence(It.IsNotNull<CrontabSchedule>())", span="38-38", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_38 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_42 [label=_nextTime, span="39-39", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_43 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_45 [label="Console.WriteLine()", span="45-45", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_46 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_49 [label="x.GetConnection()", span="49-49", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_50 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_53 [label="x.GetAllItemsFromSet(''recurring-jobs'')", span="51-51", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_54 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_57 [label="x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', RecurringJobId))", span="54-54", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_58 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_66 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_67 [label="new RecurringJobScheduler(null, _client.Object, _dateTimeProvider.Object)", span="62-62", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_68 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_74 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_75 [label="new RecurringJobScheduler(_storage.Object, null, _dateTimeProvider.Object)", span="71-71", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_76 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_81 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_82 [label="new RecurringJobScheduler(_storage.Object, _client.Object, null)", span="80-80", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_83 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_94 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_98 [label="Entry lambda expression", span="94-94", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_101 [label="Entry lambda expression", span="96-101", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_95 [label="x.Create(It.IsAny<Job>(), It.IsAny<IState>())", span="88-88", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_96 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_99 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="94-94", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_100 [label="Exit lambda expression", span="94-94", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_102 [label="x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj[''LastExecution''] == JobHelper.ToStringTimestamp(_currentTime)\r\n                 && rj[''LastJobId''] == ''job-id''\r\n                 && rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime)))", span="96-101", cluster="lambda expression", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_103 [label="Exit lambda expression", span="96-101", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_105 [label="Entry lambda expression", span="98-101", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_106 [label="rj[''LastExecution''] == JobHelper.ToStringTimestamp(_currentTime)\r\n                 && rj[''LastJobId''] == ''job-id''\r\n                 && rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime)", span="99-101", cluster="lambda expression", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_107 [label="Exit lambda expression", span="98-101", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_116 [label="Entry lambda expression", span="113-113", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_119 [label="Entry lambda expression", span="117-119", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_117 [label="x.Create(It.IsAny<Job>(), It.IsAny<EnqueuedState>())", span="113-113", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_118 [label="Exit lambda expression", span="113-113", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_120 [label="x.SetRangeInHash(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<IEnumerable<KeyValuePair<string, string>>>())", span="117-119", cluster="lambda expression", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_121 [label="Exit lambda expression", span="117-119", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_128 [label="Entry lambda expression", span="131-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_129 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="131-131", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_130 [label="Exit lambda expression", span="131-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_137 [label="Entry lambda expression", span="137-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_141 [label="scheduler.Execute(_token)", span="141-141", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_140 [label="Entry lambda expression", span="141-141", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_142 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_138 [label="x.GetAllItemsFromSet(It.IsAny<string>())", span="137-137", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_139 [label="Exit lambda expression", span="137-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_150 [label="Entry lambda expression", span="152-155", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_151 [label="x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime)))", span="152-155", cluster="lambda expression", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_152 [label="Exit lambda expression", span="152-155", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_153 [label="Entry lambda expression", span="154-155", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_154 [label="rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime)", span="155-155", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_155 [label="Exit lambda expression", span="154-155", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_164 [label="Entry lambda expression", span="161-161", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_168 [label="scheduler.Execute(cts.Token)", span="166-166", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_169 [label="Exit lambda expression", span="166-166", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_165 [label="x.CurrentDateTime", span="161-161", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_166 [label="Exit lambda expression", span="161-161", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m7_92 [label="Entry HangFire.Server.RecurringJobScheduler.Execute(System.Threading.CancellationToken)", span="39-39", cluster="HangFire.Server.RecurringJobScheduler.Execute(System.Threading.CancellationToken)", file="RecurringJobSchedulerFacts.cs"];
m7_24 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="RecurringJobSchedulerFacts.cs"];
m7_131 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="135-135", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m7_132 [label="_connection.Setup(x => x.GetAllItemsFromSet(It.IsAny<string>()))\r\n                .Returns(new HashSet<string> { ''non-existing-job'' })", span="137-138", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_133 [label="var scheduler = CreateScheduler()", span="139-139", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_134 [label="Assert.DoesNotThrow(() => scheduler.Execute(_token))", span="141-141", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_135 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="135-135", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m7_70 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", span="68-68", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m7_71 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RecurringJobScheduler(_storage.Object, null, _dateTimeProvider.Object))", span="70-71", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_72 [label="Assert.Equal(''client'', exception.ParamName)", span="73-73", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_73 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", span="68-68", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m7_20 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="RecurringJobSchedulerFacts.cs"];
m7_93 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RecurringJobSchedulerFacts.cs"];
m7_27 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="RecurringJobSchedulerFacts.cs"];
m7_55 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="RecurringJobSchedulerFacts.cs"];
m7_84 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", span="86-86", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", file="RecurringJobSchedulerFacts.cs"];
m7_85 [label="_client.Setup(x => x.Create(It.IsAny<Job>(), It.IsAny<IState>())).Returns(''job-id'')", span="88-88", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_86 [label="var scheduler = CreateScheduler()", span="90-90", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_87 [label="scheduler.Execute(_token)", span="92-92", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_88 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="94-94", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_89 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj[''LastExecution''] == JobHelper.ToStringTimestamp(_currentTime)\r\n                 && rj[''LastJobId''] == ''job-id''\r\n                 && rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime))))", span="96-101", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_90 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", span="86-86", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", file="RecurringJobSchedulerFacts.cs"];
m7_25 [label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="117-117", cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="RecurringJobSchedulerFacts.cs"];
m7_97 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="RecurringJobSchedulerFacts.cs"];
m7_122 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", span="124-124", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", file="RecurringJobSchedulerFacts.cs"];
m7_123 [label="_recurringJob[''NextExecution''] = JobHelper.ToStringTimestamp(_currentTime.AddDays(-1))", span="126-126", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_124 [label="var scheduler = CreateScheduler()", span="127-127", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_125 [label="scheduler.Execute(_token)", span="129-129", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_126 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="131-131", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_127 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", span="124-124", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", file="RecurringJobSchedulerFacts.cs"];
m7_22 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="RecurringJobSchedulerFacts.cs"];
m7_149 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", file="RecurringJobSchedulerFacts.cs"];
m7_28 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="RecurringJobSchedulerFacts.cs"];
m7_47 [label="Entry System.Console.WriteLine()", span="0-0", cluster="System.Console.WriteLine()", file="RecurringJobSchedulerFacts.cs"];
m7_26 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="RecurringJobSchedulerFacts.cs"];
m7_0 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="26-26", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m7_1 [label="_storage = new Mock<JobStorage>()", span="28-28", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_2 [label="_client = new Mock<IBackgroundJobClient>()", span="29-29", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_3 [label="_dateTimeProvider = new Mock<IDateTimeProvider>()", span="30-30", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_4 [label="_token = new CancellationToken()", span="31-31", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_5 [label="_currentTime = new DateTime(2012, 12, 12, 12, 12, 0)", span="34-34", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_6 [label="_nextTime = _currentTime.AddHours(1)", span="35-35", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_7 [label="_dateTimeProvider.Setup(x => x.CurrentDateTime).Returns(() => _currentTime)", span="37-37", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_8 [label="_dateTimeProvider.Setup(x => x.GetNextOccurrence(It.IsNotNull<CrontabSchedule>()))\r\n                .Returns(() => _nextTime)", span="38-39", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_9 [label="_recurringJob = new Dictionary<string, string>\r\n            {\r\n                { ''NextExecution'', JobHelper.ToStringTimestamp(_currentTime) },\r\n                { ''Cron'', ''* * * * *'' },\r\n                { ''Job'', JobHelper.ToJson(InvocationData.Serialize(Job.FromExpression(() => Console.WriteLine()))) }\r\n            }", span="41-46", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_10 [label="_connection = new Mock<IStorageConnection>()", span="48-48", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_11 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="49-49", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m7_12 [label="_connection.Setup(x => x.GetAllItemsFromSet(''recurring-jobs''))\r\n                .Returns(new HashSet<string> { RecurringJobId })", span="51-52", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_13 [label="_connection.Setup(x => x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', RecurringJobId)))\r\n                .Returns(_recurringJob)", span="54-55", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m7_14 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="26-26", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m7_29 [label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0", cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="RecurringJobSchedulerFacts.cs"];
m7_172 [label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts", span="", file="RecurringJobSchedulerFacts.cs"];
m7_173 [label=scheduler, span="", file="RecurringJobSchedulerFacts.cs"];
m7_174 [label=scheduler, span="", file="RecurringJobSchedulerFacts.cs"];
m7_175 [label=cts, span="", file="RecurringJobSchedulerFacts.cs"];
m10_0 [label="Entry HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", span="25-25", cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="RedisWriteOnlyTransaction.cs"];
m10_1 [label="MaxRetryAttempts = 10", span="27-27", cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="RedisWriteOnlyTransaction.cs"];
m10_2 [label="ShutdownTimeout = TimeSpan.FromSeconds(5)", span="28-28", cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="RedisWriteOnlyTransaction.cs"];
m10_3 [label="MinimumLogVerbosity = false", span="29-29", cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="RedisWriteOnlyTransaction.cs"];
m10_4 [label="Exit HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", span="25-25", cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="RedisWriteOnlyTransaction.cs"];
m10_5 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="RedisWriteOnlyTransaction.cs"];
m10_6 [label="HangFire.Server.ServerComponentRunnerOptions", span="", file="RedisWriteOnlyTransaction.cs"];
m0_75 -> m0_76  [key=0, style=solid];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_15  [key=2, style=dotted];
m0_76 -> m0_16  [key=2, style=dotted];
m0_76 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_56  [key=2, style=dotted];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_57  [key=2, style=dotted];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_58  [key=2, style=dotted];
m0_79 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_80 -> m0_75  [key=0, style=bold, color=blue];
m0_66 -> m0_67  [key=0, style=solid];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_56  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_57  [key=2, style=dotted];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_58  [key=2, style=dotted];
m0_69 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_70 -> m0_66  [key=0, style=bold, color=blue];
m0_50 -> m0_51  [key=0, style=solid];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_56  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_57  [key=2, style=dotted];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_58  [key=2, style=dotted];
m0_53 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_58  [key=2, style=dotted];
m0_54 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_55 -> m0_50  [key=0, style=bold, color=blue];
m0_33 -> m0_34  [key=0, style=solid];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_20  [key=2, style=dotted];
m0_34 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_34 -> m0_8  [key=3, color=darkorchid, style=bold, label="Property variable string Type"];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_37  [key=2, style=dotted];
m0_35 -> m0_8  [key=3, color=darkorchid, style=bold, label="Property variable string ParameterTypes"];
m0_36 -> m0_33  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_10  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_11  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_12  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_13  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_14  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_15  [key=2, style=dotted];
m0_6 -> m0_16  [key=2, style=dotted];
m0_6 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_15  [key=2, style=dotted];
m0_7 -> m0_16  [key=2, style=dotted];
m0_7 -> m0_22  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_15  [key=2, style=dotted];
m0_8 -> m0_16  [key=2, style=dotted];
m0_8 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_9 -> m0_0  [key=0, style=bold, color=blue];
m0_84 -> m0_85  [key=0, style=solid];
m0_17 -> m0_18  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_20  [key=2, style=dotted];
m0_18 -> m0_21  [key=2, style=dotted];
m0_19 -> m0_17  [key=0, style=bold, color=blue];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=2, style=dotted];
m0_24 -> m0_22  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_20  [key=2, style=dotted];
m0_27 -> m0_29  [key=2, style=dotted];
m0_27 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_28 -> m0_26  [key=0, style=bold, color=blue];
m0_30 -> m0_31  [key=0, style=solid];
m0_31 -> m0_32  [key=0, style=solid];
m0_32 -> m0_30  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_41  [key=2, style=dotted];
m0_39 -> m0_42  [key=2, style=dotted];
m0_40 -> m0_38  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_41  [key=2, style=dotted];
m0_48 -> m0_42  [key=2, style=dotted];
m0_49 -> m0_47  [key=0, style=bold, color=blue];
m0_59 -> m0_60  [key=0, style=solid];
m0_62 -> m0_63  [key=0, style=solid];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_25  [key=2, style=dotted];
m0_61 -> m0_59  [key=0, style=bold, color=blue];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_65  [key=2, style=dotted];
m0_64 -> m0_62  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_20  [key=2, style=dotted];
m0_72 -> m0_74  [key=2, style=dotted];
m0_73 -> m0_71  [key=0, style=bold, color=blue];
m0_81 -> m0_82  [key=0, style=solid];
m0_87 -> m0_88  [key=0, style=solid];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_20  [key=2, style=dotted];
m0_82 -> m0_29  [key=2, style=dotted];
m0_82 -> m0_84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_83 -> m0_81  [key=0, style=bold, color=blue];
m0_85 -> m0_86  [key=0, style=solid];
m0_86 -> m0_84  [key=0, style=bold, color=blue];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_20  [key=2, style=dotted];
m0_88 -> m0_74  [key=2, style=dotted];
m0_89 -> m0_87  [key=0, style=bold, color=blue];
m0_56 -> m0_90  [key=0, style=solid];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_41  [key=2, style=dotted];
m0_91 -> m0_56  [key=0, style=bold, color=blue];
m0_43 -> m0_44  [key=0, style=solid];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_20  [key=2, style=dotted];
m0_44 -> m0_47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_37  [key=2, style=dotted];
m0_46 -> m0_43  [key=0, style=bold, color=blue];
m0_92 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m0_92 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.SchedulePollerFacts"];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.Thread"];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_28  [key=2, style=dotted];
m2_26 -> m2_27  [key=0, style=solid];
m2_26 -> m2_29  [key=2, style=dotted];
m2_27 -> m2_24  [key=0, style=bold, color=blue];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_8  [key=2, style=dotted];
m2_4 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label=connection];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_7  [key=0, style=solid];
m2_6 -> m2_5  [key=0, style=solid];
m2_6 -> m2_9  [key=2, style=dotted];
m2_6 -> m2_10  [key=2, style=dotted];
m2_7 -> m2_3  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
m2_1 -> m2_2  [key=0, style=solid];
m2_2 -> m2_0  [key=0, style=bold, color=blue];
m2_11 -> m2_12  [key=0, style=solid];
m2_14 -> m2_15  [key=0, style=solid, color=green];
m2_14 -> m2_21  [key=2, style=dotted, color=green];
m2_13 -> m2_14  [key=0, style=solid, color=green];
m2_13 -> m2_16  [key=0, style=solid];
m2_15 -> m2_13  [key=0, style=solid];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_22  [key=2, style=dotted];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_20  [key=2, style=dotted];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> m2_19  [key=0, style=solid];
m2_16 -> m2_20  [key=2, style=dotted];
m2_17 -> m2_18  [key=0, style=solid];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_23  [key=2, style=dotted];
m2_19 -> m2_11  [key=0, style=bold, color=blue];
m2_30 -> m2_14  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Components.ExpirationManager"];
m2_30 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Components.ExpirationManager"];
m2_30 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Components.ExpirationManager"];
m2_30 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Components.ExpirationManager"];
m2_30 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Components.ExpirationManager"];
m3_199 -> m3_236  [key=0, style=solid];
m3_236 -> m3_237  [key=0, style=solid];
m3_236 -> m3_238  [key=2, style=dotted];
m3_237 -> m3_199  [key=0, style=bold, color=blue];
m3_207 -> m3_208  [key=0, style=solid];
m3_208 -> m3_209  [key=0, style=solid];
m3_208 -> m3_38  [key=2, style=dotted];
m3_208 -> m3_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_209 -> m3_210  [key=0, style=solid];
m3_209 -> m3_24  [key=2, style=dotted];
m3_210 -> m3_211  [key=0, style=solid];
m3_210 -> m3_25  [key=2, style=dotted];
m3_211 -> m3_212  [key=0, style=solid];
m3_211 -> m3_11  [key=2, style=dotted];
m3_212 -> m3_207  [key=0, style=bold, color=blue];
m3_229 -> m3_230  [key=0, style=solid];
m3_230 -> m3_231  [key=0, style=solid];
m3_231 -> m3_229  [key=0, style=bold, color=blue];
m3_30 -> m3_242  [key=0, style=solid];
m3_242 -> m3_243  [key=0, style=solid];
m3_243 -> m3_30  [key=0, style=bold, color=blue];
m3_172 -> m3_224  [key=0, style=solid];
m3_224 -> m3_225  [key=0, style=solid];
m3_225 -> m3_172  [key=0, style=bold, color=blue];
m3_31 -> m3_32  [key=0, style=solid];
m3_32 -> m3_33  [key=0, style=solid];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_38  [key=2, style=dotted];
m3_33 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_24  [key=2, style=dotted];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_25  [key=2, style=dotted];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_26  [key=2, style=dotted];
m3_37 -> m3_31  [key=0, style=bold, color=blue];
m3_16 -> m3_17  [key=0, style=solid];
m3_17 -> m3_18  [key=0, style=solid];
m3_18 -> m3_19  [key=0, style=solid];
m3_18 -> m3_23  [key=2, style=dotted];
m3_18 -> m3_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_19 -> m3_20  [key=0, style=solid];
m3_19 -> m3_24  [key=2, style=dotted];
m3_20 -> m3_21  [key=0, style=solid];
m3_20 -> m3_25  [key=2, style=dotted];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_26  [key=2, style=dotted];
m3_22 -> m3_16  [key=0, style=bold, color=blue];
m3_162 -> m3_163  [key=0, style=solid];
m3_163 -> m3_164  [key=0, style=solid];
m3_164 -> m3_165  [key=0, style=solid];
m3_164 -> m3_38  [key=2, style=dotted];
m3_164 -> m3_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_165 -> m3_166  [key=0, style=solid];
m3_165 -> m3_24  [key=2, style=dotted];
m3_165 -> m3_174  [key=1, style=dashed, color=darkseagreen4, label=process];
m3_166 -> m3_167  [key=0, style=solid];
m3_166 -> m3_10  [key=2, style=dotted];
m3_166 -> m3_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_167 -> m3_168  [key=0, style=solid];
m3_167 -> m3_26  [key=2, style=dotted];
m3_168 -> m3_162  [key=0, style=bold, color=blue];
m3_176 -> m3_177  [key=0, style=solid];
m3_177 -> m3_178  [key=0, style=solid];
m3_177 -> m3_23  [key=2, style=dotted];
m3_177 -> m3_183  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_178 -> m3_179  [key=0, style=solid];
m3_178 -> m3_24  [key=2, style=dotted];
m3_178 -> m3_188  [key=1, style=dashed, color=darkseagreen4, label=process];
m3_179 -> m3_180  [key=0, style=solid];
m3_179 -> m3_10  [key=2, style=dotted];
m3_179 -> m3_187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_179 -> m3_181  [key=1, style=dashed, color=darkseagreen4, label=thrownException];
m3_180 -> m3_181  [key=0, style=solid];
m3_180 -> m3_10  [key=2, style=dotted];
m3_181 -> m3_182  [key=0, style=solid];
m3_181 -> m3_11  [key=2, style=dotted];
m3_182 -> m3_176  [key=0, style=bold, color=blue];
m3_24 -> m3_251  [key=0, style=solid];
m3_251 -> m3_252  [key=0, style=solid];
m3_251 -> m3_253  [key=2, style=dotted];
m3_252 -> m3_24  [key=0, style=bold, color=blue];
m3_64 -> m3_244  [key=0, style=solid];
m3_64 -> m3_245  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_64 -> m3_246  [key=1, style=dashed, color=darkseagreen4, label=int];
m3_244 -> m3_245  [key=0, style=solid];
m3_245 -> m3_246  [key=0, style=solid];
m3_245 -> m3_11  [key=2, style=dotted];
m3_246 -> m3_247  [key=0, style=solid];
m3_246 -> m3_11  [key=2, style=dotted];
m3_247 -> m3_64  [key=0, style=bold, color=blue];
m3_190 -> m3_191  [key=0, style=solid];
m3_191 -> m3_192  [key=0, style=solid];
m3_191 -> m3_23  [key=2, style=dotted];
m3_191 -> m3_196  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_192 -> m3_193  [key=0, style=solid];
m3_192 -> m3_121  [key=2, style=dotted];
m3_192 -> m3_10  [key=2, style=dotted];
m3_192 -> m3_200  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_193 -> m3_194  [key=0, style=solid];
m3_193 -> m3_24  [key=2, style=dotted];
m3_193 -> m3_205  [key=1, style=dashed, color=darkseagreen4, label=process];
m3_194 -> m3_195  [key=0, style=solid];
m3_194 -> m3_10  [key=2, style=dotted];
m3_194 -> m3_204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_195 -> m3_190  [key=0, style=bold, color=blue];
m3_221 -> m3_222  [key=0, style=solid];
m3_222 -> m3_223  [key=0, style=solid];
m3_223 -> m3_221  [key=0, style=bold, color=blue];
m3_65 -> m3_66  [key=0, style=solid];
m3_66 -> m3_67  [key=0, style=solid];
m3_67 -> m3_68  [key=0, style=solid];
m3_67 -> m3_76  [key=2, style=dotted];
m3_68 -> m3_69  [key=0, style=solid];
m3_68 -> m3_77  [key=2, style=dotted];
m3_68 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label=convertedDate];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label=type];
m3_71 -> m3_72  [key=0, style=solid];
m3_71 -> m3_79  [key=2, style=dotted];
m3_70 -> m3_71  [key=0, style=solid];
m3_70 -> m3_78  [key=2, style=dotted];
m3_72 -> m3_73  [key=0, style=solid];
m3_72 -> m3_24  [key=2, style=dotted];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_25  [key=2, style=dotted];
m3_74 -> m3_75  [key=0, style=solid];
m3_74 -> m3_26  [key=2, style=dotted];
m3_75 -> m3_65  [key=0, style=bold, color=blue];
m3_91 -> m3_92  [key=0, style=solid];
m3_92 -> m3_93  [key=0, style=solid];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_23  [key=2, style=dotted];
m3_93 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_94 -> m3_95  [key=0, style=solid];
m3_94 -> m3_24  [key=2, style=dotted];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_25  [key=2, style=dotted];
m3_96 -> m3_97  [key=0, style=solid];
m3_96 -> m3_26  [key=2, style=dotted];
m3_97 -> m3_91  [key=0, style=bold, color=blue];
m3_53 -> m3_219  [key=0, style=solid];
m3_219 -> m3_220  [key=0, style=solid];
m3_220 -> m3_53  [key=0, style=bold, color=blue];
m3_113 -> m3_114  [key=0, style=solid];
m3_114 -> m3_115  [key=0, style=solid];
m3_114 -> m3_120  [key=2, style=dotted];
m3_115 -> m3_116  [key=0, style=solid];
m3_115 -> m3_121  [key=2, style=dotted];
m3_115 -> m3_122  [key=2, style=dotted];
m3_115 -> m3_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_116 -> m3_117  [key=0, style=solid];
m3_116 -> m3_23  [key=2, style=dotted];
m3_116 -> m3_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_24  [key=2, style=dotted];
m3_117 -> m3_131  [key=1, style=dashed, color=darkseagreen4, label=process];
m3_118 -> m3_119  [key=0, style=solid];
m3_118 -> m3_10  [key=2, style=dotted];
m3_118 -> m3_130  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_119 -> m3_113  [key=0, style=bold, color=blue];
m3_54 -> m3_55  [key=0, style=solid];
m3_55 -> m3_56  [key=0, style=solid];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_23  [key=2, style=dotted];
m3_56 -> m3_61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_24  [key=2, style=dotted];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_25  [key=2, style=dotted];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_26  [key=2, style=dotted];
m3_60 -> m3_54  [key=0, style=bold, color=blue];
m3_226 -> m3_227  [key=0, style=solid];
m3_227 -> m3_228  [key=0, style=solid];
m3_227 -> m3_120  [key=2, style=dotted];
m3_228 -> m3_226  [key=0, style=bold, color=blue];
m3_42 -> m3_217  [key=0, style=solid];
m3_217 -> m3_218  [key=0, style=solid];
m3_218 -> m3_42  [key=0, style=bold, color=blue];
m3_112 -> m3_232  [key=0, style=solid];
m3_112 -> m3_233  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m3_232 -> m3_233  [key=0, style=solid];
m3_233 -> m3_234  [key=0, style=solid];
m3_233 -> m3_235  [key=2, style=dotted];
m3_234 -> m3_112  [key=0, style=bold, color=blue];
m3_186 -> m3_248  [key=0, style=solid];
m3_248 -> m3_249  [key=0, style=solid];
m3_248 -> m3_250  [key=2, style=dotted];
m3_249 -> m3_186  [key=0, style=bold, color=blue];
m3_43 -> m3_44  [key=0, style=solid];
m3_44 -> m3_45  [key=0, style=solid];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_38  [key=2, style=dotted];
m3_45 -> m3_50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_46 -> m3_47  [key=0, style=solid];
m3_46 -> m3_24  [key=2, style=dotted];
m3_47 -> m3_48  [key=0, style=solid];
m3_47 -> m3_25  [key=2, style=dotted];
m3_48 -> m3_49  [key=0, style=solid];
m3_48 -> m3_26  [key=2, style=dotted];
m3_49 -> m3_43  [key=0, style=bold, color=blue];
m3_133 -> m3_134  [key=0, style=solid];
m3_134 -> m3_135  [key=0, style=solid];
m3_134 -> m3_121  [key=2, style=dotted];
m3_134 -> m3_139  [key=2, style=dotted];
m3_134 -> m3_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_135 -> m3_136  [key=0, style=solid];
m3_135 -> m3_23  [key=2, style=dotted];
m3_135 -> m3_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_136 -> m3_137  [key=0, style=solid];
m3_136 -> m3_24  [key=2, style=dotted];
m3_136 -> m3_147  [key=1, style=dashed, color=darkseagreen4, label=process];
m3_137 -> m3_138  [key=0, style=solid];
m3_137 -> m3_10  [key=2, style=dotted];
m3_137 -> m3_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_138 -> m3_133  [key=0, style=bold, color=blue];
m3_102 -> m3_103  [key=0, style=solid];
m3_103 -> m3_104  [key=0, style=solid];
m3_104 -> m3_105  [key=0, style=solid];
m3_104 -> m3_23  [key=2, style=dotted];
m3_104 -> m3_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_105 -> m3_106  [key=0, style=solid];
m3_105 -> m3_24  [key=2, style=dotted];
m3_106 -> m3_107  [key=0, style=solid];
m3_106 -> m3_25  [key=2, style=dotted];
m3_107 -> m3_108  [key=0, style=solid];
m3_107 -> m3_26  [key=2, style=dotted];
m3_108 -> m3_102  [key=0, style=bold, color=blue];
m3_213 -> m3_214  [key=0, style=solid];
m3_12 -> m3_13  [key=0, style=solid];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_15  [key=2, style=dotted];
m3_14 -> m3_12  [key=0, style=bold, color=blue];
m3_27 -> m3_28  [key=0, style=solid];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_30  [key=2, style=dotted];
m3_29 -> m3_27  [key=0, style=bold, color=blue];
m3_39 -> m3_40  [key=0, style=solid];
m3_40 -> m3_41  [key=0, style=solid];
m3_40 -> m3_42  [key=2, style=dotted];
m3_41 -> m3_39  [key=0, style=bold, color=blue];
m3_50 -> m3_51  [key=0, style=solid];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_53  [key=2, style=dotted];
m3_52 -> m3_50  [key=0, style=bold, color=blue];
m3_61 -> m3_62  [key=0, style=solid];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_64  [key=2, style=dotted];
m3_63 -> m3_61  [key=0, style=bold, color=blue];
m3_98 -> m3_99  [key=0, style=solid];
m3_99 -> m3_100  [key=0, style=solid];
m3_99 -> m3_101  [key=2, style=dotted];
m3_100 -> m3_98  [key=0, style=bold, color=blue];
m3_109 -> m3_110  [key=0, style=solid];
m3_110 -> m3_111  [key=0, style=solid];
m3_110 -> m3_112  [key=2, style=dotted];
m3_111 -> m3_109  [key=0, style=bold, color=blue];
m3_123 -> m3_124  [key=0, style=solid];
m3_127 -> m3_128  [key=0, style=solid];
m3_131 -> m3_132  [key=0, style=solid];
m3_131 -> m3_25  [key=2, style=dotted];
m3_130 -> m3_131  [key=0, style=solid];
m3_124 -> m3_125  [key=0, style=solid];
m3_124 -> m3_10  [key=2, style=dotted];
m3_124 -> m3_126  [key=2, style=dotted];
m3_125 -> m3_123  [key=0, style=bold, color=blue];
m3_128 -> m3_129  [key=0, style=solid];
m3_128 -> m3_42  [key=2, style=dotted];
m3_129 -> m3_127  [key=0, style=bold, color=blue];
m3_132 -> m3_130  [key=0, style=bold, color=blue];
m3_140 -> m3_141  [key=0, style=solid];
m3_143 -> m3_144  [key=0, style=solid];
m3_147 -> m3_148  [key=0, style=solid];
m3_147 -> m3_25  [key=2, style=dotted];
m3_146 -> m3_147  [key=0, style=solid];
m3_141 -> m3_142  [key=0, style=solid];
m3_141 -> m3_10  [key=2, style=dotted];
m3_141 -> m3_126  [key=2, style=dotted];
m3_142 -> m3_140  [key=0, style=bold, color=blue];
m3_144 -> m3_145  [key=0, style=solid];
m3_144 -> m3_42  [key=2, style=dotted];
m3_145 -> m3_143  [key=0, style=bold, color=blue];
m3_148 -> m3_146  [key=0, style=bold, color=blue];
m3_160 -> m3_161  [key=0, style=solid];
m3_160 -> m3_25  [key=2, style=dotted];
m3_159 -> m3_160  [key=0, style=solid];
m3_161 -> m3_159  [key=0, style=bold, color=blue];
m3_169 -> m3_170  [key=0, style=solid];
m3_174 -> m3_175  [key=0, style=solid];
m3_174 -> m3_25  [key=2, style=dotted];
m3_173 -> m3_174  [key=0, style=solid];
m3_170 -> m3_171  [key=0, style=solid];
m3_170 -> m3_172  [key=2, style=dotted];
m3_171 -> m3_169  [key=0, style=bold, color=blue];
m3_175 -> m3_173  [key=0, style=bold, color=blue];
m3_183 -> m3_184  [key=0, style=solid];
m3_188 -> m3_189  [key=0, style=solid];
m3_188 -> m3_25  [key=2, style=dotted];
m3_187 -> m3_188  [key=0, style=solid];
m3_184 -> m3_185  [key=0, style=solid];
m3_184 -> m3_186  [key=2, style=dotted];
m3_185 -> m3_183  [key=0, style=bold, color=blue];
m3_189 -> m3_187  [key=0, style=bold, color=blue];
m3_196 -> m3_197  [key=0, style=solid];
m3_200 -> m3_201  [key=0, style=solid];
m3_205 -> m3_206  [key=0, style=solid];
m3_205 -> m3_25  [key=2, style=dotted];
m3_204 -> m3_205  [key=0, style=solid];
m3_197 -> m3_198  [key=0, style=solid];
m3_197 -> m3_199  [key=2, style=dotted];
m3_198 -> m3_196  [key=0, style=bold, color=blue];
m3_201 -> m3_202  [key=0, style=solid];
m3_201 -> m3_203  [key=2, style=dotted];
m3_202 -> m3_200  [key=0, style=bold, color=blue];
m3_206 -> m3_204  [key=0, style=bold, color=blue];
m3_214 -> m3_215  [key=0, style=solid];
m3_214 -> m3_216  [key=2, style=dotted];
m3_215 -> m3_213  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_4  [key=2, style=dotted];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_5  [key=2, style=dotted];
m3_3 -> m3_0  [key=0, style=bold, color=blue];
m3_6 -> m3_7  [key=0, style=solid];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_10  [key=2, style=dotted];
m3_7 -> m3_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_8 -> m3_9  [key=0, style=solid];
m3_8 -> m3_11  [key=2, style=dotted];
m3_9 -> m3_6  [key=0, style=bold, color=blue];
m3_149 -> m3_150  [key=0, style=solid];
m3_150 -> m3_151  [key=0, style=solid];
m3_150 -> m3_152  [key=1, style=dashed, color=darkseagreen4, label=type];
m3_151 -> m3_152  [key=0, style=solid];
m3_151 -> m3_78  [key=2, style=dotted];
m3_152 -> m3_153  [key=0, style=solid];
m3_152 -> m3_157  [key=2, style=dotted];
m3_153 -> m3_154  [key=0, style=solid];
m3_153 -> m3_24  [key=2, style=dotted];
m3_153 -> m3_160  [key=1, style=dashed, color=darkseagreen4, label=process];
m3_154 -> m3_155  [key=0, style=solid];
m3_154 -> m3_10  [key=2, style=dotted];
m3_154 -> m3_159  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_155 -> m3_156  [key=0, style=solid];
m3_155 -> m3_158  [key=2, style=dotted];
m3_156 -> m3_149  [key=0, style=bold, color=blue];
m3_80 -> m3_81  [key=0, style=solid];
m3_81 -> m3_82  [key=0, style=solid];
m3_82 -> m3_83  [key=0, style=solid];
m3_82 -> m3_90  [key=2, style=dotted];
m3_82 -> m3_85  [key=1, style=dashed, color=darkseagreen4, label=convertedDate];
m3_83 -> m3_84  [key=0, style=solid];
m3_83 -> m3_85  [key=1, style=dashed, color=darkseagreen4, label=type];
m3_85 -> m3_86  [key=0, style=solid];
m3_85 -> m3_79  [key=2, style=dotted];
m3_84 -> m3_85  [key=0, style=solid];
m3_84 -> m3_78  [key=2, style=dotted];
m3_86 -> m3_87  [key=0, style=solid];
m3_86 -> m3_24  [key=2, style=dotted];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_25  [key=2, style=dotted];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_26  [key=2, style=dotted];
m3_89 -> m3_80  [key=0, style=bold, color=blue];
m3_101 -> m3_239  [key=0, style=solid];
m3_101 -> m3_240  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime"];
m3_239 -> m3_240  [key=0, style=solid];
m3_240 -> m3_241  [key=0, style=solid];
m3_240 -> m3_11  [key=2, style=dotted];
m3_241 -> m3_101  [key=0, style=bold, color=blue];
m3_254 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_45  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_46  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_47  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_56  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_62  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_57  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_58  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_72  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_85  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_86  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_93  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_99  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_95  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_104  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_105  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_106  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_115  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_116  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_128  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_117  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_118  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_131  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_134  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_135  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_144  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_136  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_137  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_147  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_152  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_153  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_154  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_160  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_164  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_165  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_166  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_174  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_177  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_178  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_188  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_191  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_192  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_193  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_194  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_205  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_208  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_209  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_210  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_254 -> m3_251  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.CoreJobPerformanceProcessFacts"];
m3_255 -> m3_131  [key=1, style=dashed, color=darkseagreen4, label=process];
m3_256 -> m3_147  [key=1, style=dashed, color=darkseagreen4, label=process];
m3_257 -> m3_160  [key=1, style=dashed, color=darkseagreen4, label=process];
m3_258 -> m3_174  [key=1, style=dashed, color=darkseagreen4, label=process];
m3_259 -> m3_188  [key=1, style=dashed, color=darkseagreen4, label=process];
m3_260 -> m3_205  [key=1, style=dashed, color=darkseagreen4, label=process];
m4_28 -> m4_29  [key=0, style=solid];
m4_29 -> m4_30  [key=0, style=solid];
m4_29 -> m4_11  [key=2, style=dotted];
m4_29 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_30 -> m4_28  [key=0, style=bold, color=blue];
m4_46 -> m4_373  [key=0, style=solid];
m4_46 -> m4_374  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m4_46 -> m4_375  [key=1, style=dashed, color=darkseagreen4, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>"];
m4_373 -> m4_374  [key=0, style=solid];
m4_374 -> m4_375  [key=0, style=solid];
m4_374 -> m4_80  [key=2, style=dotted];
m4_374 -> m4_89  [key=2, style=dotted];
m4_375 -> m4_376  [key=0, style=solid];
m4_375 -> m4_345  [key=2, style=dotted];
m4_376 -> m4_46  [key=0, style=bold, color=blue];
m4_237 -> m4_238  [key=0, style=solid];
m4_238 -> m4_239  [key=0, style=solid];
m4_238 -> m4_11  [key=2, style=dotted];
m4_238 -> m4_240  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_239 -> m4_237  [key=0, style=bold, color=blue];
m4_196 -> m4_197  [key=0, style=solid];
m4_197 -> m4_198  [key=0, style=solid];
m4_197 -> m4_11  [key=2, style=dotted];
m4_197 -> m4_199  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_198 -> m4_196  [key=0, style=bold, color=blue];
m4_243 -> m4_244  [key=0, style=solid];
m4_244 -> m4_245  [key=0, style=solid];
m4_244 -> m4_249  [key=2, style=dotted];
m4_244 -> m4_254  [key=1, style=dashed, color=darkseagreen4, label=sql];
m4_245 -> m4_246  [key=0, style=solid];
m4_245 -> m4_11  [key=2, style=dotted];
m4_245 -> m4_252  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_245 -> m4_247  [key=1, style=dashed, color=darkseagreen4, label=statistics];
m4_246 -> m4_247  [key=0, style=solid];
m4_246 -> m4_250  [key=2, style=dotted];
m4_246 -> m4_251  [key=2, style=dotted];
m4_246 -> m4_266  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_247 -> m4_248  [key=0, style=solid];
m4_248 -> m4_243  [key=0, style=bold, color=blue];
m4_176 -> m4_177  [key=0, style=solid];
m4_176 -> m4_178  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_177 -> m4_178  [key=0, style=solid];
m4_177 -> m4_21  [key=2, style=dotted];
m4_178 -> m4_179  [key=0, style=solid];
m4_178 -> m4_181  [key=2, style=dotted];
m4_178 -> m4_183  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobIds];
m4_179 -> m4_180  [key=0, style=solid];
m4_179 -> m4_141  [key=2, style=dotted];
m4_179 -> m4_182  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_180 -> m4_176  [key=0, style=bold, color=blue];
m4_124 -> m4_125  [key=0, style=solid];
m4_125 -> m4_126  [key=0, style=solid];
m4_125 -> m4_134  [key=2, style=dotted];
m4_125 -> m4_135  [key=2, style=dotted];
m4_125 -> m4_136  [key=2, style=dotted];
m4_125 -> m4_137  [key=2, style=dotted];
m4_125 -> m4_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_125 -> m4_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_125 -> m4_151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_125 -> m4_154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_125 -> m4_127  [key=1, style=dashed, color=darkseagreen4, label=tuples];
m4_126 -> m4_127  [key=0, style=solid];
m4_126 -> m4_138  [key=2, style=dotted];
m4_126 -> m4_131  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_126 -> m4_132  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_127 -> m4_128  [key=0, style=solid];
m4_127 -> m4_132  [key=0, style=solid];
m4_127 -> m4_129  [key=1, style=dashed, color=darkseagreen4, label=tuple];
m4_127 -> m4_131  [key=1, style=dashed, color=darkseagreen4, label=tuple];
m4_131 -> m4_127  [key=0, style=solid];
m4_131 -> m4_142  [key=2, style=dotted];
m4_131 -> m4_92  [key=2, style=dotted];
m4_132 -> m4_133  [key=0, style=solid];
m4_128 -> m4_129  [key=0, style=solid];
m4_128 -> m4_139  [key=2, style=dotted];
m4_128 -> m4_130  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m4_128 -> m4_158  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m4_129 -> m4_130  [key=0, style=solid];
m4_129 -> m4_140  [key=2, style=dotted];
m4_129 -> m4_131  [key=1, style=dashed, color=darkseagreen4, label=counters];
m4_130 -> m4_131  [key=0, style=solid];
m4_130 -> m4_141  [key=2, style=dotted];
m4_130 -> m4_157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_133 -> m4_124  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
m4_0 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
m4_0 -> m4_4  [key=1, style=dashed, color=red, label="int?"];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=0, style=solid];
m4_2 -> m4_5  [key=0, style=solid];
m4_2 -> m4_6  [key=2, style=dotted];
m4_2 -> m4_7  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid, color=red];
m4_4 -> m4_5  [key=0, style=solid, color=red];
m4_5 -> m4_0  [key=0, style=bold, color=blue];
m4_114 -> m4_115  [key=0, style=solid];
m4_114 -> m4_118  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_115 -> m4_116  [key=0, style=solid];
m4_115 -> m4_11  [key=2, style=dotted];
m4_115 -> m4_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_116 -> m4_114  [key=0, style=bold, color=blue];
m4_356 -> m4_357  [key=0, style=solid];
m4_12 -> m4_13  [key=0, style=solid];
m4_13 -> m4_14  [key=0, style=solid];
m4_13 -> m4_15  [key=2, style=dotted];
m4_14 -> m4_12  [key=0, style=bold, color=blue];
m4_31 -> m4_32  [key=0, style=solid];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_15  [key=2, style=dotted];
m4_33 -> m4_31  [key=0, style=bold, color=blue];
m4_37 -> m4_38  [key=0, style=solid];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_15  [key=2, style=dotted];
m4_39 -> m4_37  [key=0, style=bold, color=blue];
m4_44 -> m4_45  [key=0, style=solid];
m4_44 -> m4_46  [key=2, style=dotted];
m4_44 -> m4_47  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_43 -> m4_44  [key=0, style=solid];
m4_45 -> m4_43  [key=0, style=bold, color=blue];
m4_47 -> m4_48  [key=0, style=solid];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_50  [key=2, style=dotted];
m4_48 -> m4_51  [key=2, style=dotted];
m4_48 -> m4_52  [key=2, style=dotted];
m4_48 -> m4_53  [key=2, style=dotted];
m4_49 -> m4_47  [key=0, style=bold, color=blue];
m4_58 -> m4_59  [key=0, style=solid];
m4_58 -> m4_46  [key=2, style=dotted];
m4_58 -> m4_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_57 -> m4_58  [key=0, style=solid];
m4_59 -> m4_57  [key=0, style=bold, color=blue];
m4_60 -> m4_61  [key=0, style=solid];
m4_61 -> m4_62  [key=0, style=solid];
m4_61 -> m4_63  [key=2, style=dotted];
m4_61 -> m4_51  [key=2, style=dotted];
m4_61 -> m4_53  [key=2, style=dotted];
m4_62 -> m4_60  [key=0, style=bold, color=blue];
m4_67 -> m4_68  [key=0, style=solid];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_70  [key=2, style=dotted];
m4_69 -> m4_67  [key=0, style=bold, color=blue];
m4_74 -> m4_75  [key=0, style=solid];
m4_75 -> m4_76  [key=0, style=solid];
m4_75 -> m4_70  [key=2, style=dotted];
m4_76 -> m4_74  [key=0, style=bold, color=blue];
m4_81 -> m4_82  [key=0, style=solid];
m4_82 -> m4_83  [key=0, style=solid];
m4_82 -> m4_80  [key=2, style=dotted];
m4_82 -> m4_89  [key=2, style=dotted];
m4_82 -> m4_84  [key=1, style=dashed, color=darkseagreen4, label=servers];
m4_83 -> m4_84  [key=0, style=solid];
m4_83 -> m4_90  [key=2, style=dotted];
m4_83 -> m4_86  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_83 -> m4_87  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_84 -> m4_85  [key=0, style=solid];
m4_84 -> m4_87  [key=0, style=solid];
m4_84 -> m4_86  [key=1, style=dashed, color=darkseagreen4, label=server];
m4_86 -> m4_84  [key=0, style=solid];
m4_86 -> m4_91  [key=2, style=dotted];
m4_86 -> m4_92  [key=2, style=dotted];
m4_87 -> m4_88  [key=0, style=solid];
m4_85 -> m4_86  [key=0, style=solid];
m4_85 -> m4_80  [key=2, style=dotted];
m4_88 -> m4_81  [key=0, style=bold, color=blue];
m4_97 -> m4_98  [key=0, style=solid];
m4_97 -> m4_46  [key=2, style=dotted];
m4_97 -> m4_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_96 -> m4_97  [key=0, style=solid];
m4_98 -> m4_96  [key=0, style=bold, color=blue];
m4_99 -> m4_100  [key=0, style=solid];
m4_100 -> m4_101  [key=0, style=solid];
m4_100 -> m4_102  [key=2, style=dotted];
m4_100 -> m4_51  [key=2, style=dotted];
m4_100 -> m4_53  [key=2, style=dotted];
m4_101 -> m4_99  [key=0, style=bold, color=blue];
m4_107 -> m4_108  [key=0, style=solid];
m4_107 -> m4_46  [key=2, style=dotted];
m4_107 -> m4_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_106 -> m4_107  [key=0, style=solid];
m4_108 -> m4_106  [key=0, style=bold, color=blue];
m4_109 -> m4_110  [key=0, style=solid];
m4_110 -> m4_111  [key=0, style=solid];
m4_110 -> m4_112  [key=2, style=dotted];
m4_110 -> m4_51  [key=2, style=dotted];
m4_110 -> m4_52  [key=2, style=dotted];
m4_110 -> m4_113  [key=2, style=dotted];
m4_110 -> m4_53  [key=2, style=dotted];
m4_111 -> m4_109  [key=0, style=bold, color=blue];
m4_118 -> m4_119  [key=0, style=solid];
m4_118 -> m4_46  [key=2, style=dotted];
m4_118 -> m4_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_117 -> m4_118  [key=0, style=solid];
m4_119 -> m4_117  [key=0, style=bold, color=blue];
m4_120 -> m4_121  [key=0, style=solid];
m4_121 -> m4_122  [key=0, style=solid];
m4_121 -> m4_123  [key=2, style=dotted];
m4_121 -> m4_51  [key=2, style=dotted];
m4_121 -> m4_53  [key=2, style=dotted];
m4_122 -> m4_120  [key=0, style=bold, color=blue];
m4_143 -> m4_144  [key=0, style=solid];
m4_147 -> m4_148  [key=0, style=solid];
m4_151 -> m4_152  [key=0, style=solid];
m4_154 -> m4_155  [key=0, style=solid];
m4_158 -> m4_159  [key=0, style=solid];
m4_158 -> m4_134  [key=2, style=dotted];
m4_158 -> m4_137  [key=2, style=dotted];
m4_158 -> m4_160  [key=2, style=dotted];
m4_158 -> m4_161  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_157 -> m4_158  [key=0, style=solid];
m4_144 -> m4_145  [key=0, style=solid];
m4_144 -> m4_146  [key=2, style=dotted];
m4_145 -> m4_143  [key=0, style=bold, color=blue];
m4_148 -> m4_149  [key=0, style=solid];
m4_148 -> m4_150  [key=2, style=dotted];
m4_149 -> m4_147  [key=0, style=bold, color=blue];
m4_152 -> m4_153  [key=0, style=solid];
m4_153 -> m4_151  [key=0, style=bold, color=blue];
m4_155 -> m4_156  [key=0, style=solid];
m4_156 -> m4_154  [key=0, style=bold, color=blue];
m4_159 -> m4_157  [key=0, style=bold, color=blue];
m4_161 -> m4_162  [key=0, style=solid];
m4_162 -> m4_163  [key=0, style=solid];
m4_163 -> m4_161  [key=0, style=bold, color=blue];
m4_171 -> m4_172  [key=0, style=solid];
m4_171 -> m4_134  [key=2, style=dotted];
m4_171 -> m4_137  [key=2, style=dotted];
m4_171 -> m4_160  [key=2, style=dotted];
m4_171 -> m4_173  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_170 -> m4_171  [key=0, style=solid];
m4_172 -> m4_170  [key=0, style=bold, color=blue];
m4_173 -> m4_174  [key=0, style=solid];
m4_174 -> m4_175  [key=0, style=solid];
m4_175 -> m4_173  [key=0, style=bold, color=blue];
m4_183 -> m4_184  [key=0, style=solid];
m4_183 -> m4_134  [key=2, style=dotted];
m4_183 -> m4_137  [key=2, style=dotted];
m4_183 -> m4_185  [key=2, style=dotted];
m4_183 -> m4_186  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_182 -> m4_183  [key=0, style=solid];
m4_184 -> m4_182  [key=0, style=bold, color=blue];
m4_186 -> m4_187  [key=0, style=solid];
m4_187 -> m4_188  [key=0, style=solid];
m4_188 -> m4_186  [key=0, style=bold, color=blue];
m4_192 -> m4_193  [key=0, style=solid];
m4_193 -> m4_194  [key=0, style=solid];
m4_193 -> m4_195  [key=2, style=dotted];
m4_194 -> m4_192  [key=0, style=bold, color=blue];
m4_199 -> m4_200  [key=0, style=solid];
m4_200 -> m4_201  [key=0, style=solid];
m4_200 -> m4_195  [key=2, style=dotted];
m4_201 -> m4_199  [key=0, style=bold, color=blue];
m4_207 -> m4_208  [key=0, style=solid];
m4_207 -> m4_215  [key=2, style=dotted];
m4_207 -> m4_211  [key=1, style=dashed, color=darkseagreen4, label=multi];
m4_207 -> m4_212  [key=1, style=dashed, color=darkseagreen4, label=multi];
m4_205 -> m4_206  [key=0, style=solid];
m4_205 -> m4_207  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m4_206 -> m4_207  [key=0, style=solid];
m4_208 -> m4_209  [key=0, style=solid];
m4_208 -> m4_80  [key=2, style=dotted];
m4_208 -> m4_216  [key=2, style=dotted];
m4_208 -> m4_213  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_211 -> m4_212  [key=0, style=solid];
m4_211 -> m4_80  [key=2, style=dotted];
m4_211 -> m4_217  [key=2, style=dotted];
m4_211 -> m4_220  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_211 -> m4_223  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_211 -> m4_213  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m4_212 -> m4_213  [key=0, style=solid];
m4_212 -> m4_80  [key=2, style=dotted];
m4_212 -> m4_89  [key=2, style=dotted];
m4_212 -> m4_134  [key=2, style=dotted];
m4_212 -> m4_226  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_209 -> m4_210  [key=0, style=solid];
m4_209 -> m4_211  [key=0, style=solid];
m4_213 -> m4_214  [key=0, style=solid];
m4_213 -> m4_218  [key=2, style=dotted];
m4_213 -> m4_219  [key=2, style=dotted];
m4_210 -> m4_214  [key=0, style=solid];
m4_220 -> m4_221  [key=0, style=solid];
m4_223 -> m4_224  [key=0, style=solid];
m4_226 -> m4_227  [key=0, style=solid];
m4_214 -> m4_205  [key=0, style=bold, color=blue];
m4_221 -> m4_222  [key=0, style=solid];
m4_222 -> m4_220  [key=0, style=bold, color=blue];
m4_224 -> m4_225  [key=0, style=solid];
m4_225 -> m4_223  [key=0, style=bold, color=blue];
m4_227 -> m4_228  [key=0, style=solid];
m4_227 -> m4_229  [key=2, style=dotted];
m4_227 -> m4_230  [key=2, style=dotted];
m4_227 -> m4_80  [key=2, style=dotted];
m4_228 -> m4_226  [key=0, style=bold, color=blue];
m4_234 -> m4_235  [key=0, style=solid];
m4_235 -> m4_236  [key=0, style=solid];
m4_235 -> m4_15  [key=2, style=dotted];
m4_236 -> m4_234  [key=0, style=bold, color=blue];
m4_240 -> m4_241  [key=0, style=solid];
m4_241 -> m4_242  [key=0, style=solid];
m4_241 -> m4_15  [key=2, style=dotted];
m4_242 -> m4_240  [key=0, style=bold, color=blue];
m4_254 -> m4_255  [key=0, style=solid];
m4_254 -> m4_215  [key=2, style=dotted];
m4_254 -> m4_256  [key=1, style=dashed, color=darkseagreen4, label=multi];
m4_254 -> m4_257  [key=1, style=dashed, color=darkseagreen4, label=multi];
m4_254 -> m4_258  [key=1, style=dashed, color=darkseagreen4, label=multi];
m4_254 -> m4_259  [key=1, style=dashed, color=darkseagreen4, label=multi];
m4_254 -> m4_260  [key=1, style=dashed, color=darkseagreen4, label=multi];
m4_254 -> m4_261  [key=1, style=dashed, color=darkseagreen4, label=multi];
m4_254 -> m4_262  [key=1, style=dashed, color=darkseagreen4, label=multi];
m4_252 -> m4_253  [key=0, style=solid];
m4_252 -> m4_254  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m4_266 -> m4_267  [key=0, style=solid];
m4_253 -> m4_254  [key=0, style=solid];
m4_253 -> m4_265  [key=2, style=dotted];
m4_253 -> m4_255  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_253 -> m4_256  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_253 -> m4_257  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_253 -> m4_258  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_253 -> m4_259  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_253 -> m4_260  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_253 -> m4_261  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_253 -> m4_262  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_253 -> m4_263  [key=1, style=dashed, color=darkseagreen4, label=stats];
m4_255 -> m4_256  [key=0, style=solid];
m4_255 -> m4_80  [key=2, style=dotted];
m4_256 -> m4_257  [key=0, style=solid];
m4_256 -> m4_80  [key=2, style=dotted];
m4_257 -> m4_258  [key=0, style=solid];
m4_257 -> m4_80  [key=2, style=dotted];
m4_258 -> m4_259  [key=0, style=solid];
m4_258 -> m4_80  [key=2, style=dotted];
m4_259 -> m4_260  [key=0, style=solid];
m4_259 -> m4_80  [key=2, style=dotted];
m4_260 -> m4_261  [key=0, style=solid];
m4_260 -> m4_80  [key=2, style=dotted];
m4_261 -> m4_262  [key=0, style=solid];
m4_261 -> m4_80  [key=2, style=dotted];
m4_262 -> m4_263  [key=0, style=solid];
m4_262 -> m4_80  [key=2, style=dotted];
m4_263 -> m4_264  [key=0, style=solid];
m4_264 -> m4_252  [key=0, style=bold, color=blue];
m4_267 -> m4_268  [key=0, style=solid];
m4_267 -> m4_146  [key=2, style=dotted];
m4_267 -> m4_269  [key=2, style=dotted];
m4_268 -> m4_266  [key=0, style=bold, color=blue];
m4_283 -> m4_284  [key=0, style=solid];
m4_283 -> m4_285  [key=2, style=dotted];
m4_282 -> m4_283  [key=0, style=solid];
m4_286 -> m4_287  [key=0, style=solid];
m4_284 -> m4_282  [key=0, style=bold, color=blue];
m4_287 -> m4_288  [key=0, style=solid];
m4_288 -> m4_286  [key=0, style=bold, color=blue];
m4_301 -> m4_302  [key=0, style=solid];
m4_301 -> m4_285  [key=2, style=dotted];
m4_300 -> m4_301  [key=0, style=solid];
m4_303 -> m4_304  [key=0, style=solid];
m4_302 -> m4_300  [key=0, style=bold, color=blue];
m4_304 -> m4_305  [key=0, style=solid];
m4_305 -> m4_303  [key=0, style=bold, color=blue];
m4_325 -> m4_326  [key=0, style=solid];
m4_328 -> m4_329  [key=0, style=solid];
m4_326 -> m4_327  [key=0, style=solid];
m4_327 -> m4_325  [key=0, style=bold, color=blue];
m4_329 -> m4_330  [key=0, style=solid];
m4_330 -> m4_328  [key=0, style=bold, color=blue];
m4_346 -> m4_347  [key=0, style=solid];
m4_349 -> m4_350  [key=0, style=solid];
m4_353 -> m4_354  [key=0, style=solid];
m4_353 -> m4_321  [key=2, style=dotted];
m4_353 -> m4_355  [key=2, style=dotted];
m4_352 -> m4_353  [key=0, style=solid];
m4_347 -> m4_348  [key=0, style=solid];
m4_348 -> m4_346  [key=0, style=bold, color=blue];
m4_350 -> m4_351  [key=0, style=solid];
m4_351 -> m4_349  [key=0, style=bold, color=blue];
m4_354 -> m4_352  [key=0, style=bold, color=blue];
m4_357 -> m4_358  [key=0, style=solid];
m4_357 -> m4_359  [key=2, style=dotted];
m4_357 -> m4_51  [key=2, style=dotted];
m4_357 -> m4_53  [key=2, style=dotted];
m4_358 -> m4_356  [key=0, style=bold, color=blue];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_25  [key=1, style=dashed, color=red, label=string];
m4_24 -> m4_25  [key=0, style=solid, color=red];
m4_24 -> m4_21  [key=2, style=dotted];
m4_25 -> m4_26  [key=0, style=solid, color=red];
m4_25 -> m4_22  [key=2, style=dotted, color=red];
m4_26 -> m4_27  [key=0, style=solid];
m4_27 -> m4_23  [key=0, style=bold, color=blue];
m4_393 -> m4_394  [key=0, style=solid];
m4_393 -> m4_395  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m4_394 -> m4_395  [key=0, style=solid];
m4_395 -> m4_396  [key=0, style=solid];
m4_395 -> m4_80  [key=2, style=dotted];
m4_395 -> m4_89  [key=2, style=dotted];
m4_395 -> m4_397  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_396 -> m4_397  [key=0, style=solid];
m4_396 -> m4_401  [key=2, style=dotted];
m4_396 -> m4_398  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_396 -> m4_399  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_397 -> m4_398  [key=0, style=solid];
m4_397 -> m4_399  [key=0, style=solid];
m4_398 -> m4_397  [key=0, style=solid];
m4_398 -> m4_402  [key=2, style=dotted];
m4_398 -> m4_403  [key=2, style=dotted];
m4_398 -> m4_404  [key=2, style=dotted];
m4_398 -> m4_219  [key=2, style=dotted];
m4_398 -> m4_92  [key=2, style=dotted];
m4_399 -> m4_400  [key=0, style=solid];
m4_399 -> m4_392  [key=2, style=dotted];
m4_400 -> m4_393  [key=0, style=bold, color=blue];
m4_103 -> m4_104  [key=0, style=solid];
m4_103 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_104 -> m4_105  [key=0, style=solid];
m4_104 -> m4_11  [key=2, style=dotted];
m4_104 -> m4_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_105 -> m4_103  [key=0, style=bold, color=blue];
m4_195 -> m4_270  [key=0, style=solid];
m4_195 -> m4_277  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_195 -> m4_283  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_195 -> m4_278  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m4_270 -> m4_271  [key=0, style=solid];
m4_270 -> m4_274  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_270 -> m4_275  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_277 -> m4_278  [key=0, style=solid];
m4_277 -> m4_217  [key=2, style=dotted];
m4_277 -> m4_282  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_277 -> m4_286  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_278 -> m4_279  [key=0, style=solid];
m4_278 -> m4_281  [key=2, style=dotted];
m4_271 -> m4_272  [key=0, style=solid];
m4_271 -> m4_90  [key=2, style=dotted];
m4_271 -> m4_274  [key=1, style=dashed, color=darkseagreen4, label=dates];
m4_271 -> m4_277  [key=1, style=dashed, color=darkseagreen4, label=dates];
m4_274 -> m4_275  [key=0, style=solid];
m4_274 -> m4_92  [key=2, style=dotted];
m4_275 -> m4_276  [key=0, style=solid];
m4_275 -> m4_280  [key=2, style=dotted];
m4_275 -> m4_275  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_272 -> m4_273  [key=0, style=solid];
m4_272 -> m4_276  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_273 -> m4_274  [key=0, style=solid];
m4_273 -> m4_277  [key=0, style=solid];
m4_276 -> m4_273  [key=0, style=solid];
m4_276 -> m4_276  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_279 -> m4_195  [key=0, style=bold, color=blue];
m4_202 -> m4_203  [key=0, style=solid];
m4_202 -> m4_207  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_203 -> m4_204  [key=0, style=solid];
m4_203 -> m4_11  [key=2, style=dotted];
m4_203 -> m4_205  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_204 -> m4_202  [key=0, style=bold, color=blue];
m4_8 -> m4_9  [key=0, style=solid];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_11  [key=2, style=dotted];
m4_9 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_10 -> m4_8  [key=0, style=bold, color=blue];
m4_230 -> m4_405  [key=0, style=solid];
m4_405 -> m4_230  [key=0, style=bold, color=blue];
m4_70 -> m4_289  [key=0, style=solid];
m4_70 -> m4_296  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_70 -> m4_301  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_70 -> m4_297  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m4_289 -> m4_290  [key=0, style=solid];
m4_289 -> m4_293  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_289 -> m4_294  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_296 -> m4_297  [key=0, style=solid];
m4_296 -> m4_217  [key=2, style=dotted];
m4_296 -> m4_300  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_296 -> m4_303  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_297 -> m4_298  [key=0, style=solid];
m4_297 -> m4_281  [key=2, style=dotted];
m4_290 -> m4_291  [key=0, style=solid];
m4_290 -> m4_90  [key=2, style=dotted];
m4_290 -> m4_293  [key=1, style=dashed, color=darkseagreen4, label=dates];
m4_290 -> m4_296  [key=1, style=dashed, color=darkseagreen4, label=dates];
m4_293 -> m4_294  [key=0, style=solid];
m4_293 -> m4_92  [key=2, style=dotted];
m4_294 -> m4_295  [key=0, style=solid];
m4_294 -> m4_299  [key=2, style=dotted];
m4_294 -> m4_294  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m4_291 -> m4_292  [key=0, style=solid];
m4_291 -> m4_295  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_292 -> m4_293  [key=0, style=solid];
m4_292 -> m4_296  [key=0, style=solid];
m4_295 -> m4_292  [key=0, style=solid];
m4_295 -> m4_295  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_298 -> m4_70  [key=0, style=bold, color=blue];
m4_11 -> m4_336  [key=0, style=solid];
m4_336 -> m4_337  [key=0, style=solid];
m4_336 -> m4_338  [key=2, style=dotted];
m4_337 -> m4_11  [key=0, style=bold, color=blue];
m4_231 -> m4_232  [key=0, style=solid];
m4_232 -> m4_233  [key=0, style=solid];
m4_232 -> m4_11  [key=2, style=dotted];
m4_232 -> m4_234  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_233 -> m4_231  [key=0, style=bold, color=blue];
m4_93 -> m4_94  [key=0, style=solid];
m4_93 -> m4_97  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_94 -> m4_95  [key=0, style=solid];
m4_94 -> m4_11  [key=2, style=dotted];
m4_94 -> m4_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_95 -> m4_93  [key=0, style=bold, color=blue];
m4_364 -> m4_365  [key=0, style=solid];
m4_364 -> m4_366  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_365 -> m4_366  [key=0, style=solid];
m4_365 -> m4_371  [key=2, style=dotted];
m4_365 -> m4_367  [key=1, style=dashed, color=darkseagreen4, label=data];
m4_366 -> m4_367  [key=0, style=solid];
m4_367 -> m4_370  [key=0, style=solid];
m4_367 -> m4_372  [key=2, style=dotted];
m4_368 -> m4_369  [key=0, style=solid];
m4_369 -> m4_370  [key=0, style=solid];
m4_370 -> m4_364  [key=0, style=bold, color=blue];
m4_77 -> m4_78  [key=0, style=solid];
m4_78 -> m4_79  [key=0, style=solid];
m4_78 -> m4_80  [key=2, style=dotted];
m4_78 -> m4_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_79 -> m4_77  [key=0, style=bold, color=blue];
m4_21 -> m4_331  [key=0, style=solid];
m4_331 -> m4_332  [key=0, style=solid];
m4_331 -> m4_335  [key=2, style=dotted];
m4_332 -> m4_333  [key=0, style=solid];
m4_332 -> m4_146  [key=2, style=dotted];
m4_333 -> m4_334  [key=0, style=solid];
m4_334 -> m4_21  [key=0, style=bold, color=blue];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_44  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_11  [key=2, style=dotted];
m4_41 -> m4_43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_42 -> m4_40  [key=0, style=bold, color=blue];
m4_54 -> m4_55  [key=0, style=solid];
m4_54 -> m4_58  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_55 -> m4_56  [key=0, style=solid];
m4_55 -> m4_11  [key=2, style=dotted];
m4_55 -> m4_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_56 -> m4_54  [key=0, style=bold, color=blue];
m4_71 -> m4_72  [key=0, style=solid];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_11  [key=2, style=dotted];
m4_72 -> m4_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_73 -> m4_71  [key=0, style=bold, color=blue];
m4_189 -> m4_190  [key=0, style=solid];
m4_190 -> m4_191  [key=0, style=solid];
m4_190 -> m4_11  [key=2, style=dotted];
m4_190 -> m4_192  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_191 -> m4_189  [key=0, style=bold, color=blue];
m4_15 -> m4_360  [key=0, style=solid];
m4_15 -> m4_361  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m4_360 -> m4_361  [key=0, style=solid];
m4_361 -> m4_362  [key=0, style=solid];
m4_361 -> m4_80  [key=2, style=dotted];
m4_362 -> m4_363  [key=0, style=solid];
m4_363 -> m4_15  [key=0, style=bold, color=blue];
m4_377 -> m4_378  [key=0, style=solid];
m4_377 -> m4_379  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>"];
m4_377 -> m4_384  [key=1, style=dashed, color=darkseagreen4, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary<string, string>, TDto>"];
m4_378 -> m4_379  [key=0, style=solid];
m4_378 -> m4_388  [key=2, style=dotted];
m4_378 -> m4_385  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_378 -> m4_386  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_379 -> m4_380  [key=0, style=solid];
m4_379 -> m4_386  [key=0, style=solid];
m4_379 -> m4_381  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_379 -> m4_382  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_379 -> m4_384  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_379 -> m4_385  [key=1, style=dashed, color=darkseagreen4, label=job];
m4_384 -> m4_385  [key=0, style=solid];
m4_384 -> m4_364  [key=2, style=dotted];
m4_384 -> m4_389  [key=2, style=dotted];
m4_385 -> m4_379  [key=0, style=solid];
m4_385 -> m4_390  [key=2, style=dotted];
m4_385 -> m4_391  [key=2, style=dotted];
m4_385 -> m4_92  [key=2, style=dotted];
m4_386 -> m4_387  [key=0, style=solid];
m4_386 -> m4_392  [key=2, style=dotted];
m4_380 -> m4_381  [key=0, style=solid];
m4_380 -> m4_385  [key=1, style=dashed, color=darkseagreen4, label=dto];
m4_381 -> m4_382  [key=0, style=solid];
m4_381 -> m4_385  [key=0, style=solid];
m4_382 -> m4_383  [key=0, style=solid];
m4_382 -> m4_371  [key=2, style=dotted];
m4_383 -> m4_384  [key=0, style=solid];
m4_383 -> m4_230  [key=2, style=dotted];
m4_387 -> m4_377  [key=0, style=bold, color=blue];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_21  [key=2, style=dotted];
m4_18 -> m4_19  [key=0, style=solid];
m4_18 -> m4_22  [key=2, style=dotted];
m4_19 -> m4_20  [key=0, style=solid];
m4_20 -> m4_16  [key=0, style=bold, color=blue];
m4_339 -> m4_340  [key=0, style=solid];
m4_339 -> m4_341  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m4_339 -> m4_342  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
m4_340 -> m4_341  [key=0, style=solid];
m4_341 -> m4_342  [key=0, style=solid];
m4_341 -> m4_80  [key=2, style=dotted];
m4_341 -> m4_217  [key=2, style=dotted];
m4_341 -> m4_346  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_341 -> m4_349  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_341 -> m4_353  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m4_342 -> m4_343  [key=0, style=solid];
m4_342 -> m4_134  [key=2, style=dotted];
m4_342 -> m4_89  [key=2, style=dotted];
m4_342 -> m4_352  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_343 -> m4_344  [key=0, style=solid];
m4_343 -> m4_345  [key=2, style=dotted];
m4_343 -> m4_356  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_344 -> m4_339  [key=0, style=bold, color=blue];
m4_306 -> m4_307  [key=0, style=solid];
m4_306 -> m4_308  [key=1, style=dashed, color=darkseagreen4, label=DbConnection];
m4_306 -> m4_309  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m4_306 -> m4_314  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m4_306 -> m4_315  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m4_306 -> m4_316  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
m4_307 -> m4_308  [key=0, style=solid];
m4_308 -> m4_309  [key=0, style=solid];
m4_308 -> m4_320  [key=2, style=dotted];
m4_308 -> m4_217  [key=2, style=dotted];
m4_308 -> m4_325  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_308 -> m4_328  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_308 -> m4_310  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m4_308 -> m4_311  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m4_308 -> m4_315  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m4_309 -> m4_310  [key=0, style=solid];
m4_309 -> m4_312  [key=0, style=solid];
m4_309 -> m4_311  [key=1, style=dashed, color=darkseagreen4, label=key];
m4_314 -> m4_315  [key=0, style=solid];
m4_314 -> m4_318  [key=0, style=solid];
m4_315 -> m4_316  [key=0, style=solid];
m4_315 -> m4_324  [key=2, style=dotted];
m4_316 -> m4_317  [key=0, style=solid];
m4_316 -> m4_324  [key=2, style=dotted];
m4_316 -> m4_322  [key=2, style=dotted];
m4_310 -> m4_311  [key=0, style=solid];
m4_310 -> m4_309  [key=0, style=solid];
m4_310 -> m4_321  [key=2, style=dotted];
m4_311 -> m4_309  [key=0, style=solid];
m4_311 -> m4_322  [key=2, style=dotted];
m4_312 -> m4_313  [key=0, style=solid];
m4_312 -> m4_323  [key=2, style=dotted];
m4_312 -> m4_316  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_312 -> m4_318  [key=1, style=dashed, color=darkseagreen4, label=result];
m4_313 -> m4_314  [key=0, style=solid];
m4_313 -> m4_315  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_313 -> m4_316  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_313 -> m4_317  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_318 -> m4_319  [key=0, style=solid];
m4_317 -> m4_314  [key=0, style=solid];
m4_317 -> m4_317  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_319 -> m4_306  [key=0, style=bold, color=blue];
m4_64 -> m4_65  [key=0, style=solid];
m4_65 -> m4_66  [key=0, style=solid];
m4_65 -> m4_11  [key=2, style=dotted];
m4_65 -> m4_67  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_66 -> m4_64  [key=0, style=bold, color=blue];
m4_164 -> m4_165  [key=0, style=solid];
m4_164 -> m4_166  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_165 -> m4_166  [key=0, style=solid];
m4_165 -> m4_21  [key=2, style=dotted];
m4_166 -> m4_167  [key=0, style=solid];
m4_166 -> m4_169  [key=2, style=dotted];
m4_166 -> m4_171  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m4_167 -> m4_168  [key=0, style=solid];
m4_167 -> m4_141  [key=2, style=dotted];
m4_167 -> m4_170  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_168 -> m4_164  [key=0, style=bold, color=blue];
m4_34 -> m4_35  [key=0, style=solid];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_11  [key=2, style=dotted];
m4_35 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_36 -> m4_34  [key=0, style=bold, color=blue];
m4_406 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_4  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_32  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_44  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_58  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_68  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_72  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_82  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_97  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_104  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_115  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_118  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_125  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_130  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_158  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_165  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_167  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_171  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_177  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_183  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_190  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_193  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_197  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_200  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_203  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_206  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_207  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_213  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_232  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_235  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_238  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_241  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_244  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_245  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_254  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_246  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_278  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_297  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_307  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_308  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_331  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_336  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_340  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_341  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_343  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_360  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_361  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_373  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_374  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_375  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_394  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_395  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_406 -> m4_398  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
m4_407 -> m4_44  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_408 -> m4_44  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_409 -> m4_58  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_410 -> m4_58  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_411 -> m4_97  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_412 -> m4_97  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_413 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_414 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_415 -> m4_118  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_416 -> m4_118  [key=1, style=dashed, color=darkseagreen4, label=int];
m4_417 -> m4_158  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m4_418 -> m4_171  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
m4_419 -> m4_183  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobIds];
m4_420 -> m4_207  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_421 -> m4_254  [key=1, style=dashed, color=darkseagreen4, label=sql];
m4_422 -> m4_283  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_423 -> m4_301  [key=1, style=dashed, color=darkseagreen4, label=string];
m4_424 -> m4_353  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m5_94 -> m5_95  [key=0, style=solid];
m5_50 -> m5_51  [key=0, style=solid, color=green];
m5_50 -> m5_52  [key=1, style=dashed, color=green, label="System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.Job>"];
m5_50 -> m5_54  [key=1, style=dashed, color=green, label="System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m5_51 -> m5_52  [key=0, style=solid, color=green];
m5_51 -> m5_58  [key=2, style=dotted, color=green];
m5_51 -> m5_55  [key=1, style=dashed, color=green, label=result];
m5_51 -> m5_56  [key=1, style=dashed, color=darkseagreen4, label=manager];
m5_51 -> m5_44  [key=2, style=dotted];
m5_52 -> m5_53  [key=0, style=solid, color=green];
m5_52 -> m5_56  [key=0, style=solid, color=green];
m5_52 -> m5_54  [key=1, style=dashed, color=green, label=job];
m5_52 -> m5_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_52 -> m5_33  [key=2, style=dotted];
m5_55 -> m5_52  [key=0, style=solid, color=green];
m5_55 -> m5_62  [key=2, style=dotted, color=green];
m5_55 -> m5_63  [key=2, style=dotted, color=green];
m5_55 -> m5_64  [key=2, style=dotted, color=green];
m5_55 -> m5_56  [key=0, style=solid];
m5_56 -> m5_57  [key=0, style=solid, color=green];
m5_56 -> m5_65  [key=2, style=dotted, color=green];
m5_56 -> m5_48  [key=2, style=dotted];
m5_56 -> m5_49  [key=2, style=dotted];
m5_53 -> m5_54  [key=0, style=solid, color=green];
m5_53 -> m5_59  [key=2, style=dotted, color=green];
m5_53 -> m5_34  [key=2, style=dotted];
m5_54 -> m5_55  [key=0, style=solid, color=green];
m5_54 -> m5_60  [key=2, style=dotted, color=green];
m5_54 -> m5_61  [key=2, style=dotted, color=green];
m5_54 -> m5_50  [key=0, style=bold, color=blue];
m5_57 -> m5_50  [key=0, style=bold, color=blue];
m5_57 -> m5_55  [key=0, style=bold, color=blue];
m5_62 -> m5_58  [key=0, style=bold, color=blue];
m5_43 -> m5_39  [key=0, style=bold, color=blue];
m5_177 -> m5_178  [key=0, style=solid];
m5_180 -> m5_181  [key=0, style=solid];
m5_180 -> m5_160  [key=2, style=dotted];
m5_180 -> m5_187  [key=1, style=dashed, color=darkseagreen4, label=multi];
m5_180 -> m5_188  [key=1, style=dashed, color=darkseagreen4, label=multi];
m5_180 -> m5_189  [key=1, style=dashed, color=darkseagreen4, label=multi];
m5_179 -> m5_180  [key=0, style=solid];
m5_181 -> m5_182  [key=0, style=solid];
m5_181 -> m5_193  [key=2, style=dotted];
m5_181 -> m5_162  [key=2, style=dotted];
m5_181 -> m5_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_181 -> m5_198  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_181 -> m5_202  [key=1, style=dashed, color=darkseagreen4, label=countByStates];
m5_187 -> m5_22  [key=2, style=dotted];
m5_187 -> m5_23  [key=2, style=dotted];
m5_187 -> m5_188  [key=0, style=solid];
m5_188 -> m5_22  [key=2, style=dotted];
m5_188 -> m5_23  [key=2, style=dotted];
m5_188 -> m5_189  [key=0, style=solid];
m5_189 -> m5_22  [key=2, style=dotted];
m5_189 -> m5_190  [key=0, style=solid];
m5_189 -> m5_161  [key=2, style=dotted];
m5_178 -> m5_179  [key=0, style=solid];
m5_178 -> m5_187  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_178 -> m5_188  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_178 -> m5_189  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_178 -> m5_192  [key=2, style=dotted];
m5_178 -> m5_183  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_178 -> m5_184  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_178 -> m5_185  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_178 -> m5_186  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_178 -> m5_190  [key=1, style=dashed, color=darkseagreen4, label=stats];
m5_182 -> m5_183  [key=0, style=solid];
m5_182 -> m5_202  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_182 -> m5_184  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
m5_182 -> m5_185  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
m5_182 -> m5_186  [key=1, style=dashed, color=darkseagreen4, label=getCountIfExists];
m5_186 -> m5_187  [key=0, style=solid];
m5_186 -> m5_194  [key=2, style=dotted];
m5_190 -> m5_191  [key=0, style=solid];
m5_183 -> m5_184  [key=0, style=solid];
m5_183 -> m5_194  [key=2, style=dotted];
m5_184 -> m5_185  [key=0, style=solid];
m5_184 -> m5_194  [key=2, style=dotted];
m5_185 -> m5_186  [key=0, style=solid];
m5_185 -> m5_194  [key=2, style=dotted];
m5_191 -> m5_177  [key=0, style=bold, color=blue];
m5_42 -> m5_43  [key=0, style=solid, color=red];
m5_42 -> m5_34  [key=2, style=dotted, color=red];
m5_83 -> m5_84  [key=0, style=solid];
m5_83 -> m5_81  [key=0, style=bold, color=blue];
m5_84 -> m5_85  [key=0, style=solid];
m5_84 -> m5_82  [key=2, style=dotted];
m5_85 -> m5_83  [key=0, style=bold, color=blue];
m5_85 -> m5_86  [key=0, style=solid];
m5_103 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label=manager];
m5_7 -> m5_8  [key=0, style=solid];
m5_7 -> m5_16  [key=2, style=dotted];
m5_146 -> m5_205  [key=0, style=solid];
m5_146 -> m5_212  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_146 -> m5_231  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_213 -> m5_214  [key=0, style=solid];
m5_213 -> m5_226  [key=2, style=dotted];
m5_213 -> m5_162  [key=2, style=dotted];
m5_213 -> m5_235  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_213 -> m5_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_213 -> m5_215  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_213 -> m5_216  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_213 -> m5_220  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_209 -> m5_64  [key=2, style=dotted];
m5_209 -> m5_210  [key=0, style=solid];
m5_212 -> m5_213  [key=0, style=solid];
m5_212 -> m5_48  [key=2, style=dotted];
m5_212 -> m5_163  [key=2, style=dotted];
m5_212 -> m5_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_212 -> m5_214  [key=1, style=dashed, color=darkseagreen4, label=keys];
m5_214 -> m5_215  [key=0, style=solid];
m5_214 -> m5_217  [key=0, style=solid];
m5_214 -> m5_216  [key=1, style=dashed, color=darkseagreen4, label=key];
m5_215 -> m5_214  [key=0, style=solid];
m5_215 -> m5_216  [key=0, style=solid];
m5_215 -> m5_204  [key=2, style=dotted];
m5_216 -> m5_214  [key=0, style=solid];
m5_216 -> m5_227  [key=2, style=dotted];
m5_220 -> m5_221  [key=0, style=solid];
m5_220 -> m5_229  [key=2, style=dotted];
m5_205 -> m5_209  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_205 -> m5_206  [key=0, style=solid];
m5_205 -> m5_210  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_206 -> m5_209  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_206 -> m5_212  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_206 -> m5_94  [key=2, style=dotted];
m5_206 -> m5_207  [key=0, style=solid];
m5_206 -> m5_219  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_206 -> m5_221  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_208 -> m5_209  [key=0, style=solid];
m5_208 -> m5_212  [key=0, style=solid];
m5_210 -> m5_210  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_210 -> m5_211  [key=0, style=solid];
m5_210 -> m5_225  [key=2, style=dotted];
m5_217 -> m5_218  [key=0, style=solid];
m5_217 -> m5_228  [key=2, style=dotted];
m5_217 -> m5_221  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_217 -> m5_223  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_219 -> m5_220  [key=0, style=solid];
m5_219 -> m5_223  [key=0, style=solid];
m5_218 -> m5_220  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_218 -> m5_219  [key=0, style=solid];
m5_218 -> m5_221  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_218 -> m5_222  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_221 -> m5_227  [key=2, style=dotted];
m5_221 -> m5_222  [key=0, style=solid];
m5_207 -> m5_208  [key=0, style=solid];
m5_207 -> m5_211  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_211 -> m5_208  [key=0, style=solid];
m5_211 -> m5_211  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_223 -> m5_224  [key=0, style=solid];
m5_222 -> m5_219  [key=0, style=solid];
m5_222 -> m5_222  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_224 -> m5_146  [key=0, style=bold, color=blue];
m5_150 -> m5_152  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_150 -> m5_151  [key=0, style=solid];
m5_152 -> m5_153  [key=0, style=solid];
m5_152 -> m5_160  [key=2, style=dotted];
m5_152 -> m5_156  [key=1, style=dashed, color=darkseagreen4, label=multi];
m5_152 -> m5_157  [key=1, style=dashed, color=darkseagreen4, label=multi];
m5_158 -> m5_159  [key=0, style=solid];
m5_158 -> m5_164  [key=2, style=dotted];
m5_158 -> m5_22  [key=2, style=dotted];
m5_158 -> m5_142  [key=2, style=dotted];
m5_151 -> m5_152  [key=0, style=solid];
m5_153 -> m5_158  [key=1, style=dashed, color=darkseagreen4, label=job];
m5_153 -> m5_22  [key=2, style=dotted];
m5_153 -> m5_154  [key=0, style=solid];
m5_153 -> m5_161  [key=2, style=dotted];
m5_156 -> m5_158  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m5_156 -> m5_22  [key=2, style=dotted];
m5_156 -> m5_157  [key=0, style=solid];
m5_156 -> m5_162  [key=2, style=dotted];
m5_156 -> m5_165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_156 -> m5_168  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_157 -> m5_158  [key=0, style=solid];
m5_157 -> m5_22  [key=2, style=dotted];
m5_157 -> m5_48  [key=2, style=dotted];
m5_157 -> m5_163  [key=2, style=dotted];
m5_157 -> m5_171  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_154 -> m5_156  [key=0, style=solid];
m5_154 -> m5_155  [key=0, style=solid];
m5_155 -> m5_159  [key=0, style=solid];
m5_159 -> m5_150  [key=0, style=bold, color=blue];
m5_32 -> m5_33  [key=0, style=solid];
m5_32 -> m5_29  [key=0, style=bold, color=blue];
m5_33 -> m5_34  [key=0, style=solid];
m5_33 -> m5_18  [key=2, style=dotted];
m5_34 -> m5_32  [key=0, style=bold, color=blue];
m5_143 -> m5_144  [key=0, style=solid];
m5_144 -> m5_145  [key=0, style=solid];
m5_144 -> m5_146  [key=2, style=dotted];
m5_145 -> m5_143  [key=0, style=bold, color=blue];
m5_88 -> m5_91  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_88 -> m5_89  [key=0, style=solid];
m5_88 -> m5_94  [key=2, style=dotted];
m5_88 -> m5_92  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_104 -> m5_105  [key=0, style=solid];
m5_104 -> m5_56  [key=1, style=dashed, color=darkseagreen4, label=manager];
m5_105 -> m5_38  [key=2, style=dotted];
m5_105 -> m5_106  [key=0, style=solid];
m5_105 -> m5_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_105 -> m5_64  [key=1, style=dashed, color=darkseagreen4, label=manager];
m5_106 -> m5_104  [key=0, style=bold, color=blue];
m5_96 -> m5_97  [key=0, style=solid];
m5_96 -> m5_94  [key=0, style=bold, color=blue];
m5_97 -> m5_38  [key=2, style=dotted];
m5_97 -> m5_98  [key=0, style=solid];
m5_97 -> m5_99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_98 -> m5_96  [key=0, style=bold, color=blue];
m5_98 -> m5_99  [key=0, style=solid];
m5_98 -> m5_100  [key=2, style=dotted];
m5_12 -> m5_8  [key=0, style=bold, color=blue];
m5_100 -> m5_101  [key=0, style=solid];
m5_100 -> m5_102  [key=2, style=dotted];
m5_100 -> m5_103  [key=2, style=dotted];
m5_79 -> m5_80  [key=0, style=solid, color=red];
m5_79 -> m5_71  [key=2, style=dotted, color=red];
m5_79 -> m5_81  [key=1, style=dashed, color=red, label="lambda expression"];
m5_80 -> m5_81  [key=0, style=solid];
m5_80 -> m5_82  [key=2, style=dotted];
m5_80 -> m5_76  [key=0, style=bold, color=blue];
m5_81 -> m5_79  [key=0, style=bold, color=blue];
m5_81 -> m5_82  [key=0, style=solid, color=red];
m5_81 -> m5_40  [key=0, style=solid];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_18  [key=2, style=dotted];
m5_59 -> m5_60  [key=0, style=solid];
m5_59 -> m5_44  [key=2, style=dotted];
m5_59 -> m5_64  [key=1, style=dashed, color=darkseagreen4, label=manager];
m5_60 -> m5_66  [key=0, style=solid];
m5_60 -> m5_61  [key=0, style=solid];
m5_60 -> m5_33  [key=2, style=dotted];
m5_60 -> m5_63  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_66 -> m5_59  [key=2, style=dotted];
m5_66 -> m5_67  [key=0, style=solid];
m5_67 -> m5_70  [key=0, style=solid];
m5_67 -> m5_71  [key=2, style=dotted];
m5_67 -> m5_68  [key=0, style=solid];
m5_67 -> m5_44  [key=2, style=dotted];
m5_69 -> m5_70  [key=0, style=solid];
m5_69 -> m5_71  [key=2, style=dotted];
m5_69 -> m5_72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_68 -> m5_69  [key=0, style=solid];
m5_68 -> m5_49  [key=2, style=dotted];
m5_70 -> m5_60  [key=0, style=bold, color=blue];
m5_70 -> m5_66  [key=0, style=bold, color=blue];
m5_63 -> m5_64  [key=0, style=solid];
m5_27 -> m5_28  [key=0, style=solid];
m5_27 -> m5_25  [key=0, style=bold, color=blue];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_18  [key=2, style=dotted];
m5_29 -> m5_27  [key=0, style=bold, color=blue];
m5_29 -> m5_30  [key=0, style=solid];
m5_95 -> m5_96  [key=0, style=solid];
m5_95 -> m5_97  [key=2, style=dotted];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_13  [key=2, style=dotted];
m5_24 -> m5_25  [key=0, style=solid];
m5_25 -> m5_26  [key=0, style=solid];
m5_25 -> m5_22  [key=2, style=dotted];
m5_25 -> m5_23  [key=2, style=dotted];
m5_26 -> m5_24  [key=0, style=bold, color=blue];
m5_26 -> m5_27  [key=0, style=solid];
m5_26 -> m5_28  [key=2, style=dotted];
m5_201 -> m5_202  [key=0, style=solid];
m5_17 -> m5_18  [key=0, style=solid];
m5_17 -> m5_15  [key=0, style=bold, color=blue];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_19  [key=0, style=bold, color=blue];
m5_18 -> m5_19  [key=0, style=solid];
m5_18 -> m5_20  [key=2, style=dotted];
m5_18 -> m5_30  [key=0, style=solid];
m5_19 -> m5_17  [key=0, style=bold, color=blue];
m5_19 -> m5_20  [key=0, style=solid];
m5_22 -> m5_23  [key=0, style=solid];
m5_22 -> m5_24  [key=2, style=dotted];
m5_23 -> m5_21  [key=0, style=bold, color=blue];
m5_35 -> m5_36  [key=0, style=solid];
m5_36 -> m5_37  [key=0, style=solid];
m5_36 -> m5_38  [key=2, style=dotted];
m5_36 -> m5_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_37 -> m5_35  [key=0, style=bold, color=blue];
m5_46 -> m5_47  [key=0, style=solid, color=green];
m5_46 -> m5_48  [key=2, style=dotted];
m5_46 -> m5_49  [key=2, style=dotted, color=green];
m5_45 -> m5_46  [key=0, style=solid, color=green];
m5_45 -> m5_22  [key=2, style=dotted];
m5_45 -> m5_48  [key=2, style=dotted];
m5_47 -> m5_45  [key=0, style=bold, color=blue];
m5_47 -> m5_38  [key=0, style=bold, color=blue];
m5_64 -> m5_65  [key=0, style=solid];
m5_64 -> m5_49  [key=2, style=dotted];
m5_65 -> m5_63  [key=0, style=bold, color=blue];
m5_72 -> m5_73  [key=0, style=solid];
m5_73 -> m5_74  [key=0, style=solid];
m5_73 -> m5_75  [key=2, style=dotted];
m5_73 -> m5_38  [key=2, style=dotted];
m5_74 -> m5_72  [key=0, style=bold, color=blue];
m5_82 -> m5_83  [key=0, style=solid, color=red];
m5_82 -> m5_33  [key=2, style=dotted, color=red];
m5_82 -> m5_84  [key=2, style=dotted, color=red];
m5_82 -> m5_85  [key=1, style=dashed, color=red, label="lambda expression"];
m5_82 -> m5_241  [key=0, style=solid];
m5_82 -> m5_248  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_82 -> m5_266  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_86 -> m5_87  [key=0, style=solid];
m5_86 -> m5_88  [key=2, style=dotted];
m5_87 -> m5_85  [key=0, style=bold, color=blue];
m5_87 -> m5_88  [key=0, style=solid];
m5_87 -> m5_22  [key=2, style=dotted];
m5_87 -> m5_48  [key=2, style=dotted];
m5_87 -> m5_89  [key=1, style=dashed, color=darkseagreen4, label=servers];
m5_75 -> m5_76  [key=0, style=solid];
m5_99 -> m5_100  [key=0, style=solid];
m5_99 -> m5_44  [key=0, style=bold, color=blue];
m5_107 -> m5_108  [key=0, style=solid];
m5_126 -> m5_127  [key=0, style=solid];
m5_235 -> m5_236  [key=0, style=solid];
m5_238 -> m5_239  [key=0, style=solid];
m5_269 -> m5_270  [key=0, style=solid];
m5_272 -> m5_273  [key=0, style=solid];
m5_172 -> m5_22  [key=2, style=dotted];
m5_172 -> m5_173  [key=0, style=solid];
m5_77 -> m5_75  [key=0, style=bold, color=blue];
m5_77 -> m5_78  [key=0, style=solid];
m5_77 -> m5_44  [key=2, style=dotted];
m5_76 -> m5_77  [key=0, style=solid];
m5_76 -> m5_78  [key=2, style=dotted];
m5_76 -> m5_43  [key=2, style=dotted];
m5_266 -> m5_267  [key=0, style=solid];
m5_266 -> m5_268  [key=2, style=dotted];
m5_101 -> m5_99  [key=0, style=bold, color=blue];
m5_101 -> m5_20  [key=0, style=bold, color=blue];
m5_109 -> m5_107  [key=0, style=bold, color=blue];
m5_108 -> m5_109  [key=0, style=solid];
m5_108 -> m5_110  [key=2, style=dotted];
m5_108 -> m5_103  [key=2, style=dotted];
m5_128 -> m5_126  [key=0, style=bold, color=blue];
m5_127 -> m5_128  [key=0, style=solid];
m5_127 -> m5_129  [key=2, style=dotted];
m5_127 -> m5_103  [key=2, style=dotted];
m5_231 -> m5_232  [key=0, style=solid];
m5_231 -> m5_233  [key=2, style=dotted];
m5_231 -> m5_234  [key=2, style=dotted];
m5_165 -> m5_166  [key=0, style=solid];
m5_168 -> m5_169  [key=0, style=solid];
m5_171 -> m5_172  [key=0, style=solid];
m5_195 -> m5_196  [key=0, style=solid];
m5_198 -> m5_199  [key=0, style=solid];
m5_202 -> m5_203  [key=0, style=solid];
m5_202 -> m5_204  [key=2, style=dotted];
m5_230 -> m5_231  [key=0, style=solid];
m5_237 -> m5_235  [key=0, style=bold, color=blue];
m5_236 -> m5_237  [key=0, style=solid];
m5_240 -> m5_238  [key=0, style=bold, color=blue];
m5_239 -> m5_240  [key=0, style=solid];
m5_265 -> m5_266  [key=0, style=solid];
m5_271 -> m5_269  [key=0, style=bold, color=blue];
m5_270 -> m5_271  [key=0, style=solid];
m5_274 -> m5_272  [key=0, style=bold, color=blue];
m5_273 -> m5_274  [key=0, style=solid];
m5_173 -> m5_171  [key=0, style=bold, color=blue];
m5_262 -> m5_263  [key=0, style=solid];
m5_267 -> m5_265  [key=0, style=bold, color=blue];
m5_232 -> m5_230  [key=0, style=bold, color=blue];
m5_167 -> m5_165  [key=0, style=bold, color=blue];
m5_166 -> m5_167  [key=0, style=solid];
m5_170 -> m5_168  [key=0, style=bold, color=blue];
m5_169 -> m5_170  [key=0, style=solid];
m5_197 -> m5_195  [key=0, style=bold, color=blue];
m5_196 -> m5_197  [key=0, style=solid];
m5_200 -> m5_198  [key=0, style=bold, color=blue];
m5_199 -> m5_200  [key=0, style=solid];
m5_203 -> m5_201  [key=0, style=bold, color=blue];
m5_263 -> m5_233  [key=2, style=dotted];
m5_263 -> m5_264  [key=0, style=solid];
m5_40 -> m5_43  [key=2, style=dotted];
m5_40 -> m5_83  [key=0, style=solid];
m5_40 -> m5_42  [key=2, style=dotted];
m5_40 -> m5_41  [key=0, style=solid];
m5_40 -> m5_44  [key=2, style=dotted];
m5_40 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label=manager];
m5_264 -> m5_262  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_10  [key=2, style=dotted];
m5_2 -> m5_17  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_2 -> m5_5  [key=2, style=dotted];
m5_2 -> m5_6  [key=2, style=dotted];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_11  [key=2, style=dotted];
m5_3 -> m5_7  [key=2, style=dotted];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_12  [key=2, style=dotted];
m5_4 -> m5_0  [key=0, style=bold, color=blue];
m5_6 -> m5_7  [key=0, style=solid];
m5_6 -> m5_14  [key=2, style=dotted];
m5_6 -> m5_15  [key=2, style=dotted];
m5_6 -> m5_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_8 -> m5_9  [key=0, style=solid];
m5_8 -> m5_14  [key=2, style=dotted];
m5_8 -> m5_15  [key=2, style=dotted];
m5_8 -> m5_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_9 -> m5_0  [key=0, style=bold, color=blue];
m5_9 -> m5_10  [key=0, style=solid];
m5_9 -> m5_13  [key=2, style=dotted];
m5_39 -> m5_40  [key=0, style=solid];
m5_41 -> m5_42  [key=0, style=solid, color=red];
m5_41 -> m5_33  [key=2, style=dotted];
m5_41 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_14  [key=2, style=dotted];
m5_15 -> m5_16  [key=0, style=solid];
m5_44 -> m5_98  [key=0, style=solid];
m5_44 -> m5_45  [key=0, style=solid];
m5_38 -> m5_46  [key=1, style=dashed, color=green, label="System.Func<HangFire.Common.JobMethod, System.Collections.Generic.Dictionary<string, string>, TDto>"];
m5_38 -> m5_44  [key=0, style=solid];
m5_38 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label=int];
m5_61 -> m5_62  [key=0, style=solid];
m5_61 -> m5_34  [key=2, style=dotted];
m5_78 -> m5_79  [key=0, style=solid, color=red];
m5_78 -> m5_49  [key=2, style=dotted];
m5_11 -> m5_12  [key=0, style=solid];
m5_11 -> m5_14  [key=2, style=dotted];
m5_58 -> m5_59  [key=0, style=solid];
m5_20 -> m5_101  [key=0, style=solid];
m5_20 -> m5_21  [key=0, style=solid];
m5_20 -> m5_22  [key=2, style=dotted];
m5_20 -> m5_23  [key=2, style=dotted];
m5_121 -> m5_123  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_121 -> m5_122  [key=0, style=solid];
m5_123 -> m5_124  [key=0, style=solid];
m5_123 -> m5_22  [key=2, style=dotted];
m5_123 -> m5_48  [key=2, style=dotted];
m5_124 -> m5_49  [key=2, style=dotted];
m5_124 -> m5_125  [key=0, style=solid];
m5_124 -> m5_126  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_122 -> m5_123  [key=0, style=solid];
m5_125 -> m5_121  [key=0, style=bold, color=blue];
m5_91 -> m5_64  [key=2, style=dotted];
m5_91 -> m5_89  [key=0, style=solid];
m5_91 -> m5_95  [key=2, style=dotted];
m5_91 -> m5_92  [key=0, style=solid];
m5_91 -> m5_49  [key=2, style=dotted];
m5_89 -> m5_91  [key=1, style=dashed, color=darkseagreen4, label=server];
m5_89 -> m5_90  [key=0, style=solid];
m5_89 -> m5_92  [key=0, style=solid];
m5_90 -> m5_22  [key=2, style=dotted];
m5_90 -> m5_91  [key=0, style=solid];
m5_90 -> m5_44  [key=2, style=dotted];
m5_92 -> m5_93  [key=0, style=solid];
m5_92 -> m5_71  [key=2, style=dotted];
m5_92 -> m5_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_93 -> m5_86  [key=0, style=bold, color=blue];
m5_93 -> m5_89  [key=0, style=bold, color=blue];
m5_174 -> m5_175  [key=0, style=solid];
m5_175 -> m5_176  [key=0, style=solid];
m5_175 -> m5_18  [key=2, style=dotted];
m5_176 -> m5_174  [key=0, style=bold, color=blue];
m5_102 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_51  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_69  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_73  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_77  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_79  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_82  [key=1, style=dashed, color=red, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_90  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_91  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_92  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_102 -> m5_98  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.RecurringJobManagerFacts"];
m5_249 -> m5_250  [key=0, style=solid];
m5_249 -> m5_226  [key=2, style=dotted];
m5_249 -> m5_162  [key=2, style=dotted];
m5_249 -> m5_269  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_249 -> m5_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_249 -> m5_251  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_249 -> m5_252  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_249 -> m5_256  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
m5_245 -> m5_64  [key=2, style=dotted];
m5_245 -> m5_246  [key=0, style=solid];
m5_248 -> m5_249  [key=0, style=solid];
m5_248 -> m5_48  [key=2, style=dotted];
m5_248 -> m5_163  [key=2, style=dotted];
m5_248 -> m5_265  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_248 -> m5_250  [key=1, style=dashed, color=darkseagreen4, label=keys];
m5_250 -> m5_251  [key=0, style=solid];
m5_250 -> m5_253  [key=0, style=solid];
m5_250 -> m5_252  [key=1, style=dashed, color=darkseagreen4, label=key];
m5_251 -> m5_250  [key=0, style=solid];
m5_251 -> m5_252  [key=0, style=solid];
m5_251 -> m5_204  [key=2, style=dotted];
m5_252 -> m5_250  [key=0, style=solid];
m5_252 -> m5_227  [key=2, style=dotted];
m5_256 -> m5_257  [key=0, style=solid];
m5_256 -> m5_229  [key=2, style=dotted];
m5_247 -> m5_48  [key=2, style=dotted];
m5_247 -> m5_248  [key=0, style=solid];
m5_247 -> m5_163  [key=2, style=dotted];
m5_247 -> m5_262  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_247 -> m5_255  [key=1, style=dashed, color=darkseagreen4, label=stringDates];
m5_241 -> m5_245  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_241 -> m5_242  [key=0, style=solid];
m5_241 -> m5_244  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_241 -> m5_246  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_244 -> m5_245  [key=0, style=solid];
m5_244 -> m5_247  [key=0, style=solid];
m5_243 -> m5_245  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_243 -> m5_247  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_243 -> m5_94  [key=2, style=dotted];
m5_243 -> m5_244  [key=0, style=solid];
m5_243 -> m5_257  [key=1, style=dashed, color=darkseagreen4, label=dates];
m5_246 -> m5_244  [key=0, style=solid];
m5_246 -> m5_246  [key=1, style=dashed, color=darkseagreen4, label=endDate];
m5_246 -> m5_261  [key=2, style=dotted];
m5_253 -> m5_254  [key=0, style=solid];
m5_253 -> m5_228  [key=2, style=dotted];
m5_253 -> m5_257  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_253 -> m5_259  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_255 -> m5_256  [key=0, style=solid];
m5_255 -> m5_259  [key=0, style=solid];
m5_254 -> m5_256  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_254 -> m5_255  [key=0, style=solid];
m5_254 -> m5_257  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_254 -> m5_258  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_257 -> m5_227  [key=2, style=dotted];
m5_257 -> m5_258  [key=0, style=solid];
m5_242 -> m5_244  [key=1, style=dashed, color=darkseagreen4, label=startDate];
m5_242 -> m5_243  [key=0, style=solid];
m5_242 -> m5_261  [key=2, style=dotted];
m5_259 -> m5_260  [key=0, style=solid];
m5_258 -> m5_255  [key=0, style=solid];
m5_258 -> m5_258  [key=1, style=dashed, color=darkseagreen4, label=i];
m5_260 -> m5_82  [key=0, style=bold, color=blue];
m5_147 -> m5_148  [key=0, style=solid];
m5_148 -> m5_149  [key=0, style=solid];
m5_148 -> m5_146  [key=2, style=dotted];
m5_149 -> m5_147  [key=0, style=bold, color=blue];
m5_30 -> m5_31  [key=0, style=solid];
m5_30 -> m5_33  [key=2, style=dotted];
m5_30 -> m5_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_30 -> m5_22  [key=2, style=dotted];
m5_30 -> m5_23  [key=2, style=dotted];
m5_31 -> m5_32  [key=0, style=solid];
m5_31 -> m5_34  [key=2, style=dotted];
m5_31 -> m5_18  [key=0, style=bold, color=blue];
m5_111 -> m5_112  [key=0, style=solid];
m5_113 -> m5_114  [key=0, style=solid];
m5_113 -> m5_22  [key=2, style=dotted];
m5_113 -> m5_48  [key=2, style=dotted];
m5_113 -> m5_115  [key=1, style=dashed, color=darkseagreen4, label=queues];
m5_116 -> m5_64  [key=2, style=dotted];
m5_116 -> m5_115  [key=0, style=solid];
m5_116 -> m5_120  [key=2, style=dotted];
m5_116 -> m5_94  [key=2, style=dotted];
m5_112 -> m5_113  [key=0, style=solid];
m5_114 -> m5_116  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_114 -> m5_115  [key=0, style=solid];
m5_114 -> m5_119  [key=2, style=dotted];
m5_114 -> m5_117  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_115 -> m5_116  [key=0, style=solid];
m5_115 -> m5_117  [key=0, style=solid];
m5_117 -> m5_118  [key=0, style=solid];
m5_118 -> m5_111  [key=0, style=bold, color=blue];
m5_130 -> m5_132  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_130 -> m5_131  [key=0, style=solid];
m5_132 -> m5_133  [key=0, style=solid];
m5_132 -> m5_22  [key=2, style=dotted];
m5_132 -> m5_48  [key=2, style=dotted];
m5_132 -> m5_134  [key=1, style=dashed, color=darkseagreen4, label=jobs];
m5_135 -> m5_64  [key=2, style=dotted];
m5_135 -> m5_134  [key=0, style=solid];
m5_135 -> m5_139  [key=2, style=dotted];
m5_135 -> m5_140  [key=2, style=dotted];
m5_135 -> m5_141  [key=2, style=dotted];
m5_135 -> m5_142  [key=2, style=dotted];
m5_136 -> m5_65  [key=2, style=dotted];
m5_136 -> m5_137  [key=0, style=solid];
m5_131 -> m5_132  [key=0, style=solid];
m5_133 -> m5_135  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_133 -> m5_136  [key=1, style=dashed, color=darkseagreen4, label=result];
m5_133 -> m5_134  [key=0, style=solid];
m5_133 -> m5_138  [key=2, style=dotted];
m5_134 -> m5_135  [key=0, style=solid];
m5_134 -> m5_136  [key=0, style=solid];
m5_137 -> m5_130  [key=0, style=bold, color=blue];
m5_275 -> m5_46  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_73  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_80  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_84  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_87  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_97  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_105  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_123  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_124  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_132  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_135  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_144  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_148  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_152  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_158  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_175  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_180  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_213  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_275 -> m5_249  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerMonitoringApi"];
m5_278 -> m5_266  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_277 -> m5_231  [key=1, style=dashed, color=darkseagreen4, label=string];
m5_276 -> m5_202  [key=1, style=dashed, color=darkseagreen4, label=countByStates];
m7_77 -> m7_78  [key=0, style=solid, color=green];
m7_78 -> m7_79  [key=0, style=solid, color=green];
m7_78 -> m7_39  [key=2, style=dotted, color=green];
m7_78 -> m7_81  [key=1, style=dashed, color=green, label="lambda expression"];
m7_79 -> m7_80  [key=0, style=solid, color=green];
m7_79 -> m7_65  [key=2, style=dotted, color=green];
m7_80 -> m7_77  [key=0, style=bold, color=blue];
m7_91 -> m7_170  [key=0, style=solid, color=green];
m7_170 -> m7_171  [key=0, style=solid, color=green];
m7_170 -> m7_69  [key=2, style=dotted, color=green];
m7_171 -> m7_91  [key=0, style=bold, color=blue];
m7_108 -> m7_109  [key=0, style=solid, color=green];
m7_109 -> m7_110  [key=0, style=solid, color=green];
m7_109 -> m7_115  [key=2, style=dotted, color=green];
m7_109 -> m7_24  [key=2, style=dotted, color=green];
m7_110 -> m7_111  [key=0, style=solid, color=green];
m7_110 -> m7_91  [key=2, style=dotted, color=green];
m7_111 -> m7_112  [key=0, style=solid, color=green];
m7_111 -> m7_92  [key=2, style=dotted, color=green];
m7_112 -> m7_113  [key=0, style=solid, color=green];
m7_112 -> m7_93  [key=2, style=dotted, color=green];
m7_112 -> m7_116  [key=1, style=dashed, color=green, label="lambda expression"];
m7_113 -> m7_114  [key=0, style=solid, color=green];
m7_113 -> m7_93  [key=2, style=dotted, color=green];
m7_113 -> m7_119  [key=1, style=dashed, color=green, label="lambda expression"];
m7_114 -> m7_108  [key=0, style=bold, color=blue];
m7_143 -> m7_144  [key=0, style=solid, color=green];
m7_144 -> m7_145  [key=0, style=solid, color=green];
m7_144 -> m7_149  [key=2, style=dotted, color=green];
m7_145 -> m7_146  [key=0, style=solid, color=green];
m7_145 -> m7_91  [key=2, style=dotted, color=green];
m7_146 -> m7_147  [key=0, style=solid, color=green];
m7_146 -> m7_92  [key=2, style=dotted, color=green];
m7_147 -> m7_148  [key=0, style=solid, color=green];
m7_147 -> m7_21  [key=2, style=dotted, color=green];
m7_147 -> m7_150  [key=1, style=dashed, color=green, label="lambda expression"];
m7_148 -> m7_143  [key=0, style=bold, color=blue];
m7_156 -> m7_157  [key=0, style=solid, color=green];
m7_157 -> m7_158  [key=0, style=solid, color=green];
m7_157 -> m7_21  [key=2, style=dotted, color=green];
m7_157 -> m7_19  [key=2, style=dotted, color=green];
m7_157 -> m7_22  [key=2, style=dotted, color=green];
m7_157 -> m7_164  [key=1, style=dashed, color=green, label="lambda expression"];
m7_158 -> m7_159  [key=0, style=solid, color=green];
m7_158 -> m7_91  [key=2, style=dotted, color=green];
m7_158 -> m7_160  [key=1, style=dashed, color=green, label=scheduler];
m7_158 -> m7_168  [key=1, style=dashed, color=green, label=scheduler];
m7_159 -> m7_160  [key=0, style=solid, color=green];
m7_159 -> m7_162  [key=2, style=dotted, color=green];
m7_159 -> m7_163  [key=2, style=dotted, color=green];
m7_159 -> m7_168  [key=1, style=dashed, color=green, label=cts];
m7_160 -> m7_161  [key=0, style=solid, color=green];
m7_160 -> m7_39  [key=2, style=dotted, color=green];
m7_160 -> m7_167  [key=1, style=dashed, color=green, label="lambda expression"];
m7_161 -> m7_156  [key=0, style=bold, color=blue];
m7_61 -> m7_62  [key=0, style=solid, color=green];
m7_62 -> m7_63  [key=0, style=solid, color=green];
m7_62 -> m7_39  [key=2, style=dotted, color=green];
m7_62 -> m7_66  [key=1, style=dashed, color=green, label="lambda expression"];
m7_63 -> m7_64  [key=0, style=solid, color=green];
m7_63 -> m7_65  [key=2, style=dotted, color=green];
m7_64 -> m7_61  [key=0, style=bold, color=blue];
m7_167 -> m7_168  [key=0, style=solid, color=green];
m7_30 -> m7_31  [key=0, style=solid, color=green];
m7_33 -> m7_34  [key=0, style=solid, color=green];
m7_36 -> m7_37  [key=0, style=solid, color=green];
m7_41 -> m7_42  [key=0, style=solid, color=green];
m7_44 -> m7_45  [key=0, style=solid, color=green];
m7_48 -> m7_49  [key=0, style=solid, color=green];
m7_52 -> m7_53  [key=0, style=solid, color=green];
m7_56 -> m7_57  [key=0, style=solid, color=green];
m7_31 -> m7_32  [key=0, style=solid, color=green];
m7_32 -> m7_30  [key=0, style=bold, color=blue];
m7_34 -> m7_35  [key=0, style=solid, color=green];
m7_35 -> m7_33  [key=0, style=bold, color=blue];
m7_37 -> m7_38  [key=0, style=solid, color=green];
m7_37 -> m7_39  [key=2, style=dotted, color=green];
m7_37 -> m7_40  [key=2, style=dotted, color=green];
m7_38 -> m7_36  [key=0, style=bold, color=blue];
m7_42 -> m7_43  [key=0, style=solid, color=green];
m7_43 -> m7_41  [key=0, style=bold, color=blue];
m7_45 -> m7_46  [key=0, style=solid, color=green];
m7_45 -> m7_47  [key=2, style=dotted, color=green];
m7_46 -> m7_44  [key=0, style=bold, color=blue];
m7_49 -> m7_50  [key=0, style=solid, color=green];
m7_49 -> m7_51  [key=2, style=dotted, color=green];
m7_50 -> m7_48  [key=0, style=bold, color=blue];
m7_53 -> m7_54  [key=0, style=solid, color=green];
m7_53 -> m7_55  [key=2, style=dotted, color=green];
m7_54 -> m7_52  [key=0, style=bold, color=blue];
m7_57 -> m7_58  [key=0, style=solid, color=green];
m7_57 -> m7_59  [key=2, style=dotted, color=green];
m7_57 -> m7_60  [key=2, style=dotted, color=green];
m7_58 -> m7_56  [key=0, style=bold, color=blue];
m7_66 -> m7_67  [key=0, style=solid, color=green];
m7_67 -> m7_68  [key=0, style=solid, color=green];
m7_67 -> m7_69  [key=2, style=dotted, color=green];
m7_68 -> m7_66  [key=0, style=bold, color=blue];
m7_74 -> m7_75  [key=0, style=solid, color=green];
m7_75 -> m7_76  [key=0, style=solid, color=green];
m7_75 -> m7_69  [key=2, style=dotted, color=green];
m7_76 -> m7_74  [key=0, style=bold, color=blue];
m7_81 -> m7_82  [key=0, style=solid, color=green];
m7_82 -> m7_83  [key=0, style=solid, color=green];
m7_82 -> m7_69  [key=2, style=dotted, color=green];
m7_83 -> m7_81  [key=0, style=bold, color=blue];
m7_94 -> m7_95  [key=0, style=solid, color=green];
m7_98 -> m7_99  [key=0, style=solid, color=green];
m7_101 -> m7_102  [key=0, style=solid, color=green];
m7_95 -> m7_96  [key=0, style=solid, color=green];
m7_95 -> m7_39  [key=2, style=dotted, color=green];
m7_95 -> m7_97  [key=2, style=dotted, color=green];
m7_96 -> m7_94  [key=0, style=bold, color=blue];
m7_99 -> m7_100  [key=0, style=solid, color=green];
m7_99 -> m7_39  [key=2, style=dotted, color=green];
m7_99 -> m7_97  [key=2, style=dotted, color=green];
m7_100 -> m7_98  [key=0, style=bold, color=blue];
m7_102 -> m7_103  [key=0, style=solid, color=green];
m7_102 -> m7_59  [key=2, style=dotted, color=green];
m7_102 -> m7_39  [key=2, style=dotted, color=green];
m7_102 -> m7_104  [key=2, style=dotted, color=green];
m7_102 -> m7_105  [key=1, style=dashed, color=green, label="lambda expression"];
m7_103 -> m7_101  [key=0, style=bold, color=blue];
m7_105 -> m7_106  [key=0, style=solid, color=green];
m7_106 -> m7_107  [key=0, style=solid, color=green];
m7_106 -> m7_24  [key=2, style=dotted, color=green];
m7_107 -> m7_105  [key=0, style=bold, color=blue];
m7_116 -> m7_117  [key=0, style=solid, color=green];
m7_119 -> m7_120  [key=0, style=solid, color=green];
m7_117 -> m7_118  [key=0, style=solid, color=green];
m7_117 -> m7_39  [key=2, style=dotted, color=green];
m7_117 -> m7_97  [key=2, style=dotted, color=green];
m7_118 -> m7_116  [key=0, style=bold, color=blue];
m7_120 -> m7_121  [key=0, style=solid, color=green];
m7_120 -> m7_39  [key=2, style=dotted, color=green];
m7_120 -> m7_104  [key=2, style=dotted, color=green];
m7_121 -> m7_119  [key=0, style=bold, color=blue];
m7_128 -> m7_129  [key=0, style=solid, color=green];
m7_129 -> m7_130  [key=0, style=solid, color=green];
m7_129 -> m7_39  [key=2, style=dotted, color=green];
m7_129 -> m7_97  [key=2, style=dotted, color=green];
m7_130 -> m7_128  [key=0, style=bold, color=blue];
m7_137 -> m7_138  [key=0, style=solid, color=green];
m7_141 -> m7_142  [key=0, style=solid, color=green];
m7_141 -> m7_92  [key=2, style=dotted, color=green];
m7_140 -> m7_141  [key=0, style=solid, color=green];
m7_142 -> m7_140  [key=0, style=bold, color=blue];
m7_138 -> m7_139  [key=0, style=solid, color=green];
m7_138 -> m7_39  [key=2, style=dotted, color=green];
m7_138 -> m7_55  [key=2, style=dotted, color=green];
m7_139 -> m7_137  [key=0, style=bold, color=blue];
m7_150 -> m7_151  [key=0, style=solid, color=green];
m7_151 -> m7_152  [key=0, style=solid, color=green];
m7_151 -> m7_59  [key=2, style=dotted, color=green];
m7_151 -> m7_39  [key=2, style=dotted, color=green];
m7_151 -> m7_104  [key=2, style=dotted, color=green];
m7_151 -> m7_153  [key=1, style=dashed, color=green, label="lambda expression"];
m7_152 -> m7_150  [key=0, style=bold, color=blue];
m7_153 -> m7_154  [key=0, style=solid, color=green];
m7_154 -> m7_155  [key=0, style=solid, color=green];
m7_154 -> m7_24  [key=2, style=dotted, color=green];
m7_155 -> m7_153  [key=0, style=bold, color=blue];
m7_164 -> m7_165  [key=0, style=solid, color=green];
m7_168 -> m7_169  [key=0, style=solid, color=green];
m7_168 -> m7_92  [key=2, style=dotted, color=green];
m7_169 -> m7_167  [key=0, style=bold, color=blue];
m7_165 -> m7_166  [key=0, style=solid, color=green];
m7_166 -> m7_164  [key=0, style=bold, color=blue];
m7_131 -> m7_132  [key=0, style=solid, color=green];
m7_132 -> m7_133  [key=0, style=solid, color=green];
m7_132 -> m7_21  [key=2, style=dotted, color=green];
m7_132 -> m7_29  [key=2, style=dotted, color=green];
m7_132 -> m7_22  [key=2, style=dotted, color=green];
m7_132 -> m7_137  [key=1, style=dashed, color=green, label="lambda expression"];
m7_133 -> m7_134  [key=0, style=solid, color=green];
m7_133 -> m7_91  [key=2, style=dotted, color=green];
m7_133 -> m7_141  [key=1, style=dashed, color=green, label=scheduler];
m7_134 -> m7_135  [key=0, style=solid, color=green];
m7_134 -> m7_136  [key=2, style=dotted, color=green];
m7_134 -> m7_140  [key=1, style=dashed, color=green, label="lambda expression"];
m7_135 -> m7_131  [key=0, style=bold, color=blue];
m7_70 -> m7_71  [key=0, style=solid, color=green];
m7_71 -> m7_72  [key=0, style=solid, color=green];
m7_71 -> m7_39  [key=2, style=dotted, color=green];
m7_71 -> m7_74  [key=1, style=dashed, color=green, label="lambda expression"];
m7_72 -> m7_73  [key=0, style=solid, color=green];
m7_72 -> m7_65  [key=2, style=dotted, color=green];
m7_73 -> m7_70  [key=0, style=bold, color=blue];
m7_84 -> m7_85  [key=0, style=solid, color=green];
m7_85 -> m7_86  [key=0, style=solid, color=green];
m7_85 -> m7_21  [key=2, style=dotted, color=green];
m7_85 -> m7_22  [key=2, style=dotted, color=green];
m7_85 -> m7_94  [key=1, style=dashed, color=green, label="lambda expression"];
m7_86 -> m7_87  [key=0, style=solid, color=green];
m7_86 -> m7_91  [key=2, style=dotted, color=green];
m7_87 -> m7_88  [key=0, style=solid, color=green];
m7_87 -> m7_92  [key=2, style=dotted, color=green];
m7_88 -> m7_89  [key=0, style=solid, color=green];
m7_88 -> m7_93  [key=2, style=dotted, color=green];
m7_88 -> m7_98  [key=1, style=dashed, color=green, label="lambda expression"];
m7_89 -> m7_90  [key=0, style=solid, color=green];
m7_89 -> m7_93  [key=2, style=dotted, color=green];
m7_89 -> m7_101  [key=1, style=dashed, color=green, label="lambda expression"];
m7_90 -> m7_84  [key=0, style=bold, color=blue];
m7_122 -> m7_123  [key=0, style=solid, color=green];
m7_123 -> m7_124  [key=0, style=solid, color=green];
m7_123 -> m7_115  [key=2, style=dotted, color=green];
m7_123 -> m7_24  [key=2, style=dotted, color=green];
m7_124 -> m7_125  [key=0, style=solid, color=green];
m7_124 -> m7_91  [key=2, style=dotted, color=green];
m7_125 -> m7_126  [key=0, style=solid, color=green];
m7_125 -> m7_92  [key=2, style=dotted, color=green];
m7_126 -> m7_127  [key=0, style=solid, color=green];
m7_126 -> m7_93  [key=2, style=dotted, color=green];
m7_126 -> m7_128  [key=1, style=dashed, color=green, label="lambda expression"];
m7_127 -> m7_122  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid, color=green];
m7_1 -> m7_2  [key=0, style=solid, color=green];
m7_1 -> m7_15  [key=2, style=dotted, color=green];
m7_2 -> m7_3  [key=0, style=solid, color=green];
m7_2 -> m7_16  [key=2, style=dotted, color=green];
m7_3 -> m7_4  [key=0, style=solid, color=green];
m7_3 -> m7_17  [key=2, style=dotted, color=green];
m7_4 -> m7_5  [key=0, style=solid, color=green];
m7_4 -> m7_18  [key=2, style=dotted, color=green];
m7_5 -> m7_6  [key=0, style=solid, color=green];
m7_5 -> m7_19  [key=2, style=dotted, color=green];
m7_6 -> m7_7  [key=0, style=solid, color=green];
m7_6 -> m7_20  [key=2, style=dotted, color=green];
m7_7 -> m7_8  [key=0, style=solid, color=green];
m7_7 -> m7_21  [key=2, style=dotted, color=green];
m7_7 -> m7_22  [key=2, style=dotted, color=green];
m7_7 -> m7_30  [key=1, style=dashed, color=green, label="lambda expression"];
m7_7 -> m7_33  [key=1, style=dashed, color=green, label="lambda expression"];
m7_8 -> m7_9  [key=0, style=solid, color=green];
m7_8 -> m7_21  [key=2, style=dotted, color=green];
m7_8 -> m7_22  [key=2, style=dotted, color=green];
m7_8 -> m7_36  [key=1, style=dashed, color=green, label="lambda expression"];
m7_8 -> m7_41  [key=1, style=dashed, color=green, label="lambda expression"];
m7_9 -> m7_10  [key=0, style=solid, color=green];
m7_9 -> m7_23  [key=2, style=dotted, color=green];
m7_9 -> m7_24  [key=2, style=dotted, color=green];
m7_9 -> m7_25  [key=2, style=dotted, color=green];
m7_9 -> m7_26  [key=2, style=dotted, color=green];
m7_9 -> m7_27  [key=2, style=dotted, color=green];
m7_9 -> m7_44  [key=1, style=dashed, color=green, label="lambda expression"];
m7_10 -> m7_11  [key=0, style=solid, color=green];
m7_10 -> m7_28  [key=2, style=dotted, color=green];
m7_11 -> m7_12  [key=0, style=solid, color=green];
m7_11 -> m7_21  [key=2, style=dotted, color=green];
m7_11 -> m7_22  [key=2, style=dotted, color=green];
m7_11 -> m7_48  [key=1, style=dashed, color=green, label="lambda expression"];
m7_12 -> m7_13  [key=0, style=solid, color=green];
m7_12 -> m7_21  [key=2, style=dotted, color=green];
m7_12 -> m7_29  [key=2, style=dotted, color=green];
m7_12 -> m7_22  [key=2, style=dotted, color=green];
m7_12 -> m7_52  [key=1, style=dashed, color=green, label="lambda expression"];
m7_13 -> m7_14  [key=0, style=solid, color=green];
m7_13 -> m7_21  [key=2, style=dotted, color=green];
m7_13 -> m7_22  [key=2, style=dotted, color=green];
m7_13 -> m7_56  [key=1, style=dashed, color=green, label="lambda expression"];
m7_14 -> m7_0  [key=0, style=bold, color=blue];
m7_172 -> m7_1  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_2  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_3  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_4  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_5  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_6  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_7  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_8  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_9  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_10  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_11  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_12  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_13  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_34  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_42  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_62  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_67  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_71  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_75  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_78  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_82  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_85  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_86  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_87  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_88  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_89  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_102  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_106  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_109  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_110  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_111  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_112  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_113  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_123  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_124  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_125  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_126  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_132  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_133  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_134  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_141  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_144  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_145  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_146  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_147  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_151  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_154  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_157  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_158  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_172 -> m7_170  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m7_173 -> m7_141  [key=1, style=dashed, color=green, label=scheduler];
m7_174 -> m7_168  [key=1, style=dashed, color=green, label=scheduler];
m7_175 -> m7_168  [key=1, style=dashed, color=green, label=cts];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_3  [key=3, color=darkorchid, style=bold, label="Field variable IRedisTransaction _transaction"];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> m10_5  [key=2, style=dotted];
m10_3 -> m10_4  [key=0, style=solid];
m10_4 -> m10_0  [key=0, style=bold, color=blue];
m10_6 -> m10_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerComponentRunnerOptions"];
m10_6 -> m10_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerComponentRunnerOptions"];
m10_6 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.ServerComponentRunnerOptions"];
}
