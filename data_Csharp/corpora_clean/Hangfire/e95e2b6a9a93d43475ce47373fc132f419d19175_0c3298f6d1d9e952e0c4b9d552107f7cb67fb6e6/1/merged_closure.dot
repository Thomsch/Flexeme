digraph  {
n59 [label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", span=""];
n60 [label=sqlQuery, span=""];
n61 [label=string, span=""];
n62 [label=int, span=""];
n63 [label=int, span=""];
n64 [label=sqlQuery, span=""];
n65 [label=string, span=""];
n66 [label=int, span=""];
n67 [label=int, span=""];
n68 [label=fetchedJobsSql, span=""];
n69 [label=string, span=""];
n70 [label=sqlQuery, span=""];
n0 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="42-42"];
n1 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", label="storage == null", span="44-44"];
n2 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", label="throw new ArgumentNullException(nameof(storage));", span="44-44"];
n3 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", label="_storage = storage", span="45-45"];
n4 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="42-42"];
n5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n6 [cluster="Unk.nameof", label="Entry Unk.nameof", span=""];
n7 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", span="48-48"];
n8 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", label="string sqlQuery = $@''select distinct(Queue) from [{_storage.SchemaName}].JobQueue with (nolock)''", span="50-50"];
n9 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", label=_cacheLock, span="52-52"];
n11 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", label="var result = _storage.UseConnection(connection =>\r\n                    {\r\n                        return connection.Query(sqlQuery, commandTimeout: _storage.CommandTimeout).Select(x => (string) x.Queue).ToList();\r\n                    })", span="56-59"];
n20 [cluster="lambda expression", label="return connection.Query(sqlQuery, commandTimeout: _storage.CommandTimeout).Select(x => (string) x.Queue).ToList();", span="58-58"];
n10 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", label="_queuesCache.Count == 0 || _cacheUpdated.Add(QueuesCacheTimeout) < DateTime.UtcNow", span="54-54"];
n14 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", label="return _queuesCache.ToList();", span="65-65"];
n16 [cluster="System.DateTime.Add(System.TimeSpan)", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
n12 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", label="_queuesCache = result", span="61-61"];
n17 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", span="179-179"];
n19 [cluster="lambda expression", label="Entry lambda expression", span="56-59"];
n13 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", label="_cacheUpdated = DateTime.UtcNow", span="62-62"];
n15 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", span="48-48"];
n18 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
n21 [cluster="lambda expression", label="Exit lambda expression", span="56-59"];
n22 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
n23 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n24 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
n25 [cluster="lambda expression", label="Entry lambda expression", span="58-58"];
n26 [cluster="lambda expression", label="(string) x.Queue", span="58-58"];
n27 [cluster="lambda expression", label="Exit lambda expression", span="58-58"];
n28 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="69-69"];
n30 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", label="return _storage.UseConnection(connection =>\r\n            {\r\n                // TODO: Remove cast to `int` to support `bigint`.\r\n                return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage },\r\n                    commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();\r\n            });", span="79-89"];
n33 [cluster="lambda expression", label="return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage },\r\n                    commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();", span="82-88"];
n31 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="69-69"];
n32 [cluster="lambda expression", label="Entry lambda expression", span="79-89"];
n34 [cluster="lambda expression", label="Exit lambda expression", span="79-89"];
n35 [cluster="Unk.>", label="Entry Unk.>", span=""];
n36 [cluster="lambda expression", label="Entry lambda expression", span="87-87"];
n37 [cluster="lambda expression", label="(int)x.JobId", span="87-87"];
n38 [cluster="lambda expression", label="Exit lambda expression", span="87-87"];
n39 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="92-92"];
n40 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", label="var fetchedJobsSql = $@''\r\nselect r.JobId from (\r\n  select jq.JobId, jq.FetchedAt, row_number() over (order by jq.Id) as row_num \r\n  from [{_storage.SchemaName}].JobQueue jq with (nolock, forceseek)\r\n  where jq.Queue = @queue and jq.FetchedAt is not null\r\n) as r\r\nwhere r.row_num between @start and @end''", span="94-100"];
n41 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", label="return _storage.UseConnection(connection =>\r\n            {\r\n                // TODO: Remove cast to `int` to support `bigint`.\r\n                return connection.Query<JobIdDto>(\r\n                        fetchedJobsSql,\r\n                        new { queue = queue, start = from + 1, end = @from + perPage })\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();\r\n            });", span="102-111"];
n44 [cluster="lambda expression", label="return connection.Query<JobIdDto>(\r\n                        fetchedJobsSql,\r\n                        new { queue = queue, start = from + 1, end = @from + perPage })\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();", span="105-110"];
n42 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="92-92"];
n43 [cluster="lambda expression", label="Entry lambda expression", span="102-111"];
n45 [cluster="lambda expression", label="Exit lambda expression", span="102-111"];
n46 [cluster="lambda expression", label="Entry lambda expression", span="109-109"];
n47 [cluster="lambda expression", label="(int)x.JobId", span="109-109"];
n48 [cluster="lambda expression", label="Exit lambda expression", span="109-109"];
n49 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="114-114"];
n50 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", label="var sqlQuery = $@''\r\nselect sum(Enqueued) as EnqueuedCount, sum(Fetched) as FetchedCount \r\nfrom (\r\n    select \r\n        case when FetchedAt is null then 1 else 0 end as Enqueued,\r\n        case when FetchedAt is not null then 1 else 0 end as Fetched\r\n    from [{_storage.SchemaName}].JobQueue with (nolock, forceseek)\r\n    where Queue = @queue\r\n) q''", span="116-124"];
n51 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", label="return _storage.UseConnection(connection =>\r\n            {\r\n                var result = connection.Query(sqlQuery, new { queue = queue }).Single();\r\n\r\n                return new EnqueuedAndFetchedCountDto\r\n                {\r\n                    EnqueuedCount = result.EnqueuedCount,\r\n                    FetchedCount = result.FetchedCount\r\n                };\r\n            });", span="126-135"];
n54 [cluster="lambda expression", label="var result = connection.Query(sqlQuery, new { queue = queue }).Single()", span="128-128"];
n52 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="114-114"];
n53 [cluster="lambda expression", label="Entry lambda expression", span="126-135"];
n55 [cluster="lambda expression", label="return new EnqueuedAndFetchedCountDto\r\n                {\r\n                    EnqueuedCount = result.EnqueuedCount,\r\n                    FetchedCount = result.FetchedCount\r\n                };", span="130-134"];
n57 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n56 [cluster="lambda expression", label="Exit lambda expression", span="126-135"];
n58 [cluster="Hangfire.SqlServer.EnqueuedAndFetchedCountDto.EnqueuedAndFetchedCountDto()", label="Entry Hangfire.SqlServer.EnqueuedAndFetchedCountDto.EnqueuedAndFetchedCountDto()", span="18-18"];
m1_4 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.RabbitMqChannel(System.Collections.Generic.IEnumerable<string>)", file="BackgroundJobServerFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.RabbitMqChannel(System.Collections.Generic.IEnumerable<string>)", span="10-10"];
m1_5 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.CreateQueue()", file="BackgroundJobServerFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.CreateQueue()", span="18-18"];
m1_6 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", span="20-20"];
m1_7 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs", label="Monitor.Enter(GlobalLock)", span="22-22"];
m1_8 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs", label=_queues, span="23-23"];
m1_9 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs", label="_rabbitMq.Channel.QueueDeclare(queue, true, false, false, null)", span="25-25"];
m1_11 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs", label="_rabbitMq.Dispose()", span="28-28"];
m1_10 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs", label="_rabbitMq.Channel.QueuePurge(queue)", span="26-26"];
m1_12 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", span="20-20"];
m1_17 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", span="31-31"];
m1_18 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs", label="Monitor.Exit(GlobalLock)", span="33-33"];
m1_19 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", span="31-31"];
m1_20 [cluster="System.Threading.Monitor.Exit(object)", file="BackgroundJobServerFacts.cs", label="Entry System.Threading.Monitor.Exit(object)", span="0-0"];
m1_15 [cluster="Unk.QueuePurge", file="BackgroundJobServerFacts.cs", label="Entry Unk.QueuePurge", span=""];
m1_14 [cluster="Unk.QueueDeclare", file="BackgroundJobServerFacts.cs", label="Entry Unk.QueueDeclare", span=""];
m1_21 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="BackgroundJobServerFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", span="36-36"];
m1_22 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="BackgroundJobServerFacts.cs", label="return new RabbitMqChannel(queue).CreateQueue();", span="38-38"];
m1_23 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="BackgroundJobServerFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", span="36-36"];
m1_16 [cluster="HangFire.RabbitMQ.RabbitMqJobQueue.Dispose()", file="BackgroundJobServerFacts.cs", label="Entry HangFire.RabbitMQ.RabbitMqJobQueue.Dispose()", span="82-82"];
m1_0 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="BackgroundJobServerFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", span="14-14"];
m1_1 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="BackgroundJobServerFacts.cs", label="_queues = queues", span="16-16"];
m1_2 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="BackgroundJobServerFacts.cs", label="_rabbitMq = new RabbitMqChannel(_queues).CreateQueue()", span="17-17"];
m1_3 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="BackgroundJobServerFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", span="14-14"];
m1_13 [cluster="System.Threading.Monitor.Enter(object)", file="BackgroundJobServerFacts.cs", label="Entry System.Threading.Monitor.Enter(object)", span="0-0"];
m1_24 [file="BackgroundJobServerFacts.cs", label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", span=""];
m2_0 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", file="CronFacts.cs", label="Entry HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", span="8-8"];
m2_1 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", file="CronFacts.cs", label="Exit HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", span="8-8"];
m2_2 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="CronFacts.cs", label="Entry HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", span="13-13"];
m2_3 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="CronFacts.cs", label="WorkerNumber = workerNumber", span="16-16"];
m2_4 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="CronFacts.cs", label="Exit HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", span="13-13"];
m2_5 [file="CronFacts.cs", label="HangFire.Server.WorkerContext", span=""];
n59 -> n9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
n59 -> n10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
n59 -> n20  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
n59 -> n14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
n60 -> n20  [color=darkseagreen4, key=1, label=sqlQuery, style=dashed];
n0 -> n2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
n8 -> n20  [color=darkseagreen4, key=1, label=sqlQuery, style=dashed];
n11 -> n19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n20 -> n25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n30 -> n32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n33 -> n36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n41 -> n43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n44 -> n46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n51 -> n53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_8 -> m1_10  [color=darkseagreen4, key=1, label=queue, style=dashed];
m1_24 -> m1_8  [color=darkseagreen4, key=1, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", style=dashed];
m1_24 -> m1_9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", style=dashed];
m1_24 -> m1_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", style=dashed];
m1_24 -> m1_11  [color=darkseagreen4, key=1, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", style=dashed];
}
