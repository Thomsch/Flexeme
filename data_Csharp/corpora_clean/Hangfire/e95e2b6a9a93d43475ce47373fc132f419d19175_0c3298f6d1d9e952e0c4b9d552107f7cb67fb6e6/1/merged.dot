digraph  {
n59 [label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", span=""];
n60 [label=sqlQuery, span=""];
n61 [label=string, span=""];
n62 [label=int, span=""];
n63 [label=int, span=""];
n64 [label=sqlQuery, span=""];
n65 [label=string, span=""];
n66 [label=int, span=""];
n67 [label=int, span=""];
n68 [label=fetchedJobsSql, span=""];
n69 [label=string, span=""];
n70 [label=sqlQuery, span=""];
n0 [label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="42-42", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)"];
n1 [label="storage == null", span="44-44", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)"];
n2 [label="throw new ArgumentNullException(nameof(storage));", span="44-44", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)"];
n3 [label="_storage = storage", span="45-45", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)"];
n4 [label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="42-42", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)"];
n5 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n6 [label="Entry Unk.nameof", span="", cluster="Unk.nameof"];
n7 [label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", span="48-48", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()"];
n8 [label="string sqlQuery = $@''select distinct(Queue) from [{_storage.SchemaName}].JobQueue with (nolock)''", span="50-50", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()"];
n9 [label=_cacheLock, span="52-52", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()"];
n11 [label="var result = _storage.UseConnection(connection =>\r\n                    {\r\n                        return connection.Query(sqlQuery, commandTimeout: _storage.CommandTimeout).Select(x => (string) x.Queue).ToList();\r\n                    })", span="56-59", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()"];
n20 [label="return connection.Query(sqlQuery, commandTimeout: _storage.CommandTimeout).Select(x => (string) x.Queue).ToList();", span="58-58", cluster="lambda expression"];
n10 [label="_queuesCache.Count == 0 || _cacheUpdated.Add(QueuesCacheTimeout) < DateTime.UtcNow", span="54-54", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()"];
n14 [label="return _queuesCache.ToList();", span="65-65", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()"];
n16 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)"];
n12 [label="_queuesCache = result", span="61-61", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()"];
n17 [label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)", span="179-179", cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection<T>(System.Func<DbConnection, T>)"];
n19 [label="Entry lambda expression", span="56-59", cluster="lambda expression"];
n13 [label="_cacheUpdated = DateTime.UtcNow", span="62-62", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()"];
n15 [label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", span="48-48", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()"];
n18 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()"];
n21 [label="Exit lambda expression", span="56-59", cluster="lambda expression"];
n22 [label="Entry Unk.Query", span="", cluster="Unk.Query"];
n23 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n24 [label="Entry Unk.ToList", span="", cluster="Unk.ToList"];
n25 [label="Entry lambda expression", span="58-58", cluster="lambda expression"];
n26 [label="(string) x.Queue", span="58-58", cluster="lambda expression"];
n27 [label="Exit lambda expression", span="58-58", cluster="lambda expression"];
n28 [label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="69-69", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)"];
n29 [label="var sqlQuery =\r\n$@''select r.JobId from (\r\n  select jq.JobId, row_number() over (order by jq.Id) as row_num \r\n  from [{_storage.SchemaName}].JobQueue jq with (nolock, forceseek)\r\n  where jq.Queue = @queue and jq.FetchedAt is null\r\n) as r\r\nwhere r.row_num between @start and @end''", span="71-77", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", color=red, community=0];
n30 [label="return _storage.UseConnection(connection =>\r\n            {\r\n                // TODO: Remove cast to `int` to support `bigint`.\r\n                return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage },\r\n                    commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();\r\n            });", span="79-89", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)"];
n33 [label="return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage },\r\n                    commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();", span="82-88", cluster="lambda expression"];
n31 [label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="69-69", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)"];
n32 [label="Entry lambda expression", span="79-89", cluster="lambda expression"];
n34 [label="Exit lambda expression", span="79-89", cluster="lambda expression"];
n35 [label="Entry Unk.>", span="", cluster="Unk.>"];
n36 [label="Entry lambda expression", span="87-87", cluster="lambda expression"];
n37 [label="(int)x.JobId", span="87-87", cluster="lambda expression"];
n38 [label="Exit lambda expression", span="87-87", cluster="lambda expression"];
n39 [label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="92-92", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)"];
n40 [label="var fetchedJobsSql = $@''\r\nselect r.JobId from (\r\n  select jq.JobId, jq.FetchedAt, row_number() over (order by jq.Id) as row_num \r\n  from [{_storage.SchemaName}].JobQueue jq with (nolock, forceseek)\r\n  where jq.Queue = @queue and jq.FetchedAt is not null\r\n) as r\r\nwhere r.row_num between @start and @end''", span="94-100", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)"];
n41 [label="return _storage.UseConnection(connection =>\r\n            {\r\n                // TODO: Remove cast to `int` to support `bigint`.\r\n                return connection.Query<JobIdDto>(\r\n                        fetchedJobsSql,\r\n                        new { queue = queue, start = from + 1, end = @from + perPage })\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();\r\n            });", span="102-111", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)"];
n44 [label="return connection.Query<JobIdDto>(\r\n                        fetchedJobsSql,\r\n                        new { queue = queue, start = from + 1, end = @from + perPage })\r\n                    .ToList()\r\n                    .Select(x => (int)x.JobId)\r\n                    .ToList();", span="105-110", cluster="lambda expression"];
n42 [label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="92-92", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)"];
n43 [label="Entry lambda expression", span="102-111", cluster="lambda expression"];
n45 [label="Exit lambda expression", span="102-111", cluster="lambda expression"];
n46 [label="Entry lambda expression", span="109-109", cluster="lambda expression"];
n47 [label="(int)x.JobId", span="109-109", cluster="lambda expression"];
n48 [label="Exit lambda expression", span="109-109", cluster="lambda expression"];
n49 [label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="114-114", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)"];
n50 [label="var sqlQuery = $@''\r\nselect sum(Enqueued) as EnqueuedCount, sum(Fetched) as FetchedCount \r\nfrom (\r\n    select \r\n        case when FetchedAt is null then 1 else 0 end as Enqueued,\r\n        case when FetchedAt is not null then 1 else 0 end as Fetched\r\n    from [{_storage.SchemaName}].JobQueue with (nolock, forceseek)\r\n    where Queue = @queue\r\n) q''", span="116-124", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)"];
n51 [label="return _storage.UseConnection(connection =>\r\n            {\r\n                var result = connection.Query(sqlQuery, new { queue = queue }).Single();\r\n\r\n                return new EnqueuedAndFetchedCountDto\r\n                {\r\n                    EnqueuedCount = result.EnqueuedCount,\r\n                    FetchedCount = result.FetchedCount\r\n                };\r\n            });", span="126-135", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)"];
n54 [label="var result = connection.Query(sqlQuery, new { queue = queue }).Single()", span="128-128", cluster="lambda expression"];
n52 [label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="114-114", cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)"];
n53 [label="Entry lambda expression", span="126-135", cluster="lambda expression"];
n55 [label="return new EnqueuedAndFetchedCountDto\r\n                {\r\n                    EnqueuedCount = result.EnqueuedCount,\r\n                    FetchedCount = result.FetchedCount\r\n                };", span="130-134", cluster="lambda expression"];
n57 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
n56 [label="Exit lambda expression", span="126-135", cluster="lambda expression"];
n58 [label="Entry Hangfire.SqlServer.EnqueuedAndFetchedCountDto.EnqueuedAndFetchedCountDto()", span="18-18", cluster="Hangfire.SqlServer.EnqueuedAndFetchedCountDto.EnqueuedAndFetchedCountDto()"];
m1_4 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.RabbitMqChannel(System.Collections.Generic.IEnumerable<string>)", span="10-10", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.RabbitMqChannel(System.Collections.Generic.IEnumerable<string>)", file="BackgroundJobServerFacts.cs"];
m1_5 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.CreateQueue()", span="18-18", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.CreateQueue()", file="BackgroundJobServerFacts.cs"];
m1_6 [label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", span="20-20", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs"];
m1_7 [label="Monitor.Enter(GlobalLock)", span="22-22", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs"];
m1_8 [label=_queues, span="23-23", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs"];
m1_9 [label="_rabbitMq.Channel.QueueDeclare(queue, true, false, false, null)", span="25-25", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs"];
m1_11 [label="_rabbitMq.Dispose()", span="28-28", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs"];
m1_10 [label="_rabbitMq.Channel.QueuePurge(queue)", span="26-26", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs"];
m1_12 [label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", span="20-20", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs"];
m1_17 [label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", span="31-31", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs"];
m1_18 [label="Monitor.Exit(GlobalLock)", span="33-33", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs"];
m1_19 [label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", span="31-31", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", file="BackgroundJobServerFacts.cs"];
m1_20 [label="Entry System.Threading.Monitor.Exit(object)", span="0-0", cluster="System.Threading.Monitor.Exit(object)", file="BackgroundJobServerFacts.cs"];
m1_15 [label="Entry Unk.QueuePurge", span="", cluster="Unk.QueuePurge", file="BackgroundJobServerFacts.cs"];
m1_14 [label="Entry Unk.QueueDeclare", span="", cluster="Unk.QueueDeclare", file="BackgroundJobServerFacts.cs"];
m1_21 [label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", span="36-36", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="BackgroundJobServerFacts.cs"];
m1_22 [label="return new RabbitMqChannel(queue).CreateQueue();", span="38-38", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="BackgroundJobServerFacts.cs"];
m1_23 [label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", span="36-36", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="BackgroundJobServerFacts.cs"];
m1_16 [label="Entry HangFire.RabbitMQ.RabbitMqJobQueue.Dispose()", span="82-82", cluster="HangFire.RabbitMQ.RabbitMqJobQueue.Dispose()", file="BackgroundJobServerFacts.cs"];
m1_0 [label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", span="14-14", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="BackgroundJobServerFacts.cs"];
m1_1 [label="_queues = queues", span="16-16", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="BackgroundJobServerFacts.cs"];
m1_2 [label="_rabbitMq = new RabbitMqChannel(_queues).CreateQueue()", span="17-17", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="BackgroundJobServerFacts.cs"];
m1_3 [label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", span="14-14", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="BackgroundJobServerFacts.cs"];
m1_13 [label="Entry System.Threading.Monitor.Enter(object)", span="0-0", cluster="System.Threading.Monitor.Enter(object)", file="BackgroundJobServerFacts.cs"];
m1_24 [label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", span="", file="BackgroundJobServerFacts.cs"];
m2_0 [label="Entry HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", span="8-8", cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", file="CronFacts.cs"];
m2_1 [label="Exit HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", span="8-8", cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.WorkerContext)", file="CronFacts.cs"];
m2_2 [label="Entry HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", span="13-13", cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="CronFacts.cs"];
m2_3 [label="WorkerNumber = workerNumber", span="16-16", cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="CronFacts.cs"];
m2_4 [label="Exit HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", span="13-13", cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="CronFacts.cs"];
m2_5 [label="HangFire.Server.WorkerContext", span="", file="CronFacts.cs"];
n59 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n29  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n33  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n40  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n50  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n59 -> n51  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi"];
n60 -> n20  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
n61 -> n33  [key=1, style=dashed, color=darkseagreen4, label=string];
n62 -> n33  [key=1, style=dashed, color=darkseagreen4, label=int];
n63 -> n33  [key=1, style=dashed, color=darkseagreen4, label=int];
n64 -> n33  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
n65 -> n44  [key=1, style=dashed, color=darkseagreen4, label=string];
n66 -> n44  [key=1, style=dashed, color=darkseagreen4, label=int];
n67 -> n44  [key=1, style=dashed, color=darkseagreen4, label=int];
n68 -> n44  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobsSql];
n69 -> n54  [key=1, style=dashed, color=darkseagreen4, label=string];
n70 -> n54  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
n0 -> n1  [key=0, style=solid];
n0 -> n2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
n0 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=0, style=solid];
n2 -> n4  [key=0, style=solid];
n2 -> n5  [key=2, style=dotted];
n2 -> n6  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n4 -> n0  [key=0, style=bold, color=blue];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n8 -> n11  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
n8 -> n20  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
n9 -> n10  [key=0, style=solid];
n11 -> n12  [key=0, style=solid];
n11 -> n17  [key=2, style=dotted];
n11 -> n19  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n20 -> n21  [key=0, style=solid];
n20 -> n22  [key=2, style=dotted];
n20 -> n23  [key=2, style=dotted];
n20 -> n24  [key=2, style=dotted];
n20 -> n25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n10 -> n11  [key=0, style=solid];
n10 -> n14  [key=0, style=solid];
n10 -> n16  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid];
n14 -> n18  [key=2, style=dotted];
n12 -> n13  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n13 -> n14  [key=0, style=solid];
n15 -> n7  [key=0, style=bold, color=blue];
n21 -> n19  [key=0, style=bold, color=blue];
n25 -> n26  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n27 -> n25  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid, color=red];
n28 -> n30  [key=1, style=dashed, color=darkseagreen4, label=string];
n28 -> n33  [key=1, style=dashed, color=darkseagreen4, label=string];
n29 -> n30  [key=0, style=solid, color=red];
n29 -> n33  [key=1, style=dashed, color=red, label=sqlQuery];
n30 -> n31  [key=0, style=solid];
n30 -> n17  [key=2, style=dotted];
n30 -> n32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n33 -> n34  [key=0, style=solid];
n33 -> n35  [key=2, style=dotted];
n33 -> n24  [key=2, style=dotted];
n33 -> n23  [key=2, style=dotted];
n33 -> n36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n31 -> n28  [key=0, style=bold, color=blue];
n32 -> n33  [key=0, style=solid];
n34 -> n32  [key=0, style=bold, color=blue];
n36 -> n37  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n38 -> n36  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n39 -> n41  [key=1, style=dashed, color=darkseagreen4, label=string];
n39 -> n44  [key=1, style=dashed, color=darkseagreen4, label=string];
n40 -> n41  [key=0, style=solid];
n40 -> n44  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobsSql];
n41 -> n42  [key=0, style=solid];
n41 -> n17  [key=2, style=dotted];
n41 -> n43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n44 -> n45  [key=0, style=solid];
n44 -> n35  [key=2, style=dotted];
n44 -> n24  [key=2, style=dotted];
n44 -> n23  [key=2, style=dotted];
n44 -> n46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n42 -> n39  [key=0, style=bold, color=blue];
n43 -> n44  [key=0, style=solid];
n45 -> n43  [key=0, style=bold, color=blue];
n46 -> n47  [key=0, style=solid];
n47 -> n48  [key=0, style=solid];
n48 -> n46  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid];
n49 -> n51  [key=1, style=dashed, color=darkseagreen4, label=string];
n49 -> n54  [key=1, style=dashed, color=darkseagreen4, label=string];
n50 -> n51  [key=0, style=solid];
n50 -> n54  [key=1, style=dashed, color=darkseagreen4, label=sqlQuery];
n51 -> n52  [key=0, style=solid];
n51 -> n17  [key=2, style=dotted];
n51 -> n53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n54 -> n55  [key=0, style=solid];
n54 -> n22  [key=2, style=dotted];
n54 -> n57  [key=2, style=dotted];
n52 -> n49  [key=0, style=bold, color=blue];
n53 -> n54  [key=0, style=solid];
n55 -> n56  [key=0, style=solid];
n55 -> n58  [key=2, style=dotted];
n56 -> n53  [key=0, style=bold, color=blue];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_13  [key=2, style=dotted];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_11  [key=0, style=solid];
m1_8 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label=queue];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_14  [key=2, style=dotted];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_16  [key=2, style=dotted];
m1_10 -> m1_8  [key=0, style=solid];
m1_10 -> m1_15  [key=2, style=dotted];
m1_12 -> m1_6  [key=0, style=bold, color=blue];
m1_17 -> m1_18  [key=0, style=solid];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_20  [key=2, style=dotted];
m1_19 -> m1_17  [key=0, style=bold, color=blue];
m1_21 -> m1_22  [key=0, style=solid];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_4  [key=2, style=dotted];
m1_22 -> m1_5  [key=2, style=dotted];
m1_23 -> m1_21  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_4  [key=2, style=dotted];
m1_2 -> m1_5  [key=2, style=dotted];
m1_3 -> m1_0  [key=0, style=bold, color=blue];
m1_24 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m1_24 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m1_24 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m1_24 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m1_24 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m1_24 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_4 -> m2_2  [key=0, style=bold, color=blue];
m2_5 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.WorkerContext"];
}
