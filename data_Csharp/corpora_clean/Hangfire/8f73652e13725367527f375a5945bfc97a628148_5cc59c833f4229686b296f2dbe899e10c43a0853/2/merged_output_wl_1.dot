digraph  {
m0_64 [cluster="HangFire.Storage.IMonitoringApi.ScheduledJobs(int, int)", file="ClientApiTests.cs", label="Entry HangFire.Storage.IMonitoringApi.ScheduledJobs(int, int)", span="33-33"];
m0_59 [cluster="Unk.TryParse", file="ClientApiTests.cs", label="Entry Unk.TryParse", span=""];
m0_57 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="ClientApiTests.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69"];
m0_65 [cluster="HangFire.Web.RazorPage.Write(object)", file="ClientApiTests.cs", label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76"];
m0_60 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="ClientApiTests.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54"];
m0_58 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="ClientApiTests.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m0_0 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Entry HangFire.Web.Pages.ScheduledJobsPage.Execute()", span="47-47"];
m0_1 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\r\n'')", span="51-51"];
m0_2 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=red, community=0, file="ClientApiTests.cs", label="0: Layout = new LayoutPage { Title = ''Scheduled Jobs'' }", span="62-62"];
m0_3 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="int from, perPage", span="64-64"];
m0_4 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="int.TryParse(Request.QueryString[''from''], out from)", span="66-66"];
m0_5 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="int.TryParse(Request.QueryString[''count''], out perPage)", span="67-67"];
m0_9 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=red, community=0, file="ClientApiTests.cs", label="0: pager = new Pager(from, perPage, monitor.ScheduledCount())\r\n        {\r\n            BasePageUrl = Request.LinkTo(''/scheduled'')\r\n        }", span="74-77"];
m0_6 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Pager pager", span="69-69"];
m0_7 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="JobList<ScheduledJobDto> scheduledJobs", span="70-70"];
m0_8 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="var monitor = JobStorage.Current.GetMonitoringApi()", span="72-72"];
m0_10 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="scheduledJobs = monitor.ScheduledJobs(pager.FromRecord, pager.RecordsPerPage)", span="79-79"];
m0_12 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="pager.TotalPageCount == 0", span="91-91"];
m0_19 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(RenderPartial(new PerPageSelector(pager)))", span="151-151"];
m0_55 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(RenderPartial(new Paginator(pager)))", span="383-383"];
m0_11 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\r\n'')", span="86-86"];
m0_21 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=red, community=0, file="ClientApiTests.cs", label="3: scheduledJobs", span="176-176"];
m0_13 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''    <div class=\''alert alert-info\''>\r\n        There are no scheduled jobs.\r\n    </d'' +\r\n''iv>\r\n'')", span="97-98"];
m0_14 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=red, community=0, file="ClientApiTests.cs", label="0: WriteLiteral(''    <div class=\''js-jobs-list\''>\r\n        <div class=\''btn-toolbar btn-toolbar-top\''>'' +\r\n''\r\n            <button class=\''js-jobs-list-command btn btn-sm btn-primary\''\r\n     '' +\r\n''               data-url=\'''')", span="110-112"];
m0_15 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(Request.LinkTo(''/scheduled/enqueue''))", span="117-117"];
m0_16 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(@''''''\r\n                    data-loading-text=''''Enqueueing...''''>\r\n                <span class=''''glyphicon glyphicon-play''''></span>\r\n                Enqueue now\r\n            </button>\r\n\r\n            <button class=''''js-jobs-list-command btn btn-sm btn-default''''\r\n                    data-url='''''')", span="122-129"];
m0_17 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(Request.LinkTo(''/scheduled/delete''))", span="134-134"];
m0_18 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=red, community=0, file="ClientApiTests.cs", label="0: WriteLiteral(@''''''\r\n                    data-loading-text=''''Deleting...''''\r\n                    data-confirm=''''Do you really want to DELETE ALL selected jobs?''''>\r\n                <span class=''''glyphicon glyphicon-remove''''></span>\r\n                Delete selected\r\n            </button>\r\n\r\n            '')", span="139-146"];
m0_20 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=red, community=0, file="ClientApiTests.cs", label="0: WriteLiteral(@''\r\n        </div>\r\n\r\n        <table class=''''table''''>\r\n            <thead>\r\n                <tr>\r\n                    <th class=''''min-width''''>\r\n                        <input type=''''checkbox'''' class=''''js-jobs-list-select-all'''' />\r\n                    </th>\r\n                    <th class=''''min-width''''>Id</th>\r\n                    <th>Enqueue</th>\r\n                    <th>Job</th>\r\n                    <th class=''''align-right''''>Scheduled</th>\r\n                </tr>\r\n            </thead>\r\n'')", span="156-171"];
m0_22 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=red, community=0, file="ClientApiTests.cs", label="3: WriteLiteral(''                <tr class=\''js-jobs-list-row '')", span="182-182"];
m0_54 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''        </table>\r\n    </div>\r\n'')", span="371-371"];
m0_23 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(!job.Value.InScheduledState ? ''obsolete-data'' : null)", span="187-187"];
m0_24 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral('' '')", span="192-192"];
m0_25 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(job.Value.InScheduledState ? ''hover'' : null)", span="197-197"];
m0_26 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\''>\r\n                    <td>\r\n'')", span="202-202"];
m0_27 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", color=red, community=0, file="ClientApiTests.cs", label="3: job.Value.InScheduledState", span="207-207"];
m0_28 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''                            <input type=\''checkbox\'' class=\''js-jobs-list-checkbox\'' '' +\r\n''name=\''jobs[]\'' value=\'''')", span="213-214"];
m0_31 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''                    </td>\r\n                    <td class=\''min-width\''>\r\n          '' +\r\n''              <a href=\'''')", span="234-235"];
m0_29 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(job.Key)", span="219-219"];
m0_32 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="240-240"];
m0_30 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\'' />\r\n'')", span="224-224"];
m0_33 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\''>\r\n                            '')", span="245-245"];
m0_34 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(HtmlHelper.JobId(job.Key))", span="250-250"];
m0_35 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\r\n                        </a>\r\n'')", span="255-255"];
m0_36 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="!job.Value.InScheduledState", span="260-260"];
m0_37 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''                            <span title=\''Job\'s state has been changed while fetch'' +\r\n''ing data.\'' class=\''glyphicon glyphicon-question-sign\''></span>\r\n'')", span="266-267"];
m0_38 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''                    </td>\r\n                    <td class=\''min-width\''>\r\n          '' +\r\n''              <span data-moment=\'''')", span="277-278"];
m0_39 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(JobHelper.ToStringTimestamp(job.Value.EnqueueAt))", span="283-283"];
m0_40 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\''>\r\n                            '')", span="288-288"];
m0_41 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(job.Value.EnqueueAt)", span="293-293"];
m0_42 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\r\n                        </span>\r\n                    </td>\r\n                   '' +\r\n'' <td>\r\n                        <a class=\''job-method\'' href=\'''')", span="298-299"];
m0_43 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="304-304"];
m0_44 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\''>\r\n                            '')", span="309-309"];
m0_45 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(HtmlHelper.DisplayMethod(job.Value.Job))", span="314-314"];
m0_46 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\r\n                        </a>\r\n                    </td>\r\n                    <t'' +\r\n''d class=\''align-right\''>\r\n'')", span="319-320"];
m0_47 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="job.Value.ScheduledAt != null", span="325-325"];
m0_48 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''                            <span data-moment=\'''')", span="331-331"];
m0_53 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''                    </td>\r\n                </tr>\r\n'')", span="361-361"];
m0_49 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(JobHelper.ToStringTimestamp(job.Value.ScheduledAt.Value))", span="336-336"];
m0_50 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\''>\r\n                                '')", span="341-341"];
m0_51 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Write(job.Value.ScheduledAt)", span="346-346"];
m0_52 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="WriteLiteral(''\r\n                            </span>\r\n'')", span="351-351"];
m0_56 [cluster="HangFire.Web.Pages.ScheduledJobsPage.Execute()", file="ClientApiTests.cs", label="Exit HangFire.Web.Pages.ScheduledJobsPage.Execute()", span="47-47"];
m0_66 [cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="ClientApiTests.cs", label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6"];
m0_68 [cluster="Unk.Write", file="ClientApiTests.cs", label="Entry Unk.Write", span=""];
m0_63 [cluster="HttpRequestBase.LinkTo(string)", file="ClientApiTests.cs", label="Entry HttpRequestBase.LinkTo(string)", span="24-24"];
m0_71 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", file="ClientApiTests.cs", label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", span="30-30"];
m0_72 [cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="ClientApiTests.cs", label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6"];
m0_62 [cluster="HangFire.Storage.IMonitoringApi.ScheduledCount()", file="ClientApiTests.cs", label="Entry HangFire.Storage.IMonitoringApi.ScheduledCount()", span="38-38"];
m0_67 [cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="ClientApiTests.cs", label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="89-89"];
m0_70 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ClientApiTests.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m0_61 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="ClientApiTests.cs", label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29"];
m0_69 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", file="ClientApiTests.cs", label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="45-45"];
m0_73 [file="ClientApiTests.cs", label="HangFire.Web.Pages.ScheduledJobsPage", span=""];
m1_19 [cluster="HangFire.QueueAttribute.QueueAttribute(string)", file="ClientFilters.feature.cs", label="Entry HangFire.QueueAttribute.QueueAttribute(string)", span="55-55"];
m1_5 [cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ClientFilters.feature.cs", label="Exit HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", span="14-14"];
m1_20 [cluster="Unk.Equal", file="ClientFilters.feature.cs", label="Entry Unk.Equal", span=""];
m1_0 [cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ClientFilters.feature.cs", label="Entry HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", span="14-14"];
m1_1 [cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ClientFilters.feature.cs", label="_stateContext = new StateContext(''id'', Job.FromExpression(() => Sample()))", span="16-16"];
m1_2 [cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ClientFilters.feature.cs", label="_connection = new Mock<IStorageConnection>()", span="17-17"];
m1_3 [cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ClientFilters.feature.cs", label="var enqueuedState = new EnqueuedState(''queue'')", span="18-18"];
m1_11 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="16-16"];
m1_33 [cluster="Unk.DoesNotThrow", file="ClientFilters.feature.cs", label="Entry Unk.DoesNotThrow", span=""];
m1_27 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_DoesNotDoAnything_IfStateIsNotEnqueuedState()", file="ClientFilters.feature.cs", label="Entry HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_DoesNotDoAnything_IfStateIsNotEnqueuedState()", span="40-40"];
m1_28 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_DoesNotDoAnything_IfStateIsNotEnqueuedState()", file="ClientFilters.feature.cs", label="var filter = new QueueAttribute(''override'')", span="42-42"];
m1_29 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_DoesNotDoAnything_IfStateIsNotEnqueuedState()", file="ClientFilters.feature.cs", label="var context = new ElectStateContext(_context, new Mock<State>().Object, null, _connection.Object)", span="43-43"];
m1_30 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_DoesNotDoAnything_IfStateIsNotEnqueuedState()", file="ClientFilters.feature.cs", label="Assert.DoesNotThrow(() => filter.OnStateElection(context))", span="45-45"];
m1_31 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_DoesNotDoAnything_IfStateIsNotEnqueuedState()", file="ClientFilters.feature.cs", label="Exit HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_DoesNotDoAnything_IfStateIsNotEnqueuedState()", span="40-40"];
m1_4 [cluster="HangFire.States.SucceededState.SucceededState()", color=red, community=0, file="ClientFilters.feature.cs", label="0: Entry HangFire.States.SucceededState.SucceededState()", span="27-27"];
m1_6 [cluster="HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", file="ClientFilters.feature.cs", label="Entry HangFire.Core.Tests.States.SucceededStateFacts.SerializeData_ReturnsCorrectData()", span="17-17"];
m1_7 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="ClientFilters.feature.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119"];
m1_8 [cluster="Mock<IStorageConnection>.cstr", file="ClientFilters.feature.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m1_9 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string)", file="ClientFilters.feature.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string)", span="36-36"];
m1_10 [cluster="ElectStateContext.cstr", file="ClientFilters.feature.cs", label="Entry ElectStateContext.cstr", span=""];
m1_21 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", file="ClientFilters.feature.cs", label="Entry HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", span="31-31"];
m1_22 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", file="ClientFilters.feature.cs", label="var filter = new QueueAttribute(''override'')", span="33-33"];
m1_23 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", file="ClientFilters.feature.cs", label="filter.OnStateElection(_context)", span="34-34"];
m1_24 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", file="ClientFilters.feature.cs", label="Assert.Equal(''override'', ((EnqueuedState)_context.CandidateState).Queue)", span="36-36"];
m1_25 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", file="ClientFilters.feature.cs", label="Exit HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", span="31-31"];
m1_26 [cluster="HangFire.QueueAttribute.OnStateElection(HangFire.States.ElectStateContext)", file="ClientFilters.feature.cs", label="Entry HangFire.QueueAttribute.OnStateElection(HangFire.States.ElectStateContext)", span="65-65"];
m1_14 [cluster="HangFire.Core.Tests.States.SucceededStateFacts.ShouldExpireJobOnApply()", color=green, community=0, file="ClientFilters.feature.cs", label="0: var state = new SucceededState()", span="29-29"];
m1_37 [cluster="HangFire.Core.Tests.QueueAttributeFacts.Sample()", file="ClientFilters.feature.cs", label="Exit HangFire.Core.Tests.QueueAttributeFacts.Sample()", span="48-48"];
m1_32 [cluster="Mock<State>.cstr", file="ClientFilters.feature.cs", label="Entry Mock<State>.cstr", span=""];
m1_34 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Entry lambda expression", span="45-45"];
m1_12 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ClientFilters.feature.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m1_13 [cluster="HangFire.Core.Tests.States.SucceededStateFacts.ShouldExpireJobOnApply()", file="ClientFilters.feature.cs", label="Entry HangFire.Core.Tests.States.SucceededStateFacts.ShouldExpireJobOnApply()", span="27-27"];
m1_35 [cluster="lambda expression", file="ClientFilters.feature.cs", label="filter.OnStateElection(context)", span="45-45"];
m1_36 [cluster="lambda expression", file="ClientFilters.feature.cs", label="Exit lambda expression", span="45-45"];
m1_15 [cluster="HangFire.Core.Tests.States.SucceededStateFacts.ShouldExpireJobOnApply()", color=green, community=0, file="ClientFilters.feature.cs", label="1: Assert.True(state.ExpireJobOnApply)", span="30-30"];
m1_16 [cluster="HangFire.Core.Tests.States.SucceededStateFacts.ShouldExpireJobOnApply()", file="ClientFilters.feature.cs", label="Exit HangFire.Core.Tests.States.SucceededStateFacts.ShouldExpireJobOnApply()", span="27-27"];
m1_17 [cluster="Unk.True", file="ClientFilters.feature.cs", label="Entry Unk.True", span=""];
m1_18 [cluster="HangFire.Core.Tests.QueueAttributeFacts.Ctor_CorrectlySets_AllPropertyValues()", file="ClientFilters.feature.cs", label="Exit HangFire.Core.Tests.QueueAttributeFacts.Ctor_CorrectlySets_AllPropertyValues()", span="24-24"];
m1_38 [file="ClientFilters.feature.cs", label="HangFire.Core.Tests.QueueAttributeFacts", span=""];
m1_39 [file="ClientFilters.feature.cs", label=filter, span=""];
m1_40 [file="ClientFilters.feature.cs", label=context, span=""];
m2_157 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ChangesTheStateOfAJob_ToTheGivenOne()", file="ClientSteps.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                null))", span="174-177"];
m2_91 [cluster="HangFire.BackgroundJobClient.Dispose()", file="ClientSteps.cs", label="Entry HangFire.BackgroundJobClient.Dispose()", span="113-113"];
m2_92 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="96-96"];
m2_93 [cluster="lambda expression", file="ClientSteps.cs", label="x.Dispose()", span="96-96"];
m2_94 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="96-96"];
m2_95 [cluster="Unk.Dispose", file="ClientSteps.cs", label="Entry Unk.Dispose", span=""];
m2_96 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="ClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="100-100"];
m2_97 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="ClientSteps.cs", label="var client = CreateClient()", span="102-102"];
m2_79 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_TakesAConnection()", file="ClientSteps.cs", label="_storage.Verify(x => x.GetConnection())", span="87-87"];
m2_154 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="ClientSteps.cs", label="var exception = Assert.Throws<JobPerformanceException>(\r\n                () => performer.Perform(_context.Object))", span="191-192"];
m2_155 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="ClientSteps.cs", label="Assert.NotNull(exception.InnerException)", span="194-194"];
m2_156 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", span="184-184"];
m2_158 [cluster="Unk.NotNull", file="ClientSteps.cs", label="Entry Unk.NotNull", span=""];
m2_171 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="201-201"];
m2_172 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Method()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Method()", span="267-267"];
m2_173 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="205-205"];
m2_174 [cluster="lambda expression", file="ClientSteps.cs", label="performer.Perform(_context.Object)", span="205-205"];
m2_175 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="205-205"];
m2_176 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", span="211-211"];
m2_15 [cluster="Mock<IStateMachine>.cstr", file="ClientSteps.cs", label="Entry Mock<IStateMachine>.cstr", span=""];
m2_144 [cluster="lambda expression", file="ClientSteps.cs", label="InstanceMethod()", span="176-176"];
m2_86 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="ClientSteps.cs", label="var performer = CreatePerformer()", span="118-118"];
m2_87 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="ClientSteps.cs", label="performer.Perform(_context.Object)", span="121-121"];
m2_89 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", span="108-108"];
m2_88 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="ClientSteps.cs", label="Assert.True(_methodInvoked)", span="124-124"];
m2_90 [cluster="System.DateTime.ToString(string)", file="ClientSteps.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m2_16 [cluster="Mock<IStateMachineFactory>.cstr", file="ClientSteps.cs", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
m2_17 [cluster="Mock<IJobCreationProcess>.cstr", file="ClientSteps.cs", label="Entry Mock<IJobCreationProcess>.cstr", span=""];
m2_18 [cluster="Mock<IState>.cstr", file="ClientSteps.cs", label="Entry Mock<IState>.cstr", span=""];
m2_19 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="ClientSteps.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="117-117"];
m2_20 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", file="ClientSteps.cs", label="performer.Perform(_context.Object)", span="42-42"];
m2_21 [cluster="lambda expression", file="ClientSteps.cs", label="x.GetConnection()", span="24-24"];
m2_22 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeStaticMethods()", span="36-36"];
m2_229 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Dispose()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Dispose()", span="278-278"];
m2_230 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Dispose()", file="ClientSteps.cs", label="_disposed = true", span="280-280"];
m2_231 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Dispose()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Dispose()", span="278-278"];
m2_153 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="ClientSteps.cs", label="var performer = CreatePerformer()", span="189-189"];
m2_216 [cluster="Hangfire.Core.Tests.Common.JobFacts.Instance.FunctionReturningValue()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Common.JobFacts.Instance.FunctionReturningValue()", span="571-571"];
m2_238 [cluster="Hangfire.IJobCancellationToken.ThrowIfCancellationRequested()", file="ClientSteps.cs", label="Entry Hangfire.IJobCancellationToken.ThrowIfCancellationRequested()", span="24-24"];
m2_31 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", span="48-48"];
m2_181 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="ClientSteps.cs", label="Assert.Equal(''exception'', thrownException.InnerException.Message)", span="220-220"];
m2_30 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="33-33"];
m2_242 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.StaticMethod()", file="ClientSteps.cs", label="_methodInvoked = true", span="303-303"];
m2_243 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.StaticMethod()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.StaticMethod()", span="301-301"];
m2_41 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="51-51"];
m2_112 [cluster="HangFire.BackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.IState)", file="ClientSteps.cs", label="Entry HangFire.BackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.IState)", span="81-81"];
m2_232 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.NullArgumentMethod(string[])", file="ClientSteps.cs", label="_methodInvoked = true", span="285-285"];
m2_233 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.NullArgumentMethod(string[])", file="ClientSteps.cs", label="Assert.Null(argument)", span="286-286"];
m2_234 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.NullArgumentMethod(string[])", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.NullArgumentMethod(string[])", span="283-283"];
m2_5 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="ClientSteps.cs", label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="28-28"];
m2_12 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="30-30"];
m2_190 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", span="224-224"];
m2_191 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="ClientSteps.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => CancelableJob(JobCancellationToken.Null))", span="227-227"];
m2_192 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="ClientSteps.cs", label="_context.CancellationToken.Setup(x => x.ThrowIfCancellationRequested()).Throws<OperationCanceledException>()", span="228-228"];
m2_193 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="ClientSteps.cs", label="var performer = CreatePerformer()", span="229-229"];
m2_194 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="ClientSteps.cs", label="Assert.Throws<OperationCanceledException>(\r\n                () => performer.Perform(_context.Object))", span="232-233"];
m2_195 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCancellationToken_IfThereIsIJobCancellationTokenParameter()", span="224-224"];
m2_98 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="132-132"];
m2_99 [cluster="lambda expression", file="ClientSteps.cs", label="MethodWithDateTimeArgument(SomeDateTime)", span="132-132"];
m2_100 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="132-132"];
m2_101 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="105-105"];
m2_239 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithDateTimeArgument(System.DateTime)", file="ClientSteps.cs", label="_methodInvoked = true", span="296-296"];
m2_240 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithDateTimeArgument(System.DateTime)", file="ClientSteps.cs", label="Assert.Equal(SomeDateTime, argument)", span="298-298"];
m2_241 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithDateTimeArgument(System.DateTime)", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithDateTimeArgument(System.DateTime)", span="294-294"];
m2_24 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="29-29"];
m2_251 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CreatePerformer()", file="ClientSteps.cs", label="return new CoreBackgroundJobPerformer(_activator.Object);", span="321-321"];
m2_252 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CreatePerformer()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CreatePerformer()", span="319-319"];
m2_38 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="40-40"];
m2_78 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_TakesAConnection()", color=green, community=0, file="ClientSteps.cs", label="0: CreateClient()", span="86-86"];
m2_121 [cluster="Unk.Setup", file="ClientSteps.cs", label="Entry Unk.Setup", span=""];
m2_64 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", span="306-306"];
m2_163 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="ClientSteps.cs", label="_methodInvoked = false", span="200-200"];
m2_164 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="ClientSteps.cs", label="_context.BackgroundJob.Job = Job.FromExpression<BrokenDispose>(x => x.Method())", span="201-201"];
m2_165 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="ClientSteps.cs", label="var performer = CreatePerformer()", span="202-202"];
m2_166 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="ClientSteps.cs", label="Assert.Throws<InvalidOperationException>(\r\n                () => performer.Perform(_context.Object))", span="204-205"];
m2_167 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="ClientSteps.cs", label="Assert.True(_methodInvoked)", span="207-207"];
m2_65 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", file="ClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", span="71-71"];
m2_66 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", file="ClientSteps.cs", label="Assert.DoesNotThrow(() => new BackgroundJobClient(_storage.Object))", span="73-73"];
m2_67 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", file="ClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", span="71-71"];
m2_68 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="73-73"];
m2_69 [cluster="lambda expression", file="ClientSteps.cs", label="new BackgroundJobClient(_storage.Object)", span="73-73"];
m2_71 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", file="ClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", span="77-77"];
m2_70 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="73-73"];
m2_72 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", file="ClientSteps.cs", label="Assert.DoesNotThrow(\r\n                () => new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object))", span="79-80"];
m2_73 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", file="ClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", span="77-77"];
m2_74 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="80-80"];
m2_75 [cluster="lambda expression", file="ClientSteps.cs", label="new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object)", span="80-80"];
m2_113 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="ClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", span="122-122"];
m2_114 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="ClientSteps.cs", label="var client = CreateClient()", span="124-124"];
m2_115 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="ClientSteps.cs", label="client.Create(_job, _state.Object)", span="126-126"];
m2_116 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="ClientSteps.cs", label="_process.Verify(x => x.Run(It.IsNotNull<CreateContext>()))", span="128-128"];
m2_117 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="ClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", span="122-122"];
m2_118 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="128-128"];
m2_119 [cluster="lambda expression", file="ClientSteps.cs", label="x.Run(It.IsNotNull<CreateContext>())", span="128-128"];
m2_43 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", color=green, community=0, file="ClientSteps.cs", label="0: var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, null, _process.Object))", span="48-49"];
m2_44 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="ClientSteps.cs", label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="51-51"];
m2_45 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="ClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="46-46"];
m2_46 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="49-49"];
m2_47 [cluster="lambda expression", color=green, community=0, file="ClientSteps.cs", label="0: new BackgroundJobClient(_storage.Object, null, _process.Object)", span="49-49"];
m2_48 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="49-49"];
m2_49 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", file="ClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", span="55-55"];
m2_150 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="ClientSteps.cs", label="var type = typeof(JobFacts)", span="186-186"];
m2_13 [cluster="Unk.Setup", color=red, community=0, file="ClientSteps.cs", label="0: Entry Unk.Setup", span=""];
m2_14 [cluster="Unk.Returns", file="ClientSteps.cs", label="Entry Unk.Returns", span=""];
m2_27 [cluster="Unk.Create", file="ClientSteps.cs", label="Entry Unk.Create", span=""];
m2_28 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="33-33"];
m2_29 [cluster="lambda expression", file="ClientSteps.cs", label="Method()", span="33-33"];
m2_39 [cluster="lambda expression", file="ClientSteps.cs", label="new BackgroundJobClient(null, _stateMachineFactory.Object, _process.Object)", span="40-40"];
m2_40 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="40-40"];
m2_50 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", file="ClientSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, null))", span="57-58"];
m2_51 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", color=green, community=0, file="ClientSteps.cs", label="0: Assert.Equal(''process'', exception.ParamName)", span="60-60"];
m2_52 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", file="ClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", span="55-55"];
m2_61 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="76-76"];
m2_62 [cluster="lambda expression", color=green, community=0, file="ClientSteps.cs", label="0: new BackgroundJobClient()", span="67-67"];
m2_63 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="76-76"];
m2_109 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="116-116"];
m2_110 [cluster="lambda expression", file="ClientSteps.cs", label="client.Create(_job, null)", span="116-116"];
m2_111 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="116-116"];
m2_123 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="ClientSteps.cs", label="var client = CreateClient()", span="134-134"];
m2_127 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="ClientSteps.cs", label="Assert.IsType<InvalidOperationException>(exception.InnerException)", span="142-142"];
m2_131 [cluster="lambda expression", file="ClientSteps.cs", label="x.Run(It.IsAny<CreateContext>())", span="135-135"];
m2_130 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="135-135"];
m2_124 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="ClientSteps.cs", label="_process.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="135-136"];
m2_125 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="ClientSteps.cs", label="var exception = Assert.Throws<CreateJobFailedException>(\r\n                () => client.Create(_job, _state.Object))", span="138-139"];
m2_128 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="ClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", span="132-132"];
m2_129 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="164-164"];
m2_132 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="135-135"];
m2_140 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="ClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="146-146"];
m2_143 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="151-151"];
m2_147 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="ClientSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.ChangeState(''jobId'', null, null))", span="161-162"];
m2_146 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="ClientSteps.cs", label="var client = CreateClient()", span="159-159"];
m2_141 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="151-151"];
m2_142 [cluster="lambda expression", file="ClientSteps.cs", label="client.ChangeState(null, _state.Object, null)", span="151-151"];
m2_145 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="ClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", span="157-157"];
m2_148 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenStateIsNull()", file="ClientSteps.cs", label="Assert.Equal(''state'', exception.ParamName)", span="164-164"];
m2_160 [cluster="lambda expression", file="ClientSteps.cs", label="x.TryToChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                null)", span="174-177"];
m2_159 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="174-177"];
m2_161 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="174-177"];
m2_169 [cluster="lambda expression", file="ClientSteps.cs", label="x.TryToChangeState(\r\n                ''job-id'',\r\n                _state.Object,\r\n                new[] { ''State'' })", span="187-190"];
m2_170 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="187-190"];
m2_183 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="ClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="209-209"];
m2_188 [cluster="lambda expression", file="ClientSteps.cs", label=client, span=""];
m2_187 [cluster="lambda expression", file="ClientSteps.cs", label=client, span=""];
m2_184 [cluster="lambda expression", file="ClientSteps.cs", label="HangFire.Core.Tests.BackgroundJobClientFacts", span=""];
m2_185 [cluster="lambda expression", file="ClientSteps.cs", label=client, span=""];
m2_189 [cluster="lambda expression", file="ClientSteps.cs", label=client, span=""];
m2_196 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="227-227"];
m2_200 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="228-228"];
m2_205 [cluster="lambda expression", file="ClientSteps.cs", label="performer.Perform(_context.Object)", span="233-233"];
m2_204 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="233-233"];
m2_197 [cluster="lambda expression", file="ClientSteps.cs", label="CancelableJob(JobCancellationToken.Null)", span="227-227"];
m2_198 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="227-227"];
m2_201 [cluster="lambda expression", file="ClientSteps.cs", label="x.ThrowIfCancellationRequested()", span="228-228"];
m2_202 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="228-228"];
m2_206 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="233-233"];
m2_213 [cluster="lambda expression", file="ClientSteps.cs", label="Entry lambda expression", span="239-239"];
m2_214 [cluster="lambda expression", file="ClientSteps.cs", label="x.FunctionReturningValue()", span="239-239"];
m2_215 [cluster="lambda expression", file="ClientSteps.cs", label="Exit lambda expression", span="239-239"];
m2_25 [cluster="Hangfire.Server.CoreBackgroundJobPerformer.Perform(Hangfire.Server.PerformContext)", file="ClientSteps.cs", label="Entry Hangfire.Server.CoreBackgroundJobPerformer.Perform(Hangfire.Server.PerformContext)", span="41-41"];
m2_54 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", span="72-72"];
m2_102 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", span="143-143"];
m2_134 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="ClientSteps.cs", label="_activator.Setup(x => x.ActivateJob(It.IsNotNull<Type>())).Returns(null)", span="175-175"];
m2_179 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="ClientSteps.cs", label="var thrownException = Assert.Throws<JobPerformanceException>(\r\n                () => performer.Perform(_context.Object))", span="216-217"];
m2_53 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Method()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Method()", span="254-254"];
m2_83 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="ClientSteps.cs", label="var type = typeof(CoreBackgroundJobPerformerFacts)", span="114-114"];
m2_26 [cluster="Unk.True", file="ClientSteps.cs", label="Entry Unk.True", span=""];
m2_55 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="ClientSteps.cs", label="_methodInvoked = false", span="75-75"];
m2_76 [cluster="System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", file="ClientSteps.cs", label="Entry System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", span="0-0"];
m2_103 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="ClientSteps.cs", label="_methodInvoked = false", span="146-146"];
m2_133 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", span="173-173"];
m2_135 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WhenActivatorReturnsNull()", file="ClientSteps.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => InstanceMethod())", span="176-176"];
m2_151 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="ClientSteps.cs", label="var method = type.GetMethod(''MethodWithDateTimeArgument'')", span="187-187"];
m2_168 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnDisposalFailure()", span="198-198"];
m2_178 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="ClientSteps.cs", label="var performer = CreatePerformer()", span="214-214"];
m2_180 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="ClientSteps.cs", label="Assert.IsType<InvalidOperationException>(thrownException.InnerException)", span="219-219"];
m2_120 [cluster="System.InvalidOperationException.InvalidOperationException()", file="ClientSteps.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m2_85 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="ClientSteps.cs", label="_context.BackgroundJob.Job = new Job(type, method, new[] { convertedDate })", span="117-117"];
m2_84 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="ClientSteps.cs", label="var method = type.GetMethod(''MethodWithDateTimeArgument'')", span="115-115"];
m2_152 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="ClientSteps.cs", label="_context.BackgroundJob.Job = new Job(type, method, new object[] { ''sdfa'' })", span="188-188"];
m2_221 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Dispose()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Dispose()", span="259-259"];
m2_222 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Dispose()", file="ClientSteps.cs", label="_disposed = true", span="261-261"];
m2_223 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Dispose()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Dispose()", span="259-259"];
m2_4 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="ClientSteps.cs", label="_stateMachine = new Mock<IStateMachine>()", span="26-26"];
m2_42 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.InstanceMethod()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.InstanceMethod()", span="247-247"];
m2_177 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_WithUnwrappedInnerException()", file="ClientSteps.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => ExceptionMethod())", span="213-213"];
m2_182 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="ClientSteps.cs", label="return new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, _process.Object);", span="211-211"];
m2_139 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="ClientSteps.cs", label="Assert.Equal(''jobId'', exception.ParamName)", span="153-153"];
m2_199 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CancelableJob(Hangfire.IJobCancellationToken)", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CancelableJob(Hangfire.IJobCancellationToken)", span="289-289"];
m2_236 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CancelableJob(Hangfire.IJobCancellationToken)", file="ClientSteps.cs", label="token.ThrowIfCancellationRequested()", span="291-291"];
m2_237 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CancelableJob(Hangfire.IJobCancellationToken)", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CancelableJob(Hangfire.IJobCancellationToken)", span="289-289"];
m2_217 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.InstanceMethod()", file="ClientSteps.cs", label="_methodInvoked = true", span="249-249"];
m2_218 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.InstanceMethod()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.InstanceMethod()", span="247-247"];
m2_0 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", span="19-19"];
m2_7 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", color=red, community=0, file="ClientSteps.cs", label="0: var exception = Assert.Throws<ArgumentNullException>(\r\n                // ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new CoreBackgroundJobPerformer(null))", span="28-30"];
m2_6 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", span="26-26"];
m2_8 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", file="ClientSteps.cs", label="Assert.Equal(''activator'', exception.ParamName)", span="32-32"];
m2_1 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", file="ClientSteps.cs", label="_activator = new Mock<JobActivator>() { CallBase = true }", span="21-21"];
m2_2 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", file="ClientSteps.cs", label="_context = new PerformContextMock()", span="22-22"];
m2_3 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.CoreBackgroundJobPerformerFacts()", span="19-19"];
m2_9 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Ctor_ThrowsAnException_WhenActivatorIsNull()", span="26-26"];
m2_10 [cluster="Unk.>", file="ClientSteps.cs", label="Entry Unk.>", span=""];
m2_23 [cluster="Unk.GetConnection", file="ClientSteps.cs", label="Entry Unk.GetConnection", span=""];
m2_56 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="ClientSteps.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => MethodWithArguments(''hello'', 5))", span="76-76"];
m2_58 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", color=green, community=0, file="ClientSteps.cs", label="0: performer.Perform(_context.Object)", span="80-80"];
m2_57 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="ClientSteps.cs", label="var performer = CreatePerformer()", span="77-77"];
m2_59 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="ClientSteps.cs", label="Assert.True(_methodInvoked)", span="83-83"];
m2_219 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Method()", file="ClientSteps.cs", label="_methodInvoked = true", span="256-256"];
m2_220 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Method()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Disposable.Method()", span="254-254"];
m2_37 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_CanInvokeInstanceMethods()", span="48-48"];
m2_11 [cluster="Mock<IStorageConnection>.cstr", file="ClientSteps.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m2_77 [cluster="System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", file="ClientSteps.cs", label="Entry System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", span="0-0"];
m2_80 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesCorrectDateTime_IfItWasSerialized_UsingOldFormat()", span="108-108"];
m2_122 [cluster="Unk.Throws", file="ClientSteps.cs", label="Entry Unk.Throws", span=""];
m2_126 [cluster="Unk.ActivateJob", file="ClientSteps.cs", label="Entry Unk.ActivateJob", span=""];
m2_149 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ThrowsPerformanceException_OnArgumentsDeserializationFailure()", span="184-184"];
m2_104 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="ClientSteps.cs", label="_context.BackgroundJob.Job = Job.FromExpression(() => NullArgumentMethod(null))", span="147-147"];
m2_105 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="ClientSteps.cs", label="var performer = CreatePerformer()", span="149-149"];
m2_106 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="ClientSteps.cs", label="performer.Perform(_context.Object)", span="151-151"];
m2_107 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="ClientSteps.cs", label="Assert.True(_methodInvoked)", span="154-154"];
m2_108 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_WorksCorrectly_WithNullValues()", span="143-143"];
m2_244 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", file="ClientSteps.cs", label="_methodInvoked = true", span="308-308"];
m2_245 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", file="ClientSteps.cs", label="Assert.Equal(''hello'', stringArg)", span="310-310"];
m2_246 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", file="ClientSteps.cs", label="Assert.Equal(5, intArg)", span="311-311"];
m2_247 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.MethodWithArguments(string, int)", span="306-306"];
m2_250 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ClientSteps.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m2_162 [cluster="Unk.TryToChangeState", file="ClientSteps.cs", label="Entry Unk.TryToChangeState", span=""];
m2_235 [cluster="Unk.Null", file="ClientSteps.cs", label="Entry Unk.Null", span=""];
m2_253 [cluster="CoreBackgroundJobPerformer.cstr", file="ClientSteps.cs", label="Entry CoreBackgroundJobPerformer.cstr", span=""];
m2_136 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="ClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", span="146-146"];
m2_137 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="ClientSteps.cs", label="var client = CreateClient()", span="148-148"];
m2_138 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.ChangeState_ThrowsAnException_WhenJobIdIsNull()", file="ClientSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.ChangeState(null, _state.Object, null))", span="150-151"];
m2_81 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="ClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="209-209"];
m2_82 [cluster="Unk.Verify", file="ClientSteps.cs", label="Entry Unk.Verify", span=""];
m2_224 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Method()", file="ClientSteps.cs", label="_methodInvoked = true", span="269-269"];
m2_225 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Method()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Method()", span="267-267"];
m2_32 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m2_33 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ClientSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(null, _stateMachineFactory.Object, _process.Object))", span="39-40"];
m2_34 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ClientSteps.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="42-42"];
m2_35 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="ClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m2_36 [cluster="Unk.>", file="ClientSteps.cs", label="Entry Unk.>", span=""];
m2_226 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Dispose()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Dispose()", span="272-272"];
m2_227 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Dispose()", file="ClientSteps.cs", label="throw new InvalidOperationException();", span="274-274"];
m2_228 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Dispose()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.BrokenDispose.Dispose()", span="272-272"];
m2_60 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_PassesArguments_ToACallingMethod()", span="72-72"];
m2_207 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="ClientSteps.cs", label="Entry Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", span="237-237"];
m2_208 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="ClientSteps.cs", label="_context.BackgroundJob.Job = Job.FromExpression<JobFacts.Instance>(x => x.FunctionReturningValue())", span="239-239"];
m2_209 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="ClientSteps.cs", label="var performer = CreatePerformer()", span="240-240"];
m2_210 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="ClientSteps.cs", label="var result = performer.Perform(_context.Object)", span="242-242"];
m2_211 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="ClientSteps.cs", label="Assert.Equal(''Return value'', result)", span="244-244"];
m2_212 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.Run_ReturnsValue_WhenCallingFunctionReturningValue()", span="237-237"];
m2_186 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.ExceptionMethod()", file="ClientSteps.cs", label=client, span=""];
m2_248 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.ExceptionMethod()", file="ClientSteps.cs", label="throw new InvalidOperationException(''exception'');", span="316-316"];
m2_249 [cluster="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.ExceptionMethod()", file="ClientSteps.cs", label="Exit Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts.ExceptionMethod()", span="314-314"];
m2_203 [cluster="Unk.ThrowIfCancellationRequested", file="ClientSteps.cs", label="Entry Unk.ThrowIfCancellationRequested", span=""];
m2_254 [file="ClientSteps.cs", label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", span=""];
m2_255 [file="ClientSteps.cs", label=performer, span=""];
m2_256 [file="ClientSteps.cs", label=performer, span=""];
m2_257 [file="ClientSteps.cs", label=performer, span=""];
m2_258 [file="ClientSteps.cs", label=performer, span=""];
m2_259 [file="ClientSteps.cs", label=performer, span=""];
m2_260 [file="ClientSteps.cs", label=performer, span=""];
m3_39 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Thread.Sleep(5)", span="38-38"];
m3_55 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="DequeuedJobsWatcher.feature.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m3_47 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="x.Execute(_cts.Token)", span="47-47"];
m3_54 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="0: Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", span="51-51"];
m3_48 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Exit lambda expression", span="47-47"];
m3_51 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="DequeuedJobsWatcher.feature.cs", label="_cts.Cancel()", span="55-55"];
m3_53 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="DequeuedJobsWatcher.feature.cs", label="_inner.Verify(x => x.Execute(It.IsAny<CancellationToken>()), Times.Never)", span="61-61"];
m3_49 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="DequeuedJobsWatcher.feature.cs", label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", span="51-51"];
m3_56 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Entry lambda expression", span="58-58"];
m3_58 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Exit lambda expression", span="58-58"];
m3_59 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Entry lambda expression", span="61-61"];
m3_60 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="x.Execute(It.IsAny<CancellationToken>())", span="61-61"];
m3_61 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Exit lambda expression", span="61-61"];
m3_52 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="DequeuedJobsWatcher.feature.cs", label="Assert.Throws<OperationCanceledException>(() => component.Execute(_cts.Token))", span="58-58"];
m3_57 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="component.Execute(_cts.Token)", span="58-58"];
m3_62 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallExecuteMethod_WhenCancellationToken_IsCanceled()", file="DequeuedJobsWatcher.feature.cs", label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallExecuteMethod_WhenCancellationToken_IsCanceled()", span="65-65"];
m3_50 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallTheExecuteMethod_WhenCancellationToken_IsAlreadyCanceled()", file="DequeuedJobsWatcher.feature.cs", label="var component = CreateComponent()", span="54-54"];
m3_63 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.Execute_DoesNotCallExecuteMethod_WhenCancellationToken_IsCanceled()", file="DequeuedJobsWatcher.feature.cs", label="_cts.Cancel()", span="67-67"];
m3_19 [cluster="HangFire.States.ScheduledState.Descriptor.Descriptor()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.States.ScheduledState.Descriptor.Descriptor()", span="39-39"];
m3_73 [cluster="Unk.Apply", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.Apply", span=""];
m3_74 [cluster="Unk.OnStateApplied", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.OnStateApplied", span=""];
m3_107 [cluster="Unk.EnqueueItemOnList", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m3_20 [cluster="HangFire.States.SucceededState.Descriptor.Descriptor()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.States.SucceededState.Descriptor.Descriptor()", span="49-49"];
m3_99 [cluster="Unk.SetRangeInHash", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.SetRangeInHash", span=""];
m3_75 [cluster="Unk.Commit", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.Commit", span=""];
m3_43 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="component.Execute(_cts.Token)", span="44-44"];
m3_30 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="DequeuedJobsWatcher.feature.cs", label="redis.AcquireLock(\r\n                String.Format(''hangfire:job:{0}:state-lock'', state.JobId), TimeSpan.FromMinutes(1))", span="56-57"];
m3_14 [cluster="HangFire.States.JobState.JobState()", file="DequeuedJobsWatcher.feature.cs", label="RegisterDescriptor(SucceededState.Name, new SucceededState.Descriptor())", span="38-38"];
m3_15 [cluster="HangFire.States.JobState.JobState()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.States.JobState.JobState()", span="33-33"];
m3_16 [cluster="HangFire.States.FailedState.Descriptor.Descriptor()", color=red, community=0, file="DequeuedJobsWatcher.feature.cs", label="1: Entry HangFire.States.FailedState.Descriptor.Descriptor()", span="41-41"];
m3_17 [cluster="HangFire.States.JobState.RegisterDescriptor(string, HangFire.States.JobStateDescriptor)", color=red, community=0, file="DequeuedJobsWatcher.feature.cs", label="0: Entry HangFire.States.JobState.RegisterDescriptor(string, HangFire.States.JobStateDescriptor)", span="41-41"];
m3_18 [cluster="HangFire.States.ProcessingState.Descriptor.Descriptor()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.States.ProcessingState.Descriptor.Descriptor()", span="37-37"];
m3_72 [cluster="Unk.AppendHistory", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.AppendHistory", span=""];
m3_42 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Entry lambda expression", span="44-44"];
m3_106 [cluster="HangFire.JobHelper.ToJson(object)", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.JobHelper.ToJson(object)", span="32-32"];
m3_95 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
m3_41 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="DequeuedJobsWatcher.feature.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m3_79 [cluster="Unk.RemoveEntry", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.RemoveEntry", span=""];
m3_71 [cluster="Unk.ToString", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.ToString", span=""];
m3_9 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="DequeuedJobsWatcher.feature.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_6 [cluster="HangFire.States.JobState.GetProperties()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.States.JobState.GetProperties()", span="24-24"];
m3_7 [cluster="HangFire.States.JobState.GetProperties()", file="DequeuedJobsWatcher.feature.cs", label="return new Dictionary<string, string>();", span="26-26"];
m3_8 [cluster="HangFire.States.JobState.GetProperties()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.States.JobState.GetProperties()", span="24-24"];
m3_21 [cluster="HangFire.States.JobState.RegisterDescriptor(string, HangFire.States.JobStateDescriptor)", file="DequeuedJobsWatcher.feature.cs", label="Descriptors.Add(stateName, descriptor)", span="44-44"];
m3_22 [cluster="HangFire.States.JobState.RegisterDescriptor(string, HangFire.States.JobStateDescriptor)", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.States.JobState.RegisterDescriptor(string, HangFire.States.JobStateDescriptor)", span="41-41"];
m3_23 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="DequeuedJobsWatcher.feature.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m3_24 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", span="47-47"];
m3_25 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="DequeuedJobsWatcher.feature.cs", label="redis == null", span="50-50"];
m3_26 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="DequeuedJobsWatcher.feature.cs", label="throw new ArgumentNullException(''redis'');", span="50-50"];
m3_27 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="DequeuedJobsWatcher.feature.cs", label="state == null", span="51-51"];
m3_45 [cluster="HangFire.IStateChangedFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.IStateChangedFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", span="8-8"];
m3_0 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", file="DequeuedJobsWatcher.feature.cs", label="Entry Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", span="13-13"];
m3_1 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", file="DequeuedJobsWatcher.feature.cs", label="_inner = new Mock<IServerComponent>()", span="15-15"];
m3_2 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", file="DequeuedJobsWatcher.feature.cs", label="_cts = new CancellationTokenSource()", span="16-16"];
m3_3 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", file="DequeuedJobsWatcher.feature.cs", label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.InfiniteLoopComponentFacts()", span="13-13"];
m3_28 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="DequeuedJobsWatcher.feature.cs", label="throw new ArgumentNullException(''state'');", span="51-51"];
m3_69 [cluster="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", file="DequeuedJobsWatcher.feature.cs", label="Exit Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts.ToString_ReturnsTheName_OfInnerComponent()", span="71-71"];
m3_5 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="DequeuedJobsWatcher.feature.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m3_4 [cluster="Mock<IServerComponent>.cstr", file="DequeuedJobsWatcher.feature.cs", label="Entry Mock<IServerComponent>.cstr", span=""];
m3_40 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Exit lambda expression", span="38-38"];
m3_103 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Entry lambda expression", span="156-158"];
m3_10 [cluster="HangFire.States.JobState.JobState()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.States.JobState.JobState()", span="33-33"];
m3_11 [cluster="HangFire.States.JobState.JobState()", file="DequeuedJobsWatcher.feature.cs", label="RegisterDescriptor(FailedState.Name, new FailedState.Descriptor())", span="35-35"];
m3_12 [cluster="HangFire.States.JobState.JobState()", file="DequeuedJobsWatcher.feature.cs", label="RegisterDescriptor(ProcessingState.Name, new ProcessingState.Descriptor())", span="36-36"];
m3_34 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="DequeuedJobsWatcher.feature.cs", label="oldState != state", span="64-64"];
m3_38 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", span="47-47"];
m3_46 [cluster="HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", span="121-121"];
m3_35 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="DequeuedJobsWatcher.feature.cs", label="AppendHistory(redis, oldState, false)", span="66-66"];
m3_36 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="0: var appliedFilters = GlobalJobFilters.Filters\r\n                    .OfType<IStateAppliedFilter>().ToList()", span="70-71"];
m3_44 [cluster="Unk.AcquireLock", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.AcquireLock", span=""];
m3_96 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Entry lambda expression", span="141-146"];
m3_97 [cluster="lambda expression", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="0: x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}'', state.JobId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''State'', state.StateName },\r\n                        })", span="141-146"];
m3_98 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Exit lambda expression", span="141-146"];
m3_77 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label=component, span=""];
m3_76 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", span=""];
m3_101 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}:state'', state.JobId),\r\n                    properties)", span="148-150"];
m3_104 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="x.EnqueueItemOnList(\r\n                String.Format(''hangfire:job:{0}:history'', state.JobId),\r\n                JobHelper.ToJson(properties))", span="156-158"];
m3_100 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Entry lambda expression", span="148-150"];
m3_78 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label=component, span=""];
m3_102 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Exit lambda expression", span="148-150"];
m3_105 [cluster="lambda expression", file="DequeuedJobsWatcher.feature.cs", label="Exit lambda expression", span="156-158"];
m3_65 [cluster="Unk.Contains", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.Contains", span=""];
m3_66 [cluster="Unk.CreateTransaction", color=red, community=0, file="DequeuedJobsWatcher.feature.cs", label="0: Entry Unk.CreateTransaction", span=""];
m3_67 [cluster="Unk.IsNullOrEmpty", color=red, community=0, file="DequeuedJobsWatcher.feature.cs", label="0: Entry Unk.IsNullOrEmpty", span=""];
m3_68 [cluster="Unk.ContainsKey", color=red, community=0, file="DequeuedJobsWatcher.feature.cs", label="0: Entry Unk.ContainsKey", span=""];
m3_13 [cluster="Hangfire.Server.InfiniteLoopComponent.InfiniteLoopComponent(Hangfire.Server.IServerComponent)", file="DequeuedJobsWatcher.feature.cs", label="Entry Hangfire.Server.InfiniteLoopComponent.InfiniteLoopComponent(Hangfire.Server.IServerComponent)", span="24-24"];
m3_37 [cluster="Unk.Execute", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="0: Entry Unk.Execute", span=""];
m3_33 [cluster="Unk.Verify", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.Verify", span=""];
m3_31 [cluster="System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)", file="DequeuedJobsWatcher.feature.cs", label="Entry System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)", span="0-0"];
m3_32 [cluster="Unk.AtLeast", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.AtLeast", span=""];
m3_29 [cluster="Unk.Callback", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.Callback", span=""];
m3_64 [cluster="Unk.GetValueFromHash", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.GetValueFromHash", span=""];
m3_82 [cluster="HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="transaction.Commit()", span="127-127"];
m3_80 [cluster="HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="var transaction = redis.CreateTransaction()", span="124-124"];
m3_81 [cluster="HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="AppendHistory(transaction, state, appendToJob)", span="126-126"];
m3_83 [cluster="HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", span="121-121"];
m3_70 [cluster="Unk.QueueCommand", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.QueueCommand", span=""];
m3_84 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", span="131-131"];
m3_89 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="1: transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}'', state.JobId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''State'', state.StateName },\r\n                        }))", span="141-146"];
m3_88 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label=appendToJob, span="139-139"];
m3_90 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}:state'', state.JobId),\r\n                    properties))", span="148-150"];
m3_85 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="var properties = state.GetProperties()", span="134-134"];
m3_87 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="properties.Add(''State'', state.StateName)", span="137-137"];
m3_91 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="properties.Add(''Reason'', state.Reason)", span="153-153"];
m3_93 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(''hangfire:job:{0}:history'', state.JobId),\r\n                JobHelper.ToJson(properties)))", span="156-158"];
m3_86 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="var now = DateTime.UtcNow", span="135-135"];
m3_92 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="properties.Add(''CreatedAt'', JobHelper.ToStringTimestamp(now))", span="154-154"];
m3_94 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", span="131-131"];
m3_110 [file="DequeuedJobsWatcher.feature.cs", label="HangFire.States.JobState", span=""];
m3_109 [file="DequeuedJobsWatcher.feature.cs", label="HangFire.States.JobState", span=""];
m3_111 [file="DequeuedJobsWatcher.feature.cs", label=properties, span=""];
m4_135 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="199-199"];
m4_138 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsTrue(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="204-204"];
m4_139 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsTrue(timestamp < DateTime.UtcNow.AddSeconds(1))", span="205-205"];
m4_137 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="DequeuedJobsWatcherSteps.cs", label="var timestamp = JobHelper.FromTimestamp((long)score)", span="202-202"];
m4_136 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="DequeuedJobsWatcherSteps.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="201-201"];
m4_140 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="199-199"];
m4_46 [cluster="Unk.ToDictionary", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.ToDictionary", span=""];
m4_119 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="174-174"];
m4_120 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="DequeuedJobsWatcherSteps.cs", label="Assert.AreEqual(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="176-176"];
m4_121 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="177-177"];
m4_122 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="174-174"];
m4_41 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="DequeuedJobsWatcherSteps.cs", label="Given(String.Format(''a '{0}' state'', state))", span="64-64"];
m4_144 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="209-209"];
m4_148 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsTrue(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="215-215"];
m4_149 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsTrue(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="216-216"];
m4_147 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="DequeuedJobsWatcherSteps.cs", label="var timestamp = JobHelper.FromTimestamp((long) score)", span="213-213"];
m4_146 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="DequeuedJobsWatcherSteps.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="212-212"];
m4_145 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="211-211"];
m4_150 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="209-209"];
m4_80 [cluster="Unk.AreEqual", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.AreEqual", span=""];
m4_134 [cluster="Unk.IsFalse", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.IsFalse", span=""];
m4_118 [cluster="HangFire.Tests.DictionaryAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.DictionaryAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="9-9"];
m4_31 [cluster="Unk.Returns", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.Returns", span=""];
m4_27 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="DequeuedJobsWatcherSteps.cs", label="_state = _stateMock.Object", span="58-58"];
m4_72 [cluster="Unk.Unapply", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.Unapply", span=""];
m4_85 [cluster="Unk.ForEach", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.ForEach", span=""];
m4_6 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="DequeuedJobsWatcherSteps.cs", label="_state = new FailedState(JobSteps.DefaultJobId, ''SomeReason'', _failedException)", span="30-30"];
m4_7 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="27-27"];
m4_9 [cluster="HangFire.States.FailedState.FailedState(string, string, System.Exception)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.States.FailedState.FailedState(string, string, System.Exception)", span="10-10"];
m4_11 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="DequeuedJobsWatcherSteps.cs", label="_state = new ProcessingState(JobSteps.DefaultJobId, ''SomeReason'', ''TestServer'')", span="36-36"];
m4_12 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", color=red, community=0, file="DequeuedJobsWatcherSteps.cs", label="0: Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="34-34"];
m4_13 [cluster="HangFire.States.ProcessingState.ProcessingState(string, string, string)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string, string, string)", span="10-10"];
m4_8 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="DequeuedJobsWatcherSteps.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m4_10 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="34-34"];
m4_14 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", color=red, community=0, file="DequeuedJobsWatcherSteps.cs", label="0: Entry HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="40-40"];
m4_15 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="DequeuedJobsWatcherSteps.cs", label="_state = new ScheduledState(JobSteps.DefaultJobId, ''SomeReason'', DateTime.UtcNow.AddDays(1))", span="42-42"];
m4_176 [cluster="Unk.IsNotNull", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.IsNotNull", span=""];
m4_45 [cluster="HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", span="96-96"];
m4_151 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="220-220"];
m4_152 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsFalse(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="222-222"];
m4_153 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="220-220"];
m4_117 [cluster="HangFire.States.JobState.GetProperties()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.States.JobState.GetProperties()", span="24-24"];
m4_16 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="40-40"];
m4_103 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="143-143"];
m4_104 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="DequeuedJobsWatcherSteps.cs", label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="145-150"];
m4_105 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="DequeuedJobsWatcherSteps.cs", label="keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.IsTrue(\r\n                    ttl.Seconds == -1,\r\n                    ''TTL for the '{0}' key is '{1}''', x, ttl);\r\n            })", span="152-158"];
m4_106 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="143-143"];
m4_22 [cluster="HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(PooledRedisClientManager)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Redis.RedisMonitoringApi.RedisMonitoringApi(PooledRedisClientManager)", span="32-32"];
m4_102 [cluster="Unk.PopItemFromList", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.PopItemFromList", span=""];
m4_29 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="DequeuedJobsWatcherSteps.cs", label="yield return new FetchedJobsWatcher(this);", span="85-85"];
m4_2 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="21-21"];
m4_3 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m4_77 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="102-102"];
m4_78 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="DequeuedJobsWatcherSteps.cs", label="Assert.AreEqual(name, _state.StateName)", span="104-104"];
m4_79 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="102-102"];
m4_18 [cluster="RedisClientManagerConfig.cstr", file="DequeuedJobsWatcherSteps.cs", label="Entry RedisClientManagerConfig.cstr", span=""];
m4_39 [cluster="HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", span="23-23"];
m4_56 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Redis.RedisStorage.GetRedisKey(string)", span="107-107"];
m4_58 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="DequeuedJobsWatcherSteps.cs", label="_state.Apply(transaction)", span="74-74"];
m4_57 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="DequeuedJobsWatcherSteps.cs", label="HangFire.Redis.RedisStorage", span=""];
m4_59 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="DequeuedJobsWatcherSteps.cs", label="transaction.Commit()", span="75-75"];
m4_60 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIApplyIt()", span="70-70"];
m4_48 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="x.GetProperties()", span="65-65"];
m4_49 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Exit lambda expression", span="65-65"];
m4_50 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Entry lambda expression", span="66-66"];
m4_107 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Entry lambda expression", span="152-158"];
m4_33 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="DequeuedJobsWatcherSteps.cs", label="yield return new FailedStateHandler();", span="90-90"];
m4_36 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="DequeuedJobsWatcherSteps.cs", label="yield return new DeletedStateHandler();", span="93-93"];
m4_47 [cluster="Unk.InfoFormat", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.InfoFormat", span=""];
m4_53 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="DequeuedJobsWatcherSteps.cs", label="key == null", span="109-109"];
m4_182 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Entry lambda expression", span="263-263"];
m4_35 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="DequeuedJobsWatcherSteps.cs", label="yield return new SucceededStateHandler();", span="92-92"];
m4_34 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="DequeuedJobsWatcherSteps.cs", label="yield return new ProcessingStateHandler();", span="91-91"];
m4_38 [cluster="HangFire.Redis.FailedStateHandler.FailedStateHandler()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Redis.FailedStateHandler.FailedStateHandler()", span="23-23"];
m4_37 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Redis.RedisStorage.GetStateHandlers()", span="88-88"];
m4_52 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Redis.RedisStorage.GetRedisKey(string)", span="107-107"];
m4_51 [cluster="string.Format(string, object, object)", file="DequeuedJobsWatcherSteps.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m4_55 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="DequeuedJobsWatcherSteps.cs", label="return Prefix + key;", span="111-111"];
m4_54 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="DequeuedJobsWatcherSteps.cs", label="throw new ArgumentNullException(''key'');", span="109-109"];
m4_183 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="x.Apply(It.Is<IRedisTransaction>(y => y != null))", span="263-263"];
m4_184 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Exit lambda expression", span="263-263"];
m4_185 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Entry lambda expression", span="263-263"];
m4_88 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsTrue(\r\n                        ttl.TotalSeconds > 0,\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl)", span="120-122"];
m4_109 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsTrue(\r\n                    ttl.Seconds == -1,\r\n                    ''TTL for the '{0}' key is '{1}''', x, ttl)", span="155-157"];
m4_187 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Exit lambda expression", span="263-263"];
m4_186 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="y != null", span="263-263"];
m4_86 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Entry lambda expression", span="117-123"];
m4_87 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="var ttl = Redis.Client.GetTimeToLive(x)", span="119-119"];
m4_89 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Exit lambda expression", span="117-123"];
m4_108 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="var ttl = Redis.Client.GetTimeToLive(x)", span="154-154"];
m4_110 [cluster="lambda expression", file="DequeuedJobsWatcherSteps.cs", label="Exit lambda expression", span="152-158"];
m4_157 [cluster="Unk.SetContainsItem", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.SetContainsItem", span=""];
m4_63 [cluster="Unk.Commit", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.Commit", span=""];
m4_17 [cluster="PooledRedisClientManager.cstr", file="DequeuedJobsWatcherSteps.cs", label="Entry PooledRedisClientManager.cstr", span=""];
m4_131 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="193-193"];
m4_132 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsFalse(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="195-195"];
m4_133 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="193-193"];
m4_61 [cluster="Unk.CreateTransaction", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.CreateTransaction", span=""];
m4_90 [cluster="Unk.GetTimeToLive", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.GetTimeToLive", span=""];
m4_142 [cluster="HangFire.JobHelper.FromTimestamp(long)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.JobHelper.FromTimestamp(long)", span="50-50"];
m4_62 [cluster="Unk.Apply", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.Apply", span=""];
m4_40 [cluster="HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", span="21-21"];
m4_42 [cluster="HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", span="96-96"];
m4_43 [cluster="HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", file="DequeuedJobsWatcherSteps.cs", label="logger.Info(''Using the following options for Redis job storage:'')", span="98-98"];
m4_175 [cluster="Unk.RemoveStartFromList", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.RemoveStartFromList", span=""];
m4_158 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="232-232"];
m4_160 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="DequeuedJobsWatcherSteps.cs", label="Assert.AreEqual(state, job[''State''])", span="235-235"];
m4_159 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="DequeuedJobsWatcherSteps.cs", label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="234-234"];
m4_161 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="232-232"];
m4_44 [cluster="string.Format(string, object)", file="DequeuedJobsWatcherSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m4_32 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="DequeuedJobsWatcherSteps.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m4_92 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="127-127"];
m4_93 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="DequeuedJobsWatcherSteps.cs", label="Assert.AreEqual(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="129-131"];
m4_94 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="127-127"];
m4_71 [cluster="Unk.GetDescriptor", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.GetDescriptor", span=""];
m4_26 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="DequeuedJobsWatcherSteps.cs", label="_stateMock.Setup(x => x.GetProperties()).Returns(new Dictionary<string, string>())", span="56-56"];
m4_23 [cluster="HangFire.Redis.RedisStorage.GetConnection()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Redis.RedisStorage.GetConnection()", span="78-78"];
m4_24 [cluster="HangFire.Redis.RedisStorage.GetConnection()", color=green, community=0, file="DequeuedJobsWatcherSteps.cs", label="1: return new RedisConnection(_pooledManager.GetClient());", span="80-80"];
m4_25 [cluster="HangFire.Redis.RedisStorage.GetConnection()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Redis.RedisStorage.GetConnection()", span="78-78"];
m4_28 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Redis.RedisStorage.GetComponents()", span="83-83"];
m4_30 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Redis.RedisStorage.GetComponents()", span="83-83"];
m4_0 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="21-21"];
m4_1 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="DequeuedJobsWatcherSteps.cs", label="_state = new SucceededState(JobSteps.DefaultJobId, ''Some reason'')", span="23-23"];
m4_76 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", span="47-47"];
m4_19 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", span="46-46"];
m4_20 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", file="DequeuedJobsWatcherSteps.cs", label="_state = new EnqueuedState(JobSteps.DefaultJobId, ''SomeReason'', ''test'')", span="48-48"];
m4_21 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", span="46-46"];
m4_154 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="226-226"];
m4_155 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsTrue(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="228-228"];
m4_156 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="226-226"];
m4_128 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="187-187"];
m4_129 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="189-189"];
m4_130 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="187-187"];
m4_123 [cluster="Unk.GetSortedSetCount", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.GetSortedSetCount", span=""];
m4_181 [cluster="Unk.Verify", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.Verify", span=""];
m4_97 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="135-135"];
m4_98 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="DequeuedJobsWatcherSteps.cs", label="Assert.AreEqual(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="137-137"];
m4_99 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="DequeuedJobsWatcherSteps.cs", label="Assert.AreEqual(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="138-139"];
m4_100 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="135-135"];
m4_125 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="181-181"];
m4_126 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="DequeuedJobsWatcherSteps.cs", label="Assert.AreEqual(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="183-183"];
m4_127 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="181-181"];
m4_166 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="239-239"];
m4_164 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="241-242"];
m4_163 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="239-239"];
m4_165 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="DictionaryAssert.ContainsFollowingItems(table, stateEntry)", span="243-243"];
m4_124 [cluster="Unk.SortedSetContainsItem", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.SortedSetContainsItem", span=""];
m4_143 [cluster="System.DateTime.AddSeconds(double)", file="DequeuedJobsWatcherSteps.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m4_95 [cluster="string.Format(string, params object[])", file="DequeuedJobsWatcherSteps.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m4_81 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="108-108"];
m4_82 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="DequeuedJobsWatcherSteps.cs", label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="110-115"];
m4_83 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="DequeuedJobsWatcherSteps.cs", label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.IsTrue(\r\n                        ttl.TotalSeconds > 0,\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl);\r\n                })", span="117-123"];
m4_84 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="108-108"];
m4_91 [cluster="Unk.IsTrue", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.IsTrue", span=""];
m4_162 [cluster="Unk.GetAllEntriesFromHash", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m4_178 [cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", span="260-260"];
m4_179 [cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", file="DequeuedJobsWatcherSteps.cs", label="_stateMock.Verify(\r\n                x => x.Apply(It.Is<IRedisTransaction>(y => y != null)), \r\n                Times.Once)", span="262-264"];
m4_180 [cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", span="260-260"];
m4_4 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="43-43"];
m4_5 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="43-43"];
m4_174 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="247-247"];
m4_173 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="DictionaryAssert.ContainsFollowingItems(table, history)", span="256-256"];
m4_169 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="249-250"];
m4_168 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="247-247"];
m4_171 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="253-253"];
m4_172 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsNotNull(history, entry)", span="254-254"];
m4_170 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="Assert.IsNotNull(entry)", span="251-251"];
m4_177 [cluster="Unk.>", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.>", span=""];
m4_141 [cluster="Unk.GetItemScoreInSortedSet", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.GetItemScoreInSortedSet", span=""];
m4_101 [cluster="Unk.GetListCount", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.GetListCount", span=""];
m4_111 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="162-162"];
m4_112 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="DequeuedJobsWatcherSteps.cs", label="Assert.AreEqual(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="164-164"];
m4_113 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="162-162"];
m4_114 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="168-168"];
m4_115 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="DictionaryAssert.ContainsFollowingItems(table, _state.GetProperties())", span="170-170"];
m4_116 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="168-168"];
m4_73 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="96-96"];
m4_74 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="DequeuedJobsWatcherSteps.cs", label="JobState.Apply(Redis.Client, _state)", span="98-98"];
m4_75 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="96-96"];
m4_96 [cluster="Unk.GetValue", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.GetValue", span=""];
m4_64 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="DequeuedJobsWatcherSteps.cs", label="Entry HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", span="80-80"];
m4_67 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", color=green, community=0, file="DequeuedJobsWatcherSteps.cs", label="1: descriptor != null", span="86-86"];
m4_66 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="DequeuedJobsWatcherSteps.cs", label="var descriptor = JobState.GetDescriptor(_state.StateName)", span="84-84"];
m4_68 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="DequeuedJobsWatcherSteps.cs", label="descriptor.Unapply(transaction, JobSteps.DefaultJobId)", span="88-88"];
m4_69 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="DequeuedJobsWatcherSteps.cs", label="transaction.Commit()", span="91-91"];
m4_65 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="DequeuedJobsWatcherSteps.cs", label="var transaction = Redis.Client.CreateTransaction()", span="82-82"];
m4_70 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="DequeuedJobsWatcherSteps.cs", label="Exit HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", span="80-80"];
m4_167 [cluster="Unk.ContainsFollowingItems", file="DequeuedJobsWatcherSteps.cs", label="Entry Unk.ContainsFollowingItems", span=""];
m4_188 [file="DequeuedJobsWatcherSteps.cs", label="HangFire.Tests.States.StateSteps", span=""];
m5_26 [cluster="string.Split(params char[])", file="DictionaryAssert.cs", label="Entry string.Split(params char[])", span="0-0"];
m5_20 [cluster="HangFire.Common.JobHelper.FromStringTimestamp(string)", file="DictionaryAssert.cs", label="Entry HangFire.Common.JobHelper.FromStringTimestamp(string)", span="51-51"];
m5_0 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="DictionaryAssert.cs", label="Entry HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", span="9-9"];
m5_1 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="3: expected", span="11-11"];
m5_12 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: Assert.False(String.IsNullOrEmpty(actual[name]))", span="34-34"];
m5_15 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: Assert.Equal(Type.GetType(splitted[1]).AssemblyQualifiedName, actual[name])", span="39-39"];
m5_16 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: Assert.Equal(value, actual[name])", span="43-43"];
m5_7 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=1, file="DictionaryAssert.cs", label="0: Assert.True(\r\n                        (timestamp > DateTime.UtcNow.AddSeconds(-1))\r\n                        && (timestamp < DateTime.UtcNow.AddSeconds(1)))", span="21-23"];
m5_10 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=1, file="DictionaryAssert.cs", label="0: Assert.True(\r\n                        timestamp >= DateTime.UtcNow.Date.AddDays(1)\r\n                        && timestamp < DateTime.UtcNow.Date.AddDays(2))", span="28-30"];
m5_2 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: var name = row.Key", span="13-13"];
m5_4 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: Assert.True(actual.ContainsKey(name))", span="16-16"];
m5_3 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: var value = row.Value", span="14-14"];
m5_5 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: value == ''<UtcNow timestamp>''", span="17-17"];
m5_6 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: var timestamp = JobHelper.FromStringTimestamp(actual[name])", span="19-19"];
m5_9 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: var timestamp = JobHelper.FromStringTimestamp(actual[name])", span="27-27"];
m5_8 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: value == ''<Tomorrow timestamp>''", span="25-25"];
m5_11 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: value == ''<Non-empty>''", span="32-32"];
m5_14 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: var splitted = value.Split('\'')", span="38-38"];
m5_13 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="DictionaryAssert.cs", label="0: value.StartsWith(''<Assembly qualified name of '')", span="36-36"];
m5_17 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="DictionaryAssert.cs", label="Exit HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", span="9-9"];
m5_19 [cluster="Unk.True", file="DictionaryAssert.cs", label="Entry Unk.True", span=""];
m5_23 [cluster="string.IsNullOrEmpty(string)", file="DictionaryAssert.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m5_24 [cluster="Unk.False", file="DictionaryAssert.cs", label="Entry Unk.False", span=""];
m5_25 [cluster="string.StartsWith(string)", file="DictionaryAssert.cs", label="Entry string.StartsWith(string)", span="0-0"];
m5_21 [cluster="System.DateTime.AddSeconds(double)", file="DictionaryAssert.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m5_28 [cluster="Unk.Equal", file="DictionaryAssert.cs", label="Entry Unk.Equal", span=""];
m5_18 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="DictionaryAssert.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m5_27 [cluster="System.Type.GetType(string)", file="DictionaryAssert.cs", label="Entry System.Type.GetType(string)", span="0-0"];
m5_22 [cluster="System.DateTime.AddDays(double)", file="DictionaryAssert.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m6_11 [cluster="string.EndsWith(string, System.StringComparison)", file="EnqueuedState.feature.cs", label="Entry string.EndsWith(string, System.StringComparison)", span="0-0"];
m6_15 [cluster="string.Format(string, object, object)", file="EnqueuedState.feature.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m6_16 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="EnqueuedState.feature.cs", label="Entry HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="41-41"];
m6_17 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="EnqueuedState.feature.cs", label="Given(String.Format(''the '{0}' job'', jobId))", span="43-43"];
m6_18 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="EnqueuedState.feature.cs", label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                jobId)", span="45-47"];
m6_19 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="EnqueuedState.feature.cs", label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="41-41"];
m6_2 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="EnqueuedState.feature.cs", label="fontName.EndsWith(''.eot'', StringComparison.OrdinalIgnoreCase)", span="27-27"];
m6_3 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", color=red, community=0, file="EnqueuedState.feature.cs", label="1: ContentType = ''application/vnd.ms-fontobject''", span="29-29"];
m6_4 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="EnqueuedState.feature.cs", label="fontName.EndsWith(''.svg'', StringComparison.OrdinalIgnoreCase)", span="31-31"];
m6_5 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="EnqueuedState.feature.cs", label="ContentType = ''image/svg+xml''", span="33-33"];
m6_43 [cluster="Unk.AreEqual", file="EnqueuedState.feature.cs", label="Entry Unk.AreEqual", span=""];
m6_42 [cluster="Unk.GetListCount", file="EnqueuedState.feature.cs", label="Entry Unk.GetListCount", span=""];
m6_0 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="EnqueuedState.feature.cs", label="Entry HangFire.Web.FontsHandler.FontsHandler(string)", span="22-22"];
m6_1 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="EnqueuedState.feature.cs", label="CacheResponse = true", span="25-25"];
m6_6 [cluster="Unk.Given", file="EnqueuedState.feature.cs", label="Entry Unk.Given", span=""];
m6_8 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="EnqueuedState.feature.cs", label="Given(''a job'')", span="27-27"];
m6_7 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="EnqueuedState.feature.cs", label="Entry HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="25-25"];
m6_9 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", color=green, community=0, file="EnqueuedState.feature.cs", label="0: Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                JobSteps.DefaultJobId)", span="29-31"];
m6_10 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="EnqueuedState.feature.cs", label="Exit HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="25-25"];
m6_33 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="EnqueuedState.feature.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="73-73"];
m6_34 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", color=green, community=0, file="EnqueuedState.feature.cs", label="0: var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="75-76"];
m6_35 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", color=green, community=0, file="EnqueuedState.feature.cs", label="0: CollectionAssert.DoesNotContain(jobIds, JobSteps.DefaultJobId)", span="78-78"];
m6_36 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="EnqueuedState.feature.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="73-73"];
m6_30 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="EnqueuedState.feature.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="67-67"];
m6_31 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="EnqueuedState.feature.cs", label="Then(String.Format(''the '{0}' queue does not contain the job'', DefaultQueue))", span="69-69"];
m6_32 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="EnqueuedState.feature.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="67-67"];
m6_24 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="EnqueuedState.feature.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="57-57"];
m6_25 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="EnqueuedState.feature.cs", label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="59-60"];
m6_26 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="EnqueuedState.feature.cs", label="CollectionAssert.Contains(jobIds, JobSteps.DefaultJobId)", span="62-62"];
m6_27 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="EnqueuedState.feature.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="57-57"];
m6_28 [cluster="Unk.GetAllItemsFromList", file="EnqueuedState.feature.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m6_29 [cluster="Unk.Contains", file="EnqueuedState.feature.cs", label="Entry Unk.Contains", span=""];
m6_23 [cluster="Unk.Then", file="EnqueuedState.feature.cs", label="Entry Unk.Then", span=""];
m6_37 [cluster="Unk.DoesNotContain", file="EnqueuedState.feature.cs", label="Entry Unk.DoesNotContain", span=""];
m6_12 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="EnqueuedState.feature.cs", label="HangFire.Web.FontsHandler", span=""];
m6_13 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="EnqueuedState.feature.cs", label="Given(String.Format(''the '{0}' job in the '{1}' queue'', jobId, DefaultQueue))", span="37-37"];
m6_14 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="EnqueuedState.feature.cs", label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", span="35-35"];
m6_44 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="EnqueuedState.feature.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="90-90"];
m6_45 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="EnqueuedState.feature.cs", label="var actualLength = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="92-93"];
m6_46 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="EnqueuedState.feature.cs", label="Assert.AreEqual(length, actualLength)", span="94-94"];
m6_47 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="EnqueuedState.feature.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="90-90"];
m6_20 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="EnqueuedState.feature.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="51-51"];
m6_21 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="EnqueuedState.feature.cs", label="Then(String.Format(''the '{0}' queue contains the job'', DefaultQueue))", span="53-53"];
m6_22 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="EnqueuedState.feature.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="51-51"];
m6_38 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="EnqueuedState.feature.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="82-82"];
m6_39 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", color=green, community=0, file="EnqueuedState.feature.cs", label="0: var length = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="84-85"];
m6_40 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", color=green, community=0, file="EnqueuedState.feature.cs", label="0: Assert.AreEqual(0, length)", span="86-86"];
m6_41 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="EnqueuedState.feature.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="82-82"];
m7_3 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="FailedState.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m7_4 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="FailedState.feature.cs", label="Exit HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m7_5 [cluster="Unk.GetTestRunner", file="FailedState.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m7_15 [cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="FailedState.feature.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Failed state''))", span="48-49"];
m7_22 [cluster="HangFire.States.FailedState.Descriptor.Unapply(IRedisTransaction, string)", file="FailedState.feature.cs", label="Entry HangFire.States.FailedState.Descriptor.Unapply(IRedisTransaction, string)", span="43-43"];
m7_23 [cluster="HangFire.States.FailedState.Descriptor.Unapply(IRedisTransaction, string)", color=red, community=0, file="FailedState.feature.cs", label="0: transaction == null", span="45-45"];
m7_24 [cluster="HangFire.States.FailedState.Descriptor.Unapply(IRedisTransaction, string)", color=red, community=0, file="FailedState.feature.cs", label="1: throw new ArgumentNullException(''transaction'');", span="45-45"];
m7_25 [cluster="HangFire.States.FailedState.Descriptor.Unapply(IRedisTransaction, string)", file="FailedState.feature.cs", label="transaction.QueueCommand(x => x.RemoveItemFromSortedSet(''hangfire:failed'', jobId))", span="47-47"];
m7_29 [cluster="lambda expression", file="FailedState.feature.cs", label="Exit lambda expression", span="47-47"];
m7_38 [cluster="HangFire.Tests.States.FailedStateFeature.System.IDisposable.Dispose()", file="FailedState.feature.cs", label="Entry HangFire.Tests.States.FailedStateFeature.System.IDisposable.Dispose()", span="85-85"];
m7_39 [cluster="HangFire.Tests.States.FailedStateFeature.System.IDisposable.Dispose()", color=green, community=0, file="FailedState.feature.cs", label="0: this.ScenarioTearDown()", span="87-87"];
m7_40 [cluster="HangFire.Tests.States.FailedStateFeature.System.IDisposable.Dispose()", file="FailedState.feature.cs", label="Exit HangFire.Tests.States.FailedStateFeature.System.IDisposable.Dispose()", span="85-85"];
m7_21 [cluster="Unk.AddItemToSortedSet", file="FailedState.feature.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m7_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="FailedState.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m7_35 [cluster="Unk.And", file="FailedState.feature.cs", label="Entry Unk.And", span=""];
m7_0 [cluster="HangFire.States.FailedState.FailedState(string, string, System.Exception)", file="FailedState.feature.cs", label="Entry HangFire.States.FailedState.FailedState(string, string, System.Exception)", span="10-10"];
m7_1 [cluster="HangFire.States.FailedState.FailedState(string, string, System.Exception)", color=green, community=0, file="FailedState.feature.cs", label="0: Exception = exception", span="13-13"];
m7_2 [cluster="HangFire.States.FailedState.FailedState(string, string, System.Exception)", color=green, community=0, file="FailedState.feature.cs", label="0: Exit HangFire.States.FailedState.FailedState(string, string, System.Exception)", span="10-10"];
m7_20 [cluster="HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", file="FailedState.feature.cs", label="Exit HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", span="56-56"];
m7_18 [cluster="lambda expression", color=red, community=0, file="FailedState.feature.cs", label="0: x.AddItemToSortedSet(\r\n                        ''hangfire:failed'',\r\n                        JobId,\r\n                        JobHelper.ToTimestamp(DateTime.UtcNow))", span="35-38"];
m7_19 [cluster="lambda expression", file="FailedState.feature.cs", label="Exit lambda expression", span="35-38"];
m7_26 [cluster="HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", file="FailedState.feature.cs", label="Entry HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", span="66-66"];
m7_27 [cluster="lambda expression", file="FailedState.feature.cs", label="Entry lambda expression", span="47-47"];
m7_28 [cluster="lambda expression", file="FailedState.feature.cs", label="x.RemoveItemFromSortedSet(''hangfire:failed'', jobId)", span="47-47"];
m7_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="FailedState.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m7_50 [cluster="Unk.When", file="FailedState.feature.cs", label="Entry Unk.When", span=""];
m7_41 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="FailedState.feature.cs", label="Entry HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", span="93-93"];
m7_42 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", color=green, community=0, file="FailedState.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying it should add the job to the failed set'', ((string[])(null)))", span="95-95"];
m7_43 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", color=green, community=0, file="FailedState.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="97-97"];
m7_44 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="FailedState.feature.cs", label="this.FeatureBackground()", span="99-99"];
m7_46 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", color=green, community=0, file="FailedState.feature.cs", label="0: testRunner.Then(''the job should be added to the failed set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="103-103"];
m7_45 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="FailedState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="101-101"];
m7_47 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", color=green, community=0, file="FailedState.feature.cs", label="0: this.ScenarioCleanup()", span="105-105"];
m7_48 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="FailedState.feature.cs", label="Exit HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", span="93-93"];
m7_52 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="FailedState.feature.cs", label="Entry HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", span="112-112"];
m7_57 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", color=green, community=0, file="FailedState.feature.cs", label="0: testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="122-122"];
m7_56 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="FailedState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="120-120"];
m7_58 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", color=green, community=0, file="FailedState.feature.cs", label="0: testRunner.Then(''the job should be removed from the failed set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="124-124"];
m7_59 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", color=green, community=0, file="FailedState.feature.cs", label="0: this.ScenarioCleanup()", span="126-126"];
m7_54 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="FailedState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="116-116"];
m7_55 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="FailedState.feature.cs", label="this.FeatureBackground()", span="118-118"];
m7_53 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="FailedState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should remove the job from the failed set'', ((string[])(null)))", span="114-114"];
m7_60 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="FailedState.feature.cs", label="Exit HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", span="112-112"];
m7_17 [cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="FailedState.feature.cs", label="Exit HangFire.Tests.States.FailedStateFeature.TestInitialize()", span="46-46"];
m7_49 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="FailedState.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m7_8 [cluster="Unk.OnFeatureStart", file="FailedState.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m7_51 [cluster="Unk.Then", file="FailedState.feature.cs", label="Entry Unk.Then", span=""];
m7_34 [cluster="Unk.Given", file="FailedState.feature.cs", label="Entry Unk.Given", span=""];
m7_9 [cluster="System.Exception.ToString()", file="FailedState.feature.cs", label="Entry System.Exception.ToString()", span="0-0"];
m7_10 [cluster="HangFire.States.FailedState.Apply(IRedisTransaction)", file="FailedState.feature.cs", label="Entry HangFire.States.FailedState.Apply(IRedisTransaction)", span="31-31"];
m7_11 [cluster="HangFire.States.FailedState.Apply(IRedisTransaction)", file="FailedState.feature.cs", label="transaction == null", span="33-33"];
m7_13 [cluster="HangFire.States.FailedState.Apply(IRedisTransaction)", color=red, community=0, file="FailedState.feature.cs", label="1: transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                        ''hangfire:failed'',\r\n                        JobId,\r\n                        JobHelper.ToTimestamp(DateTime.UtcNow)))", span="35-38"];
m7_12 [cluster="HangFire.States.FailedState.Apply(IRedisTransaction)", file="FailedState.feature.cs", label="throw new ArgumentNullException(''transaction'');", span="33-33"];
m7_14 [cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="FailedState.feature.cs", label="Entry HangFire.Tests.States.FailedStateFeature.TestInitialize()", span="46-46"];
m7_16 [cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="FailedState.feature.cs", label="HangFire.Tests.States.FailedStateFeature.FeatureSetup(null)", span="51-51"];
m7_30 [cluster="Unk.RemoveItemFromSortedSet", file="FailedState.feature.cs", label="Entry Unk.RemoveItemFromSortedSet", span=""];
m7_32 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureBackground()", file="FailedState.feature.cs", label=string, span=""];
m7_31 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureBackground()", file="FailedState.feature.cs", label="HangFire.States.FailedState", span=""];
m7_33 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureBackground()", file="FailedState.feature.cs", label="Exit HangFire.Tests.States.FailedStateFeature.FeatureBackground()", span="71-71"];
m7_61 [file="FailedState.feature.cs", label="HangFire.Tests.States.FailedStateFeature", span=""];
m9_6 [cluster="Unk.RegisterAllAreas", file="JobActivator.feature.cs", label="Entry Unk.RegisterAllAreas", span=""];
m9_15 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_EndRequest()", file="JobActivator.feature.cs", label="Entry Hangfire.Sample.Highlighter.MvcApplication.Application_EndRequest()", span="26-26"];
m9_16 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_EndRequest()", file="JobActivator.feature.cs", label="MiniProfiler.Stop()", span="28-28"];
m9_17 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_EndRequest()", file="JobActivator.feature.cs", label="Exit Hangfire.Sample.Highlighter.MvcApplication.Application_EndRequest()", span="26-26"];
m9_10 [cluster="Unk.SetInitializer", file="JobActivator.feature.cs", label="Entry Unk.SetInitializer", span=""];
m9_11 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_BeginRequest()", file="JobActivator.feature.cs", label="Entry Hangfire.Sample.Highlighter.MvcApplication.Application_BeginRequest()", span="21-21"];
m9_12 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_BeginRequest()", file="JobActivator.feature.cs", label="MiniProfiler.Start()", span="23-23"];
m9_13 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_BeginRequest()", file="JobActivator.feature.cs", label="Exit Hangfire.Sample.Highlighter.MvcApplication.Application_BeginRequest()", span="21-21"];
m9_9 [cluster="MigrateDatabaseToLatestVersion<HighlighterDbContext, Configuration>.cstr", file="JobActivator.feature.cs", label="Entry MigrateDatabaseToLatestVersion<HighlighterDbContext, Configuration>.cstr", span=""];
m9_18 [cluster="Unk.Stop", file="JobActivator.feature.cs", label="Entry Unk.Stop", span=""];
m9_0 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", file="JobActivator.feature.cs", label="Entry Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", span="12-12"];
m9_1 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", file="JobActivator.feature.cs", label="AreaRegistration.RegisterAllAreas()", span="14-14"];
m9_2 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", file="JobActivator.feature.cs", label="RouteConfig.RegisterRoutes(RouteTable.Routes)", span="15-15"];
m9_3 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", file="JobActivator.feature.cs", label="MiniProfilerEF6.Initialize()", span="17-17"];
m9_4 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", file="JobActivator.feature.cs", label="Database.SetInitializer(new MigrateDatabaseToLatestVersion<HighlighterDbContext, Configuration>())", span="18-18"];
m9_5 [cluster="Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", file="JobActivator.feature.cs", label="Exit Hangfire.Sample.Highlighter.MvcApplication.Application_Start()", span="12-12"];
m9_7 [cluster="Unk.RegisterRoutes", file="JobActivator.feature.cs", label="Entry Unk.RegisterRoutes", span=""];
m9_8 [cluster="Unk.Initialize", file="JobActivator.feature.cs", label="Entry Unk.Initialize", span=""];
m9_14 [cluster="Unk.Start", file="JobActivator.feature.cs", label="Entry Unk.Start", span=""];
m10_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JobActivatorSteps.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m10_31 [cluster="Unk.Acquire", file="JobActivatorSteps.cs", label="Entry Unk.Acquire", span=""];
m10_25 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="JobActivatorSteps.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m10_32 [cluster="string.Format(string, object)", file="JobActivatorSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m10_23 [cluster="string.Format(string, object, object)", file="JobActivatorSteps.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m10_24 [cluster="Hangfire.Logging.ILog.Trace(string)", file="JobActivatorSteps.cs", label="Entry Hangfire.Logging.ILog.Trace(string)", span="232-232"];
m10_33 [cluster="Unk.Execute", file="JobActivatorSteps.cs", label="Entry Unk.Execute", span=""];
m10_35 [cluster="Hangfire.SqlServer.ExpirationManager.ToString()", file="JobActivatorSteps.cs", label="Entry Hangfire.SqlServer.ExpirationManager.ToString()", span="100-100"];
m10_36 [cluster="Hangfire.SqlServer.ExpirationManager.ToString()", file="JobActivatorSteps.cs", label="return GetType().ToString();", span="102-102"];
m10_37 [cluster="Hangfire.SqlServer.ExpirationManager.ToString()", file="JobActivatorSteps.cs", label="Exit Hangfire.SqlServer.ExpirationManager.ToString()", span="100-100"];
m10_26 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="JobActivatorSteps.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m10_0 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage)", file="JobActivatorSteps.cs", label="Entry Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage)", span="45-45"];
m10_1 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage)", file="JobActivatorSteps.cs", label="Exit Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage)", span="45-45"];
m10_21 [cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="JobActivatorSteps.cs", label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122"];
m10_34 [cluster="Unk.Release", file="JobActivatorSteps.cs", label="Entry Unk.Release", span=""];
m10_39 [cluster="System.Type.ToString()", file="JobActivatorSteps.cs", label="Entry System.Type.ToString()", span="0-0"];
m10_38 [cluster="object.GetType()", file="JobActivatorSteps.cs", label="Entry object.GetType()", span="0-0"];
m10_22 [cluster="Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", file="JobActivatorSteps.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.UseConnection(System.Action<SqlConnection>)", span="173-173"];
m10_2 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="JobActivatorSteps.cs", label="Entry Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="50-50"];
m10_3 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="JobActivatorSteps.cs", label="storage == null", span="52-52"];
m10_5 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="JobActivatorSteps.cs", label="_storage = storage", span="54-54"];
m10_6 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="JobActivatorSteps.cs", label="_checkInterval = checkInterval", span="55-55"];
m10_4 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="JobActivatorSteps.cs", label="throw new ArgumentNullException(''storage'');", span="52-52"];
m10_7 [cluster="Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", file="JobActivatorSteps.cs", label="Exit Hangfire.SqlServer.ExpirationManager.ExpirationManager(Hangfire.SqlServer.SqlServerStorage, System.TimeSpan)", span="50-50"];
m10_27 [cluster="lambda expression", file="JobActivatorSteps.cs", label="Entry lambda expression", span="68-84"];
m10_29 [cluster="lambda expression", file="JobActivatorSteps.cs", label="removedCount = connection.Execute(\r\n                                String.Format(@''\r\nset transaction isolation level read committed;\r\ndelete top (@count) from HangFire.[{0}] with (readpast) where ExpireAt < @now;'', table),\r\n                                new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass })", span="74-78"];
m10_28 [cluster="lambda expression", file="JobActivatorSteps.cs", label="SqlServerDistributedLock.Acquire(connection, DistributedLockKey, DefaultLockTimeout)", span="70-70"];
m10_30 [cluster="lambda expression", file="JobActivatorSteps.cs", label="Exit lambda expression", span="68-84"];
m10_9 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label="Entry Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", span="58-58"];
m10_10 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label=ProcessedTables, span="60-60"];
m10_16 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label="cancellationToken.WaitHandle.WaitOne(DelayBetweenPasses)", span="91-91"];
m10_19 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label="cancellationToken.WaitHandle.WaitOne(_checkInterval)", span="97-97"];
m10_11 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label="Logger.DebugFormat(''Removing outdated records from table '{0}'...'', table)", span="62-62"];
m10_13 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label="_storage.UseConnection(connection =>\r\n                    {\r\n                        SqlServerDistributedLock.Acquire(connection, DistributedLockKey, DefaultLockTimeout);\r\n\r\n                        try\r\n                        {\r\n                            removedCount = connection.Execute(\r\n                                String.Format(@''\r\nset transaction isolation level read committed;\r\ndelete top (@count) from HangFire.[{0}] with (readpast) where ExpireAt < @now;'', table),\r\n                                new { now = DateTime.UtcNow, count = NumberOfRecordsInSinglePass });\r\n                        }\r\n                        finally\r\n                        {\r\n                            SqlServerDistributedLock.Release(connection, DistributedLockKey);\r\n                        }\r\n                    })", span="68-84"];
m10_15 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label="Logger.Trace(String.Format(''Removed {0} outdated record(s) from '{1}' table.'', removedCount,\r\n                            table))", span="88-89"];
m10_12 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label="int removedCount = 0", span="64-64"];
m10_14 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label="removedCount > 0", span="86-86"];
m10_18 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label="removedCount != 0", span="94-94"];
m10_17 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="92-92"];
m10_20 [cluster="Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", file="JobActivatorSteps.cs", label="Exit Hangfire.SqlServer.ExpirationManager.Execute(System.Threading.CancellationToken)", span="58-58"];
m10_40 [file="JobActivatorSteps.cs", label="Hangfire.SqlServer.ExpirationManager", span=""];
m10_41 [file="JobActivatorSteps.cs", label=table, span=""];
m11_9 [cluster="Mock<IStorageConnection>.cstr", file="JobClientSteps.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m11_13 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.Execute(System.Threading.CancellationToken)", file="JobClientSteps.cs", label="ExecuteWithAutomaticRetry(cancellationToken)", span="54-54"];
m11_64 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", span="73-73"];
m11_60 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForStateMachineFactory()", span="67-67"];
m11_89 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="96-96"];
m11_90 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="JobClientSteps.cs", label="var client = CreateClient()", span="98-98"];
m11_91 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="JobClientSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.Create(null, _state.Object))", span="100-101"];
m11_92 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="JobClientSteps.cs", label="Assert.Equal(''job'', exception.ParamName)", span="103-103"];
m11_93 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenJobIsNull()", span="96-96"];
m11_49 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.GetLogLevel(int)", file="JobClientSteps.cs", label="Exit Hangfire.Server.AutomaticRetryServerComponentWrapper.GetLogLevel(int)", span="95-95"];
m11_50 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.GetLogLevel(int)", file="JobClientSteps.cs", label="return LogLevel.Error;", span="107-107"];
m11_51 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.ToString()", file="JobClientSteps.cs", label="Entry Hangfire.Server.AutomaticRetryServerComponentWrapper.ToString()", span="110-110"];
m11_52 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.ToString()", file="JobClientSteps.cs", label="return _innerComponent.ToString();", span="112-112"];
m11_41 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="45-45"];
m11_30 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.ExecuteWithAutomaticRetry(System.Threading.CancellationToken)", file="JobClientSteps.cs", label="i++", span="59-59"];
m11_70 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_TakesAConnection()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_TakesAConnection()", span="80-80"];
m11_71 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_TakesAConnection()", file="JobClientSteps.cs", label="CreateClient()", span="82-82"];
m11_72 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_TakesAConnection()", file="JobClientSteps.cs", label="_storage.Verify(x => x.GetConnection())", span="83-83"];
m11_73 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_TakesAConnection()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_TakesAConnection()", span="80-80"];
m11_10 [cluster="Mock<JobStorage>.cstr", file="JobClientSteps.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m11_63 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="69-69"];
m11_116 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", span="128-128"];
m11_118 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", color=green, community=0, file="JobClientSteps.cs", label="3: _process.Setup(x => x.Run(It.IsAny<CreateContext>()))\r\n                .Throws<InvalidOperationException>()", span="131-132"];
m11_117 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="JobClientSteps.cs", label="var client = CreateClient()", span="130-130"];
m11_119 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="JobClientSteps.cs", label="var exception = Assert.Throws<CreateJobFailedException>(\r\n                () => client.Create(_job, _state.Object))", span="134-135"];
m11_121 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", color=green, community=0, file="JobClientSteps.cs", label="3: Assert.IsType<InvalidOperationException>(exception.InnerException)", span="138-138"];
m11_120 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="JobClientSteps.cs", label="Assert.NotNull(exception.InnerException)", span="137-137"];
m11_122 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_WrapsProcessException_IntoItsOwnException()", span="128-128"];
m11_115 [cluster="Unk.Run", file="JobClientSteps.cs", label="Entry Unk.Run", span=""];
m11_14 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.Execute(System.Threading.CancellationToken)", file="JobClientSteps.cs", label="Exit Hangfire.Server.AutomaticRetryServerComponentWrapper.Execute(System.Threading.CancellationToken)", span="52-52"];
m11_53 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.ToString()", file="JobClientSteps.cs", label="Exit Hangfire.Server.AutomaticRetryServerComponentWrapper.ToString()", span="110-110"];
m11_57 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.GetBackOffMultiplier(int)", file="JobClientSteps.cs", label="var nextTry = rand.Next(\r\n                (int)Math.Pow(retryAttemptNumber, 2), (int)Math.Pow(retryAttemptNumber + 1, 2) + 1)", span="119-120"];
m11_32 [cluster="lambda expression", file="JobClientSteps.cs", label="new BackgroundJobClient(null, _stateMachineFactory.Object, _process.Object)", span="36-36"];
m11_106 [cluster="HangFire.BackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.State)", file="JobClientSteps.cs", label="Entry HangFire.BackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.State)", span="81-81"];
m11_29 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.ExecuteWithAutomaticRetry(System.Threading.CancellationToken)", file="JobClientSteps.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="90-90"];
m11_98 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="107-107"];
m11_99 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="JobClientSteps.cs", label="var client = CreateClient()", span="109-109"];
m11_100 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="JobClientSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => client.Create(_job, null))", span="111-112"];
m11_101 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="JobClientSteps.cs", label="Assert.Equal(''state'', exception.ParamName)", span="114-114"];
m11_102 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_ThrowsAnException_WhenStateIsNull()", span="107-107"];
m11_33 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="36-36"];
m11_34 [cluster="BackgroundJobClient.cstr", file="JobClientSteps.cs", label="Entry BackgroundJobClient.cstr", span=""];
m11_42 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", span="51-51"];
m11_43 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", file="JobClientSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, null))", span="53-54"];
m11_45 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", span="51-51"];
m11_47 [cluster="lambda expression", file="JobClientSteps.cs", label="new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, null)", span="54-54"];
m11_44 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenCreationProcessIsNull()", file="JobClientSteps.cs", label="Assert.Equal(''process'', exception.ParamName)", span="56-56"];
m11_46 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="54-54"];
m11_48 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="54-54"];
m11_84 [cluster="HangFire.BackgroundJobClient.Dispose()", file="JobClientSteps.cs", label="Entry HangFire.BackgroundJobClient.Dispose()", span="103-103"];
m11_66 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_HasDefaultValue_ForCreationProcess()", span="73-73"];
m11_12 [cluster="Unk.Returns", file="JobClientSteps.cs", label="Entry Unk.Returns", span=""];
m11_20 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.ExecuteWithAutomaticRetry(System.Threading.CancellationToken)", file="JobClientSteps.cs", label=OperationCanceledException, span="66-66"];
m11_0 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", span="19-19"];
m11_1 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="JobClientSteps.cs", label="_connection = new Mock<IStorageConnection>()", span="21-21"];
m11_3 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="JobClientSteps.cs", label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="23-23"];
m11_2 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="JobClientSteps.cs", label="_storage = new Mock<JobStorage>()", span="22-22"];
m11_4 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="JobClientSteps.cs", label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="25-25"];
m11_5 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="JobClientSteps.cs", label="_process = new Mock<IJobCreationProcess>()", span="27-27"];
m11_6 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="JobClientSteps.cs", label="_state = new Mock<State>()", span="28-28"];
m11_7 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="JobClientSteps.cs", label="_job = Job.FromExpression(() => Method())", span="29-29"];
m11_8 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.BackgroundJobClientFacts()", span="19-19"];
m11_37 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="JobClientSteps.cs", label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="47-47"];
m11_79 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Dispose_DisposesTheConnection()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.Dispose_DisposesTheConnection()", span="87-87"];
m11_80 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Dispose_DisposesTheConnection()", file="JobClientSteps.cs", label="var client = CreateClient()", span="89-89"];
m11_82 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Dispose_DisposesTheConnection()", file="JobClientSteps.cs", label="_connection.Verify(x => x.Dispose())", span="92-92"];
m11_81 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Dispose_DisposesTheConnection()", file="JobClientSteps.cs", label="client.Dispose()", span="90-90"];
m11_83 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Dispose_DisposesTheConnection()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Dispose_DisposesTheConnection()", span="87-87"];
m11_123 [cluster="Unk.NotNull", file="JobClientSteps.cs", label="Entry Unk.NotNull", span=""];
m11_35 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="42-42"];
m11_15 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.ExecuteWithAutomaticRetry(System.Threading.CancellationToken)", file="JobClientSteps.cs", label="Entry Hangfire.Server.AutomaticRetryServerComponentWrapper.ExecuteWithAutomaticRetry(System.Threading.CancellationToken)", span="57-57"];
m11_11 [cluster="Hangfire.Logging.LogProvider.GetLogger(System.Type)", file="JobClientSteps.cs", label="Entry Hangfire.Logging.LogProvider.GetLogger(System.Type)", span="353-353"];
m11_88 [cluster="Unk.Dispose", file="JobClientSteps.cs", label="Entry Unk.Dispose", span=""];
m11_16 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="JobClientSteps.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119"];
m11_18 [cluster="lambda expression", file="JobClientSteps.cs", label="x.GetConnection()", span="23-23"];
m11_28 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="33-33"];
m11_17 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="23-23"];
m11_23 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="29-29"];
m11_25 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="33-33"];
m11_26 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobClientSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(null, _stateMachineFactory.Object, _process.Object))", span="35-36"];
m11_27 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobClientSteps.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="38-38"];
m11_19 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="23-23"];
m11_21 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="29-29"];
m11_22 [cluster="lambda expression", file="JobClientSteps.cs", label="Method()", span="29-29"];
m11_24 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Method()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.Method()", span="141-141"];
m11_31 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="36-36"];
m11_58 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.GetBackOffMultiplier(int)", file="JobClientSteps.cs", label="return TimeSpan.FromSeconds(Math.Min(nextTry, MaxAttemptDelay.TotalSeconds));", span="122-122"];
m11_59 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.GetBackOffMultiplier(int)", file="JobClientSteps.cs", label="Exit Hangfire.Server.AutomaticRetryServerComponentWrapper.GetBackOffMultiplier(int)", span="115-115"];
m11_74 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="145-145"];
m11_131 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="JobClientSteps.cs", label="return new BackgroundJobClient(_storage.Object, _stateMachineFactory.Object, _process.Object);", span="147-147"];
m11_132 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateClient()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.CreateClient()", span="145-145"];
m11_65 [cluster="System.Math.Min(double, double)", file="JobClientSteps.cs", label="Entry System.Math.Min(double, double)", span="0-0"];
m11_54 [cluster="object.ToString()", file="JobClientSteps.cs", label="Entry object.ToString()", span="0-0"];
m11_39 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="45-45"];
m11_38 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="42-42"];
m11_40 [cluster="lambda expression", file="JobClientSteps.cs", label="new BackgroundJobClient(_storage.Object, null, _process.Object)", span="45-45"];
m11_124 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="131-131"];
m11_125 [cluster="lambda expression", color=green, community=0, file="JobClientSteps.cs", label="0: x.Run(It.IsAny<CreateContext>())", span="131-131"];
m11_126 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="131-131"];
m11_62 [cluster="System.Guid.GetHashCode()", file="JobClientSteps.cs", label="Entry System.Guid.GetHashCode()", span="0-0"];
m11_68 [cluster="lambda expression", file="JobClientSteps.cs", label=i, span=""];
m11_95 [cluster="lambda expression", file="JobClientSteps.cs", label="client.Create(null, _state.Object)", span="101-101"];
m11_104 [cluster="lambda expression", file="JobClientSteps.cs", label="client.Create(_job, null)", span="112-112"];
m11_128 [cluster="lambda expression", file="JobClientSteps.cs", label="client.Create(_job, _state.Object)", span="135-135"];
m11_127 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="135-135"];
m11_113 [cluster="lambda expression", file="JobClientSteps.cs", label="x.Run(It.IsNotNull<CreateContext>())", span="124-124"];
m11_61 [cluster="System.Guid.NewGuid()", file="JobClientSteps.cs", label="Entry System.Guid.NewGuid()", span="0-0"];
m11_67 [cluster="lambda expression", file="JobClientSteps.cs", label="Hangfire.Server.AutomaticRetryServerComponentWrapper", span=""];
m11_69 [cluster="lambda expression", file="JobClientSteps.cs", label=nextTry, span=""];
m11_76 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="83-83"];
m11_85 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="92-92"];
m11_94 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="101-101"];
m11_96 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="101-101"];
m11_103 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="112-112"];
m11_105 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="112-112"];
m11_112 [cluster="lambda expression", file="JobClientSteps.cs", label="Entry lambda expression", span="124-124"];
m11_129 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="135-135"];
m11_114 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="124-124"];
m11_78 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="83-83"];
m11_77 [cluster="lambda expression", file="JobClientSteps.cs", label="x.GetConnection()", span="83-83"];
m11_87 [cluster="lambda expression", file="JobClientSteps.cs", label="Exit lambda expression", span="92-92"];
m11_86 [cluster="lambda expression", file="JobClientSteps.cs", label="x.Dispose()", span="92-92"];
m11_55 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.GetBackOffMultiplier(int)", file="JobClientSteps.cs", label="Entry Hangfire.Server.AutomaticRetryServerComponentWrapper.GetBackOffMultiplier(int)", span="115-115"];
m11_56 [cluster="Hangfire.Server.AutomaticRetryServerComponentWrapper.GetBackOffMultiplier(int)", file="JobClientSteps.cs", label="var rand = new Random(Guid.NewGuid().GetHashCode())", span="118-118"];
m11_75 [cluster="Unk.Verify", file="JobClientSteps.cs", label="Entry Unk.Verify", span=""];
m11_36 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="JobClientSteps.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new BackgroundJobClient(_storage.Object, null, _process.Object))", span="44-45"];
m11_130 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.Method()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.Method()", span="141-141"];
m11_97 [cluster="Unk.Create", file="JobClientSteps.cs", label="Entry Unk.Create", span=""];
m11_107 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="JobClientSteps.cs", label="Entry HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", span="118-118"];
m11_108 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="JobClientSteps.cs", label="var client = CreateClient()", span="120-120"];
m11_109 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="JobClientSteps.cs", label="client.Create(_job, _state.Object)", span="122-122"];
m11_110 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="JobClientSteps.cs", label="_process.Verify(x => x.Run(It.IsNotNull<CreateContext>()))", span="124-124"];
m11_111 [cluster="HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", file="JobClientSteps.cs", label="Exit HangFire.Core.Tests.BackgroundJobClientFacts.CreateJob_RunsTheJobCreationProcess()", span="118-118"];
m11_133 [file="JobClientSteps.cs", label="HangFire.Core.Tests.BackgroundJobClientFacts", span=""];
m11_134 [file="JobClientSteps.cs", label=client, span=""];
m11_135 [file="JobClientSteps.cs", label=client, span=""];
m11_136 [file="JobClientSteps.cs", label=client, span=""];
m12_23 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="JobClientTests.cs", label="Entry HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", span="43-43"];
m12_24 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="JobClientTests.cs", label="new JobClient(_connectionMock.Object, null)", span="46-46"];
m12_25 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", file="JobClientTests.cs", label="Exit HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenJobCreatorIsNull()", span="43-43"];
m12_36 [cluster="HangFire.Client.JobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", file="JobClientTests.cs", label="Entry HangFire.Client.JobClient.CreateJob(HangFire.Common.JobMethod, string[], HangFire.Common.States.JobState)", span="75-75"];
m12_14 [cluster="Mock<JobState>.cstr", file="JobClientTests.cs", label="Entry Mock<JobState>.cstr", span=""];
m12_15 [cluster="HangFire.Common.JobMethod.JobMethod(System.Type, System.Reflection.MethodInfo)", file="JobClientTests.cs", label="Entry HangFire.Common.JobMethod.JobMethod(System.Type, System.Reflection.MethodInfo)", span="48-48"];
m12_9 [cluster="Unk.Setup", file="JobClientTests.cs", label="Entry Unk.Setup", span=""];
m12_13 [cluster="JobClient.cstr", file="JobClientTests.cs", label="Entry JobClient.cstr", span=""];
m12_37 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="JobClientTests.cs", label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", span="72-72"];
m12_38 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="JobClientTests.cs", label="_client.CreateJob(_method, new[] { ''hello'', ''3'' }, _stateMock.Object)", span="74-74"];
m12_39 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", file="JobClientTests.cs", label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_CallsCreate_WithCorrectContext()", span="72-72"];
m12_33 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="JobClientTests.cs", label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", span="66-66"];
m12_34 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="JobClientTests.cs", label="_client.CreateJob(_method, new string[0], null)", span="68-68"];
m12_35 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", file="JobClientTests.cs", label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenStateIsNull()", span="66-66"];
m12_29 [cluster="Unk.CreateJob", file="JobClientTests.cs", label="Entry Unk.CreateJob", span=""];
m12_11 [cluster="Unk.Returns", file="JobClientTests.cs", label="Entry Unk.Returns", span=""];
m12_20 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", file="JobClientTests.cs", label="Entry HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", span="34-34"];
m12_21 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", color=green, community=0, file="JobClientTests.cs", label="0: new JobClient(null, _creatorMock.Object)", span="37-37"];
m12_22 [cluster="HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", file="JobClientTests.cs", label="Exit HangFire.Tests.Client.JobClientTests.Ctor_ThrowsAnException_WhenClientManagerIsNull()", span="34-34"];
m12_30 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", file="JobClientTests.cs", label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", span="59-59"];
m12_31 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", color=green, community=0, file="JobClientTests.cs", label="0: _client.CreateJob(_method, null, _stateMock.Object)", span="61-61"];
m12_32 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", file="JobClientTests.cs", label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenArgumentsIsNull()", span="59-59"];
m12_12 [cluster="Mock<JobCreator>.cstr", file="JobClientTests.cs", label="Entry Mock<JobCreator>.cstr", span=""];
m12_0 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="JobClientTests.cs", label="Entry HangFire.Tests.Client.JobClientTests.Initialize()", span="21-21"];
m12_3 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", color=green, community=0, file="JobClientTests.cs", label="0: _creatorMock = new Mock<JobCreator>()", span="26-26"];
m12_2 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="JobClientTests.cs", label="_connectionMock.Setup(x => x.Storage).Returns(new Mock<JobStorage>().Object)", span="24-24"];
m12_4 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="JobClientTests.cs", label="_client = new JobClient(_connectionMock.Object, _creatorMock.Object)", span="27-27"];
m12_1 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="JobClientTests.cs", label="_connectionMock = new Mock<IStorageConnection>()", span="23-23"];
m12_5 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="JobClientTests.cs", label="_stateMock = new Mock<JobState>()", span="28-28"];
m12_6 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="JobClientTests.cs", label="_method = new JobMethod(typeof(JobClientTests), typeof(JobClientTests).GetMethod(''Method''))", span="29-29"];
m12_7 [cluster="HangFire.Tests.Client.JobClientTests.Initialize()", file="JobClientTests.cs", label="Exit HangFire.Tests.Client.JobClientTests.Initialize()", span="21-21"];
m12_17 [cluster="lambda expression", file="JobClientTests.cs", label="Entry lambda expression", span="24-24"];
m12_18 [cluster="lambda expression", file="JobClientTests.cs", label="x.Storage", span="24-24"];
m12_19 [cluster="lambda expression", file="JobClientTests.cs", label="Exit lambda expression", span="24-24"];
m12_8 [cluster="Mock<IStorageConnection>.cstr", file="JobClientTests.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m12_16 [cluster="System.Type.GetMethod(string)", file="JobClientTests.cs", label="Entry System.Type.GetMethod(string)", span="0-0"];
m12_10 [cluster="Mock<JobStorage>.cstr", file="JobClientTests.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m12_26 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", file="JobClientTests.cs", label="Entry HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", span="52-52"];
m12_27 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", color=green, community=0, file="JobClientTests.cs", label="0: _client.CreateJob(null, new string[0], _stateMock.Object)", span="54-54"];
m12_28 [cluster="HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", file="JobClientTests.cs", label="Exit HangFire.Tests.Client.JobClientTests.CreateJob_ThrowsAnException_WhenJobMethodIsNull()", span="52-52"];
m12_47 [file="JobClientTests.cs", label="HangFire.Tests.Client.JobClientTests", span=""];
m13_25 [cluster="Unk.OnScenarioStart", file="JobFetcher.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m13_29 [cluster="Unk.CollectScenarioErrors", file="JobFetcher.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m13_0 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m13_1 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="JobFetcher.feature.cs", label="0: testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m13_2 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="JobFetcher.feature.cs", label="0: TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', ''\r\n  As a user, I expect that my enqueued jobs will be dequeued by the Server.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m13_3 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m13_4 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m13_41 [cluster="Unk.And", file="JobFetcher.feature.cs", label="Entry Unk.And", span=""];
m13_54 [cluster="Unk.But", file="JobFetcher.feature.cs", label="Entry Unk.But", span=""];
m13_5 [cluster="Unk.GetTestRunner", file="JobFetcher.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m13_22 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m13_23 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m13_24 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m13_30 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m13_31 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", color=green, community=0, file="JobFetcher.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should return the job payload when it dequeues a job'', ((string[])(null)))", span="77-77"];
m13_32 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m13_37 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="89-89"];
m13_33 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m13_36 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher should return the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87"];
m13_34 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83"];
m13_35 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m13_38 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldReturnTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m13_85 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", span="192-192"];
m13_92 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", color=green, community=0, file="JobFetcher.feature.cs", label="0: this.ScenarioCleanup()", span="206-206"];
m13_91 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Then(''the job should have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="204-204"];
m13_87 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="196-196"];
m13_86 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should set the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="194-194"];
m13_90 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="202-202"];
m13_88 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="198-198"];
m13_89 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200"];
m13_93 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", span="192-192"];
m13_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JobFetcher.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m13_42 [cluster="Unk.When", file="JobFetcher.feature.cs", label="Entry Unk.When", span=""];
m13_76 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", span="171-171"];
m13_83 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="185-185"];
m13_78 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="175-175"];
m13_77 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should listen only specified queue'', ((string[])(null)))", span="173-173"];
m13_82 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="183-183"];
m13_79 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="177-177"];
m13_81 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="181-181"];
m13_80 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="179-179"];
m13_84 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", span="171-171"];
m13_14 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46"];
m13_16 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(null)", span="51-51"];
m13_15 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49"];
m13_17 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46"];
m13_39 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="JobFetcher.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m13_44 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="97-97"];
m13_52 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="114-114"];
m13_46 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="102-102"];
m13_45 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should remove the dequeued job from the queue and adds it to the dequeued'' +\r\n                    '' list'', ((string[])(null)))", span="99-100"];
m13_51 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.But(''the dequeued jobs list should contain it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="112-112"];
m13_47 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="104-104"];
m13_50 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.Then(''the queue should not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="110-110"];
m13_48 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106"];
m13_49 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="108-108"];
m13_53 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldRemoveTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="97-97"];
m13_43 [cluster="Unk.Then", file="JobFetcher.feature.cs", label="Entry Unk.Then", span=""];
m13_40 [cluster="Unk.Given", file="JobFetcher.feature.cs", label="Entry Unk.Given", span=""];
m13_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="JobFetcher.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m13_26 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m13_27 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", color=green, community=0, file="JobFetcher.feature.cs", label="0: testRunner.CollectScenarioErrors()", span="68-68"];
m13_28 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m13_64 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144"];
m13_74 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="164-164"];
m13_66 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="148-148"];
m13_65 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should dequeue jobs in the FIFO order'', ((string[])(null)))", span="146-146"];
m13_73 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher should return the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162"];
m13_67 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="150-150"];
m13_71 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher should return the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158"];
m13_72 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="160-160"];
m13_68 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="152-152"];
m13_70 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156"];
m13_69 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="154-154"];
m13_75 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144"];
m13_55 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122"];
m13_62 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="this.ScenarioCleanup()", span="137-137"];
m13_57 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="127-127"];
m13_56 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should not return any job when it tries to dequeue a job from an empty qu'' +\r\n                    ''eue'', ((string[])(null)))", span="124-125"];
m13_61 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="135-135"];
m13_58 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="129-129"];
m13_60 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="133-133"];
m13_59 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="131-131"];
m13_63 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122"];
m13_8 [cluster="Unk.OnFeatureStart", file="JobFetcher.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m13_94 [file="JobFetcher.feature.cs", label="HangFire.Tests.Server.JobFetcherFeature", span=""];
m14_15 [cluster="System.DateTime.Add(System.TimeSpan)", file="JobFetcherSteps.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m14_51 [cluster="Hangfire.SqlServer.EnqueuedAndFetchedCountDto.EnqueuedAndFetchedCountDto()", file="JobFetcherSteps.cs", label="Entry Hangfire.SqlServer.EnqueuedAndFetchedCountDto.EnqueuedAndFetchedCountDto()", span="18-18"];
m14_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JobFetcherSteps.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m14_6 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="JobFetcherSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", span="42-42"];
m14_7 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="JobFetcherSteps.cs", label="string sqlQuery = @''select distinct(Queue) from HangFire.JobQueue''", span="44-44"];
m14_8 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="JobFetcherSteps.cs", label=_cacheLock, span="46-46"];
m14_10 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="JobFetcherSteps.cs", label="var result = UseTransaction(connection =>\r\n                    {\r\n                        return connection.Query(sqlQuery).Select(x => (string) x.Queue).ToList();\r\n                    })", span="50-53"];
m14_9 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="JobFetcherSteps.cs", label="_queuesCache.Count == 0 || _cacheUpdated.Add(QueuesCacheTimeout) < DateTime.UtcNow", span="48-48"];
m14_13 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="JobFetcherSteps.cs", label="return _queuesCache.ToList();", span="59-59"];
m14_11 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="JobFetcherSteps.cs", label="_queuesCache = result", span="55-55"];
m14_12 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="JobFetcherSteps.cs", label="_cacheUpdated = DateTime.UtcNow", span="56-56"];
m14_14 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", file="JobFetcherSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetQueues()", span="42-42"];
m14_0 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="JobFetcherSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="36-36"];
m14_1 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="JobFetcherSteps.cs", label="storage == null", span="38-38"];
m14_3 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="JobFetcherSteps.cs", label="_storage = storage", span="39-39"];
m14_2 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="JobFetcherSteps.cs", label="throw new ArgumentNullException(''storage'');", span="38-38"];
m14_4 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", file="JobFetcherSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.SqlServerJobQueueMonitoringApi(Hangfire.SqlServer.SqlServerStorage)", span="36-36"];
m14_34 [cluster="Unk.>", file="JobFetcherSteps.cs", label="Entry Unk.>", span=""];
m14_50 [cluster="Unk.Single", file="JobFetcherSteps.cs", label="Entry Unk.Single", span=""];
m14_38 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="JobFetcherSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="84-84"];
m14_39 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="JobFetcherSteps.cs", label="return Enumerable.Empty<int>();", span="86-86"];
m14_40 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="JobFetcherSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="84-84"];
m14_23 [cluster="Unk.ToList", file="JobFetcherSteps.cs", label="Entry Unk.ToList", span=""];
m14_27 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="JobFetcherSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="63-63"];
m14_28 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="JobFetcherSteps.cs", label="string sqlQuery = @''\r\nselect r.Id from (\r\n  select jq.Id, row_number() over (order by jq.Id) as row_num \r\n  from HangFire.JobQueue jq\r\n  where jq.Queue = @queue\r\n) as r\r\nwhere r.row_num between @start and @end''", span="65-71"];
m14_29 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", color=red, community=0, file="JobFetcherSteps.cs", label="0: return UseTransaction(connection =>\r\n            {\r\n                return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage })\r\n                    .ToList()\r\n                    .Select(x => x.Id)\r\n                    .ToList();\r\n            });", span="73-81"];
m14_30 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="JobFetcherSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="63-63"];
m14_42 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="JobFetcherSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="89-89"];
m14_43 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="JobFetcherSteps.cs", label="string sqlQuery = @''\r\nselect count(Id) from HangFire.JobQueue where [Queue] = @queue''", span="91-92"];
m14_44 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", color=red, community=0, file="JobFetcherSteps.cs", label="0: return UseTransaction(connection =>\r\n            {\r\n                var result = connection.Query<int>(sqlQuery, new { queue = queue }).Single();\r\n\r\n                return new EnqueuedAndFetchedCountDto\r\n                {\r\n                    EnqueuedCount = result,\r\n                };\r\n            });", span="94-102"];
m14_45 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="JobFetcherSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="89-89"];
m14_16 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.UseTransaction<T>(System.Func<SqlConnection, T>)", file="JobFetcherSteps.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.UseTransaction<T>(System.Func<SqlConnection, T>)", span="105-105"];
m14_52 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.UseTransaction<T>(System.Func<SqlConnection, T>)", file="JobFetcherSteps.cs", label="return _storage.UseTransaction(func, IsolationLevel.ReadUncommitted);", span="107-107"];
m14_53 [cluster="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.UseTransaction<T>(System.Func<SqlConnection, T>)", file="JobFetcherSteps.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueueMonitoringApi.UseTransaction<T>(System.Func<SqlConnection, T>)", span="105-105"];
m14_17 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="JobFetcherSteps.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m14_21 [cluster="Unk.Query", file="JobFetcherSteps.cs", label="Entry Unk.Query", span=""];
m14_54 [cluster="Unk.UseTransaction", file="JobFetcherSteps.cs", label="Entry Unk.UseTransaction", span=""];
m14_46 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Entry lambda expression", span="94-102"];
m14_19 [cluster="lambda expression", file="JobFetcherSteps.cs", label="return connection.Query(sqlQuery).Select(x => (string) x.Queue).ToList();", span="52-52"];
m14_18 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Entry lambda expression", span="50-53"];
m14_20 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Exit lambda expression", span="50-53"];
m14_24 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Entry lambda expression", span="52-52"];
m14_25 [cluster="lambda expression", file="JobFetcherSteps.cs", label="(string) x.Queue", span="52-52"];
m14_26 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Exit lambda expression", span="52-52"];
m14_32 [cluster="lambda expression", file="JobFetcherSteps.cs", label="return connection.Query<JobIdDto>(\r\n                    sqlQuery,\r\n                    new { queue = queue, start = from + 1, end = @from + perPage })\r\n                    .ToList()\r\n                    .Select(x => x.Id)\r\n                    .ToList();", span="75-80"];
m14_31 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Entry lambda expression", span="73-81"];
m14_33 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Exit lambda expression", span="73-81"];
m14_35 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Entry lambda expression", span="79-79"];
m14_36 [cluster="lambda expression", file="JobFetcherSteps.cs", label="x.Id", span="79-79"];
m14_37 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Exit lambda expression", span="79-79"];
m14_47 [cluster="lambda expression", color=red, community=0, file="JobFetcherSteps.cs", label="0: var result = connection.Query<int>(sqlQuery, new { queue = queue }).Single()", span="96-96"];
m14_48 [cluster="lambda expression", file="JobFetcherSteps.cs", label="return new EnqueuedAndFetchedCountDto\r\n                {\r\n                    EnqueuedCount = result,\r\n                };", span="98-101"];
m14_49 [cluster="lambda expression", file="JobFetcherSteps.cs", label="Exit lambda expression", span="94-102"];
m14_41 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="JobFetcherSteps.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m14_22 [cluster="Unk.Select", file="JobFetcherSteps.cs", label="Entry Unk.Select", span=""];
m14_55 [file="JobFetcherSteps.cs", label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", span=""];
m14_56 [file="JobFetcherSteps.cs", label=sqlQuery, span=""];
m14_57 [file="JobFetcherSteps.cs", label=string, span=""];
m14_58 [file="JobFetcherSteps.cs", label=int, span=""];
m14_59 [file="JobFetcherSteps.cs", label=int, span=""];
m14_60 [file="JobFetcherSteps.cs", label=sqlQuery, span=""];
m14_61 [file="JobFetcherSteps.cs", label=string, span=""];
m14_62 [file="JobFetcherSteps.cs", label=sqlQuery, span=""];
m15_17 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="JobMethodTests.cs", label="Assert.IsFalse(method.OldFormat)", span="49-49"];
m15_23 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="JobMethodTests.cs", label="var methodInfo = type.GetMethod(''Perform'')", span="56-56"];
m15_20 [cluster="Unk.IsFalse", file="JobMethodTests.cs", label="Entry Unk.IsFalse", span=""];
m15_36 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="JobMethodTests.cs", label="return Async(jobType, args);", span="65-65"];
m15_37 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=red, community=0, file="JobMethodTests.cs", label="0: var jobId = GenerateId()", span="68-68"];
m15_38 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="JobMethodTests.cs", label="var state = new ScheduledState(jobId, ''Scheduled by the Client'', DateTime.UtcNow.Add(interval))", span="70-70"];
m15_39 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=red, community=0, file="JobMethodTests.cs", label="0: var job = CreateJob(jobType, args)", span="71-71"];
m15_46 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", file="JobMethodTests.cs", label="JobMethod.Deserialize(serializedData)", span="111-111"];
m15_22 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="JobMethodTests.cs", label="var type = typeof(TestJob)", span="55-55"];
m15_63 [cluster="HangFire.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", color=green, community=0, file="JobMethodTests.cs", label="1: var nonCachedAttributes = method.GetMethodFilterAttributes(false).ToArray()", span="132-132"];
m15_64 [cluster="HangFire.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", color=green, community=0, file="JobMethodTests.cs", label="0: var cachedAttributes = method.GetMethodFilterAttributes(true).ToArray()", span="133-133"];
m15_49 [cluster="HangFire.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", file="JobMethodTests.cs", label="var method = GetCorrectMethod()", span="117-117"];
m15_50 [cluster="HangFire.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", color=green, community=0, file="JobMethodTests.cs", label="0: var nonCachedAttributes = method.GetTypeFilterAttributes(false).ToArray()", span="118-118"];
m15_51 [cluster="HangFire.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", color=green, community=0, file="JobMethodTests.cs", label="0: var cachedAttributes = method.GetTypeFilterAttributes(true).ToArray()", span="119-119"];
m15_32 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="JobMethodTests.cs", label="throw new ArgumentException(\r\n                    String.Format(''The type '{0}' must inherit '{1}'.'', jobType, typeof(BackgroundJob)),\r\n                    ''jobType'');", span="53-55"];
m15_82 [cluster="Unk.IsTrue", file="JobMethodTests.cs", label="Entry Unk.IsTrue", span=""];
m15_18 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="JobMethodTests.cs", label="Exit HangFire.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", span="41-41"];
m15_61 [cluster="HangFire.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="JobMethodTests.cs", label="Entry HangFire.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", span="129-129"];
m15_60 [cluster="Unk.IsInstanceOfType", file="JobMethodTests.cs", label="Entry Unk.IsInstanceOfType", span=""];
m15_4 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="JobMethodTests.cs", label="Entry HangFire.Client.JobClient.Async(System.Type, object)", span="17-17"];
m15_62 [cluster="HangFire.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="JobMethodTests.cs", label="var method = GetCorrectMethod()", span="131-131"];
m15_26 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="JobMethodTests.cs", label="Assert.AreEqual(type, method.Type)", span="66-66"];
m15_48 [cluster="System.DateTime.Add(System.TimeSpan)", file="JobMethodTests.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m15_52 [cluster="Unk.Dispose", file="JobMethodTests.cs", label="Entry Unk.Dispose", span=""];
m15_54 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="JobMethodTests.cs", label="job[''Type''] = jobType.AssemblyQualifiedName", span="90-90"];
m15_53 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", color=green, community=0, file="JobMethodTests.cs", label="1: var job = new Dictionary<string, string>()", span="89-89"];
m15_55 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="JobMethodTests.cs", label="job[''Args''] = JobHelper.ToJson(ClientJobDescriptor.SerializeProperties(jobArgs))", span="91-91"];
m15_56 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="JobMethodTests.cs", label="job[''CreatedAt''] = JobHelper.ToStringTimestamp(DateTime.UtcNow)", span="92-92"];
m15_21 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="JobMethodTests.cs", label="Entry HangFire.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", span="53-53"];
m15_33 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="JobMethodTests.cs", label="interval != interval.Duration()", span="58-58"];
m15_34 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=green, community=0, file="JobMethodTests.cs", label="1: throw new ArgumentOutOfRangeException(''interval'', ''Interval value can not be negative.'');", span="60-60"];
m15_35 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", file="JobMethodTests.cs", label="interval.Equals(TimeSpan.Zero)", span="63-63"];
m15_45 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", color=green, community=0, file="JobMethodTests.cs", label="0: var serializedData = new InvocationData\r\n            {\r\n                Type = typeof (TestJob).AssemblyQualifiedName,\r\n                Method = ''NonExistingMethod'',\r\n                ParameterTypes = JobHelper.ToJson(new Type[0])\r\n            }", span="104-109"];
m15_3 [cluster="Unk.GetClient", file="JobMethodTests.cs", label="Entry Unk.GetClient", span=""];
m15_44 [cluster="System.TimeSpan.Duration()", file="JobMethodTests.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m15_47 [cluster="HangFire.States.ScheduledState.ScheduledState(string, string, System.DateTime)", file="JobMethodTests.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(string, string, System.DateTime)", span="10-10"];
m15_8 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=red, community=0, file="JobMethodTests.cs", label="0: throw new ArgumentException(\r\n                    String.Format(''The type '{0}' must inherit '{1}'.'', jobType, typeof(BackgroundJob)), \r\n                    ''jobType'');", span="25-27"];
m15_9 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", file="JobMethodTests.cs", label="var queue = JobHelper.GetQueue(jobType)", span="30-30"];
m15_10 [cluster="HangFire.Client.JobClient.Async(System.Type, object)", color=red, community=0, file="JobMethodTests.cs", label="0: var jobId = GenerateId()", span="32-32"];
m15_5 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheMethodIsNull()", color=red, community=0, file="JobMethodTests.cs", label="2: Entry HangFire.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheMethodIsNull()", span="24-24"];
m15_7 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheMethodIsNull()", color=red, community=0, file="JobMethodTests.cs", label="1: Exit HangFire.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheMethodIsNull()", span="24-24"];
m15_12 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", color=red, community=0, file="JobMethodTests.cs", label="1: var type = typeof (TestJob)", span="43-43"];
m15_6 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheMethodIsNull()", file="JobMethodTests.cs", label="new JobMethod(typeof (TestJob), null)", span="27-27"];
m15_11 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="JobMethodTests.cs", label="Entry HangFire.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", span="41-41"];
m15_13 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", color=red, community=0, file="JobMethodTests.cs", label="1: var methodInfo = type.GetMethod(''Perform'')", span="44-44"];
m15_15 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="JobMethodTests.cs", label="Assert.AreEqual(type, method.Type)", span="47-47"];
m15_14 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", color=green, community=0, file="JobMethodTests.cs", label="1: var method = new JobMethod(type, methodInfo)", span="45-45"];
m15_16 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="JobMethodTests.cs", label="Assert.AreEqual(methodInfo, method.Method)", span="48-48"];
m15_58 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="JobMethodTests.cs", label="Exit HangFire.Client.JobClient.CreateJob(System.Type, object)", span="86-86"];
m15_19 [cluster="System.ArgumentException.ArgumentException(string, string)", file="JobMethodTests.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m15_0 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeIsNull()", file="JobMethodTests.cs", label="Entry HangFire.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeIsNull()", span="15-15"];
m15_1 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeIsNull()", color=red, community=0, file="JobMethodTests.cs", label="0: new JobMethod(null, typeof (TestJob).GetMethod(''Perform''))", span="18-18"];
m15_2 [cluster="HangFire.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeIsNull()", file="JobMethodTests.cs", label="Exit HangFire.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeIsNull()", span="15-15"];
m15_88 [cluster="Unk.IsNull", file="JobMethodTests.cs", label="Entry Unk.IsNull", span=""];
m15_66 [cluster="HangFire.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="JobMethodTests.cs", label="Assert.AreEqual(1, cachedAttributes.Length)", span="136-136"];
m15_70 [cluster="HangFire.Common.JobMethod.GetMethodFilterAttributes(bool)", file="JobMethodTests.cs", label="Entry HangFire.Common.JobMethod.GetMethodFilterAttributes(bool)", span="139-139"];
m15_30 [cluster="HangFire.Client.JobClient.In(System.TimeSpan, System.Type, object)", color=red, community=0, file="JobMethodTests.cs", label="0: throw new ArgumentNullException(''jobType'');", span="49-49"];
m15_59 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="JobMethodTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m15_28 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", color=green, community=0, file="JobMethodTests.cs", label="1: Assert.IsFalse(method.OldFormat)", span="68-68"];
m15_29 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", color=red, community=0, file="JobMethodTests.cs", label="0: Exit HangFire.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", span="53-53"];
m15_31 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="JobMethodTests.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m15_40 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", file="JobMethodTests.cs", label="Entry HangFire.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", span="88-88"];
m15_42 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", color=red, community=0, file="JobMethodTests.cs", label="1: JobMethod.Deserialize(serializedData)", span="97-97"];
m15_41 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", color=green, community=0, file="JobMethodTests.cs", label="0: var serializedData = new InvocationData\r\n            {\r\n                Type = ''NonExistingType'',\r\n                Method = ''Perform'',\r\n                ParameterTypes = '''',\r\n            }", span="90-95"];
m15_43 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", file="JobMethodTests.cs", label="Exit HangFire.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", span="88-88"];
m15_27 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", color=green, community=0, file="JobMethodTests.cs", label="0: Assert.AreEqual(methodInfo, method.Method)", span="67-67"];
m15_57 [cluster="HangFire.Client.JobClient.CreateJob(System.Type, object)", file="JobMethodTests.cs", label="return job;", span="94-94"];
m15_72 [cluster="HangFire.Tests.Client.JobMethodTests.GetCorrectMethod()", color=green, community=0, file="JobMethodTests.cs", label="0: var methodInfo = type.GetMethod(''Perform'')", span="145-145"];
m15_71 [cluster="HangFire.Tests.Client.JobMethodTests.GetCorrectMethod()", file="JobMethodTests.cs", label="var type = typeof(TestJob)", span="144-144"];
m15_73 [cluster="HangFire.Tests.Client.JobMethodTests.GetCorrectMethod()", file="JobMethodTests.cs", label="return new JobMethod(type, methodInfo);", span="146-146"];
m15_74 [cluster="HangFire.Tests.Client.JobMethodTests.GetCorrectMethod()", file="JobMethodTests.cs", label="Exit HangFire.Tests.Client.JobMethodTests.GetCorrectMethod()", span="142-142"];
m15_24 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", color=green, community=0, file="JobMethodTests.cs", label="1: var serializedData = new InvocationData\r\n            {\r\n                Type = type.AssemblyQualifiedName,\r\n                Method = methodInfo.Name,\r\n                ParameterTypes = JobHelper.ToJson(new Type[0])\r\n            }", span="57-62"];
m15_75 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="JobMethodTests.cs", label="Entry HangFire.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", span="152-152"];
m15_76 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", color=green, community=0, file="JobMethodTests.cs", label="0: var serializedData = new InvocationData\r\n            {\r\n                Type = typeof (TestJob).AssemblyQualifiedName\r\n            }", span="154-157"];
m15_77 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", color=green, community=0, file="JobMethodTests.cs", label="1: var method = JobMethod.Deserialize(serializedData)", span="159-159"];
m15_78 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="JobMethodTests.cs", label="Assert.AreEqual(typeof(TestJob), method.Type)", span="160-160"];
m15_79 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="JobMethodTests.cs", label="Assert.AreEqual(typeof(TestJob).GetMethod(''Perform''), method.Method)", span="161-161"];
m15_80 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="JobMethodTests.cs", label="Assert.IsTrue(method.OldFormat)", span="162-162"];
m15_81 [cluster="HangFire.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="JobMethodTests.cs", label="Exit HangFire.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", span="152-152"];
m15_83 [cluster="HangFire.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", file="JobMethodTests.cs", label="Entry HangFire.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", span="166-166"];
m15_84 [cluster="HangFire.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", color=green, community=0, file="JobMethodTests.cs", label="1: var serializedData = new InvocationData\r\n            {\r\n                Type = typeof (TestJob).AssemblyQualifiedName\r\n            }", span="168-171"];
m15_85 [cluster="HangFire.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", file="JobMethodTests.cs", label="JobMethod.Deserialize(serializedData)", span="173-173"];
m15_86 [cluster="HangFire.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", file="JobMethodTests.cs", label="Assert.IsNull(serializedData.Method)", span="174-174"];
m15_87 [cluster="HangFire.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", file="JobMethodTests.cs", label="Exit HangFire.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", span="166-166"];
m15_65 [cluster="HangFire.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="JobMethodTests.cs", label="Assert.AreEqual(1, nonCachedAttributes.Length)", span="135-135"];
m15_25 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", color=green, community=0, file="JobMethodTests.cs", label="1: Entry HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", span="12-12"];
m15_67 [cluster="HangFire.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="JobMethodTests.cs", label="HangFire.Client.JobClient", span=""];
m15_68 [cluster="HangFire.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="JobMethodTests.cs", label="Assert.IsInstanceOfType(cachedAttributes[0], typeof(TestMethodAttribute))", span="139-139"];
m15_69 [cluster="HangFire.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="JobMethodTests.cs", label="Exit HangFire.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", span="129-129"];
m16_40 [cluster="Unk.EnqueueItemOnList", file="JobSteps.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m16_5 [cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenTheJob(string)", span="24-24"];
m16_6 [cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs", label="Given(String.Format(''the '{0}' job of the '{1}' type'', jobId, DefaultJobType))", span="26-26"];
m16_7 [cluster="HangFire.Tests.JobSteps.GivenTheJob(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenTheJob(string)", span="24-24"];
m16_0 [cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenAJob()", span="18-18"];
m16_1 [cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs", label="Given(String.Format(''a job of the '{0}' type'', DefaultJobType.AssemblyQualifiedName))", span="20-20"];
m16_2 [cluster="HangFire.Tests.JobSteps.GivenAJob()", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenAJob()", span="18-18"];
m16_17 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheTypeWithTheFollowingArguments(string, Table)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenAJobOfTheTypeWithTheFollowingArguments(string, Table)", span="42-42"];
m16_18 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheTypeWithTheFollowingArguments(string, Table)", file="JobSteps.cs", label="GivenTheJobOfTheTypeWithTheFollowingArguments(JobSteps.DefaultJobId, type, args)", span="44-44"];
m16_19 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheTypeWithTheFollowingArguments(string, Table)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenAJobOfTheTypeWithTheFollowingArguments(string, Table)", span="42-42"];
m16_29 [cluster="Unk.SetRangeInHash", file="JobSteps.cs", label="Entry Unk.SetRangeInHash", span=""];
m16_8 [cluster="string.Format(string, object, object)", file="JobSteps.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m16_27 [cluster="Unk.ToDictionary", file="JobSteps.cs", label="Entry Unk.ToDictionary", span=""];
m16_46 [cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs", label="Redis.Client.SetEntryInHash(\r\n                String.Format(''hangfire:job:{0}'', DefaultJobId),\r\n                ''State'',\r\n                state)", span="94-97"];
m16_45 [cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenItsStateIs(string)", span="92-92"];
m16_47 [cluster="HangFire.Tests.JobSteps.GivenItsStateIs(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenItsStateIs(string)", span="92-92"];
m16_25 [cluster="Unk.SetEntryInHash", file="JobSteps.cs", label="Entry Unk.SetEntryInHash", span=""];
m16_3 [cluster="string.Format(string, object)", file="JobSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m16_12 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", span="36-36"];
m16_13 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs", label="GivenTheJobOfTheTypeWithTheFollowingArguments(jobId, type, new Table(''Name'', ''Value''))", span="38-38"];
m16_14 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenTheJobOfTheType(string, string)", span="36-36"];
m16_9 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", span="30-30"];
m16_10 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs", label="Given(String.Format(''the '{0}' job of the '{1}' type'', DefaultJobId, type))", span="32-32"];
m16_11 [cluster="HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenAJobOfTheType(string)", span="30-30"];
m16_15 [cluster="Table.cstr", file="JobSteps.cs", label="Entry Table.cstr", span=""];
m16_53 [cluster="Unk.AreEqual", file="JobSteps.cs", label="Entry Unk.AreEqual", span=""];
m16_26 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobSteps.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m16_24 [cluster="Unk.AddItemToList", file="JobSteps.cs", label="Entry Unk.AddItemToList", span=""];
m16_41 [cluster="HangFire.Tests.JobSteps.GivenAJobWithEmptyState()", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenAJobWithEmptyState()", span="79-79"];
m16_42 [cluster="HangFire.Tests.JobSteps.GivenAJobWithEmptyState()", file="JobSteps.cs", label="Redis.Client.SetRangeInHash(\r\n                String.Format(''hangfire:job:{0}'', DefaultJobId),\r\n                new Dictionary<string, string>\r\n                    {\r\n                        { ''Type'', typeof(TestJob).AssemblyQualifiedName },\r\n                        { ''Args'', JobHelper.ToJson(new Dictionary<string, string>()) },\r\n                        { ''State'', String.Empty }\r\n                    })", span="81-88"];
m16_43 [cluster="HangFire.Tests.JobSteps.GivenAJobWithEmptyState()", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenAJobWithEmptyState()", span="79-79"];
m16_28 [cluster="Unk.ToJson", file="JobSteps.cs", label="Entry Unk.ToJson", span=""];
m16_33 [cluster="lambda expression", file="JobSteps.cs", label="Entry lambda expression", span="64-64"];
m16_30 [cluster="lambda expression", file="JobSteps.cs", label="Entry lambda expression", span="64-64"];
m16_31 [cluster="lambda expression", file="JobSteps.cs", label="x[''Name'']", span="64-64"];
m16_32 [cluster="lambda expression", file="JobSteps.cs", label="Exit lambda expression", span="64-64"];
m16_34 [cluster="lambda expression", file="JobSteps.cs", label="x[''Value'']", span="64-64"];
m16_35 [cluster="lambda expression", file="JobSteps.cs", label="Exit lambda expression", span="64-64"];
m16_21 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheTypeWithTheFollowingArguments(string, string, Table)", file="JobSteps.cs", label="Redis.Client.SetEntryInHash(\r\n                String.Format(''hangfire:job:{0}:state'', jobId),\r\n                ''StateProp'',\r\n                ''SomeValue'')", span="54-57"];
m16_16 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheTypeWithTheFollowingArguments(string, string, Table)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenTheJobOfTheTypeWithTheFollowingArguments(string, string, Table)", span="48-48"];
m16_20 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheTypeWithTheFollowingArguments(string, string, Table)", file="JobSteps.cs", label="Redis.Client.AddItemToList(\r\n                String.Format(''hangfire:job:{0}:history'', jobId),\r\n                '''')", span="50-52"];
m16_22 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheTypeWithTheFollowingArguments(string, string, Table)", file="JobSteps.cs", label="Redis.Client.SetRangeInHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                new Dictionary<string, string>\r\n                    {\r\n                        { ''Type'', type },\r\n                        { ''Args'', JobHelper.ToJson(args.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])) },\r\n                        { ''State'', EnqueuedState.Name },\r\n                    })", span="59-66"];
m16_23 [cluster="HangFire.Tests.JobSteps.GivenTheJobOfTheTypeWithTheFollowingArguments(string, string, Table)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenTheJobOfTheTypeWithTheFollowingArguments(string, string, Table)", span="48-48"];
m16_4 [cluster="Unk.Given", file="JobSteps.cs", label="Entry Unk.Given", span=""];
m16_44 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="JobSteps.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m16_52 [cluster="Unk.GetValueFromHash", file="JobSteps.cs", label="Entry Unk.GetValueFromHash", span=""];
m16_36 [cluster="HangFire.Tests.JobSteps.GivenAnEnqueuedCustomJobWithTheFollowingArguments(Table)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.GivenAnEnqueuedCustomJobWithTheFollowingArguments(Table)", span="70-70"];
m16_37 [cluster="HangFire.Tests.JobSteps.GivenAnEnqueuedCustomJobWithTheFollowingArguments(Table)", file="JobSteps.cs", label="GivenAJobOfTheTypeWithTheFollowingArguments(typeof(CustomJob).AssemblyQualifiedName, table)", span="72-72"];
m16_38 [cluster="HangFire.Tests.JobSteps.GivenAnEnqueuedCustomJobWithTheFollowingArguments(Table)", file="JobSteps.cs", label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', QueueSteps.DefaultQueue),\r\n                DefaultJobId)", span="73-75"];
m16_39 [cluster="HangFire.Tests.JobSteps.GivenAnEnqueuedCustomJobWithTheFollowingArguments(Table)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.GivenAnEnqueuedCustomJobWithTheFollowingArguments(Table)", span="70-70"];
m16_48 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs", label="Entry HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", span="104-104"];
m16_49 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs", label="var jobState = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', DefaultJobId),\r\n                ''State'')", span="106-108"];
m16_50 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", color=red, community=0, file="JobSteps.cs", label="0: Assert.AreEqual(state, jobState)", span="110-110"];
m16_51 [cluster="HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", file="JobSteps.cs", label="Exit HangFire.Tests.JobSteps.ThenTheJobMovedToTheState(string)", span="104-104"];
m16_54 [file="JobSteps.cs", label="HangFire.Tests.JobSteps", span=""];
m17_20 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="OldClient.feature.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m17_29 [cluster="Unk.IncrementValue", file="OldClient.feature.cs", label="Entry Unk.IncrementValue", span=""];
m17_25 [cluster="Unk.Commit", file="OldClient.feature.cs", label="Entry Unk.Commit", span=""];
m17_23 [cluster="System.DateTime.ToString(string)", file="OldClient.feature.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m17_24 [cluster="string.Format(string, object)", file="OldClient.feature.cs", label="Entry string.Format(string, object)", span="0-0"];
m17_22 [cluster="Unk.QueueCommand", file="OldClient.feature.cs", label="Entry Unk.QueueCommand", span=""];
m17_37 [cluster="Unk.ExpireEntryIn", file="OldClient.feature.cs", label="Entry Unk.ExpireEntryIn", span=""];
m17_16 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(hourlyFailedKey, TimeSpan.FromDays(1)))", span="38-38"];
m17_12 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", color=green, community=0, file="OldClient.feature.cs", label="1: transaction.QueueCommand(x => x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd''))))", span="28-29"];
m17_5 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="var transaction = redis.CreateTransaction()", span="13-13"];
m17_11 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="state.StateName == FailedState.Name", span="26-26"];
m17_13 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", color=green, community=0, file="OldClient.feature.cs", label="0: transaction.QueueCommand(x => x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-ddTHH-mm''))))", span="31-32"];
m17_14 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="var hourlyFailedKey = String.Format(\r\n                        ''hangfire:stats:failed:{0}'',\r\n                        DateTime.UtcNow.ToString(''yyyy-MM-dd-HH''))", span="34-36"];
m17_8 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", color=green, community=0, file="OldClient.feature.cs", label="0: var hourlySucceededKey = String.Format(\r\n                        ''hangfire:stats:succeeded:{0}'',\r\n                        DateTime.UtcNow.ToString(''yyyy-MM-dd-HH''))", span="20-22"];
m17_7 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="transaction.QueueCommand(x => x.IncrementValue(\r\n                        String.Format(''hangfire:stats:succeeded:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd''))))", span="17-18"];
m17_9 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="transaction.QueueCommand(x => x.IncrementValue(hourlySucceededKey))", span="23-23"];
m17_10 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(hourlySucceededKey, TimeSpan.FromDays(1)))", span="24-24"];
m17_0 [cluster="HangFire.IBackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.State)", file="OldClient.feature.cs", label="Entry HangFire.IBackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.State)", span="41-41"];
m17_3 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="state == null", span="11-11"];
m17_6 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="state.StateName == SucceededState.Name", span="15-15"];
m17_15 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="transaction.QueueCommand(x => x.IncrementValue(hourlyFailedKey))", span="37-37"];
m17_17 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="transaction.Commit()", span="41-41"];
m17_1 [cluster="HangFire.IBackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.State)", file="OldClient.feature.cs", label="Exit HangFire.IBackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.State)", span="41-41"];
m17_18 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="return state;", span="44-44"];
m17_4 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="throw new ArgumentNullException(''state'');", span="11-11"];
m17_2 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="throw new ArgumentNullException(''redis'');", span="10-10"];
m17_19 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="OldClient.feature.cs", label="Exit HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", span="8-8"];
m17_36 [cluster="System.TimeSpan.FromDays(double)", file="OldClient.feature.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m17_47 [cluster="lambda expression", file="OldClient.feature.cs", label="Entry lambda expression", span="38-38"];
m17_38 [cluster="lambda expression", file="OldClient.feature.cs", label="Entry lambda expression", span="28-29"];
m17_41 [cluster="lambda expression", file="OldClient.feature.cs", label="Entry lambda expression", span="31-32"];
m17_31 [cluster="lambda expression", file="OldClient.feature.cs", label="x.IncrementValue(hourlySucceededKey)", span="23-23"];
m17_34 [cluster="lambda expression", file="OldClient.feature.cs", label="x.ExpireEntryIn(hourlySucceededKey, TimeSpan.FromDays(1))", span="24-24"];
m17_39 [cluster="lambda expression", color=green, community=0, file="OldClient.feature.cs", label="0: x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd'')))", span="28-29"];
m17_40 [cluster="lambda expression", file="OldClient.feature.cs", label="Exit lambda expression", span="28-29"];
m17_42 [cluster="lambda expression", color=green, community=0, file="OldClient.feature.cs", label="0: x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-ddTHH-mm'')))", span="31-32"];
m17_43 [cluster="lambda expression", file="OldClient.feature.cs", label="Exit lambda expression", span="31-32"];
m17_45 [cluster="lambda expression", file="OldClient.feature.cs", label="x.IncrementValue(hourlyFailedKey)", span="37-37"];
m17_48 [cluster="lambda expression", file="OldClient.feature.cs", label="x.ExpireEntryIn(hourlyFailedKey, TimeSpan.FromDays(1))", span="38-38"];
m17_26 [cluster="lambda expression", file="OldClient.feature.cs", label="Entry lambda expression", span="17-18"];
m17_30 [cluster="lambda expression", file="OldClient.feature.cs", label="Entry lambda expression", span="23-23"];
m17_27 [cluster="lambda expression", file="OldClient.feature.cs", label="x.IncrementValue(\r\n                        String.Format(''hangfire:stats:succeeded:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd'')))", span="17-18"];
m17_32 [cluster="lambda expression", file="OldClient.feature.cs", label="Exit lambda expression", span="23-23"];
m17_33 [cluster="lambda expression", file="OldClient.feature.cs", label="Entry lambda expression", span="24-24"];
m17_35 [cluster="lambda expression", file="OldClient.feature.cs", label="Exit lambda expression", span="24-24"];
m17_44 [cluster="lambda expression", file="OldClient.feature.cs", label="Entry lambda expression", span="37-37"];
m17_46 [cluster="lambda expression", file="OldClient.feature.cs", label="Exit lambda expression", span="37-37"];
m17_49 [cluster="lambda expression", file="OldClient.feature.cs", label="Exit lambda expression", span="38-38"];
m17_28 [cluster="lambda expression", file="OldClient.feature.cs", label="Exit lambda expression", span="17-18"];
m17_21 [cluster="Unk.CreateTransaction", file="OldClient.feature.cs", label="Entry Unk.CreateTransaction", span=""];
m17_50 [file="OldClient.feature.cs", label=hourlySucceededKey, span=""];
m17_51 [file="OldClient.feature.cs", label=hourlyFailedKey, span=""];
m18_29 [cluster="Mock<JobState>.cstr", file="ProcessingState.feature.cs", label="Entry Mock<JobState>.cstr", span=""];
m18_135 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="199-199"];
m18_136 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ProcessingState.feature.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="201-201"];
m18_137 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ProcessingState.feature.cs", label="var timestamp = JobHelper.FromTimestamp((long)score)", span="202-202"];
m18_138 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ProcessingState.feature.cs", label="Assert.IsTrue(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="204-204"];
m18_139 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ProcessingState.feature.cs", label="Assert.IsTrue(timestamp < DateTime.UtcNow.AddSeconds(1))", span="205-205"];
m18_140 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="199-199"];
m18_119 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="174-174"];
m18_120 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="ProcessingState.feature.cs", label="Assert.AreEqual(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="176-176"];
m18_121 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="ProcessingState.feature.cs", label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="177-177"];
m18_122 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="174-174"];
m18_144 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="209-209"];
m18_145 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ProcessingState.feature.cs", label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="211-211"];
m18_146 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ProcessingState.feature.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="212-212"];
m18_147 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ProcessingState.feature.cs", label="var timestamp = JobHelper.FromTimestamp((long) score)", span="213-213"];
m18_148 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ProcessingState.feature.cs", label="Assert.IsTrue(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="215-215"];
m18_149 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ProcessingState.feature.cs", label="Assert.IsTrue(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="216-216"];
m18_150 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="209-209"];
m18_80 [cluster="Unk.AreEqual", file="ProcessingState.feature.cs", label="Entry Unk.AreEqual", span=""];
m18_134 [cluster="Unk.IsFalse", file="ProcessingState.feature.cs", label="Entry Unk.IsFalse", span=""];
m18_118 [cluster="HangFire.Tests.DictionaryAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.DictionaryAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="9-9"];
m18_72 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="160-160"];
m18_85 [cluster="Unk.ForEach", file="ProcessingState.feature.cs", label="Entry Unk.ForEach", span=""];
m18_176 [cluster="Unk.IsNotNull", file="ProcessingState.feature.cs", label="Entry Unk.IsNotNull", span=""];
m18_26 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="ProcessingState.feature.cs", label="_stateMock.Setup(x => x.GetProperties()).Returns(new Dictionary<string, string>())", span="56-56"];
m18_27 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="ProcessingState.feature.cs", label="_state = _stateMock.Object", span="58-58"];
m18_28 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="52-52"];
m18_34 [cluster="lambda expression", color=red, community=0, file="ProcessingState.feature.cs", label="1: x.StateName", span="55-55"];
m18_45 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102"];
m18_151 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="220-220"];
m18_152 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="ProcessingState.feature.cs", label="Assert.IsFalse(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="222-222"];
m18_153 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="220-220"];
m18_30 [cluster="Unk.Setup", file="ProcessingState.feature.cs", label="Entry Unk.Setup", span=""];
m18_32 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", color=green, community=0, file="ProcessingState.feature.cs", label="1: Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m18_31 [cluster="Unk.Returns", file="ProcessingState.feature.cs", label="Entry Unk.Returns", span=""];
m18_33 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Entry lambda expression", span="55-55"];
m18_117 [cluster="HangFire.States.JobState.GetProperties()", file="ProcessingState.feature.cs", label="Entry HangFire.States.JobState.GetProperties()", span="24-24"];
m18_103 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="143-143"];
m18_104 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", color=red, community=0, file="ProcessingState.feature.cs", label="0: var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="145-150"];
m18_105 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="ProcessingState.feature.cs", label="keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.IsTrue(\r\n                    ttl.Seconds == -1,\r\n                    ''TTL for the '{0}' key is '{1}''', x, ttl);\r\n            })", span="152-158"];
m18_106 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="143-143"];
m18_22 [cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m18_102 [cluster="Unk.PopItemFromList", file="ProcessingState.feature.cs", label="Entry Unk.PopItemFromList", span=""];
m18_35 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Exit lambda expression", span="55-55"];
m18_5 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", color=red, community=0, file="ProcessingState.feature.cs", label="0: _failedException = new InvalidOperationException(''Hello'')", span="29-29"];
m18_77 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="102-102"];
m18_78 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="ProcessingState.feature.cs", label="Assert.AreEqual(name, _state.StateName)", span="104-104"];
m18_79 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="102-102"];
m18_10 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="34-34"];
m18_11 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="ProcessingState.feature.cs", label="_state = new ProcessingState(JobSteps.DefaultJobId, ''SomeReason'', ''TestServer'')", span="36-36"];
m18_12 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="34-34"];
m18_0 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="21-21"];
m18_1 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", color=green, community=0, file="ProcessingState.feature.cs", label="1: _state = new SucceededState(JobSteps.DefaultJobId, ''Some reason'')", span="23-23"];
m18_2 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", color=green, community=0, file="ProcessingState.feature.cs", label="0: Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="21-21"];
m18_3 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="ProcessingState.feature.cs", label="Entry HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m18_4 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="27-27"];
m18_18 [cluster="System.DateTime.AddDays(double)", file="ProcessingState.feature.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m18_39 [cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameShouldBeProcessing()", file="ProcessingState.feature.cs", label="this.FeatureBackground()", span="91-91"];
m18_36 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Entry lambda expression", span="56-56"];
m18_37 [cluster="lambda expression", color=green, community=0, file="ProcessingState.feature.cs", label="1: x.GetProperties()", span="56-56"];
m18_38 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Exit lambda expression", span="56-56"];
m18_41 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="ProcessingState.feature.cs", label="Given(String.Format(''a '{0}' state'', state))", span="64-64"];
m18_40 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="62-62"];
m18_42 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="ProcessingState.feature.cs", label="_stateMock.Setup(x => x.GetProperties()).Returns(\r\n                table.Rows.ToDictionary(x => x[''Name''], x => x[''Value'']))", span="65-66"];
m18_13 [cluster="HangFire.States.ProcessingState.ProcessingState(string, string, string)", file="ProcessingState.feature.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string, string, string)", span="10-10"];
m18_56 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyIt()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIApplyIt()", span="70-70"];
m18_57 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", span="129-129"];
m18_58 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying, it should add the job to the processing set'', ((string[])(null)))", span="131-131"];
m18_59 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="133-133"];
m18_60 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="this.FeatureBackground()", span="135-135"];
m18_185 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Entry lambda expression", span="263-263"];
m18_47 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="106-106"];
m18_50 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''StartedAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115"];
m18_53 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="this.ScenarioCleanup()", span="122-122"];
m18_48 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="this.FeatureBackground()", span="108-108"];
m18_49 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112"];
m18_51 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''ServerName'',\r\n                        ''TestServer''})", span="116-118"];
m18_52 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="testRunner.Then(''properties table should contain the following items:'', ((string)(null)), table1, ''Then '')", span="120-120"];
m18_54 [cluster="HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102"];
m18_55 [cluster="TechTalk.SpecFlow.Table.cstr", file="ProcessingState.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m18_86 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Entry lambda expression", span="117-123"];
m18_87 [cluster="lambda expression", file="ProcessingState.feature.cs", label="var ttl = Redis.Client.GetTimeToLive(x)", span="119-119"];
m18_88 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Assert.IsTrue(\r\n                        ttl.TotalSeconds > 0,\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl)", span="120-122"];
m18_89 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Exit lambda expression", span="117-123"];
m18_107 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Entry lambda expression", span="152-158"];
m18_108 [cluster="lambda expression", file="ProcessingState.feature.cs", label="var ttl = Redis.Client.GetTimeToLive(x)", span="154-154"];
m18_109 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Assert.IsTrue(\r\n                    ttl.Seconds == -1,\r\n                    ''TTL for the '{0}' key is '{1}''', x, ttl)", span="155-157"];
m18_110 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Exit lambda expression", span="152-158"];
m18_182 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Entry lambda expression", span="263-263"];
m18_183 [cluster="lambda expression", file="ProcessingState.feature.cs", label="x.Apply(It.Is<IRedisTransaction>(y => y != null))", span="263-263"];
m18_184 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Exit lambda expression", span="263-263"];
m18_186 [cluster="lambda expression", file="ProcessingState.feature.cs", label="y != null", span="263-263"];
m18_187 [cluster="lambda expression", file="ProcessingState.feature.cs", label="Exit lambda expression", span="263-263"];
m18_157 [cluster="Unk.SetContainsItem", file="ProcessingState.feature.cs", label="Entry Unk.SetContainsItem", span=""];
m18_17 [cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", span="46-46"];
m18_63 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.And(''processing timestamp should be set to UtcNow'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="141-141"];
m18_6 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", color=red, community=0, file="ProcessingState.feature.cs", label="0: _state = new FailedState(JobSteps.DefaultJobId, ''SomeReason'', _failedException)", span="30-30"];
m18_23 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="52-52"];
m18_24 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="ProcessingState.feature.cs", label="_stateMock = new Mock<JobState>(JobSteps.DefaultJobId, ''SomeReason'')", span="54-54"];
m18_131 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="193-193"];
m18_132 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="ProcessingState.feature.cs", label="Assert.IsFalse(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="195-195"];
m18_133 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="193-193"];
m18_61 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="137-137"];
m18_90 [cluster="Unk.GetTimeToLive", file="ProcessingState.feature.cs", label="Entry Unk.GetTimeToLive", span=""];
m18_142 [cluster="HangFire.JobHelper.FromTimestamp(long)", file="ProcessingState.feature.cs", label="Entry HangFire.JobHelper.FromTimestamp(long)", span="50-50"];
m18_62 [cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs", label="testRunner.Then(''the processing set should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="139-139"];
m18_43 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ProcessingState.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m18_67 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ProcessingState.feature.cs", label="descriptor != null", span="86-86"];
m18_69 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ProcessingState.feature.cs", label="transaction.Commit()", span="91-91"];
m18_68 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ProcessingState.feature.cs", label="descriptor.Unapply(transaction, JobSteps.DefaultJobId)", span="88-88"];
m18_70 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", span="80-80"];
m18_71 [cluster="Unk.GetDescriptor", file="ProcessingState.feature.cs", label="Entry Unk.GetDescriptor", span=""];
m18_73 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="96-96"];
m18_74 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", color=red, community=0, file="ProcessingState.feature.cs", label="0: JobState.Apply(Redis.Client, _state)", span="98-98"];
m18_75 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="96-96"];
m18_175 [cluster="Unk.RemoveStartFromList", file="ProcessingState.feature.cs", label="Entry Unk.RemoveStartFromList", span=""];
m18_158 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="232-232"];
m18_159 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="ProcessingState.feature.cs", label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="234-234"];
m18_160 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="ProcessingState.feature.cs", label="Assert.AreEqual(state, job[''State''])", span="235-235"];
m18_161 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="232-232"];
m18_92 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="127-127"];
m18_93 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="ProcessingState.feature.cs", label="Assert.AreEqual(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="129-131"];
m18_94 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="127-127"];
m18_14 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="40-40"];
m18_16 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="40-40"];
m18_15 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="ProcessingState.feature.cs", label="_state = new ScheduledState(JobSteps.DefaultJobId, ''SomeReason'', DateTime.UtcNow.AddDays(1))", span="42-42"];
m18_8 [cluster="Unk.OnFeatureStart", file="ProcessingState.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m18_25 [cluster="Unk.OnScenarioStart", color=red, community=0, file="ProcessingState.feature.cs", label="1: Entry Unk.OnScenarioStart", span=""];
m18_64 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", span="80-80"];
m18_65 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", color=red, community=0, file="ProcessingState.feature.cs", label="1: var transaction = Redis.Client.CreateTransaction()", span="82-82"];
m18_76 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="ProcessingState.feature.cs", label="HangFire.Tests.States.ProcessingStateFeature", span=""];
m18_44 [cluster="string.Format(string, object)", file="ProcessingState.feature.cs", label="Entry string.Format(string, object)", span="0-0"];
m18_154 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="226-226"];
m18_155 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="ProcessingState.feature.cs", label="Assert.IsTrue(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="228-228"];
m18_156 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="226-226"];
m18_128 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="187-187"];
m18_129 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="ProcessingState.feature.cs", label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="189-189"];
m18_130 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="187-187"];
m18_46 [cluster="Unk.ToDictionary", file="ProcessingState.feature.cs", label="Entry Unk.ToDictionary", span=""];
m18_123 [cluster="Unk.GetSortedSetCount", file="ProcessingState.feature.cs", label="Entry Unk.GetSortedSetCount", span=""];
m18_181 [cluster="Unk.Verify", file="ProcessingState.feature.cs", label="Entry Unk.Verify", span=""];
m18_97 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="135-135"];
m18_98 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="ProcessingState.feature.cs", label="Assert.AreEqual(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="137-137"];
m18_99 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="ProcessingState.feature.cs", label="Assert.AreEqual(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="138-139"];
m18_100 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="135-135"];
m18_125 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="181-181"];
m18_126 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="ProcessingState.feature.cs", label="Assert.AreEqual(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="183-183"];
m18_127 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="181-181"];
m18_166 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="239-239"];
m18_163 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="239-239"];
m18_164 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="241-242"];
m18_165 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="DictionaryAssert.ContainsFollowingItems(table, stateEntry)", span="243-243"];
m18_124 [cluster="Unk.SortedSetContainsItem", file="ProcessingState.feature.cs", label="Entry Unk.SortedSetContainsItem", span=""];
m18_143 [cluster="System.DateTime.AddSeconds(double)", file="ProcessingState.feature.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m18_95 [cluster="string.Format(string, params object[])", file="ProcessingState.feature.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m18_81 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="108-108"];
m18_82 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="ProcessingState.feature.cs", label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="110-115"];
m18_83 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="ProcessingState.feature.cs", label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.IsTrue(\r\n                        ttl.TotalSeconds > 0,\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl);\r\n                })", span="117-123"];
m18_84 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="108-108"];
m18_91 [cluster="Unk.IsTrue", file="ProcessingState.feature.cs", label="Entry Unk.IsTrue", span=""];
m18_162 [cluster="Unk.GetAllEntriesFromHash", file="ProcessingState.feature.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m18_178 [cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", span="260-260"];
m18_179 [cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", file="ProcessingState.feature.cs", label="_stateMock.Verify(\r\n                x => x.Apply(It.Is<IRedisTransaction>(y => y != null)), \r\n                Times.Once)", span="262-264"];
m18_180 [cluster="HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenApplyMethodHasCalled()", span="260-260"];
m18_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="ProcessingState.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m18_174 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="247-247"];
m18_168 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="247-247"];
m18_169 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="249-250"];
m18_173 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="DictionaryAssert.ContainsFollowingItems(table, history)", span="256-256"];
m18_170 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="Assert.IsNotNull(entry)", span="251-251"];
m18_171 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="253-253"];
m18_172 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="Assert.IsNotNull(history, entry)", span="254-254"];
m18_177 [cluster="Unk.>", file="ProcessingState.feature.cs", label="Entry Unk.>", span=""];
m18_141 [cluster="Unk.GetItemScoreInSortedSet", file="ProcessingState.feature.cs", label="Entry Unk.GetItemScoreInSortedSet", span=""];
m18_9 [cluster="HangFire.States.FailedState.FailedState(string, string, System.Exception)", file="ProcessingState.feature.cs", label="Entry HangFire.States.FailedState.FailedState(string, string, System.Exception)", span="10-10"];
m18_101 [cluster="Unk.GetListCount", file="ProcessingState.feature.cs", label="Entry Unk.GetListCount", span=""];
m18_19 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", span="46-46"];
m18_20 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", color=red, community=0, file="ProcessingState.feature.cs", label="0: _state = new EnqueuedState(JobSteps.DefaultJobId, ''SomeReason'', ''test'')", span="48-48"];
m18_21 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", span="46-46"];
m18_66 [cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", color=red, community=0, file="ProcessingState.feature.cs", label="1: var descriptor = JobState.GetDescriptor(_state.StateName)", span="84-84"];
m18_111 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="162-162"];
m18_112 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="ProcessingState.feature.cs", label="Assert.AreEqual(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="164-164"];
m18_113 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="162-162"];
m18_114 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="Entry HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="168-168"];
m18_115 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="DictionaryAssert.ContainsFollowingItems(table, _state.GetProperties())", span="170-170"];
m18_116 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="ProcessingState.feature.cs", label="Exit HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="168-168"];
m18_96 [cluster="Unk.GetValue", file="ProcessingState.feature.cs", label="Entry Unk.GetValue", span=""];
m18_167 [cluster="Unk.ContainsFollowingItems", file="ProcessingState.feature.cs", label="Entry Unk.ContainsFollowingItems", span=""];
m18_188 [file="ProcessingState.feature.cs", label="HangFire.Tests.States.StateSteps", span=""];
m19_11 [cluster="Unk.EnqueueItemOnList", file="QueueSteps.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m19_22 [cluster="string.Format(string, object, object)", file="QueueSteps.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m19_23 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="57-57"];
m19_24 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="QueueSteps.cs", label="Given(String.Format(''the '{0}' job'', jobId))", span="59-59"];
m19_25 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="QueueSteps.cs", label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                jobId)", span="61-63"];
m19_26 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string, string)", span="57-57"];
m19_7 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", span="23-23"];
m19_8 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="QueueSteps.cs", label="Given(String.Format(''a job of the '{0}' type'', typeof(BrokenJob).AssemblyQualifiedName))", span="25-25"];
m19_9 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="QueueSteps.cs", label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', DefaultQueue),\r\n                JobSteps.DefaultJobId)", span="27-29"];
m19_10 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenAnEnqueuedBrokenJob()", span="23-23"];
m19_2 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", span="17-17"];
m19_3 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="QueueSteps.cs", label="Given(String.Format(''a job in the '{0}' queue'', DefaultQueue))", span="19-19"];
m19_4 [cluster="HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenAnEnqueuedJob()", span="17-17"];
m19_5 [cluster="string.Format(string, object)", file="QueueSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m19_50 [cluster="Unk.AreEqual", file="QueueSteps.cs", label="Entry Unk.AreEqual", span=""];
m19_49 [cluster="Unk.GetListCount", file="QueueSteps.cs", label="Entry Unk.GetListCount", span=""];
m19_40 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="89-89"];
m19_41 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="QueueSteps.cs", label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="91-92"];
m19_42 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", color=green, community=0, file="QueueSteps.cs", label="0: CollectionAssert.DoesNotContain(jobIds, JobSteps.DefaultJobId)", span="94-94"];
m19_43 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob(string)", span="89-89"];
m19_15 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="41-41"];
m19_16 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="QueueSteps.cs", label="Given(''a job'')", span="43-43"];
m19_17 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="QueueSteps.cs", label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', queue),\r\n                JobSteps.DefaultJobId)", span="45-47"];
m19_18 [cluster="HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenAJobInTheQueue(string)", span="41-41"];
m19_37 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="83-83"];
m19_38 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="QueueSteps.cs", label="Then(String.Format(''the '{0}' queue should not contain the job'', DefaultQueue))", span="85-85"];
m19_39 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueDoesNotContainTheJob()", span="83-83"];
m19_12 [cluster="HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", span="33-33"];
m19_13 [cluster="HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", file="QueueSteps.cs", label="Redis.Client.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', DefaultQueue),\r\n                jobId)", span="35-37"];
m19_14 [cluster="HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenAnUnexistingEnqueuedJob(string)", span="33-33"];
m19_31 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="73-73"];
m19_32 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="QueueSteps.cs", label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="75-76"];
m19_33 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", color=green, community=0, file="QueueSteps.cs", label="0: CollectionAssert.Contains(jobIds, JobSteps.DefaultJobId)", span="78-78"];
m19_34 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob(string)", span="73-73"];
m19_35 [cluster="Unk.GetAllItemsFromList", file="QueueSteps.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m19_36 [cluster="Unk.Contains", file="QueueSteps.cs", label="Entry Unk.Contains", span=""];
m19_30 [cluster="Unk.Then", file="QueueSteps.cs", label="Entry Unk.Then", span=""];
m19_6 [cluster="Unk.Given", file="QueueSteps.cs", label="Entry Unk.Given", span=""];
m19_44 [cluster="Unk.DoesNotContain", file="QueueSteps.cs", label="Entry Unk.DoesNotContain", span=""];
m19_19 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", span="51-51"];
m19_20 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="QueueSteps.cs", label="Given(String.Format(''the '{0}' job in the '{1}' queue'', jobId, DefaultQueue))", span="53-53"];
m19_21 [cluster="HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenTheJobInTheQueue(string)", span="51-51"];
m19_51 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="106-106"];
m19_52 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="QueueSteps.cs", label="var actualLength = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="108-109"];
m19_53 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", color=red, community=0, file="QueueSteps.cs", label="0: Assert.AreEqual(length, actualLength)", span="110-110"];
m19_54 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueLengthIs(string, int)", span="106-106"];
m19_27 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="67-67"];
m19_28 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="QueueSteps.cs", label="Then(String.Format(''the '{0}' queue should contain the job'', DefaultQueue))", span="69-69"];
m19_29 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueContainsTheJob()", span="67-67"];
m19_45 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="98-98"];
m19_46 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="QueueSteps.cs", label="var length = Redis.Client.GetListCount(\r\n                String.Format(''hangfire:queue:{0}'', queue))", span="100-101"];
m19_47 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", color=green, community=0, file="QueueSteps.cs", label="0: Assert.AreEqual(0, length)", span="102-102"];
m19_48 [cluster="HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.ThenTheQueueIsEmpty(string)", span="98-98"];
m19_0 [cluster="HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", file="QueueSteps.cs", label="Entry HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", span="12-12"];
m19_1 [cluster="HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", file="QueueSteps.cs", label="Exit HangFire.Tests.QueueSteps.GivenAnEmptyQueue()", span="12-12"];
m20_84 [cluster="HangFire.Web.RazorPage.Write(object)", file="ScheduledState.feature.cs", label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76"];
m20_92 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string)", file="ScheduledState.feature.cs", label="Entry HangFire.Web.HtmlHelper.MarkupStackTrace(string)", span="115-115"];
m20_0 [cluster="HangFire.Web.BatchCommandHandler.BatchCommandHandler(System.Action<string>)", file="ScheduledState.feature.cs", label="Entry HangFire.Web.BatchCommandHandler.BatchCommandHandler(System.Action<string>)", span="26-26"];
m20_1 [cluster="HangFire.Web.BatchCommandHandler.BatchCommandHandler(System.Action<string>)", color=green, community=0, file="ScheduledState.feature.cs", label="0: _command = command", span="28-28"];
m20_2 [cluster="HangFire.Web.BatchCommandHandler.BatchCommandHandler(System.Action<string>)", file="ScheduledState.feature.cs", label="Exit HangFire.Web.BatchCommandHandler.BatchCommandHandler(System.Action<string>)", span="26-26"];
m20_3 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="ScheduledState.feature.cs", label="Entry HangFire.Web.BatchCommandHandler.ProcessRequest()", span="31-31"];
m20_4 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", color=green, community=0, file="ScheduledState.feature.cs", label="0: var request = HttpContext.Current.Request", span="33-33"];
m20_5 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="ScheduledState.feature.cs", label="var jobIds = request.Form.GetValues(''jobs[]'')", span="34-34"];
m20_9 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", color=red, community=0, file="ScheduledState.feature.cs", label="0: jobIds", span="42-42"];
m20_6 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="ScheduledState.feature.cs", label="jobIds == null", span="36-36"];
m20_7 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="ScheduledState.feature.cs", label="Response.StatusCode = 422", span="38-38"];
m20_8 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="ScheduledState.feature.cs", label="return;", span="39-39"];
m20_10 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="ScheduledState.feature.cs", label="_command(jobId)", span="44-44"];
m20_12 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", color=red, community=0, file="ScheduledState.feature.cs", label="0: Exit HangFire.Web.BatchCommandHandler.ProcessRequest()", span="31-31"];
m20_19 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(RenderPartial(new PerPageSelector(pager)))", span="158-158"];
m20_74 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(RenderPartial(new Paginator(pager)))", span="506-506"];
m20_11 [cluster="HangFire.Web.BatchCommandHandler.ProcessRequest()", file="ScheduledState.feature.cs", label="Response.StatusCode = (int)HttpStatusCode.NoContent", span="47-47"];
m20_22 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label=failedJobs, span="191-191"];
m20_13 [cluster="Unk.GetValues", file="ScheduledState.feature.cs", label="Entry Unk.GetValues", span=""];
m20_14 [cluster="Unk._command", file="ScheduledState.feature.cs", label="Entry Unk._command", span=""];
m20_15 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="HangFire.Web.BatchCommandHandler", span=""];
m20_16 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(@''''''\r\n                    data-loading-text=''''Enqueueing...''''>\r\n                <span class=''''glyphicon glyphicon-repeat''''></span>\r\n                Requeue jobs\r\n            </button>\r\n\r\n            <button class=''''js-jobs-list-command btn btn-sm btn-default''''\r\n                    data-url='''''')", span="129-136"];
m20_17 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(Request.LinkTo(''/failed/delete''))", span="141-141"];
m20_18 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", color=red, community=0, file="ScheduledState.feature.cs", label="0: WriteLiteral(@''''''\r\n                    data-loading-text=''''Deleting...''''\r\n                    data-confirm=''''Do you really want to DELETE ALL selected jobs?''''>\r\n                <span class=''''glyphicon glyphicon-remove''''></span>\r\n                Delete selected\r\n            </button>\r\n\r\n            '')", span="146-153"];
m20_20 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(@''\r\n        </div>\r\n\r\n        <table class=''''table failed-table''''>\r\n            <thead>\r\n                <tr>\r\n                    <th class=''''min-width''''>\r\n                        <input type=''''checkbox'''' class=''''js-jobs-list-select-all'''' />\r\n                    </th>\r\n                    <th class=''''min-width''''>Id</th>\r\n                    <th>Failed</th>\r\n                    <th>Job</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n'')", span="163-178"];
m20_21 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="var index = 0", span="183-183"];
m20_62 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(index++ == 0 ? ''display: block;'' : null)", span="425-425"];
m20_23 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                    <tr class=\''js-jobs-list-row '')", span="197-197"];
m20_73 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''            </tbody>\r\n        </table>\r\n    </div>\r\n'')", span="494-494"];
m20_24 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(!job.Value.InFailedState ? ''obsolete-data'' : null)", span="202-202"];
m20_25 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral('' '')", span="207-207"];
m20_26 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(job.Value.InFailedState ? ''hover'' : null)", span="212-212"];
m20_27 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\''>\r\n                        <td rowspan=\'''')", span="217-217"];
m20_28 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(job.Value.InFailedState ? ''2'' : ''1'')", span="222-222"];
m20_29 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\''>\r\n'')", span="227-227"];
m20_30 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="job.Value.InFailedState", span="232-232"];
m20_31 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                                <input type=\''checkbox\'' class=\''js-jobs-list-checkb'' +\r\n''ox\'' name=\''jobs[]\'' value=\'''')", span="238-239"];
m20_34 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                        </td>\r\n                        <td class=\''min-width\'' rows'' +\r\n''pan=\'''')", span="259-260"];
m20_32 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(job.Key)", span="244-244"];
m20_35 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(job.Value.InFailedState ? ''2'' : ''1'')", span="265-265"];
m20_33 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\'' />\r\n'')", span="249-249"];
m20_36 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\''>\r\n                            <a href=\'''')", span="270-270"];
m20_37 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="275-275"];
m20_38 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\''>\r\n                                '')", span="280-280"];
m20_39 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(HtmlHelper.JobId(job.Key))", span="285-285"];
m20_40 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\r\n                            </a>\r\n'')", span="290-290"];
m20_41 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="!job.Value.InFailedState", span="295-295"];
m20_42 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                                <span title=\''Job\'s state has been changed while f'' +\r\n''etching data.\'' class=\''glyphicon glyphicon-question-sign\''></span>\r\n'')", span="301-302"];
m20_43 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                        </td>\r\n                        <td class=\''min-width\''>\r\n'')", span="312-312"];
m20_44 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="job.Value.FailedAt.HasValue", span="317-317"];
m20_45 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                                <span data-moment=\'''')", span="323-323"];
m20_50 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                        </td>\r\n                        <td>\r\n                    '' +\r\n''        <div>\r\n                                <a class=\''job-method\'' href=\'''')", span="353-354"];
m20_46 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(JobHelper.ToStringTimestamp(job.Value.FailedAt.Value))", span="328-328"];
m20_51 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(Request.LinkTo(''/job/'' + job.Key))", span="359-359"];
m20_47 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\''>\r\n                                    '')", span="333-333"];
m20_48 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(job.Value.FailedAt)", span="338-338"];
m20_49 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\r\n                                </span>\r\n'')", span="343-343"];
m20_52 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\''>\r\n                                    '')", span="364-364"];
m20_53 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(HtmlHelper.DisplayMethod(job.Value.Job))", span="369-369"];
m20_54 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\r\n                                </a>\r\n                            </div>\r\n'')", span="374-374"];
m20_55 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="!String.IsNullOrEmpty(job.Value.ExceptionMessage)", span="379-379"];
m20_56 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                                <div style=\''color: #888;\''>\r\n                     '' +\r\n''               '')", span="385-386"];
m20_59 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                        </td>\r\n                    </tr>\r\n'')", span="407-407"];
m20_57 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(job.Value.Reason)", span="391-391"];
m20_60 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="job.Value.InFailedState", span="412-412"];
m20_58 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral('' <a class=\''expander\'' href=\''#\''>More&nbsp;details...</a>\r\n                         '' +\r\n''       </div>\r\n'')", span="396-397"];
m20_61 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                        <tr>\r\n                            <td colspan=\''2\'' class=\'''' +\r\n''failed-job-details\''>\r\n                                <div class=\''expandable\'' st'' +\r\n''yle=\'''')", span="418-420"];
m20_64 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(job.Value.ExceptionType)", span="435-435"];
m20_63 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\''>\r\n                                    <h4>'')", span="430-430"];
m20_65 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''</h4>\r\n                                    <p>\r\n                                 '' +\r\n''       '')", span="440-441"];
m20_66 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(job.Value.ExceptionMessage)", span="446-446"];
m20_67 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''\r\n                                    </p>\r\n\r\n'')", span="451-451"];
m20_68 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="!String.IsNullOrEmpty(job.Value.ExceptionDetails)", span="456-456"];
m20_69 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                                        <pre class=\''stack-trace\''>'')", span="462-462"];
m20_72 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''                                </div>\r\n                            </td>\r\n      '' +\r\n''                  </tr>\r\n'')", span="482-483"];
m20_70 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Write(HtmlHelper.MarkupStackTrace(job.Value.ExceptionDetails))", span="467-467"];
m20_71 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="WriteLiteral(''</pre>\r\n'')", span="472-472"];
m20_75 [cluster="HangFire.Web.Pages.FailedJobsPage.Execute()", file="ScheduledState.feature.cs", label="Exit HangFire.Web.Pages.FailedJobsPage.Execute()", span="52-52"];
m20_83 [cluster="HangFire.Storage.IMonitoringApi.FailedJobs(int, int)", file="ScheduledState.feature.cs", label="Entry HangFire.Storage.IMonitoringApi.FailedJobs(int, int)", span="35-35"];
m20_80 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="ScheduledState.feature.cs", label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29"];
m20_78 [cluster="Unk.TryParse", file="ScheduledState.feature.cs", label="Entry Unk.TryParse", span=""];
m20_76 [cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="ScheduledState.feature.cs", label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69"];
m20_86 [cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="ScheduledState.feature.cs", label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="89-89"];
m20_91 [cluster="string.IsNullOrEmpty(string)", file="ScheduledState.feature.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m20_81 [cluster="HangFire.Storage.IMonitoringApi.FailedCount()", file="ScheduledState.feature.cs", label="Entry HangFire.Storage.IMonitoringApi.FailedCount()", span="41-41"];
m20_85 [cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="ScheduledState.feature.cs", label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6"];
m20_89 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ScheduledState.feature.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m20_87 [cluster="Unk.Write", file="ScheduledState.feature.cs", label="Entry Unk.Write", span=""];
m20_88 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", file="ScheduledState.feature.cs", label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="45-45"];
m20_79 [cluster="HangFire.JobStorage.GetMonitoringApi()", file="ScheduledState.feature.cs", label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54"];
m20_77 [cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="ScheduledState.feature.cs", label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4"];
m20_82 [cluster="HttpRequestBase.LinkTo(string)", file="ScheduledState.feature.cs", label="Entry HttpRequestBase.LinkTo(string)", span="24-24"];
m20_90 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", file="ScheduledState.feature.cs", label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", span="30-30"];
m20_93 [cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="ScheduledState.feature.cs", label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6"];
m20_94 [file="ScheduledState.feature.cs", label="HangFire.Web.Pages.FailedJobsPage", span=""];
m21_42 [cluster="Unk.Given", file="SchedulePoller.feature.cs", label="Entry Unk.Given", span=""];
m21_53 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="SchedulePoller.feature.cs", label="testRunner.And(''the schedule should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="113-113"];
m21_29 [cluster="HangFire.Web.Pager.GenerateItems()", file="SchedulePoller.feature.cs", label="TotalPageCount == 0", span="79-79"];
m21_25 [cluster="HangFire.Web.Pager.GenerateItems()", color=red, community=0, file="SchedulePoller.feature.cs", label="1: _endPageIndex = _startPageIndex + PageItemsCount - 1", span="74-74"];
m21_48 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Future jobs should not be enqueued'', ((string[])(null)))", span="103-103"];
m21_61 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", color=red, community=0, file="SchedulePoller.feature.cs", label="0: testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="132-132"];
m21_66 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="142-142"];
m21_62 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.And(''its state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="134-134"];
m21_63 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="136-136"];
m21_65 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.And(''the queue should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="140-140"];
m21_64 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.Then(''the job should be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="138-138"];
m21_67 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.PollerShouldEnqueueOnlyJobsInTheScheduledState()", span="126-126"];
m21_10 [cluster="HangFire.Web.Pager.PageUrl(int)", file="SchedulePoller.feature.cs", label="Entry HangFire.Web.Pager.PageUrl(int)", span="51-51"];
m21_11 [cluster="HangFire.Web.Pager.PageUrl(int)", color=red, community=0, file="SchedulePoller.feature.cs", label="0: page < 1 || page > TotalPageCount", span="53-53"];
m21_13 [cluster="HangFire.Web.Pager.PageUrl(int)", file="SchedulePoller.feature.cs", label="return BasePageUrl + ''?from='' + ((page - 1) * RecordsPerPage) + ''&count='' + RecordsPerPage;", span="55-55"];
m21_12 [cluster="HangFire.Web.Pager.PageUrl(int)", color=red, community=0, file="SchedulePoller.feature.cs", label="1: return ''#'';", span="53-53"];
m21_14 [cluster="HangFire.Tests.Server.SchedulePollerFeature.TestInitialize()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.TestInitialize()", span="47-47"];
m21_0 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="SchedulePoller.feature.cs", label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29"];
m21_1 [cluster="HangFire.Web.Pager.Pager(int, int, long)", color=green, community=0, file="SchedulePoller.feature.cs", label="0: FromRecord = from >= 0 ? from : 0", span="31-31"];
m21_2 [cluster="HangFire.Web.Pager.Pager(int, int, long)", color=green, community=0, file="SchedulePoller.feature.cs", label="1: RecordsPerPage = perPage > 0 ? perPage : DefaultRecordsPerPage", span="32-32"];
m21_3 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="SchedulePoller.feature.cs", label="TotalRecordCount = total", span="33-33"];
m21_4 [cluster="HangFire.Web.Pager.Pager(int, int, long)", file="SchedulePoller.feature.cs", label="CurrentPage = FromRecord / RecordsPerPage + 1", span="34-34"];
m21_45 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SchedulePoller.feature.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m21_5 [cluster="Unk.GetTestRunner", file="SchedulePoller.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m21_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SchedulePoller.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m21_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SchedulePoller.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m21_46 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="Entry HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="112-112"];
m21_16 [cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", file="SchedulePoller.feature.cs", label="perPage <= 0", span="60-60"];
m21_15 [cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", file="SchedulePoller.feature.cs", label="Entry HangFire.Web.Pager.RecordsPerPageUrl(int)", span="58-58"];
m21_17 [cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", file="SchedulePoller.feature.cs", label="return ''#'';", span="60-60"];
m21_26 [cluster="HangFire.Web.Pager.GenerateItems()", color=red, community=0, file="SchedulePoller.feature.cs", label="2: _endPageIndex > TotalPageCount", span="75-75"];
m21_27 [cluster="HangFire.Web.Pager.GenerateItems()", color=green, community=0, file="SchedulePoller.feature.cs", label="1: _endPageIndex = TotalPageCount", span="76-76"];
m21_28 [cluster="HangFire.Web.Pager.GenerateItems()", file="SchedulePoller.feature.cs", label="var pagerItems = new List<Item>()", span="78-78"];
m21_49 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsShouldNotBeEnqueued()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="105-105"];
m21_74 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", color=red, community=0, file="SchedulePoller.feature.cs", label="0: Exit HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", span="149-149"];
m21_75 [cluster="HangFire.Web.Pager.AddNext(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", color=red, community=0, file="SchedulePoller.feature.cs", label="0: HangFire.Tests.Server.SchedulePollerFeature", span=""];
m21_76 [cluster="HangFire.Web.Pager.AddNext(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="Exit HangFire.Web.Pager.AddNext(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="143-143"];
m21_18 [cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", file="SchedulePoller.feature.cs", label="return BasePageUrl + ''?from=0&count='' + perPage;", span="61-61"];
m21_19 [cluster="HangFire.Web.Pager.RecordsPerPageUrl(int)", file="SchedulePoller.feature.cs", label="Exit HangFire.Web.Pager.RecordsPerPageUrl(int)", span="58-58"];
m21_44 [cluster="Unk.Then", file="SchedulePoller.feature.cs", label="Entry Unk.Then", span=""];
m21_77 [cluster="HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", file="SchedulePoller.feature.cs", label="PageIndex = pageIndex", span="153-153"];
m21_78 [cluster="HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", file="SchedulePoller.feature.cs", label="Disabled = disabled", span="154-154"];
m21_79 [cluster="HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", file="SchedulePoller.feature.cs", label="Type = type", span="155-155"];
m21_80 [cluster="HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", file="SchedulePoller.feature.cs", label="Exit HangFire.Web.Pager.Item.Item(int, bool, HangFire.Web.Pager.ItemType)", span="151-151"];
m21_43 [cluster="HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="Entry HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="106-106"];
m21_58 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="var item = new Item(index, false, ItemType.MorePage)", span="118-118"];
m21_60 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="Exit HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="112-112"];
m21_59 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="results.Add(item)", span="119-119"];
m21_9 [cluster="HangFire.Web.Pager.GenerateItems()", file="SchedulePoller.feature.cs", label="Entry HangFire.Web.Pager.GenerateItems()", span="64-64"];
m21_20 [cluster="HangFire.Web.Pager.GenerateItems()", file="SchedulePoller.feature.cs", label="_startPageIndex = CurrentPage - (PageItemsCount / 2)", span="67-67"];
m21_21 [cluster="HangFire.Web.Pager.GenerateItems()", file="SchedulePoller.feature.cs", label="_startPageIndex + PageItemsCount > TotalPageCount", span="68-68"];
m21_22 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m21_23 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="64-64"];
m21_24 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m21_30 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", span="76-76"];
m21_31 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", color=green, community=0, file="SchedulePoller.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Scheduled jobs should be enqueued on their actual queues'', ((string[])(null)))", span="78-78"];
m21_33 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="testRunner.Given(''a scheduled job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="82-82"];
m21_34 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="84-84"];
m21_35 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="testRunner.Then(''the job should be in the Enqueued state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="86-86"];
m21_36 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="testRunner.And(''the schedule should not contain it anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="88-88"];
m21_38 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", color=red, community=0, file="SchedulePoller.feature.cs", label="0: testRunner.And(''schedule poller should return \'true\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="92-92"];
m21_39 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="94-94"];
m21_40 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", span="76-76"];
m21_32 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="80-80"];
m21_37 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScheduledJobsShouldBeEnqueuedOnTheirActualQueues()", color=red, community=0, file="SchedulePoller.feature.cs", label="1: testRunner.But(''the queue should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="90-90"];
m21_41 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SchedulePoller.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m21_47 [cluster="HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="Entry HangFire.Web.Pager.AddPageNumbers(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="134-134"];
m21_56 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="index < 1", span="117-117"];
m21_55 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="var index = _startPageIndex - 1", span="116-116"];
m21_50 [cluster="HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="var item = new Item(CurrentPage - 1, CurrentPage == 1, ItemType.PrevPage)", span="108-108"];
m21_54 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="_startPageIndex > 2", span="114-114"];
m21_51 [cluster="HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="results.Add(item)", span="109-109"];
m21_52 [cluster="HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="Exit HangFire.Web.Pager.AddPrevious(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", span="106-106"];
m21_57 [cluster="HangFire.Web.Pager.AddMoreBefore(System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>)", file="SchedulePoller.feature.cs", label="index = 1", span="117-117"];
m21_68 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", span="149-149"];
m21_71 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="155-155"];
m21_69 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Should return false when there are no jobs in the schedule'', ((string[])(null)))", span="151-151"];
m21_70 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="153-153"];
m21_72 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="testRunner.Then(''schedule poller should return \'false\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="157-157"];
m21_73 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ShouldReturnFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="159-159"];
m21_8 [cluster="System.Math.Ceiling(double)", file="SchedulePoller.feature.cs", label="Entry System.Math.Ceiling(double)", span="0-0"];
m21_81 [file="SchedulePoller.feature.cs", label="HangFire.Web.Pager", span=""];
m21_82 [file="SchedulePoller.feature.cs", label="HangFire.Web.Pager.Item", span=""];
m22_28 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleContainsTheJob()", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.ThenTheScheduleContainsTheJob()", span="56-56"];
m22_29 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleContainsTheJob()", color=red, community=1, file="SchedulePollerSteps.cs", label="0: Assert.IsTrue(Redis.Client.SortedSetContainsItem(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId))", span="58-60"];
m22_30 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleContainsTheJob()", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.ThenTheScheduleContainsTheJob()", span="56-56"];
m22_23 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleDoesNotContainItAnymore()", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.ThenTheScheduleDoesNotContainItAnymore()", span="48-48"];
m22_24 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleDoesNotContainItAnymore()", color=red, community=1, file="SchedulePollerSteps.cs", label="0: Assert.IsFalse(Redis.Client.SortedSetContainsItem(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId))", span="50-52"];
m22_25 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleDoesNotContainItAnymore()", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.ThenTheScheduleDoesNotContainItAnymore()", span="48-48"];
m22_5 [cluster="Unk.Given", file="SchedulePollerSteps.cs", label="Entry Unk.Given", span=""];
m22_20 [cluster="HangFire.Server.Components.SchedulePoller.SchedulePoller(HangFire.JobStorage, System.TimeSpan)", file="SchedulePollerSteps.cs", label="Entry HangFire.Server.Components.SchedulePoller.SchedulePoller(HangFire.JobStorage, System.TimeSpan)", span="34-34"];
m22_15 [cluster="System.DateTime.AddHours(double)", file="SchedulePollerSteps.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m22_7 [cluster="System.DateTime.AddMinutes(double)", file="SchedulePollerSteps.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m22_26 [cluster="Unk.SortedSetContainsItem", file="SchedulePollerSteps.cs", label="Entry Unk.SortedSetContainsItem", span=""];
m22_8 [cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="SchedulePollerSteps.cs", label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="35-35"];
m22_0 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", span="17-17"];
m22_1 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerSteps.cs", label="Given(''a job'')", span="19-19"];
m22_2 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerSteps.cs", label="And(''its state is Scheduled'')", span="20-20"];
m22_3 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerSteps.cs", label="Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddMinutes(-1)))", span="22-25"];
m22_4 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", span="17-17"];
m22_21 [cluster="System.TimeSpan.FromSeconds(double)", file="SchedulePollerSteps.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m22_9 [cluster="Unk.AddItemToSortedSet", file="SchedulePollerSteps.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m22_27 [cluster="Unk.IsFalse", file="SchedulePollerSteps.cs", label="Entry Unk.IsFalse", span=""];
m22_31 [cluster="Unk.IsTrue", file="SchedulePollerSteps.cs", label="Entry Unk.IsTrue", span=""];
m22_32 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheSchedulePollerReturns(bool)", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.ThenTheSchedulePollerReturns(bool)", span="64-64"];
m22_33 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheSchedulePollerReturns(bool)", color=red, community=0, file="SchedulePollerSteps.cs", label="0: Assert.AreEqual(result, _pollerResult)", span="66-66"];
m22_34 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheSchedulePollerReturns(bool)", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.ThenTheSchedulePollerReturns(bool)", span="64-64"];
m22_22 [cluster="HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", file="SchedulePollerSteps.cs", label="Entry HangFire.Server.Components.SchedulePoller.EnqueueNextScheduledJob()", span="40-40"];
m22_35 [cluster="Unk.AreEqual", file="SchedulePollerSteps.cs", label="Entry Unk.AreEqual", span=""];
m22_16 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", span="41-41"];
m22_17 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerSteps.cs", label="var poller = new SchedulePoller(Redis.Storage, TimeSpan.FromSeconds(15))", span="43-43"];
m22_18 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerSteps.cs", label="_pollerResult = poller.EnqueueNextScheduledJob()", span="44-44"];
m22_19 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", span="41-41"];
m22_6 [cluster="Unk.And", file="SchedulePollerSteps.cs", label="Entry Unk.And", span=""];
m22_10 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", span="29-29"];
m22_11 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerSteps.cs", label="Given(''a job'')", span="31-31"];
m22_12 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerSteps.cs", label="And(''its state is Scheduled'')", span="32-32"];
m22_13 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerSteps.cs", label="Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddHours(1)))", span="34-37"];
m22_14 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", span="29-29"];
m22_36 [file="SchedulePollerSteps.cs", label="HangFire.Tests.SchedulePollerSteps", span=""];
m23_6 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="Server.feature.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m23_8 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Server.feature.cs", label="Entry HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54"];
m23_9 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Server.feature.cs", label="transaction.IncrementCounter(''stats:succeeded'')", span="56-56"];
m23_10 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Server.feature.cs", label="Exit HangFire.States.SucceededState.Handler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54"];
m23_11 [cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="Server.feature.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="33-33"];
m23_3 [cluster="HangFire.States.SucceededState.SerializeData()", file="Server.feature.cs", label="Entry HangFire.States.SucceededState.SerializeData()", span="44-44"];
m23_4 [cluster="HangFire.States.SucceededState.SerializeData()", color=red, community=0, file="Server.feature.cs", label="0: return new Dictionary<string, string>\r\n            {\r\n                { ''SucceededAt'',  JobHelper.ToStringTimestamp(SucceededAt)}\r\n            };", span="46-49"];
m23_5 [cluster="HangFire.States.SucceededState.SerializeData()", file="Server.feature.cs", label="Exit HangFire.States.SucceededState.SerializeData()", span="44-44"];
m23_15 [cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="Server.feature.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="35-35"];
m23_0 [cluster="HangFire.States.SucceededState.SucceededState()", file="Server.feature.cs", label="Entry HangFire.States.SucceededState.SucceededState()", span="27-27"];
m23_1 [cluster="HangFire.States.SucceededState.SucceededState()", color=red, community=0, file="Server.feature.cs", label="1: SucceededAt = DateTime.UtcNow", span="29-29"];
m23_2 [cluster="HangFire.States.SucceededState.SucceededState()", file="Server.feature.cs", label="Exit HangFire.States.SucceededState.SucceededState()", span="27-27"];
m23_7 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="Server.feature.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m23_12 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Server.feature.cs", label="Entry HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="59-59"];
m23_13 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Server.feature.cs", label="transaction.DecrementCounter(''stats:succeeded'')", span="61-61"];
m23_14 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="Server.feature.cs", label="Exit HangFire.States.SucceededState.Handler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="59-59"];
m23_16 [file="Server.feature.cs", label="HangFire.States.SucceededState", span=""];
m24_5 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="ServerFilters.feature.cs", label="Assert.True(options.ShutdownTimeout > TimeSpan.Zero)", span="16-16"];
m24_82 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153"];
m24_83 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="ServerFilters.feature.cs", label="AddToSet(key, value, 0.0)", span="155-155"];
m24_84 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153"];
m24_98 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
m24_99 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="ServerFilters.feature.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value)'',\r\n                new { key, value }))", span="181-183"];
m24_100 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="179-179"];
m24_9 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", color=red, community=0, file="ServerFilters.feature.cs", label="0: var transaction = new TransactionScope(\r\n                TransactionScopeOption.Required,\r\n                new TransactionOptions { IsolationLevel = IsolationLevel.Serializable })", span="47-49"];
m24_85 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158"];
m24_86 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="ServerFilters.feature.cs", label="string addSql = @''\r\nmerge HangFire.[Set] as Target\r\nusing (VALUES (@key, @value, @score)) as Source ([Key], Value, Score)\r\non Target.[Key] = Source.[Key] and Target.Value = Source.Value\r\nwhen matched then update set Score = Source.Score\r\nwhen not matched then insert ([Key], Value, Score) values (Source.[Key], Source.Value, Source.Score);''", span="160-165"];
m24_87 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", color=red, community=0, file="ServerFilters.feature.cs", label="0: QueueCommand(x => x.Execute(\r\n                addSql,\r\n                new { key, value, score }))", span="167-169"];
m24_88 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158"];
m24_8 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="45-45"];
m24_47 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", color=green, community=0, file="ServerFilters.feature.cs", label="1: Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", span="96-96"];
m24_48 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="102-111"];
m24_64 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="132-132"];
m24_65 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", color=red, community=0, file="ServerFilters.feature.cs", label="0: QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="134-136"];
m24_66 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="132-132"];
m24_119 [cluster="System.Collections.Generic.Queue<T>.Enqueue(T)", file="ServerFilters.feature.cs", label="Entry System.Collections.Generic.Queue<T>.Enqueue(T)", span="0-0"];
m24_15 [cluster="TransactionScope.cstr", file="ServerFilters.feature.cs", label="Entry TransactionScope.cstr", span=""];
m24_44 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="62-62"];
m24_45 [cluster="lambda expression", file="ServerFilters.feature.cs", label="options.Queues = new string[0]", span="62-62"];
m24_46 [cluster="lambda expression", color=red, community=0, file="ServerFilters.feature.cs", label="4: Exit lambda expression", span="62-62"];
m24_110 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="193-193"];
m24_111 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", color=red, community=0, file="ServerFilters.feature.cs", label="0: string trimSql = @''\r\nwith cte as (\r\nselect row_number() over (order by Id desc) as row_num, [Key] from HangFire.List)\r\ndelete from cte where row_num not between @start and @end and [Key] = @key''", span="195-198"];
m24_112 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="ServerFilters.feature.cs", label="QueueCommand(x => x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 }))", span="200-202"];
m24_113 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="193-193"];
m24_23 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="205-205"];
m24_117 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="ServerFilters.feature.cs", label="_commandQueue.Enqueue(action)", span="207-207"];
m24_118 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="205-205"];
m24_42 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="ServerFilters.feature.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.Queues = new string[0])", span="61-62"];
m24_17 [cluster="lambda expression", file="ServerFilters.feature.cs", label="options.ServerName = null", span="26-26"];
m24_18 [cluster="System.Action<T>.Invoke(T)", file="ServerFilters.feature.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m24_35 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="ServerFilters.feature.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => options.Queues = null)", span="52-53"];
m24_36 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="ServerFilters.feature.cs", label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", span="48-48"];
m24_37 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="ServerFilters.feature.cs", label="QueueCommand(x => x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                }))", span="83-93"];
m24_38 [cluster="lambda expression", file="ServerFilters.feature.cs", label="options.Queues = null", span="53-53"];
m24_70 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139"];
m24_71 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="ServerFilters.feature.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 }))", span="141-143"];
m24_72 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139"];
m24_76 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="146-146"];
m24_77 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="ServerFilters.feature.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="148-150"];
m24_78 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="146-146"];
m24_11 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="ServerFilters.feature.cs", label=_commandQueue, span="53-53"];
m24_12 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", color=red, community=0, file="ServerFilters.feature.cs", label="0: command(_connection)", span="55-55"];
m24_13 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="ServerFilters.feature.cs", label="transaction.Complete()", span="58-58"];
m24_14 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="45-45"];
m24_19 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="ServerFilters.feature.cs", label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", span="30-30"];
m24_27 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="ServerFilters.feature.cs", label="var options = CreateOptions()", span="41-41"];
m24_92 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="172-172"];
m24_93 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="ServerFilters.feature.cs", label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="174-176"];
m24_94 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="172-172"];
m24_20 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", color=green, community=0, file="ServerFilters.feature.cs", label="0: var options = CreateOptions()", span="32-32"];
m24_21 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="ServerFilters.feature.cs", label="Assert.Throws<ArgumentOutOfRangeException>(\r\n                () => options.WorkerCount = 0)", span="34-35"];
m24_22 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="ServerFilters.feature.cs", label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", span="30-30"];
m24_33 [cluster="lambda expression", color=red, community=0, file="ServerFilters.feature.cs", label="0: x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId })", span="71-73"];
m24_34 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Exit lambda expression", span="71-73"];
m24_104 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="186-186"];
m24_105 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="ServerFilters.feature.cs", label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="188-190"];
m24_106 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="186-186"];
m24_10 [cluster="Unk.True", color=red, community=0, file="ServerFilters.feature.cs", label="0: Entry Unk.True", span=""];
m24_16 [cluster="TransactionOptions.cstr", file="ServerFilters.feature.cs", label="Entry TransactionOptions.cstr", span=""];
m24_25 [cluster="lambda expression", file="ServerFilters.feature.cs", label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId })", span="64-66"];
m24_24 [cluster="lambda expression", file="ServerFilters.feature.cs", label="options.WorkerCount = 0", span="35-35"];
m24_26 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="ServerFilters.feature.cs", label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", span="39-39"];
m24_32 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="71-73"];
m24_40 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="ServerFilters.feature.cs", label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="57-57"];
m24_39 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="83-93"];
m24_41 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="ServerFilters.feature.cs", label="var options = CreateOptions()", span="59-59"];
m24_49 [cluster="HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", color=red, community=0, file="ServerFilters.feature.cs", label="1: Entry HangFire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="11-11"];
m24_50 [cluster="lambda expression", file="ServerFilters.feature.cs", label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts", span=""];
m24_56 [cluster="lambda expression", file="ServerFilters.feature.cs", label="x.Execute(\r\n                enqueueJobSql,\r\n                new { jobId = jobId, queue = queue })", span="120-122"];
m24_55 [cluster="lambda expression", file="ServerFilters.feature.cs", label=options, span=""];
m24_57 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Exit lambda expression", span="120-122"];
m24_62 [cluster="lambda expression", file="ServerFilters.feature.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 })", span="127-129"];
m24_61 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="127-129"];
m24_63 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Exit lambda expression", span="127-129"];
m24_68 [cluster="lambda expression", color=red, community=0, file="ServerFilters.feature.cs", label="0: x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="134-136"];
m24_67 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="134-136"];
m24_69 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Exit lambda expression", span="134-136"];
m24_74 [cluster="lambda expression", file="ServerFilters.feature.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 })", span="141-143"];
m24_73 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="141-143"];
m24_75 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Exit lambda expression", span="141-143"];
m24_80 [cluster="lambda expression", file="ServerFilters.feature.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="148-150"];
m24_79 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="148-150"];
m24_81 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Exit lambda expression", span="148-150"];
m24_90 [cluster="lambda expression", color=red, community=0, file="ServerFilters.feature.cs", label="1: x.Execute(\r\n                addSql,\r\n                new { key, value, score })", span="167-169"];
m24_89 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="167-169"];
m24_91 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Exit lambda expression", span="167-169"];
m24_96 [cluster="lambda expression", file="ServerFilters.feature.cs", label="x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="174-176"];
m24_95 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="174-176"];
m24_97 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Exit lambda expression", span="174-176"];
m24_102 [cluster="lambda expression", file="ServerFilters.feature.cs", label="x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value)'',\r\n                new { key, value })", span="181-183"];
m24_101 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="181-183"];
m24_103 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Exit lambda expression", span="181-183"];
m24_108 [cluster="lambda expression", file="ServerFilters.feature.cs", label="x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="188-190"];
m24_107 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="188-190"];
m24_109 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Exit lambda expression", span="188-190"];
m24_115 [cluster="lambda expression", file="ServerFilters.feature.cs", label="x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 })", span="200-202"];
m24_114 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Entry lambda expression", span="200-202"];
m24_116 [cluster="lambda expression", file="ServerFilters.feature.cs", label="Exit lambda expression", span="200-202"];
m24_31 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="69-69"];
m24_28 [cluster="Unk.Execute", file="ServerFilters.feature.cs", label="Entry Unk.Execute", span=""];
m24_29 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="69-69"];
m24_0 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="ServerFilters.feature.cs", label="Entry HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", span="9-9"];
m24_1 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="ServerFilters.feature.cs", label="var options = CreateOptions()", span="11-11"];
m24_3 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", color=red, community=0, file="ServerFilters.feature.cs", label="0: Assert.Equal(Environment.MachineName, options.ServerName)", span="14-14"];
m24_2 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="ServerFilters.feature.cs", label="Assert.Equal(Environment.ProcessorCount * 5, options.WorkerCount)", span="13-13"];
m24_4 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="ServerFilters.feature.cs", label="Assert.Equal(EnqueuedState.DefaultQueue, options.Queues[0])", span="15-15"];
m24_43 [cluster="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="ServerFilters.feature.cs", label="Exit HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="57-57"];
m24_51 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="ServerFilters.feature.cs", label=options, span=""];
m24_52 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="ServerFilters.feature.cs", label=options, span=""];
m24_53 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="ServerFilters.feature.cs", label=options, span=""];
m24_54 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="ServerFilters.feature.cs", label=options, span=""];
m24_58 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125"];
m24_59 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="ServerFilters.feature.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 }))", span="127-129"];
m24_60 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125"];
m24_30 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", color=red, community=0, file="ServerFilters.feature.cs", label="0: QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId }))", span="71-73"];
m24_6 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", file="ServerFilters.feature.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", span="41-41"];
m24_7 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", file="ServerFilters.feature.cs", label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.Dispose()", span="41-41"];
m24_120 [file="ServerFilters.feature.cs", label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", span=""];
m24_121 [file="ServerFilters.feature.cs", label=string, span=""];
m24_122 [file="ServerFilters.feature.cs", label="System.TimeSpan", span=""];
m24_123 [file="ServerFilters.feature.cs", label=string, span=""];
m24_124 [file="ServerFilters.feature.cs", label=string, span=""];
m24_125 [file="ServerFilters.feature.cs", label="HangFire.States.IState", span=""];
m24_126 [file="ServerFilters.feature.cs", label=addAndSetStateSql, span=""];
m24_127 [file="ServerFilters.feature.cs", label=string, span=""];
m24_128 [file="ServerFilters.feature.cs", label="HangFire.States.IState", span=""];
m24_129 [file="ServerFilters.feature.cs", label=addStateSql, span=""];
m24_130 [file="ServerFilters.feature.cs", label=string, span=""];
m24_131 [file="ServerFilters.feature.cs", label=string, span=""];
m24_132 [file="ServerFilters.feature.cs", label=enqueueJobSql, span=""];
m24_133 [file="ServerFilters.feature.cs", label=string, span=""];
m24_134 [file="ServerFilters.feature.cs", label=string, span=""];
m24_135 [file="ServerFilters.feature.cs", label="System.TimeSpan", span=""];
m24_136 [file="ServerFilters.feature.cs", label=string, span=""];
m24_137 [file="ServerFilters.feature.cs", label=string, span=""];
m24_138 [file="ServerFilters.feature.cs", label="System.TimeSpan", span=""];
m24_139 [file="ServerFilters.feature.cs", label=string, span=""];
m24_140 [file="ServerFilters.feature.cs", label=string, span=""];
m24_141 [file="ServerFilters.feature.cs", label=double, span=""];
m24_142 [file="ServerFilters.feature.cs", label=addSql, span=""];
m24_143 [file="ServerFilters.feature.cs", label=string, span=""];
m24_144 [file="ServerFilters.feature.cs", label=string, span=""];
m24_145 [file="ServerFilters.feature.cs", label=string, span=""];
m24_146 [file="ServerFilters.feature.cs", label=string, span=""];
m24_147 [file="ServerFilters.feature.cs", label=string, span=""];
m24_148 [file="ServerFilters.feature.cs", label=string, span=""];
m24_149 [file="ServerFilters.feature.cs", label=string, span=""];
m24_150 [file="ServerFilters.feature.cs", label=int, span=""];
m24_151 [file="ServerFilters.feature.cs", label=int, span=""];
m24_152 [file="ServerFilters.feature.cs", label=trimSql, span=""];
m25_46 [cluster="HangFire.Tests.ServerSteps.ThenTheDequeuedJobsListContainsTheJob()", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.ThenTheDequeuedJobsListContainsTheJob()", span="100-100"];
m25_47 [cluster="HangFire.Tests.ServerSteps.ThenTheDequeuedJobsListContainsTheJob()", file="ServerSteps.cs", label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}:dequeued'', QueueSteps.DefaultQueue))", span="102-103"];
m25_48 [cluster="HangFire.Tests.ServerSteps.ThenTheDequeuedJobsListContainsTheJob()", color=red, community=0, file="ServerSteps.cs", label="0: CollectionAssert.Contains(jobIds, JobSteps.DefaultJobId)", span="105-105"];
m25_49 [cluster="HangFire.Tests.ServerSteps.ThenTheDequeuedJobsListContainsTheJob()", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.ThenTheDequeuedJobsListContainsTheJob()", span="100-100"];
m25_35 [cluster="HangFire.Tests.ServerSteps.CreateServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.CreateServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="82-82"];
m25_39 [cluster="HangFire.Tests.ServerSteps.CreateServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="ServerSteps.cs", label="_server = new JobServer(\r\n                Redis.Storage,\r\n                name,\r\n                workers,\r\n                queues)", span="84-88"];
m25_40 [cluster="HangFire.Tests.ServerSteps.CreateServer(string, int, System.Collections.Generic.IEnumerable<string>)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.CreateServer(string, int, System.Collections.Generic.IEnumerable<string>)", span="82-82"];
m25_20 [cluster="HangFire.Tests.ServerSteps.GivenTheJobWasDequeued()", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.GivenTheJobWasDequeued()", span="50-50"];
m25_21 [cluster="HangFire.Tests.ServerSteps.GivenTheJobWasDequeued()", file="ServerSteps.cs", label="Given(String.Format(''the job was dequeued from the '{0}' queue'', QueueSteps.DefaultQueue))", span="52-52"];
m25_22 [cluster="HangFire.Tests.ServerSteps.GivenTheJobWasDequeued()", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.GivenTheJobWasDequeued()", span="50-50"];
m25_5 [cluster="HangFire.Server.JobServer.Dispose()", file="ServerSteps.cs", label="Entry HangFire.Server.JobServer.Dispose()", span="72-72"];
m25_29 [cluster="HangFire.Tests.ServerSteps.WhenTheServerStarts(string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.WhenTheServerStarts(string)", span="65-65"];
m25_30 [cluster="HangFire.Tests.ServerSteps.WhenTheServerStarts(string)", file="ServerSteps.cs", label="WhenTheServerStartsWithWorkers(name, 1)", span="67-67"];
m25_31 [cluster="HangFire.Tests.ServerSteps.WhenTheServerStarts(string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.WhenTheServerStarts(string)", span="65-65"];
m25_66 [cluster="Unk.IsTrue", file="ServerSteps.cs", label="Entry Unk.IsTrue", span=""];
m25_76 [cluster="Unk.GetAllEntriesFromHash", file="ServerSteps.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m25_6 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJob()", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.GivenADequeuedJob()", span="29-29"];
m25_7 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJob()", file="ServerSteps.cs", label="Given(''a job'')", span="31-31"];
m25_8 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJob()", file="ServerSteps.cs", label="Given(''the job was dequeued'')", span="32-32"];
m25_9 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJob()", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.GivenADequeuedJob()", span="29-29"];
m25_27 [cluster="Unk.AddItemToSet", file="ServerSteps.cs", label="Entry Unk.AddItemToSet", span=""];
m25_15 [cluster="string.Format(string, object)", file="ServerSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m25_36 [cluster="HangFire.Tests.ServerSteps.WhenTheServerStartsWithTheQueues(string, string, string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.WhenTheServerStartsWithTheQueues(string, string, string)", span="77-77"];
m25_37 [cluster="HangFire.Tests.ServerSteps.WhenTheServerStartsWithTheQueues(string, string, string)", file="ServerSteps.cs", label="CreateServer(name, 1, new [] { queue1, queue2 })", span="79-79"];
m25_38 [cluster="HangFire.Tests.ServerSteps.WhenTheServerStartsWithTheQueues(string, string, string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.WhenTheServerStartsWithTheQueues(string, string, string)", span="77-77"];
m25_60 [cluster="HangFire.Tests.ServerSteps.ThenTheServersSetShouldContainTheServer(string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.ThenTheServersSetShouldContainTheServer(string)", span="125-125"];
m25_61 [cluster="HangFire.Tests.ServerSteps.ThenTheServersSetShouldContainTheServer(string)", file="ServerSteps.cs", label="Thread.Sleep(_serverStartupTimeout)", span="127-127"];
m25_62 [cluster="HangFire.Tests.ServerSteps.ThenTheServersSetShouldContainTheServer(string)", color=red, community=0, file="ServerSteps.cs", label="1: Assert.IsTrue(Redis.Client.SetContainsItem(''hangfire:servers'', name))", span="128-128"];
m25_63 [cluster="HangFire.Tests.ServerSteps.ThenTheServersSetShouldContainTheServer(string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.ThenTheServersSetShouldContainTheServer(string)", span="125-125"];
m25_52 [cluster="HangFire.Tests.ServerSteps.ThenTheDequeuedJobsListDoesNotContainTheJob()", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.ThenTheDequeuedJobsListDoesNotContainTheJob()", span="110-110"];
m25_53 [cluster="HangFire.Tests.ServerSteps.ThenTheDequeuedJobsListDoesNotContainTheJob()", file="ServerSteps.cs", label="ThenTheJobShouldBeRemovedFromTheDequeuedList(JobSteps.DefaultJobId)", span="112-112"];
m25_54 [cluster="HangFire.Tests.ServerSteps.ThenTheDequeuedJobsListDoesNotContainTheJob()", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.ThenTheDequeuedJobsListDoesNotContainTheJob()", span="110-110"];
m25_78 [cluster="HangFire.Tests.ServerSteps.ThenTheServerSQueuesListShouldContainQueues(string, string, string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.ThenTheServerSQueuesListShouldContainQueues(string, string, string)", span="146-146"];
m25_79 [cluster="HangFire.Tests.ServerSteps.ThenTheServerSQueuesListShouldContainQueues(string, string, string)", file="ServerSteps.cs", label="var registeredQueues = Redis.Client.GetAllItemsFromList(String.Format(''hangfire:server:{0}:queues'', name))", span="148-148"];
m25_81 [cluster="HangFire.Tests.ServerSteps.ThenTheServerSQueuesListShouldContainQueues(string, string, string)", color=red, community=0, file="ServerSteps.cs", label="0: Assert.AreEqual(queue1, registeredQueues[0])", span="151-151"];
m25_82 [cluster="HangFire.Tests.ServerSteps.ThenTheServerSQueuesListShouldContainQueues(string, string, string)", color=red, community=0, file="ServerSteps.cs", label="1: Assert.AreEqual(queue2, registeredQueues[1])", span="152-152"];
m25_80 [cluster="HangFire.Tests.ServerSteps.ThenTheServerSQueuesListShouldContainQueues(string, string, string)", color=red, community=0, file="ServerSteps.cs", label="0: Assert.AreEqual(2, registeredQueues.Count)", span="150-150"];
m25_83 [cluster="HangFire.Tests.ServerSteps.ThenTheServerSQueuesListShouldContainQueues(string, string, string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.ThenTheServerSQueuesListShouldContainQueues(string, string, string)", span="146-146"];
m25_41 [cluster="HangFire.Server.JobServer.JobServer(HangFire.JobStorage, string, int, System.Collections.Generic.IEnumerable<string>)", file="ServerSteps.cs", label="Entry HangFire.Server.JobServer.JobServer(HangFire.JobStorage, string, int, System.Collections.Generic.IEnumerable<string>)", span="47-47"];
m25_71 [cluster="Unk.IsFalse", file="ServerSteps.cs", label="Entry Unk.IsFalse", span=""];
m25_84 [cluster="Unk.AreEqual", file="ServerSteps.cs", label="Entry Unk.AreEqual", span=""];
m25_64 [cluster="System.Threading.Thread.Sleep(System.TimeSpan)", file="ServerSteps.cs", label="Entry System.Threading.Thread.Sleep(System.TimeSpan)", span="0-0"];
m25_42 [cluster="HangFire.Tests.ServerSteps.WhenTheServerShutsDown(string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.WhenTheServerShutsDown(string)", span="92-92"];
m25_43 [cluster="HangFire.Tests.ServerSteps.WhenTheServerShutsDown(string)", file="ServerSteps.cs", label="WhenTheServerStarts(name)", span="94-94"];
m25_44 [cluster="HangFire.Tests.ServerSteps.WhenTheServerShutsDown(string)", file="ServerSteps.cs", label="_server.Dispose()", span="95-95"];
m25_45 [cluster="HangFire.Tests.ServerSteps.WhenTheServerShutsDown(string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.WhenTheServerShutsDown(string)", span="92-92"];
m25_55 [cluster="HangFire.Tests.ServerSteps.ThenTheJobShouldBeRemovedFromTheDequeuedList(string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.ThenTheJobShouldBeRemovedFromTheDequeuedList(string)", span="116-116"];
m25_56 [cluster="HangFire.Tests.ServerSteps.ThenTheJobShouldBeRemovedFromTheDequeuedList(string)", file="ServerSteps.cs", label="var jobIds = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:queue:{0}:dequeued'', QueueSteps.DefaultQueue))", span="118-119"];
m25_57 [cluster="HangFire.Tests.ServerSteps.ThenTheJobShouldBeRemovedFromTheDequeuedList(string)", color=red, community=0, file="ServerSteps.cs", label="0: CollectionAssert.DoesNotContain(jobIds, jobId)", span="121-121"];
m25_58 [cluster="HangFire.Tests.ServerSteps.ThenTheJobShouldBeRemovedFromTheDequeuedList(string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.ThenTheJobShouldBeRemovedFromTheDequeuedList(string)", span="116-116"];
m25_0 [cluster="HangFire.Tests.ServerSteps.TearDown()", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.TearDown()", span="19-19"];
m25_1 [cluster="HangFire.Tests.ServerSteps.TearDown()", file="ServerSteps.cs", label="_server != null", span="21-21"];
m25_2 [cluster="HangFire.Tests.ServerSteps.TearDown()", file="ServerSteps.cs", label="_server.Dispose()", span="23-23"];
m25_3 [cluster="HangFire.Tests.ServerSteps.TearDown()", file="ServerSteps.cs", label="_server = null", span="24-24"];
m25_4 [cluster="HangFire.Tests.ServerSteps.TearDown()", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.TearDown()", span="19-19"];
m25_28 [cluster="Unk.AddItemToList", file="ServerSteps.cs", label="Entry Unk.AddItemToList", span=""];
m25_16 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJobFromTheQueue(string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.GivenADequeuedJobFromTheQueue(string)", span="43-43"];
m25_17 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJobFromTheQueue(string)", file="ServerSteps.cs", label="Given(''a job'')", span="45-45"];
m25_18 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJobFromTheQueue(string)", file="ServerSteps.cs", label="Given(String.Format(''the job was dequeued from the '{0}' queue'', queue))", span="46-46"];
m25_19 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJobFromTheQueue(string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.GivenADequeuedJobFromTheQueue(string)", span="43-43"];
m25_72 [cluster="HangFire.Tests.ServerSteps.ThenTheServersPropertiesShouldContainTheFollowingItems(string, Table)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.ThenTheServersPropertiesShouldContainTheFollowingItems(string, Table)", span="139-139"];
m25_73 [cluster="HangFire.Tests.ServerSteps.ThenTheServersPropertiesShouldContainTheFollowingItems(string, Table)", file="ServerSteps.cs", label="var properties = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:server:{0}'', name))", span="141-141"];
m25_74 [cluster="HangFire.Tests.ServerSteps.ThenTheServersPropertiesShouldContainTheFollowingItems(string, Table)", color=red, community=0, file="ServerSteps.cs", label="0: DictionaryAssert.ContainsFollowingItems(table, properties)", span="142-142"];
m25_75 [cluster="HangFire.Tests.ServerSteps.ThenTheServersPropertiesShouldContainTheFollowingItems(string, Table)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.ThenTheServersPropertiesShouldContainTheFollowingItems(string, Table)", span="139-139"];
m25_50 [cluster="Unk.GetAllItemsFromList", file="ServerSteps.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m25_65 [cluster="Unk.SetContainsItem", file="ServerSteps.cs", label="Entry Unk.SetContainsItem", span=""];
m25_51 [cluster="Unk.Contains", file="ServerSteps.cs", label="Entry Unk.Contains", span=""];
m25_91 [cluster="HangFire.Tests.ServerSteps.ThenTheStorageShouldNotContainAnEntryForTheServerQueues(string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.ThenTheStorageShouldNotContainAnEntryForTheServerQueues(string)", span="162-162"];
m25_89 [cluster="HangFire.Tests.ServerSteps.ThenTheStorageShouldNotContainAnEntryForTheServerQueues(string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.ThenTheStorageShouldNotContainAnEntryForTheServerQueues(string)", span="162-162"];
m25_90 [cluster="HangFire.Tests.ServerSteps.ThenTheStorageShouldNotContainAnEntryForTheServerQueues(string)", color=red, community=0, file="ServerSteps.cs", label="0: Assert.IsFalse(Redis.Client.ContainsKey(String.Format(''hangfire:server:{0}:queues'', name)))", span="164-164"];
m25_11 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJobOfTheType(string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.GivenADequeuedJobOfTheType(string)", span="36-36"];
m25_12 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJobOfTheType(string)", file="ServerSteps.cs", label="Given(String.Format(''a job of the '{0}' type'', type))", span="38-38"];
m25_13 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJobOfTheType(string)", file="ServerSteps.cs", label="Given(''the job was dequeued'')", span="39-39"];
m25_14 [cluster="HangFire.Tests.ServerSteps.GivenADequeuedJobOfTheType(string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.GivenADequeuedJobOfTheType(string)", span="36-36"];
m25_10 [cluster="Unk.Given", file="ServerSteps.cs", label="Entry Unk.Given", span=""];
m25_23 [cluster="HangFire.Tests.ServerSteps.GivenTheJobWasDequeuedFromTheQueue(string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.GivenTheJobWasDequeuedFromTheQueue(string)", span="56-56"];
m25_24 [cluster="HangFire.Tests.ServerSteps.GivenTheJobWasDequeuedFromTheQueue(string)", file="ServerSteps.cs", label="Redis.Client.AddItemToSet(''hangfire:queues'', queue)", span="58-58"];
m25_25 [cluster="HangFire.Tests.ServerSteps.GivenTheJobWasDequeuedFromTheQueue(string)", file="ServerSteps.cs", label="Redis.Client.AddItemToList(\r\n                String.Format(''hangfire:queue:{0}:dequeued'', queue),\r\n                JobSteps.DefaultJobId)", span="59-61"];
m25_26 [cluster="HangFire.Tests.ServerSteps.GivenTheJobWasDequeuedFromTheQueue(string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.GivenTheJobWasDequeuedFromTheQueue(string)", span="56-56"];
m25_59 [cluster="Unk.DoesNotContain", file="ServerSteps.cs", label="Entry Unk.DoesNotContain", span=""];
m25_32 [cluster="HangFire.Tests.ServerSteps.WhenTheServerStartsWithWorkers(string, int)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.WhenTheServerStartsWithWorkers(string, int)", span="71-71"];
m25_33 [cluster="HangFire.Tests.ServerSteps.WhenTheServerStartsWithWorkers(string, int)", file="ServerSteps.cs", label="CreateServer(name, workers, new [] { ''critical'' })", span="73-73"];
m25_34 [cluster="HangFire.Tests.ServerSteps.WhenTheServerStartsWithWorkers(string, int)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.WhenTheServerStartsWithWorkers(string, int)", span="71-71"];
m25_77 [cluster="Unk.ContainsFollowingItems", file="ServerSteps.cs", label="Entry Unk.ContainsFollowingItems", span=""];
m25_87 [cluster="HangFire.Tests.ServerSteps.ThenTheStorageShouldNotContainAnEntryForTheServerProperties(string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.ThenTheStorageShouldNotContainAnEntryForTheServerProperties(string)", span="156-156"];
m25_85 [cluster="HangFire.Tests.ServerSteps.ThenTheStorageShouldNotContainAnEntryForTheServerProperties(string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.ThenTheStorageShouldNotContainAnEntryForTheServerProperties(string)", span="156-156"];
m25_86 [cluster="HangFire.Tests.ServerSteps.ThenTheStorageShouldNotContainAnEntryForTheServerProperties(string)", color=red, community=0, file="ServerSteps.cs", label="0: Assert.IsFalse(Redis.Client.ContainsKey(String.Format(''hangfire:server:{0}'', name)))", span="158-158"];
m25_67 [cluster="HangFire.Tests.ServerSteps.ThenTheServersSetShouldNotContainTheServer(string)", file="ServerSteps.cs", label="Entry HangFire.Tests.ServerSteps.ThenTheServersSetShouldNotContainTheServer(string)", span="132-132"];
m25_68 [cluster="HangFire.Tests.ServerSteps.ThenTheServersSetShouldNotContainTheServer(string)", file="ServerSteps.cs", label="Thread.Sleep(_serverStartupTimeout)", span="134-134"];
m25_69 [cluster="HangFire.Tests.ServerSteps.ThenTheServersSetShouldNotContainTheServer(string)", color=red, community=0, file="ServerSteps.cs", label="0: Assert.IsFalse(Redis.Client.SetContainsItem(''hangfire:servers'', name))", span="135-135"];
m25_70 [cluster="HangFire.Tests.ServerSteps.ThenTheServersSetShouldNotContainTheServer(string)", file="ServerSteps.cs", label="Exit HangFire.Tests.ServerSteps.ThenTheServersSetShouldNotContainTheServer(string)", span="132-132"];
m25_88 [cluster="Unk.ContainsKey", file="ServerSteps.cs", label="Entry Unk.ContainsKey", span=""];
m25_92 [file="ServerSteps.cs", label="HangFire.Tests.ServerSteps", span=""];
m26_25 [cluster="Unk.OnScenarioStart", file="ServerWatchdog.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m26_68 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="Entry HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", span="153-153"];
m26_71 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="this.FeatureBackground()", span="159-159"];
m26_72 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="testRunner.Given(''a server that was started a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="161-161"];
m26_70 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="157-157"];
m26_69 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should remove the long-running server with no heartbeats'', ((string[])(null)))", span="155-155"];
m26_76 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="this.ScenarioCleanup()", span="169-169"];
m26_73 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="testRunner.And(''there are no any heartbeats'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="163-163"];
m26_75 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="testRunner.Then(''the server should be removed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="167-167"];
m26_74 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="testRunner.When(''the watchdog gets the job done'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="165-165"];
m26_77 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="Exit HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", span="153-153"];
m26_26 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ScenarioCleanup()", file="ServerWatchdog.feature.cs", label="Entry HangFire.Tests.Server.ServerWatchdogFeature.ScenarioCleanup()", span="67-67"];
m26_27 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ScenarioCleanup()", file="ServerWatchdog.feature.cs", label="testRunner.CollectScenarioErrors()", span="69-69"];
m26_28 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ScenarioCleanup()", file="ServerWatchdog.feature.cs", label="Exit HangFire.Tests.Server.ServerWatchdogFeature.ScenarioCleanup()", span="67-67"];
m26_29 [cluster="Unk.CollectScenarioErrors", file="ServerWatchdog.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m26_88 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="ServerWatchdog.feature.cs", label="Entry HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", span="199-199"];
m26_97 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", color=green, community=0, file="ServerWatchdog.feature.cs", label="0: this.ScenarioCleanup()", span="217-217"];
m26_96 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="ServerWatchdog.feature.cs", label="testRunner.But(''the server \'Active\' should not be removed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="215-215"];
m26_91 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="ServerWatchdog.feature.cs", label="this.FeatureBackground()", span="205-205"];
m26_92 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="ServerWatchdog.feature.cs", label="testRunner.Given(''a server \'Active\' that was started a second ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="207-207"];
m26_90 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="ServerWatchdog.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="203-203"];
m26_89 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="ServerWatchdog.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should remove only those servers that were timed out'', ((string[])(null)))", span="201-201"];
m26_95 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="ServerWatchdog.feature.cs", label="testRunner.Then(''the server \'TimedOut\' should be removed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="213-213"];
m26_93 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="ServerWatchdog.feature.cs", label="testRunner.And(''a server \'TimedOut\' that was started a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="209-209"];
m26_94 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="ServerWatchdog.feature.cs", label="testRunner.When(''the watchdog gets the job done'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="211-211"];
m26_98 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="ServerWatchdog.feature.cs", label="Exit HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", span="199-199"];
m26_45 [cluster="Unk.And", file="ServerWatchdog.feature.cs", label="Entry Unk.And", span=""];
m26_99 [cluster="Unk.But", file="ServerWatchdog.feature.cs", label="Entry Unk.But", span=""];
m26_48 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", file="ServerWatchdog.feature.cs", label="Entry HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", span="107-107"];
m26_51 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", file="ServerWatchdog.feature.cs", label="this.FeatureBackground()", span="113-113"];
m26_52 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", file="ServerWatchdog.feature.cs", label="testRunner.Given(''a server that was started a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="115-115"];
m26_50 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", file="ServerWatchdog.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="111-111"];
m26_49 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", file="ServerWatchdog.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should remove the server when its last heartbeat timed out'', ((string[])(null)))", span="109-109"];
m26_56 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", file="ServerWatchdog.feature.cs", label="this.ScenarioCleanup()", span="123-123"];
m26_53 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", file="ServerWatchdog.feature.cs", label="testRunner.And(''its last heartbeat was a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="117-117"];
m26_55 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", file="ServerWatchdog.feature.cs", label="testRunner.Then(''the server should be removed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="121-121"];
m26_54 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", file="ServerWatchdog.feature.cs", label="testRunner.When(''the watchdog gets the job done'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="119-119"];
m26_57 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", file="ServerWatchdog.feature.cs", label="Exit HangFire.Tests.Server.ServerWatchdogFeature.ItShouldRemoveTheServerWhenItsLastHeartbeatTimedOut()", span="107-107"];
m26_5 [cluster="Unk.GetTestRunner", file="ServerWatchdog.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m26_78 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="ServerWatchdog.feature.cs", label="Entry HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", span="176-176"];
m26_81 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="ServerWatchdog.feature.cs", label="this.FeatureBackground()", span="182-182"];
m26_82 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="ServerWatchdog.feature.cs", label="testRunner.Given(''a server that was started a second ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="184-184"];
m26_80 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="ServerWatchdog.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="180-180"];
m26_79 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="ServerWatchdog.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should not remove the recently started server with timed out heartbeat'', ((string[])(null)))", span="178-178"];
m26_86 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="ServerWatchdog.feature.cs", label="this.ScenarioCleanup()", span="192-192"];
m26_83 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="ServerWatchdog.feature.cs", label="testRunner.And(''its last heartbeat was a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="186-186"];
m26_85 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="ServerWatchdog.feature.cs", label="testRunner.Then(''the server should not be removed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="190-190"];
m26_84 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="ServerWatchdog.feature.cs", label="testRunner.When(''the watchdog gets the job done'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="188-188"];
m26_87 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="ServerWatchdog.feature.cs", label="Exit HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", span="176-176"];
m26_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="ServerWatchdog.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m26_58 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="Entry HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", span="130-130"];
m26_61 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="this.FeatureBackground()", span="136-136"];
m26_62 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="testRunner.Given(''a server that was started a second ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="138-138"];
m26_60 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="134-134"];
m26_59 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should not remove the recently started server with no heartbeats'', ((string[])(null)))", span="132-132"];
m26_66 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="this.ScenarioCleanup()", span="146-146"];
m26_63 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="testRunner.And(''there are no any heartbeats'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="140-140"];
m26_65 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="testRunner.Then(''the server should not be removed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="144-144"];
m26_64 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="testRunner.When(''the watchdog gets the job done'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="142-142"];
m26_67 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="ServerWatchdog.feature.cs", label="Exit HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", span="130-130"];
m26_46 [cluster="Unk.When", file="ServerWatchdog.feature.cs", label="Entry Unk.When", span=""];
m26_34 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="ServerWatchdog.feature.cs", label="Entry HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", span="84-84"];
m26_35 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", color=green, community=0, file="ServerWatchdog.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should not remove the active server'', ((string[])(null)))", span="86-86"];
m26_36 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="ServerWatchdog.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="88-88"];
m26_37 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="ServerWatchdog.feature.cs", label="this.FeatureBackground()", span="90-90"];
m26_38 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="ServerWatchdog.feature.cs", label="testRunner.Given(''a server that was started a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="92-92"];
m26_42 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="ServerWatchdog.feature.cs", label="this.ScenarioCleanup()", span="100-100"];
m26_39 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="ServerWatchdog.feature.cs", label="testRunner.And(''its last heartbeat was a second ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="94-94"];
m26_41 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="ServerWatchdog.feature.cs", label="testRunner.Then(''the server should not be removed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="98-98"];
m26_40 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="ServerWatchdog.feature.cs", label="testRunner.When(''the watchdog gets the job done'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="96-96"];
m26_43 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="ServerWatchdog.feature.cs", label="Exit HangFire.Tests.Server.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", span="84-84"];
m26_22 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ServerWatchdog.feature.cs", label="Entry HangFire.Tests.Server.ServerWatchdogFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m26_23 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ServerWatchdog.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="64-64"];
m26_24 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ServerWatchdog.feature.cs", label="Exit HangFire.Tests.Server.ServerWatchdogFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m26_14 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.TestInitialize()", file="ServerWatchdog.feature.cs", label="Entry HangFire.Tests.Server.ServerWatchdogFeature.TestInitialize()", span="47-47"];
m26_16 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.TestInitialize()", file="ServerWatchdog.feature.cs", label="HangFire.Tests.Server.ServerWatchdogFeature.FeatureSetup(null)", span="52-52"];
m26_15 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.TestInitialize()", file="ServerWatchdog.feature.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Server watchdog''))", span="49-50"];
m26_17 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.TestInitialize()", file="ServerWatchdog.feature.cs", label="Exit HangFire.Tests.Server.ServerWatchdogFeature.TestInitialize()", span="47-47"];
m26_30 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.FeatureBackground()", file="ServerWatchdog.feature.cs", label="Entry HangFire.Tests.Server.ServerWatchdogFeature.FeatureBackground()", span="72-72"];
m26_31 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.FeatureBackground()", color=green, community=0, file="ServerWatchdog.feature.cs", label="0: testRunner.Given(''a server watchdog'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="76-76"];
m26_32 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.FeatureBackground()", file="ServerWatchdog.feature.cs", label="Exit HangFire.Tests.Server.ServerWatchdogFeature.FeatureBackground()", span="72-72"];
m26_0 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ServerWatchdog.feature.cs", label="Entry HangFire.Tests.Server.ServerWatchdogFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m26_1 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="ServerWatchdog.feature.cs", label="0: testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m26_2 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="ServerWatchdog.feature.cs", label="1: TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Server watchdog'', ''\r\n  As an Administrator, I would like if the crashed servers \r\n  are automaticall'' +\r\n                    ''y removed.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-35"];
m26_3 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ServerWatchdog.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="36-36"];
m26_4 [cluster="HangFire.Tests.Server.ServerWatchdogFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ServerWatchdog.feature.cs", label="Exit HangFire.Tests.Server.ServerWatchdogFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m26_44 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ServerWatchdog.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m26_47 [cluster="Unk.Then", file="ServerWatchdog.feature.cs", label="Entry Unk.Then", span=""];
m26_33 [cluster="Unk.Given", file="ServerWatchdog.feature.cs", label="Entry Unk.Given", span=""];
m26_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="ServerWatchdog.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m26_8 [cluster="Unk.OnFeatureStart", file="ServerWatchdog.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m26_100 [file="ServerWatchdog.feature.cs", label="HangFire.Tests.Server.ServerWatchdogFeature", span=""];
m27_4 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenAServerThatWasStarted(System.DateTime)", file="ServerWatchdogSteps.cs", label="Entry HangFire.Tests.ServerWatchdogSteps.GivenAServerThatWasStarted(System.DateTime)", span="21-21"];
m27_5 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenAServerThatWasStarted(System.DateTime)", file="ServerWatchdogSteps.cs", label="GivenAServerThatWasStarted(ServerSteps.DefaultServerName, startedAt)", span="23-23"];
m27_6 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenAServerThatWasStarted(System.DateTime)", file="ServerWatchdogSteps.cs", label="Exit HangFire.Tests.ServerWatchdogSteps.GivenAServerThatWasStarted(System.DateTime)", span="21-21"];
m27_0 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenAServerWatchdog()", file="ServerWatchdogSteps.cs", label="Entry HangFire.Tests.ServerWatchdogSteps.GivenAServerWatchdog()", span="15-15"];
m27_1 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenAServerWatchdog()", file="ServerWatchdogSteps.cs", label="_watchdog = new ServerWatchdog(Redis.Storage)", span="17-17"];
m27_2 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenAServerWatchdog()", file="ServerWatchdogSteps.cs", label="Exit HangFire.Tests.ServerWatchdogSteps.GivenAServerWatchdog()", span="15-15"];
m27_23 [cluster="System.TimeSpan.FromMinutes(double)", file="ServerWatchdogSteps.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m27_33 [cluster="Unk.IsTrue", file="ServerWatchdogSteps.cs", label="Entry Unk.IsTrue", span=""];
m27_18 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenThereAreNoAnyHeartbeats()", file="ServerWatchdogSteps.cs", label="Entry HangFire.Tests.ServerWatchdogSteps.GivenThereAreNoAnyHeartbeats()", span="46-46"];
m27_19 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenThereAreNoAnyHeartbeats()", file="ServerWatchdogSteps.cs", label="Exit HangFire.Tests.ServerWatchdogSteps.GivenThereAreNoAnyHeartbeats()", span="46-46"];
m27_14 [cluster="Unk.SetEntryInHash", file="ServerWatchdogSteps.cs", label="Entry Unk.SetEntryInHash", span=""];
m27_11 [cluster="Unk.AddItemToSet", file="ServerWatchdogSteps.cs", label="Entry Unk.AddItemToSet", span=""];
m27_12 [cluster="string.Format(string, object)", file="ServerWatchdogSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m27_3 [cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", file="ServerWatchdogSteps.cs", label="Entry HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="33-33"];
m27_38 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldBeRemoved(string)", file="ServerWatchdogSteps.cs", label="Entry HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldBeRemoved(string)", span="77-77"];
m27_39 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldBeRemoved(string)", color=red, community=0, file="ServerWatchdogSteps.cs", label="0: Assert.IsFalse(Redis.Client.SetContainsItem(''hangfire:servers'', name))", span="79-79"];
m27_40 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldBeRemoved(string)", color=red, community=1, file="ServerWatchdogSteps.cs", label="1: Assert.IsFalse(\r\n                Redis.Client.ContainsKey(String.Format(''hangfire:server:{0}'', name)))", span="80-81"];
m27_41 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldBeRemoved(string)", file="ServerWatchdogSteps.cs", label="Exit HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldBeRemoved(string)", span="77-77"];
m27_42 [cluster="Unk.IsFalse", file="ServerWatchdogSteps.cs", label="Entry Unk.IsFalse", span=""];
m27_20 [cluster="HangFire.Tests.ServerWatchdogSteps.WhenTheWatchdogGetsTheJobDone()", file="ServerWatchdogSteps.cs", label="Entry HangFire.Tests.ServerWatchdogSteps.WhenTheWatchdogGetsTheJobDone()", span="51-51"];
m27_21 [cluster="HangFire.Tests.ServerWatchdogSteps.WhenTheWatchdogGetsTheJobDone()", file="ServerWatchdogSteps.cs", label="_watchdog.RemoveTimedOutServers(TimeSpan.FromMinutes(1))", span="53-53"];
m27_22 [cluster="HangFire.Tests.ServerWatchdogSteps.WhenTheWatchdogGetsTheJobDone()", file="ServerWatchdogSteps.cs", label="Exit HangFire.Tests.ServerWatchdogSteps.WhenTheWatchdogGetsTheJobDone()", span="51-51"];
m27_16 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenItsLastHeartbeatWas(System.DateTime)", file="ServerWatchdogSteps.cs", label="Redis.Client.SetEntryInHash(\r\n                String.Format(''hangfire:server:{0}'', ServerSteps.DefaultServerName),\r\n                ''Heartbeat'',\r\n                JobHelper.ToStringTimestamp(lastHeartbeat))", span="39-42"];
m27_15 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenItsLastHeartbeatWas(System.DateTime)", file="ServerWatchdogSteps.cs", label="Entry HangFire.Tests.ServerWatchdogSteps.GivenItsLastHeartbeatWas(System.DateTime)", span="37-37"];
m27_17 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenItsLastHeartbeatWas(System.DateTime)", file="ServerWatchdogSteps.cs", label="Exit HangFire.Tests.ServerWatchdogSteps.GivenItsLastHeartbeatWas(System.DateTime)", span="37-37"];
m27_35 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldBeRemoved()", file="ServerWatchdogSteps.cs", label="Entry HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldBeRemoved()", span="71-71"];
m27_36 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldBeRemoved()", file="ServerWatchdogSteps.cs", label="ThenTheServerShouldBeRemoved(ServerSteps.DefaultServerName)", span="73-73"];
m27_37 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldBeRemoved()", file="ServerWatchdogSteps.cs", label="Exit HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldBeRemoved()", span="71-71"];
m27_28 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldNotBeRemoved(string)", file="ServerWatchdogSteps.cs", label="Entry HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldNotBeRemoved(string)", span="63-63"];
m27_29 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldNotBeRemoved(string)", color=red, community=0, file="ServerWatchdogSteps.cs", label="0: Assert.IsTrue(Redis.Client.SetContainsItem(''hangfire:servers'', name))", span="65-65"];
m27_30 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldNotBeRemoved(string)", color=red, community=1, file="ServerWatchdogSteps.cs", label="1: Assert.IsTrue(\r\n                Redis.Client.ContainsKey(String.Format(''hangfire:server:{0}'', name)))", span="66-67"];
m27_31 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldNotBeRemoved(string)", file="ServerWatchdogSteps.cs", label="Exit HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldNotBeRemoved(string)", span="63-63"];
m27_32 [cluster="Unk.SetContainsItem", file="ServerWatchdogSteps.cs", label="Entry Unk.SetContainsItem", span=""];
m27_13 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ServerWatchdogSteps.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m27_24 [cluster="HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", file="ServerWatchdogSteps.cs", label="Entry HangFire.Server.Components.ServerWatchdog.RemoveTimedOutServers(System.TimeSpan)", span="38-38"];
m27_9 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenAServerThatWasStarted(string, System.DateTime)", file="ServerWatchdogSteps.cs", label="Redis.Client.SetEntryInHash(\r\n                String.Format(''hangfire:server:{0}'', name),\r\n                ''StartedAt'',\r\n                JobHelper.ToStringTimestamp(startedAt))", span="30-33"];
m27_7 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenAServerThatWasStarted(string, System.DateTime)", file="ServerWatchdogSteps.cs", label="Entry HangFire.Tests.ServerWatchdogSteps.GivenAServerThatWasStarted(string, System.DateTime)", span="27-27"];
m27_8 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenAServerThatWasStarted(string, System.DateTime)", file="ServerWatchdogSteps.cs", label="Redis.Client.AddItemToSet(''hangfire:servers'', name)", span="29-29"];
m27_10 [cluster="HangFire.Tests.ServerWatchdogSteps.GivenAServerThatWasStarted(string, System.DateTime)", file="ServerWatchdogSteps.cs", label="Exit HangFire.Tests.ServerWatchdogSteps.GivenAServerThatWasStarted(string, System.DateTime)", span="27-27"];
m27_25 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldNotBeRemoved()", file="ServerWatchdogSteps.cs", label="Entry HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldNotBeRemoved()", span="57-57"];
m27_26 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldNotBeRemoved()", file="ServerWatchdogSteps.cs", label="ThenTheServerShouldNotBeRemoved(ServerSteps.DefaultServerName)", span="59-59"];
m27_27 [cluster="HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldNotBeRemoved()", file="ServerWatchdogSteps.cs", label="Exit HangFire.Tests.ServerWatchdogSteps.ThenTheServerShouldNotBeRemoved()", span="57-57"];
m27_34 [cluster="Unk.ContainsKey", file="ServerWatchdogSteps.cs", label="Entry Unk.ContainsKey", span=""];
m27_43 [file="ServerWatchdogSteps.cs", label="HangFire.Tests.ServerWatchdogSteps", span=""];
m28_22 [cluster="HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="Exit HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", span="76-76"];
m28_23 [cluster="System.Threading.ManualResetEventSlim.Set()", file="StateMachine.feature.cs", label="Entry System.Threading.ManualResetEventSlim.Set()", span="0-0"];
m28_24 [cluster="HangFire.Server.Worker.Dispose()", file="StateMachine.feature.cs", label="Entry HangFire.Server.Worker.Dispose()", span="86-86"];
m28_26 [cluster="HangFire.Server.Worker.Dispose()", file="StateMachine.feature.cs", label="SendStop()", span="90-90"];
m28_27 [cluster="HangFire.Server.Worker.Dispose()", color=red, community=0, file="StateMachine.feature.cs", label="0: _thread.Join()", span="93-93"];
m28_28 [cluster="HangFire.Server.Worker.Dispose()", color=red, community=0, file="StateMachine.feature.cs", label="0: _cts.Dispose()", span="95-95"];
m28_31 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", color=green, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state of the job should be changed'', ((string[])(null)))", span="77-77"];
m28_25 [cluster="HangFire.Server.Worker.Dispose()", file="StateMachine.feature.cs", label="!_stopSent", span="88-88"];
m28_49 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", file="StateMachine.feature.cs", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106"];
m28_76 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", file="StateMachine.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The job history should be appended'', ((string[])(null)))", span="168-168"];
m28_29 [cluster="HangFire.Server.Worker.Dispose()", file="StateMachine.feature.cs", label="_jobIsReady.Dispose()", span="96-96"];
m28_100 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", span="230-230"];
m28_101 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", color=green, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the state should be changed to the Failed state when it could not find its type'', ((string[])(null)))", span="232-232"];
m28_102 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", color=green, community=0, file="StateMachine.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="234-234"];
m28_103 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.Given(''a job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="236-236"];
m28_104 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="238-238"];
m28_105 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", file="StateMachine.feature.cs", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="240-240"];
m28_107 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", color=green, community=0, file="StateMachine.feature.cs", label="0: this.ScenarioCleanup()", span="244-244"];
m28_106 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", file="StateMachine.feature.cs", label="testRunner.Then(''the job should be moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="242-242"];
m28_108 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.TheStateShouldBeChangedToTheFailedStateWhenItCouldNotFindItsType()", span="230-230"];
m28_109 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", span="252-252"];
m28_110 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", color=green, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the state should not be changed if allowed current states array does not contain '' +\r\n                    ''the current state'', ((string[])(null)))", span="254-255"];
m28_111 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", file="StateMachine.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="257-257"];
m28_113 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.And(''a job in the \'Old\' state with registered descriptor'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="261-261"];
m28_112 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", file="StateMachine.feature.cs", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="259-259"];
m28_114 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.When(''I change the state of the job to the \'Test\' allowing only transition from the \'En'' +\r\n                    ''queued\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="263-264"];
m28_115 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", file="StateMachine.feature.cs", label="testRunner.Then(''the job should be in the Old state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="266-266"];
m28_118 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", color=green, community=0, file="StateMachine.feature.cs", label="0: this.ScenarioCleanup()", span="272-272"];
m28_117 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", file="StateMachine.feature.cs", label="testRunner.And(''the \'Test\' state should not be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="270-270"];
m28_116 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", file="StateMachine.feature.cs", label="testRunner.And(''the old state should not be unapplied'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="268-268"];
m28_119 [cluster="HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.TheStateShouldNotBeChangedIfAllowedCurrentStatesArrayDoesNotContainTheCurrentState()", span="252-252"];
m28_120 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="279-279"];
m28_121 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State changing filters should be executed in the order they were defined'', ((string[])(null)))", span="281-281"];
m28_122 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="283-283"];
m28_123 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="1: testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="285-285"];
m28_124 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="1: testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="287-287"];
m28_125 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="testRunner.And(''a state changing filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="289-289"];
m28_128 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="295-296"];
m28_127 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="293-293"];
m28_129 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="table4.AddRow(new string[] {\r\n                        ''first''})", span="297-298"];
m28_130 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="table4.AddRow(new string[] {\r\n                        ''second''})", span="299-300"];
m28_131 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.Then(''changing filters should be executed in the following order:'', ((string)(null)), table4, ''Then '')", span="302-302"];
m28_132 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="0: this.ScenarioCleanup()", span="304-304"];
m28_126 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="testRunner.And(''a state changing filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="291-291"];
m28_133 [cluster="HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.StateChangingFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="279-279"];
m28_164 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", span="381-381"];
m28_168 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.When(''I change the state of the \'unexisting\' job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="389-389"];
m28_167 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", file="StateMachine.feature.cs", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="387-387"];
m28_169 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", file="StateMachine.feature.cs", label="testRunner.Then(''the \'Test\' state should not be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="391-391"];
m28_170 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", file="StateMachine.feature.cs", label="this.ScenarioCleanup()", span="393-393"];
m28_166 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", file="StateMachine.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="385-385"];
m28_165 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", file="StateMachine.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state of the unexisting job should not be changed'', ((string[])(null)))", span="383-383"];
m28_171 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.TheStateOfTheUnexistingJobShouldNotBeChanged()", span="381-381"];
m28_207 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", span="483-483"];
m28_210 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="489-489"];
m28_209 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", file="StateMachine.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="487-487"];
m28_211 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", file="StateMachine.feature.cs", label="testRunner.And(''a job with empty state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="491-491"];
m28_213 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", color=green, community=0, file="StateMachine.feature.cs", label="1: testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="495-495"];
m28_212 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", file="StateMachine.feature.cs", label="testRunner.And(''a state applied filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="493-493"];
m28_214 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", color=green, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="497-498"];
m28_215 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", color=green, community=0, file="StateMachine.feature.cs", label="0: table8.AddRow(new string[] {\r\n                        ''first::OnStateApplied''})", span="499-500"];
m28_216 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.Then(''state applied filter methods should be executed in the following order:'', ((string)(null)), table8, ''Then '')", span="502-502"];
m28_217 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", color=green, community=0, file="StateMachine.feature.cs", label="0: this.ScenarioCleanup()", span="504-504"];
m28_208 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", file="StateMachine.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''OnStateUnapplied method should not be called when the state is empty'', ((string[])(null)))", span="485-485"];
m28_218 [cluster="HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.OnStateUnappliedMethodShouldNotBeCalledWhenTheStateIsEmpty()", span="483-483"];
m28_50 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", file="StateMachine.feature.cs", label="testRunner.Then(''the \'Test\' state should be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108"];
m28_12 [cluster="System.Threading.Thread.Start()", file="StateMachine.feature.cs", label="Entry System.Threading.Thread.Start()", span="0-0"];
m28_0 [cluster="HangFire.Server.Worker.Worker(IRedisClientsManager, HangFire.Server.JobManager, HangFire.Server.WorkerContext)", file="StateMachine.feature.cs", label="Entry HangFire.Server.Worker.Worker(IRedisClientsManager, HangFire.Server.JobManager, HangFire.Server.WorkerContext)", span="32-32"];
m28_1 [cluster="HangFire.Server.Worker.Worker(IRedisClientsManager, HangFire.Server.JobManager, HangFire.Server.WorkerContext)", color=green, community=0, file="StateMachine.feature.cs", label="1: _redis = redisManager.GetClient()", span="37-37"];
m28_2 [cluster="HangFire.Server.Worker.Worker(IRedisClientsManager, HangFire.Server.JobManager, HangFire.Server.WorkerContext)", color=green, community=0, file="StateMachine.feature.cs", label="1: _manager = manager", span="39-39"];
m28_3 [cluster="HangFire.Server.Worker.Worker(IRedisClientsManager, HangFire.Server.JobManager, HangFire.Server.WorkerContext)", file="StateMachine.feature.cs", label="_context = context", span="40-40"];
m28_4 [cluster="HangFire.Server.Worker.Worker(IRedisClientsManager, HangFire.Server.JobManager, HangFire.Server.WorkerContext)", file="StateMachine.feature.cs", label="Logger = LogManager.GetLogger(String.Format(''HangFire.Worker.{0}'', _context.WorkerNumber))", span="42-42"];
m28_32 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", file="StateMachine.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m28_11 [cluster="System.Threading.Thread.Thread(System.Threading.ThreadStart)", file="StateMachine.feature.cs", label="Entry System.Threading.Thread.Thread(System.Threading.ThreadStart)", span="0-0"];
m28_9 [cluster="string.Format(string, object)", file="StateMachine.feature.cs", label="Entry string.Format(string, object)", span="0-0"];
m28_46 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", file="StateMachine.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="100-100"];
m28_17 [cluster="HangFire.Tests.StateMachineFeature.TestInitialize()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.TestInitialize()", span="46-46"];
m28_41 [cluster="HangFire.Server.Worker.DoWork()", color=red, community=0, file="StateMachine.feature.cs", label="0: OperationCanceledException", span="116-116"];
m28_191 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="447-447"];
m28_192 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="1: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State applied filters should be executed in the order they were defined'', ((string[])(null)))", span="449-449"];
m28_193 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="451-451"];
m28_201 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="1: table7.AddRow(new string[] {\r\n                        ''second::OnStateUnapplied''})", span="467-468"];
m28_199 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="463-464"];
m28_200 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="table7.AddRow(new string[] {\r\n                        ''first::OnStateUnapplied''})", span="465-466"];
m28_202 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="0: table7.AddRow(new string[] {\r\n                        ''first::OnStateApplied''})", span="469-470"];
m28_203 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="table7.AddRow(new string[] {\r\n                        ''second::OnStateApplied''})", span="471-472"];
m28_204 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.Then(''state applied filter methods should be executed in the following order:'', ((string)(null)), table7, ''Then '')", span="474-474"];
m28_205 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", color=green, community=0, file="StateMachine.feature.cs", label="0: this.ScenarioCleanup()", span="476-476"];
m28_194 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="453-453"];
m28_195 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="testRunner.And(''a job in the \'Old\' state with registered descriptor'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="455-455"];
m28_196 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="testRunner.And(''a state applied filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="457-457"];
m28_197 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="testRunner.And(''a state applied filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="459-459"];
m28_198 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="461-461"];
m28_206 [cluster="HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.StateAppliedFiltersShouldBeExecutedInTheOrderTheyWereDefined()", span="447-447"];
m28_5 [cluster="HangFire.Server.Worker.Worker(IRedisClientsManager, HangFire.Server.JobManager, HangFire.Server.WorkerContext)", color=red, community=0, file="StateMachine.feature.cs", label="0: _thread = new Thread(DoWork)\r\n                {\r\n                    Name = String.Format(''HangFire.Worker.{0}'', _context.WorkerNumber),\r\n                    IsBackground = true\r\n                }", span="44-48"];
m28_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", color=red, community=0, file="StateMachine.feature.cs", label="0: Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m28_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="StateMachine.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m28_10 [cluster="Unk.GetLogger", file="StateMachine.feature.cs", label="Entry Unk.GetLogger", span=""];
m28_47 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", file="StateMachine.feature.cs", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102"];
m28_172 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", span="400-400"];
m28_173 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", color=green, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Changing filters are should not be executed for unexisting job'', ((string[])(null)))", span="402-402"];
m28_174 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", file="StateMachine.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="404-404"];
m28_176 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.And(''a state changing filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="408-408"];
m28_175 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", file="StateMachine.feature.cs", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="406-406"];
m28_177 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", color=green, community=0, file="StateMachine.feature.cs", label="1: testRunner.When(''I change the state of the \'unexisting\' job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="410-410"];
m28_178 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", file="StateMachine.feature.cs", label="testRunner.Then(''changing filters should not be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="412-412"];
m28_179 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", file="StateMachine.feature.cs", label="this.ScenarioCleanup()", span="414-414"];
m28_180 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.ChangingFiltersAreShouldNotBeExecutedForUnexistingJob()", span="400-400"];
m28_34 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", file="StateMachine.feature.cs", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83"];
m28_35 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", file="StateMachine.feature.cs", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m28_36 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", file="StateMachine.feature.cs", label="testRunner.Then(''the job state should be changed to \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87"];
m28_42 [cluster="Unk.When", file="StateMachine.feature.cs", label="Entry Unk.When", span=""];
m28_37 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", file="StateMachine.feature.cs", label="this.ScenarioCleanup()", span="89-89"];
m28_38 [cluster="HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.TheStateOfTheJobShouldBeChanged()", span="75-75"];
m28_39 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="StateMachine.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m28_40 [cluster="Unk.Given", file="StateMachine.feature.cs", label="Entry Unk.Given", span=""];
m28_43 [cluster="Unk.Then", file="StateMachine.feature.cs", label="Entry Unk.Then", span=""];
m28_44 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", span="96-96"];
m28_45 [cluster="HangFire.Tests.StateMachineFeature.TheNewStateShouldBeApplied()", file="StateMachine.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The new state should be applied'', ((string[])(null)))", span="98-98"];
m28_79 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", file="StateMachine.feature.cs", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="174-174"];
m28_134 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", span="311-311"];
m28_144 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", color=green, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="331-333"];
m28_143 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="testRunner.And(''the \'AnotherTest\' state should be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="329-329"];
m28_145 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''AnotherTest''})", span="334-336"];
m28_146 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.And(''the job\'s state entry should contain the following items:'', ((string)(null)), table5, ''And '')", span="338-338"];
m28_147 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="this.ScenarioCleanup()", span="340-340"];
m28_136 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="315-315"];
m28_135 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state changing filters should be able to modify the state'', ((string[])(null)))", span="313-313"];
m28_137 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="317-317"];
m28_138 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="319-319"];
m28_139 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="testRunner.And(''a state changing filter \'first\' that changes the state to the \'AnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="321-321"];
m28_142 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="testRunner.And(''the \'Test\' state should not be applied to the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="327-327"];
m28_140 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="323-323"];
m28_141 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="testRunner.Then(''the job state should be changed to \'AnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="325-325"];
m28_148 [cluster="HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.TheStateChangingFiltersShouldBeAbleToModifyTheState()", span="311-311"];
m28_74 [cluster="Unk.AddRow", file="StateMachine.feature.cs", label="Entry Unk.AddRow", span=""];
m28_80 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", file="StateMachine.feature.cs", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="176-176"];
m28_53 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", color=red, community=0, file="StateMachine.feature.cs", label="0: Logger.Warn(String.Format(\r\n                    ''Could not process the job '{0}': it does not exist in the storage.'',\r\n                    payload.Id))", span="134-136"];
m28_60 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", color=red, community=0, file="StateMachine.feature.cs", label="0: var performContext = new PerformContext(\r\n                    _context, jobDescriptor)", span="162-163"];
m28_55 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="!JobState.Apply(\r\n                _redis,\r\n                new ProcessingState(payload.Id, ''Worker has started processing.'', _context.ServerName),\r\n                EnqueuedState.Name)", span="141-144"];
m28_54 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="return;", span="138-138"];
m28_56 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="return;", span="146-146"];
m28_57 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="Exception exception = null", span="154-154"];
m28_58 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="ServerJobDescriptor jobDescriptor = null", span="156-156"];
m28_59 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="jobDescriptor = new ServerJobDescriptor(\r\n                    _redis, _context.Activator, payload)", span="159-160"];
m28_61 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", color=red, community=0, file="StateMachine.feature.cs", label="1: _context.Performer.PerformJob(performContext)", span="165-165"];
m28_14 [cluster="HangFire.Server.Worker.SendStop()", file="StateMachine.feature.cs", label="_stopSent = true", span="54-54"];
m28_16 [cluster="HangFire.Server.Worker.SendStop()", file="StateMachine.feature.cs", label="Exit HangFire.Server.Worker.SendStop()", span="52-52"];
m28_15 [cluster="HangFire.Server.Worker.SendStop()", color=red, community=0, file="StateMachine.feature.cs", label="0: _cts.Cancel()", span="55-55"];
m28_51 [cluster="Unk.Fatal", file="StateMachine.feature.cs", label="Entry Unk.Fatal", span=""];
m28_48 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="Entry HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", span="130-130"];
m28_52 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="String.IsNullOrEmpty(payload.Type)", span="132-132"];
m28_8 [cluster="Unk.OnFeatureStart", file="StateMachine.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m28_72 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", span="138-138"];
m28_71 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", file="StateMachine.feature.cs", label="this.ScenarioCleanup()", span="159-159"];
m28_75 [cluster="HangFire.Filters.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", file="StateMachine.feature.cs", label="Entry HangFire.Filters.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", span="13-13"];
m28_85 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", file="StateMachine.feature.cs", label="this.ScenarioCleanup()", span="190-190"];
m28_77 [cluster="Unk.Error", file="StateMachine.feature.cs", label="Entry Unk.Error", span=""];
m28_82 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", file="StateMachine.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''CreatedAt'',\r\n                        ''<UtcNow timestamp>''})", span="181-183"];
m28_83 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", file="StateMachine.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''Test''})", span="184-186"];
m28_78 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="StateMachine.feature.cs", label="Entry HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m28_81 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", file="StateMachine.feature.cs", label="HangFire.Server.Worker", span=""];
m28_84 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", file="StateMachine.feature.cs", label="testRunner.Then(''the last history entry should contain the following items:'', ((string)(null)), table2, ''Then '')", span="188-188"];
m28_86 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.TheJobHistoryShouldBeAppended()", span="166-166"];
m28_70 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", file="StateMachine.feature.cs", label="testRunner.Then(''the job\'s state entry should contain the following items:'', ((string)(null)), table1, ''Then '')", span="157-157"];
m28_13 [cluster="HangFire.Server.Worker.SendStop()", file="StateMachine.feature.cs", label="Entry HangFire.Server.Worker.SendStop()", span="52-52"];
m28_73 [cluster="TechTalk.SpecFlow.Table.cstr", file="StateMachine.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m28_149 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", span="347-347"];
m28_150 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", color=green, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The job history should contain every changed state'', ((string[])(null)))", span="349-349"];
m28_151 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", color=green, community=0, file="StateMachine.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="351-351"];
m28_152 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", color=green, community=0, file="StateMachine.feature.cs", label="1: testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="353-353"];
m28_153 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", file="StateMachine.feature.cs", label="testRunner.And(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="355-355"];
m28_157 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", color=green, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''State''})", span="363-364"];
m28_156 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", file="StateMachine.feature.cs", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="361-361"];
m28_158 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", file="StateMachine.feature.cs", label="table6.AddRow(new string[] {\r\n                        ''YetAnotherTest''})", span="365-366"];
m28_159 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", file="StateMachine.feature.cs", label="table6.AddRow(new string[] {\r\n                        ''AnotherTest''})", span="367-368"];
m28_160 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", color=green, community=0, file="StateMachine.feature.cs", label="0: table6.AddRow(new string[] {\r\n                        ''Test''})", span="369-370"];
m28_161 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", color=green, community=0, file="StateMachine.feature.cs", label="1: testRunner.Then(''the history for the following states should be added:'', ((string)(null)), table6, ''Then '')", span="372-372"];
m28_162 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", file="StateMachine.feature.cs", label="this.ScenarioCleanup()", span="374-374"];
m28_154 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", file="StateMachine.feature.cs", label="testRunner.And(''a state changing filter \'first\' that changes the state to the \'AnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="357-357"];
m28_155 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", file="StateMachine.feature.cs", label="testRunner.And(''a state changing filter \'second\' that changes the state to the \'YetAnotherTest\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="359-359"];
m28_163 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.TheJobHistoryShouldContainEveryChangedState()", span="347-347"];
m28_64 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", file="StateMachine.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="142-142"];
m28_66 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", color=red, community=0, file="StateMachine.feature.cs", label="0: testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="146-146"];
m28_67 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", file="StateMachine.feature.cs", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="148-148"];
m28_68 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", color=red, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="150-152"];
m28_62 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", span="138-138"];
m28_65 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", file="StateMachine.feature.cs", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="144-144"];
m28_63 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", file="StateMachine.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''The state entry should contain the state name'', ((string[])(null)))", span="140-140"];
m28_69 [cluster="HangFire.Tests.StateMachineFeature.TheStateEntryShouldContainTheStateName()", file="StateMachine.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''State'',\r\n                        ''Test''})", span="153-155"];
m28_87 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", span="197-197"];
m28_92 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", color=green, community=0, file="StateMachine.feature.cs", label="0: table3.AddRow(new string[] {\r\n                        ''Worker'',\r\n                        ''#3''})", span="209-211"];
m28_90 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="203-205"];
m28_91 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''Server'',\r\n                        ''TestServer''})", span="206-208"];
m28_93 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="testRunner.Given(''a \'Test\' state with the following properties:'', ((string)(null)), table3, ''Given '')", span="213-213"];
m28_98 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="this.ScenarioCleanup()", span="223-223"];
m28_89 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="201-201"];
m28_88 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''the job history record and the state entry should contain the state properties'', ((string[])(null)))", span="199-199"];
m28_94 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="testRunner.And(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="215-215"];
m28_97 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="testRunner.And(''the state entry should contain all of the above properties'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="221-221"];
m28_95 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="testRunner.When(''I change the state of the job to the \'Test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="217-217"];
m28_96 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="testRunner.Then(''the last history entry should contain all of the above properties'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="219-219"];
m28_99 [cluster="HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.TheJobHistoryRecordAndTheStateEntryShouldContainTheStateProperties()", span="197-197"];
m28_30 [cluster="HangFire.Server.Worker.Dispose()", file="StateMachine.feature.cs", label="Exit HangFire.Server.Worker.Dispose()", span="86-86"];
m28_33 [cluster="System.Threading.ManualResetEventSlim.Dispose()", file="StateMachine.feature.cs", label="Entry System.Threading.ManualResetEventSlim.Dispose()", span="0-0"];
m28_181 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", file="StateMachine.feature.cs", label="Entry HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", span="422-422"];
m28_182 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", color=green, community=0, file="StateMachine.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Changing filters should not be executed if the transition is not allowed for the '' +\r\n                    ''current state'', ((string[])(null)))", span="424-425"];
m28_183 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", color=green, community=0, file="StateMachine.feature.cs", label="0: this.ScenarioSetup(scenarioInfo)", span="427-427"];
m28_184 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", file="StateMachine.feature.cs", label="testRunner.Given(''a \'Test\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="429-429"];
m28_186 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", color=green, community=0, file="StateMachine.feature.cs", label="0: testRunner.And(''a state changing filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="433-433"];
m28_185 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", file="StateMachine.feature.cs", label="testRunner.And(''a job in the \'Old\' state with registered descriptor'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="431-431"];
m28_187 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", color=green, community=0, file="StateMachine.feature.cs", label="1: testRunner.When(''I change the state of the job to the \'Test\' allowing only transition from the \'En'' +\r\n                    ''queued\' state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="435-436"];
m28_188 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", file="StateMachine.feature.cs", label="testRunner.Then(''changing filters should not be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="438-438"];
m28_189 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", file="StateMachine.feature.cs", label="this.ScenarioCleanup()", span="440-440"];
m28_190 [cluster="HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", file="StateMachine.feature.cs", label="Exit HangFire.Tests.StateMachineFeature.ChangingFiltersShouldNotBeExecutedIfTheTransitionIsNotAllowedForTheCurrentState()", span="422-422"];
m28_18 [cluster="HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="Entry HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", span="76-76"];
m28_19 [cluster="HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label=_jobLock, span="78-78"];
m28_20 [cluster="HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="_jobPayload = payload", span="80-80"];
m28_21 [cluster="HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", file="StateMachine.feature.cs", label="_jobIsReady.Set()", span="83-83"];
m28_219 [file="StateMachine.feature.cs", label="HangFire.Tests.StateMachineFeature", span=""];
m29_24 [cluster="Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", file="StateSteps.cs", label="Entry Hangfire.Server.IServerComponent.Execute(System.Threading.CancellationToken)", span="22-22"];
m29_5 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="StateSteps.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m29_25 [cluster="string.Format(string, object)", file="StateSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m29_21 [cluster="Hangfire.Server.ServerComponentExtensions.TrySetThreadName(string)", file="StateSteps.cs", label="Entry Hangfire.Server.ServerComponentExtensions.TrySetThreadName(string)", span="52-52"];
m29_27 [cluster="Hangfire.Server.ServerComponentExtensions.TrySetThreadName(string)", file="StateSteps.cs", label="Thread.CurrentThread.Name = name", span="56-56"];
m29_28 [cluster="Hangfire.Server.ServerComponentExtensions.TrySetThreadName(string)", file="StateSteps.cs", label=InvalidOperationException, span="58-58"];
m29_29 [cluster="Hangfire.Server.ServerComponentExtensions.TrySetThreadName(string)", file="StateSteps.cs", label="Exit Hangfire.Server.ServerComponentExtensions.TrySetThreadName(string)", span="52-52"];
m29_23 [cluster="Hangfire.Logging.ILog.DebugFormat(string, params object[])", file="StateSteps.cs", label="Entry Hangfire.Logging.ILog.DebugFormat(string, params object[])", span="122-122"];
m29_22 [cluster="Hangfire.Logging.LogProvider.GetLogger(string)", file="StateSteps.cs", label="Entry Hangfire.Logging.LogProvider.GetLogger(string)", span="363-363"];
m29_0 [cluster="Hangfire.Server.ServerComponentExtensions.CreateTask(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="Entry Hangfire.Server.ServerComponentExtensions.CreateTask(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", span="10-10"];
m29_1 [cluster="Hangfire.Server.ServerComponentExtensions.CreateTask(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="component == null", span="12-12"];
m29_3 [cluster="Hangfire.Server.ServerComponentExtensions.CreateTask(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="return Task.Factory.StartNew(\r\n                () => RunComponent(component, cancellationToken),\r\n                cancellationToken,\r\n                TaskCreationOptions.AttachedToParent | TaskCreationOptions.LongRunning,\r\n                TaskScheduler.Default);", span="14-18"];
m29_2 [cluster="Hangfire.Server.ServerComponentExtensions.CreateTask(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="throw new ArgumentNullException(''component'');", span="12-12"];
m29_4 [cluster="Hangfire.Server.ServerComponentExtensions.CreateTask(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="Exit Hangfire.Server.ServerComponentExtensions.CreateTask(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", span="10-10"];
m29_26 [cluster="Hangfire.Logging.ILog.FatalException(string, System.Exception)", file="StateSteps.cs", label="Entry Hangfire.Logging.ILog.FatalException(string, System.Exception)", span="188-188"];
m29_6 [cluster="System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)", file="StateSteps.cs", label="Entry System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)", span="0-0"];
m29_7 [cluster="lambda expression", file="StateSteps.cs", label="Entry lambda expression", span="15-15"];
m29_8 [cluster="lambda expression", file="StateSteps.cs", label="RunComponent(component, cancellationToken)", span="15-15"];
m29_9 [cluster="lambda expression", file="StateSteps.cs", label="Exit lambda expression", span="15-15"];
m29_20 [cluster="object.ToString()", file="StateSteps.cs", label="Entry object.ToString()", span="0-0"];
m29_10 [cluster="Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="Entry Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", span="21-21"];
m29_11 [cluster="Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="TrySetThreadName(component.ToString())", span="26-26"];
m29_12 [cluster="Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="var logger = LogProvider.GetLogger(component.ToString())", span="30-30"];
m29_13 [cluster="Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="logger.DebugFormat(''Server component '{0}' started.'', component)", span="31-31"];
m29_14 [cluster="Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="component.Execute(cancellationToken)", span="35-35"];
m29_17 [cluster="Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="logger.FatalException(\r\n                    String.Format(\r\n                        ''Fatal error occurred during execution of '{0}' component. It will be stopped. See the exception for details.'',\r\n                        component),\r\n                    ex)", span="42-46"];
m29_18 [cluster="Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="logger.DebugFormat(''Server component '{0}' stopped.'', component)", span="49-49"];
m29_15 [cluster="Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label=OperationCanceledException, span="37-37"];
m29_16 [cluster="Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label=Exception, span="40-40"];
m29_19 [cluster="Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", file="StateSteps.cs", label="Exit Hangfire.Server.ServerComponentExtensions.RunComponent(Hangfire.Server.IServerComponent, System.Threading.CancellationToken)", span="21-21"];
m29_30 [file="StateSteps.cs", label="Hangfire.Server.IServerComponent", span=""];
m29_31 [file="StateSteps.cs", label="System.Threading.CancellationToken", span=""];
m30_0 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="SucceededState.feature.cs", label="Entry HangFire.Web.FontsHandler.FontsHandler(string)", span="22-22"];
m30_1 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="SucceededState.feature.cs", label="CacheResponse = true", span="25-25"];
m30_2 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="SucceededState.feature.cs", label="fontName.EndsWith(''.eot'', StringComparison.OrdinalIgnoreCase)", span="27-27"];
m30_3 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", color=green, community=0, file="SucceededState.feature.cs", label="1: ContentType = ''application/vnd.ms-fontobject''", span="29-29"];
m30_4 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", color=green, community=0, file="SucceededState.feature.cs", label="1: fontName.EndsWith(''.svg'', StringComparison.OrdinalIgnoreCase)", span="31-31"];
m30_25 [cluster="Unk.OnScenarioStart", file="SucceededState.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m30_29 [cluster="Unk.CollectScenarioErrors", file="SucceededState.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m30_14 [cluster="HangFire.Tests.States.SucceededStateFeature.TestInitialize()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.TestInitialize()", span="46-46"];
m30_15 [cluster="HangFire.Tests.States.SucceededStateFeature.TestInitialize()", color=red, community=0, file="SucceededState.feature.cs", label="0: ((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Succeeded state''))", span="48-49"];
m30_16 [cluster="HangFire.Tests.States.SucceededStateFeature.TestInitialize()", color=red, community=0, file="SucceededState.feature.cs", label="1: HangFire.Tests.States.SucceededStateFeature.FeatureSetup(null)", span="51-51"];
m30_17 [cluster="HangFire.Tests.States.SucceededStateFeature.TestInitialize()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.TestInitialize()", span="46-46"];
m30_21 [cluster="Unk.OnScenarioEnd", file="SucceededState.feature.cs", label="Entry Unk.OnScenarioEnd", span=""];
m30_18 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioTearDown()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.ScenarioTearDown()", span="56-56"];
m30_19 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioTearDown()", file="SucceededState.feature.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m30_20 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioTearDown()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.ScenarioTearDown()", span="56-56"];
m30_11 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureTearDown()", file="SucceededState.feature.cs", label="testRunner = null", span="42-42"];
m30_26 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioCleanup()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.ScenarioCleanup()", span="66-66"];
m30_27 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioCleanup()", file="SucceededState.feature.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m30_28 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioCleanup()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.ScenarioCleanup()", span="66-66"];
m30_89 [cluster="Unk.And", file="SucceededState.feature.cs", label="Entry Unk.And", span=""];
m30_99 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", span="225-225"];
m30_100 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SucceededState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should remove the job from the succeeded list'', ((string[])(null)))", span="227-227"];
m30_101 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SucceededState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="229-229"];
m30_102 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SucceededState.feature.cs", label="this.FeatureBackground()", span="231-231"];
m30_103 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SucceededState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="233-233"];
m30_104 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SucceededState.feature.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="235-235"];
m30_105 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SucceededState.feature.cs", label="testRunner.Then(''the job should be removed from the succeeded list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="237-237"];
m30_106 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SucceededState.feature.cs", label="this.ScenarioCleanup()", span="239-239"];
m30_107 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", span="225-225"];
m30_5 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", color=green, community=0, file="SucceededState.feature.cs", label="0: ContentType = ''image/svg+xml''", span="33-33"];
m30_9 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="SucceededState.feature.cs", label="ContentType = ''application/font-woff''", span="41-41"];
m30_10 [cluster="HangFire.Web.FontsHandler.FontsHandler(string)", file="SucceededState.feature.cs", label="Exit HangFire.Web.FontsHandler.FontsHandler(string)", span="22-22"];
m30_12 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureTearDown()", file="SucceededState.feature.cs", label="HangFire.Web.FontsHandler", span=""];
m30_30 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", span="71-71"];
m30_31 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", file="SucceededState.feature.cs", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75"];
m30_32 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", file="SucceededState.feature.cs", label="testRunner.Given(''the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="77-77"];
m30_33 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", span="71-71"];
m30_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SucceededState.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m30_8 [cluster="Unk.OnFeatureStart", file="SucceededState.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m30_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SucceededState.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m30_13 [cluster="Unk.OnFeatureEnd", file="SucceededState.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m30_44 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102"];
m30_45 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="SucceededState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should have the correct properties set'', ((string[])(null)))", span="104-104"];
m30_46 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="SucceededState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="106-106"];
m30_47 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="SucceededState.feature.cs", label="this.FeatureBackground()", span="108-108"];
m30_48 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="SucceededState.feature.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112"];
m30_49 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="SucceededState.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''SucceededAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115"];
m30_50 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="SucceededState.feature.cs", label="testRunner.Then(''properties table should contain the following items:'', ((string)(null)), table1, ''Then '')", span="117-117"];
m30_51 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="SucceededState.feature.cs", label="this.ScenarioCleanup()", span="119-119"];
m30_52 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102"];
m30_72 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", span="164-164"];
m30_73 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SucceededState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying it should add the job to the succeeded list'', ((string[])(null)))", span="166-166"];
m30_74 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SucceededState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="168-168"];
m30_75 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SucceededState.feature.cs", label="this.FeatureBackground()", span="170-170"];
m30_76 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SucceededState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="172-172"];
m30_77 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SucceededState.feature.cs", label="testRunner.Then(''the job should be added to the succeeded list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="174-174"];
m30_78 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SucceededState.feature.cs", label="this.ScenarioCleanup()", span="176-176"];
m30_79 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", span="164-164"];
m30_63 [cluster="Unk.When", file="SucceededState.feature.cs", label="Entry Unk.When", span=""];
m30_80 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", span="183-183"];
m30_81 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SucceededState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should persist the job data'', ((string[])(null)))", span="185-185"];
m30_82 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SucceededState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="187-187"];
m30_83 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SucceededState.feature.cs", label="this.FeatureBackground()", span="189-189"];
m30_84 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SucceededState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="191-191"];
m30_85 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SucceededState.feature.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="193-193"];
m30_86 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SucceededState.feature.cs", label="testRunner.Then(''it should persist the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="195-195"];
m30_87 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SucceededState.feature.cs", label="this.ScenarioCleanup()", span="197-197"];
m30_88 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", span="183-183"];
m30_90 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", span="204-204"];
m30_91 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should change the stats'', ((string[])(null)))", span="206-206"];
m30_92 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="208-208"];
m30_93 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="this.FeatureBackground()", span="210-210"];
m30_94 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="212-212"];
m30_95 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="214-214"];
m30_96 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="testRunner.Then(''it should decrease the succeeded counter'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="216-216"];
m30_97 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="this.ScenarioCleanup()", span="218-218"];
m30_98 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", span="204-204"];
m30_54 [cluster="Unk.AddRow", file="SucceededState.feature.cs", label="Entry Unk.AddRow", span=""];
m30_55 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", span="126-126"];
m30_56 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SucceededState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying it should expire the job data'', ((string[])(null)))", span="128-128"];
m30_57 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SucceededState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="130-130"];
m30_58 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SucceededState.feature.cs", label="this.FeatureBackground()", span="132-132"];
m30_59 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SucceededState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="134-134"];
m30_60 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SucceededState.feature.cs", label="testRunner.Then(''it should expire the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="136-136"];
m30_61 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SucceededState.feature.cs", label="this.ScenarioCleanup()", span="138-138"];
m30_62 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldExpireTheJobData()", span="126-126"];
m30_35 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", span="85-85"];
m30_36 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="SucceededState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name should be \'Succeeded\''', ((string[])(null)))", span="87-87"];
m30_37 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="SucceededState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="89-89"];
m30_38 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="SucceededState.feature.cs", label="this.FeatureBackground()", span="91-91"];
m30_39 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="SucceededState.feature.cs", label="testRunner.Then(''the state name should be equal to \'Succeeded\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="93-93"];
m30_40 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="SucceededState.feature.cs", label="this.ScenarioCleanup()", span="95-95"];
m30_41 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", span="85-85"];
m30_64 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", span="145-145"];
m30_65 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying it should change the stats'', ((string[])(null)))", span="147-147"];
m30_66 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="149-149"];
m30_67 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="this.FeatureBackground()", span="151-151"];
m30_68 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="153-153"];
m30_69 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="testRunner.Then(''it should increase the succeeded counter'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="155-155"];
m30_70 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="this.ScenarioCleanup()", span="157-157"];
m30_71 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", span="145-145"];
m30_42 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SucceededState.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m30_22 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SucceededState.feature.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m30_23 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SucceededState.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m30_24 [cluster="HangFire.Tests.States.SucceededStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SucceededState.feature.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m30_34 [cluster="Unk.Given", file="SucceededState.feature.cs", label="Entry Unk.Given", span=""];
m30_43 [cluster="Unk.Then", file="SucceededState.feature.cs", label="Entry Unk.Then", span=""];
m30_53 [cluster="TechTalk.SpecFlow.Table.cstr", file="SucceededState.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m30_108 [file="SucceededState.feature.cs", label="HangFire.Tests.States.SucceededStateFeature", span=""];
m31_12 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="TestExceptionFilter.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m31_0 [cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="TestExceptionFilter.cs", label="Entry HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", span="16-16"];
m31_1 [cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="TestExceptionFilter.cs", label="_name = name", span="19-19"];
m31_2 [cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="TestExceptionFilter.cs", label="_results = results", span="20-20"];
m31_3 [cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="TestExceptionFilter.cs", label="_handlesException = handlesException", span="21-21"];
m31_4 [cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="TestExceptionFilter.cs", label="Exit HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", span="16-16"];
m31_13 [cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="TestExceptionFilter.cs", label="Entry HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", span="36-36"];
m31_14 [cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", color=red, community=0, file="TestExceptionFilter.cs", label="0: Assert.IsNotNull(filterContext)", span="38-38"];
m31_17 [cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="TestExceptionFilter.cs", label="filterContext.ExceptionHandled = true", span="44-44"];
m31_15 [cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="TestExceptionFilter.cs", label="_results.Add(_name)", span="40-40"];
m31_16 [cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="TestExceptionFilter.cs", label=_handlesException, span="42-42"];
m31_18 [cluster="HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", file="TestExceptionFilter.cs", label="Exit HangFire.Tests.TestExceptionFilter.OnServerException(HangFire.Server.Filters.ServerExceptionContext)", span="36-36"];
m31_11 [cluster="Unk.IsNotNull", file="TestExceptionFilter.cs", label="Entry Unk.IsNotNull", span=""];
m31_5 [cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", file="TestExceptionFilter.cs", label="Entry HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", span="24-24"];
m31_6 [cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", color=red, community=0, file="TestExceptionFilter.cs", label="0: Assert.IsNotNull(filterContext)", span="26-26"];
m31_9 [cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", file="TestExceptionFilter.cs", label="filterContext.ExceptionHandled = true", span="32-32"];
m31_7 [cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", file="TestExceptionFilter.cs", label="_results.Add(_name)", span="28-28"];
m31_8 [cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", file="TestExceptionFilter.cs", label=_handlesException, span="30-30"];
m31_10 [cluster="HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", file="TestExceptionFilter.cs", label="Exit HangFire.Tests.TestExceptionFilter.OnClientException(HangFire.Client.Filters.ClientExceptionContext)", span="24-24"];
m31_19 [file="TestExceptionFilter.cs", label="HangFire.Tests.TestExceptionFilter", span=""];
m32_2 [cluster="Hangfire.Server.IServerSupervisor.Stop()", file="TestFilter.cs", label="Entry Hangfire.Server.IServerSupervisor.Stop()", span="23-23"];
m32_3 [cluster="Hangfire.Server.IServerSupervisor.Stop()", file="TestFilter.cs", label="Exit Hangfire.Server.IServerSupervisor.Stop()", span="23-23"];
m32_0 [cluster="Hangfire.Server.IServerSupervisor.Start()", file="TestFilter.cs", label="Entry Hangfire.Server.IServerSupervisor.Start()", span="22-22"];
m32_1 [cluster="Hangfire.Server.IServerSupervisor.Start()", file="TestFilter.cs", label="Exit Hangfire.Server.IServerSupervisor.Start()", span="22-22"];
m33_10 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="TestStateChangedFilter.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m33_11 [cluster="HangFire.Tests.TestStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="TestStateChangedFilter.cs", label="Entry HangFire.Tests.TestStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", span="27-27"];
m33_12 [cluster="HangFire.Tests.TestStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", color=red, community=0, file="TestStateChangedFilter.cs", label="0: Assert.IsNotNull(context)", span="29-29"];
m33_13 [cluster="HangFire.Tests.TestStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="TestStateChangedFilter.cs", label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnStateUnapplied''))", span="31-31"];
m33_14 [cluster="HangFire.Tests.TestStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="TestStateChangedFilter.cs", label="Exit HangFire.Tests.TestStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", span="27-27"];
m33_0 [cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", file="TestStateChangedFilter.cs", label="Entry HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", span="14-14"];
m33_1 [cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", file="TestStateChangedFilter.cs", label="_name = name", span="16-16"];
m33_2 [cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", file="TestStateChangedFilter.cs", label="_results = results", span="17-17"];
m33_3 [cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", file="TestStateChangedFilter.cs", label="Exit HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", span="14-14"];
m33_9 [cluster="string.Format(string, object, object)", file="TestStateChangedFilter.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m33_8 [cluster="Unk.IsNotNull", file="TestStateChangedFilter.cs", label="Entry Unk.IsNotNull", span=""];
m33_4 [cluster="HangFire.Tests.TestStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="TestStateChangedFilter.cs", label="Entry HangFire.Tests.TestStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", span="20-20"];
m33_5 [cluster="HangFire.Tests.TestStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", color=red, community=0, file="TestStateChangedFilter.cs", label="0: Assert.IsNotNull(context)", span="22-22"];
m33_6 [cluster="HangFire.Tests.TestStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="TestStateChangedFilter.cs", label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnStateApplied''))", span="24-24"];
m33_7 [cluster="HangFire.Tests.TestStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="TestStateChangedFilter.cs", label="Exit HangFire.Tests.TestStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", span="20-20"];
m33_15 [file="TestStateChangedFilter.cs", label="HangFire.Tests.TestStateChangedFilter", span=""];
m34_10 [cluster="System.TimeSpan.FromSeconds(double)", file="TestStateChangingFilter.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m34_11 [cluster="System.TimeSpan.FromMinutes(double)", file="TestStateChangingFilter.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m34_12 [cluster="System.TimeSpan.FromHours(double)", file="TestStateChangingFilter.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m34_0 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="TestStateChangingFilter.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25"];
m34_1 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="TestStateChangingFilter.cs", label="TransactionIsolationLevel = null", span="27-27"];
m34_2 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="TestStateChangingFilter.cs", label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="28-28"];
m34_3 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="TestStateChangingFilter.cs", label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", span="29-29"];
m34_4 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="TestStateChangingFilter.cs", label="JobExpirationCheckInterval = TimeSpan.FromHours(1)", span="30-30"];
m34_5 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="TestStateChangingFilter.cs", label="CountersAggregateInterval = TimeSpan.FromMinutes(5)", span="31-31"];
m34_6 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="TestStateChangingFilter.cs", label="PrepareSchemaIfNecessary = true", span="32-32"];
m34_7 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="TestStateChangingFilter.cs", label="DashboardJobListLimit = 50000", span="33-33"];
m34_8 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="TestStateChangingFilter.cs", label="TransactionTimeout = TimeSpan.FromMinutes(1)", span="34-34"];
m34_9 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="TestStateChangingFilter.cs", label="Exit Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="25-25"];
m34_13 [file="TestStateChangingFilter.cs", label="Hangfire.SqlServer.SqlServerStorageOptions", span=""];
m35_25 [cluster="Unk.OnScenarioStart", file="WorkerManager.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m35_29 [cluster="Unk.CollectScenarioErrors", file="WorkerManager.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m35_21 [cluster="Unk.OnScenarioEnd", file="WorkerManager.feature.cs", label="Entry Unk.OnScenarioEnd", span=""];
m35_42 [cluster="HangFire.Tests.Server.WorkerManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", span="94-94"];
m35_43 [cluster="HangFire.Tests.Server.WorkerManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="WorkerManager.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Successfully performed job should have the Succeeded state'', ((string[])(null)))", span="96-96"];
m35_44 [cluster="HangFire.Tests.Server.WorkerManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="WorkerManager.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="98-98"];
m35_45 [cluster="HangFire.Tests.Server.WorkerManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="WorkerManager.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="100-100"];
m35_46 [cluster="HangFire.Tests.Server.WorkerManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="WorkerManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="102-102"];
m35_47 [cluster="HangFire.Tests.Server.WorkerManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="WorkerManager.feature.cs", label="testRunner.Then(''its state should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="104-104"];
m35_48 [cluster="HangFire.Tests.Server.WorkerManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="WorkerManager.feature.cs", label="testRunner.And(''the job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106"];
m35_49 [cluster="HangFire.Tests.Server.WorkerManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="WorkerManager.feature.cs", label="this.ScenarioCleanup()", span="108-108"];
m35_50 [cluster="HangFire.Tests.Server.WorkerManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.SuccessfullyPerformedJobShouldHaveTheSucceededState()", span="94-94"];
m35_18 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ScenarioTearDown()", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.ScenarioTearDown()", span="56-56"];
m35_19 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ScenarioTearDown()", file="WorkerManager.feature.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m35_20 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ScenarioTearDown()", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.ScenarioTearDown()", span="56-56"];
m35_26 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ScenarioCleanup()", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.ScenarioCleanup()", span="66-66"];
m35_27 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ScenarioCleanup()", color=green, community=0, file="WorkerManager.feature.cs", label="0: testRunner.CollectScenarioErrors()", span="68-68"];
m35_28 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ScenarioCleanup()", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.ScenarioCleanup()", span="66-66"];
m35_81 [cluster="HangFire.Tests.Server.WorkerManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", span="184-184"];
m35_82 [cluster="HangFire.Tests.Server.WorkerManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="WorkerManager.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Disposable job should be disposed after processing'', ((string[])(null)))", span="186-186"];
m35_83 [cluster="HangFire.Tests.Server.WorkerManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="WorkerManager.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="188-188"];
m35_84 [cluster="HangFire.Tests.Server.WorkerManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="WorkerManager.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="190-190"];
m35_85 [cluster="HangFire.Tests.Server.WorkerManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="WorkerManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="192-192"];
m35_86 [cluster="HangFire.Tests.Server.WorkerManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="WorkerManager.feature.cs", label="testRunner.Then(''the job should be disposed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="194-194"];
m35_87 [cluster="HangFire.Tests.Server.WorkerManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="WorkerManager.feature.cs", label="this.ScenarioCleanup()", span="196-196"];
m35_88 [cluster="HangFire.Tests.Server.WorkerManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.DisposableJobShouldBeDisposedAfterProcessing()", span="184-184"];
m35_30 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ManagerShouldPerformAJob()", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.ManagerShouldPerformAJob()", span="75-75"];
m35_31 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ManagerShouldPerformAJob()", color=green, community=0, file="WorkerManager.feature.cs", label="0: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Manager should perform a job'', ((string[])(null)))", span="77-77"];
m35_32 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ManagerShouldPerformAJob()", file="WorkerManager.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m35_33 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ManagerShouldPerformAJob()", file="WorkerManager.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m35_34 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ManagerShouldPerformAJob()", file="WorkerManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="83-83"];
m35_35 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ManagerShouldPerformAJob()", file="WorkerManager.feature.cs", label="testRunner.Then(''the job should be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="85-85"];
m35_36 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ManagerShouldPerformAJob()", file="WorkerManager.feature.cs", label="this.ScenarioCleanup()", span="87-87"];
m35_37 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ManagerShouldPerformAJob()", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.ManagerShouldPerformAJob()", span="75-75"];
m35_52 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", span="115-115"];
m35_53 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="WorkerManager.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After performing the broken job, it should have the Failed state'', ((string[])(null)))", span="117-117"];
m35_54 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="WorkerManager.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="119-119"];
m35_55 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="WorkerManager.feature.cs", label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="121-121"];
m35_56 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="WorkerManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="123-123"];
m35_57 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="WorkerManager.feature.cs", label="testRunner.Then(''its state should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="125-125"];
m35_58 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="WorkerManager.feature.cs", label="testRunner.And(''the job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="127-127"];
m35_59 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="WorkerManager.feature.cs", label="this.ScenarioCleanup()", span="129-129"];
m35_60 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.AfterPerformingTheBrokenJobItShouldHaveTheFailedState()", span="115-115"];
m35_51 [cluster="Unk.And", file="WorkerManager.feature.cs", label="Entry Unk.And", span=""];
m35_70 [cluster="Unk.But", file="WorkerManager.feature.cs", label="Entry Unk.But", span=""];
m35_5 [cluster="Unk.GetTestRunner", file="WorkerManager.feature.cs", label="Entry Unk.GetTestRunner", span=""];
m35_13 [cluster="Unk.OnFeatureEnd", file="WorkerManager.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m35_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="WorkerManager.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m35_40 [cluster="Unk.When", file="WorkerManager.feature.cs", label="Entry Unk.When", span=""];
m35_103 [cluster="Unk.AddRow", file="WorkerManager.feature.cs", label="Entry Unk.AddRow", span=""];
m35_89 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", span="203-203"];
m35_90 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job arguments should be deserialized correctly'', ((string[])(null)))", span="205-205"];
m35_91 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="207-207"];
m35_92 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="testRunner.Given(''the following job type:'', ''public void CustomJob : BackgroundJob\r\n{\r\n    public int ArticleId { get; set; }\r'' +\r\n                    ''\n    public string Author { get; set; }\r\n\r\n    public override void Perform()\r\n '' +\r\n                    ''   {\r\n    }\r\n} '', ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="210-212"];
m35_93 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="214-216"];
m35_94 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''ArticleId'',\r\n                        ''2''})", span="217-219"];
m35_95 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''Author'',\r\n                        ''nobody''})", span="220-222"];
m35_96 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="testRunner.And(''an enqueued CustomJob with the following arguments:'', ((string)(null)), table1, ''And '')", span="224-224"];
m35_97 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="226-226"];
m35_98 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="testRunner.Then(''the last ArticleId should be equal to 2'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="228-228"];
m35_99 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="testRunner.And(''the last Author should be equal to \'nobody\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="230-230"];
m35_100 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", color=green, community=0, file="WorkerManager.feature.cs", label="0: this.ScenarioCleanup()", span="232-232"];
m35_101 [cluster="HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.JobArgumentsShouldBeDeserializedCorrectly()", span="203-203"];
m35_71 [cluster="HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", span="160-160"];
m35_72 [cluster="HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="WorkerManager.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Worker should processes only jobs in the Enqueued state, but it should remove the'' +\r\n                    '' job from the dequeued list anyway'', ((string[])(null)))", span="162-163"];
m35_73 [cluster="HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="WorkerManager.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="165-165"];
m35_74 [cluster="HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="WorkerManager.feature.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="167-167"];
m35_75 [cluster="HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="WorkerManager.feature.cs", label="testRunner.And(''its state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="169-169"];
m35_76 [cluster="HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="WorkerManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="171-171"];
m35_77 [cluster="HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="WorkerManager.feature.cs", label="testRunner.Then(''the job should not be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="173-173"];
m35_78 [cluster="HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="WorkerManager.feature.cs", label="testRunner.But(''it should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="175-175"];
m35_79 [cluster="HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="WorkerManager.feature.cs", label="this.ScenarioCleanup()", span="177-177"];
m35_80 [cluster="HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.WorkerShouldProcessesOnlyJobsInTheEnqueuedStateButItShouldRemoveTheJobFromTheDequeuedListAnyway()", span="160-160"];
m35_0 [cluster="HangFire.Tests.Server.WorkerManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m35_1 [cluster="HangFire.Tests.Server.WorkerManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="WorkerManager.feature.cs", label="0: testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m35_2 [cluster="HangFire.Tests.Server.WorkerManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="WorkerManager.feature.cs", label="1: TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Worker manager'', ''\r\n  As a user, I expect that my enqueued jobs will be processed by the Server.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m35_3 [cluster="HangFire.Tests.Server.WorkerManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerManager.feature.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m35_4 [cluster="HangFire.Tests.Server.WorkerManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m35_38 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="WorkerManager.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m35_9 [cluster="HangFire.Tests.Server.WorkerManagerFeature.FeatureTearDown()", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.FeatureTearDown()", span="39-39"];
m35_10 [cluster="HangFire.Tests.Server.WorkerManagerFeature.FeatureTearDown()", file="WorkerManager.feature.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m35_11 [cluster="HangFire.Tests.Server.WorkerManagerFeature.FeatureTearDown()", file="WorkerManager.feature.cs", label="testRunner = null", span="42-42"];
m35_12 [cluster="HangFire.Tests.Server.WorkerManagerFeature.FeatureTearDown()", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.FeatureTearDown()", span="39-39"];
m35_61 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", span="137-137"];
m35_62 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="WorkerManager.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''An unexisting job should not be processed, but it should be removed from the dequ'' +\r\n                    ''eued list'', ((string[])(null)))", span="139-140"];
m35_63 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="WorkerManager.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="142-142"];
m35_64 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="WorkerManager.feature.cs", label="testRunner.Given(''the \'unexisting\' job, that was enqueued'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="144-144"];
m35_65 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="WorkerManager.feature.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="146-146"];
m35_66 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="WorkerManager.feature.cs", label="testRunner.Then(''there should be no performing actions'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="148-148"];
m35_67 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="WorkerManager.feature.cs", label="testRunner.But(''the \'unexisting\' job should be removed from the dequeued list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="150-150"];
m35_68 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="WorkerManager.feature.cs", label="this.ScenarioCleanup()", span="152-152"];
m35_69 [cluster="HangFire.Tests.Server.WorkerManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.AnUnexistingJobShouldNotBeProcessedButItShouldBeRemovedFromTheDequeuedList()", span="137-137"];
m35_41 [cluster="Unk.Then", file="WorkerManager.feature.cs", label="Entry Unk.Then", span=""];
m35_39 [cluster="Unk.Given", file="WorkerManager.feature.cs", label="Entry Unk.Given", span=""];
m35_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="WorkerManager.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m35_22 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m35_23 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerManager.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m35_24 [cluster="HangFire.Tests.Server.WorkerManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m35_102 [cluster="TechTalk.SpecFlow.Table.cstr", file="WorkerManager.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m35_8 [cluster="Unk.OnFeatureStart", file="WorkerManager.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m35_14 [cluster="HangFire.Tests.Server.WorkerManagerFeature.TestInitialize()", file="WorkerManager.feature.cs", label="Entry HangFire.Tests.Server.WorkerManagerFeature.TestInitialize()", span="46-46"];
m35_15 [cluster="HangFire.Tests.Server.WorkerManagerFeature.TestInitialize()", color=red, community=0, file="WorkerManager.feature.cs", label="0: ((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Worker manager''))", span="48-49"];
m35_16 [cluster="HangFire.Tests.Server.WorkerManagerFeature.TestInitialize()", color=red, community=0, file="WorkerManager.feature.cs", label="1: HangFire.Tests.Server.WorkerManagerFeature.FeatureSetup(null)", span="51-51"];
m35_17 [cluster="HangFire.Tests.Server.WorkerManagerFeature.TestInitialize()", file="WorkerManager.feature.cs", label="Exit HangFire.Tests.Server.WorkerManagerFeature.TestInitialize()", span="46-46"];
m35_104 [file="WorkerManager.feature.cs", label="HangFire.Tests.Server.WorkerManagerFeature", span=""];
m36_2 [cluster="HangFire.States.SucceededState.GetProperties()", file="WorkerManagerSteps.cs", label="Entry HangFire.States.SucceededState.GetProperties()", span="19-19"];
m36_3 [cluster="HangFire.States.SucceededState.GetProperties()", file="WorkerManagerSteps.cs", label="return new Dictionary<string, string>\r\n                {\r\n                    { ''SucceededAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) }\r\n                };", span="21-24"];
m36_4 [cluster="HangFire.States.SucceededState.GetProperties()", file="WorkerManagerSteps.cs", label="Exit HangFire.States.SucceededState.GetProperties()", span="19-19"];
m36_5 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="WorkerManagerSteps.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m36_17 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="WorkerManagerSteps.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m36_33 [cluster="Unk.EnqueueItemOnList", file="WorkerManagerSteps.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m36_41 [cluster="Unk.IncrementValue", file="WorkerManagerSteps.cs", label="Entry Unk.IncrementValue", span=""];
m36_37 [cluster="Unk.TrimList", file="WorkerManagerSteps.cs", label="Entry Unk.TrimList", span=""];
m36_57 [cluster="Unk.Persist", file="WorkerManagerSteps.cs", label="Entry Unk.Persist", span=""];
m36_22 [cluster="string.Format(string, object)", file="WorkerManagerSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m36_42 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="WorkerManagerSteps.cs", label="Entry HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", span="51-51"];
m36_43 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="WorkerManagerSteps.cs", label="transaction == null", span="53-53"];
m36_45 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="WorkerManagerSteps.cs", label="transaction.QueueCommand(x => x.DecrementValue(''hangfire:stats:succeeded''))", span="55-55"];
m36_46 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="WorkerManagerSteps.cs", label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}'', jobId)))", span="57-58"];
m36_47 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="WorkerManagerSteps.cs", label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId)))", span="59-60"];
m36_48 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="WorkerManagerSteps.cs", label="transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:state'', jobId)))", span="61-62"];
m36_44 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="WorkerManagerSteps.cs", label="throw new ArgumentNullException(''transaction'');", span="53-53"];
m36_49 [cluster="HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", file="WorkerManagerSteps.cs", label="Exit HangFire.States.SucceededState.Descriptor.Unapply(IRedisTransaction, string)", span="51-51"];
m36_18 [cluster="Unk.QueueCommand", file="WorkerManagerSteps.cs", label="Entry Unk.QueueCommand", span=""];
m36_23 [cluster="Unk.ExpireEntryIn", file="WorkerManagerSteps.cs", label="Entry Unk.ExpireEntryIn", span=""];
m36_12 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="WorkerManagerSteps.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:state'', JobId),\r\n                _jobExpirationTimeout))", span="39-41"];
m36_7 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="WorkerManagerSteps.cs", label="Entry HangFire.States.SucceededState.Apply(IRedisTransaction)", span="27-27"];
m36_8 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="WorkerManagerSteps.cs", label="transaction == null", span="29-29"];
m36_10 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="WorkerManagerSteps.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobExpirationTimeout))", span="31-33"];
m36_11 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="WorkerManagerSteps.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:history'', JobId),\r\n                _jobExpirationTimeout))", span="35-37"];
m36_13 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="WorkerManagerSteps.cs", label="transaction.QueueCommand(x => x.EnqueueItemOnList(''hangfire:succeeded'', JobId))", span="43-43"];
m36_14 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="WorkerManagerSteps.cs", label="transaction.QueueCommand(x => x.TrimList(''hangfire:succeeded'', 0, 99))", span="44-44"];
m36_15 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="WorkerManagerSteps.cs", label="transaction.QueueCommand(x => x.IncrementValue(''hangfire:stats:succeeded''))", span="46-46"];
m36_9 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="WorkerManagerSteps.cs", label="throw new ArgumentNullException(''transaction'');", span="29-29"];
m36_16 [cluster="HangFire.States.SucceededState.Apply(IRedisTransaction)", file="WorkerManagerSteps.cs", label="Exit HangFire.States.SucceededState.Apply(IRedisTransaction)", span="27-27"];
m36_0 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="WorkerManagerSteps.cs", label="Entry HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m36_1 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="WorkerManagerSteps.cs", label="Exit HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m36_53 [cluster="Unk.DecrementValue", file="WorkerManagerSteps.cs", label="Entry Unk.DecrementValue", span=""];
m36_61 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Entry lambda expression", span="61-62"];
m36_19 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Entry lambda expression", span="31-33"];
m36_24 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Entry lambda expression", span="35-37"];
m36_27 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Entry lambda expression", span="39-41"];
m36_30 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Entry lambda expression", span="43-43"];
m36_34 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Entry lambda expression", span="44-44"];
m36_38 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Entry lambda expression", span="46-46"];
m36_20 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}'', JobId),\r\n                _jobExpirationTimeout)", span="31-33"];
m36_21 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Exit lambda expression", span="31-33"];
m36_25 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:history'', JobId),\r\n                _jobExpirationTimeout)", span="35-37"];
m36_26 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Exit lambda expression", span="35-37"];
m36_28 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="x.ExpireEntryIn(\r\n                String.Format(''hangfire:job:{0}:state'', JobId),\r\n                _jobExpirationTimeout)", span="39-41"];
m36_29 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Exit lambda expression", span="39-41"];
m36_31 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="x.EnqueueItemOnList(''hangfire:succeeded'', JobId)", span="43-43"];
m36_32 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Exit lambda expression", span="43-43"];
m36_35 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="x.TrimList(''hangfire:succeeded'', 0, 99)", span="44-44"];
m36_36 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Exit lambda expression", span="44-44"];
m36_39 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="x.IncrementValue(''hangfire:stats:succeeded'')", span="46-46"];
m36_40 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Exit lambda expression", span="46-46"];
m36_55 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}'', jobId))", span="57-58"];
m36_59 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:history'', jobId))", span="59-60"];
m36_62 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="((IRedisNativeClient)x).Persist(\r\n                    String.Format(''hangfire:job:{0}:state'', jobId))", span="61-62"];
m36_50 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Entry lambda expression", span="55-55"];
m36_54 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Entry lambda expression", span="57-58"];
m36_58 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Entry lambda expression", span="59-60"];
m36_51 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="x.DecrementValue(''hangfire:stats:succeeded'')", span="55-55"];
m36_52 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Exit lambda expression", span="55-55"];
m36_56 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Exit lambda expression", span="57-58"];
m36_60 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Exit lambda expression", span="59-60"];
m36_63 [cluster="lambda expression", file="WorkerManagerSteps.cs", label="Exit lambda expression", span="61-62"];
m36_6 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="WorkerManagerSteps.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
m36_64 [file="WorkerManagerSteps.cs", label="HangFire.States.SucceededState", span=""];
m36_65 [file="WorkerManagerSteps.cs", label=string, span=""];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [color=red, key=0, style=solid];
m0_1 -> m0_57  [key=2, style=dotted];
m0_2 -> m0_3  [color=red, key=0, style=solid];
m0_2 -> m0_58  [color=red, key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_59  [key=2, style=dotted];
m0_4 -> m0_9  [color=red, key=1, label=from, style=dashed];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_59  [key=2, style=dotted];
m0_5 -> m0_9  [color=red, key=1, label=perPage, style=dashed];
m0_9 -> m0_10  [color=red, key=0, style=solid];
m0_9 -> m0_61  [color=red, key=2, style=dotted];
m0_9 -> m0_62  [color=red, key=2, style=dotted];
m0_9 -> m0_63  [color=red, key=2, style=dotted];
m0_9 -> m0_12  [color=red, key=1, label=pager, style=dashed];
m0_9 -> m0_19  [color=red, key=1, label=pager, style=dashed];
m0_9 -> m0_55  [color=red, key=1, label=pager, style=dashed];
m0_6 -> m0_7  [key=0, style=solid];
m0_7 -> m0_8  [key=0, style=solid];
m0_8 -> m0_9  [color=red, key=0, style=solid];
m0_8 -> m0_60  [key=2, style=dotted];
m0_8 -> m0_10  [color=darkseagreen4, key=1, label=monitor, style=dashed];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_64  [key=2, style=dotted];
m0_10 -> m0_21  [color=red, key=1, label=scheduledJobs, style=dashed];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_14  [color=red, key=0, style=solid];
m0_19 -> m0_20  [color=red, key=0, style=solid];
m0_19 -> m0_66  [key=2, style=dotted];
m0_19 -> m0_67  [key=2, style=dotted];
m0_19 -> m0_68  [key=2, style=dotted];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_72  [key=2, style=dotted];
m0_55 -> m0_67  [key=2, style=dotted];
m0_55 -> m0_68  [key=2, style=dotted];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_57  [key=2, style=dotted];
m0_21 -> m0_22  [color=red, key=0, style=solid];
m0_21 -> m0_54  [color=red, key=0, style=solid];
m0_21 -> m0_23  [color=red, key=1, label=job, style=dashed];
m0_13 -> m0_56  [key=0, style=solid];
m0_13 -> m0_57  [key=2, style=dotted];
m0_14 -> m0_15  [color=red, key=0, style=solid];
m0_14 -> m0_57  [color=red, key=2, style=dotted];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_63  [key=2, style=dotted];
m0_15 -> m0_65  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_57  [key=2, style=dotted];
m0_17 -> m0_18  [color=red, key=0, style=solid];
m0_17 -> m0_63  [key=2, style=dotted];
m0_17 -> m0_65  [key=2, style=dotted];
m0_18 -> m0_19  [color=red, key=0, style=solid];
m0_18 -> m0_57  [color=red, key=2, style=dotted];
m0_20 -> m0_21  [color=red, key=0, style=solid];
m0_20 -> m0_57  [color=red, key=2, style=dotted];
m0_20 -> m0_20  [color=red, key=3, label="Local variable int a", style=bold];
m0_22 -> m0_23  [color=red, key=0, style=solid];
m0_22 -> m0_57  [color=red, key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_54 -> m0_57  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_65  [key=2, style=dotted];
m0_23 -> m0_23  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_23 -> m0_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_57  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_65  [key=2, style=dotted];
m0_25 -> m0_25  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_25 -> m0_27  [color=red, key=1, label=job, style=dashed];
m0_26 -> m0_27  [color=red, key=0, style=solid];
m0_26 -> m0_57  [key=2, style=dotted];
m0_27 -> m0_28  [color=red, key=0, style=solid];
m0_27 -> m0_31  [color=red, key=0, style=solid];
m0_27 -> m0_27  [color=red, key=1, label=job, style=dashed];
m0_27 -> m0_29  [color=red, key=1, label=job, style=dashed];
m0_27 -> m0_32  [color=red, key=1, label=job, style=dashed];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_57  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_57  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_65  [key=2, style=dotted];
m0_29 -> m0_29  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_29 -> m0_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_63  [key=2, style=dotted];
m0_32 -> m0_65  [key=2, style=dotted];
m0_32 -> m0_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_32 -> m0_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_57  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_57  [key=2, style=dotted];
m0_34 -> m0_35  [key=0, style=solid];
m0_34 -> m0_69  [key=2, style=dotted];
m0_34 -> m0_68  [key=2, style=dotted];
m0_34 -> m0_34  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_34 -> m0_36  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_34 -> m0_18  [color=red, key=3, label="Parameter variable string a", style=bold];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_57  [key=2, style=dotted];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_38  [key=0, style=solid];
m0_36 -> m0_36  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_36 -> m0_39  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_57  [key=2, style=dotted];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_57  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_70  [key=2, style=dotted];
m0_39 -> m0_65  [key=2, style=dotted];
m0_39 -> m0_39  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_39 -> m0_41  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_57  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_65  [key=2, style=dotted];
m0_41 -> m0_41  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_41 -> m0_43  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_57  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_63  [key=2, style=dotted];
m0_43 -> m0_65  [key=2, style=dotted];
m0_43 -> m0_43  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_43 -> m0_45  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_57  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_71  [key=2, style=dotted];
m0_45 -> m0_68  [key=2, style=dotted];
m0_45 -> m0_45  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_45 -> m0_47  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_57  [key=2, style=dotted];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_53  [key=0, style=solid];
m0_47 -> m0_47  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_47 -> m0_49  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_57  [key=2, style=dotted];
m0_53 -> m0_21  [color=red, key=0, style=solid];
m0_53 -> m0_57  [key=2, style=dotted];
m0_49 -> m0_50  [key=0, style=solid];
m0_49 -> m0_70  [key=2, style=dotted];
m0_49 -> m0_65  [key=2, style=dotted];
m0_49 -> m0_49  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_49 -> m0_51  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_57  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_65  [key=2, style=dotted];
m0_51 -> m0_51  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_57  [key=2, style=dotted];
m0_56 -> m0_0  [color=blue, key=0, style=bold];
m0_73 -> m0_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_2  [color=red, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_5  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_9  [color=red, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_14  [color=red, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_18  [color=red, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_20  [color=red, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_22  [color=red, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_30  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_33  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_34  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_37  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_38  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_40  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_41  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_42  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_43  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_44  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_45  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_46  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_48  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_49  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_50  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_51  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_52  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_53  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_54  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m0_73 -> m0_55  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.ScheduledJobsPage", style=dashed];
m1_5 -> m1_0  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_4  [key=2, style=dotted];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_7  [key=2, style=dotted];
m1_1 -> m1_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_5  [key=2, style=dotted];
m1_2 -> m1_8  [key=2, style=dotted];
m1_3 -> m1_0  [color=blue, key=0, style=bold];
m1_3 -> m1_4  [color=red, key=0, style=solid];
m1_3 -> m1_9  [key=2, style=dotted];
m1_11 -> m1_12  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_19  [key=2, style=dotted];
m1_28 -> m1_30  [color=darkseagreen4, key=1, label=filter, style=dashed];
m1_28 -> m1_35  [color=darkseagreen4, key=1, label=filter, style=dashed];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_10  [key=2, style=dotted];
m1_29 -> m1_32  [key=2, style=dotted];
m1_29 -> m1_35  [color=darkseagreen4, key=1, label=context, style=dashed];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_33  [key=2, style=dotted];
m1_30 -> m1_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_31 -> m1_27  [color=blue, key=0, style=bold];
m1_4 -> m1_5  [color=red, key=0, style=solid];
m1_4 -> m1_10  [color=red, key=2, style=dotted];
m1_6 -> m1_7  [key=0, style=solid];
m1_7 -> m1_4  [key=2, style=dotted];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_9  [color=darkseagreen4, key=1, label=state, style=dashed];
m1_8 -> m1_9  [key=0, style=solid];
m1_8 -> m1_11  [key=2, style=dotted];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_12  [key=2, style=dotted];
m1_9 -> m1_5  [key=2, style=dotted];
m1_10 -> m1_6  [color=blue, key=0, style=bold];
m1_21 -> m1_22  [key=0, style=solid];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_19  [key=2, style=dotted];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_26  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_20  [key=2, style=dotted];
m1_25 -> m1_21  [color=blue, key=0, style=bold];
m1_14 -> m1_37  [key=0, style=solid];
m1_14 -> m1_15  [color=green, key=0, style=solid];
m1_14 -> m1_4  [color=green, key=2, style=dotted];
m1_37 -> m1_14  [color=blue, key=0, style=bold];
m1_34 -> m1_35  [key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_14  [key=2, style=dotted];
m1_13 -> m1_11  [color=blue, key=0, style=bold];
m1_13 -> m1_14  [color=green, key=0, style=solid];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_26  [key=2, style=dotted];
m1_36 -> m1_34  [color=blue, key=0, style=bold];
m1_15 -> m1_16  [color=green, key=0, style=solid];
m1_15 -> m1_17  [color=green, key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_19  [key=2, style=dotted];
m1_16 -> m1_13  [color=blue, key=0, style=bold];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_20  [key=2, style=dotted];
m1_18 -> m1_15  [color=blue, key=0, style=bold];
m1_38 -> m1_1  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.QueueAttributeFacts", style=dashed];
m1_38 -> m1_2  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.QueueAttributeFacts", style=dashed];
m1_38 -> m1_4  [color=red, key=1, label="HangFire.Core.Tests.QueueAttributeFacts", style=dashed];
m1_38 -> m1_23  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.QueueAttributeFacts", style=dashed];
m1_38 -> m1_24  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.QueueAttributeFacts", style=dashed];
m1_38 -> m1_29  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.QueueAttributeFacts", style=dashed];
m1_39 -> m1_35  [color=darkseagreen4, key=1, label=filter, style=dashed];
m1_40 -> m1_35  [color=darkseagreen4, key=1, label=context, style=dashed];
m2_157 -> m2_158  [key=0, style=solid];
m2_157 -> m2_82  [key=2, style=dotted];
m2_157 -> m2_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_91 -> m2_92  [key=0, style=solid];
m2_92 -> m2_93  [key=0, style=solid];
m2_93 -> m2_94  [key=0, style=solid];
m2_93 -> m2_23  [key=2, style=dotted];
m2_93 -> m2_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_93 -> m2_95  [key=2, style=dotted];
m2_94 -> m2_95  [key=0, style=solid];
m2_94 -> m2_24  [key=2, style=dotted];
m2_94 -> m2_92  [color=blue, key=0, style=bold];
m2_95 -> m2_96  [key=0, style=solid];
m2_95 -> m2_25  [key=2, style=dotted];
m2_96 -> m2_97  [key=0, style=solid];
m2_96 -> m2_26  [key=2, style=dotted];
m2_97 -> m2_91  [color=blue, key=0, style=bold];
m2_97 -> m2_81  [key=2, style=dotted];
m2_97 -> m2_98  [key=0, style=solid];
m2_97 -> m2_102  [color=darkseagreen4, key=1, label=client, style=dashed];
m2_79 -> m2_80  [key=0, style=solid];
m2_79 -> m2_82  [key=2, style=dotted];
m2_79 -> m2_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_154 -> m2_155  [key=0, style=solid];
m2_154 -> m2_10  [key=2, style=dotted];
m2_154 -> m2_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_155 -> m2_81  [key=2, style=dotted];
m2_155 -> m2_156  [key=0, style=solid];
m2_155 -> m2_158  [key=2, style=dotted];
m2_156 -> m2_157  [key=0, style=solid];
m2_156 -> m2_144  [key=2, style=dotted];
m2_156 -> m2_149  [color=blue, key=0, style=bold];
m2_158 -> m2_154  [color=blue, key=0, style=bold];
m2_171 -> m2_172  [key=0, style=solid];
m2_171 -> m2_169  [color=blue, key=0, style=bold];
m2_172 -> m2_173  [key=0, style=solid];
m2_172 -> m2_13  [key=2, style=dotted];
m2_172 -> m2_14  [key=2, style=dotted];
m2_172 -> m2_178  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_172 -> m2_224  [key=0, style=solid];
m2_173 -> m2_81  [key=2, style=dotted];
m2_173 -> m2_174  [key=0, style=solid];
m2_174 -> m2_175  [key=0, style=solid];
m2_174 -> m2_144  [key=2, style=dotted];
m2_174 -> m2_25  [key=2, style=dotted];
m2_175 -> m2_176  [key=0, style=solid];
m2_175 -> m2_26  [key=2, style=dotted];
m2_175 -> m2_173  [color=blue, key=0, style=bold];
m2_176 -> m2_171  [color=blue, key=0, style=bold];
m2_176 -> m2_177  [key=0, style=solid];
m2_144 -> m2_145  [key=0, style=solid];
m2_144 -> m2_42  [key=2, style=dotted];
m2_86 -> m2_87  [key=0, style=solid];
m2_86 -> m2_24  [key=2, style=dotted];
m2_87 -> m2_81  [key=2, style=dotted];
m2_87 -> m2_88  [key=0, style=solid];
m2_87 -> m2_25  [key=2, style=dotted];
m2_89 -> m2_90  [key=0, style=solid];
m2_89 -> m2_82  [key=2, style=dotted];
m2_89 -> m2_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_89 -> m2_80  [color=blue, key=0, style=bold];
m2_88 -> m2_89  [key=0, style=solid];
m2_88 -> m2_91  [key=2, style=dotted];
m2_88 -> m2_26  [key=2, style=dotted];
m2_90 -> m2_86  [color=blue, key=0, style=bold];
m2_16 -> m2_17  [key=0, style=solid];
m2_17 -> m2_18  [key=0, style=solid];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_23  [key=2, style=dotted];
m2_18 -> m2_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_24  [key=2, style=dotted];
m2_20 -> m2_21  [key=0, style=solid];
m2_20 -> m2_25  [key=2, style=dotted];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_26  [key=2, style=dotted];
m2_21 -> m2_23  [key=2, style=dotted];
m2_21 -> m2_14  [key=0, style=solid];
m2_22 -> m2_16  [color=blue, key=0, style=bold];
m2_229 -> m2_230  [key=0, style=solid];
m2_230 -> m2_231  [key=0, style=solid];
m2_231 -> m2_229  [color=blue, key=0, style=bold];
m2_153 -> m2_154  [key=0, style=solid];
m2_153 -> m2_24  [key=2, style=dotted];
m2_153 -> m2_160  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_31 -> m2_181  [key=0, style=solid];
m2_31 -> m2_32  [key=0, style=solid];
m2_181 -> m2_31  [color=blue, key=0, style=bold];
m2_181 -> m2_182  [key=0, style=solid];
m2_181 -> m2_11  [key=2, style=dotted];
m2_30 -> m2_242  [key=0, style=solid];
m2_30 -> m2_28  [color=blue, key=0, style=bold];
m2_242 -> m2_243  [key=0, style=solid];
m2_243 -> m2_30  [color=blue, key=0, style=bold];
m2_41 -> m2_39  [color=blue, key=0, style=bold];
m2_112 -> m2_232  [key=0, style=solid];
m2_112 -> m2_233  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m2_232 -> m2_233  [key=0, style=solid];
m2_233 -> m2_234  [key=0, style=solid];
m2_233 -> m2_235  [key=2, style=dotted];
m2_234 -> m2_112  [color=blue, key=0, style=bold];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_16  [key=2, style=dotted];
m2_12 -> m2_13  [color=red, key=0, style=solid];
m2_12 -> m2_21  [key=0, style=solid];
m2_190 -> m2_191  [key=0, style=solid];
m2_191 -> m2_192  [key=0, style=solid];
m2_191 -> m2_23  [key=2, style=dotted];
m2_191 -> m2_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_192 -> m2_193  [key=0, style=solid];
m2_192 -> m2_121  [key=2, style=dotted];
m2_192 -> m2_10  [key=2, style=dotted];
m2_192 -> m2_200  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_193 -> m2_194  [key=0, style=solid];
m2_193 -> m2_24  [key=2, style=dotted];
m2_193 -> m2_205  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_194 -> m2_195  [key=0, style=solid];
m2_194 -> m2_10  [key=2, style=dotted];
m2_194 -> m2_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_195 -> m2_190  [color=blue, key=0, style=bold];
m2_98 -> m2_36  [key=2, style=dotted];
m2_98 -> m2_99  [key=0, style=solid];
m2_98 -> m2_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_99 -> m2_37  [key=2, style=dotted];
m2_99 -> m2_100  [key=0, style=solid];
m2_99 -> m2_101  [key=2, style=dotted];
m2_100 -> m2_96  [color=blue, key=0, style=bold];
m2_100 -> m2_98  [color=blue, key=0, style=bold];
m2_101 -> m2_239  [key=0, style=solid];
m2_101 -> m2_240  [color=darkseagreen4, key=1, label="System.DateTime", style=dashed];
m2_101 -> m2_102  [key=0, style=solid];
m2_239 -> m2_240  [key=0, style=solid];
m2_240 -> m2_241  [key=0, style=solid];
m2_240 -> m2_11  [key=2, style=dotted];
m2_241 -> m2_101  [color=blue, key=0, style=bold];
m2_24 -> m2_251  [key=0, style=solid];
m2_24 -> m2_25  [key=0, style=solid];
m2_251 -> m2_252  [key=0, style=solid];
m2_251 -> m2_253  [key=2, style=dotted];
m2_252 -> m2_24  [color=blue, key=0, style=bold];
m2_38 -> m2_39  [key=0, style=solid];
m2_78 -> m2_79  [color=green, key=0, style=solid];
m2_78 -> m2_81  [color=green, key=2, style=dotted];
m2_64 -> m2_244  [key=0, style=solid];
m2_64 -> m2_245  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_64 -> m2_246  [color=darkseagreen4, key=1, label=int, style=dashed];
m2_163 -> m2_164  [key=0, style=solid];
m2_164 -> m2_81  [key=2, style=dotted];
m2_164 -> m2_165  [key=0, style=solid];
m2_164 -> m2_38  [key=2, style=dotted];
m2_164 -> m2_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_165 -> m2_166  [key=0, style=solid];
m2_165 -> m2_144  [key=2, style=dotted];
m2_165 -> m2_24  [key=2, style=dotted];
m2_165 -> m2_174  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_166 -> m2_167  [key=0, style=solid];
m2_166 -> m2_82  [key=2, style=dotted];
m2_166 -> m2_168  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_166 -> m2_10  [key=2, style=dotted];
m2_166 -> m2_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_167 -> m2_163  [color=blue, key=0, style=bold];
m2_167 -> m2_168  [key=0, style=solid];
m2_167 -> m2_26  [key=2, style=dotted];
m2_65 -> m2_66  [key=0, style=solid];
m2_66 -> m2_67  [key=0, style=solid];
m2_66 -> m2_60  [key=2, style=dotted];
m2_66 -> m2_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_76  [key=2, style=dotted];
m2_67 -> m2_65  [color=blue, key=0, style=bold];
m2_68 -> m2_69  [key=0, style=solid];
m2_68 -> m2_77  [key=2, style=dotted];
m2_68 -> m2_71  [color=darkseagreen4, key=1, label=convertedDate, style=dashed];
m2_69 -> m2_70  [key=0, style=solid];
m2_69 -> m2_71  [color=darkseagreen4, key=1, label=type, style=dashed];
m2_69 -> m2_41  [key=2, style=dotted];
m2_71 -> m2_72  [key=0, style=solid];
m2_71 -> m2_79  [key=2, style=dotted];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_78  [key=2, style=dotted];
m2_70 -> m2_68  [color=blue, key=0, style=bold];
m2_72 -> m2_73  [key=0, style=solid];
m2_72 -> m2_24  [key=2, style=dotted];
m2_72 -> m2_60  [key=2, style=dotted];
m2_72 -> m2_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_73 -> m2_74  [key=0, style=solid];
m2_73 -> m2_25  [key=2, style=dotted];
m2_73 -> m2_71  [color=blue, key=0, style=bold];
m2_74 -> m2_75  [key=0, style=solid];
m2_74 -> m2_26  [key=2, style=dotted];
m2_75 -> m2_65  [color=blue, key=0, style=bold];
m2_75 -> m2_41  [key=2, style=dotted];
m2_75 -> m2_76  [key=0, style=solid];
m2_113 -> m2_114  [key=0, style=solid];
m2_114 -> m2_115  [key=0, style=solid];
m2_114 -> m2_120  [key=2, style=dotted];
m2_114 -> m2_81  [key=2, style=dotted];
m2_115 -> m2_116  [key=0, style=solid];
m2_115 -> m2_121  [key=2, style=dotted];
m2_115 -> m2_122  [key=2, style=dotted];
m2_115 -> m2_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_115 -> m2_27  [key=2, style=dotted];
m2_116 -> m2_117  [key=0, style=solid];
m2_116 -> m2_23  [key=2, style=dotted];
m2_116 -> m2_127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_116 -> m2_82  [key=2, style=dotted];
m2_116 -> m2_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_117 -> m2_118  [key=0, style=solid];
m2_117 -> m2_24  [key=2, style=dotted];
m2_117 -> m2_131  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_117 -> m2_113  [color=blue, key=0, style=bold];
m2_118 -> m2_119  [key=0, style=solid];
m2_118 -> m2_10  [key=2, style=dotted];
m2_118 -> m2_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_119 -> m2_113  [color=blue, key=0, style=bold];
m2_119 -> m2_36  [key=2, style=dotted];
m2_119 -> m2_120  [key=0, style=solid];
m2_119 -> m2_121  [key=2, style=dotted];
m2_43 -> m2_44  [color=green, key=0, style=solid];
m2_43 -> m2_36  [color=green, key=2, style=dotted];
m2_43 -> m2_46  [color=green, key=1, label="lambda expression", style=dashed];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_37  [key=2, style=dotted];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_38  [key=2, style=dotted];
m2_45 -> m2_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_45 -> m2_42  [color=blue, key=0, style=bold];
m2_46 -> m2_47  [color=green, key=0, style=solid];
m2_46 -> m2_24  [key=2, style=dotted];
m2_47 -> m2_48  [color=green, key=0, style=solid];
m2_47 -> m2_25  [color=red, key=2, style=dotted];
m2_47 -> m2_41  [color=green, key=2, style=dotted];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_26  [key=2, style=dotted];
m2_48 -> m2_46  [color=blue, key=0, style=bold];
m2_49 -> m2_43  [color=blue, key=0, style=bold];
m2_49 -> m2_50  [key=0, style=solid];
m2_150 -> m2_151  [key=0, style=solid];
m2_150 -> m2_152  [color=darkseagreen4, key=1, label=type, style=dashed];
m2_13 -> m2_14  [color=red, key=0, style=solid];
m2_13 -> m2_15  [color=red, key=2, style=dotted];
m2_14 -> m2_12  [color=blue, key=0, style=bold];
m2_27 -> m2_28  [key=0, style=solid];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_30  [key=2, style=dotted];
m2_29 -> m2_27  [color=blue, key=0, style=bold];
m2_29 -> m2_39  [color=green, key=0, style=bold];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_31  [key=2, style=dotted];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_62  [color=green, key=0, style=solid];
m2_39 -> m2_41  [key=2, style=dotted];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_42  [key=2, style=dotted];
m2_40 -> m2_38  [color=blue, key=0, style=bold];
m2_50 -> m2_51  [color=green, key=0, style=solid];
m2_50 -> m2_36  [key=2, style=dotted];
m2_50 -> m2_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_51 -> m2_52  [color=green, key=0, style=solid];
m2_51 -> m2_53  [key=2, style=dotted];
m2_51 -> m2_37  [color=green, key=2, style=dotted];
m2_52 -> m2_50  [color=blue, key=0, style=bold];
m2_52 -> m2_49  [color=blue, key=0, style=bold];
m2_61 -> m2_62  [key=0, style=solid];
m2_62 -> m2_63  [key=0, style=solid];
m2_62 -> m2_64  [color=green, key=2, style=dotted];
m2_62 -> m2_29  [color=green, key=0, style=solid];
m2_63 -> m2_61  [color=blue, key=0, style=bold];
m2_109 -> m2_110  [key=0, style=solid];
m2_110 -> m2_111  [key=0, style=solid];
m2_110 -> m2_112  [key=2, style=dotted];
m2_111 -> m2_109  [color=blue, key=0, style=bold];
m2_123 -> m2_124  [key=0, style=solid];
m2_123 -> m2_81  [key=2, style=dotted];
m2_123 -> m2_125  [color=darkseagreen4, key=1, label=client, style=dashed];
m2_123 -> m2_134  [color=darkseagreen4, key=1, label=client, style=dashed];
m2_127 -> m2_128  [key=0, style=solid];
m2_127 -> m2_36  [key=2, style=dotted];
m2_131 -> m2_132  [key=0, style=solid];
m2_131 -> m2_25  [key=2, style=dotted];
m2_131 -> m2_36  [key=2, style=dotted];
m2_131 -> m2_121  [key=2, style=dotted];
m2_130 -> m2_131  [key=0, style=solid];
m2_124 -> m2_125  [key=0, style=solid];
m2_124 -> m2_10  [key=2, style=dotted];
m2_124 -> m2_126  [key=2, style=dotted];
m2_124 -> m2_36  [key=2, style=dotted];
m2_124 -> m2_13  [key=2, style=dotted];
m2_124 -> m2_130  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_125 -> m2_123  [color=blue, key=0, style=bold];
m2_125 -> m2_36  [key=2, style=dotted];
m2_125 -> m2_126  [key=0, style=solid];
m2_125 -> m2_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_125 -> m2_127  [color=darkseagreen4, key=1, label=exception, style=dashed];
m2_128 -> m2_129  [key=0, style=solid];
m2_128 -> m2_42  [key=2, style=dotted];
m2_128 -> m2_122  [color=blue, key=0, style=bold];
m2_129 -> m2_127  [color=blue, key=0, style=bold];
m2_132 -> m2_130  [color=blue, key=0, style=bold];
m2_140 -> m2_141  [key=0, style=solid];
m2_140 -> m2_136  [color=blue, key=0, style=bold];
m2_143 -> m2_144  [key=0, style=solid];
m2_143 -> m2_141  [color=blue, key=0, style=bold];
m2_147 -> m2_148  [key=0, style=solid];
m2_147 -> m2_25  [key=2, style=dotted];
m2_147 -> m2_36  [key=2, style=dotted];
m2_147 -> m2_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_146 -> m2_147  [key=0, style=solid];
m2_146 -> m2_81  [key=2, style=dotted];
m2_146 -> m2_151  [color=darkseagreen4, key=1, label=client, style=dashed];
m2_141 -> m2_142  [key=0, style=solid];
m2_141 -> m2_10  [key=2, style=dotted];
m2_141 -> m2_126  [key=2, style=dotted];
m2_142 -> m2_140  [color=blue, key=0, style=bold];
m2_142 -> m2_143  [key=0, style=solid];
m2_142 -> m2_144  [key=2, style=dotted];
m2_145 -> m2_143  [color=blue, key=0, style=bold];
m2_145 -> m2_146  [key=0, style=solid];
m2_148 -> m2_146  [color=blue, key=0, style=bold];
m2_148 -> m2_37  [key=2, style=dotted];
m2_148 -> m2_149  [key=0, style=solid];
m2_160 -> m2_161  [key=0, style=solid];
m2_160 -> m2_25  [key=2, style=dotted];
m2_160 -> m2_162  [key=2, style=dotted];
m2_159 -> m2_160  [key=0, style=solid];
m2_161 -> m2_159  [color=blue, key=0, style=bold];
m2_169 -> m2_170  [key=0, style=solid];
m2_169 -> m2_162  [key=2, style=dotted];
m2_170 -> m2_171  [key=0, style=solid];
m2_170 -> m2_172  [key=2, style=dotted];
m2_170 -> m2_168  [color=blue, key=0, style=bold];
m2_183 -> m2_184  [key=0, style=solid];
m2_183 -> m2_81  [color=blue, key=0, style=bold];
m2_188 -> m2_189  [key=0, style=solid];
m2_188 -> m2_25  [key=2, style=dotted];
m2_188 -> m2_142  [color=darkseagreen4, key=1, label=client, style=dashed];
m2_187 -> m2_188  [key=0, style=solid];
m2_187 -> m2_134  [color=darkseagreen4, key=1, label=client, style=dashed];
m2_184 -> m2_185  [key=0, style=solid];
m2_184 -> m2_186  [key=2, style=dotted];
m2_184 -> m2_7  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_43  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_47  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_78  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_1  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_2  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_3  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_4  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_5  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_6  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_25  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_8  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_9  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_33  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_39  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_50  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_54  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_66  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_69  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_72  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_75  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_79  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_87  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_89  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_97  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_98  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_102  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_105  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_106  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_110  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_114  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_115  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_116  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_123  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_124  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_125  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_134  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_137  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_138  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_142  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_146  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_155  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_156  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_157  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_160  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_164  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_165  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_166  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_169  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_172  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_179  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_173  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_174  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_184 -> m2_182  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m2_185 -> m2_183  [color=blue, key=0, style=bold];
m2_185 -> m2_102  [color=darkseagreen4, key=1, label=client, style=dashed];
m2_189 -> m2_187  [color=blue, key=0, style=bold];
m2_189 -> m2_151  [color=darkseagreen4, key=1, label=client, style=dashed];
m2_196 -> m2_197  [key=0, style=solid];
m2_200 -> m2_201  [key=0, style=solid];
m2_205 -> m2_206  [key=0, style=solid];
m2_205 -> m2_25  [key=2, style=dotted];
m2_204 -> m2_205  [key=0, style=solid];
m2_197 -> m2_198  [key=0, style=solid];
m2_197 -> m2_199  [key=2, style=dotted];
m2_198 -> m2_196  [color=blue, key=0, style=bold];
m2_201 -> m2_202  [key=0, style=solid];
m2_201 -> m2_203  [key=2, style=dotted];
m2_202 -> m2_200  [color=blue, key=0, style=bold];
m2_206 -> m2_204  [color=blue, key=0, style=bold];
m2_213 -> m2_214  [key=0, style=solid];
m2_214 -> m2_215  [key=0, style=solid];
m2_214 -> m2_216  [key=2, style=dotted];
m2_215 -> m2_213  [color=blue, key=0, style=bold];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_27  [key=2, style=dotted];
m2_54 -> m2_41  [key=2, style=dotted];
m2_54 -> m2_55  [key=0, style=solid];
m2_102 -> m2_103  [key=0, style=solid];
m2_102 -> m2_27  [key=2, style=dotted];
m2_134 -> m2_135  [key=0, style=solid];
m2_134 -> m2_27  [key=2, style=dotted];
m2_134 -> m2_121  [key=2, style=dotted];
m2_134 -> m2_139  [key=2, style=dotted];
m2_134 -> m2_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_179 -> m2_180  [key=0, style=solid];
m2_179 -> m2_162  [key=2, style=dotted];
m2_179 -> m2_10  [key=2, style=dotted];
m2_179 -> m2_187  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_179 -> m2_181  [color=darkseagreen4, key=1, label=thrownException, style=dashed];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_219  [key=0, style=solid];
m2_83 -> m2_84  [key=0, style=solid];
m2_83 -> m2_85  [color=darkseagreen4, key=1, label=type, style=dashed];
m2_26 -> m2_24  [color=blue, key=0, style=bold];
m2_55 -> m2_53  [color=blue, key=0, style=bold];
m2_55 -> m2_56  [key=0, style=solid];
m2_76 -> m2_74  [color=blue, key=0, style=bold];
m2_103 -> m2_101  [color=blue, key=0, style=bold];
m2_103 -> m2_104  [key=0, style=solid];
m2_133 -> m2_134  [key=0, style=solid];
m2_135 -> m2_133  [color=blue, key=0, style=bold];
m2_135 -> m2_136  [key=0, style=solid];
m2_135 -> m2_23  [key=2, style=dotted];
m2_135 -> m2_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_151 -> m2_152  [key=0, style=solid];
m2_151 -> m2_153  [key=2, style=dotted];
m2_151 -> m2_78  [key=2, style=dotted];
m2_168 -> m2_169  [key=0, style=solid];
m2_168 -> m2_162  [color=blue, key=0, style=bold];
m2_178 -> m2_179  [key=0, style=solid];
m2_178 -> m2_24  [key=2, style=dotted];
m2_178 -> m2_188  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_180 -> m2_178  [color=blue, key=0, style=bold];
m2_180 -> m2_181  [key=0, style=solid];
m2_180 -> m2_10  [key=2, style=dotted];
m2_120 -> m2_118  [color=blue, key=0, style=bold];
m2_85 -> m2_83  [color=blue, key=0, style=bold];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> m2_79  [key=2, style=dotted];
m2_84 -> m2_85  [key=0, style=solid];
m2_84 -> m2_23  [key=2, style=dotted];
m2_84 -> m2_78  [key=2, style=dotted];
m2_152 -> m2_150  [color=blue, key=0, style=bold];
m2_152 -> m2_153  [key=0, style=solid];
m2_152 -> m2_157  [key=2, style=dotted];
m2_221 -> m2_222  [key=0, style=solid];
m2_222 -> m2_223  [key=0, style=solid];
m2_223 -> m2_221  [color=blue, key=0, style=bold];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_15  [key=2, style=dotted];
m2_4 -> m2_19  [color=darkorchid, key=3, label="Parameter variable string type", style=bold];
m2_42 -> m2_43  [color=green, key=0, style=solid];
m2_42 -> m2_217  [key=0, style=solid];
m2_177 -> m2_178  [key=0, style=solid];
m2_177 -> m2_23  [key=2, style=dotted];
m2_177 -> m2_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_182 -> m2_176  [color=blue, key=0, style=bold];
m2_182 -> m2_41  [key=2, style=dotted];
m2_182 -> m2_183  [key=0, style=solid];
m2_139 -> m2_37  [key=2, style=dotted];
m2_139 -> m2_140  [key=0, style=solid];
m2_199 -> m2_236  [key=0, style=solid];
m2_236 -> m2_237  [key=0, style=solid];
m2_236 -> m2_238  [key=2, style=dotted];
m2_237 -> m2_199  [color=blue, key=0, style=bold];
m2_217 -> m2_218  [key=0, style=solid];
m2_218 -> m2_42  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_7 -> m2_8  [color=red, key=0, style=solid];
m2_7 -> m2_17  [color=green, key=2, style=dotted];
m2_7 -> m2_10  [color=red, key=2, style=dotted];
m2_7 -> m2_12  [color=red, key=1, label="lambda expression", style=dashed];
m2_6 -> m2_7  [color=red, key=0, style=solid];
m2_6 -> m2_13  [key=2, style=dotted];
m2_6 -> m2_14  [key=2, style=dotted];
m2_6 -> m2_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_18  [key=2, style=dotted];
m2_8 -> m2_11  [key=2, style=dotted];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_11  [key=2, style=dotted];
m2_1 -> m2_4  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_12  [key=2, style=dotted];
m2_2 -> m2_5  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_13  [key=2, style=dotted];
m2_3 -> m2_14  [key=2, style=dotted];
m2_3 -> m2_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_3 -> m2_0  [color=blue, key=0, style=bold];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_19  [key=2, style=dotted];
m2_9 -> m2_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_9 -> m2_6  [color=blue, key=0, style=bold];
m2_10 -> m2_0  [color=blue, key=0, style=bold];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_23  [key=2, style=dotted];
m2_56 -> m2_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_58 -> m2_59  [color=green, key=0, style=solid];
m2_58 -> m2_60  [color=green, key=2, style=dotted];
m2_58 -> m2_39  [color=green, key=1, label="lambda expression", style=dashed];
m2_58 -> m2_25  [key=2, style=dotted];
m2_57 -> m2_58  [color=green, key=0, style=solid];
m2_57 -> m2_12  [key=2, style=dotted];
m2_57 -> m2_24  [key=2, style=dotted];
m2_59 -> m2_56  [color=blue, key=0, style=bold];
m2_59 -> m2_60  [key=0, style=solid];
m2_59 -> m2_26  [key=2, style=dotted];
m2_219 -> m2_220  [key=0, style=solid];
m2_220 -> m2_53  [color=blue, key=0, style=bold];
m2_37 -> m2_31  [color=blue, key=0, style=bold];
m2_77 -> m2_78  [color=green, key=0, style=solid];
m2_80 -> m2_77  [color=blue, key=0, style=bold];
m2_80 -> m2_81  [key=0, style=solid];
m2_122 -> m2_123  [key=0, style=solid];
m2_126 -> m2_127  [key=0, style=solid];
m2_126 -> m2_158  [key=2, style=dotted];
m2_149 -> m2_145  [color=blue, key=0, style=bold];
m2_149 -> m2_150  [key=0, style=solid];
m2_104 -> m2_105  [key=0, style=solid];
m2_104 -> m2_23  [key=2, style=dotted];
m2_104 -> m2_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_105 -> m2_81  [key=2, style=dotted];
m2_105 -> m2_106  [key=0, style=solid];
m2_105 -> m2_110  [color=darkseagreen4, key=1, label=client, style=dashed];
m2_105 -> m2_24  [key=2, style=dotted];
m2_106 -> m2_36  [key=2, style=dotted];
m2_106 -> m2_107  [key=0, style=solid];
m2_106 -> m2_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_106 -> m2_25  [key=2, style=dotted];
m2_107 -> m2_37  [key=2, style=dotted];
m2_107 -> m2_108  [key=0, style=solid];
m2_107 -> m2_26  [key=2, style=dotted];
m2_108 -> m2_104  [color=blue, key=0, style=bold];
m2_108 -> m2_102  [color=blue, key=0, style=bold];
m2_244 -> m2_245  [key=0, style=solid];
m2_245 -> m2_246  [key=0, style=solid];
m2_245 -> m2_11  [key=2, style=dotted];
m2_246 -> m2_247  [key=0, style=solid];
m2_246 -> m2_11  [key=2, style=dotted];
m2_247 -> m2_64  [color=blue, key=0, style=bold];
m2_162 -> m2_163  [key=0, style=solid];
m2_136 -> m2_137  [key=0, style=solid];
m2_136 -> m2_24  [key=2, style=dotted];
m2_136 -> m2_147  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_137 -> m2_138  [key=0, style=solid];
m2_137 -> m2_10  [key=2, style=dotted];
m2_137 -> m2_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_137 -> m2_81  [key=2, style=dotted];
m2_137 -> m2_142  [color=darkseagreen4, key=1, label=client, style=dashed];
m2_138 -> m2_133  [color=blue, key=0, style=bold];
m2_138 -> m2_36  [key=2, style=dotted];
m2_138 -> m2_139  [key=0, style=solid];
m2_138 -> m2_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_81 -> m2_82  [key=0, style=solid];
m2_81 -> m2_182  [key=0, style=solid];
m2_82 -> m2_83  [key=0, style=solid];
m2_82 -> m2_90  [key=2, style=dotted];
m2_82 -> m2_85  [color=darkseagreen4, key=1, label=convertedDate, style=dashed];
m2_224 -> m2_225  [key=0, style=solid];
m2_225 -> m2_172  [color=blue, key=0, style=bold];
m2_32 -> m2_33  [key=0, style=solid];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_38  [key=2, style=dotted];
m2_33 -> m2_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_33 -> m2_36  [key=2, style=dotted];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_24  [key=2, style=dotted];
m2_34 -> m2_37  [key=2, style=dotted];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_25  [key=2, style=dotted];
m2_35 -> m2_32  [color=blue, key=0, style=bold];
m2_36 -> m2_37  [key=0, style=solid];
m2_36 -> m2_26  [key=2, style=dotted];
m2_226 -> m2_227  [key=0, style=solid];
m2_227 -> m2_228  [key=0, style=solid];
m2_227 -> m2_120  [key=2, style=dotted];
m2_228 -> m2_226  [color=blue, key=0, style=bold];
m2_60 -> m2_54  [color=blue, key=0, style=bold];
m2_207 -> m2_208  [key=0, style=solid];
m2_208 -> m2_209  [key=0, style=solid];
m2_208 -> m2_38  [key=2, style=dotted];
m2_208 -> m2_213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_209 -> m2_210  [key=0, style=solid];
m2_209 -> m2_24  [key=2, style=dotted];
m2_210 -> m2_211  [key=0, style=solid];
m2_210 -> m2_25  [key=2, style=dotted];
m2_211 -> m2_212  [key=0, style=solid];
m2_211 -> m2_11  [key=2, style=dotted];
m2_212 -> m2_207  [color=blue, key=0, style=bold];
m2_186 -> m2_248  [key=0, style=solid];
m2_186 -> m2_110  [color=darkseagreen4, key=1, label=client, style=dashed];
m2_248 -> m2_249  [key=0, style=solid];
m2_248 -> m2_250  [key=2, style=dotted];
m2_249 -> m2_186  [color=blue, key=0, style=bold];
m2_254 -> m2_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_18  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_19  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_20  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_33  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_34  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_35  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_45  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_46  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_47  [color=red, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_56  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_62  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_57  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_58  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_71  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_72  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_85  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_86  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_87  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_93  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_99  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_94  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_95  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_104  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_105  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_106  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_115  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_116  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_128  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_117  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_118  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_131  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_134  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_135  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_144  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_136  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_137  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_147  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_152  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_153  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_154  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_160  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_164  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_165  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_166  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_174  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_177  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_178  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_179  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_188  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_191  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_192  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_193  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_194  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_205  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_208  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_209  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_210  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_254 -> m2_251  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.CoreBackgroundJobPerformerFacts", style=dashed];
m2_255 -> m2_131  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_256 -> m2_147  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_257 -> m2_160  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_258 -> m2_174  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_259 -> m2_188  [color=darkseagreen4, key=1, label=performer, style=dashed];
m2_260 -> m2_205  [color=darkseagreen4, key=1, label=performer, style=dashed];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_41  [key=2, style=dotted];
m3_55 -> m3_56  [key=0, style=solid];
m3_55 -> m3_70  [key=2, style=dotted];
m3_55 -> m3_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_47 -> m3_54  [color=green, key=1, label="HangFire.States.JobState", style=dashed];
m3_47 -> m3_48  [key=0, style=solid];
m3_47 -> m3_49  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m3_47 -> m3_51  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
m3_47 -> m3_55  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_47 -> m3_77  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_47 -> m3_56  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<HangFire.IStateAppliedFilter>", style=dashed];
m3_47 -> m3_58  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_47 -> m3_59  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_47 -> m3_60  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<HangFire.IStateAppliedFilter>", style=dashed];
m3_47 -> m3_61  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_47 -> m3_37  [key=2, style=dotted];
m3_54 -> m3_55  [color=green, key=0, style=solid];
m3_54 -> m3_69  [color=green, key=2, style=dotted];
m3_54 -> m3_49  [color=blue, key=0, style=bold];
m3_48 -> m3_54  [color=green, key=1, label=oldState, style=dashed];
m3_48 -> m3_49  [key=0, style=solid];
m3_48 -> m3_42  [key=2, style=dotted];
m3_48 -> m3_64  [key=2, style=dotted];
m3_48 -> m3_52  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m3_48 -> m3_53  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m3_48 -> m3_57  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m3_48 -> m3_46  [color=blue, key=0, style=bold];
m3_51 -> m3_54  [color=green, key=1, label=transaction, style=dashed];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_66  [key=2, style=dotted];
m3_51 -> m3_55  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m3_51 -> m3_57  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m3_51 -> m3_58  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m3_51 -> m3_59  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m3_51 -> m3_61  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m3_51 -> m3_62  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m3_53 -> m3_54  [color=green, key=0, style=solid];
m3_53 -> m3_55  [key=0, style=solid];
m3_53 -> m3_68  [key=2, style=dotted];
m3_53 -> m3_33  [key=2, style=dotted];
m3_53 -> m3_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_49 -> m3_51  [key=0, style=solid];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_65  [key=2, style=dotted];
m3_56 -> m3_57  [key=0, style=solid];
m3_56 -> m3_58  [key=0, style=solid];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_72  [key=2, style=dotted];
m3_58 -> m3_56  [color=blue, key=0, style=bold];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_73  [key=2, style=dotted];
m3_60 -> m3_61  [key=0, style=solid];
m3_60 -> m3_62  [key=0, style=solid];
m3_60 -> m3_9  [key=2, style=dotted];
m3_60 -> m3_37  [key=2, style=dotted];
m3_61 -> m3_60  [key=0, style=solid];
m3_61 -> m3_74  [key=2, style=dotted];
m3_61 -> m3_59  [color=blue, key=0, style=bold];
m3_52 -> m3_53  [key=0, style=solid];
m3_52 -> m3_58  [key=0, style=solid];
m3_52 -> m3_67  [key=2, style=dotted];
m3_52 -> m3_9  [key=2, style=dotted];
m3_52 -> m3_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_57 -> m3_56  [key=0, style=solid];
m3_57 -> m3_71  [key=2, style=dotted];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_45  [key=2, style=dotted];
m3_62 -> m3_63  [key=0, style=solid];
m3_62 -> m3_75  [key=2, style=dotted];
m3_50 -> m3_63  [key=0, style=solid];
m3_50 -> m3_51  [key=0, style=solid];
m3_50 -> m3_19  [key=2, style=dotted];
m3_50 -> m3_52  [color=darkseagreen4, key=1, label=component, style=dashed];
m3_50 -> m3_57  [color=darkseagreen4, key=1, label=component, style=dashed];
m3_63 -> m3_47  [color=blue, key=0, style=bold];
m3_63 -> m3_64  [key=0, style=solid];
m3_63 -> m3_55  [key=2, style=dotted];
m3_19 -> m3_73  [key=0, style=solid];
m3_73 -> m3_74  [key=0, style=solid];
m3_73 -> m3_75  [key=2, style=dotted];
m3_74 -> m3_19  [color=blue, key=0, style=bold];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_45  [key=2, style=dotted];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_42  [key=2, style=dotted];
m3_30 -> m3_43  [key=2, style=dotted];
m3_30 -> m3_44  [key=2, style=dotted];
m3_14 -> m3_15  [key=0, style=solid];
m3_14 -> m3_17  [key=2, style=dotted];
m3_14 -> m3_20  [key=2, style=dotted];
m3_15 -> m3_16  [color=red, key=0, style=solid];
m3_15 -> m3_19  [key=2, style=dotted];
m3_15 -> m3_10  [color=blue, key=0, style=bold];
m3_16 -> m3_17  [color=red, key=0, style=solid];
m3_17 -> m3_18  [color=red, key=0, style=solid];
m3_17 -> m3_20  [color=red, key=2, style=dotted];
m3_17 -> m3_45  [color=red, key=3, label="Field variable PooledRedisClientManager _connectionPool", style=bold];
m3_17 -> m3_21  [key=0, style=solid];
m3_18 -> m3_14  [color=blue, key=0, style=bold];
m3_42 -> m3_43  [key=0, style=solid];
m3_6 -> m3_7  [key=0, style=solid];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_9  [key=2, style=dotted];
m3_7 -> m3_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_8 -> m3_6  [color=blue, key=0, style=bold];
m3_21 -> m3_22  [key=0, style=solid];
m3_21 -> m3_23  [key=2, style=dotted];
m3_22 -> m3_23  [key=0, style=solid];
m3_22 -> m3_28  [key=2, style=dotted];
m3_22 -> m3_29  [key=2, style=dotted];
m3_22 -> m3_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_22 -> m3_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_22 -> m3_17  [color=blue, key=0, style=bold];
m3_23 -> m3_24  [key=0, style=solid];
m3_23 -> m3_19  [key=2, style=dotted];
m3_23 -> m3_25  [color=darkseagreen4, key=1, label=component, style=dashed];
m3_23 -> m3_43  [color=darkseagreen4, key=1, label=component, style=dashed];
m3_24 -> m3_25  [key=0, style=solid];
m3_24 -> m3_30  [key=2, style=dotted];
m3_24 -> m3_31  [key=2, style=dotted];
m3_24 -> m3_37  [color=green, key=1, label=IRedisClient, style=dashed];
m3_24 -> m3_27  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_24 -> m3_32  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_24 -> m3_33  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
m3_24 -> m3_35  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
m3_25 -> m3_26  [key=0, style=solid];
m3_25 -> m3_9  [key=2, style=dotted];
m3_25 -> m3_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_25 -> m3_27  [key=0, style=solid];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_32  [key=2, style=dotted];
m3_26 -> m3_33  [key=2, style=dotted];
m3_26 -> m3_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_26 -> m3_38  [key=0, style=solid];
m3_26 -> m3_39  [key=2, style=dotted];
m3_27 -> m3_21  [color=blue, key=0, style=bold];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_29  [key=0, style=solid];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_4  [key=2, style=dotted];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_5  [key=2, style=dotted];
m3_3 -> m3_0  [color=blue, key=0, style=bold];
m3_28 -> m3_38  [key=0, style=solid];
m3_28 -> m3_39  [key=2, style=dotted];
m3_69 -> m3_65  [color=blue, key=0, style=bold];
m3_40 -> m3_38  [color=blue, key=0, style=bold];
m3_103 -> m3_104  [key=0, style=solid];
m3_10 -> m3_11  [key=0, style=solid];
m3_11 -> m3_12  [key=0, style=solid];
m3_11 -> m3_13  [key=2, style=dotted];
m3_11 -> m3_17  [key=2, style=dotted];
m3_11 -> m3_16  [key=2, style=dotted];
m3_12 -> m3_10  [color=blue, key=0, style=bold];
m3_12 -> m3_17  [key=2, style=dotted];
m3_12 -> m3_13  [key=0, style=solid];
m3_12 -> m3_18  [key=2, style=dotted];
m3_34 -> m3_35  [key=0, style=solid];
m3_34 -> m3_31  [key=0, style=solid];
m3_38 -> m3_39  [key=0, style=solid];
m3_38 -> m3_24  [color=blue, key=0, style=bold];
m3_46 -> m3_47  [key=0, style=solid];
m3_46 -> m3_80  [key=0, style=solid];
m3_46 -> m3_81  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_9  [key=2, style=dotted];
m3_35 -> m3_37  [key=2, style=dotted];
m3_35 -> m3_31  [key=0, style=solid];
m3_35 -> m3_46  [key=2, style=dotted];
m3_36 -> m3_34  [color=blue, key=0, style=bold];
m3_36 -> m3_37  [color=green, key=0, style=solid];
m3_36 -> m3_40  [color=green, key=2, style=dotted];
m3_36 -> m3_41  [color=green, key=2, style=dotted];
m3_44 -> m3_42  [color=blue, key=0, style=bold];
m3_96 -> m3_97  [color=green, key=0, style=solid];
m3_97 -> m3_98  [color=green, key=0, style=solid];
m3_97 -> m3_42  [color=green, key=2, style=dotted];
m3_97 -> m3_9  [color=green, key=2, style=dotted];
m3_97 -> m3_99  [color=green, key=2, style=dotted];
m3_98 -> m3_96  [color=blue, key=0, style=bold];
m3_77 -> m3_42  [key=2, style=dotted];
m3_77 -> m3_78  [key=0, style=solid];
m3_77 -> m3_79  [key=2, style=dotted];
m3_77 -> m3_43  [color=darkseagreen4, key=1, label=component, style=dashed];
m3_76 -> m3_77  [key=0, style=solid];
m3_76 -> m3_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_15  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_17  [color=red, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_22  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_23  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_24  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_25  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_43  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_26  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_47  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_50  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_51  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_52  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_57  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_53  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_63  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_66  [color=red, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_68  [color=red, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_76 -> m3_73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.InfiniteLoopComponentFacts", style=dashed];
m3_101 -> m3_42  [key=2, style=dotted];
m3_101 -> m3_99  [key=2, style=dotted];
m3_101 -> m3_102  [key=0, style=solid];
m3_104 -> m3_42  [key=2, style=dotted];
m3_104 -> m3_105  [key=0, style=solid];
m3_104 -> m3_106  [key=2, style=dotted];
m3_104 -> m3_107  [key=2, style=dotted];
m3_100 -> m3_101  [key=0, style=solid];
m3_78 -> m3_76  [color=blue, key=0, style=bold];
m3_78 -> m3_57  [color=darkseagreen4, key=1, label=component, style=dashed];
m3_102 -> m3_100  [color=blue, key=0, style=bold];
m3_105 -> m3_103  [color=blue, key=0, style=bold];
m3_65 -> m3_66  [color=red, key=0, style=solid];
m3_66 -> m3_67  [color=red, key=0, style=solid];
m3_66 -> m3_19  [color=red, key=2, style=dotted];
m3_67 -> m3_68  [color=red, key=0, style=solid];
m3_67 -> m3_70  [color=red, key=2, style=dotted];
m3_68 -> m3_69  [color=red, key=0, style=solid];
m3_68 -> m3_71  [color=red, key=2, style=dotted];
m3_68 -> m3_72  [color=red, key=2, style=dotted];
m3_13 -> m3_17  [key=2, style=dotted];
m3_13 -> m3_14  [key=0, style=solid];
m3_13 -> m3_19  [key=2, style=dotted];
m3_37 -> m3_38  [color=green, key=0, style=solid];
m3_37 -> m3_47  [color=green, key=2, style=dotted];
m3_33 -> m3_37  [color=green, key=1, label="HangFire.States.JobState", style=dashed];
m3_33 -> m3_34  [key=0, style=solid];
m3_33 -> m3_45  [key=2, style=dotted];
m3_33 -> m3_55  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m3_33 -> m3_82  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m3_31 -> m3_36  [color=green, key=0, style=solid];
m3_31 -> m3_33  [color=darkseagreen4, key=1, label=filter, style=dashed];
m3_31 -> m3_32  [key=0, style=solid];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_34  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m3_32 -> m3_35  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m3_29 -> m3_31  [color=darkseagreen4, key=1, label=changingFilters, style=dashed];
m3_29 -> m3_40  [key=2, style=dotted];
m3_29 -> m3_41  [key=2, style=dotted];
m3_29 -> m3_30  [key=0, style=solid];
m3_64 -> m3_62  [color=blue, key=0, style=bold];
m3_82 -> m3_83  [key=0, style=solid];
m3_82 -> m3_75  [key=2, style=dotted];
m3_80 -> m3_82  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m3_80 -> m3_66  [key=2, style=dotted];
m3_80 -> m3_81  [key=0, style=solid];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_72  [key=2, style=dotted];
m3_83 -> m3_46  [color=blue, key=0, style=bold];
m3_84 -> m3_89  [color=green, key=1, label=IRedisTransaction, style=dashed];
m3_84 -> m3_97  [color=green, key=1, label="HangFire.States.JobState", style=dashed];
m3_84 -> m3_85  [key=0, style=solid];
m3_84 -> m3_87  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_84 -> m3_88  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_84 -> m3_90  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m3_84 -> m3_101  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_84 -> m3_91  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_84 -> m3_93  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m3_84 -> m3_104  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_89 -> m3_90  [color=green, key=0, style=solid];
m3_89 -> m3_70  [color=green, key=2, style=dotted];
m3_89 -> m3_96  [color=green, key=1, label="lambda expression", style=dashed];
m3_88 -> m3_89  [color=green, key=0, style=solid];
m3_88 -> m3_91  [key=0, style=solid];
m3_90 -> m3_91  [key=0, style=solid];
m3_90 -> m3_70  [key=2, style=dotted];
m3_90 -> m3_100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_85 -> m3_90  [color=darkseagreen4, key=1, label=properties, style=dashed];
m3_85 -> m3_86  [key=0, style=solid];
m3_85 -> m3_6  [key=2, style=dotted];
m3_85 -> m3_87  [color=darkseagreen4, key=1, label=properties, style=dashed];
m3_85 -> m3_101  [color=darkseagreen4, key=1, label=properties, style=dashed];
m3_85 -> m3_91  [color=darkseagreen4, key=1, label=properties, style=dashed];
m3_85 -> m3_92  [color=darkseagreen4, key=1, label=properties, style=dashed];
m3_85 -> m3_93  [color=darkseagreen4, key=1, label=properties, style=dashed];
m3_85 -> m3_104  [color=darkseagreen4, key=1, label=properties, style=dashed];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_23  [key=2, style=dotted];
m3_91 -> m3_92  [key=0, style=solid];
m3_91 -> m3_23  [key=2, style=dotted];
m3_93 -> m3_70  [key=2, style=dotted];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_86 -> m3_87  [key=0, style=solid];
m3_86 -> m3_92  [color=darkseagreen4, key=1, label=now, style=dashed];
m3_92 -> m3_93  [key=0, style=solid];
m3_92 -> m3_95  [key=2, style=dotted];
m3_92 -> m3_23  [key=2, style=dotted];
m3_94 -> m3_84  [color=blue, key=0, style=bold];
m3_110 -> m3_97  [color=green, key=1, label="HangFire.States.JobState", style=dashed];
m3_110 -> m3_101  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_110 -> m3_104  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_109 -> m3_77  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m3_111 -> m3_101  [color=darkseagreen4, key=1, label=properties, style=dashed];
m3_111 -> m3_104  [color=darkseagreen4, key=1, label=properties, style=dashed];
m4_135 -> m4_136  [key=0, style=solid];
m4_138 -> m4_91  [key=2, style=dotted];
m4_138 -> m4_139  [key=0, style=solid];
m4_138 -> m4_143  [key=2, style=dotted];
m4_139 -> m4_91  [key=2, style=dotted];
m4_139 -> m4_140  [key=0, style=solid];
m4_139 -> m4_143  [key=2, style=dotted];
m4_137 -> m4_142  [key=2, style=dotted];
m4_137 -> m4_138  [key=0, style=solid];
m4_137 -> m4_139  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m4_136 -> m4_141  [key=2, style=dotted];
m4_136 -> m4_137  [key=0, style=solid];
m4_140 -> m4_135  [color=blue, key=0, style=bold];
m4_119 -> m4_120  [key=0, style=solid];
m4_120 -> m4_80  [key=2, style=dotted];
m4_120 -> m4_121  [key=0, style=solid];
m4_120 -> m4_123  [key=2, style=dotted];
m4_121 -> m4_91  [key=2, style=dotted];
m4_121 -> m4_122  [key=0, style=solid];
m4_121 -> m4_124  [key=2, style=dotted];
m4_122 -> m4_119  [color=blue, key=0, style=bold];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_44  [key=2, style=dotted];
m4_41 -> m4_45  [key=2, style=dotted];
m4_144 -> m4_145  [key=0, style=solid];
m4_148 -> m4_18  [key=2, style=dotted];
m4_148 -> m4_149  [key=0, style=solid];
m4_148 -> m4_91  [key=2, style=dotted];
m4_149 -> m4_18  [key=2, style=dotted];
m4_149 -> m4_150  [key=0, style=solid];
m4_149 -> m4_91  [key=2, style=dotted];
m4_147 -> m4_148  [key=0, style=solid];
m4_147 -> m4_149  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m4_147 -> m4_142  [key=2, style=dotted];
m4_146 -> m4_147  [key=0, style=solid];
m4_146 -> m4_141  [key=2, style=dotted];
m4_145 -> m4_91  [key=2, style=dotted];
m4_145 -> m4_146  [key=0, style=solid];
m4_145 -> m4_124  [key=2, style=dotted];
m4_150 -> m4_144  [color=blue, key=0, style=bold];
m4_27 -> m4_28  [key=0, style=solid];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageOptions", style=dashed];
m4_6 -> m4_11  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_6 -> m4_12  [color=red, key=1, label=int, style=dashed];
m4_6 -> m4_13  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageOptions", style=dashed];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_9  [key=0, style=solid];
m4_7 -> m4_4  [color=blue, key=0, style=bold];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_11  [key=0, style=solid];
m4_11 -> m4_12  [color=red, key=0, style=solid];
m4_11 -> m4_13  [key=2, style=dotted];
m4_12 -> m4_13  [color=red, key=0, style=solid];
m4_12 -> m4_10  [color=blue, key=0, style=bold];
m4_13 -> m4_14  [color=red, key=0, style=solid];
m4_8 -> m4_15  [key=0, style=solid];
m4_8 -> m4_16  [key=2, style=dotted];
m4_10 -> m4_15  [key=0, style=solid];
m4_10 -> m4_16  [key=2, style=dotted];
m4_10 -> m4_11  [key=0, style=solid];
m4_14 -> m4_15  [color=red, key=0, style=solid];
m4_14 -> m4_17  [color=red, key=2, style=dotted];
m4_14 -> m4_18  [color=red, key=2, style=dotted];
m4_15 -> m4_6  [color=blue, key=0, style=bold];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_17  [key=2, style=dotted];
m4_15 -> m4_18  [key=2, style=dotted];
m4_45 -> m4_42  [color=blue, key=0, style=bold];
m4_151 -> m4_152  [key=0, style=solid];
m4_152 -> m4_124  [key=2, style=dotted];
m4_152 -> m4_153  [key=0, style=solid];
m4_152 -> m4_134  [key=2, style=dotted];
m4_153 -> m4_151  [color=blue, key=0, style=bold];
m4_16 -> m4_14  [color=blue, key=0, style=bold];
m4_103 -> m4_104  [key=0, style=solid];
m4_104 -> m4_44  [key=2, style=dotted];
m4_104 -> m4_105  [key=0, style=solid];
m4_105 -> m4_106  [key=0, style=solid];
m4_105 -> m4_85  [key=2, style=dotted];
m4_105 -> m4_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_106 -> m4_103  [color=blue, key=0, style=bold];
m4_29 -> m4_30  [key=0, style=solid];
m4_29 -> m4_31  [key=2, style=dotted];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_0  [color=blue, key=0, style=bold];
m4_3 -> m4_2  [color=blue, key=0, style=bold];
m4_77 -> m4_78  [key=0, style=solid];
m4_78 -> m4_79  [key=0, style=solid];
m4_78 -> m4_80  [key=2, style=dotted];
m4_79 -> m4_77  [color=blue, key=0, style=bold];
m4_56 -> m4_57  [key=0, style=solid];
m4_56 -> m4_52  [color=blue, key=0, style=bold];
m4_58 -> m4_59  [key=0, style=solid];
m4_58 -> m4_62  [key=2, style=dotted];
m4_57 -> m4_58  [key=0, style=solid];
m4_57 -> m4_61  [key=2, style=dotted];
m4_57 -> m4_59  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m4_57 -> m4_11  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m4_57 -> m4_12  [color=red, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m4_57 -> m4_13  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m4_57 -> m4_14  [color=red, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m4_57 -> m4_20  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m4_57 -> m4_24  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m4_57 -> m4_29  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m4_57 -> m4_44  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m4_57 -> m4_49  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m4_59 -> m4_63  [key=2, style=dotted];
m4_59 -> m4_60  [key=0, style=solid];
m4_60 -> m4_56  [color=blue, key=0, style=bold];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_39  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_49 -> m4_51  [key=2, style=dotted];
m4_49 -> m4_47  [color=blue, key=0, style=bold];
m4_50 -> m4_48  [color=blue, key=0, style=bold];
m4_50 -> m4_51  [key=0, style=solid];
m4_107 -> m4_109  [color=darkseagreen4, key=1, label="?", style=dashed];
m4_107 -> m4_108  [key=0, style=solid];
m4_33 -> m4_34  [key=0, style=solid];
m4_33 -> m4_38  [key=2, style=dotted];
m4_36 -> m4_37  [key=0, style=solid];
m4_36 -> m4_41  [key=2, style=dotted];
m4_47 -> m4_48  [key=0, style=solid];
m4_53 -> m4_54  [key=0, style=solid];
m4_53 -> m4_55  [key=0, style=solid];
m4_182 -> m4_183  [key=0, style=solid];
m4_35 -> m4_33  [color=blue, key=0, style=bold];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_40  [key=2, style=dotted];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_39  [key=2, style=dotted];
m4_38 -> m4_36  [color=blue, key=0, style=bold];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> m4_39  [key=2, style=dotted];
m4_37 -> m4_32  [color=blue, key=0, style=bold];
m4_52 -> m4_50  [color=blue, key=0, style=bold];
m4_52 -> m4_53  [key=0, style=solid];
m4_52 -> m4_55  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_51 -> m4_52  [key=0, style=solid];
m4_55 -> m4_53  [color=blue, key=0, style=bold];
m4_55 -> m4_56  [key=0, style=solid];
m4_54 -> m4_55  [key=0, style=solid];
m4_54 -> m4_56  [key=0, style=solid];
m4_54 -> m4_16  [key=2, style=dotted];
m4_183 -> m4_62  [key=2, style=dotted];
m4_183 -> m4_184  [key=0, style=solid];
m4_183 -> m4_177  [key=2, style=dotted];
m4_183 -> m4_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_184 -> m4_182  [color=blue, key=0, style=bold];
m4_185 -> m4_186  [key=0, style=solid];
m4_88 -> m4_91  [key=2, style=dotted];
m4_88 -> m4_89  [key=0, style=solid];
m4_109 -> m4_91  [key=2, style=dotted];
m4_109 -> m4_110  [key=0, style=solid];
m4_187 -> m4_185  [color=blue, key=0, style=bold];
m4_186 -> m4_187  [key=0, style=solid];
m4_86 -> m4_88  [color=darkseagreen4, key=1, label="?", style=dashed];
m4_86 -> m4_87  [key=0, style=solid];
m4_87 -> m4_88  [key=0, style=solid];
m4_87 -> m4_90  [key=2, style=dotted];
m4_89 -> m4_86  [color=blue, key=0, style=bold];
m4_108 -> m4_109  [key=0, style=solid];
m4_108 -> m4_90  [key=2, style=dotted];
m4_110 -> m4_107  [color=blue, key=0, style=bold];
m4_131 -> m4_132  [key=0, style=solid];
m4_132 -> m4_124  [key=2, style=dotted];
m4_132 -> m4_133  [key=0, style=solid];
m4_132 -> m4_134  [key=2, style=dotted];
m4_133 -> m4_131  [color=blue, key=0, style=bold];
m4_40 -> m4_42  [color=darkseagreen4, key=1, label=Table, style=dashed];
m4_40 -> m4_41  [key=0, style=solid];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_30  [key=2, style=dotted];
m4_42 -> m4_46  [key=2, style=dotted];
m4_42 -> m4_31  [key=2, style=dotted];
m4_42 -> m4_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_42 -> m4_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_42 -> m4_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_42 -> m4_44  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m4_43 -> m4_40  [color=blue, key=0, style=bold];
m4_43 -> m4_44  [key=0, style=solid];
m4_43 -> m4_46  [key=2, style=dotted];
m4_158 -> m4_160  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_158 -> m4_159  [key=0, style=solid];
m4_160 -> m4_80  [key=2, style=dotted];
m4_160 -> m4_161  [key=0, style=solid];
m4_159 -> m4_44  [key=2, style=dotted];
m4_159 -> m4_160  [key=0, style=solid];
m4_159 -> m4_162  [key=2, style=dotted];
m4_161 -> m4_158  [color=blue, key=0, style=bold];
m4_44 -> m4_45  [key=0, style=solid];
m4_44 -> m4_47  [key=2, style=dotted];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_34  [color=crimson, key=0, style=bold];
m4_32 -> m4_35  [color=crimson, key=0, style=bold];
m4_32 -> m4_36  [color=crimson, key=0, style=bold];
m4_92 -> m4_93  [key=0, style=solid];
m4_93 -> m4_80  [key=2, style=dotted];
m4_93 -> m4_94  [key=0, style=solid];
m4_93 -> m4_95  [key=2, style=dotted];
m4_93 -> m4_96  [key=2, style=dotted];
m4_94 -> m4_92  [color=blue, key=0, style=bold];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_30  [key=2, style=dotted];
m4_26 -> m4_32  [key=2, style=dotted];
m4_26 -> m4_31  [key=2, style=dotted];
m4_26 -> m4_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_23 -> m4_24  [color=green, key=0, style=solid];
m4_23 -> m4_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_24 -> m4_25  [color=green, key=0, style=solid];
m4_24 -> m4_29  [color=green, key=2, style=dotted];
m4_24 -> m4_26  [key=2, style=dotted];
m4_24 -> m4_27  [key=2, style=dotted];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> m4_30  [key=2, style=dotted];
m4_25 -> m4_31  [key=2, style=dotted];
m4_25 -> m4_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_25 -> m4_23  [color=blue, key=0, style=bold];
m4_28 -> m4_23  [color=blue, key=0, style=bold];
m4_28 -> m4_29  [key=0, style=solid];
m4_30 -> m4_28  [color=blue, key=0, style=bold];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_0  [color=blue, key=0, style=bold];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_3  [key=2, style=dotted];
m4_19 -> m4_20  [key=0, style=solid];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_22  [key=2, style=dotted];
m4_21 -> m4_19  [color=blue, key=0, style=bold];
m4_154 -> m4_155  [key=0, style=solid];
m4_155 -> m4_91  [key=2, style=dotted];
m4_155 -> m4_156  [key=0, style=solid];
m4_155 -> m4_157  [key=2, style=dotted];
m4_156 -> m4_154  [color=blue, key=0, style=bold];
m4_128 -> m4_129  [key=0, style=solid];
m4_129 -> m4_91  [key=2, style=dotted];
m4_129 -> m4_130  [key=0, style=solid];
m4_129 -> m4_124  [key=2, style=dotted];
m4_130 -> m4_128  [color=blue, key=0, style=bold];
m4_97 -> m4_98  [key=0, style=solid];
m4_98 -> m4_80  [key=2, style=dotted];
m4_98 -> m4_99  [key=0, style=solid];
m4_98 -> m4_101  [key=2, style=dotted];
m4_99 -> m4_80  [key=2, style=dotted];
m4_99 -> m4_100  [key=0, style=solid];
m4_99 -> m4_102  [key=2, style=dotted];
m4_100 -> m4_97  [color=blue, key=0, style=bold];
m4_125 -> m4_126  [key=0, style=solid];
m4_126 -> m4_80  [key=2, style=dotted];
m4_126 -> m4_127  [key=0, style=solid];
m4_126 -> m4_123  [key=2, style=dotted];
m4_127 -> m4_125  [color=blue, key=0, style=bold];
m4_166 -> m4_163  [color=blue, key=0, style=bold];
m4_164 -> m4_44  [key=2, style=dotted];
m4_164 -> m4_165  [key=0, style=solid];
m4_164 -> m4_162  [key=2, style=dotted];
m4_163 -> m4_164  [key=0, style=solid];
m4_163 -> m4_165  [color=darkseagreen4, key=1, label=Table, style=dashed];
m4_165 -> m4_166  [key=0, style=solid];
m4_165 -> m4_167  [key=2, style=dotted];
m4_81 -> m4_82  [key=0, style=solid];
m4_82 -> m4_44  [key=2, style=dotted];
m4_82 -> m4_83  [key=0, style=solid];
m4_83 -> m4_84  [key=0, style=solid];
m4_83 -> m4_85  [key=2, style=dotted];
m4_83 -> m4_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_84 -> m4_81  [color=blue, key=0, style=bold];
m4_178 -> m4_179  [key=0, style=solid];
m4_179 -> m4_180  [key=0, style=solid];
m4_179 -> m4_181  [key=2, style=dotted];
m4_179 -> m4_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_180 -> m4_178  [color=blue, key=0, style=bold];
m4_4 -> m4_5  [key=0, style=solid];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_8  [key=2, style=dotted];
m4_5 -> m4_4  [color=blue, key=0, style=bold];
m4_174 -> m4_168  [color=blue, key=0, style=bold];
m4_173 -> m4_118  [key=2, style=dotted];
m4_173 -> m4_174  [key=0, style=solid];
m4_169 -> m4_44  [key=2, style=dotted];
m4_169 -> m4_170  [key=0, style=solid];
m4_169 -> m4_175  [key=2, style=dotted];
m4_169 -> m4_171  [color=darkseagreen4, key=1, label=entry, style=dashed];
m4_169 -> m4_172  [color=darkseagreen4, key=1, label=entry, style=dashed];
m4_168 -> m4_173  [color=darkseagreen4, key=1, label=Table, style=dashed];
m4_168 -> m4_169  [key=0, style=solid];
m4_171 -> m4_173  [color=darkseagreen4, key=1, label=history, style=dashed];
m4_171 -> m4_177  [key=2, style=dotted];
m4_171 -> m4_172  [key=0, style=solid];
m4_172 -> m4_173  [key=0, style=solid];
m4_172 -> m4_176  [key=2, style=dotted];
m4_170 -> m4_171  [key=0, style=solid];
m4_170 -> m4_176  [key=2, style=dotted];
m4_111 -> m4_112  [key=0, style=solid];
m4_112 -> m4_80  [key=2, style=dotted];
m4_112 -> m4_113  [key=0, style=solid];
m4_112 -> m4_101  [key=2, style=dotted];
m4_113 -> m4_111  [color=blue, key=0, style=bold];
m4_114 -> m4_115  [key=0, style=solid];
m4_115 -> m4_116  [key=0, style=solid];
m4_115 -> m4_117  [key=2, style=dotted];
m4_115 -> m4_118  [key=2, style=dotted];
m4_116 -> m4_114  [color=blue, key=0, style=bold];
m4_73 -> m4_74  [key=0, style=solid];
m4_74 -> m4_75  [key=0, style=solid];
m4_74 -> m4_76  [key=2, style=dotted];
m4_75 -> m4_73  [color=blue, key=0, style=bold];
m4_64 -> m4_65  [key=0, style=solid];
m4_67 -> m4_68  [color=green, key=0, style=solid];
m4_67 -> m4_69  [color=green, key=0, style=solid];
m4_66 -> m4_67  [color=green, key=0, style=solid];
m4_66 -> m4_71  [key=2, style=dotted];
m4_66 -> m4_68  [color=darkseagreen4, key=1, label=descriptor, style=dashed];
m4_68 -> m4_69  [key=0, style=solid];
m4_68 -> m4_72  [key=2, style=dotted];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_63  [key=2, style=dotted];
m4_65 -> m4_66  [key=0, style=solid];
m4_65 -> m4_68  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m4_65 -> m4_69  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m4_65 -> m4_61  [key=2, style=dotted];
m4_70 -> m4_64  [color=blue, key=0, style=bold];
m4_188 -> m4_24  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_1  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_5  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_6  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_11  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_15  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_20  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_25  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_26  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_27  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_42  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_58  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_66  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_74  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_78  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_115  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m4_188 -> m4_179  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m5_0 -> m5_1  [color=green, key=0, style=solid];
m5_0 -> m5_4  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m5_0 -> m5_6  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m5_0 -> m5_9  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m5_0 -> m5_12  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m5_0 -> m5_15  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m5_0 -> m5_16  [color=green, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m5_1 -> m5_2  [color=green, key=0, style=solid];
m5_1 -> m5_17  [color=green, key=0, style=solid];
m5_12 -> m5_1  [color=green, key=0, style=solid];
m5_12 -> m5_23  [color=green, key=2, style=dotted];
m5_12 -> m5_24  [color=green, key=2, style=dotted];
m5_15 -> m5_1  [color=green, key=0, style=solid];
m5_15 -> m5_27  [color=green, key=2, style=dotted];
m5_15 -> m5_28  [color=green, key=2, style=dotted];
m5_16 -> m5_1  [color=green, key=0, style=solid];
m5_16 -> m5_28  [color=green, key=2, style=dotted];
m5_7 -> m5_1  [color=green, key=0, style=solid];
m5_7 -> m5_21  [color=green, key=2, style=dotted];
m5_7 -> m5_19  [color=green, key=2, style=dotted];
m5_10 -> m5_1  [color=green, key=0, style=solid];
m5_10 -> m5_22  [color=green, key=2, style=dotted];
m5_10 -> m5_19  [color=green, key=2, style=dotted];
m5_2 -> m5_4  [color=green, key=1, label=name, style=dashed];
m5_2 -> m5_6  [color=green, key=1, label=name, style=dashed];
m5_2 -> m5_9  [color=green, key=1, label=name, style=dashed];
m5_2 -> m5_12  [color=green, key=1, label=name, style=dashed];
m5_2 -> m5_15  [color=green, key=1, label=name, style=dashed];
m5_2 -> m5_16  [color=green, key=1, label=name, style=dashed];
m5_2 -> m5_2  [color=green, key=1, label=row, style=dashed];
m5_2 -> m5_3  [color=green, key=0, style=solid];
m5_4 -> m5_5  [color=green, key=0, style=solid];
m5_4 -> m5_18  [color=green, key=2, style=dotted];
m5_4 -> m5_19  [color=green, key=2, style=dotted];
m5_3 -> m5_4  [color=green, key=0, style=solid];
m5_3 -> m5_16  [color=green, key=1, label=value, style=dashed];
m5_3 -> m5_3  [color=green, key=1, label=row, style=dashed];
m5_3 -> m5_5  [color=green, key=1, label=value, style=dashed];
m5_3 -> m5_8  [color=green, key=1, label=value, style=dashed];
m5_3 -> m5_11  [color=green, key=1, label=value, style=dashed];
m5_3 -> m5_13  [color=green, key=1, label=value, style=dashed];
m5_3 -> m5_14  [color=green, key=1, label=value, style=dashed];
m5_5 -> m5_6  [color=green, key=0, style=solid];
m5_5 -> m5_8  [color=green, key=0, style=solid];
m5_6 -> m5_7  [color=green, key=0, style=solid];
m5_6 -> m5_20  [color=green, key=2, style=dotted];
m5_9 -> m5_10  [color=green, key=0, style=solid];
m5_9 -> m5_20  [color=green, key=2, style=dotted];
m5_8 -> m5_9  [color=green, key=0, style=solid];
m5_8 -> m5_11  [color=green, key=0, style=solid];
m5_11 -> m5_12  [color=green, key=0, style=solid];
m5_11 -> m5_13  [color=green, key=0, style=solid];
m5_14 -> m5_15  [color=green, key=0, style=solid];
m5_14 -> m5_26  [color=green, key=2, style=dotted];
m5_13 -> m5_16  [color=green, key=0, style=solid];
m5_13 -> m5_14  [color=green, key=0, style=solid];
m5_13 -> m5_25  [color=green, key=2, style=dotted];
m5_17 -> m5_0  [color=blue, key=0, style=bold];
m6_16 -> m6_17  [key=0, style=solid];
m6_16 -> m6_18  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_17 -> m6_5  [key=2, style=dotted];
m6_17 -> m6_6  [key=2, style=dotted];
m6_17 -> m6_18  [key=0, style=solid];
m6_18 -> m6_5  [key=2, style=dotted];
m6_18 -> m6_11  [key=2, style=dotted];
m6_18 -> m6_19  [key=0, style=solid];
m6_19 -> m6_16  [color=blue, key=0, style=bold];
m6_2 -> m6_3  [color=red, key=0, style=solid];
m6_2 -> m6_4  [key=0, style=solid];
m6_2 -> m6_11  [key=2, style=dotted];
m6_3 -> m6_5  [key=2, style=dotted];
m6_3 -> m6_6  [key=2, style=dotted];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_10  [color=red, key=0, style=solid];
m6_4 -> m6_2  [color=blue, key=0, style=bold];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_6  [key=0, style=solid];
m6_4 -> m6_11  [key=2, style=dotted];
m6_5 -> m6_10  [key=0, style=solid];
m6_0 -> m6_1  [key=0, style=solid];
m6_0 -> m6_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_0 -> m6_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_0 -> m6_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_0 -> m6_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m6_1 -> m6_2  [key=0, style=solid];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_8  [key=0, style=solid];
m6_6 -> m6_11  [key=2, style=dotted];
m6_8 -> m6_9  [color=green, key=0, style=solid];
m6_8 -> m6_10  [key=0, style=solid];
m6_8 -> m6_11  [key=2, style=dotted];
m6_8 -> m6_6  [key=2, style=dotted];
m6_7 -> m6_10  [key=0, style=solid];
m6_7 -> m6_9  [color=green, key=1, label=string, style=dashed];
m6_7 -> m6_8  [key=0, style=solid];
m6_9 -> m6_10  [color=green, key=0, style=solid];
m6_9 -> m6_5  [color=green, key=2, style=dotted];
m6_9 -> m6_11  [color=green, key=2, style=dotted];
m6_9 -> m6_20  [color=green, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m6_10 -> m6_0  [color=blue, key=0, style=bold];
m6_10 -> m6_7  [color=blue, key=0, style=bold];
m6_33 -> m6_34  [color=green, key=0, style=solid];
m6_34 -> m6_35  [color=green, key=0, style=solid];
m6_34 -> m6_5  [color=green, key=2, style=dotted];
m6_34 -> m6_28  [color=green, key=2, style=dotted];
m6_35 -> m6_36  [color=green, key=0, style=solid];
m6_35 -> m6_37  [color=green, key=2, style=dotted];
m6_36 -> m6_33  [color=blue, key=0, style=bold];
m6_30 -> m6_31  [key=0, style=solid];
m6_31 -> m6_5  [key=2, style=dotted];
m6_31 -> m6_32  [key=0, style=solid];
m6_31 -> m6_23  [key=2, style=dotted];
m6_32 -> m6_30  [color=blue, key=0, style=bold];
m6_24 -> m6_25  [key=0, style=solid];
m6_25 -> m6_5  [key=2, style=dotted];
m6_25 -> m6_28  [key=2, style=dotted];
m6_25 -> m6_26  [key=0, style=solid];
m6_26 -> m6_27  [key=0, style=solid];
m6_26 -> m6_29  [key=2, style=dotted];
m6_27 -> m6_24  [color=blue, key=0, style=bold];
m6_12 -> m6_13  [key=0, style=solid];
m6_12 -> m6_1  [color=darkseagreen4, key=1, label="HangFire.Web.FontsHandler", style=dashed];
m6_12 -> m6_3  [color=red, key=1, label="HangFire.Web.FontsHandler", style=dashed];
m6_12 -> m6_5  [color=darkseagreen4, key=1, label="HangFire.Web.FontsHandler", style=dashed];
m6_12 -> m6_7  [color=darkseagreen4, key=1, label="HangFire.Web.FontsHandler", style=dashed];
m6_12 -> m6_9  [color=darkseagreen4, key=1, label="HangFire.Web.FontsHandler", style=dashed];
m6_13 -> m6_6  [key=2, style=dotted];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_15  [key=2, style=dotted];
m6_14 -> m6_12  [color=blue, key=0, style=bold];
m6_44 -> m6_45  [key=0, style=solid];
m6_44 -> m6_46  [color=darkseagreen4, key=1, label=int, style=dashed];
m6_45 -> m6_5  [key=2, style=dotted];
m6_45 -> m6_42  [key=2, style=dotted];
m6_45 -> m6_46  [key=0, style=solid];
m6_46 -> m6_43  [key=2, style=dotted];
m6_46 -> m6_47  [key=0, style=solid];
m6_47 -> m6_44  [color=blue, key=0, style=bold];
m6_20 -> m6_21  [key=0, style=solid];
m6_21 -> m6_5  [key=2, style=dotted];
m6_21 -> m6_22  [key=0, style=solid];
m6_21 -> m6_23  [key=2, style=dotted];
m6_22 -> m6_20  [color=blue, key=0, style=bold];
m6_38 -> m6_39  [color=green, key=0, style=solid];
m6_39 -> m6_40  [color=green, key=0, style=solid];
m6_39 -> m6_5  [color=green, key=2, style=dotted];
m6_39 -> m6_42  [color=green, key=2, style=dotted];
m6_40 -> m6_41  [color=green, key=0, style=solid];
m6_40 -> m6_43  [color=green, key=2, style=dotted];
m6_41 -> m6_38  [color=blue, key=0, style=bold];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_8  [key=2, style=dotted];
m7_4 -> m7_5  [key=0, style=solid];
m7_4 -> m7_6  [key=2, style=dotted];
m7_4 -> m7_7  [key=2, style=dotted];
m7_4 -> m7_8  [key=2, style=dotted];
m7_4 -> m7_9  [key=2, style=dotted];
m7_4 -> m7_0  [color=blue, key=0, style=bold];
m7_5 -> m7_3  [color=blue, key=0, style=bold];
m7_15 -> m7_16  [key=0, style=solid];
m7_15 -> m7_17  [key=0, style=solid];
m7_22 -> m7_42  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m7_22 -> m7_23  [color=red, key=0, style=solid];
m7_22 -> m7_53  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m7_22 -> m7_25  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m7_22 -> m7_28  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_23 -> m7_24  [color=red, key=0, style=solid];
m7_23 -> m7_25  [key=2, style=dotted];
m7_24 -> m7_22  [color=blue, key=0, style=bold];
m7_24 -> m7_26  [color=red, key=0, style=solid];
m7_24 -> m7_15  [color=red, key=2, style=dotted];
m7_25 -> m7_26  [key=0, style=solid];
m7_25 -> m7_16  [key=2, style=dotted];
m7_25 -> m7_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_29 -> m7_27  [color=blue, key=0, style=bold];
m7_38 -> m7_39  [color=green, key=0, style=solid];
m7_39 -> m7_40  [color=green, key=0, style=solid];
m7_39 -> m7_18  [color=green, key=2, style=dotted];
m7_40 -> m7_38  [color=blue, key=0, style=bold];
m7_0 -> m7_1  [color=green, key=0, style=solid];
m7_0 -> m7_16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m7_1 -> m7_2  [color=green, key=0, style=solid];
m7_1 -> m7_5  [color=green, key=2, style=dotted];
m7_2 -> m7_3  [color=green, key=0, style=solid];
m7_2 -> m7_6  [color=green, key=2, style=dotted];
m7_2 -> m7_7  [color=green, key=2, style=dotted];
m7_2 -> m7_0  [color=blue, key=0, style=bold];
m7_20 -> m7_18  [color=blue, key=0, style=bold];
m7_18 -> m7_19  [color=red, key=0, style=solid];
m7_18 -> m7_20  [color=red, key=2, style=dotted];
m7_18 -> m7_21  [color=red, key=2, style=dotted];
m7_19 -> m7_20  [key=0, style=solid];
m7_19 -> m7_21  [key=2, style=dotted];
m7_19 -> m7_17  [color=blue, key=0, style=bold];
m7_26 -> m7_22  [color=blue, key=0, style=bold];
m7_26 -> m7_27  [key=0, style=solid];
m7_27 -> m7_28  [key=0, style=solid];
m7_27 -> m7_29  [key=2, style=dotted];
m7_28 -> m7_26  [color=blue, key=0, style=bold];
m7_28 -> m7_29  [key=0, style=solid];
m7_28 -> m7_30  [key=2, style=dotted];
m7_41 -> m7_42  [color=green, key=0, style=solid];
m7_42 -> m7_43  [color=green, key=0, style=solid];
m7_42 -> m7_49  [color=green, key=2, style=dotted];
m7_43 -> m7_44  [color=green, key=0, style=solid];
m7_43 -> m7_22  [color=green, key=2, style=dotted];
m7_44 -> m7_45  [key=0, style=solid];
m7_44 -> m7_30  [key=2, style=dotted];
m7_46 -> m7_47  [color=green, key=0, style=solid];
m7_46 -> m7_51  [color=green, key=2, style=dotted];
m7_45 -> m7_46  [color=green, key=0, style=solid];
m7_45 -> m7_50  [key=2, style=dotted];
m7_47 -> m7_48  [color=green, key=0, style=solid];
m7_47 -> m7_26  [color=green, key=2, style=dotted];
m7_48 -> m7_41  [color=blue, key=0, style=bold];
m7_52 -> m7_53  [key=0, style=solid];
m7_57 -> m7_58  [color=green, key=0, style=solid];
m7_57 -> m7_35  [color=green, key=2, style=dotted];
m7_56 -> m7_57  [color=green, key=0, style=solid];
m7_56 -> m7_50  [key=2, style=dotted];
m7_58 -> m7_59  [color=green, key=0, style=solid];
m7_58 -> m7_51  [color=green, key=2, style=dotted];
m7_59 -> m7_60  [color=green, key=0, style=solid];
m7_59 -> m7_26  [color=green, key=2, style=dotted];
m7_54 -> m7_22  [key=2, style=dotted];
m7_54 -> m7_55  [key=0, style=solid];
m7_55 -> m7_56  [key=0, style=solid];
m7_55 -> m7_30  [key=2, style=dotted];
m7_53 -> m7_49  [key=2, style=dotted];
m7_53 -> m7_54  [key=0, style=solid];
m7_60 -> m7_52  [color=blue, key=0, style=bold];
m7_17 -> m7_18  [color=red, key=0, style=solid];
m7_17 -> m7_14  [color=blue, key=0, style=bold];
m7_10 -> m7_11  [key=0, style=solid];
m7_10 -> m7_13  [color=red, key=1, label=IRedisTransaction, style=dashed];
m7_11 -> m7_12  [key=0, style=solid];
m7_11 -> m7_13  [color=red, key=0, style=solid];
m7_13 -> m7_14  [color=red, key=0, style=solid];
m7_13 -> m7_16  [color=red, key=2, style=dotted];
m7_13 -> m7_17  [color=red, key=1, label="lambda expression", style=dashed];
m7_12 -> m7_14  [key=0, style=solid];
m7_12 -> m7_15  [key=2, style=dotted];
m7_14 -> m7_10  [color=blue, key=0, style=bold];
m7_14 -> m7_15  [key=0, style=solid];
m7_16 -> m7_0  [key=2, style=dotted];
m7_16 -> m7_17  [key=0, style=solid];
m7_30 -> m7_31  [key=0, style=solid];
m7_32 -> m7_35  [key=2, style=dotted];
m7_32 -> m7_33  [key=0, style=solid];
m7_32 -> m7_28  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_31 -> m7_32  [key=0, style=solid];
m7_31 -> m7_34  [key=2, style=dotted];
m7_31 -> m7_1  [color=darkseagreen4, key=1, label="HangFire.States.FailedState", style=dashed];
m7_31 -> m7_4  [color=darkseagreen4, key=1, label="HangFire.States.FailedState", style=dashed];
m7_31 -> m7_13  [color=red, key=1, label="HangFire.States.FailedState", style=dashed];
m7_31 -> m7_18  [color=red, key=1, label="HangFire.States.FailedState", style=dashed];
m7_33 -> m7_30  [color=blue, key=0, style=bold];
m7_61 -> m7_39  [color=green, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m7_61 -> m7_43  [color=green, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m7_61 -> m7_47  [color=green, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m7_61 -> m7_59  [color=green, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m7_61 -> m7_44  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m7_61 -> m7_54  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m7_61 -> m7_55  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m9_15 -> m9_16  [key=0, style=solid];
m9_16 -> m9_17  [key=0, style=solid];
m9_16 -> m9_18  [key=2, style=dotted];
m9_17 -> m9_15  [color=blue, key=0, style=bold];
m9_11 -> m9_12  [key=0, style=solid];
m9_12 -> m9_13  [key=0, style=solid];
m9_12 -> m9_14  [key=2, style=dotted];
m9_13 -> m9_11  [color=blue, key=0, style=bold];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_6  [key=2, style=dotted];
m9_2 -> m9_3  [key=0, style=solid];
m9_2 -> m9_7  [key=2, style=dotted];
m9_3 -> m9_4  [key=0, style=solid];
m9_3 -> m9_8  [key=2, style=dotted];
m9_4 -> m9_5  [key=0, style=solid];
m9_4 -> m9_9  [key=2, style=dotted];
m9_4 -> m9_10  [key=2, style=dotted];
m9_5 -> m9_0  [color=blue, key=0, style=bold];
m10_35 -> m10_36  [key=0, style=solid];
m10_36 -> m10_37  [key=0, style=solid];
m10_36 -> m10_38  [key=2, style=dotted];
m10_36 -> m10_39  [key=2, style=dotted];
m10_37 -> m10_35  [color=blue, key=0, style=bold];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_0  [color=blue, key=0, style=bold];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> m10_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m10_2 -> m10_6  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m10_3 -> m10_4  [key=0, style=solid];
m10_3 -> m10_5  [key=0, style=solid];
m10_5 -> m10_6  [key=0, style=solid];
m10_6 -> m10_7  [key=0, style=solid];
m10_4 -> m10_7  [key=0, style=solid];
m10_4 -> m10_8  [key=2, style=dotted];
m10_7 -> m10_2  [color=blue, key=0, style=bold];
m10_27 -> m10_28  [key=0, style=solid];
m10_27 -> m10_29  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m10_27 -> m10_13  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m10_29 -> m10_30  [key=0, style=solid];
m10_29 -> m10_32  [key=2, style=dotted];
m10_29 -> m10_33  [key=2, style=dotted];
m10_28 -> m10_29  [key=0, style=solid];
m10_28 -> m10_31  [key=2, style=dotted];
m10_30 -> m10_27  [color=blue, key=0, style=bold];
m10_9 -> m10_10  [key=0, style=solid];
m10_9 -> m10_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m10_9 -> m10_19  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m10_10 -> m10_11  [key=0, style=solid];
m10_10 -> m10_19  [key=0, style=solid];
m10_10 -> m10_13  [color=darkseagreen4, key=1, label=table, style=dashed];
m10_10 -> m10_29  [color=darkseagreen4, key=1, label=table, style=dashed];
m10_10 -> m10_15  [color=darkseagreen4, key=1, label=table, style=dashed];
m10_16 -> m10_17  [key=0, style=solid];
m10_16 -> m10_25  [key=2, style=dotted];
m10_16 -> m10_16  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m10_19 -> m10_20  [key=0, style=solid];
m10_19 -> m10_25  [key=2, style=dotted];
m10_19 -> m10_19  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m10_11 -> m10_12  [key=0, style=solid];
m10_11 -> m10_21  [key=2, style=dotted];
m10_13 -> m10_14  [key=0, style=solid];
m10_13 -> m10_22  [key=2, style=dotted];
m10_13 -> m10_34  [key=2, style=dotted];
m10_13 -> m10_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m10_13 -> m10_15  [color=darkseagreen4, key=1, label=removedCount, style=dashed];
m10_13 -> m10_18  [color=darkseagreen4, key=1, label=removedCount, style=dashed];
m10_15 -> m10_16  [key=0, style=solid];
m10_15 -> m10_23  [key=2, style=dotted];
m10_15 -> m10_24  [key=2, style=dotted];
m10_12 -> m10_13  [key=0, style=solid];
m10_12 -> m10_12  [color=darkorchid, key=3, label="Local variable int removedCount", style=bold];
m10_14 -> m10_15  [key=0, style=solid];
m10_14 -> m10_18  [key=0, style=solid];
m10_18 -> m10_12  [key=0, style=solid];
m10_18 -> m10_10  [key=0, style=solid];
m10_17 -> m10_18  [key=0, style=solid];
m10_17 -> m10_26  [key=2, style=dotted];
m10_17 -> m10_17  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m10_17 -> m10_19  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m10_20 -> m10_9  [color=blue, key=0, style=bold];
m10_40 -> m10_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.ExpirationManager", style=dashed];
m10_40 -> m10_6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.ExpirationManager", style=dashed];
m10_40 -> m10_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.ExpirationManager", style=dashed];
m10_40 -> m10_19  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.ExpirationManager", style=dashed];
m10_40 -> m10_36  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.ExpirationManager", style=dashed];
m10_41 -> m10_29  [color=darkseagreen4, key=1, label=table, style=dashed];
m11_13 -> m11_14  [key=0, style=solid];
m11_13 -> m11_15  [key=2, style=dotted];
m11_64 -> m11_65  [key=0, style=solid];
m11_60 -> m11_58  [color=blue, key=0, style=bold];
m11_89 -> m11_90  [key=0, style=solid];
m11_90 -> m11_91  [key=0, style=solid];
m11_90 -> m11_74  [key=2, style=dotted];
m11_90 -> m11_95  [color=darkseagreen4, key=1, label=client, style=dashed];
m11_91 -> m11_29  [key=2, style=dotted];
m11_91 -> m11_92  [key=0, style=solid];
m11_91 -> m11_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_92 -> m11_93  [key=0, style=solid];
m11_92 -> m11_30  [key=2, style=dotted];
m11_93 -> m11_89  [color=blue, key=0, style=bold];
m11_49 -> m11_50  [key=0, style=solid];
m11_49 -> m11_34  [color=blue, key=0, style=bold];
m11_50 -> m11_10  [key=2, style=dotted];
m11_50 -> m11_51  [key=0, style=solid];
m11_50 -> m11_49  [key=0, style=solid];
m11_51 -> m11_53  [key=2, style=dotted];
m11_51 -> m11_52  [key=0, style=solid];
m11_51 -> m11_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_52 -> m11_49  [color=blue, key=0, style=bold];
m11_52 -> m11_53  [key=0, style=solid];
m11_52 -> m11_54  [key=2, style=dotted];
m11_41 -> m11_39  [color=blue, key=0, style=bold];
m11_30 -> m11_17  [key=0, style=solid];
m11_30 -> m11_30  [color=darkseagreen4, key=1, label=i, style=dashed];
m11_70 -> m11_71  [key=0, style=solid];
m11_71 -> m11_72  [key=0, style=solid];
m11_71 -> m11_74  [key=2, style=dotted];
m11_72 -> m11_73  [key=0, style=solid];
m11_72 -> m11_75  [key=2, style=dotted];
m11_72 -> m11_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_73 -> m11_70  [color=blue, key=0, style=bold];
m11_63 -> m11_61  [color=blue, key=0, style=bold];
m11_116 -> m11_117  [key=0, style=solid];
m11_118 -> m11_119  [color=green, key=0, style=solid];
m11_118 -> m11_11  [color=green, key=2, style=dotted];
m11_118 -> m11_29  [color=green, key=2, style=dotted];
m11_118 -> m11_124  [color=green, key=1, label="lambda expression", style=dashed];
m11_117 -> m11_118  [color=green, key=0, style=solid];
m11_117 -> m11_74  [key=2, style=dotted];
m11_117 -> m11_119  [color=darkseagreen4, key=1, label=client, style=dashed];
m11_117 -> m11_128  [color=darkseagreen4, key=1, label=client, style=dashed];
m11_119 -> m11_121  [color=green, key=1, label=exception, style=dashed];
m11_119 -> m11_120  [key=0, style=solid];
m11_119 -> m11_29  [key=2, style=dotted];
m11_119 -> m11_127  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_121 -> m11_122  [color=green, key=0, style=solid];
m11_121 -> m11_29  [color=green, key=2, style=dotted];
m11_120 -> m11_121  [color=green, key=0, style=solid];
m11_120 -> m11_123  [key=2, style=dotted];
m11_122 -> m11_116  [color=blue, key=0, style=bold];
m11_14 -> m11_12  [color=blue, key=0, style=bold];
m11_53 -> m11_51  [color=blue, key=0, style=bold];
m11_57 -> m11_58  [key=0, style=solid];
m11_57 -> m11_63  [key=2, style=dotted];
m11_57 -> m11_64  [key=2, style=dotted];
m11_32 -> m11_33  [key=0, style=solid];
m11_32 -> m11_34  [key=2, style=dotted];
m11_29 -> m11_30  [key=0, style=solid];
m11_29 -> m11_37  [key=2, style=dotted];
m11_29 -> m11_29  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m11_98 -> m11_99  [key=0, style=solid];
m11_99 -> m11_100  [key=0, style=solid];
m11_99 -> m11_74  [key=2, style=dotted];
m11_99 -> m11_104  [color=darkseagreen4, key=1, label=client, style=dashed];
m11_100 -> m11_29  [key=2, style=dotted];
m11_100 -> m11_101  [key=0, style=solid];
m11_100 -> m11_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_101 -> m11_102  [key=0, style=solid];
m11_101 -> m11_30  [key=2, style=dotted];
m11_102 -> m11_98  [color=blue, key=0, style=bold];
m11_33 -> m11_31  [color=blue, key=0, style=bold];
m11_34 -> m11_42  [key=0, style=solid];
m11_42 -> m11_43  [key=0, style=solid];
m11_42 -> m11_45  [key=0, style=solid];
m11_42 -> m11_47  [key=0, style=solid];
m11_43 -> m11_44  [key=0, style=solid];
m11_43 -> m11_29  [key=2, style=dotted];
m11_43 -> m11_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_45 -> m11_46  [key=0, style=solid];
m11_45 -> m11_42  [color=blue, key=0, style=bold];
m11_47 -> m11_48  [key=0, style=solid];
m11_47 -> m11_34  [key=2, style=dotted];
m11_44 -> m11_49  [key=0, style=solid];
m11_44 -> m11_45  [key=0, style=solid];
m11_44 -> m11_30  [key=2, style=dotted];
m11_46 -> m11_49  [key=0, style=solid];
m11_46 -> m11_47  [key=0, style=solid];
m11_48 -> m11_49  [key=0, style=solid];
m11_48 -> m11_46  [color=blue, key=0, style=bold];
m11_66 -> m11_64  [color=blue, key=0, style=bold];
m11_12 -> m11_13  [key=0, style=solid];
m11_20 -> m11_21  [key=0, style=solid];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_3  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerComponent", style=dashed];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_3  [key=0, style=solid];
m11_1 -> m11_9  [key=2, style=dotted];
m11_3 -> m11_4  [key=0, style=solid];
m11_3 -> m11_11  [key=2, style=dotted];
m11_3 -> m11_12  [key=2, style=dotted];
m11_3 -> m11_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_2 -> m11_8  [key=0, style=solid];
m11_2 -> m11_9  [key=2, style=dotted];
m11_2 -> m11_3  [key=0, style=solid];
m11_2 -> m11_10  [key=2, style=dotted];
m11_4 -> m11_5  [key=0, style=solid];
m11_4 -> m11_10  [key=2, style=dotted];
m11_4 -> m11_11  [key=2, style=dotted];
m11_4 -> m11_13  [key=2, style=dotted];
m11_5 -> m11_6  [key=0, style=solid];
m11_5 -> m11_14  [key=2, style=dotted];
m11_6 -> m11_7  [key=0, style=solid];
m11_6 -> m11_15  [key=2, style=dotted];
m11_7 -> m11_8  [key=0, style=solid];
m11_7 -> m11_16  [key=2, style=dotted];
m11_7 -> m11_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_8 -> m11_0  [color=blue, key=0, style=bold];
m11_37 -> m11_38  [key=0, style=solid];
m11_37 -> m11_30  [key=2, style=dotted];
m11_79 -> m11_80  [key=0, style=solid];
m11_80 -> m11_81  [key=0, style=solid];
m11_80 -> m11_74  [key=2, style=dotted];
m11_82 -> m11_83  [key=0, style=solid];
m11_82 -> m11_75  [key=2, style=dotted];
m11_82 -> m11_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_81 -> m11_82  [key=0, style=solid];
m11_81 -> m11_84  [key=2, style=dotted];
m11_83 -> m11_79  [color=blue, key=0, style=bold];
m11_35 -> m11_36  [key=0, style=solid];
m11_15 -> m11_16  [key=0, style=solid];
m11_15 -> m11_18  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m11_15 -> m11_28  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m11_16 -> m11_17  [key=0, style=solid];
m11_16 -> m11_23  [color=darkseagreen4, key=1, label=i, style=dashed];
m11_16 -> m11_25  [color=darkseagreen4, key=1, label=i, style=dashed];
m11_16 -> m11_26  [color=darkseagreen4, key=1, label=i, style=dashed];
m11_16 -> m11_27  [color=darkseagreen4, key=1, label=i, style=dashed];
m11_16 -> m11_39  [color=darkseagreen4, key=1, label=i, style=dashed];
m11_16 -> m11_30  [color=darkseagreen4, key=1, label=i, style=dashed];
m11_18 -> m11_19  [key=0, style=solid];
m11_18 -> m11_32  [key=2, style=dotted];
m11_18 -> m11_20  [key=2, style=dotted];
m11_28 -> m11_29  [key=0, style=solid];
m11_28 -> m11_36  [key=2, style=dotted];
m11_28 -> m11_28  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m11_28 -> m11_25  [color=blue, key=0, style=bold];
m11_17 -> m11_18  [key=0, style=solid];
m11_17 -> m11_31  [key=0, style=solid];
m11_23 -> m11_24  [key=0, style=solid];
m11_23 -> m11_25  [key=0, style=solid];
m11_23 -> m11_21  [color=blue, key=0, style=bold];
m11_25 -> m11_26  [key=0, style=solid];
m11_25 -> m11_33  [key=2, style=dotted];
m11_25 -> m11_27  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
m11_25 -> m11_39  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
m11_25 -> m11_28  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
m11_26 -> m11_27  [key=0, style=solid];
m11_26 -> m11_34  [key=2, style=dotted];
m11_26 -> m11_29  [key=2, style=dotted];
m11_26 -> m11_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_27 -> m11_28  [key=0, style=solid];
m11_27 -> m11_35  [key=2, style=dotted];
m11_27 -> m11_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_27 -> m11_30  [key=2, style=dotted];
m11_19 -> m11_31  [key=0, style=solid];
m11_19 -> m11_17  [color=blue, key=0, style=bold];
m11_21 -> m11_31  [key=0, style=solid];
m11_21 -> m11_22  [key=0, style=solid];
m11_22 -> m11_23  [key=0, style=solid];
m11_22 -> m11_24  [key=2, style=dotted];
m11_24 -> m11_31  [key=0, style=solid];
m11_24 -> m11_130  [key=0, style=solid];
m11_31 -> m11_15  [color=blue, key=0, style=bold];
m11_31 -> m11_32  [key=0, style=solid];
m11_58 -> m11_59  [key=0, style=solid];
m11_58 -> m11_65  [key=2, style=dotted];
m11_58 -> m11_66  [key=2, style=dotted];
m11_59 -> m11_60  [key=0, style=solid];
m11_59 -> m11_53  [key=2, style=dotted];
m11_59 -> m11_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_59 -> m11_55  [color=blue, key=0, style=bold];
m11_74 -> m11_131  [key=0, style=solid];
m11_131 -> m11_132  [key=0, style=solid];
m11_131 -> m11_34  [key=2, style=dotted];
m11_132 -> m11_74  [color=blue, key=0, style=bold];
m11_65 -> m11_66  [key=0, style=solid];
m11_65 -> m11_53  [key=2, style=dotted];
m11_65 -> m11_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_65 -> m11_72  [color=darkorchid, key=3, label="Parameter variable string name", style=bold];
m11_54 -> m11_55  [key=0, style=solid];
m11_39 -> m11_40  [key=0, style=solid];
m11_39 -> m11_41  [key=2, style=dotted];
m11_38 -> m11_39  [key=0, style=solid];
m11_38 -> m11_35  [color=blue, key=0, style=bold];
m11_40 -> m11_38  [color=blue, key=0, style=bold];
m11_40 -> m11_41  [key=0, style=solid];
m11_40 -> m11_34  [key=2, style=dotted];
m11_124 -> m11_125  [color=green, key=0, style=solid];
m11_125 -> m11_126  [color=green, key=0, style=solid];
m11_125 -> m11_29  [color=green, key=2, style=dotted];
m11_125 -> m11_115  [color=green, key=2, style=dotted];
m11_126 -> m11_124  [color=blue, key=0, style=bold];
m11_62 -> m11_63  [key=0, style=solid];
m11_62 -> m11_34  [key=2, style=dotted];
m11_68 -> m11_69  [key=0, style=solid];
m11_68 -> m11_34  [key=2, style=dotted];
m11_68 -> m11_39  [color=darkseagreen4, key=1, label=i, style=dashed];
m11_95 -> m11_96  [key=0, style=solid];
m11_95 -> m11_97  [key=2, style=dotted];
m11_104 -> m11_105  [key=0, style=solid];
m11_104 -> m11_106  [key=2, style=dotted];
m11_128 -> m11_129  [key=0, style=solid];
m11_128 -> m11_97  [key=2, style=dotted];
m11_127 -> m11_128  [key=0, style=solid];
m11_113 -> m11_29  [key=2, style=dotted];
m11_113 -> m11_115  [key=2, style=dotted];
m11_113 -> m11_114  [key=0, style=solid];
m11_61 -> m11_62  [key=0, style=solid];
m11_67 -> m11_68  [key=0, style=solid];
m11_67 -> m11_3  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_4  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_5  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_6  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_7  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_13  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_17  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_18  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_23  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_25  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_27  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_39  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_52  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_67 -> m11_58  [color=darkseagreen4, key=1, label="Hangfire.Server.AutomaticRetryServerComponentWrapper", style=dashed];
m11_69 -> m11_67  [color=blue, key=0, style=bold];
m11_69 -> m11_39  [color=darkseagreen4, key=1, label=nextTry, style=dashed];
m11_76 -> m11_77  [key=0, style=solid];
m11_85 -> m11_86  [key=0, style=solid];
m11_94 -> m11_95  [key=0, style=solid];
m11_96 -> m11_94  [color=blue, key=0, style=bold];
m11_103 -> m11_104  [key=0, style=solid];
m11_105 -> m11_103  [color=blue, key=0, style=bold];
m11_112 -> m11_113  [key=0, style=solid];
m11_129 -> m11_127  [color=blue, key=0, style=bold];
m11_114 -> m11_112  [color=blue, key=0, style=bold];
m11_78 -> m11_76  [color=blue, key=0, style=bold];
m11_77 -> m11_78  [key=0, style=solid];
m11_77 -> m11_20  [key=2, style=dotted];
m11_87 -> m11_85  [color=blue, key=0, style=bold];
m11_86 -> m11_87  [key=0, style=solid];
m11_86 -> m11_88  [key=2, style=dotted];
m11_55 -> m11_56  [key=0, style=solid];
m11_55 -> m11_57  [key=2, style=dotted];
m11_56 -> m11_54  [color=blue, key=0, style=bold];
m11_56 -> m11_57  [key=0, style=solid];
m11_56 -> m11_60  [key=2, style=dotted];
m11_56 -> m11_61  [key=2, style=dotted];
m11_56 -> m11_62  [key=2, style=dotted];
m11_36 -> m11_29  [key=2, style=dotted];
m11_36 -> m11_37  [key=0, style=solid];
m11_36 -> m11_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_130 -> m11_24  [color=blue, key=0, style=bold];
m11_107 -> m11_108  [key=0, style=solid];
m11_108 -> m11_109  [key=0, style=solid];
m11_108 -> m11_74  [key=2, style=dotted];
m11_109 -> m11_110  [key=0, style=solid];
m11_109 -> m11_97  [key=2, style=dotted];
m11_110 -> m11_111  [key=0, style=solid];
m11_110 -> m11_75  [key=2, style=dotted];
m11_110 -> m11_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_111 -> m11_107  [color=blue, key=0, style=bold];
m11_133 -> m11_118  [color=green, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_1  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_2  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_3  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_4  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_5  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_6  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_7  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_26  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_32  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_36  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_40  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_43  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_47  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_59  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_62  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_65  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_68  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_71  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_72  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_80  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_82  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_90  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_91  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_95  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_99  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_100  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_104  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_108  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_109  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_110  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_117  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_119  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_128  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_133 -> m11_131  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.BackgroundJobClientFacts", style=dashed];
m11_134 -> m11_95  [color=darkseagreen4, key=1, label=client, style=dashed];
m11_135 -> m11_104  [color=darkseagreen4, key=1, label=client, style=dashed];
m11_136 -> m11_128  [color=darkseagreen4, key=1, label=client, style=dashed];
m12_23 -> m12_24  [key=0, style=solid];
m12_24 -> m12_13  [key=2, style=dotted];
m12_24 -> m12_25  [key=0, style=solid];
m12_25 -> m12_23  [color=blue, key=0, style=bold];
m12_37 -> m12_38  [key=0, style=solid];
m12_38 -> m12_29  [key=2, style=dotted];
m12_38 -> m12_39  [key=0, style=solid];
m12_39 -> m12_37  [color=blue, key=0, style=bold];
m12_33 -> m12_34  [key=0, style=solid];
m12_34 -> m12_35  [key=0, style=solid];
m12_34 -> m12_36  [key=2, style=dotted];
m12_35 -> m12_33  [color=blue, key=0, style=bold];
m12_20 -> m12_21  [color=green, key=0, style=solid];
m12_21 -> m12_22  [color=green, key=0, style=solid];
m12_21 -> m12_13  [color=green, key=2, style=dotted];
m12_22 -> m12_20  [color=blue, key=0, style=bold];
m12_30 -> m12_31  [color=green, key=0, style=solid];
m12_31 -> m12_32  [color=green, key=0, style=solid];
m12_31 -> m12_29  [color=green, key=2, style=dotted];
m12_32 -> m12_30  [color=blue, key=0, style=bold];
m12_0 -> m12_1  [key=0, style=solid];
m12_3 -> m12_4  [color=green, key=0, style=solid];
m12_3 -> m12_12  [color=green, key=2, style=dotted];
m12_2 -> m12_3  [color=green, key=0, style=solid];
m12_2 -> m12_9  [key=2, style=dotted];
m12_2 -> m12_10  [key=2, style=dotted];
m12_2 -> m12_11  [key=2, style=dotted];
m12_2 -> m12_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_13  [key=2, style=dotted];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_8  [key=2, style=dotted];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_14  [key=2, style=dotted];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_15  [key=2, style=dotted];
m12_6 -> m12_16  [key=2, style=dotted];
m12_7 -> m12_0  [color=blue, key=0, style=bold];
m12_17 -> m12_18  [key=0, style=solid];
m12_18 -> m12_19  [key=0, style=solid];
m12_19 -> m12_17  [color=blue, key=0, style=bold];
m12_26 -> m12_27  [color=green, key=0, style=solid];
m12_27 -> m12_28  [color=green, key=0, style=solid];
m12_27 -> m12_29  [color=green, key=2, style=dotted];
m12_28 -> m12_26  [color=blue, key=0, style=bold];
m12_47 -> m12_3  [color=green, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m12_47 -> m12_21  [color=green, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m12_47 -> m12_27  [color=green, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m12_47 -> m12_31  [color=green, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m12_47 -> m12_1  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m12_47 -> m12_2  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m12_47 -> m12_4  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m12_47 -> m12_5  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m12_47 -> m12_6  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m12_47 -> m12_24  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m12_47 -> m12_34  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m12_47 -> m12_38  [color=darkseagreen4, key=1, label="HangFire.Tests.Client.JobClientTests", style=dashed];
m13_0 -> m13_1  [color=green, key=0, style=solid];
m13_0 -> m13_16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m13_1 -> m13_2  [color=green, key=0, style=solid];
m13_1 -> m13_5  [color=green, key=2, style=dotted];
m13_2 -> m13_3  [color=green, key=0, style=solid];
m13_2 -> m13_6  [color=green, key=2, style=dotted];
m13_2 -> m13_7  [color=green, key=2, style=dotted];
m13_3 -> m13_4  [key=0, style=solid];
m13_3 -> m13_8  [key=2, style=dotted];
m13_4 -> m13_0  [color=blue, key=0, style=bold];
m13_22 -> m13_31  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m13_22 -> m13_23  [key=0, style=solid];
m13_22 -> m13_45  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m13_22 -> m13_56  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m13_22 -> m13_65  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m13_22 -> m13_77  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m13_22 -> m13_86  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m13_23 -> m13_24  [key=0, style=solid];
m13_23 -> m13_25  [key=2, style=dotted];
m13_24 -> m13_22  [color=blue, key=0, style=bold];
m13_30 -> m13_31  [color=green, key=0, style=solid];
m13_31 -> m13_32  [color=green, key=0, style=solid];
m13_31 -> m13_39  [color=green, key=2, style=dotted];
m13_32 -> m13_22  [key=2, style=dotted];
m13_32 -> m13_33  [key=0, style=solid];
m13_37 -> m13_26  [key=2, style=dotted];
m13_37 -> m13_38  [key=0, style=solid];
m13_33 -> m13_34  [key=0, style=solid];
m13_33 -> m13_40  [key=2, style=dotted];
m13_36 -> m13_37  [key=0, style=solid];
m13_36 -> m13_43  [key=2, style=dotted];
m13_34 -> m13_35  [key=0, style=solid];
m13_34 -> m13_41  [key=2, style=dotted];
m13_35 -> m13_36  [key=0, style=solid];
m13_35 -> m13_42  [key=2, style=dotted];
m13_38 -> m13_30  [color=blue, key=0, style=bold];
m13_85 -> m13_86  [key=0, style=solid];
m13_92 -> m13_93  [color=green, key=0, style=solid];
m13_92 -> m13_26  [color=green, key=2, style=dotted];
m13_91 -> m13_92  [color=green, key=0, style=solid];
m13_91 -> m13_43  [key=2, style=dotted];
m13_87 -> m13_22  [key=2, style=dotted];
m13_87 -> m13_88  [key=0, style=solid];
m13_86 -> m13_39  [key=2, style=dotted];
m13_86 -> m13_87  [key=0, style=solid];
m13_90 -> m13_91  [key=0, style=solid];
m13_90 -> m13_42  [key=2, style=dotted];
m13_88 -> m13_89  [key=0, style=solid];
m13_88 -> m13_40  [key=2, style=dotted];
m13_89 -> m13_90  [key=0, style=solid];
m13_89 -> m13_41  [key=2, style=dotted];
m13_93 -> m13_85  [color=blue, key=0, style=bold];
m13_76 -> m13_77  [key=0, style=solid];
m13_83 -> m13_26  [key=2, style=dotted];
m13_83 -> m13_84  [key=0, style=solid];
m13_78 -> m13_22  [key=2, style=dotted];
m13_78 -> m13_79  [key=0, style=solid];
m13_77 -> m13_39  [key=2, style=dotted];
m13_77 -> m13_78  [key=0, style=solid];
m13_82 -> m13_83  [key=0, style=solid];
m13_82 -> m13_43  [key=2, style=dotted];
m13_79 -> m13_80  [key=0, style=solid];
m13_79 -> m13_40  [key=2, style=dotted];
m13_81 -> m13_82  [key=0, style=solid];
m13_81 -> m13_42  [key=2, style=dotted];
m13_80 -> m13_81  [key=0, style=solid];
m13_80 -> m13_41  [key=2, style=dotted];
m13_84 -> m13_76  [color=blue, key=0, style=bold];
m13_14 -> m13_15  [key=0, style=solid];
m13_16 -> m13_0  [key=2, style=dotted];
m13_16 -> m13_17  [key=0, style=solid];
m13_15 -> m13_16  [key=0, style=solid];
m13_15 -> m13_17  [key=0, style=solid];
m13_17 -> m13_14  [color=blue, key=0, style=bold];
m13_44 -> m13_45  [key=0, style=solid];
m13_52 -> m13_26  [key=2, style=dotted];
m13_52 -> m13_53  [key=0, style=solid];
m13_46 -> m13_22  [key=2, style=dotted];
m13_46 -> m13_47  [key=0, style=solid];
m13_45 -> m13_39  [key=2, style=dotted];
m13_45 -> m13_46  [key=0, style=solid];
m13_51 -> m13_52  [key=0, style=solid];
m13_51 -> m13_54  [key=2, style=dotted];
m13_47 -> m13_48  [key=0, style=solid];
m13_47 -> m13_40  [key=2, style=dotted];
m13_50 -> m13_43  [key=2, style=dotted];
m13_50 -> m13_51  [key=0, style=solid];
m13_48 -> m13_49  [key=0, style=solid];
m13_48 -> m13_41  [key=2, style=dotted];
m13_49 -> m13_42  [key=2, style=dotted];
m13_49 -> m13_50  [key=0, style=solid];
m13_53 -> m13_44  [color=blue, key=0, style=bold];
m13_26 -> m13_27  [color=green, key=0, style=solid];
m13_27 -> m13_28  [color=green, key=0, style=solid];
m13_27 -> m13_29  [color=green, key=2, style=dotted];
m13_28 -> m13_26  [color=blue, key=0, style=bold];
m13_64 -> m13_65  [key=0, style=solid];
m13_74 -> m13_26  [key=2, style=dotted];
m13_74 -> m13_75  [key=0, style=solid];
m13_66 -> m13_22  [key=2, style=dotted];
m13_66 -> m13_67  [key=0, style=solid];
m13_65 -> m13_39  [key=2, style=dotted];
m13_65 -> m13_66  [key=0, style=solid];
m13_73 -> m13_74  [key=0, style=solid];
m13_73 -> m13_43  [key=2, style=dotted];
m13_67 -> m13_68  [key=0, style=solid];
m13_67 -> m13_40  [key=2, style=dotted];
m13_71 -> m13_43  [key=2, style=dotted];
m13_71 -> m13_72  [key=0, style=solid];
m13_72 -> m13_73  [key=0, style=solid];
m13_72 -> m13_42  [key=2, style=dotted];
m13_68 -> m13_69  [key=0, style=solid];
m13_68 -> m13_41  [key=2, style=dotted];
m13_70 -> m13_42  [key=2, style=dotted];
m13_70 -> m13_71  [key=0, style=solid];
m13_69 -> m13_41  [key=2, style=dotted];
m13_69 -> m13_70  [key=0, style=solid];
m13_75 -> m13_64  [color=blue, key=0, style=bold];
m13_55 -> m13_56  [key=0, style=solid];
m13_62 -> m13_26  [key=2, style=dotted];
m13_62 -> m13_63  [key=0, style=solid];
m13_57 -> m13_22  [key=2, style=dotted];
m13_57 -> m13_58  [key=0, style=solid];
m13_56 -> m13_39  [key=2, style=dotted];
m13_56 -> m13_57  [key=0, style=solid];
m13_61 -> m13_62  [key=0, style=solid];
m13_61 -> m13_43  [key=2, style=dotted];
m13_58 -> m13_59  [key=0, style=solid];
m13_58 -> m13_40  [key=2, style=dotted];
m13_60 -> m13_61  [key=0, style=solid];
m13_60 -> m13_42  [key=2, style=dotted];
m13_59 -> m13_60  [key=0, style=solid];
m13_59 -> m13_41  [key=2, style=dotted];
m13_63 -> m13_55  [color=blue, key=0, style=bold];
m13_94 -> m13_92  [color=green, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m13_94 -> m13_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m13_94 -> m13_37  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m13_94 -> m13_46  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m13_94 -> m13_52  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m13_94 -> m13_57  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m13_94 -> m13_62  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m13_94 -> m13_66  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m13_94 -> m13_74  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m13_94 -> m13_78  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m13_94 -> m13_83  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m13_94 -> m13_87  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m14_6 -> m14_7  [key=0, style=solid];
m14_7 -> m14_8  [key=0, style=solid];
m14_7 -> m14_10  [color=darkseagreen4, key=1, label=sqlQuery, style=dashed];
m14_7 -> m14_19  [color=darkseagreen4, key=1, label=sqlQuery, style=dashed];
m14_8 -> m14_9  [key=0, style=solid];
m14_10 -> m14_11  [key=0, style=solid];
m14_10 -> m14_16  [key=2, style=dotted];
m14_10 -> m14_18  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_9 -> m14_10  [key=0, style=solid];
m14_9 -> m14_13  [key=0, style=solid];
m14_9 -> m14_15  [key=2, style=dotted];
m14_13 -> m14_14  [key=0, style=solid];
m14_13 -> m14_17  [key=2, style=dotted];
m14_11 -> m14_12  [key=0, style=solid];
m14_12 -> m14_13  [key=0, style=solid];
m14_14 -> m14_6  [color=blue, key=0, style=bold];
m14_0 -> m14_1  [key=0, style=solid];
m14_0 -> m14_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m14_1 -> m14_2  [key=0, style=solid];
m14_1 -> m14_3  [key=0, style=solid];
m14_3 -> m14_4  [key=0, style=solid];
m14_2 -> m14_4  [key=0, style=solid];
m14_2 -> m14_5  [key=2, style=dotted];
m14_4 -> m14_0  [color=blue, key=0, style=bold];
m14_38 -> m14_39  [key=0, style=solid];
m14_39 -> m14_40  [key=0, style=solid];
m14_39 -> m14_41  [key=2, style=dotted];
m14_40 -> m14_38  [color=blue, key=0, style=bold];
m14_27 -> m14_28  [key=0, style=solid];
m14_27 -> m14_29  [color=red, key=1, label=string, style=dashed];
m14_27 -> m14_32  [color=darkseagreen4, key=1, label=string, style=dashed];
m14_28 -> m14_29  [color=red, key=0, style=solid];
m14_28 -> m14_32  [color=darkseagreen4, key=1, label=sqlQuery, style=dashed];
m14_29 -> m14_30  [color=red, key=0, style=solid];
m14_29 -> m14_16  [color=red, key=2, style=dotted];
m14_29 -> m14_31  [color=red, key=1, label="lambda expression", style=dashed];
m14_30 -> m14_27  [color=blue, key=0, style=bold];
m14_42 -> m14_43  [key=0, style=solid];
m14_42 -> m14_44  [color=red, key=1, label=string, style=dashed];
m14_42 -> m14_47  [color=red, key=1, label=string, style=dashed];
m14_43 -> m14_44  [color=red, key=0, style=solid];
m14_43 -> m14_47  [color=red, key=1, label=sqlQuery, style=dashed];
m14_44 -> m14_45  [color=red, key=0, style=solid];
m14_44 -> m14_16  [color=red, key=2, style=dotted];
m14_44 -> m14_46  [color=red, key=1, label="lambda expression", style=dashed];
m14_45 -> m14_42  [color=blue, key=0, style=bold];
m14_16 -> m14_52  [key=0, style=solid];
m14_52 -> m14_53  [key=0, style=solid];
m14_52 -> m14_54  [key=2, style=dotted];
m14_53 -> m14_16  [color=blue, key=0, style=bold];
m14_46 -> m14_47  [color=red, key=0, style=solid];
m14_19 -> m14_20  [key=0, style=solid];
m14_19 -> m14_21  [key=2, style=dotted];
m14_19 -> m14_22  [key=2, style=dotted];
m14_19 -> m14_23  [key=2, style=dotted];
m14_19 -> m14_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_18 -> m14_19  [key=0, style=solid];
m14_20 -> m14_18  [color=blue, key=0, style=bold];
m14_24 -> m14_25  [key=0, style=solid];
m14_25 -> m14_26  [key=0, style=solid];
m14_26 -> m14_24  [color=blue, key=0, style=bold];
m14_32 -> m14_33  [key=0, style=solid];
m14_32 -> m14_34  [key=2, style=dotted];
m14_32 -> m14_23  [key=2, style=dotted];
m14_32 -> m14_22  [key=2, style=dotted];
m14_32 -> m14_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m14_31 -> m14_32  [key=0, style=solid];
m14_33 -> m14_31  [color=blue, key=0, style=bold];
m14_35 -> m14_36  [key=0, style=solid];
m14_36 -> m14_37  [key=0, style=solid];
m14_37 -> m14_35  [color=blue, key=0, style=bold];
m14_47 -> m14_48  [color=red, key=0, style=solid];
m14_47 -> m14_34  [color=red, key=2, style=dotted];
m14_47 -> m14_50  [color=red, key=2, style=dotted];
m14_48 -> m14_49  [key=0, style=solid];
m14_48 -> m14_51  [key=2, style=dotted];
m14_49 -> m14_46  [color=blue, key=0, style=bold];
m14_55 -> m14_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m14_55 -> m14_8  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m14_55 -> m14_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m14_55 -> m14_10  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m14_55 -> m14_11  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m14_55 -> m14_12  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m14_55 -> m14_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m14_55 -> m14_29  [color=red, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m14_55 -> m14_44  [color=red, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m14_55 -> m14_52  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueueMonitoringApi", style=dashed];
m14_56 -> m14_19  [color=darkseagreen4, key=1, label=sqlQuery, style=dashed];
m14_57 -> m14_32  [color=darkseagreen4, key=1, label=string, style=dashed];
m14_58 -> m14_32  [color=darkseagreen4, key=1, label=int, style=dashed];
m14_59 -> m14_32  [color=darkseagreen4, key=1, label=int, style=dashed];
m14_60 -> m14_32  [color=darkseagreen4, key=1, label=sqlQuery, style=dashed];
m14_61 -> m14_47  [color=red, key=1, label=string, style=dashed];
m14_62 -> m14_47  [color=red, key=1, label=sqlQuery, style=dashed];
m15_17 -> m15_18  [key=0, style=solid];
m15_17 -> m15_20  [key=2, style=dotted];
m15_23 -> m15_24  [color=green, key=0, style=solid];
m15_23 -> m15_27  [color=green, key=1, label=methodInfo, style=dashed];
m15_23 -> m15_4  [key=2, style=dotted];
m15_36 -> m15_37  [key=0, style=solid];
m15_36 -> m15_43  [key=0, style=solid];
m15_36 -> m15_4  [key=2, style=dotted];
m15_37 -> m15_30  [key=2, style=dotted];
m15_37 -> m15_38  [color=red, key=0, style=solid];
m15_37 -> m15_22  [color=red, key=2, style=dotted];
m15_37 -> m15_40  [color=red, key=1, label=jobId, style=dashed];
m15_37 -> m15_42  [color=red, key=1, label=jobId, style=dashed];
m15_38 -> m15_32  [key=2, style=dotted];
m15_38 -> m15_39  [color=red, key=0, style=solid];
m15_38 -> m15_47  [key=2, style=dotted];
m15_38 -> m15_48  [key=2, style=dotted];
m15_38 -> m15_40  [color=darkseagreen4, key=1, label=state, style=dashed];
m15_39 -> m15_36  [color=blue, key=0, style=bold];
m15_39 -> m15_40  [color=red, key=0, style=solid];
m15_39 -> m15_24  [color=red, key=2, style=dotted];
m15_46 -> m15_32  [key=2, style=dotted];
m15_46 -> m15_47  [key=0, style=solid];
m15_22 -> m15_63  [key=0, style=solid];
m15_22 -> m15_24  [color=green, key=1, label=type, style=dashed];
m15_22 -> m15_23  [key=0, style=solid];
m15_22 -> m15_26  [color=darkseagreen4, key=1, label=type, style=dashed];
m15_63 -> m15_64  [color=green, key=0, style=solid];
m15_63 -> m15_65  [key=2, style=dotted];
m15_63 -> m15_66  [key=2, style=dotted];
m15_63 -> m15_70  [color=green, key=2, style=dotted];
m15_63 -> m15_59  [color=green, key=2, style=dotted];
m15_63 -> m15_67  [color=green, key=1, label=nonCachedAttributes, style=dashed];
m15_64 -> m15_22  [color=blue, key=0, style=bold];
m15_64 -> m15_65  [color=green, key=0, style=solid];
m15_64 -> m15_70  [color=green, key=2, style=dotted];
m15_64 -> m15_59  [color=green, key=2, style=dotted];
m15_64 -> m15_66  [color=green, key=1, label=cachedAttributes, style=dashed];
m15_64 -> m15_68  [color=green, key=1, label=cachedAttributes, style=dashed];
m15_49 -> m15_50  [color=green, key=0, style=solid];
m15_49 -> m15_51  [color=green, key=1, label=method, style=dashed];
m15_49 -> m15_57  [key=2, style=dotted];
m15_50 -> m15_51  [color=green, key=0, style=solid];
m15_50 -> m15_52  [color=red, key=2, style=dotted];
m15_50 -> m15_58  [color=green, key=2, style=dotted];
m15_50 -> m15_59  [color=green, key=2, style=dotted];
m15_50 -> m15_54  [color=green, key=1, label=nonCachedAttributes, style=dashed];
m15_51 -> m15_49  [color=blue, key=0, style=bold];
m15_51 -> m15_52  [color=green, key=0, style=solid];
m15_51 -> m15_58  [color=green, key=2, style=dotted];
m15_51 -> m15_59  [color=green, key=2, style=dotted];
m15_51 -> m15_53  [color=green, key=1, label=cachedAttributes, style=dashed];
m15_51 -> m15_55  [color=green, key=1, label=cachedAttributes, style=dashed];
m15_32 -> m15_43  [key=0, style=solid];
m15_32 -> m15_19  [key=2, style=dotted];
m15_32 -> m15_20  [key=2, style=dotted];
m15_18 -> m15_11  [color=blue, key=0, style=bold];
m15_61 -> m15_62  [key=0, style=solid];
m15_4 -> m15_5  [color=red, key=0, style=solid];
m15_4 -> m15_7  [color=red, key=1, label="System.Type", style=dashed];
m15_4 -> m15_8  [color=red, key=1, label="System.Type", style=dashed];
m15_4 -> m15_9  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m15_4 -> m15_12  [color=red, key=1, label="System.Type", style=dashed];
m15_62 -> m15_63  [color=green, key=0, style=solid];
m15_62 -> m15_64  [color=green, key=1, label=method, style=dashed];
m15_62 -> m15_57  [key=2, style=dotted];
m15_26 -> m15_27  [color=green, key=0, style=solid];
m15_26 -> m15_19  [key=2, style=dotted];
m15_48 -> m15_49  [key=0, style=solid];
m15_52 -> m15_53  [color=green, key=0, style=solid];
m15_52 -> m15_19  [key=2, style=dotted];
m15_54 -> m15_55  [key=0, style=solid];
m15_54 -> m15_60  [key=2, style=dotted];
m15_53 -> m15_54  [color=green, key=0, style=solid];
m15_53 -> m15_19  [color=green, key=2, style=dotted];
m15_53 -> m15_59  [key=2, style=dotted];
m15_53 -> m15_55  [color=darkseagreen4, key=1, label=job, style=dashed];
m15_53 -> m15_56  [color=darkseagreen4, key=1, label=job, style=dashed];
m15_53 -> m15_57  [color=darkseagreen4, key=1, label=job, style=dashed];
m15_55 -> m15_56  [key=0, style=solid];
m15_55 -> m15_60  [key=2, style=dotted];
m15_55 -> m15_61  [key=2, style=dotted];
m15_56 -> m15_48  [color=blue, key=0, style=bold];
m15_56 -> m15_57  [key=0, style=solid];
m15_56 -> m15_62  [key=2, style=dotted];
m15_21 -> m15_22  [key=0, style=solid];
m15_33 -> m15_34  [color=green, key=0, style=solid];
m15_33 -> m15_35  [key=0, style=solid];
m15_33 -> m15_44  [key=2, style=dotted];
m15_33 -> m15_33  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m15_34 -> m15_35  [color=green, key=0, style=solid];
m15_34 -> m15_32  [color=green, key=2, style=dotted];
m15_34 -> m15_43  [key=0, style=solid];
m15_34 -> m15_45  [key=2, style=dotted];
m15_35 -> m15_33  [color=blue, key=0, style=bold];
m15_35 -> m15_36  [key=0, style=solid];
m15_35 -> m15_37  [color=red, key=0, style=solid];
m15_35 -> m15_46  [key=2, style=dotted];
m15_35 -> m15_35  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m15_35 -> m15_38  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m15_45 -> m15_46  [color=green, key=0, style=solid];
m15_45 -> m15_30  [color=green, key=2, style=dotted];
m15_45 -> m15_31  [color=green, key=2, style=dotted];
m15_44 -> m15_45  [color=green, key=0, style=solid];
m15_47 -> m15_44  [color=blue, key=0, style=bold];
m15_8 -> m15_9  [key=0, style=solid];
m15_8 -> m15_16  [color=red, key=0, style=solid];
m15_8 -> m15_19  [color=red, key=2, style=dotted];
m15_8 -> m15_20  [color=red, key=2, style=dotted];
m15_9 -> m15_3  [key=2, style=dotted];
m15_9 -> m15_4  [key=2, style=dotted];
m15_9 -> m15_10  [color=red, key=0, style=solid];
m15_9 -> m15_21  [key=2, style=dotted];
m15_9 -> m15_11  [color=darkseagreen4, key=1, label=queue, style=dashed];
m15_10 -> m15_8  [color=blue, key=0, style=bold];
m15_10 -> m15_11  [color=red, key=0, style=solid];
m15_10 -> m15_22  [color=red, key=2, style=dotted];
m15_10 -> m15_13  [color=red, key=1, label=jobId, style=dashed];
m15_10 -> m15_15  [color=red, key=1, label=jobId, style=dashed];
m15_5 -> m15_6  [color=red, key=0, style=solid];
m15_5 -> m15_7  [color=red, key=0, style=solid];
m15_7 -> m15_8  [color=red, key=0, style=solid];
m15_7 -> m15_9  [color=red, key=0, style=solid];
m15_7 -> m15_18  [color=red, key=2, style=dotted];
m15_7 -> m15_5  [color=blue, key=0, style=bold];
m15_12 -> m15_13  [color=red, key=0, style=solid];
m15_12 -> m15_24  [color=red, key=2, style=dotted];
m15_12 -> m15_14  [color=green, key=1, label=type, style=dashed];
m15_12 -> m15_15  [color=darkseagreen4, key=1, label=type, style=dashed];
m15_6 -> m15_16  [key=0, style=solid];
m15_6 -> m15_17  [key=2, style=dotted];
m15_6 -> m15_3  [key=2, style=dotted];
m15_6 -> m15_7  [key=0, style=solid];
m15_11 -> m15_12  [color=red, key=0, style=solid];
m15_11 -> m15_23  [key=2, style=dotted];
m15_11 -> m15_13  [color=red, key=1, label=state, style=dashed];
m15_13 -> m15_14  [color=green, key=0, style=solid];
m15_13 -> m15_25  [color=red, key=2, style=dotted];
m15_13 -> m15_26  [color=red, key=2, style=dotted];
m15_13 -> m15_4  [key=2, style=dotted];
m15_13 -> m15_16  [color=darkseagreen4, key=1, label=methodInfo, style=dashed];
m15_15 -> m15_16  [key=0, style=solid];
m15_15 -> m15_19  [key=2, style=dotted];
m15_14 -> m15_15  [color=green, key=0, style=solid];
m15_14 -> m15_27  [color=red, key=2, style=dotted];
m15_14 -> m15_3  [color=green, key=2, style=dotted];
m15_14 -> m15_16  [color=green, key=1, label=method, style=dashed];
m15_14 -> m15_17  [color=green, key=1, label=method, style=dashed];
m15_16 -> m15_4  [color=blue, key=0, style=bold];
m15_16 -> m15_17  [key=0, style=solid];
m15_16 -> m15_19  [key=2, style=dotted];
m15_58 -> m15_24  [color=blue, key=0, style=bold];
m15_0 -> m15_1  [color=red, key=0, style=solid];
m15_1 -> m15_2  [color=red, key=0, style=solid];
m15_1 -> m15_3  [color=red, key=2, style=dotted];
m15_1 -> m15_4  [key=2, style=dotted];
m15_2 -> m15_0  [color=blue, key=0, style=bold];
m15_66 -> m15_19  [key=2, style=dotted];
m15_66 -> m15_67  [key=0, style=solid];
m15_30 -> m15_43  [color=red, key=0, style=solid];
m15_30 -> m15_17  [color=red, key=2, style=dotted];
m15_28 -> m15_29  [color=green, key=0, style=solid];
m15_28 -> m15_31  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m15_28 -> m15_32  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m15_28 -> m15_33  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m15_28 -> m15_36  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m15_28 -> m15_39  [color=red, key=1, label="System.Type", style=dashed];
m15_28 -> m15_20  [color=green, key=2, style=dotted];
m15_29 -> m15_30  [color=red, key=0, style=solid];
m15_29 -> m15_31  [color=red, key=0, style=solid];
m15_29 -> m15_21  [color=blue, key=0, style=bold];
m15_31 -> m15_32  [key=0, style=solid];
m15_31 -> m15_33  [key=0, style=solid];
m15_31 -> m15_18  [key=2, style=dotted];
m15_40 -> m15_41  [color=green, key=0, style=solid];
m15_40 -> m15_25  [key=2, style=dotted];
m15_40 -> m15_26  [key=2, style=dotted];
m15_42 -> m15_43  [color=red, key=0, style=solid];
m15_42 -> m15_32  [key=2, style=dotted];
m15_41 -> m15_42  [color=green, key=0, style=solid];
m15_41 -> m15_27  [key=2, style=dotted];
m15_41 -> m15_30  [color=green, key=2, style=dotted];
m15_43 -> m15_28  [color=blue, key=0, style=bold];
m15_43 -> m15_40  [color=blue, key=0, style=bold];
m15_27 -> m15_28  [color=green, key=0, style=solid];
m15_27 -> m15_19  [color=green, key=2, style=dotted];
m15_57 -> m15_71  [key=0, style=solid];
m15_57 -> m15_58  [key=0, style=solid];
m15_72 -> m15_73  [color=green, key=0, style=solid];
m15_72 -> m15_4  [color=green, key=2, style=dotted];
m15_71 -> m15_72  [color=green, key=0, style=solid];
m15_71 -> m15_73  [color=darkseagreen4, key=1, label=type, style=dashed];
m15_73 -> m15_3  [key=2, style=dotted];
m15_73 -> m15_74  [key=0, style=solid];
m15_74 -> m15_57  [color=blue, key=0, style=bold];
m15_24 -> m15_53  [key=0, style=solid];
m15_24 -> m15_54  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m15_24 -> m15_55  [color=darkseagreen4, key=1, label=object, style=dashed];
m15_24 -> m15_25  [color=green, key=0, style=solid];
m15_24 -> m15_30  [color=green, key=2, style=dotted];
m15_24 -> m15_31  [color=green, key=2, style=dotted];
m15_75 -> m15_76  [color=green, key=0, style=solid];
m15_76 -> m15_77  [color=green, key=0, style=solid];
m15_76 -> m15_30  [color=green, key=2, style=dotted];
m15_77 -> m15_78  [color=green, key=0, style=solid];
m15_77 -> m15_32  [color=green, key=2, style=dotted];
m15_77 -> m15_79  [color=green, key=1, label=method, style=dashed];
m15_77 -> m15_80  [color=green, key=1, label=method, style=dashed];
m15_78 -> m15_19  [key=2, style=dotted];
m15_78 -> m15_79  [key=0, style=solid];
m15_79 -> m15_19  [key=2, style=dotted];
m15_79 -> m15_4  [key=2, style=dotted];
m15_79 -> m15_80  [key=0, style=solid];
m15_80 -> m15_81  [key=0, style=solid];
m15_80 -> m15_82  [key=2, style=dotted];
m15_81 -> m15_75  [color=blue, key=0, style=bold];
m15_83 -> m15_84  [color=green, key=0, style=solid];
m15_84 -> m15_85  [color=green, key=0, style=solid];
m15_84 -> m15_30  [color=green, key=2, style=dotted];
m15_84 -> m15_86  [color=green, key=1, label=serializedData, style=dashed];
m15_85 -> m15_32  [key=2, style=dotted];
m15_85 -> m15_86  [key=0, style=solid];
m15_86 -> m15_87  [key=0, style=solid];
m15_86 -> m15_88  [key=2, style=dotted];
m15_87 -> m15_83  [color=blue, key=0, style=bold];
m15_65 -> m15_19  [key=2, style=dotted];
m15_65 -> m15_66  [key=0, style=solid];
m15_25 -> m15_27  [color=green, key=1, label=method, style=dashed];
m15_25 -> m15_26  [color=green, key=0, style=solid];
m15_25 -> m15_32  [color=green, key=2, style=dotted];
m15_25 -> m15_28  [color=green, key=1, label=method, style=dashed];
m15_67 -> m15_68  [key=0, style=solid];
m15_67 -> m15_60  [key=2, style=dotted];
m15_67 -> m15_1  [color=red, key=1, label="HangFire.Client.JobClient", style=dashed];
m15_67 -> m15_13  [color=red, key=1, label="HangFire.Client.JobClient", style=dashed];
m15_67 -> m15_14  [color=red, key=1, label="HangFire.Client.JobClient", style=dashed];
m15_67 -> m15_36  [color=darkseagreen4, key=1, label="HangFire.Client.JobClient", style=dashed];
m15_67 -> m15_40  [color=darkseagreen4, key=1, label="HangFire.Client.JobClient", style=dashed];
m15_67 -> m15_41  [color=darkseagreen4, key=1, label="HangFire.Client.JobClient", style=dashed];
m15_67 -> m15_50  [color=red, key=1, label="HangFire.Client.JobClient", style=dashed];
m15_68 -> m15_69  [key=0, style=solid];
m15_68 -> m15_60  [key=2, style=dotted];
m15_69 -> m15_61  [color=blue, key=0, style=bold];
m16_5 -> m16_6  [key=0, style=solid];
m16_6 -> m16_7  [key=0, style=solid];
m16_6 -> m16_8  [key=2, style=dotted];
m16_6 -> m16_4  [key=2, style=dotted];
m16_7 -> m16_5  [color=blue, key=0, style=bold];
m16_0 -> m16_1  [key=0, style=solid];
m16_1 -> m16_2  [key=0, style=solid];
m16_1 -> m16_3  [key=2, style=dotted];
m16_1 -> m16_4  [key=2, style=dotted];
m16_2 -> m16_0  [color=blue, key=0, style=bold];
m16_17 -> m16_18  [key=0, style=solid];
m16_17 -> m16_36  [color=darkorchid, key=3, label="Parameter variable Table args", style=bold];
m16_18 -> m16_19  [key=0, style=solid];
m16_18 -> m16_16  [key=2, style=dotted];
m16_19 -> m16_17  [color=blue, key=0, style=bold];
m16_46 -> m16_47  [key=0, style=solid];
m16_46 -> m16_3  [key=2, style=dotted];
m16_46 -> m16_25  [key=2, style=dotted];
m16_45 -> m16_46  [key=0, style=solid];
m16_47 -> m16_45  [color=blue, key=0, style=bold];
m16_12 -> m16_13  [key=0, style=solid];
m16_13 -> m16_14  [key=0, style=solid];
m16_13 -> m16_15  [key=2, style=dotted];
m16_13 -> m16_16  [key=2, style=dotted];
m16_14 -> m16_12  [color=blue, key=0, style=bold];
m16_9 -> m16_10  [key=0, style=solid];
m16_10 -> m16_11  [key=0, style=solid];
m16_10 -> m16_8  [key=2, style=dotted];
m16_10 -> m16_4  [key=2, style=dotted];
m16_11 -> m16_9  [color=blue, key=0, style=bold];
m16_41 -> m16_42  [key=0, style=solid];
m16_42 -> m16_43  [key=0, style=solid];
m16_42 -> m16_3  [key=2, style=dotted];
m16_42 -> m16_26  [key=2, style=dotted];
m16_42 -> m16_44  [key=2, style=dotted];
m16_42 -> m16_29  [key=2, style=dotted];
m16_43 -> m16_41  [color=blue, key=0, style=bold];
m16_33 -> m16_34  [key=0, style=solid];
m16_30 -> m16_31  [key=0, style=solid];
m16_31 -> m16_32  [key=0, style=solid];
m16_32 -> m16_30  [color=blue, key=0, style=bold];
m16_34 -> m16_35  [key=0, style=solid];
m16_35 -> m16_33  [color=blue, key=0, style=bold];
m16_21 -> m16_22  [key=0, style=solid];
m16_21 -> m16_3  [key=2, style=dotted];
m16_21 -> m16_25  [key=2, style=dotted];
m16_16 -> m16_20  [key=0, style=solid];
m16_16 -> m16_21  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_16 -> m16_22  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_16 -> m16_12  [color=darkorchid, key=3, label="Parameter variable string type", style=bold];
m16_16 -> m16_17  [color=darkorchid, key=3, label="Parameter variable Table args", style=bold];
m16_20 -> m16_21  [key=0, style=solid];
m16_20 -> m16_3  [key=2, style=dotted];
m16_20 -> m16_24  [key=2, style=dotted];
m16_22 -> m16_23  [key=0, style=solid];
m16_22 -> m16_3  [key=2, style=dotted];
m16_22 -> m16_26  [key=2, style=dotted];
m16_22 -> m16_27  [key=2, style=dotted];
m16_22 -> m16_28  [key=2, style=dotted];
m16_22 -> m16_29  [key=2, style=dotted];
m16_22 -> m16_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_22 -> m16_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_23 -> m16_16  [color=blue, key=0, style=bold];
m16_36 -> m16_37  [key=0, style=solid];
m16_37 -> m16_38  [key=0, style=solid];
m16_37 -> m16_17  [key=2, style=dotted];
m16_38 -> m16_39  [key=0, style=solid];
m16_38 -> m16_3  [key=2, style=dotted];
m16_38 -> m16_40  [key=2, style=dotted];
m16_39 -> m16_36  [color=blue, key=0, style=bold];
m16_48 -> m16_49  [key=0, style=solid];
m16_48 -> m16_50  [color=red, key=1, label=string, style=dashed];
m16_49 -> m16_50  [color=red, key=0, style=solid];
m16_49 -> m16_3  [key=2, style=dotted];
m16_49 -> m16_52  [key=2, style=dotted];
m16_50 -> m16_51  [color=red, key=0, style=solid];
m16_50 -> m16_53  [color=red, key=2, style=dotted];
m16_51 -> m16_48  [color=blue, key=0, style=bold];
m16_54 -> m16_13  [color=darkseagreen4, key=1, label="HangFire.Tests.JobSteps", style=dashed];
m16_54 -> m16_18  [color=darkseagreen4, key=1, label="HangFire.Tests.JobSteps", style=dashed];
m16_54 -> m16_37  [color=darkseagreen4, key=1, label="HangFire.Tests.JobSteps", style=dashed];
m17_16 -> m17_22  [key=2, style=dotted];
m17_16 -> m17_17  [key=0, style=solid];
m17_16 -> m17_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_12 -> m17_12  [color=green, key=3, label="Field variable int NumberOfRecordsInSinglePass", style=bold];
m17_12 -> m17_13  [color=green, key=0, style=solid];
m17_12 -> m17_22  [color=green, key=2, style=dotted];
m17_12 -> m17_38  [color=green, key=1, label="lambda expression", style=dashed];
m17_5 -> m17_12  [color=green, key=1, label=transaction, style=dashed];
m17_5 -> m17_13  [color=green, key=1, label=transaction, style=dashed];
m17_5 -> m17_6  [key=0, style=solid];
m17_5 -> m17_21  [key=2, style=dotted];
m17_5 -> m17_7  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m17_5 -> m17_9  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m17_5 -> m17_10  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m17_5 -> m17_15  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m17_5 -> m17_16  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m17_5 -> m17_17  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m17_11 -> m17_12  [color=green, key=0, style=solid];
m17_11 -> m17_17  [key=0, style=solid];
m17_13 -> m17_14  [color=green, key=0, style=solid];
m17_13 -> m17_22  [color=green, key=2, style=dotted];
m17_13 -> m17_41  [color=green, key=1, label="lambda expression", style=dashed];
m17_14 -> m17_15  [key=0, style=solid];
m17_14 -> m17_23  [key=2, style=dotted];
m17_14 -> m17_24  [key=2, style=dotted];
m17_14 -> m17_45  [color=darkseagreen4, key=1, label=hourlyFailedKey, style=dashed];
m17_14 -> m17_16  [color=darkseagreen4, key=1, label=hourlyFailedKey, style=dashed];
m17_14 -> m17_48  [color=darkseagreen4, key=1, label=hourlyFailedKey, style=dashed];
m17_8 -> m17_9  [color=green, key=0, style=solid];
m17_8 -> m17_23  [color=green, key=2, style=dotted];
m17_8 -> m17_24  [color=green, key=2, style=dotted];
m17_8 -> m17_31  [color=green, key=1, label=hourlySucceededKey, style=dashed];
m17_8 -> m17_10  [color=green, key=1, label=hourlySucceededKey, style=dashed];
m17_8 -> m17_34  [color=green, key=1, label=hourlySucceededKey, style=dashed];
m17_7 -> m17_8  [color=green, key=0, style=solid];
m17_7 -> m17_22  [key=2, style=dotted];
m17_7 -> m17_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_9 -> m17_22  [key=2, style=dotted];
m17_9 -> m17_10  [key=0, style=solid];
m17_9 -> m17_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_10 -> m17_22  [key=2, style=dotted];
m17_10 -> m17_17  [key=0, style=solid];
m17_10 -> m17_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_0 -> m17_5  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
m17_0 -> m17_11  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m17_0 -> m17_0  [color=darkorchid, key=3, label="method methodReturn HangFire.States.JobState OnStateChanged", style=bold];
m17_0 -> m17_1  [key=0, style=solid];
m17_0 -> m17_3  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m17_0 -> m17_6  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m17_0 -> m17_18  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m17_3 -> m17_5  [key=0, style=solid];
m17_3 -> m17_4  [key=0, style=solid];
m17_6 -> m17_11  [key=0, style=solid];
m17_6 -> m17_7  [key=0, style=solid];
m17_15 -> m17_22  [key=2, style=dotted];
m17_15 -> m17_16  [key=0, style=solid];
m17_15 -> m17_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m17_17 -> m17_18  [key=0, style=solid];
m17_17 -> m17_25  [key=2, style=dotted];
m17_1 -> m17_3  [key=0, style=solid];
m17_1 -> m17_2  [key=0, style=solid];
m17_1 -> m17_0  [color=blue, key=0, style=bold];
m17_18 -> m17_19  [key=0, style=solid];
m17_4 -> m17_19  [key=0, style=solid];
m17_4 -> m17_20  [key=2, style=dotted];
m17_2 -> m17_19  [key=0, style=solid];
m17_2 -> m17_20  [key=2, style=dotted];
m17_19 -> m17_0  [color=blue, key=0, style=bold];
m17_47 -> m17_48  [key=0, style=solid];
m17_38 -> m17_39  [color=green, key=0, style=solid];
m17_41 -> m17_42  [color=green, key=0, style=solid];
m17_31 -> m17_32  [key=0, style=solid];
m17_31 -> m17_29  [key=2, style=dotted];
m17_34 -> m17_35  [key=0, style=solid];
m17_34 -> m17_36  [key=2, style=dotted];
m17_34 -> m17_37  [key=2, style=dotted];
m17_39 -> m17_40  [color=green, key=0, style=solid];
m17_39 -> m17_23  [color=green, key=2, style=dotted];
m17_39 -> m17_24  [color=green, key=2, style=dotted];
m17_39 -> m17_29  [color=green, key=2, style=dotted];
m17_40 -> m17_38  [color=blue, key=0, style=bold];
m17_42 -> m17_43  [color=green, key=0, style=solid];
m17_42 -> m17_23  [color=green, key=2, style=dotted];
m17_42 -> m17_24  [color=green, key=2, style=dotted];
m17_42 -> m17_29  [color=green, key=2, style=dotted];
m17_43 -> m17_41  [color=blue, key=0, style=bold];
m17_45 -> m17_29  [key=2, style=dotted];
m17_45 -> m17_46  [key=0, style=solid];
m17_48 -> m17_49  [key=0, style=solid];
m17_48 -> m17_36  [key=2, style=dotted];
m17_48 -> m17_37  [key=2, style=dotted];
m17_26 -> m17_27  [key=0, style=solid];
m17_30 -> m17_31  [key=0, style=solid];
m17_27 -> m17_23  [key=2, style=dotted];
m17_27 -> m17_24  [key=2, style=dotted];
m17_27 -> m17_29  [key=2, style=dotted];
m17_27 -> m17_28  [key=0, style=solid];
m17_32 -> m17_30  [color=blue, key=0, style=bold];
m17_33 -> m17_34  [key=0, style=solid];
m17_35 -> m17_33  [color=blue, key=0, style=bold];
m17_44 -> m17_45  [key=0, style=solid];
m17_46 -> m17_44  [color=blue, key=0, style=bold];
m17_49 -> m17_47  [color=blue, key=0, style=bold];
m17_28 -> m17_26  [color=blue, key=0, style=bold];
m17_50 -> m17_31  [color=darkseagreen4, key=1, label=hourlySucceededKey, style=dashed];
m17_50 -> m17_34  [color=darkseagreen4, key=1, label=hourlySucceededKey, style=dashed];
m17_51 -> m17_45  [color=darkseagreen4, key=1, label=hourlyFailedKey, style=dashed];
m17_51 -> m17_48  [color=darkseagreen4, key=1, label=hourlyFailedKey, style=dashed];
m18_135 -> m18_136  [key=0, style=solid];
m18_136 -> m18_137  [key=0, style=solid];
m18_136 -> m18_141  [key=2, style=dotted];
m18_137 -> m18_138  [key=0, style=solid];
m18_137 -> m18_142  [key=2, style=dotted];
m18_137 -> m18_139  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m18_138 -> m18_139  [key=0, style=solid];
m18_138 -> m18_143  [key=2, style=dotted];
m18_138 -> m18_91  [key=2, style=dotted];
m18_139 -> m18_140  [key=0, style=solid];
m18_139 -> m18_143  [key=2, style=dotted];
m18_139 -> m18_91  [key=2, style=dotted];
m18_140 -> m18_135  [color=blue, key=0, style=bold];
m18_119 -> m18_120  [key=0, style=solid];
m18_120 -> m18_121  [key=0, style=solid];
m18_120 -> m18_123  [key=2, style=dotted];
m18_120 -> m18_80  [key=2, style=dotted];
m18_121 -> m18_122  [key=0, style=solid];
m18_121 -> m18_124  [key=2, style=dotted];
m18_121 -> m18_91  [key=2, style=dotted];
m18_122 -> m18_119  [color=blue, key=0, style=bold];
m18_144 -> m18_145  [key=0, style=solid];
m18_145 -> m18_146  [key=0, style=solid];
m18_145 -> m18_124  [key=2, style=dotted];
m18_145 -> m18_91  [key=2, style=dotted];
m18_146 -> m18_147  [key=0, style=solid];
m18_146 -> m18_141  [key=2, style=dotted];
m18_147 -> m18_148  [key=0, style=solid];
m18_147 -> m18_142  [key=2, style=dotted];
m18_147 -> m18_149  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m18_148 -> m18_149  [key=0, style=solid];
m18_148 -> m18_18  [key=2, style=dotted];
m18_148 -> m18_91  [key=2, style=dotted];
m18_149 -> m18_150  [key=0, style=solid];
m18_149 -> m18_18  [key=2, style=dotted];
m18_149 -> m18_91  [key=2, style=dotted];
m18_150 -> m18_144  [color=blue, key=0, style=bold];
m18_72 -> m18_35  [key=2, style=dotted];
m18_72 -> m18_73  [key=0, style=solid];
m18_26 -> m18_27  [key=0, style=solid];
m18_26 -> m18_30  [key=2, style=dotted];
m18_26 -> m18_32  [key=2, style=dotted];
m18_26 -> m18_31  [key=2, style=dotted];
m18_26 -> m18_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_27 -> m18_28  [key=0, style=solid];
m18_27 -> m18_29  [key=2, style=dotted];
m18_28 -> m18_26  [color=blue, key=0, style=bold];
m18_28 -> m18_23  [color=blue, key=0, style=bold];
m18_34 -> m18_35  [color=red, key=0, style=solid];
m18_45 -> m18_46  [key=0, style=solid];
m18_151 -> m18_152  [key=0, style=solid];
m18_152 -> m18_153  [key=0, style=solid];
m18_152 -> m18_124  [key=2, style=dotted];
m18_152 -> m18_134  [key=2, style=dotted];
m18_153 -> m18_151  [color=blue, key=0, style=bold];
m18_30 -> m18_31  [key=0, style=solid];
m18_32 -> m18_33  [color=green, key=0, style=solid];
m18_32 -> m18_35  [color=green, key=2, style=dotted];
m18_31 -> m18_32  [color=green, key=0, style=solid];
m18_31 -> m18_34  [key=2, style=dotted];
m18_33 -> m18_30  [color=blue, key=0, style=bold];
m18_33 -> m18_34  [color=red, key=0, style=solid];
m18_103 -> m18_104  [color=red, key=0, style=solid];
m18_104 -> m18_105  [color=red, key=0, style=solid];
m18_104 -> m18_44  [color=red, key=2, style=dotted];
m18_105 -> m18_106  [key=0, style=solid];
m18_105 -> m18_85  [key=2, style=dotted];
m18_105 -> m18_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_106 -> m18_103  [color=blue, key=0, style=bold];
m18_22 -> m18_37  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m18_22 -> m18_23  [key=0, style=solid];
m18_22 -> m18_46  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m18_22 -> m18_58  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m18_22 -> m18_68  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m18_35 -> m18_33  [color=blue, key=0, style=bold];
m18_5 -> m18_6  [color=red, key=0, style=solid];
m18_5 -> m18_8  [color=red, key=2, style=dotted];
m18_77 -> m18_78  [key=0, style=solid];
m18_78 -> m18_79  [key=0, style=solid];
m18_78 -> m18_80  [key=2, style=dotted];
m18_79 -> m18_77  [color=blue, key=0, style=bold];
m18_10 -> m18_11  [key=0, style=solid];
m18_11 -> m18_12  [key=0, style=solid];
m18_11 -> m18_13  [key=2, style=dotted];
m18_12 -> m18_10  [color=blue, key=0, style=bold];
m18_0 -> m18_1  [color=green, key=0, style=solid];
m18_0 -> m18_16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m18_1 -> m18_2  [color=green, key=0, style=solid];
m18_1 -> m18_5  [color=green, key=2, style=dotted];
m18_1 -> m18_3  [key=2, style=dotted];
m18_2 -> m18_3  [color=green, key=0, style=solid];
m18_2 -> m18_6  [color=green, key=2, style=dotted];
m18_2 -> m18_7  [color=green, key=2, style=dotted];
m18_2 -> m18_0  [color=blue, key=0, style=bold];
m18_3 -> m18_4  [key=0, style=solid];
m18_3 -> m18_8  [key=2, style=dotted];
m18_4 -> m18_0  [color=blue, key=0, style=bold];
m18_4 -> m18_5  [color=red, key=0, style=solid];
m18_39 -> m18_30  [key=2, style=dotted];
m18_39 -> m18_40  [key=0, style=solid];
m18_36 -> m18_37  [color=green, key=0, style=solid];
m18_37 -> m18_38  [color=green, key=0, style=solid];
m18_37 -> m18_43  [color=green, key=2, style=dotted];
m18_37 -> m18_39  [key=2, style=dotted];
m18_38 -> m18_22  [key=2, style=dotted];
m18_38 -> m18_39  [key=0, style=solid];
m18_38 -> m18_36  [color=blue, key=0, style=bold];
m18_41 -> m18_42  [key=0, style=solid];
m18_41 -> m18_26  [key=2, style=dotted];
m18_41 -> m18_44  [key=2, style=dotted];
m18_41 -> m18_45  [key=2, style=dotted];
m18_40 -> m18_41  [key=0, style=solid];
m18_40 -> m18_44  [key=2, style=dotted];
m18_40 -> m18_42  [color=darkseagreen4, key=1, label=Table, style=dashed];
m18_42 -> m18_36  [color=blue, key=0, style=bold];
m18_42 -> m18_43  [key=0, style=solid];
m18_42 -> m18_30  [key=2, style=dotted];
m18_42 -> m18_46  [key=2, style=dotted];
m18_42 -> m18_31  [key=2, style=dotted];
m18_42 -> m18_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_42 -> m18_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_42 -> m18_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_56 -> m18_57  [key=0, style=solid];
m18_57 -> m18_58  [key=0, style=solid];
m18_57 -> m18_61  [key=2, style=dotted];
m18_57 -> m18_59  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m18_58 -> m18_59  [key=0, style=solid];
m18_58 -> m18_62  [key=2, style=dotted];
m18_58 -> m18_43  [key=2, style=dotted];
m18_59 -> m18_60  [key=0, style=solid];
m18_59 -> m18_63  [key=2, style=dotted];
m18_59 -> m18_22  [key=2, style=dotted];
m18_60 -> m18_56  [color=blue, key=0, style=bold];
m18_60 -> m18_30  [key=2, style=dotted];
m18_60 -> m18_61  [key=0, style=solid];
m18_185 -> m18_186  [key=0, style=solid];
m18_47 -> m18_48  [key=0, style=solid];
m18_47 -> m18_22  [key=2, style=dotted];
m18_50 -> m18_51  [key=0, style=solid];
m18_50 -> m18_56  [key=2, style=dotted];
m18_53 -> m18_54  [key=0, style=solid];
m18_53 -> m18_26  [key=2, style=dotted];
m18_48 -> m18_49  [key=0, style=solid];
m18_48 -> m18_39  [key=2, style=dotted];
m18_48 -> m18_30  [key=2, style=dotted];
m18_49 -> m18_47  [color=blue, key=0, style=bold];
m18_49 -> m18_50  [key=0, style=solid];
m18_49 -> m18_55  [key=2, style=dotted];
m18_49 -> m18_51  [color=darkseagreen4, key=1, label=table1, style=dashed];
m18_49 -> m18_52  [color=darkseagreen4, key=1, label=table1, style=dashed];
m18_51 -> m18_52  [key=0, style=solid];
m18_51 -> m18_56  [key=2, style=dotted];
m18_52 -> m18_50  [color=blue, key=0, style=bold];
m18_52 -> m18_53  [key=0, style=solid];
m18_52 -> m18_44  [key=2, style=dotted];
m18_54 -> m18_55  [key=0, style=solid];
m18_54 -> m18_45  [color=blue, key=0, style=bold];
m18_55 -> m18_53  [color=blue, key=0, style=bold];
m18_86 -> m18_87  [key=0, style=solid];
m18_86 -> m18_88  [color=darkseagreen4, key=1, label="?", style=dashed];
m18_87 -> m18_88  [key=0, style=solid];
m18_87 -> m18_90  [key=2, style=dotted];
m18_88 -> m18_89  [key=0, style=solid];
m18_88 -> m18_91  [key=2, style=dotted];
m18_89 -> m18_86  [color=blue, key=0, style=bold];
m18_107 -> m18_108  [key=0, style=solid];
m18_107 -> m18_109  [color=darkseagreen4, key=1, label="?", style=dashed];
m18_108 -> m18_109  [key=0, style=solid];
m18_108 -> m18_90  [key=2, style=dotted];
m18_109 -> m18_110  [key=0, style=solid];
m18_109 -> m18_91  [key=2, style=dotted];
m18_110 -> m18_107  [color=blue, key=0, style=bold];
m18_182 -> m18_183  [key=0, style=solid];
m18_183 -> m18_184  [key=0, style=solid];
m18_183 -> m18_177  [key=2, style=dotted];
m18_183 -> m18_62  [key=2, style=dotted];
m18_183 -> m18_185  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_184 -> m18_182  [color=blue, key=0, style=bold];
m18_186 -> m18_187  [key=0, style=solid];
m18_187 -> m18_185  [color=blue, key=0, style=bold];
m18_17 -> m18_14  [color=blue, key=0, style=bold];
m18_63 -> m18_35  [key=2, style=dotted];
m18_63 -> m18_64  [key=0, style=solid];
m18_6 -> m18_7  [color=red, key=0, style=solid];
m18_6 -> m18_9  [color=red, key=2, style=dotted];
m18_23 -> m18_24  [key=0, style=solid];
m18_23 -> m18_25  [key=2, style=dotted];
m18_24 -> m18_22  [color=blue, key=0, style=bold];
m18_24 -> m18_25  [color=red, key=0, style=solid];
m18_24 -> m18_29  [key=2, style=dotted];
m18_131 -> m18_132  [key=0, style=solid];
m18_132 -> m18_133  [key=0, style=solid];
m18_132 -> m18_124  [key=2, style=dotted];
m18_132 -> m18_134  [key=2, style=dotted];
m18_133 -> m18_131  [color=blue, key=0, style=bold];
m18_61 -> m18_62  [key=0, style=solid];
m18_61 -> m18_66  [key=2, style=dotted];
m18_62 -> m18_63  [key=0, style=solid];
m18_62 -> m18_44  [key=2, style=dotted];
m18_43 -> m18_40  [color=blue, key=0, style=bold];
m18_67 -> m18_68  [key=0, style=solid];
m18_67 -> m18_69  [key=0, style=solid];
m18_69 -> m18_22  [key=2, style=dotted];
m18_69 -> m18_70  [key=0, style=solid];
m18_69 -> m18_63  [key=2, style=dotted];
m18_68 -> m18_43  [key=2, style=dotted];
m18_68 -> m18_69  [key=0, style=solid];
m18_68 -> m18_72  [key=2, style=dotted];
m18_70 -> m18_30  [key=2, style=dotted];
m18_70 -> m18_71  [key=0, style=solid];
m18_70 -> m18_64  [color=blue, key=0, style=bold];
m18_71 -> m18_72  [key=0, style=solid];
m18_71 -> m18_66  [key=2, style=dotted];
m18_73 -> m18_74  [color=red, key=0, style=solid];
m18_73 -> m18_44  [key=2, style=dotted];
m18_74 -> m18_75  [color=red, key=0, style=solid];
m18_74 -> m18_26  [key=2, style=dotted];
m18_74 -> m18_76  [color=red, key=2, style=dotted];
m18_75 -> m18_67  [color=blue, key=0, style=bold];
m18_75 -> m18_73  [color=blue, key=0, style=bold];
m18_158 -> m18_159  [key=0, style=solid];
m18_158 -> m18_160  [color=darkseagreen4, key=1, label=string, style=dashed];
m18_159 -> m18_160  [key=0, style=solid];
m18_159 -> m18_44  [key=2, style=dotted];
m18_159 -> m18_162  [key=2, style=dotted];
m18_160 -> m18_161  [key=0, style=solid];
m18_160 -> m18_80  [key=2, style=dotted];
m18_161 -> m18_158  [color=blue, key=0, style=bold];
m18_92 -> m18_93  [key=0, style=solid];
m18_93 -> m18_94  [key=0, style=solid];
m18_93 -> m18_95  [key=2, style=dotted];
m18_93 -> m18_96  [key=2, style=dotted];
m18_93 -> m18_80  [key=2, style=dotted];
m18_94 -> m18_92  [color=blue, key=0, style=bold];
m18_14 -> m18_15  [key=0, style=solid];
m18_16 -> m18_0  [key=2, style=dotted];
m18_16 -> m18_17  [key=0, style=solid];
m18_16 -> m18_14  [color=blue, key=0, style=bold];
m18_15 -> m18_16  [key=0, style=solid];
m18_15 -> m18_17  [key=0, style=solid];
m18_15 -> m18_18  [key=2, style=dotted];
m18_25 -> m18_26  [color=red, key=0, style=solid];
m18_25 -> m18_30  [color=red, key=2, style=dotted];
m18_25 -> m18_31  [color=red, key=2, style=dotted];
m18_25 -> m18_33  [color=red, key=1, label="lambda expression", style=dashed];
m18_64 -> m18_65  [color=red, key=0, style=solid];
m18_64 -> m18_26  [key=2, style=dotted];
m18_65 -> m18_57  [color=blue, key=0, style=bold];
m18_65 -> m18_66  [color=red, key=0, style=solid];
m18_65 -> m18_61  [color=red, key=2, style=dotted];
m18_65 -> m18_68  [color=red, key=1, label=transaction, style=dashed];
m18_65 -> m18_69  [color=red, key=1, label=transaction, style=dashed];
m18_76 -> m18_38  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_76 -> m18_47  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_76 -> m18_59  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_76 -> m18_69  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_76 -> m18_39  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_76 -> m18_41  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_76 -> m18_48  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_76 -> m18_53  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_76 -> m18_60  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_76 -> m18_64  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_76 -> m18_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_76 -> m18_74  [color=darkseagreen4, key=1, label="HangFire.Tests.States.ProcessingStateFeature", style=dashed];
m18_154 -> m18_155  [key=0, style=solid];
m18_155 -> m18_156  [key=0, style=solid];
m18_155 -> m18_157  [key=2, style=dotted];
m18_155 -> m18_91  [key=2, style=dotted];
m18_156 -> m18_154  [color=blue, key=0, style=bold];
m18_128 -> m18_129  [key=0, style=solid];
m18_129 -> m18_130  [key=0, style=solid];
m18_129 -> m18_124  [key=2, style=dotted];
m18_129 -> m18_91  [key=2, style=dotted];
m18_130 -> m18_128  [color=blue, key=0, style=bold];
m18_46 -> m18_43  [key=2, style=dotted];
m18_46 -> m18_47  [key=0, style=solid];
m18_97 -> m18_98  [key=0, style=solid];
m18_98 -> m18_99  [key=0, style=solid];
m18_98 -> m18_101  [key=2, style=dotted];
m18_98 -> m18_80  [key=2, style=dotted];
m18_99 -> m18_100  [key=0, style=solid];
m18_99 -> m18_102  [key=2, style=dotted];
m18_99 -> m18_80  [key=2, style=dotted];
m18_100 -> m18_97  [color=blue, key=0, style=bold];
m18_125 -> m18_126  [key=0, style=solid];
m18_126 -> m18_127  [key=0, style=solid];
m18_126 -> m18_123  [key=2, style=dotted];
m18_126 -> m18_80  [key=2, style=dotted];
m18_127 -> m18_125  [color=blue, key=0, style=bold];
m18_166 -> m18_163  [color=blue, key=0, style=bold];
m18_163 -> m18_164  [key=0, style=solid];
m18_163 -> m18_165  [color=darkseagreen4, key=1, label=Table, style=dashed];
m18_164 -> m18_165  [key=0, style=solid];
m18_164 -> m18_44  [key=2, style=dotted];
m18_164 -> m18_162  [key=2, style=dotted];
m18_165 -> m18_166  [key=0, style=solid];
m18_165 -> m18_167  [key=2, style=dotted];
m18_81 -> m18_82  [key=0, style=solid];
m18_82 -> m18_83  [key=0, style=solid];
m18_82 -> m18_44  [key=2, style=dotted];
m18_83 -> m18_84  [key=0, style=solid];
m18_83 -> m18_85  [key=2, style=dotted];
m18_83 -> m18_86  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_84 -> m18_81  [color=blue, key=0, style=bold];
m18_178 -> m18_179  [key=0, style=solid];
m18_179 -> m18_180  [key=0, style=solid];
m18_179 -> m18_181  [key=2, style=dotted];
m18_179 -> m18_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_180 -> m18_178  [color=blue, key=0, style=bold];
m18_7 -> m18_4  [color=blue, key=0, style=bold];
m18_174 -> m18_168  [color=blue, key=0, style=bold];
m18_168 -> m18_169  [key=0, style=solid];
m18_168 -> m18_173  [color=darkseagreen4, key=1, label=Table, style=dashed];
m18_169 -> m18_170  [key=0, style=solid];
m18_169 -> m18_44  [key=2, style=dotted];
m18_169 -> m18_175  [key=2, style=dotted];
m18_169 -> m18_171  [color=darkseagreen4, key=1, label=entry, style=dashed];
m18_169 -> m18_172  [color=darkseagreen4, key=1, label=entry, style=dashed];
m18_173 -> m18_174  [key=0, style=solid];
m18_173 -> m18_118  [key=2, style=dotted];
m18_170 -> m18_171  [key=0, style=solid];
m18_170 -> m18_176  [key=2, style=dotted];
m18_171 -> m18_172  [key=0, style=solid];
m18_171 -> m18_177  [key=2, style=dotted];
m18_171 -> m18_173  [color=darkseagreen4, key=1, label=history, style=dashed];
m18_172 -> m18_173  [key=0, style=solid];
m18_172 -> m18_176  [key=2, style=dotted];
m18_19 -> m18_20  [color=red, key=0, style=solid];
m18_20 -> m18_21  [color=red, key=0, style=solid];
m18_20 -> m18_22  [color=red, key=2, style=dotted];
m18_21 -> m18_19  [color=blue, key=0, style=bold];
m18_66 -> m18_67  [color=red, key=0, style=solid];
m18_66 -> m18_71  [color=red, key=2, style=dotted];
m18_66 -> m18_68  [color=red, key=1, label=descriptor, style=dashed];
m18_111 -> m18_112  [key=0, style=solid];
m18_112 -> m18_113  [key=0, style=solid];
m18_112 -> m18_101  [key=2, style=dotted];
m18_112 -> m18_80  [key=2, style=dotted];
m18_113 -> m18_111  [color=blue, key=0, style=bold];
m18_114 -> m18_115  [key=0, style=solid];
m18_115 -> m18_116  [key=0, style=solid];
m18_115 -> m18_117  [key=2, style=dotted];
m18_115 -> m18_118  [key=2, style=dotted];
m18_116 -> m18_114  [color=blue, key=0, style=bold];
m18_188 -> m18_1  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_5  [color=red, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_6  [color=red, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_11  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_15  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_20  [color=red, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_24  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_25  [color=red, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_26  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_27  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_42  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_58  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_66  [color=red, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_74  [color=red, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_78  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_115  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m18_188 -> m18_179  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m19_23 -> m19_24  [key=0, style=solid];
m19_23 -> m19_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_24 -> m19_25  [key=0, style=solid];
m19_24 -> m19_5  [key=2, style=dotted];
m19_24 -> m19_6  [key=2, style=dotted];
m19_25 -> m19_26  [key=0, style=solid];
m19_25 -> m19_5  [key=2, style=dotted];
m19_25 -> m19_11  [key=2, style=dotted];
m19_26 -> m19_23  [color=blue, key=0, style=bold];
m19_7 -> m19_8  [key=0, style=solid];
m19_8 -> m19_9  [key=0, style=solid];
m19_8 -> m19_5  [key=2, style=dotted];
m19_8 -> m19_6  [key=2, style=dotted];
m19_9 -> m19_10  [key=0, style=solid];
m19_9 -> m19_5  [key=2, style=dotted];
m19_9 -> m19_11  [key=2, style=dotted];
m19_10 -> m19_7  [color=blue, key=0, style=bold];
m19_2 -> m19_3  [key=0, style=solid];
m19_3 -> m19_4  [key=0, style=solid];
m19_3 -> m19_5  [key=2, style=dotted];
m19_3 -> m19_6  [key=2, style=dotted];
m19_4 -> m19_2  [color=blue, key=0, style=bold];
m19_40 -> m19_41  [key=0, style=solid];
m19_41 -> m19_42  [color=green, key=0, style=solid];
m19_41 -> m19_5  [key=2, style=dotted];
m19_41 -> m19_35  [key=2, style=dotted];
m19_42 -> m19_43  [color=green, key=0, style=solid];
m19_42 -> m19_44  [color=green, key=2, style=dotted];
m19_43 -> m19_40  [color=blue, key=0, style=bold];
m19_15 -> m19_16  [key=0, style=solid];
m19_15 -> m19_17  [color=darkseagreen4, key=1, label=string, style=dashed];
m19_16 -> m19_17  [key=0, style=solid];
m19_16 -> m19_6  [key=2, style=dotted];
m19_17 -> m19_18  [key=0, style=solid];
m19_17 -> m19_5  [key=2, style=dotted];
m19_17 -> m19_11  [key=2, style=dotted];
m19_18 -> m19_15  [color=blue, key=0, style=bold];
m19_37 -> m19_38  [key=0, style=solid];
m19_38 -> m19_39  [key=0, style=solid];
m19_38 -> m19_5  [key=2, style=dotted];
m19_38 -> m19_30  [key=2, style=dotted];
m19_39 -> m19_37  [color=blue, key=0, style=bold];
m19_12 -> m19_13  [key=0, style=solid];
m19_13 -> m19_14  [key=0, style=solid];
m19_13 -> m19_5  [key=2, style=dotted];
m19_13 -> m19_11  [key=2, style=dotted];
m19_14 -> m19_12  [color=blue, key=0, style=bold];
m19_31 -> m19_32  [key=0, style=solid];
m19_32 -> m19_33  [color=green, key=0, style=solid];
m19_32 -> m19_5  [key=2, style=dotted];
m19_32 -> m19_35  [key=2, style=dotted];
m19_33 -> m19_34  [color=green, key=0, style=solid];
m19_33 -> m19_36  [color=green, key=2, style=dotted];
m19_34 -> m19_31  [color=blue, key=0, style=bold];
m19_19 -> m19_20  [key=0, style=solid];
m19_20 -> m19_21  [key=0, style=solid];
m19_20 -> m19_22  [key=2, style=dotted];
m19_20 -> m19_6  [key=2, style=dotted];
m19_21 -> m19_19  [color=blue, key=0, style=bold];
m19_51 -> m19_52  [key=0, style=solid];
m19_51 -> m19_53  [color=red, key=1, label=int, style=dashed];
m19_52 -> m19_53  [color=red, key=0, style=solid];
m19_52 -> m19_5  [key=2, style=dotted];
m19_52 -> m19_49  [key=2, style=dotted];
m19_53 -> m19_54  [color=red, key=0, style=solid];
m19_53 -> m19_50  [color=red, key=2, style=dotted];
m19_54 -> m19_51  [color=blue, key=0, style=bold];
m19_27 -> m19_28  [key=0, style=solid];
m19_28 -> m19_29  [key=0, style=solid];
m19_28 -> m19_5  [key=2, style=dotted];
m19_28 -> m19_30  [key=2, style=dotted];
m19_29 -> m19_27  [color=blue, key=0, style=bold];
m19_45 -> m19_46  [key=0, style=solid];
m19_46 -> m19_47  [color=green, key=0, style=solid];
m19_46 -> m19_5  [key=2, style=dotted];
m19_46 -> m19_49  [key=2, style=dotted];
m19_47 -> m19_48  [color=green, key=0, style=solid];
m19_47 -> m19_50  [color=green, key=2, style=dotted];
m19_48 -> m19_45  [color=blue, key=0, style=bold];
m19_0 -> m19_1  [key=0, style=solid];
m19_1 -> m19_0  [color=blue, key=0, style=bold];
m20_0 -> m20_1  [color=green, key=0, style=solid];
m20_1 -> m20_2  [color=green, key=0, style=solid];
m20_1 -> m20_76  [key=2, style=dotted];
m20_2 -> m20_3  [key=0, style=solid];
m20_2 -> m20_77  [key=2, style=dotted];
m20_2 -> m20_0  [color=blue, key=0, style=bold];
m20_3 -> m20_4  [color=green, key=0, style=solid];
m20_4 -> m20_5  [color=green, key=0, style=solid];
m20_4 -> m20_78  [key=2, style=dotted];
m20_4 -> m20_9  [color=red, key=1, label=from, style=dashed];
m20_5 -> m20_6  [key=0, style=solid];
m20_5 -> m20_78  [key=2, style=dotted];
m20_5 -> m20_9  [color=darkseagreen4, key=1, label=jobIds, style=dashed];
m20_5 -> m20_13  [key=2, style=dotted];
m20_9 -> m20_10  [color=red, key=0, style=solid];
m20_9 -> m20_80  [color=red, key=2, style=dotted];
m20_9 -> m20_81  [color=red, key=2, style=dotted];
m20_9 -> m20_82  [color=red, key=2, style=dotted];
m20_9 -> m20_12  [color=red, key=1, label=pager, style=dashed];
m20_9 -> m20_19  [color=red, key=1, label=pager, style=dashed];
m20_9 -> m20_74  [color=red, key=1, label=pager, style=dashed];
m20_9 -> m20_11  [key=0, style=solid];
m20_6 -> m20_7  [key=0, style=solid];
m20_6 -> m20_9  [key=0, style=solid];
m20_7 -> m20_8  [key=0, style=solid];
m20_8 -> m20_9  [color=red, key=0, style=solid];
m20_8 -> m20_79  [key=2, style=dotted];
m20_8 -> m20_10  [color=darkseagreen4, key=1, label=monitor, style=dashed];
m20_8 -> m20_12  [key=0, style=solid];
m20_10 -> m20_11  [key=0, style=solid];
m20_10 -> m20_83  [key=2, style=dotted];
m20_10 -> m20_22  [color=darkseagreen4, key=1, label=failedJobs, style=dashed];
m20_10 -> m20_9  [key=0, style=solid];
m20_10 -> m20_14  [key=2, style=dotted];
m20_12 -> m20_13  [color=red, key=0, style=solid];
m20_12 -> m20_14  [color=red, key=0, style=solid];
m20_12 -> m20_3  [color=blue, key=0, style=bold];
m20_19 -> m20_20  [key=0, style=solid];
m20_19 -> m20_85  [key=2, style=dotted];
m20_19 -> m20_86  [key=2, style=dotted];
m20_19 -> m20_87  [key=2, style=dotted];
m20_74 -> m20_75  [key=0, style=solid];
m20_74 -> m20_93  [key=2, style=dotted];
m20_74 -> m20_86  [key=2, style=dotted];
m20_74 -> m20_87  [key=2, style=dotted];
m20_11 -> m20_12  [color=red, key=0, style=solid];
m20_11 -> m20_76  [key=2, style=dotted];
m20_22 -> m20_23  [key=0, style=solid];
m20_22 -> m20_73  [key=0, style=solid];
m20_22 -> m20_24  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_13 -> m20_75  [key=0, style=solid];
m20_13 -> m20_76  [key=2, style=dotted];
m20_14 -> m20_15  [key=0, style=solid];
m20_14 -> m20_76  [key=2, style=dotted];
m20_15 -> m20_16  [key=0, style=solid];
m20_15 -> m20_82  [key=2, style=dotted];
m20_15 -> m20_84  [key=2, style=dotted];
m20_15 -> m20_1  [color=green, key=1, label="HangFire.Web.BatchCommandHandler", style=dashed];
m20_15 -> m20_7  [color=darkseagreen4, key=1, label="HangFire.Web.BatchCommandHandler", style=dashed];
m20_15 -> m20_10  [color=darkseagreen4, key=1, label="HangFire.Web.BatchCommandHandler", style=dashed];
m20_15 -> m20_11  [color=darkseagreen4, key=1, label="HangFire.Web.BatchCommandHandler", style=dashed];
m20_16 -> m20_17  [key=0, style=solid];
m20_16 -> m20_76  [key=2, style=dotted];
m20_17 -> m20_18  [color=red, key=0, style=solid];
m20_17 -> m20_82  [key=2, style=dotted];
m20_17 -> m20_84  [key=2, style=dotted];
m20_18 -> m20_19  [color=red, key=0, style=solid];
m20_18 -> m20_76  [color=red, key=2, style=dotted];
m20_20 -> m20_21  [key=0, style=solid];
m20_20 -> m20_76  [key=2, style=dotted];
m20_21 -> m20_22  [key=0, style=solid];
m20_21 -> m20_62  [color=darkseagreen4, key=1, label=index, style=dashed];
m20_62 -> m20_63  [key=0, style=solid];
m20_62 -> m20_84  [key=2, style=dotted];
m20_62 -> m20_62  [color=darkseagreen4, key=1, label=index, style=dashed];
m20_23 -> m20_24  [key=0, style=solid];
m20_23 -> m20_76  [key=2, style=dotted];
m20_73 -> m20_74  [key=0, style=solid];
m20_73 -> m20_76  [key=2, style=dotted];
m20_24 -> m20_25  [key=0, style=solid];
m20_24 -> m20_84  [key=2, style=dotted];
m20_24 -> m20_24  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_24 -> m20_26  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_25 -> m20_26  [key=0, style=solid];
m20_25 -> m20_76  [key=2, style=dotted];
m20_26 -> m20_27  [key=0, style=solid];
m20_26 -> m20_84  [key=2, style=dotted];
m20_26 -> m20_26  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_26 -> m20_28  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_27 -> m20_28  [key=0, style=solid];
m20_27 -> m20_76  [key=2, style=dotted];
m20_28 -> m20_29  [key=0, style=solid];
m20_28 -> m20_84  [key=2, style=dotted];
m20_28 -> m20_28  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_28 -> m20_30  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_29 -> m20_30  [key=0, style=solid];
m20_29 -> m20_76  [key=2, style=dotted];
m20_30 -> m20_31  [key=0, style=solid];
m20_30 -> m20_34  [key=0, style=solid];
m20_30 -> m20_30  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_30 -> m20_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_30 -> m20_35  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_31 -> m20_32  [key=0, style=solid];
m20_31 -> m20_76  [key=2, style=dotted];
m20_34 -> m20_35  [key=0, style=solid];
m20_34 -> m20_76  [key=2, style=dotted];
m20_32 -> m20_33  [key=0, style=solid];
m20_32 -> m20_84  [key=2, style=dotted];
m20_32 -> m20_32  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_32 -> m20_35  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_35 -> m20_36  [key=0, style=solid];
m20_35 -> m20_84  [key=2, style=dotted];
m20_35 -> m20_35  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_35 -> m20_37  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_33 -> m20_34  [key=0, style=solid];
m20_33 -> m20_76  [key=2, style=dotted];
m20_36 -> m20_37  [key=0, style=solid];
m20_36 -> m20_76  [key=2, style=dotted];
m20_37 -> m20_38  [key=0, style=solid];
m20_37 -> m20_82  [key=2, style=dotted];
m20_37 -> m20_84  [key=2, style=dotted];
m20_37 -> m20_37  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_37 -> m20_39  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_38 -> m20_39  [key=0, style=solid];
m20_38 -> m20_76  [key=2, style=dotted];
m20_39 -> m20_40  [key=0, style=solid];
m20_39 -> m20_88  [key=2, style=dotted];
m20_39 -> m20_87  [key=2, style=dotted];
m20_39 -> m20_39  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_39 -> m20_41  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_40 -> m20_41  [key=0, style=solid];
m20_40 -> m20_76  [key=2, style=dotted];
m20_41 -> m20_42  [key=0, style=solid];
m20_41 -> m20_43  [key=0, style=solid];
m20_41 -> m20_41  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_41 -> m20_44  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_42 -> m20_43  [key=0, style=solid];
m20_42 -> m20_76  [key=2, style=dotted];
m20_43 -> m20_44  [key=0, style=solid];
m20_43 -> m20_76  [key=2, style=dotted];
m20_44 -> m20_45  [key=0, style=solid];
m20_44 -> m20_50  [key=0, style=solid];
m20_44 -> m20_44  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_44 -> m20_46  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_44 -> m20_51  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_45 -> m20_46  [key=0, style=solid];
m20_45 -> m20_76  [key=2, style=dotted];
m20_50 -> m20_51  [key=0, style=solid];
m20_50 -> m20_76  [key=2, style=dotted];
m20_46 -> m20_47  [key=0, style=solid];
m20_46 -> m20_89  [key=2, style=dotted];
m20_46 -> m20_84  [key=2, style=dotted];
m20_46 -> m20_46  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_46 -> m20_48  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_51 -> m20_52  [key=0, style=solid];
m20_51 -> m20_82  [key=2, style=dotted];
m20_51 -> m20_84  [key=2, style=dotted];
m20_51 -> m20_51  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_51 -> m20_53  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_47 -> m20_48  [key=0, style=solid];
m20_47 -> m20_76  [key=2, style=dotted];
m20_48 -> m20_49  [key=0, style=solid];
m20_48 -> m20_84  [key=2, style=dotted];
m20_48 -> m20_48  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_48 -> m20_51  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_49 -> m20_50  [key=0, style=solid];
m20_49 -> m20_76  [key=2, style=dotted];
m20_52 -> m20_53  [key=0, style=solid];
m20_52 -> m20_76  [key=2, style=dotted];
m20_53 -> m20_54  [key=0, style=solid];
m20_53 -> m20_90  [key=2, style=dotted];
m20_53 -> m20_87  [key=2, style=dotted];
m20_53 -> m20_53  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_53 -> m20_55  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_54 -> m20_55  [key=0, style=solid];
m20_54 -> m20_76  [key=2, style=dotted];
m20_55 -> m20_56  [key=0, style=solid];
m20_55 -> m20_59  [key=0, style=solid];
m20_55 -> m20_91  [key=2, style=dotted];
m20_55 -> m20_55  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_55 -> m20_57  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_55 -> m20_60  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_56 -> m20_57  [key=0, style=solid];
m20_56 -> m20_76  [key=2, style=dotted];
m20_59 -> m20_60  [key=0, style=solid];
m20_59 -> m20_76  [key=2, style=dotted];
m20_57 -> m20_58  [key=0, style=solid];
m20_57 -> m20_84  [key=2, style=dotted];
m20_57 -> m20_57  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_57 -> m20_60  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_60 -> m20_61  [key=0, style=solid];
m20_60 -> m20_22  [key=0, style=solid];
m20_60 -> m20_60  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_60 -> m20_64  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_58 -> m20_59  [key=0, style=solid];
m20_58 -> m20_76  [key=2, style=dotted];
m20_61 -> m20_62  [key=0, style=solid];
m20_61 -> m20_76  [key=2, style=dotted];
m20_64 -> m20_65  [key=0, style=solid];
m20_64 -> m20_84  [key=2, style=dotted];
m20_64 -> m20_64  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_64 -> m20_66  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_63 -> m20_64  [key=0, style=solid];
m20_63 -> m20_76  [key=2, style=dotted];
m20_65 -> m20_66  [key=0, style=solid];
m20_65 -> m20_76  [key=2, style=dotted];
m20_66 -> m20_67  [key=0, style=solid];
m20_66 -> m20_84  [key=2, style=dotted];
m20_66 -> m20_66  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_66 -> m20_68  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_67 -> m20_68  [key=0, style=solid];
m20_67 -> m20_76  [key=2, style=dotted];
m20_68 -> m20_69  [key=0, style=solid];
m20_68 -> m20_72  [key=0, style=solid];
m20_68 -> m20_91  [key=2, style=dotted];
m20_68 -> m20_68  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_68 -> m20_70  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_69 -> m20_70  [key=0, style=solid];
m20_69 -> m20_76  [key=2, style=dotted];
m20_72 -> m20_22  [key=0, style=solid];
m20_72 -> m20_76  [key=2, style=dotted];
m20_70 -> m20_71  [key=0, style=solid];
m20_70 -> m20_92  [key=2, style=dotted];
m20_70 -> m20_87  [key=2, style=dotted];
m20_70 -> m20_70  [color=darkseagreen4, key=1, label=job, style=dashed];
m20_71 -> m20_72  [key=0, style=solid];
m20_71 -> m20_76  [key=2, style=dotted];
m20_75 -> m20_0  [color=blue, key=0, style=bold];
m20_94 -> m20_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_2  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_5  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_9  [color=red, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_11  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_14  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_15  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_16  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_17  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_18  [color=red, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_19  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_25  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_26  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_28  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_33  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_34  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_36  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_37  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_38  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_40  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_42  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_43  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_45  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_46  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_47  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_48  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_49  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_50  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_51  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_52  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_53  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_54  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_56  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_57  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_58  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_59  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_61  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_62  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_63  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_64  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_65  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_66  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_67  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_69  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_70  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_71  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_72  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_73  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m20_94 -> m20_74  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.FailedJobsPage", style=dashed];
m21_53 -> m21_45  [key=2, style=dotted];
m21_53 -> m21_54  [key=0, style=solid];
m21_29 -> m21_30  [key=0, style=solid];
m21_29 -> m21_31  [key=0, style=solid];
m21_25 -> m21_26  [color=red, key=0, style=solid];
m21_48 -> m21_61  [color=red, key=0, style=solid];
m21_48 -> m21_66  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m21_48 -> m21_28  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.ICollection<HangFire.Web.Pager.Item> results", style=bold];
m21_48 -> m21_41  [key=2, style=dotted];
m21_48 -> m21_49  [key=0, style=solid];
m21_61 -> m21_62  [color=red, key=0, style=solid];
m21_61 -> m21_67  [color=red, key=0, style=solid];
m21_61 -> m21_42  [key=2, style=dotted];
m21_66 -> m21_67  [key=0, style=solid];
m21_66 -> m21_53  [key=2, style=dotted];
m21_66 -> m21_26  [key=2, style=dotted];
m21_62 -> m21_63  [key=0, style=solid];
m21_62 -> m21_65  [color=darkseagreen4, key=1, label=index, style=dashed];
m21_62 -> m21_45  [key=2, style=dotted];
m21_63 -> m21_64  [key=0, style=solid];
m21_63 -> m21_65  [key=0, style=solid];
m21_63 -> m21_43  [key=2, style=dotted];
m21_65 -> m21_66  [key=0, style=solid];
m21_65 -> m21_44  [key=2, style=dotted];
m21_65 -> m21_45  [key=2, style=dotted];
m21_64 -> m21_65  [key=0, style=solid];
m21_64 -> m21_44  [key=2, style=dotted];
m21_67 -> m21_48  [color=blue, key=0, style=bold];
m21_67 -> m21_58  [color=blue, key=0, style=bold];
m21_10 -> m21_11  [color=red, key=0, style=solid];
m21_10 -> m21_13  [color=darkseagreen4, key=1, label=int, style=dashed];
m21_11 -> m21_12  [color=red, key=0, style=solid];
m21_11 -> m21_13  [color=red, key=0, style=solid];
m21_13 -> m21_14  [key=0, style=solid];
m21_12 -> m21_14  [color=red, key=0, style=solid];
m21_14 -> m21_10  [color=blue, key=0, style=bold];
m21_14 -> m21_15  [key=0, style=solid];
m21_0 -> m21_1  [color=green, key=0, style=solid];
m21_0 -> m21_16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m21_0 -> m21_2  [color=darkseagreen4, key=1, label=int, style=dashed];
m21_0 -> m21_3  [color=darkseagreen4, key=1, label=long, style=dashed];
m21_1 -> m21_2  [color=green, key=0, style=solid];
m21_1 -> m21_5  [color=green, key=2, style=dotted];
m21_2 -> m21_3  [color=green, key=0, style=solid];
m21_2 -> m21_6  [color=green, key=2, style=dotted];
m21_2 -> m21_7  [color=green, key=2, style=dotted];
m21_3 -> m21_4  [key=0, style=solid];
m21_3 -> m21_8  [key=2, style=dotted];
m21_4 -> m21_0  [color=blue, key=0, style=bold];
m21_4 -> m21_5  [key=0, style=solid];
m21_5 -> m21_6  [key=0, style=solid];
m21_5 -> m21_8  [key=2, style=dotted];
m21_6 -> m21_7  [key=0, style=solid];
m21_6 -> m21_9  [key=2, style=dotted];
m21_7 -> m21_0  [color=blue, key=0, style=bold];
m21_46 -> m21_54  [key=0, style=solid];
m21_46 -> m21_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m21_46 -> m21_28  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.ICollection<HangFire.Web.Pager.Item> results", style=bold];
m21_16 -> m21_0  [key=2, style=dotted];
m21_16 -> m21_17  [key=0, style=solid];
m21_16 -> m21_18  [key=0, style=solid];
m21_15 -> m21_16  [key=0, style=solid];
m21_15 -> m21_17  [key=0, style=solid];
m21_15 -> m21_18  [color=darkseagreen4, key=1, label=int, style=dashed];
m21_15 -> m21_11  [color=red, key=3, label="method methodReturn string RecordsPerPageUrl", style=bold];
m21_17 -> m21_14  [color=blue, key=0, style=bold];
m21_17 -> m21_19  [key=0, style=solid];
m21_26 -> m21_27  [color=red, key=0, style=solid];
m21_26 -> m21_28  [color=red, key=0, style=solid];
m21_27 -> m21_28  [color=green, key=0, style=solid];
m21_27 -> m21_29  [color=green, key=2, style=dotted];
m21_28 -> m21_26  [color=blue, key=0, style=bold];
m21_28 -> m21_29  [key=0, style=solid];
m21_28 -> m21_42  [key=2, style=dotted];
m21_28 -> m21_30  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m21_28 -> m21_31  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m21_28 -> m21_33  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m21_28 -> m21_34  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m21_28 -> m21_35  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m21_28 -> m21_36  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m21_28 -> m21_38  [color=red, key=1, label=pagerItems, style=dashed];
m21_28 -> m21_39  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m21_28 -> m21_40  [color=darkseagreen4, key=1, label=pagerItems, style=dashed];
m21_49 -> m21_74  [color=red, key=0, style=solid];
m21_49 -> m21_75  [color=red, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m21_49 -> m21_28  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.ICollection<HangFire.Web.Pager.Item> results", style=bold];
m21_49 -> m21_22  [key=2, style=dotted];
m21_49 -> m21_50  [key=0, style=solid];
m21_74 -> m21_75  [color=red, key=0, style=solid];
m21_74 -> m21_44  [color=red, key=2, style=dotted];
m21_74 -> m21_68  [color=blue, key=0, style=bold];
m21_75 -> m21_76  [color=red, key=0, style=solid];
m21_75 -> m21_53  [color=red, key=2, style=dotted];
m21_75 -> m21_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m21_75 -> m21_39  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m21_75 -> m21_56  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m21_75 -> m21_66  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m21_75 -> m21_73  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m21_75 -> m21_49  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m21_75 -> m21_60  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m21_75 -> m21_70  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m21_76 -> m21_49  [color=blue, key=0, style=bold];
m21_18 -> m21_19  [key=0, style=solid];
m21_19 -> m21_15  [color=blue, key=0, style=bold];
m21_44 -> m21_77  [key=0, style=solid];
m21_44 -> m21_78  [color=darkseagreen4, key=1, label=bool, style=dashed];
m21_44 -> m21_79  [color=darkseagreen4, key=1, label="HangFire.Web.Pager.ItemType", style=dashed];
m21_77 -> m21_78  [key=0, style=solid];
m21_78 -> m21_79  [key=0, style=solid];
m21_79 -> m21_80  [key=0, style=solid];
m21_80 -> m21_44  [color=blue, key=0, style=bold];
m21_43 -> m21_50  [key=0, style=solid];
m21_43 -> m21_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m21_43 -> m21_28  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.ICollection<HangFire.Web.Pager.Item> results", style=bold];
m21_58 -> m21_59  [key=0, style=solid];
m21_58 -> m21_44  [key=2, style=dotted];
m21_60 -> m21_22  [key=2, style=dotted];
m21_60 -> m21_61  [key=0, style=solid];
m21_60 -> m21_46  [color=blue, key=0, style=bold];
m21_59 -> m21_41  [key=2, style=dotted];
m21_59 -> m21_60  [key=0, style=solid];
m21_59 -> m21_53  [key=2, style=dotted];
m21_9 -> m21_20  [key=0, style=solid];
m21_9 -> m21_28  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.ICollection<HangFire.Web.Pager.Item> GenerateItems", style=bold];
m21_20 -> m21_21  [key=0, style=solid];
m21_21 -> m21_22  [key=0, style=solid];
m21_21 -> m21_23  [key=0, style=solid];
m21_22 -> m21_23  [key=0, style=solid];
m21_22 -> m21_31  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m21_22 -> m21_48  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m21_22 -> m21_59  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m21_22 -> m21_69  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m21_23 -> m21_24  [key=0, style=solid];
m21_23 -> m21_25  [color=red, key=0, style=solid];
m21_24 -> m21_25  [color=red, key=0, style=solid];
m21_24 -> m21_22  [color=blue, key=0, style=bold];
m21_30 -> m21_41  [key=0, style=solid];
m21_30 -> m21_31  [color=green, key=0, style=solid];
m21_31 -> m21_32  [color=green, key=0, style=solid];
m21_31 -> m21_43  [key=2, style=dotted];
m21_31 -> m21_41  [color=green, key=2, style=dotted];
m21_33 -> m21_34  [key=0, style=solid];
m21_33 -> m21_44  [key=2, style=dotted];
m21_33 -> m21_45  [key=2, style=dotted];
m21_33 -> m21_42  [key=2, style=dotted];
m21_34 -> m21_35  [key=0, style=solid];
m21_34 -> m21_46  [key=2, style=dotted];
m21_34 -> m21_43  [key=2, style=dotted];
m21_35 -> m21_36  [key=0, style=solid];
m21_35 -> m21_47  [key=2, style=dotted];
m21_35 -> m21_44  [key=2, style=dotted];
m21_36 -> m21_37  [color=red, key=0, style=solid];
m21_36 -> m21_48  [key=2, style=dotted];
m21_36 -> m21_45  [key=2, style=dotted];
m21_38 -> m21_39  [color=red, key=0, style=solid];
m21_38 -> m21_44  [color=red, key=2, style=dotted];
m21_38 -> m21_45  [color=red, key=2, style=dotted];
m21_39 -> m21_40  [key=0, style=solid];
m21_39 -> m21_49  [key=2, style=dotted];
m21_39 -> m21_26  [key=2, style=dotted];
m21_40 -> m21_41  [key=0, style=solid];
m21_40 -> m21_30  [color=blue, key=0, style=bold];
m21_32 -> m21_33  [key=0, style=solid];
m21_32 -> m21_34  [key=0, style=solid];
m21_32 -> m21_22  [key=2, style=dotted];
m21_37 -> m21_38  [color=red, key=0, style=solid];
m21_37 -> m21_39  [color=red, key=0, style=solid];
m21_37 -> m21_46  [key=2, style=dotted];
m21_41 -> m21_9  [color=blue, key=0, style=bold];
m21_47 -> m21_48  [key=0, style=solid];
m21_47 -> m21_68  [key=0, style=solid];
m21_47 -> m21_71  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.Web.Pager.Item>", style=dashed];
m21_47 -> m21_28  [color=darkorchid, key=3, label="Parameter variable System.Collections.Generic.ICollection<HangFire.Web.Pager.Item> results", style=bold];
m21_56 -> m21_26  [key=2, style=dotted];
m21_56 -> m21_57  [key=0, style=solid];
m21_56 -> m21_58  [key=0, style=solid];
m21_55 -> m21_56  [key=0, style=solid];
m21_55 -> m21_45  [key=2, style=dotted];
m21_55 -> m21_58  [color=darkseagreen4, key=1, label=index, style=dashed];
m21_50 -> m21_51  [key=0, style=solid];
m21_50 -> m21_42  [key=2, style=dotted];
m21_50 -> m21_44  [key=2, style=dotted];
m21_54 -> m21_55  [key=0, style=solid];
m21_54 -> m21_45  [key=2, style=dotted];
m21_54 -> m21_60  [key=0, style=solid];
m21_51 -> m21_52  [key=0, style=solid];
m21_51 -> m21_43  [key=2, style=dotted];
m21_51 -> m21_53  [key=2, style=dotted];
m21_52 -> m21_44  [key=2, style=dotted];
m21_52 -> m21_53  [key=0, style=solid];
m21_52 -> m21_43  [color=blue, key=0, style=bold];
m21_57 -> m21_47  [color=blue, key=0, style=bold];
m21_57 -> m21_58  [key=0, style=solid];
m21_68 -> m21_69  [key=0, style=solid];
m21_68 -> m21_70  [color=darkseagreen4, key=1, label=pageIndex, style=dashed];
m21_68 -> m21_72  [color=darkseagreen4, key=1, label=pageIndex, style=dashed];
m21_71 -> m21_72  [key=0, style=solid];
m21_71 -> m21_53  [key=2, style=dotted];
m21_71 -> m21_43  [key=2, style=dotted];
m21_69 -> m21_70  [key=0, style=solid];
m21_69 -> m21_73  [key=0, style=solid];
m21_69 -> m21_41  [key=2, style=dotted];
m21_70 -> m21_71  [key=0, style=solid];
m21_70 -> m21_44  [key=2, style=dotted];
m21_70 -> m21_22  [key=2, style=dotted];
m21_72 -> m21_69  [key=0, style=solid];
m21_72 -> m21_72  [color=darkseagreen4, key=1, label=pageIndex, style=dashed];
m21_72 -> m21_73  [key=0, style=solid];
m21_72 -> m21_44  [key=2, style=dotted];
m21_73 -> m21_47  [color=blue, key=0, style=bold];
m21_73 -> m21_26  [key=2, style=dotted];
m21_73 -> m21_74  [key=0, style=solid];
m21_81 -> m21_1  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_2  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_3  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_4  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_5  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_6  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_11  [color=red, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_13  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_18  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_20  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_21  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_22  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_24  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_25  [color=red, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_26  [color=red, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_27  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_29  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_31  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_32  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_34  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_35  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_36  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_37  [color=red, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_38  [color=red, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_39  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_50  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_54  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_55  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_61  [color=red, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_62  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_63  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_64  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_68  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_69  [color=darkseagreen4, key=1, label="HangFire.Web.Pager", style=dashed];
m21_81 -> m21_74  [color=red, key=1, label="HangFire.Web.Pager", style=dashed];
m21_82 -> m21_77  [color=darkseagreen4, key=1, label="HangFire.Web.Pager.Item", style=dashed];
m21_82 -> m21_78  [color=darkseagreen4, key=1, label="HangFire.Web.Pager.Item", style=dashed];
m21_82 -> m21_79  [color=darkseagreen4, key=1, label="HangFire.Web.Pager.Item", style=dashed];
m22_28 -> m22_29  [color=red, key=0, style=solid];
m22_29 -> m22_30  [color=red, key=0, style=solid];
m22_29 -> m22_26  [color=red, key=2, style=dotted];
m22_29 -> m22_31  [color=red, key=2, style=dotted];
m22_30 -> m22_28  [color=blue, key=0, style=bold];
m22_23 -> m22_24  [color=red, key=0, style=solid];
m22_24 -> m22_25  [color=red, key=0, style=solid];
m22_24 -> m22_26  [color=red, key=2, style=dotted];
m22_24 -> m22_27  [color=red, key=2, style=dotted];
m22_25 -> m22_23  [color=blue, key=0, style=bold];
m22_0 -> m22_1  [key=0, style=solid];
m22_1 -> m22_2  [key=0, style=solid];
m22_1 -> m22_5  [key=2, style=dotted];
m22_2 -> m22_3  [key=0, style=solid];
m22_2 -> m22_6  [key=2, style=dotted];
m22_3 -> m22_4  [key=0, style=solid];
m22_3 -> m22_7  [key=2, style=dotted];
m22_3 -> m22_8  [key=2, style=dotted];
m22_3 -> m22_9  [key=2, style=dotted];
m22_4 -> m22_0  [color=blue, key=0, style=bold];
m22_32 -> m22_33  [color=red, key=0, style=solid];
m22_33 -> m22_34  [color=red, key=0, style=solid];
m22_33 -> m22_35  [color=red, key=2, style=dotted];
m22_34 -> m22_32  [color=blue, key=0, style=bold];
m22_16 -> m22_17  [key=0, style=solid];
m22_17 -> m22_18  [key=0, style=solid];
m22_17 -> m22_20  [key=2, style=dotted];
m22_17 -> m22_21  [key=2, style=dotted];
m22_18 -> m22_19  [key=0, style=solid];
m22_18 -> m22_22  [key=2, style=dotted];
m22_19 -> m22_16  [color=blue, key=0, style=bold];
m22_10 -> m22_11  [key=0, style=solid];
m22_11 -> m22_12  [key=0, style=solid];
m22_11 -> m22_5  [key=2, style=dotted];
m22_12 -> m22_13  [key=0, style=solid];
m22_12 -> m22_6  [key=2, style=dotted];
m22_13 -> m22_14  [key=0, style=solid];
m22_13 -> m22_15  [key=2, style=dotted];
m22_13 -> m22_8  [key=2, style=dotted];
m22_13 -> m22_9  [key=2, style=dotted];
m22_14 -> m22_10  [color=blue, key=0, style=bold];
m22_36 -> m22_18  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerSteps", style=dashed];
m22_36 -> m22_33  [color=red, key=1, label="HangFire.Tests.SchedulePollerSteps", style=dashed];
m23_8 -> m23_9  [key=0, style=solid];
m23_9 -> m23_10  [key=0, style=solid];
m23_9 -> m23_11  [key=2, style=dotted];
m23_10 -> m23_8  [color=blue, key=0, style=bold];
m23_3 -> m23_4  [color=red, key=0, style=solid];
m23_4 -> m23_5  [color=red, key=0, style=solid];
m23_4 -> m23_6  [color=red, key=2, style=dotted];
m23_4 -> m23_7  [color=red, key=2, style=dotted];
m23_5 -> m23_3  [color=blue, key=0, style=bold];
m23_0 -> m23_1  [color=red, key=0, style=solid];
m23_1 -> m23_2  [color=red, key=0, style=solid];
m23_2 -> m23_0  [color=blue, key=0, style=bold];
m23_12 -> m23_13  [key=0, style=solid];
m23_13 -> m23_14  [key=0, style=solid];
m23_13 -> m23_15  [key=2, style=dotted];
m23_14 -> m23_12  [color=blue, key=0, style=bold];
m23_16 -> m23_1  [color=red, key=1, label="HangFire.States.SucceededState", style=dashed];
m23_16 -> m23_4  [color=red, key=1, label="HangFire.States.SucceededState", style=dashed];
m24_5 -> m24_6  [key=0, style=solid];
m24_5 -> m24_10  [key=2, style=dotted];
m24_82 -> m24_83  [key=0, style=solid];
m24_83 -> m24_84  [key=0, style=solid];
m24_83 -> m24_85  [key=2, style=dotted];
m24_84 -> m24_82  [color=blue, key=0, style=bold];
m24_98 -> m24_99  [key=0, style=solid];
m24_98 -> m24_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_99 -> m24_100  [key=0, style=solid];
m24_99 -> m24_23  [key=2, style=dotted];
m24_99 -> m24_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_100 -> m24_98  [color=blue, key=0, style=bold];
m24_9 -> m24_10  [color=red, key=0, style=solid];
m24_9 -> m24_15  [color=red, key=2, style=dotted];
m24_9 -> m24_16  [color=red, key=2, style=dotted];
m24_9 -> m24_13  [color=red, key=1, label=transaction, style=dashed];
m24_85 -> m24_86  [key=0, style=solid];
m24_85 -> m24_87  [color=red, key=1, label=string, style=dashed];
m24_85 -> m24_90  [color=red, key=1, label=string, style=dashed];
m24_85 -> m24_82  [color=darkorchid, key=3, label="Parameter variable string value", style=bold];
m24_85 -> m24_83  [color=darkorchid, key=3, label="Parameter variable double score", style=bold];
m24_86 -> m24_87  [color=red, key=0, style=solid];
m24_86 -> m24_90  [color=red, key=1, label=addSql, style=dashed];
m24_86 -> m24_86  [color=darkorchid, key=3, label="Local variable string addSql", style=bold];
m24_87 -> m24_88  [color=red, key=0, style=solid];
m24_87 -> m24_23  [color=red, key=2, style=dotted];
m24_87 -> m24_89  [color=red, key=1, label="lambda expression", style=dashed];
m24_88 -> m24_85  [color=blue, key=0, style=bold];
m24_8 -> m24_47  [color=green, key=0, style=solid];
m24_8 -> m24_9  [color=red, key=0, style=solid];
m24_47 -> m24_48  [color=green, key=0, style=solid];
m24_47 -> m24_49  [color=green, key=2, style=dotted];
m24_47 -> m24_44  [color=blue, key=0, style=bold];
m24_48 -> m24_8  [color=blue, key=0, style=bold];
m24_48 -> m24_49  [color=red, key=0, style=solid];
m24_48 -> m24_24  [key=0, style=solid];
m24_64 -> m24_65  [color=red, key=0, style=solid];
m24_64 -> m24_68  [color=red, key=1, label=string, style=dashed];
m24_65 -> m24_66  [color=red, key=0, style=solid];
m24_65 -> m24_23  [color=red, key=2, style=dotted];
m24_65 -> m24_67  [color=red, key=1, label="lambda expression", style=dashed];
m24_66 -> m24_64  [color=blue, key=0, style=bold];
m24_44 -> m24_45  [key=0, style=solid];
m24_44 -> m24_46  [color=red, key=1, label=string, style=dashed];
m24_44 -> m24_49  [color=red, key=1, label=string, style=dashed];
m24_45 -> m24_46  [color=red, key=0, style=solid];
m24_45 -> m24_49  [color=red, key=1, label=addStateSql, style=dashed];
m24_45 -> m24_45  [color=darkorchid, key=3, label="Local variable string addStateSql", style=bold];
m24_46 -> m24_47  [color=red, key=0, style=solid];
m24_46 -> m24_23  [color=red, key=2, style=dotted];
m24_46 -> m24_48  [color=red, key=1, label="lambda expression", style=dashed];
m24_46 -> m24_44  [color=blue, key=0, style=bold];
m24_110 -> m24_111  [color=red, key=0, style=solid];
m24_110 -> m24_112  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_110 -> m24_115  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_111 -> m24_112  [color=red, key=0, style=solid];
m24_111 -> m24_115  [color=red, key=1, label=trimSql, style=dashed];
m24_111 -> m24_111  [color=red, key=3, label="Local variable string trimSql", style=bold];
m24_112 -> m24_113  [key=0, style=solid];
m24_112 -> m24_23  [key=2, style=dotted];
m24_112 -> m24_114  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_113 -> m24_110  [color=blue, key=0, style=bold];
m24_23 -> m24_117  [key=0, style=solid];
m24_23 -> m24_21  [color=darkorchid, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_30  [color=red, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_37  [color=darkorchid, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_46  [color=red, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_53  [color=darkorchid, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_59  [color=darkorchid, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_65  [color=red, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_71  [color=darkorchid, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_77  [color=darkorchid, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_87  [color=red, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_93  [color=darkorchid, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_99  [color=darkorchid, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_105  [color=darkorchid, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_23 -> m24_112  [color=darkorchid, key=3, label="Parameter variable System.Action<SqlConnection> action", style=bold];
m24_117 -> m24_118  [key=0, style=solid];
m24_117 -> m24_119  [key=2, style=dotted];
m24_118 -> m24_23  [color=blue, key=0, style=bold];
m24_42 -> m24_15  [key=2, style=dotted];
m24_42 -> m24_43  [key=0, style=solid];
m24_42 -> m24_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_17 -> m24_34  [key=0, style=solid];
m24_35 -> m24_36  [key=0, style=solid];
m24_35 -> m24_37  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_35 -> m24_40  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_35 -> m24_15  [key=2, style=dotted];
m24_35 -> m24_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_36 -> m24_37  [key=0, style=solid];
m24_36 -> m24_40  [color=darkseagreen4, key=1, label=addAndSetStateSql, style=dashed];
m24_36 -> m24_36  [color=darkorchid, key=3, label="Local variable string addAndSetStateSql", style=bold];
m24_36 -> m24_33  [color=blue, key=0, style=bold];
m24_37 -> m24_38  [key=0, style=solid];
m24_37 -> m24_23  [key=2, style=dotted];
m24_37 -> m24_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_38 -> m24_35  [color=blue, key=0, style=bold];
m24_38 -> m24_91  [key=0, style=solid];
m24_70 -> m24_71  [key=0, style=solid];
m24_70 -> m24_74  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_71 -> m24_72  [key=0, style=solid];
m24_71 -> m24_23  [key=2, style=dotted];
m24_71 -> m24_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_72 -> m24_70  [color=blue, key=0, style=bold];
m24_76 -> m24_77  [key=0, style=solid];
m24_76 -> m24_80  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_77 -> m24_78  [key=0, style=solid];
m24_77 -> m24_23  [key=2, style=dotted];
m24_77 -> m24_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_78 -> m24_76  [color=blue, key=0, style=bold];
m24_11 -> m24_12  [color=red, key=0, style=solid];
m24_11 -> m24_13  [key=0, style=solid];
m24_12 -> m24_8  [key=2, style=dotted];
m24_12 -> m24_13  [key=0, style=solid];
m24_12 -> m24_17  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_12 -> m24_11  [color=red, key=0, style=solid];
m24_12 -> m24_18  [color=red, key=2, style=dotted];
m24_13 -> m24_15  [key=2, style=dotted];
m24_13 -> m24_14  [key=0, style=solid];
m24_13 -> m24_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_13 -> m24_19  [key=2, style=dotted];
m24_14 -> m24_11  [color=blue, key=0, style=bold];
m24_14 -> m24_8  [color=blue, key=0, style=bold];
m24_19 -> m24_20  [color=green, key=0, style=solid];
m24_27 -> m24_8  [key=2, style=dotted];
m24_27 -> m24_28  [key=0, style=solid];
m24_27 -> m24_31  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_92 -> m24_93  [key=0, style=solid];
m24_92 -> m24_96  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_93 -> m24_94  [key=0, style=solid];
m24_93 -> m24_23  [key=2, style=dotted];
m24_93 -> m24_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_94 -> m24_92  [color=blue, key=0, style=bold];
m24_20 -> m24_21  [color=green, key=0, style=solid];
m24_20 -> m24_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_20 -> m24_8  [color=green, key=2, style=dotted];
m24_20 -> m24_24  [color=green, key=1, label=options, style=dashed];
m24_21 -> m24_22  [key=0, style=solid];
m24_21 -> m24_23  [key=2, style=dotted];
m24_21 -> m24_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_21 -> m24_15  [key=2, style=dotted];
m24_21 -> m24_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_22 -> m24_20  [color=blue, key=0, style=bold];
m24_22 -> m24_19  [color=blue, key=0, style=bold];
m24_33 -> m24_34  [color=red, key=0, style=solid];
m24_33 -> m24_28  [color=red, key=2, style=dotted];
m24_34 -> m24_8  [key=2, style=dotted];
m24_34 -> m24_35  [key=0, style=solid];
m24_34 -> m24_38  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_34 -> m24_32  [color=blue, key=0, style=bold];
m24_104 -> m24_105  [key=0, style=solid];
m24_104 -> m24_108  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_105 -> m24_106  [key=0, style=solid];
m24_105 -> m24_23  [key=2, style=dotted];
m24_105 -> m24_107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_106 -> m24_104  [color=blue, key=0, style=bold];
m24_10 -> m24_11  [color=red, key=0, style=solid];
m24_10 -> m24_17  [color=red, key=2, style=dotted];
m24_25 -> m24_26  [key=0, style=solid];
m24_25 -> m24_27  [key=2, style=dotted];
m24_25 -> m24_28  [key=2, style=dotted];
m24_24 -> m24_25  [key=0, style=solid];
m24_24 -> m24_50  [key=0, style=solid];
m24_26 -> m24_24  [color=blue, key=0, style=bold];
m24_26 -> m24_27  [key=0, style=solid];
m24_32 -> m24_33  [color=red, key=0, style=solid];
m24_32 -> m24_17  [key=0, style=solid];
m24_40 -> m24_41  [key=0, style=solid];
m24_40 -> m24_42  [key=2, style=dotted];
m24_40 -> m24_43  [key=2, style=dotted];
m24_40 -> m24_28  [key=2, style=dotted];
m24_39 -> m24_40  [key=0, style=solid];
m24_41 -> m24_39  [color=blue, key=0, style=bold];
m24_41 -> m24_8  [key=2, style=dotted];
m24_41 -> m24_42  [key=0, style=solid];
m24_41 -> m24_45  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_49 -> m24_50  [color=red, key=0, style=solid];
m24_49 -> m24_42  [color=red, key=2, style=dotted];
m24_49 -> m24_43  [color=red, key=2, style=dotted];
m24_49 -> m24_28  [color=red, key=2, style=dotted];
m24_50 -> m24_48  [color=blue, key=0, style=bold];
m24_50 -> m24_20  [color=green, key=1, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m24_50 -> m24_1  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m24_50 -> m24_12  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m24_50 -> m24_27  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m24_50 -> m24_34  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m24_50 -> m24_41  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m24_56 -> m24_57  [key=0, style=solid];
m24_56 -> m24_28  [key=2, style=dotted];
m24_55 -> m24_56  [key=0, style=solid];
m24_55 -> m24_45  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_57 -> m24_55  [color=blue, key=0, style=bold];
m24_62 -> m24_63  [key=0, style=solid];
m24_62 -> m24_28  [key=2, style=dotted];
m24_61 -> m24_62  [key=0, style=solid];
m24_63 -> m24_61  [color=blue, key=0, style=bold];
m24_68 -> m24_69  [color=red, key=0, style=solid];
m24_68 -> m24_27  [color=red, key=2, style=dotted];
m24_68 -> m24_28  [color=red, key=2, style=dotted];
m24_67 -> m24_68  [color=red, key=0, style=solid];
m24_67 -> m24_31  [key=0, style=solid];
m24_69 -> m24_67  [color=blue, key=0, style=bold];
m24_74 -> m24_75  [key=0, style=solid];
m24_74 -> m24_28  [key=2, style=dotted];
m24_73 -> m24_74  [key=0, style=solid];
m24_75 -> m24_73  [color=blue, key=0, style=bold];
m24_80 -> m24_81  [key=0, style=solid];
m24_80 -> m24_27  [key=2, style=dotted];
m24_80 -> m24_28  [key=2, style=dotted];
m24_79 -> m24_80  [key=0, style=solid];
m24_81 -> m24_79  [color=blue, key=0, style=bold];
m24_90 -> m24_91  [color=red, key=0, style=solid];
m24_90 -> m24_28  [color=red, key=2, style=dotted];
m24_89 -> m24_90  [color=red, key=0, style=solid];
m24_89 -> m24_38  [key=0, style=solid];
m24_91 -> m24_89  [color=blue, key=0, style=bold];
m24_96 -> m24_97  [key=0, style=solid];
m24_96 -> m24_28  [key=2, style=dotted];
m24_95 -> m24_96  [key=0, style=solid];
m24_97 -> m24_95  [color=blue, key=0, style=bold];
m24_102 -> m24_103  [key=0, style=solid];
m24_102 -> m24_28  [key=2, style=dotted];
m24_101 -> m24_102  [key=0, style=solid];
m24_103 -> m24_101  [color=blue, key=0, style=bold];
m24_108 -> m24_109  [key=0, style=solid];
m24_108 -> m24_28  [key=2, style=dotted];
m24_107 -> m24_108  [key=0, style=solid];
m24_109 -> m24_107  [color=blue, key=0, style=bold];
m24_115 -> m24_116  [key=0, style=solid];
m24_115 -> m24_28  [key=2, style=dotted];
m24_114 -> m24_115  [key=0, style=solid];
m24_116 -> m24_114  [color=blue, key=0, style=bold];
m24_31 -> m24_69  [key=0, style=solid];
m24_31 -> m24_29  [color=blue, key=0, style=bold];
m24_28 -> m24_15  [key=2, style=dotted];
m24_28 -> m24_29  [key=0, style=solid];
m24_28 -> m24_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_29 -> m24_26  [color=blue, key=0, style=bold];
m24_29 -> m24_30  [color=red, key=0, style=solid];
m24_29 -> m24_33  [color=red, key=1, label=string, style=dashed];
m24_0 -> m24_1  [key=0, style=solid];
m24_0 -> m24_3  [color=red, key=1, label=SqlConnection, style=dashed];
m24_1 -> m24_2  [key=0, style=solid];
m24_1 -> m24_3  [color=red, key=0, style=solid];
m24_1 -> m24_8  [key=2, style=dotted];
m24_1 -> m24_4  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_1 -> m24_5  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_1 -> m24_6  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_3 -> m24_4  [color=red, key=0, style=solid];
m24_3 -> m24_9  [key=2, style=dotted];
m24_2 -> m24_4  [key=0, style=solid];
m24_2 -> m24_5  [key=2, style=dotted];
m24_2 -> m24_3  [key=0, style=solid];
m24_2 -> m24_9  [key=2, style=dotted];
m24_4 -> m24_0  [color=blue, key=0, style=bold];
m24_4 -> m24_5  [key=0, style=solid];
m24_4 -> m24_9  [key=2, style=dotted];
m24_43 -> m24_40  [color=blue, key=0, style=bold];
m24_51 -> m24_52  [key=0, style=solid];
m24_51 -> m24_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_51 -> m24_56  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_51 -> m24_17  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_52 -> m24_53  [key=0, style=solid];
m24_52 -> m24_56  [color=darkseagreen4, key=1, label=enqueueJobSql, style=dashed];
m24_52 -> m24_52  [color=darkorchid, key=3, label="Local variable string enqueueJobSql", style=bold];
m24_52 -> m24_24  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_53 -> m24_54  [key=0, style=solid];
m24_53 -> m24_23  [key=2, style=dotted];
m24_53 -> m24_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_53 -> m24_31  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_54 -> m24_51  [color=blue, key=0, style=bold];
m24_54 -> m24_38  [color=darkseagreen4, key=1, label=options, style=dashed];
m24_58 -> m24_59  [key=0, style=solid];
m24_58 -> m24_62  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_59 -> m24_60  [key=0, style=solid];
m24_59 -> m24_23  [key=2, style=dotted];
m24_59 -> m24_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m24_60 -> m24_58  [color=blue, key=0, style=bold];
m24_30 -> m24_31  [color=red, key=0, style=solid];
m24_30 -> m24_23  [color=red, key=2, style=dotted];
m24_30 -> m24_32  [color=red, key=1, label="lambda expression", style=dashed];
m24_6 -> m24_7  [key=0, style=solid];
m24_6 -> m24_10  [key=2, style=dotted];
m24_7 -> m24_0  [color=blue, key=0, style=bold];
m24_7 -> m24_6  [color=blue, key=0, style=bold];
m24_120 -> m24_3  [color=red, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_10  [color=red, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_11  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_12  [color=red, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_21  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_30  [color=red, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_37  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_46  [color=red, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_53  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_59  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_65  [color=red, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_71  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_77  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_83  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_87  [color=red, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_93  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_99  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_105  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_112  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_120 -> m24_117  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m24_121 -> m24_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_122 -> m24_25  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m24_123 -> m24_33  [color=red, key=1, label=string, style=dashed];
m24_124 -> m24_40  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_125 -> m24_40  [color=darkseagreen4, key=1, label="HangFire.States.IState", style=dashed];
m24_126 -> m24_40  [color=darkseagreen4, key=1, label=addAndSetStateSql, style=dashed];
m24_127 -> m24_49  [color=red, key=1, label=string, style=dashed];
m24_128 -> m24_49  [color=red, key=1, label="HangFire.States.IState", style=dashed];
m24_129 -> m24_49  [color=red, key=1, label=addStateSql, style=dashed];
m24_130 -> m24_56  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_131 -> m24_56  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_132 -> m24_56  [color=darkseagreen4, key=1, label=enqueueJobSql, style=dashed];
m24_133 -> m24_62  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_134 -> m24_68  [color=red, key=1, label=string, style=dashed];
m24_135 -> m24_68  [color=red, key=1, label="System.TimeSpan", style=dashed];
m24_136 -> m24_74  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_137 -> m24_80  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_138 -> m24_80  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m24_139 -> m24_90  [color=red, key=1, label=string, style=dashed];
m24_140 -> m24_90  [color=red, key=1, label=string, style=dashed];
m24_141 -> m24_90  [color=red, key=1, label=double, style=dashed];
m24_142 -> m24_90  [color=red, key=1, label=addSql, style=dashed];
m24_143 -> m24_96  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_144 -> m24_96  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_145 -> m24_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_146 -> m24_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_147 -> m24_108  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_148 -> m24_108  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_149 -> m24_115  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_150 -> m24_115  [color=darkseagreen4, key=1, label=int, style=dashed];
m24_151 -> m24_115  [color=darkseagreen4, key=1, label=int, style=dashed];
m24_152 -> m24_115  [color=darkseagreen4, key=1, label=trimSql, style=dashed];
m25_46 -> m25_47  [key=0, style=solid];
m25_47 -> m25_48  [color=red, key=0, style=solid];
m25_47 -> m25_15  [key=2, style=dotted];
m25_47 -> m25_50  [key=2, style=dotted];
m25_48 -> m25_49  [color=red, key=0, style=solid];
m25_48 -> m25_51  [color=red, key=2, style=dotted];
m25_49 -> m25_46  [color=blue, key=0, style=bold];
m25_35 -> m25_39  [key=0, style=solid];
m25_35 -> m25_32  [color=darkorchid, key=3, label="Parameter variable int workers", style=bold];
m25_35 -> m25_36  [color=darkorchid, key=3, label="Parameter variable string name", style=bold];
m25_35 -> m25_30  [color=darkorchid, key=3, label="Parameter variable int workers", style=bold];
m25_39 -> m25_40  [key=0, style=solid];
m25_39 -> m25_41  [key=2, style=dotted];
m25_40 -> m25_35  [color=blue, key=0, style=bold];
m25_20 -> m25_21  [key=0, style=solid];
m25_21 -> m25_22  [key=0, style=solid];
m25_21 -> m25_15  [key=2, style=dotted];
m25_21 -> m25_10  [key=2, style=dotted];
m25_22 -> m25_20  [color=blue, key=0, style=bold];
m25_29 -> m25_30  [key=0, style=solid];
m25_29 -> m25_42  [color=darkorchid, key=3, label="Parameter variable string name", style=bold];
m25_30 -> m25_31  [key=0, style=solid];
m25_30 -> m25_32  [key=2, style=dotted];
m25_31 -> m25_29  [color=blue, key=0, style=bold];
m25_6 -> m25_7  [key=0, style=solid];
m25_7 -> m25_8  [key=0, style=solid];
m25_7 -> m25_10  [key=2, style=dotted];
m25_8 -> m25_9  [key=0, style=solid];
m25_8 -> m25_10  [key=2, style=dotted];
m25_9 -> m25_6  [color=blue, key=0, style=bold];
m25_36 -> m25_37  [key=0, style=solid];
m25_37 -> m25_38  [key=0, style=solid];
m25_37 -> m25_35  [key=2, style=dotted];
m25_38 -> m25_36  [color=blue, key=0, style=bold];
m25_60 -> m25_61  [key=0, style=solid];
m25_60 -> m25_62  [color=red, key=1, label=string, style=dashed];
m25_61 -> m25_62  [color=red, key=0, style=solid];
m25_61 -> m25_64  [key=2, style=dotted];
m25_62 -> m25_63  [color=red, key=0, style=solid];
m25_62 -> m25_65  [color=red, key=2, style=dotted];
m25_62 -> m25_66  [color=red, key=2, style=dotted];
m25_63 -> m25_60  [color=blue, key=0, style=bold];
m25_52 -> m25_53  [key=0, style=solid];
m25_53 -> m25_54  [key=0, style=solid];
m25_53 -> m25_55  [key=2, style=dotted];
m25_54 -> m25_52  [color=blue, key=0, style=bold];
m25_78 -> m25_79  [key=0, style=solid];
m25_78 -> m25_81  [color=red, key=1, label=string, style=dashed];
m25_78 -> m25_82  [color=red, key=1, label=string, style=dashed];
m25_79 -> m25_80  [color=red, key=0, style=solid];
m25_79 -> m25_15  [key=2, style=dotted];
m25_79 -> m25_50  [key=2, style=dotted];
m25_79 -> m25_81  [color=red, key=1, label=registeredQueues, style=dashed];
m25_79 -> m25_82  [color=red, key=1, label=registeredQueues, style=dashed];
m25_81 -> m25_82  [color=red, key=0, style=solid];
m25_81 -> m25_84  [color=red, key=2, style=dotted];
m25_82 -> m25_83  [color=red, key=0, style=solid];
m25_82 -> m25_84  [color=red, key=2, style=dotted];
m25_80 -> m25_81  [color=red, key=0, style=solid];
m25_80 -> m25_84  [color=red, key=2, style=dotted];
m25_83 -> m25_78  [color=blue, key=0, style=bold];
m25_42 -> m25_43  [key=0, style=solid];
m25_43 -> m25_44  [key=0, style=solid];
m25_43 -> m25_29  [key=2, style=dotted];
m25_44 -> m25_45  [key=0, style=solid];
m25_44 -> m25_5  [key=2, style=dotted];
m25_45 -> m25_42  [color=blue, key=0, style=bold];
m25_55 -> m25_56  [key=0, style=solid];
m25_55 -> m25_57  [color=red, key=1, label=string, style=dashed];
m25_55 -> m25_53  [color=darkorchid, key=3, label="Parameter variable string jobId", style=bold];
m25_56 -> m25_57  [color=red, key=0, style=solid];
m25_56 -> m25_15  [key=2, style=dotted];
m25_56 -> m25_50  [key=2, style=dotted];
m25_57 -> m25_58  [color=red, key=0, style=solid];
m25_57 -> m25_59  [color=red, key=2, style=dotted];
m25_58 -> m25_55  [color=blue, key=0, style=bold];
m25_0 -> m25_1  [key=0, style=solid];
m25_1 -> m25_2  [key=0, style=solid];
m25_1 -> m25_4  [key=0, style=solid];
m25_2 -> m25_3  [key=0, style=solid];
m25_2 -> m25_5  [key=2, style=dotted];
m25_3 -> m25_4  [key=0, style=solid];
m25_4 -> m25_0  [color=blue, key=0, style=bold];
m25_16 -> m25_17  [key=0, style=solid];
m25_16 -> m25_18  [color=darkseagreen4, key=1, label=string, style=dashed];
m25_17 -> m25_18  [key=0, style=solid];
m25_17 -> m25_10  [key=2, style=dotted];
m25_18 -> m25_19  [key=0, style=solid];
m25_18 -> m25_15  [key=2, style=dotted];
m25_18 -> m25_10  [key=2, style=dotted];
m25_19 -> m25_16  [color=blue, key=0, style=bold];
m25_72 -> m25_73  [key=0, style=solid];
m25_72 -> m25_74  [color=red, key=1, label=Table, style=dashed];
m25_73 -> m25_74  [color=red, key=0, style=solid];
m25_73 -> m25_15  [key=2, style=dotted];
m25_73 -> m25_76  [key=2, style=dotted];
m25_74 -> m25_75  [color=red, key=0, style=solid];
m25_74 -> m25_77  [color=red, key=2, style=dotted];
m25_75 -> m25_72  [color=blue, key=0, style=bold];
m25_91 -> m25_89  [color=blue, key=0, style=bold];
m25_89 -> m25_90  [color=red, key=0, style=solid];
m25_90 -> m25_91  [color=red, key=0, style=solid];
m25_90 -> m25_15  [color=red, key=2, style=dotted];
m25_90 -> m25_88  [color=red, key=2, style=dotted];
m25_90 -> m25_71  [color=red, key=2, style=dotted];
m25_11 -> m25_12  [key=0, style=solid];
m25_12 -> m25_13  [key=0, style=solid];
m25_12 -> m25_15  [key=2, style=dotted];
m25_12 -> m25_10  [key=2, style=dotted];
m25_13 -> m25_14  [key=0, style=solid];
m25_13 -> m25_10  [key=2, style=dotted];
m25_14 -> m25_11  [color=blue, key=0, style=bold];
m25_23 -> m25_24  [key=0, style=solid];
m25_23 -> m25_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m25_24 -> m25_25  [key=0, style=solid];
m25_24 -> m25_27  [key=2, style=dotted];
m25_25 -> m25_26  [key=0, style=solid];
m25_25 -> m25_15  [key=2, style=dotted];
m25_25 -> m25_28  [key=2, style=dotted];
m25_26 -> m25_23  [color=blue, key=0, style=bold];
m25_32 -> m25_33  [key=0, style=solid];
m25_32 -> m25_29  [color=darkorchid, key=3, label="Parameter variable string name", style=bold];
m25_32 -> m25_30  [color=darkorchid, key=3, label="Parameter variable int workers", style=bold];
m25_33 -> m25_34  [key=0, style=solid];
m25_33 -> m25_35  [key=2, style=dotted];
m25_34 -> m25_32  [color=blue, key=0, style=bold];
m25_87 -> m25_85  [color=blue, key=0, style=bold];
m25_85 -> m25_86  [color=red, key=0, style=solid];
m25_86 -> m25_87  [color=red, key=0, style=solid];
m25_86 -> m25_15  [color=red, key=2, style=dotted];
m25_86 -> m25_88  [color=red, key=2, style=dotted];
m25_86 -> m25_71  [color=red, key=2, style=dotted];
m25_67 -> m25_68  [key=0, style=solid];
m25_67 -> m25_69  [color=red, key=1, label=string, style=dashed];
m25_68 -> m25_69  [color=red, key=0, style=solid];
m25_68 -> m25_64  [key=2, style=dotted];
m25_69 -> m25_70  [color=red, key=0, style=solid];
m25_69 -> m25_65  [color=red, key=2, style=dotted];
m25_69 -> m25_71  [color=red, key=2, style=dotted];
m25_70 -> m25_67  [color=blue, key=0, style=bold];
m25_92 -> m25_1  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m25_92 -> m25_2  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m25_92 -> m25_3  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m25_92 -> m25_30  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m25_92 -> m25_33  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m25_92 -> m25_37  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m25_92 -> m25_39  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m25_92 -> m25_43  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m25_92 -> m25_44  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m25_92 -> m25_53  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m25_92 -> m25_61  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m25_92 -> m25_68  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerSteps", style=dashed];
m26_68 -> m26_69  [key=0, style=solid];
m26_71 -> m26_30  [key=2, style=dotted];
m26_71 -> m26_72  [key=0, style=solid];
m26_72 -> m26_33  [key=2, style=dotted];
m26_72 -> m26_73  [key=0, style=solid];
m26_70 -> m26_22  [key=2, style=dotted];
m26_70 -> m26_71  [key=0, style=solid];
m26_69 -> m26_44  [key=2, style=dotted];
m26_69 -> m26_70  [key=0, style=solid];
m26_76 -> m26_26  [key=2, style=dotted];
m26_76 -> m26_77  [key=0, style=solid];
m26_73 -> m26_74  [key=0, style=solid];
m26_73 -> m26_45  [key=2, style=dotted];
m26_75 -> m26_76  [key=0, style=solid];
m26_75 -> m26_47  [key=2, style=dotted];
m26_74 -> m26_75  [key=0, style=solid];
m26_74 -> m26_46  [key=2, style=dotted];
m26_77 -> m26_68  [color=blue, key=0, style=bold];
m26_26 -> m26_27  [key=0, style=solid];
m26_27 -> m26_28  [key=0, style=solid];
m26_27 -> m26_29  [key=2, style=dotted];
m26_28 -> m26_26  [color=blue, key=0, style=bold];
m26_88 -> m26_89  [key=0, style=solid];
m26_97 -> m26_98  [color=green, key=0, style=solid];
m26_97 -> m26_26  [color=green, key=2, style=dotted];
m26_96 -> m26_97  [color=green, key=0, style=solid];
m26_96 -> m26_99  [key=2, style=dotted];
m26_91 -> m26_30  [key=2, style=dotted];
m26_91 -> m26_92  [key=0, style=solid];
m26_92 -> m26_33  [key=2, style=dotted];
m26_92 -> m26_93  [key=0, style=solid];
m26_90 -> m26_22  [key=2, style=dotted];
m26_90 -> m26_91  [key=0, style=solid];
m26_89 -> m26_44  [key=2, style=dotted];
m26_89 -> m26_90  [key=0, style=solid];
m26_95 -> m26_96  [key=0, style=solid];
m26_95 -> m26_47  [key=2, style=dotted];
m26_93 -> m26_94  [key=0, style=solid];
m26_93 -> m26_45  [key=2, style=dotted];
m26_94 -> m26_95  [key=0, style=solid];
m26_94 -> m26_46  [key=2, style=dotted];
m26_98 -> m26_88  [color=blue, key=0, style=bold];
m26_48 -> m26_49  [key=0, style=solid];
m26_51 -> m26_30  [key=2, style=dotted];
m26_51 -> m26_52  [key=0, style=solid];
m26_52 -> m26_33  [key=2, style=dotted];
m26_52 -> m26_53  [key=0, style=solid];
m26_50 -> m26_22  [key=2, style=dotted];
m26_50 -> m26_51  [key=0, style=solid];
m26_49 -> m26_44  [key=2, style=dotted];
m26_49 -> m26_50  [key=0, style=solid];
m26_56 -> m26_26  [key=2, style=dotted];
m26_56 -> m26_57  [key=0, style=solid];
m26_53 -> m26_54  [key=0, style=solid];
m26_53 -> m26_45  [key=2, style=dotted];
m26_55 -> m26_56  [key=0, style=solid];
m26_55 -> m26_47  [key=2, style=dotted];
m26_54 -> m26_55  [key=0, style=solid];
m26_54 -> m26_46  [key=2, style=dotted];
m26_57 -> m26_48  [color=blue, key=0, style=bold];
m26_78 -> m26_79  [key=0, style=solid];
m26_81 -> m26_30  [key=2, style=dotted];
m26_81 -> m26_82  [key=0, style=solid];
m26_82 -> m26_33  [key=2, style=dotted];
m26_82 -> m26_83  [key=0, style=solid];
m26_80 -> m26_22  [key=2, style=dotted];
m26_80 -> m26_81  [key=0, style=solid];
m26_79 -> m26_44  [key=2, style=dotted];
m26_79 -> m26_80  [key=0, style=solid];
m26_86 -> m26_26  [key=2, style=dotted];
m26_86 -> m26_87  [key=0, style=solid];
m26_83 -> m26_84  [key=0, style=solid];
m26_83 -> m26_45  [key=2, style=dotted];
m26_85 -> m26_86  [key=0, style=solid];
m26_85 -> m26_47  [key=2, style=dotted];
m26_84 -> m26_85  [key=0, style=solid];
m26_84 -> m26_46  [key=2, style=dotted];
m26_87 -> m26_78  [color=blue, key=0, style=bold];
m26_58 -> m26_59  [key=0, style=solid];
m26_61 -> m26_30  [key=2, style=dotted];
m26_61 -> m26_62  [key=0, style=solid];
m26_62 -> m26_33  [key=2, style=dotted];
m26_62 -> m26_63  [key=0, style=solid];
m26_60 -> m26_22  [key=2, style=dotted];
m26_60 -> m26_61  [key=0, style=solid];
m26_59 -> m26_44  [key=2, style=dotted];
m26_59 -> m26_60  [key=0, style=solid];
m26_66 -> m26_26  [key=2, style=dotted];
m26_66 -> m26_67  [key=0, style=solid];
m26_63 -> m26_64  [key=0, style=solid];
m26_63 -> m26_45  [key=2, style=dotted];
m26_65 -> m26_66  [key=0, style=solid];
m26_65 -> m26_47  [key=2, style=dotted];
m26_64 -> m26_65  [key=0, style=solid];
m26_64 -> m26_46  [key=2, style=dotted];
m26_67 -> m26_58  [color=blue, key=0, style=bold];
m26_34 -> m26_35  [color=green, key=0, style=solid];
m26_35 -> m26_36  [color=green, key=0, style=solid];
m26_35 -> m26_44  [color=green, key=2, style=dotted];
m26_36 -> m26_22  [key=2, style=dotted];
m26_36 -> m26_37  [key=0, style=solid];
m26_37 -> m26_30  [key=2, style=dotted];
m26_37 -> m26_38  [key=0, style=solid];
m26_38 -> m26_33  [key=2, style=dotted];
m26_38 -> m26_39  [key=0, style=solid];
m26_42 -> m26_26  [key=2, style=dotted];
m26_42 -> m26_43  [key=0, style=solid];
m26_39 -> m26_40  [key=0, style=solid];
m26_39 -> m26_45  [key=2, style=dotted];
m26_41 -> m26_42  [key=0, style=solid];
m26_41 -> m26_47  [key=2, style=dotted];
m26_40 -> m26_41  [key=0, style=solid];
m26_40 -> m26_46  [key=2, style=dotted];
m26_43 -> m26_34  [color=blue, key=0, style=bold];
m26_22 -> m26_35  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m26_22 -> m26_23  [key=0, style=solid];
m26_22 -> m26_49  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m26_22 -> m26_59  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m26_22 -> m26_69  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m26_22 -> m26_79  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m26_22 -> m26_89  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m26_23 -> m26_24  [key=0, style=solid];
m26_23 -> m26_25  [key=2, style=dotted];
m26_24 -> m26_22  [color=blue, key=0, style=bold];
m26_14 -> m26_15  [key=0, style=solid];
m26_16 -> m26_0  [key=2, style=dotted];
m26_16 -> m26_17  [key=0, style=solid];
m26_15 -> m26_16  [key=0, style=solid];
m26_15 -> m26_17  [key=0, style=solid];
m26_17 -> m26_14  [color=blue, key=0, style=bold];
m26_30 -> m26_31  [color=green, key=0, style=solid];
m26_31 -> m26_32  [color=green, key=0, style=solid];
m26_31 -> m26_33  [color=green, key=2, style=dotted];
m26_32 -> m26_30  [color=blue, key=0, style=bold];
m26_0 -> m26_1  [color=green, key=0, style=solid];
m26_0 -> m26_16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m26_1 -> m26_2  [color=green, key=0, style=solid];
m26_1 -> m26_5  [color=green, key=2, style=dotted];
m26_2 -> m26_3  [color=green, key=0, style=solid];
m26_2 -> m26_6  [color=green, key=2, style=dotted];
m26_2 -> m26_7  [color=green, key=2, style=dotted];
m26_3 -> m26_4  [key=0, style=solid];
m26_3 -> m26_8  [key=2, style=dotted];
m26_4 -> m26_0  [color=blue, key=0, style=bold];
m26_100 -> m26_97  [color=green, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_37  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_42  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_50  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_51  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_56  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_60  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_61  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_66  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_70  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_71  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_76  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_80  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_81  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_86  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_90  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m26_100 -> m26_91  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.ServerWatchdogFeature", style=dashed];
m27_4 -> m27_5  [key=0, style=solid];
m27_5 -> m27_6  [key=0, style=solid];
m27_5 -> m27_7  [key=2, style=dotted];
m27_6 -> m27_4  [color=blue, key=0, style=bold];
m27_0 -> m27_1  [key=0, style=solid];
m27_1 -> m27_2  [key=0, style=solid];
m27_1 -> m27_3  [key=2, style=dotted];
m27_2 -> m27_0  [color=blue, key=0, style=bold];
m27_18 -> m27_19  [key=0, style=solid];
m27_19 -> m27_18  [color=blue, key=0, style=bold];
m27_38 -> m27_39  [color=red, key=0, style=solid];
m27_38 -> m27_40  [color=red, key=1, label=string, style=dashed];
m27_38 -> m27_5  [color=darkorchid, key=3, label="Parameter variable string name", style=bold];
m27_39 -> m27_40  [color=red, key=0, style=solid];
m27_39 -> m27_32  [color=red, key=2, style=dotted];
m27_39 -> m27_42  [color=red, key=2, style=dotted];
m27_40 -> m27_41  [color=red, key=0, style=solid];
m27_40 -> m27_12  [color=red, key=2, style=dotted];
m27_40 -> m27_34  [color=red, key=2, style=dotted];
m27_40 -> m27_42  [color=red, key=2, style=dotted];
m27_41 -> m27_38  [color=blue, key=0, style=bold];
m27_20 -> m27_21  [key=0, style=solid];
m27_21 -> m27_22  [key=0, style=solid];
m27_21 -> m27_23  [key=2, style=dotted];
m27_21 -> m27_24  [key=2, style=dotted];
m27_22 -> m27_20  [color=blue, key=0, style=bold];
m27_16 -> m27_17  [key=0, style=solid];
m27_16 -> m27_12  [key=2, style=dotted];
m27_16 -> m27_13  [key=2, style=dotted];
m27_16 -> m27_14  [key=2, style=dotted];
m27_15 -> m27_16  [key=0, style=solid];
m27_17 -> m27_15  [color=blue, key=0, style=bold];
m27_35 -> m27_36  [key=0, style=solid];
m27_36 -> m27_37  [key=0, style=solid];
m27_36 -> m27_38  [key=2, style=dotted];
m27_37 -> m27_35  [color=blue, key=0, style=bold];
m27_28 -> m27_29  [color=red, key=0, style=solid];
m27_28 -> m27_30  [color=red, key=1, label=string, style=dashed];
m27_28 -> m27_5  [color=darkorchid, key=3, label="Parameter variable string name", style=bold];
m27_29 -> m27_30  [color=red, key=0, style=solid];
m27_29 -> m27_32  [color=red, key=2, style=dotted];
m27_29 -> m27_33  [color=red, key=2, style=dotted];
m27_30 -> m27_31  [color=red, key=0, style=solid];
m27_30 -> m27_12  [color=red, key=2, style=dotted];
m27_30 -> m27_34  [color=red, key=2, style=dotted];
m27_30 -> m27_33  [color=red, key=2, style=dotted];
m27_31 -> m27_28  [color=blue, key=0, style=bold];
m27_9 -> m27_10  [key=0, style=solid];
m27_9 -> m27_12  [key=2, style=dotted];
m27_9 -> m27_13  [key=2, style=dotted];
m27_9 -> m27_14  [key=2, style=dotted];
m27_7 -> m27_8  [key=0, style=solid];
m27_7 -> m27_9  [color=darkseagreen4, key=1, label=string, style=dashed];
m27_7 -> m27_5  [color=darkorchid, key=3, label="Parameter variable string name", style=bold];
m27_7 -> m27_4  [color=darkorchid, key=3, label="Parameter variable System.DateTime startedAt", style=bold];
m27_8 -> m27_9  [key=0, style=solid];
m27_8 -> m27_11  [key=2, style=dotted];
m27_10 -> m27_7  [color=blue, key=0, style=bold];
m27_25 -> m27_26  [key=0, style=solid];
m27_26 -> m27_27  [key=0, style=solid];
m27_26 -> m27_28  [key=2, style=dotted];
m27_27 -> m27_25  [color=blue, key=0, style=bold];
m27_43 -> m27_1  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogSteps", style=dashed];
m27_43 -> m27_5  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogSteps", style=dashed];
m27_43 -> m27_21  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogSteps", style=dashed];
m27_43 -> m27_26  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogSteps", style=dashed];
m27_43 -> m27_36  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogSteps", style=dashed];
m28_22 -> m28_31  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_101  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_110  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_121  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_150  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_173  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_182  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_192  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_23  [key=0, style=solid];
m28_22 -> m28_45  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_54  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_63  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_76  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_88  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_135  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_165  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_208  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m28_22 -> m28_18  [color=blue, key=0, style=bold];
m28_23 -> m28_24  [key=0, style=solid];
m28_23 -> m28_25  [key=2, style=dotted];
m28_24 -> m28_22  [color=blue, key=0, style=bold];
m28_24 -> m28_25  [key=0, style=solid];
m28_26 -> m28_27  [color=red, key=0, style=solid];
m28_26 -> m28_13  [key=2, style=dotted];
m28_27 -> m28_28  [color=red, key=0, style=solid];
m28_27 -> m28_29  [color=green, key=2, style=dotted];
m28_27 -> m28_31  [color=red, key=2, style=dotted];
m28_28 -> m28_26  [color=blue, key=0, style=bold];
m28_28 -> m28_29  [color=red, key=0, style=solid];
m28_28 -> m28_32  [color=red, key=2, style=dotted];
m28_31 -> m28_32  [color=green, key=0, style=solid];
m28_31 -> m28_39  [color=green, key=2, style=dotted];
m28_25 -> m28_26  [key=0, style=solid];
m28_25 -> m28_27  [color=red, key=0, style=solid];
m28_49 -> m28_42  [key=2, style=dotted];
m28_49 -> m28_50  [key=0, style=solid];
m28_76 -> m28_39  [key=2, style=dotted];
m28_76 -> m28_77  [key=0, style=solid];
m28_29 -> m28_30  [key=0, style=solid];
m28_29 -> m28_33  [key=2, style=dotted];
m28_100 -> m28_101  [color=green, key=0, style=solid];
m28_101 -> m28_102  [color=green, key=0, style=solid];
m28_101 -> m28_39  [color=green, key=2, style=dotted];
m28_102 -> m28_103  [color=green, key=0, style=solid];
m28_102 -> m28_22  [color=green, key=2, style=dotted];
m28_103 -> m28_104  [color=green, key=0, style=solid];
m28_103 -> m28_40  [color=green, key=2, style=dotted];
m28_104 -> m28_105  [color=green, key=0, style=solid];
m28_104 -> m28_41  [color=green, key=2, style=dotted];
m28_105 -> m28_106  [key=0, style=solid];
m28_105 -> m28_42  [key=2, style=dotted];
m28_107 -> m28_108  [color=green, key=0, style=solid];
m28_107 -> m28_26  [color=green, key=2, style=dotted];
m28_106 -> m28_107  [color=green, key=0, style=solid];
m28_106 -> m28_43  [key=2, style=dotted];
m28_108 -> m28_100  [color=blue, key=0, style=bold];
m28_109 -> m28_110  [color=green, key=0, style=solid];
m28_110 -> m28_111  [color=green, key=0, style=solid];
m28_110 -> m28_39  [color=green, key=2, style=dotted];
m28_111 -> m28_22  [key=2, style=dotted];
m28_111 -> m28_112  [key=0, style=solid];
m28_113 -> m28_114  [color=green, key=0, style=solid];
m28_113 -> m28_41  [color=green, key=2, style=dotted];
m28_112 -> m28_113  [color=green, key=0, style=solid];
m28_112 -> m28_40  [key=2, style=dotted];
m28_114 -> m28_115  [color=green, key=0, style=solid];
m28_114 -> m28_42  [color=green, key=2, style=dotted];
m28_115 -> m28_116  [key=0, style=solid];
m28_115 -> m28_43  [key=2, style=dotted];
m28_118 -> m28_119  [color=green, key=0, style=solid];
m28_118 -> m28_26  [color=green, key=2, style=dotted];
m28_117 -> m28_118  [color=green, key=0, style=solid];
m28_117 -> m28_41  [key=2, style=dotted];
m28_116 -> m28_41  [key=2, style=dotted];
m28_116 -> m28_117  [key=0, style=solid];
m28_119 -> m28_109  [color=blue, key=0, style=bold];
m28_120 -> m28_121  [color=green, key=0, style=solid];
m28_121 -> m28_122  [color=green, key=0, style=solid];
m28_121 -> m28_39  [color=green, key=2, style=dotted];
m28_122 -> m28_123  [color=green, key=0, style=solid];
m28_122 -> m28_22  [color=green, key=2, style=dotted];
m28_123 -> m28_124  [color=green, key=0, style=solid];
m28_123 -> m28_40  [color=green, key=2, style=dotted];
m28_124 -> m28_125  [color=green, key=0, style=solid];
m28_124 -> m28_41  [color=green, key=2, style=dotted];
m28_125 -> m28_41  [key=2, style=dotted];
m28_125 -> m28_126  [key=0, style=solid];
m28_128 -> m28_129  [color=green, key=0, style=solid];
m28_128 -> m28_73  [color=green, key=2, style=dotted];
m28_128 -> m28_130  [color=green, key=1, label=table4, style=dashed];
m28_128 -> m28_131  [color=green, key=1, label=table4, style=dashed];
m28_127 -> m28_128  [color=green, key=0, style=solid];
m28_127 -> m28_42  [key=2, style=dotted];
m28_129 -> m28_74  [key=2, style=dotted];
m28_129 -> m28_130  [key=0, style=solid];
m28_130 -> m28_131  [color=green, key=0, style=solid];
m28_130 -> m28_74  [key=2, style=dotted];
m28_131 -> m28_132  [color=green, key=0, style=solid];
m28_131 -> m28_43  [color=green, key=2, style=dotted];
m28_132 -> m28_133  [color=green, key=0, style=solid];
m28_132 -> m28_26  [color=green, key=2, style=dotted];
m28_126 -> m28_41  [key=2, style=dotted];
m28_126 -> m28_127  [key=0, style=solid];
m28_133 -> m28_120  [color=blue, key=0, style=bold];
m28_164 -> m28_165  [key=0, style=solid];
m28_168 -> m28_169  [color=green, key=0, style=solid];
m28_168 -> m28_42  [color=green, key=2, style=dotted];
m28_167 -> m28_168  [color=green, key=0, style=solid];
m28_167 -> m28_40  [key=2, style=dotted];
m28_169 -> m28_43  [key=2, style=dotted];
m28_169 -> m28_170  [key=0, style=solid];
m28_170 -> m28_26  [key=2, style=dotted];
m28_170 -> m28_171  [key=0, style=solid];
m28_166 -> m28_22  [key=2, style=dotted];
m28_166 -> m28_167  [key=0, style=solid];
m28_165 -> m28_39  [key=2, style=dotted];
m28_165 -> m28_166  [key=0, style=solid];
m28_171 -> m28_164  [color=blue, key=0, style=bold];
m28_207 -> m28_208  [key=0, style=solid];
m28_210 -> m28_211  [color=green, key=0, style=solid];
m28_210 -> m28_40  [color=green, key=2, style=dotted];
m28_209 -> m28_210  [color=green, key=0, style=solid];
m28_209 -> m28_22  [key=2, style=dotted];
m28_211 -> m28_41  [key=2, style=dotted];
m28_211 -> m28_212  [key=0, style=solid];
m28_213 -> m28_214  [color=green, key=0, style=solid];
m28_213 -> m28_42  [color=green, key=2, style=dotted];
m28_212 -> m28_213  [color=green, key=0, style=solid];
m28_212 -> m28_41  [key=2, style=dotted];
m28_214 -> m28_215  [color=green, key=0, style=solid];
m28_214 -> m28_73  [color=green, key=2, style=dotted];
m28_214 -> m28_216  [color=green, key=1, label=table8, style=dashed];
m28_215 -> m28_216  [color=green, key=0, style=solid];
m28_215 -> m28_74  [color=green, key=2, style=dotted];
m28_216 -> m28_217  [color=green, key=0, style=solid];
m28_216 -> m28_43  [color=green, key=2, style=dotted];
m28_217 -> m28_218  [color=green, key=0, style=solid];
m28_217 -> m28_26  [color=green, key=2, style=dotted];
m28_208 -> m28_39  [key=2, style=dotted];
m28_208 -> m28_209  [key=0, style=solid];
m28_218 -> m28_207  [color=blue, key=0, style=bold];
m28_50 -> m28_43  [key=2, style=dotted];
m28_50 -> m28_51  [key=0, style=solid];
m28_0 -> m28_1  [color=green, key=0, style=solid];
m28_0 -> m28_16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m28_0 -> m28_2  [color=darkseagreen4, key=1, label="HangFire.Server.JobManager", style=dashed];
m28_0 -> m28_3  [color=darkseagreen4, key=1, label="HangFire.Server.WorkerContext", style=dashed];
m28_1 -> m28_2  [color=green, key=0, style=solid];
m28_1 -> m28_5  [color=green, key=2, style=dotted];
m28_1 -> m28_8  [key=2, style=dotted];
m28_2 -> m28_3  [color=green, key=0, style=solid];
m28_2 -> m28_6  [color=green, key=2, style=dotted];
m28_2 -> m28_7  [color=green, key=2, style=dotted];
m28_3 -> m28_4  [key=0, style=solid];
m28_3 -> m28_8  [key=2, style=dotted];
m28_4 -> m28_0  [color=blue, key=0, style=bold];
m28_4 -> m28_5  [color=red, key=0, style=solid];
m28_4 -> m28_9  [key=2, style=dotted];
m28_4 -> m28_10  [key=2, style=dotted];
m28_32 -> m28_22  [key=2, style=dotted];
m28_32 -> m28_33  [key=0, style=solid];
m28_46 -> m28_22  [key=2, style=dotted];
m28_46 -> m28_47  [key=0, style=solid];
m28_17 -> m28_14  [color=blue, key=0, style=bold];
m28_41 -> m28_45  [color=red, key=0, style=solid];
m28_191 -> m28_192  [color=green, key=0, style=solid];
m28_192 -> m28_193  [color=green, key=0, style=solid];
m28_192 -> m28_39  [color=green, key=2, style=dotted];
m28_193 -> m28_22  [key=2, style=dotted];
m28_193 -> m28_194  [key=0, style=solid];
m28_201 -> m28_202  [color=green, key=0, style=solid];
m28_201 -> m28_74  [color=green, key=2, style=dotted];
m28_199 -> m28_201  [color=green, key=1, label=table7, style=dashed];
m28_199 -> m28_202  [color=green, key=1, label=table7, style=dashed];
m28_199 -> m28_204  [color=green, key=1, label=table7, style=dashed];
m28_199 -> m28_73  [key=2, style=dotted];
m28_199 -> m28_200  [key=0, style=solid];
m28_199 -> m28_203  [color=darkseagreen4, key=1, label=table7, style=dashed];
m28_200 -> m28_201  [color=green, key=0, style=solid];
m28_200 -> m28_74  [key=2, style=dotted];
m28_202 -> m28_203  [color=green, key=0, style=solid];
m28_202 -> m28_74  [color=green, key=2, style=dotted];
m28_203 -> m28_204  [color=green, key=0, style=solid];
m28_203 -> m28_74  [key=2, style=dotted];
m28_204 -> m28_205  [color=green, key=0, style=solid];
m28_204 -> m28_43  [color=green, key=2, style=dotted];
m28_205 -> m28_206  [color=green, key=0, style=solid];
m28_205 -> m28_26  [color=green, key=2, style=dotted];
m28_194 -> m28_40  [key=2, style=dotted];
m28_194 -> m28_195  [key=0, style=solid];
m28_195 -> m28_41  [key=2, style=dotted];
m28_195 -> m28_196  [key=0, style=solid];
m28_196 -> m28_41  [key=2, style=dotted];
m28_196 -> m28_197  [key=0, style=solid];
m28_197 -> m28_41  [key=2, style=dotted];
m28_197 -> m28_198  [key=0, style=solid];
m28_198 -> m28_42  [key=2, style=dotted];
m28_198 -> m28_199  [key=0, style=solid];
m28_206 -> m28_191  [color=blue, key=0, style=bold];
m28_5 -> m28_6  [color=red, key=0, style=solid];
m28_5 -> m28_11  [color=red, key=2, style=dotted];
m28_5 -> m28_9  [color=red, key=2, style=dotted];
m28_6 -> m28_7  [color=red, key=0, style=solid];
m28_6 -> m28_12  [color=red, key=2, style=dotted];
m28_7 -> m28_0  [color=blue, key=0, style=bold];
m28_47 -> m28_40  [key=2, style=dotted];
m28_47 -> m28_48  [key=0, style=solid];
m28_172 -> m28_173  [color=green, key=0, style=solid];
m28_173 -> m28_174  [color=green, key=0, style=solid];
m28_173 -> m28_39  [color=green, key=2, style=dotted];
m28_174 -> m28_22  [key=2, style=dotted];
m28_174 -> m28_175  [key=0, style=solid];
m28_176 -> m28_177  [color=green, key=0, style=solid];
m28_176 -> m28_41  [color=green, key=2, style=dotted];
m28_175 -> m28_176  [color=green, key=0, style=solid];
m28_175 -> m28_40  [key=2, style=dotted];
m28_177 -> m28_178  [color=green, key=0, style=solid];
m28_177 -> m28_42  [color=green, key=2, style=dotted];
m28_178 -> m28_43  [key=2, style=dotted];
m28_178 -> m28_179  [key=0, style=solid];
m28_179 -> m28_26  [key=2, style=dotted];
m28_179 -> m28_180  [key=0, style=solid];
m28_180 -> m28_172  [color=blue, key=0, style=bold];
m28_34 -> m28_35  [key=0, style=solid];
m28_34 -> m28_41  [key=2, style=dotted];
m28_35 -> m28_36  [key=0, style=solid];
m28_35 -> m28_41  [color=red, key=0, style=solid];
m28_35 -> m28_42  [key=0, style=solid];
m28_35 -> m28_45  [key=0, style=solid];
m28_36 -> m28_37  [key=0, style=solid];
m28_36 -> m28_46  [key=2, style=dotted];
m28_36 -> m28_43  [key=2, style=dotted];
m28_42 -> m28_43  [key=0, style=solid];
m28_37 -> m28_38  [key=0, style=solid];
m28_37 -> m28_47  [key=2, style=dotted];
m28_37 -> m28_26  [key=2, style=dotted];
m28_38 -> m28_39  [key=0, style=solid];
m28_38 -> m28_30  [color=blue, key=0, style=bold];
m28_39 -> m28_40  [key=0, style=solid];
m28_39 -> m28_48  [key=2, style=dotted];
m28_40 -> m28_35  [key=0, style=solid];
m28_40 -> m28_49  [key=2, style=dotted];
m28_43 -> m28_44  [key=0, style=solid];
m28_44 -> m28_45  [key=0, style=solid];
m28_44 -> m28_50  [key=2, style=dotted];
m28_44 -> m28_51  [key=2, style=dotted];
m28_45 -> m28_34  [color=blue, key=0, style=bold];
m28_45 -> m28_39  [key=2, style=dotted];
m28_45 -> m28_46  [key=0, style=solid];
m28_79 -> m28_41  [key=2, style=dotted];
m28_79 -> m28_80  [key=0, style=solid];
m28_134 -> m28_135  [key=0, style=solid];
m28_144 -> m28_145  [color=green, key=0, style=solid];
m28_144 -> m28_73  [color=green, key=2, style=dotted];
m28_144 -> m28_146  [color=green, key=1, label=table5, style=dashed];
m28_143 -> m28_144  [color=green, key=0, style=solid];
m28_143 -> m28_41  [key=2, style=dotted];
m28_145 -> m28_146  [color=green, key=0, style=solid];
m28_145 -> m28_74  [key=2, style=dotted];
m28_146 -> m28_147  [color=green, key=0, style=solid];
m28_146 -> m28_41  [color=green, key=2, style=dotted];
m28_147 -> m28_26  [key=2, style=dotted];
m28_147 -> m28_148  [key=0, style=solid];
m28_136 -> m28_22  [key=2, style=dotted];
m28_136 -> m28_137  [key=0, style=solid];
m28_135 -> m28_39  [key=2, style=dotted];
m28_135 -> m28_136  [key=0, style=solid];
m28_137 -> m28_40  [key=2, style=dotted];
m28_137 -> m28_138  [key=0, style=solid];
m28_138 -> m28_41  [key=2, style=dotted];
m28_138 -> m28_139  [key=0, style=solid];
m28_139 -> m28_41  [key=2, style=dotted];
m28_139 -> m28_140  [key=0, style=solid];
m28_142 -> m28_41  [key=2, style=dotted];
m28_142 -> m28_143  [key=0, style=solid];
m28_140 -> m28_42  [key=2, style=dotted];
m28_140 -> m28_141  [key=0, style=solid];
m28_141 -> m28_43  [key=2, style=dotted];
m28_141 -> m28_142  [key=0, style=solid];
m28_148 -> m28_134  [color=blue, key=0, style=bold];
m28_80 -> m28_42  [key=2, style=dotted];
m28_80 -> m28_81  [key=0, style=solid];
m28_53 -> m28_54  [color=red, key=0, style=solid];
m28_53 -> m28_9  [color=red, key=2, style=dotted];
m28_53 -> m28_71  [color=red, key=2, style=dotted];
m28_60 -> m28_26  [key=2, style=dotted];
m28_60 -> m28_61  [color=red, key=0, style=solid];
m28_60 -> m28_75  [color=red, key=2, style=dotted];
m28_55 -> m28_22  [key=2, style=dotted];
m28_55 -> m28_56  [key=0, style=solid];
m28_55 -> m28_57  [key=0, style=solid];
m28_55 -> m28_72  [key=2, style=dotted];
m28_55 -> m28_73  [key=2, style=dotted];
m28_54 -> m28_39  [key=2, style=dotted];
m28_54 -> m28_55  [key=0, style=solid];
m28_54 -> m28_69  [key=0, style=solid];
m28_56 -> m28_40  [key=2, style=dotted];
m28_56 -> m28_57  [key=0, style=solid];
m28_56 -> m28_69  [key=0, style=solid];
m28_57 -> m28_41  [key=2, style=dotted];
m28_57 -> m28_58  [key=0, style=solid];
m28_58 -> m28_42  [key=2, style=dotted];
m28_58 -> m28_59  [key=0, style=solid];
m28_59 -> m28_43  [key=2, style=dotted];
m28_59 -> m28_60  [color=red, key=0, style=solid];
m28_59 -> m28_74  [key=2, style=dotted];
m28_61 -> m28_53  [color=blue, key=0, style=bold];
m28_61 -> m28_62  [color=red, key=0, style=solid];
m28_61 -> m28_65  [color=red, key=0, style=solid];
m28_61 -> m28_76  [color=red, key=2, style=dotted];
m28_14 -> m28_15  [color=red, key=0, style=solid];
m28_16 -> m28_0  [key=2, style=dotted];
m28_16 -> m28_17  [key=0, style=solid];
m28_16 -> m28_13  [color=blue, key=0, style=bold];
m28_15 -> m28_16  [color=red, key=0, style=solid];
m28_15 -> m28_17  [key=0, style=solid];
m28_51 -> m28_26  [key=2, style=dotted];
m28_51 -> m28_52  [key=0, style=solid];
m28_48 -> m28_41  [key=2, style=dotted];
m28_48 -> m28_49  [key=0, style=solid];
m28_48 -> m28_52  [key=0, style=solid];
m28_48 -> m28_53  [color=red, key=1, label="HangFire.Server.JobPayload", style=dashed];
m28_48 -> m28_55  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m28_48 -> m28_59  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m28_48 -> m28_64  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m28_48 -> m28_66  [color=red, key=1, label="HangFire.Server.JobPayload", style=dashed];
m28_48 -> m28_67  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m28_48 -> m28_68  [color=red, key=1, label="HangFire.Server.JobPayload", style=dashed];
m28_52 -> m28_44  [color=blue, key=0, style=bold];
m28_52 -> m28_53  [color=red, key=0, style=solid];
m28_52 -> m28_55  [key=0, style=solid];
m28_52 -> m28_70  [key=2, style=dotted];
m28_72 -> m28_62  [color=blue, key=0, style=bold];
m28_71 -> m28_26  [key=2, style=dotted];
m28_71 -> m28_72  [key=0, style=solid];
m28_75 -> m28_76  [key=0, style=solid];
m28_85 -> m28_26  [key=2, style=dotted];
m28_85 -> m28_86  [key=0, style=solid];
m28_77 -> m28_22  [key=2, style=dotted];
m28_77 -> m28_78  [key=0, style=solid];
m28_82 -> m28_74  [key=2, style=dotted];
m28_82 -> m28_83  [key=0, style=solid];
m28_83 -> m28_74  [key=2, style=dotted];
m28_83 -> m28_84  [key=0, style=solid];
m28_78 -> m28_40  [key=2, style=dotted];
m28_78 -> m28_79  [key=0, style=solid];
m28_81 -> m28_73  [key=2, style=dotted];
m28_81 -> m28_82  [key=0, style=solid];
m28_81 -> m28_83  [color=darkseagreen4, key=1, label=table2, style=dashed];
m28_81 -> m28_84  [color=darkseagreen4, key=1, label=table2, style=dashed];
m28_81 -> m28_1  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_2  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_3  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_4  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_5  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_6  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_14  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_15  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_19  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_20  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_21  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_25  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_26  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_27  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_28  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_29  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_36  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_37  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_38  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_39  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_40  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_43  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_44  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_53  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_55  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_59  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_60  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_61  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_64  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_66  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_67  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m28_81 -> m28_68  [color=red, key=1, label="HangFire.Server.Worker", style=dashed];
m28_84 -> m28_43  [key=2, style=dotted];
m28_84 -> m28_85  [key=0, style=solid];
m28_86 -> m28_75  [color=blue, key=0, style=bold];
m28_70 -> m28_43  [key=2, style=dotted];
m28_70 -> m28_71  [key=0, style=solid];
m28_13 -> m28_14  [key=0, style=solid];
m28_149 -> m28_150  [color=green, key=0, style=solid];
m28_150 -> m28_151  [color=green, key=0, style=solid];
m28_150 -> m28_39  [color=green, key=2, style=dotted];
m28_151 -> m28_152  [color=green, key=0, style=solid];
m28_151 -> m28_22  [color=green, key=2, style=dotted];
m28_152 -> m28_153  [color=green, key=0, style=solid];
m28_152 -> m28_40  [color=green, key=2, style=dotted];
m28_153 -> m28_41  [key=2, style=dotted];
m28_153 -> m28_154  [key=0, style=solid];
m28_157 -> m28_158  [color=green, key=0, style=solid];
m28_157 -> m28_73  [color=green, key=2, style=dotted];
m28_157 -> m28_159  [color=green, key=1, label=table6, style=dashed];
m28_157 -> m28_160  [color=green, key=1, label=table6, style=dashed];
m28_157 -> m28_161  [color=green, key=1, label=table6, style=dashed];
m28_156 -> m28_157  [color=green, key=0, style=solid];
m28_156 -> m28_42  [key=2, style=dotted];
m28_158 -> m28_74  [key=2, style=dotted];
m28_158 -> m28_159  [key=0, style=solid];
m28_159 -> m28_160  [color=green, key=0, style=solid];
m28_159 -> m28_74  [key=2, style=dotted];
m28_160 -> m28_161  [color=green, key=0, style=solid];
m28_160 -> m28_74  [color=green, key=2, style=dotted];
m28_161 -> m28_162  [color=green, key=0, style=solid];
m28_161 -> m28_43  [color=green, key=2, style=dotted];
m28_162 -> m28_26  [key=2, style=dotted];
m28_162 -> m28_163  [key=0, style=solid];
m28_154 -> m28_41  [key=2, style=dotted];
m28_154 -> m28_155  [key=0, style=solid];
m28_155 -> m28_41  [key=2, style=dotted];
m28_155 -> m28_156  [key=0, style=solid];
m28_163 -> m28_149  [color=blue, key=0, style=bold];
m28_64 -> m28_65  [key=0, style=solid];
m28_64 -> m28_9  [key=2, style=dotted];
m28_64 -> m28_77  [key=2, style=dotted];
m28_64 -> m28_22  [key=2, style=dotted];
m28_66 -> m28_68  [color=red, key=0, style=solid];
m28_66 -> m28_78  [color=red, key=2, style=dotted];
m28_66 -> m28_73  [color=red, key=2, style=dotted];
m28_66 -> m28_41  [key=2, style=dotted];
m28_66 -> m28_67  [key=0, style=solid];
m28_67 -> m28_68  [color=red, key=0, style=solid];
m28_67 -> m28_79  [key=2, style=dotted];
m28_67 -> m28_73  [key=2, style=dotted];
m28_67 -> m28_42  [key=2, style=dotted];
m28_68 -> m28_69  [color=red, key=0, style=solid];
m28_68 -> m28_80  [color=red, key=2, style=dotted];
m28_68 -> m28_73  [key=2, style=dotted];
m28_68 -> m28_70  [color=darkseagreen4, key=1, label=table1, style=dashed];
m28_62 -> m28_63  [key=0, style=solid];
m28_65 -> m28_66  [color=red, key=0, style=solid];
m28_65 -> m28_67  [key=0, style=solid];
m28_65 -> m28_40  [key=2, style=dotted];
m28_63 -> m28_64  [key=0, style=solid];
m28_63 -> m28_65  [color=darkseagreen4, key=1, label=exception, style=dashed];
m28_63 -> m28_67  [color=darkseagreen4, key=1, label=exception, style=dashed];
m28_63 -> m28_39  [key=2, style=dotted];
m28_69 -> m28_48  [color=blue, key=0, style=bold];
m28_69 -> m28_74  [key=2, style=dotted];
m28_69 -> m28_70  [key=0, style=solid];
m28_87 -> m28_88  [key=0, style=solid];
m28_92 -> m28_93  [color=green, key=0, style=solid];
m28_92 -> m28_74  [color=green, key=2, style=dotted];
m28_90 -> m28_92  [color=green, key=1, label=table3, style=dashed];
m28_90 -> m28_91  [key=0, style=solid];
m28_90 -> m28_73  [key=2, style=dotted];
m28_90 -> m28_93  [color=darkseagreen4, key=1, label=table3, style=dashed];
m28_91 -> m28_92  [color=green, key=0, style=solid];
m28_91 -> m28_74  [key=2, style=dotted];
m28_93 -> m28_94  [key=0, style=solid];
m28_93 -> m28_40  [key=2, style=dotted];
m28_98 -> m28_26  [key=2, style=dotted];
m28_98 -> m28_99  [key=0, style=solid];
m28_89 -> m28_22  [key=2, style=dotted];
m28_89 -> m28_90  [key=0, style=solid];
m28_88 -> m28_39  [key=2, style=dotted];
m28_88 -> m28_89  [key=0, style=solid];
m28_94 -> m28_41  [key=2, style=dotted];
m28_94 -> m28_95  [key=0, style=solid];
m28_97 -> m28_41  [key=2, style=dotted];
m28_97 -> m28_98  [key=0, style=solid];
m28_95 -> m28_42  [key=2, style=dotted];
m28_95 -> m28_96  [key=0, style=solid];
m28_96 -> m28_43  [key=2, style=dotted];
m28_96 -> m28_97  [key=0, style=solid];
m28_99 -> m28_87  [color=blue, key=0, style=bold];
m28_30 -> m28_31  [color=green, key=0, style=solid];
m28_30 -> m28_24  [color=blue, key=0, style=bold];
m28_33 -> m28_40  [key=2, style=dotted];
m28_33 -> m28_34  [key=0, style=solid];
m28_181 -> m28_182  [color=green, key=0, style=solid];
m28_182 -> m28_183  [color=green, key=0, style=solid];
m28_182 -> m28_39  [color=green, key=2, style=dotted];
m28_183 -> m28_184  [color=green, key=0, style=solid];
m28_183 -> m28_22  [color=green, key=2, style=dotted];
m28_184 -> m28_40  [key=2, style=dotted];
m28_184 -> m28_185  [key=0, style=solid];
m28_186 -> m28_187  [color=green, key=0, style=solid];
m28_186 -> m28_41  [color=green, key=2, style=dotted];
m28_185 -> m28_186  [color=green, key=0, style=solid];
m28_185 -> m28_41  [key=2, style=dotted];
m28_187 -> m28_188  [color=green, key=0, style=solid];
m28_187 -> m28_42  [color=green, key=2, style=dotted];
m28_188 -> m28_43  [key=2, style=dotted];
m28_188 -> m28_189  [key=0, style=solid];
m28_189 -> m28_26  [key=2, style=dotted];
m28_189 -> m28_190  [key=0, style=solid];
m28_190 -> m28_181  [color=blue, key=0, style=bold];
m28_18 -> m28_19  [key=0, style=solid];
m28_18 -> m28_20  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m28_19 -> m28_20  [key=0, style=solid];
m28_20 -> m28_21  [key=0, style=solid];
m28_21 -> m28_22  [key=0, style=solid];
m28_21 -> m28_23  [key=2, style=dotted];
m28_219 -> m28_102  [color=green, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_107  [color=green, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_118  [color=green, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_122  [color=green, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_132  [color=green, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_151  [color=green, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_183  [color=green, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_205  [color=green, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_217  [color=green, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_32  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_37  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_46  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_51  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_55  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_60  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_64  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_71  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_77  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_85  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_89  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_98  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_111  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_136  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_147  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_162  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_166  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_170  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_174  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_179  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_189  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_193  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m28_219 -> m28_209  [color=darkseagreen4, key=1, label="HangFire.Tests.StateMachineFeature", style=dashed];
m29_21 -> m29_27  [key=0, style=solid];
m29_27 -> m29_28  [key=0, style=solid];
m29_27 -> m29_29  [key=0, style=solid];
m29_28 -> m29_29  [key=0, style=solid];
m29_29 -> m29_21  [color=blue, key=0, style=bold];
m29_0 -> m29_1  [key=0, style=solid];
m29_0 -> m29_3  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerComponent", style=dashed];
m29_0 -> m29_8  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerComponent", style=dashed];
m29_1 -> m29_2  [key=0, style=solid];
m29_1 -> m29_3  [key=0, style=solid];
m29_3 -> m29_4  [key=0, style=solid];
m29_3 -> m29_6  [key=2, style=dotted];
m29_3 -> m29_7  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m29_2 -> m29_4  [key=0, style=solid];
m29_2 -> m29_5  [key=2, style=dotted];
m29_4 -> m29_0  [color=blue, key=0, style=bold];
m29_7 -> m29_8  [key=0, style=solid];
m29_8 -> m29_9  [key=0, style=solid];
m29_8 -> m29_10  [key=2, style=dotted];
m29_9 -> m29_7  [color=blue, key=0, style=bold];
m29_10 -> m29_11  [key=0, style=solid];
m29_10 -> m29_12  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerComponent", style=dashed];
m29_10 -> m29_13  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerComponent", style=dashed];
m29_10 -> m29_14  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerComponent", style=dashed];
m29_10 -> m29_17  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerComponent", style=dashed];
m29_10 -> m29_18  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerComponent", style=dashed];
m29_11 -> m29_12  [key=0, style=solid];
m29_11 -> m29_20  [key=2, style=dotted];
m29_11 -> m29_21  [key=2, style=dotted];
m29_12 -> m29_13  [key=0, style=solid];
m29_12 -> m29_20  [key=2, style=dotted];
m29_12 -> m29_22  [key=2, style=dotted];
m29_12 -> m29_17  [color=darkseagreen4, key=1, label=logger, style=dashed];
m29_12 -> m29_18  [color=darkseagreen4, key=1, label=logger, style=dashed];
m29_13 -> m29_14  [key=0, style=solid];
m29_13 -> m29_23  [key=2, style=dotted];
m29_14 -> m29_15  [key=0, style=solid];
m29_14 -> m29_16  [key=0, style=solid];
m29_14 -> m29_18  [key=0, style=solid];
m29_14 -> m29_24  [key=2, style=dotted];
m29_17 -> m29_18  [key=0, style=solid];
m29_17 -> m29_25  [key=2, style=dotted];
m29_17 -> m29_26  [key=2, style=dotted];
m29_18 -> m29_19  [key=0, style=solid];
m29_18 -> m29_23  [key=2, style=dotted];
m29_15 -> m29_18  [key=0, style=solid];
m29_16 -> m29_17  [key=0, style=solid];
m29_19 -> m29_10  [color=blue, key=0, style=bold];
m29_30 -> m29_8  [color=darkseagreen4, key=1, label="Hangfire.Server.IServerComponent", style=dashed];
m29_31 -> m29_8  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m30_0 -> m30_1  [key=0, style=solid];
m30_0 -> m30_16  [color=red, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m30_0 -> m30_4  [color=green, key=1, label=string, style=dashed];
m30_0 -> m30_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m30_0 -> m30_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m30_0 -> m30_8  [color=darkseagreen4, key=1, label=string, style=dashed];
m30_1 -> m30_2  [key=0, style=solid];
m30_1 -> m30_5  [key=2, style=dotted];
m30_2 -> m30_3  [color=green, key=0, style=solid];
m30_2 -> m30_6  [key=2, style=dotted];
m30_2 -> m30_7  [key=2, style=dotted];
m30_2 -> m30_4  [color=green, key=0, style=solid];
m30_2 -> m30_11  [key=2, style=dotted];
m30_3 -> m30_4  [key=0, style=solid];
m30_3 -> m30_8  [key=2, style=dotted];
m30_3 -> m30_10  [color=green, key=0, style=solid];
m30_4 -> m30_0  [color=blue, key=0, style=bold];
m30_4 -> m30_5  [color=green, key=0, style=solid];
m30_4 -> m30_6  [color=green, key=0, style=solid];
m30_4 -> m30_11  [color=green, key=2, style=dotted];
m30_14 -> m30_15  [color=red, key=0, style=solid];
m30_15 -> m30_16  [color=red, key=0, style=solid];
m30_15 -> m30_17  [color=red, key=0, style=solid];
m30_16 -> m30_17  [color=red, key=0, style=solid];
m30_16 -> m30_0  [color=red, key=2, style=dotted];
m30_17 -> m30_14  [color=blue, key=0, style=bold];
m30_18 -> m30_19  [key=0, style=solid];
m30_19 -> m30_20  [key=0, style=solid];
m30_19 -> m30_21  [key=2, style=dotted];
m30_20 -> m30_18  [color=blue, key=0, style=bold];
m30_11 -> m30_12  [key=0, style=solid];
m30_26 -> m30_27  [key=0, style=solid];
m30_27 -> m30_28  [key=0, style=solid];
m30_27 -> m30_29  [key=2, style=dotted];
m30_28 -> m30_26  [color=blue, key=0, style=bold];
m30_99 -> m30_100  [key=0, style=solid];
m30_100 -> m30_101  [key=0, style=solid];
m30_100 -> m30_42  [key=2, style=dotted];
m30_101 -> m30_102  [key=0, style=solid];
m30_101 -> m30_22  [key=2, style=dotted];
m30_102 -> m30_103  [key=0, style=solid];
m30_102 -> m30_30  [key=2, style=dotted];
m30_103 -> m30_104  [key=0, style=solid];
m30_103 -> m30_63  [key=2, style=dotted];
m30_104 -> m30_105  [key=0, style=solid];
m30_104 -> m30_89  [key=2, style=dotted];
m30_105 -> m30_106  [key=0, style=solid];
m30_105 -> m30_43  [key=2, style=dotted];
m30_106 -> m30_107  [key=0, style=solid];
m30_106 -> m30_26  [key=2, style=dotted];
m30_107 -> m30_99  [color=blue, key=0, style=bold];
m30_5 -> m30_10  [color=green, key=0, style=solid];
m30_9 -> m30_10  [key=0, style=solid];
m30_10 -> m30_11  [key=0, style=solid];
m30_10 -> m30_13  [key=2, style=dotted];
m30_10 -> m30_0  [color=blue, key=0, style=bold];
m30_12 -> m30_9  [color=blue, key=0, style=bold];
m30_12 -> m30_3  [color=green, key=1, label="HangFire.Web.FontsHandler", style=dashed];
m30_12 -> m30_5  [color=green, key=1, label="HangFire.Web.FontsHandler", style=dashed];
m30_12 -> m30_1  [color=darkseagreen4, key=1, label="HangFire.Web.FontsHandler", style=dashed];
m30_12 -> m30_7  [color=darkseagreen4, key=1, label="HangFire.Web.FontsHandler", style=dashed];
m30_30 -> m30_31  [key=0, style=solid];
m30_31 -> m30_32  [key=0, style=solid];
m30_31 -> m30_34  [key=2, style=dotted];
m30_32 -> m30_33  [key=0, style=solid];
m30_32 -> m30_34  [key=2, style=dotted];
m30_33 -> m30_30  [color=blue, key=0, style=bold];
m30_6 -> m30_7  [key=0, style=solid];
m30_6 -> m30_8  [key=0, style=solid];
m30_6 -> m30_11  [key=2, style=dotted];
m30_8 -> m30_11  [key=2, style=dotted];
m30_8 -> m30_10  [key=0, style=solid];
m30_8 -> m30_9  [key=0, style=solid];
m30_7 -> m30_10  [key=0, style=solid];
m30_44 -> m30_45  [key=0, style=solid];
m30_45 -> m30_46  [key=0, style=solid];
m30_45 -> m30_42  [key=2, style=dotted];
m30_46 -> m30_47  [key=0, style=solid];
m30_46 -> m30_22  [key=2, style=dotted];
m30_47 -> m30_48  [key=0, style=solid];
m30_47 -> m30_30  [key=2, style=dotted];
m30_48 -> m30_49  [key=0, style=solid];
m30_48 -> m30_53  [key=2, style=dotted];
m30_48 -> m30_50  [color=darkseagreen4, key=1, label=table1, style=dashed];
m30_49 -> m30_50  [key=0, style=solid];
m30_49 -> m30_54  [key=2, style=dotted];
m30_50 -> m30_51  [key=0, style=solid];
m30_50 -> m30_43  [key=2, style=dotted];
m30_51 -> m30_52  [key=0, style=solid];
m30_51 -> m30_26  [key=2, style=dotted];
m30_52 -> m30_44  [color=blue, key=0, style=bold];
m30_72 -> m30_73  [key=0, style=solid];
m30_73 -> m30_74  [key=0, style=solid];
m30_73 -> m30_42  [key=2, style=dotted];
m30_74 -> m30_75  [key=0, style=solid];
m30_74 -> m30_22  [key=2, style=dotted];
m30_75 -> m30_76  [key=0, style=solid];
m30_75 -> m30_30  [key=2, style=dotted];
m30_76 -> m30_77  [key=0, style=solid];
m30_76 -> m30_63  [key=2, style=dotted];
m30_77 -> m30_78  [key=0, style=solid];
m30_77 -> m30_43  [key=2, style=dotted];
m30_78 -> m30_79  [key=0, style=solid];
m30_78 -> m30_26  [key=2, style=dotted];
m30_79 -> m30_72  [color=blue, key=0, style=bold];
m30_80 -> m30_81  [key=0, style=solid];
m30_81 -> m30_82  [key=0, style=solid];
m30_81 -> m30_42  [key=2, style=dotted];
m30_82 -> m30_83  [key=0, style=solid];
m30_82 -> m30_22  [key=2, style=dotted];
m30_83 -> m30_84  [key=0, style=solid];
m30_83 -> m30_30  [key=2, style=dotted];
m30_84 -> m30_85  [key=0, style=solid];
m30_84 -> m30_63  [key=2, style=dotted];
m30_85 -> m30_86  [key=0, style=solid];
m30_85 -> m30_89  [key=2, style=dotted];
m30_86 -> m30_87  [key=0, style=solid];
m30_86 -> m30_43  [key=2, style=dotted];
m30_87 -> m30_88  [key=0, style=solid];
m30_87 -> m30_26  [key=2, style=dotted];
m30_88 -> m30_80  [color=blue, key=0, style=bold];
m30_90 -> m30_91  [key=0, style=solid];
m30_91 -> m30_92  [key=0, style=solid];
m30_91 -> m30_42  [key=2, style=dotted];
m30_92 -> m30_93  [key=0, style=solid];
m30_92 -> m30_22  [key=2, style=dotted];
m30_93 -> m30_94  [key=0, style=solid];
m30_93 -> m30_30  [key=2, style=dotted];
m30_94 -> m30_95  [key=0, style=solid];
m30_94 -> m30_63  [key=2, style=dotted];
m30_95 -> m30_96  [key=0, style=solid];
m30_95 -> m30_89  [key=2, style=dotted];
m30_96 -> m30_97  [key=0, style=solid];
m30_96 -> m30_43  [key=2, style=dotted];
m30_97 -> m30_98  [key=0, style=solid];
m30_97 -> m30_26  [key=2, style=dotted];
m30_98 -> m30_90  [color=blue, key=0, style=bold];
m30_55 -> m30_56  [key=0, style=solid];
m30_56 -> m30_57  [key=0, style=solid];
m30_56 -> m30_42  [key=2, style=dotted];
m30_57 -> m30_58  [key=0, style=solid];
m30_57 -> m30_22  [key=2, style=dotted];
m30_58 -> m30_59  [key=0, style=solid];
m30_58 -> m30_30  [key=2, style=dotted];
m30_59 -> m30_60  [key=0, style=solid];
m30_59 -> m30_63  [key=2, style=dotted];
m30_60 -> m30_61  [key=0, style=solid];
m30_60 -> m30_43  [key=2, style=dotted];
m30_61 -> m30_62  [key=0, style=solid];
m30_61 -> m30_26  [key=2, style=dotted];
m30_62 -> m30_55  [color=blue, key=0, style=bold];
m30_35 -> m30_36  [key=0, style=solid];
m30_36 -> m30_37  [key=0, style=solid];
m30_36 -> m30_42  [key=2, style=dotted];
m30_37 -> m30_38  [key=0, style=solid];
m30_37 -> m30_22  [key=2, style=dotted];
m30_38 -> m30_39  [key=0, style=solid];
m30_38 -> m30_30  [key=2, style=dotted];
m30_39 -> m30_40  [key=0, style=solid];
m30_39 -> m30_43  [key=2, style=dotted];
m30_40 -> m30_41  [key=0, style=solid];
m30_40 -> m30_26  [key=2, style=dotted];
m30_41 -> m30_35  [color=blue, key=0, style=bold];
m30_64 -> m30_65  [key=0, style=solid];
m30_65 -> m30_66  [key=0, style=solid];
m30_65 -> m30_42  [key=2, style=dotted];
m30_66 -> m30_67  [key=0, style=solid];
m30_66 -> m30_22  [key=2, style=dotted];
m30_67 -> m30_68  [key=0, style=solid];
m30_67 -> m30_30  [key=2, style=dotted];
m30_68 -> m30_69  [key=0, style=solid];
m30_68 -> m30_63  [key=2, style=dotted];
m30_69 -> m30_70  [key=0, style=solid];
m30_69 -> m30_43  [key=2, style=dotted];
m30_70 -> m30_71  [key=0, style=solid];
m30_70 -> m30_26  [key=2, style=dotted];
m30_71 -> m30_64  [color=blue, key=0, style=bold];
m30_22 -> m30_23  [key=0, style=solid];
m30_22 -> m30_36  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m30_22 -> m30_45  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m30_22 -> m30_56  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m30_22 -> m30_65  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m30_22 -> m30_73  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m30_22 -> m30_81  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m30_22 -> m30_91  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m30_22 -> m30_100  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m30_23 -> m30_24  [key=0, style=solid];
m30_23 -> m30_25  [key=2, style=dotted];
m30_24 -> m30_22  [color=blue, key=0, style=bold];
m30_108 -> m30_37  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_38  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_40  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_46  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_47  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_51  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_57  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_58  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_61  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_66  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_67  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_74  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_75  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_78  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_82  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_83  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_87  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_92  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_93  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_97  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_101  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_102  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m30_108 -> m30_106  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m31_0 -> m31_1  [key=0, style=solid];
m31_0 -> m31_2  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m31_0 -> m31_3  [color=darkseagreen4, key=1, label=bool, style=dashed];
m31_1 -> m31_2  [key=0, style=solid];
m31_2 -> m31_3  [key=0, style=solid];
m31_3 -> m31_4  [key=0, style=solid];
m31_4 -> m31_0  [color=blue, key=0, style=bold];
m31_13 -> m31_14  [color=red, key=0, style=solid];
m31_13 -> m31_17  [color=darkseagreen4, key=1, label="HangFire.Server.Filters.ServerExceptionContext", style=dashed];
m31_14 -> m31_15  [color=red, key=0, style=solid];
m31_14 -> m31_11  [color=red, key=2, style=dotted];
m31_17 -> m31_18  [key=0, style=solid];
m31_15 -> m31_16  [key=0, style=solid];
m31_15 -> m31_12  [key=2, style=dotted];
m31_16 -> m31_17  [key=0, style=solid];
m31_16 -> m31_18  [key=0, style=solid];
m31_18 -> m31_13  [color=blue, key=0, style=bold];
m31_5 -> m31_6  [color=red, key=0, style=solid];
m31_5 -> m31_9  [color=darkseagreen4, key=1, label="HangFire.Client.Filters.ClientExceptionContext", style=dashed];
m31_6 -> m31_7  [color=red, key=0, style=solid];
m31_6 -> m31_11  [color=red, key=2, style=dotted];
m31_9 -> m31_10  [key=0, style=solid];
m31_7 -> m31_8  [key=0, style=solid];
m31_7 -> m31_12  [key=2, style=dotted];
m31_8 -> m31_9  [key=0, style=solid];
m31_8 -> m31_10  [key=0, style=solid];
m31_10 -> m31_5  [color=blue, key=0, style=bold];
m31_19 -> m31_1  [color=darkseagreen4, key=1, label="HangFire.Tests.TestExceptionFilter", style=dashed];
m31_19 -> m31_2  [color=darkseagreen4, key=1, label="HangFire.Tests.TestExceptionFilter", style=dashed];
m31_19 -> m31_3  [color=darkseagreen4, key=1, label="HangFire.Tests.TestExceptionFilter", style=dashed];
m31_19 -> m31_7  [color=darkseagreen4, key=1, label="HangFire.Tests.TestExceptionFilter", style=dashed];
m31_19 -> m31_8  [color=darkseagreen4, key=1, label="HangFire.Tests.TestExceptionFilter", style=dashed];
m31_19 -> m31_15  [color=darkseagreen4, key=1, label="HangFire.Tests.TestExceptionFilter", style=dashed];
m31_19 -> m31_16  [color=darkseagreen4, key=1, label="HangFire.Tests.TestExceptionFilter", style=dashed];
m32_2 -> m32_3  [key=0, style=solid];
m32_3 -> m32_2  [color=blue, key=0, style=bold];
m32_0 -> m32_1  [key=0, style=solid];
m32_1 -> m32_0  [color=blue, key=0, style=bold];
m33_11 -> m33_12  [color=red, key=0, style=solid];
m33_12 -> m33_13  [color=red, key=0, style=solid];
m33_12 -> m33_8  [color=red, key=2, style=dotted];
m33_13 -> m33_14  [key=0, style=solid];
m33_13 -> m33_9  [key=2, style=dotted];
m33_13 -> m33_10  [key=2, style=dotted];
m33_14 -> m33_11  [color=blue, key=0, style=bold];
m33_0 -> m33_1  [key=0, style=solid];
m33_0 -> m33_2  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m33_1 -> m33_2  [key=0, style=solid];
m33_2 -> m33_3  [key=0, style=solid];
m33_3 -> m33_0  [color=blue, key=0, style=bold];
m33_4 -> m33_5  [color=red, key=0, style=solid];
m33_5 -> m33_6  [color=red, key=0, style=solid];
m33_5 -> m33_8  [color=red, key=2, style=dotted];
m33_6 -> m33_7  [key=0, style=solid];
m33_6 -> m33_9  [key=2, style=dotted];
m33_6 -> m33_10  [key=2, style=dotted];
m33_7 -> m33_4  [color=blue, key=0, style=bold];
m33_15 -> m33_1  [color=darkseagreen4, key=1, label="HangFire.Tests.TestStateChangedFilter", style=dashed];
m33_15 -> m33_2  [color=darkseagreen4, key=1, label="HangFire.Tests.TestStateChangedFilter", style=dashed];
m33_15 -> m33_6  [color=darkseagreen4, key=1, label="HangFire.Tests.TestStateChangedFilter", style=dashed];
m33_15 -> m33_13  [color=darkseagreen4, key=1, label="HangFire.Tests.TestStateChangedFilter", style=dashed];
m34_0 -> m34_1  [key=0, style=solid];
m34_1 -> m34_2  [key=0, style=solid];
m34_2 -> m34_3  [key=0, style=solid];
m34_2 -> m34_10  [key=2, style=dotted];
m34_3 -> m34_4  [key=0, style=solid];
m34_3 -> m34_11  [key=2, style=dotted];
m34_4 -> m34_5  [key=0, style=solid];
m34_4 -> m34_12  [key=2, style=dotted];
m34_5 -> m34_6  [key=0, style=solid];
m34_5 -> m34_11  [key=2, style=dotted];
m34_6 -> m34_7  [key=0, style=solid];
m34_7 -> m34_8  [key=0, style=solid];
m34_8 -> m34_9  [key=0, style=solid];
m34_8 -> m34_11  [key=2, style=dotted];
m34_9 -> m34_0  [color=blue, key=0, style=bold];
m34_13 -> m34_1  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m34_13 -> m34_2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m34_13 -> m34_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m34_13 -> m34_4  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m34_13 -> m34_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m34_13 -> m34_6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m34_13 -> m34_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m34_13 -> m34_8  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m35_42 -> m35_43  [key=0, style=solid];
m35_43 -> m35_44  [key=0, style=solid];
m35_43 -> m35_38  [key=2, style=dotted];
m35_44 -> m35_45  [key=0, style=solid];
m35_44 -> m35_22  [key=2, style=dotted];
m35_45 -> m35_46  [key=0, style=solid];
m35_45 -> m35_39  [key=2, style=dotted];
m35_46 -> m35_47  [key=0, style=solid];
m35_46 -> m35_40  [key=2, style=dotted];
m35_47 -> m35_48  [key=0, style=solid];
m35_47 -> m35_41  [key=2, style=dotted];
m35_48 -> m35_49  [key=0, style=solid];
m35_48 -> m35_51  [key=2, style=dotted];
m35_49 -> m35_50  [key=0, style=solid];
m35_49 -> m35_26  [key=2, style=dotted];
m35_50 -> m35_42  [color=blue, key=0, style=bold];
m35_18 -> m35_19  [key=0, style=solid];
m35_19 -> m35_20  [key=0, style=solid];
m35_19 -> m35_21  [key=2, style=dotted];
m35_20 -> m35_18  [color=blue, key=0, style=bold];
m35_26 -> m35_27  [color=green, key=0, style=solid];
m35_27 -> m35_28  [color=green, key=0, style=solid];
m35_27 -> m35_29  [color=green, key=2, style=dotted];
m35_28 -> m35_26  [color=blue, key=0, style=bold];
m35_81 -> m35_82  [key=0, style=solid];
m35_82 -> m35_83  [key=0, style=solid];
m35_82 -> m35_38  [key=2, style=dotted];
m35_83 -> m35_84  [key=0, style=solid];
m35_83 -> m35_22  [key=2, style=dotted];
m35_84 -> m35_85  [key=0, style=solid];
m35_84 -> m35_39  [key=2, style=dotted];
m35_85 -> m35_86  [key=0, style=solid];
m35_85 -> m35_40  [key=2, style=dotted];
m35_86 -> m35_87  [key=0, style=solid];
m35_86 -> m35_41  [key=2, style=dotted];
m35_87 -> m35_88  [key=0, style=solid];
m35_87 -> m35_26  [key=2, style=dotted];
m35_88 -> m35_81  [color=blue, key=0, style=bold];
m35_30 -> m35_31  [color=green, key=0, style=solid];
m35_31 -> m35_32  [color=green, key=0, style=solid];
m35_31 -> m35_38  [color=green, key=2, style=dotted];
m35_32 -> m35_33  [key=0, style=solid];
m35_32 -> m35_22  [key=2, style=dotted];
m35_33 -> m35_34  [key=0, style=solid];
m35_33 -> m35_39  [key=2, style=dotted];
m35_34 -> m35_35  [key=0, style=solid];
m35_34 -> m35_40  [key=2, style=dotted];
m35_35 -> m35_36  [key=0, style=solid];
m35_35 -> m35_41  [key=2, style=dotted];
m35_36 -> m35_37  [key=0, style=solid];
m35_36 -> m35_26  [key=2, style=dotted];
m35_37 -> m35_30  [color=blue, key=0, style=bold];
m35_52 -> m35_53  [key=0, style=solid];
m35_53 -> m35_54  [key=0, style=solid];
m35_53 -> m35_38  [key=2, style=dotted];
m35_54 -> m35_55  [key=0, style=solid];
m35_54 -> m35_22  [key=2, style=dotted];
m35_55 -> m35_56  [key=0, style=solid];
m35_55 -> m35_39  [key=2, style=dotted];
m35_56 -> m35_57  [key=0, style=solid];
m35_56 -> m35_40  [key=2, style=dotted];
m35_57 -> m35_58  [key=0, style=solid];
m35_57 -> m35_41  [key=2, style=dotted];
m35_58 -> m35_59  [key=0, style=solid];
m35_58 -> m35_51  [key=2, style=dotted];
m35_59 -> m35_60  [key=0, style=solid];
m35_59 -> m35_26  [key=2, style=dotted];
m35_60 -> m35_52  [color=blue, key=0, style=bold];
m35_89 -> m35_90  [key=0, style=solid];
m35_90 -> m35_91  [key=0, style=solid];
m35_90 -> m35_38  [key=2, style=dotted];
m35_91 -> m35_92  [key=0, style=solid];
m35_91 -> m35_22  [key=2, style=dotted];
m35_92 -> m35_93  [key=0, style=solid];
m35_92 -> m35_39  [key=2, style=dotted];
m35_93 -> m35_94  [key=0, style=solid];
m35_93 -> m35_102  [key=2, style=dotted];
m35_93 -> m35_95  [color=darkseagreen4, key=1, label=table1, style=dashed];
m35_93 -> m35_96  [color=darkseagreen4, key=1, label=table1, style=dashed];
m35_94 -> m35_95  [key=0, style=solid];
m35_94 -> m35_103  [key=2, style=dotted];
m35_95 -> m35_96  [key=0, style=solid];
m35_95 -> m35_103  [key=2, style=dotted];
m35_96 -> m35_97  [key=0, style=solid];
m35_96 -> m35_51  [key=2, style=dotted];
m35_97 -> m35_98  [key=0, style=solid];
m35_97 -> m35_40  [key=2, style=dotted];
m35_98 -> m35_99  [key=0, style=solid];
m35_98 -> m35_41  [key=2, style=dotted];
m35_99 -> m35_100  [color=green, key=0, style=solid];
m35_99 -> m35_51  [key=2, style=dotted];
m35_100 -> m35_101  [color=green, key=0, style=solid];
m35_100 -> m35_26  [color=green, key=2, style=dotted];
m35_101 -> m35_89  [color=blue, key=0, style=bold];
m35_71 -> m35_72  [key=0, style=solid];
m35_72 -> m35_73  [key=0, style=solid];
m35_72 -> m35_38  [key=2, style=dotted];
m35_73 -> m35_74  [key=0, style=solid];
m35_73 -> m35_22  [key=2, style=dotted];
m35_74 -> m35_75  [key=0, style=solid];
m35_74 -> m35_39  [key=2, style=dotted];
m35_75 -> m35_76  [key=0, style=solid];
m35_75 -> m35_51  [key=2, style=dotted];
m35_76 -> m35_77  [key=0, style=solid];
m35_76 -> m35_40  [key=2, style=dotted];
m35_77 -> m35_78  [key=0, style=solid];
m35_77 -> m35_41  [key=2, style=dotted];
m35_78 -> m35_79  [key=0, style=solid];
m35_78 -> m35_70  [key=2, style=dotted];
m35_79 -> m35_80  [key=0, style=solid];
m35_79 -> m35_26  [key=2, style=dotted];
m35_80 -> m35_71  [color=blue, key=0, style=bold];
m35_0 -> m35_1  [color=green, key=0, style=solid];
m35_0 -> m35_16  [color=red, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m35_1 -> m35_2  [color=green, key=0, style=solid];
m35_1 -> m35_5  [color=green, key=2, style=dotted];
m35_2 -> m35_3  [color=green, key=0, style=solid];
m35_2 -> m35_6  [color=green, key=2, style=dotted];
m35_2 -> m35_7  [color=green, key=2, style=dotted];
m35_3 -> m35_4  [key=0, style=solid];
m35_3 -> m35_8  [key=2, style=dotted];
m35_4 -> m35_0  [color=blue, key=0, style=bold];
m35_9 -> m35_10  [key=0, style=solid];
m35_10 -> m35_11  [key=0, style=solid];
m35_10 -> m35_13  [key=2, style=dotted];
m35_11 -> m35_12  [key=0, style=solid];
m35_12 -> m35_9  [color=blue, key=0, style=bold];
m35_61 -> m35_62  [key=0, style=solid];
m35_62 -> m35_63  [key=0, style=solid];
m35_62 -> m35_38  [key=2, style=dotted];
m35_63 -> m35_64  [key=0, style=solid];
m35_63 -> m35_22  [key=2, style=dotted];
m35_64 -> m35_65  [key=0, style=solid];
m35_64 -> m35_39  [key=2, style=dotted];
m35_65 -> m35_66  [key=0, style=solid];
m35_65 -> m35_40  [key=2, style=dotted];
m35_66 -> m35_67  [key=0, style=solid];
m35_66 -> m35_41  [key=2, style=dotted];
m35_67 -> m35_68  [key=0, style=solid];
m35_67 -> m35_70  [key=2, style=dotted];
m35_68 -> m35_69  [key=0, style=solid];
m35_68 -> m35_26  [key=2, style=dotted];
m35_69 -> m35_61  [color=blue, key=0, style=bold];
m35_22 -> m35_23  [key=0, style=solid];
m35_22 -> m35_31  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m35_22 -> m35_43  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m35_22 -> m35_53  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m35_22 -> m35_62  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m35_22 -> m35_72  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m35_22 -> m35_82  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m35_22 -> m35_90  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m35_23 -> m35_24  [key=0, style=solid];
m35_23 -> m35_25  [key=2, style=dotted];
m35_24 -> m35_22  [color=blue, key=0, style=bold];
m35_14 -> m35_15  [color=red, key=0, style=solid];
m35_15 -> m35_16  [color=red, key=0, style=solid];
m35_15 -> m35_17  [color=red, key=0, style=solid];
m35_16 -> m35_17  [color=red, key=0, style=solid];
m35_16 -> m35_0  [color=red, key=2, style=dotted];
m35_17 -> m35_14  [color=blue, key=0, style=bold];
m35_104 -> m35_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_44  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_49  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_54  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_59  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_63  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_68  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_73  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_79  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_83  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_87  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_91  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m35_104 -> m35_100  [color=green, key=1, label="HangFire.Tests.Server.WorkerManagerFeature", style=dashed];
m36_2 -> m36_3  [key=0, style=solid];
m36_3 -> m36_4  [key=0, style=solid];
m36_3 -> m36_5  [key=2, style=dotted];
m36_3 -> m36_6  [key=2, style=dotted];
m36_4 -> m36_2  [color=blue, key=0, style=bold];
m36_42 -> m36_43  [key=0, style=solid];
m36_42 -> m36_45  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m36_42 -> m36_46  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m36_42 -> m36_55  [color=darkseagreen4, key=1, label=string, style=dashed];
m36_42 -> m36_47  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m36_42 -> m36_59  [color=darkseagreen4, key=1, label=string, style=dashed];
m36_42 -> m36_48  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m36_42 -> m36_62  [color=darkseagreen4, key=1, label=string, style=dashed];
m36_43 -> m36_44  [key=0, style=solid];
m36_43 -> m36_45  [key=0, style=solid];
m36_45 -> m36_46  [key=0, style=solid];
m36_45 -> m36_18  [key=2, style=dotted];
m36_45 -> m36_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_46 -> m36_47  [key=0, style=solid];
m36_46 -> m36_18  [key=2, style=dotted];
m36_46 -> m36_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_47 -> m36_48  [key=0, style=solid];
m36_47 -> m36_18  [key=2, style=dotted];
m36_47 -> m36_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_48 -> m36_49  [key=0, style=solid];
m36_48 -> m36_18  [key=2, style=dotted];
m36_48 -> m36_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_44 -> m36_49  [key=0, style=solid];
m36_44 -> m36_17  [key=2, style=dotted];
m36_49 -> m36_42  [color=blue, key=0, style=bold];
m36_12 -> m36_13  [key=0, style=solid];
m36_12 -> m36_18  [key=2, style=dotted];
m36_12 -> m36_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_7 -> m36_8  [key=0, style=solid];
m36_7 -> m36_10  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m36_7 -> m36_11  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m36_7 -> m36_12  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m36_7 -> m36_13  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m36_7 -> m36_14  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m36_7 -> m36_15  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m36_8 -> m36_9  [key=0, style=solid];
m36_8 -> m36_10  [key=0, style=solid];
m36_10 -> m36_11  [key=0, style=solid];
m36_10 -> m36_18  [key=2, style=dotted];
m36_10 -> m36_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_11 -> m36_12  [key=0, style=solid];
m36_11 -> m36_18  [key=2, style=dotted];
m36_11 -> m36_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_13 -> m36_14  [key=0, style=solid];
m36_13 -> m36_18  [key=2, style=dotted];
m36_13 -> m36_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_14 -> m36_15  [key=0, style=solid];
m36_14 -> m36_18  [key=2, style=dotted];
m36_14 -> m36_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_15 -> m36_16  [key=0, style=solid];
m36_15 -> m36_18  [key=2, style=dotted];
m36_15 -> m36_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m36_9 -> m36_16  [key=0, style=solid];
m36_9 -> m36_17  [key=2, style=dotted];
m36_16 -> m36_7  [color=blue, key=0, style=bold];
m36_0 -> m36_1  [key=0, style=solid];
m36_1 -> m36_0  [color=blue, key=0, style=bold];
m36_61 -> m36_62  [key=0, style=solid];
m36_19 -> m36_20  [key=0, style=solid];
m36_24 -> m36_25  [key=0, style=solid];
m36_27 -> m36_28  [key=0, style=solid];
m36_30 -> m36_31  [key=0, style=solid];
m36_34 -> m36_35  [key=0, style=solid];
m36_38 -> m36_39  [key=0, style=solid];
m36_20 -> m36_21  [key=0, style=solid];
m36_20 -> m36_22  [key=2, style=dotted];
m36_20 -> m36_23  [key=2, style=dotted];
m36_21 -> m36_19  [color=blue, key=0, style=bold];
m36_25 -> m36_26  [key=0, style=solid];
m36_25 -> m36_22  [key=2, style=dotted];
m36_25 -> m36_23  [key=2, style=dotted];
m36_26 -> m36_24  [color=blue, key=0, style=bold];
m36_28 -> m36_29  [key=0, style=solid];
m36_28 -> m36_22  [key=2, style=dotted];
m36_28 -> m36_23  [key=2, style=dotted];
m36_29 -> m36_27  [color=blue, key=0, style=bold];
m36_31 -> m36_32  [key=0, style=solid];
m36_31 -> m36_33  [key=2, style=dotted];
m36_32 -> m36_30  [color=blue, key=0, style=bold];
m36_35 -> m36_36  [key=0, style=solid];
m36_35 -> m36_37  [key=2, style=dotted];
m36_36 -> m36_34  [color=blue, key=0, style=bold];
m36_39 -> m36_40  [key=0, style=solid];
m36_39 -> m36_41  [key=2, style=dotted];
m36_40 -> m36_38  [color=blue, key=0, style=bold];
m36_55 -> m36_56  [key=0, style=solid];
m36_55 -> m36_22  [key=2, style=dotted];
m36_55 -> m36_57  [key=2, style=dotted];
m36_59 -> m36_60  [key=0, style=solid];
m36_59 -> m36_22  [key=2, style=dotted];
m36_59 -> m36_57  [key=2, style=dotted];
m36_62 -> m36_63  [key=0, style=solid];
m36_62 -> m36_22  [key=2, style=dotted];
m36_62 -> m36_57  [key=2, style=dotted];
m36_50 -> m36_51  [key=0, style=solid];
m36_54 -> m36_55  [key=0, style=solid];
m36_58 -> m36_59  [key=0, style=solid];
m36_51 -> m36_52  [key=0, style=solid];
m36_51 -> m36_53  [key=2, style=dotted];
m36_52 -> m36_50  [color=blue, key=0, style=bold];
m36_56 -> m36_54  [color=blue, key=0, style=bold];
m36_60 -> m36_58  [color=blue, key=0, style=bold];
m36_63 -> m36_61  [color=blue, key=0, style=bold];
m36_64 -> m36_10  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m36_64 -> m36_20  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m36_64 -> m36_11  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m36_64 -> m36_25  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m36_64 -> m36_12  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m36_64 -> m36_28  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m36_64 -> m36_13  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m36_64 -> m36_31  [color=darkseagreen4, key=1, label="HangFire.States.SucceededState", style=dashed];
m36_65 -> m36_55  [color=darkseagreen4, key=1, label=string, style=dashed];
m36_65 -> m36_59  [color=darkseagreen4, key=1, label=string, style=dashed];
m36_65 -> m36_62  [color=darkseagreen4, key=1, label=string, style=dashed];
}
