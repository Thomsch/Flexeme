digraph  {
n94 [label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts", span=""];
n95 [label=queue, span=""];
n96 [label=token, span=""];
n0 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", span="12-12"];
n1 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", label="_token = new CancellationToken()", span="14-14"];
n2 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", span="12-12"];
n3 [cluster="System.Threading.CancellationToken.CancellationToken()", label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0"];
n4 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", span="18-18"];
n5 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new MsmqJobQueue(null, MsmqTransactionType.Internal))", span="20-21"];
n6 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", label="Assert.Equal(''pathPattern'', exception.ParamName)", span="23-23"];
n8 [cluster="Unk.>", label="Entry Unk.>", span=""];
n10 [cluster="lambda expression", label="Entry lambda expression", span="21-21"];
n7 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", span="18-18"];
n9 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n11 [cluster="lambda expression", label="new MsmqJobQueue(null, MsmqTransactionType.Internal)", span="21-21"];
n12 [cluster="lambda expression", label="Exit lambda expression", span="21-21"];
n13 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueue.MsmqJobQueue(string, Hangfire.SqlServer.Msmq.MsmqTransactionType)", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueue.MsmqJobQueue(string, Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="32-32"];
n14 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", span="27-27"];
n15 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="30-30"];
n26 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="138-138"];
n17 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", label="var messageQueue = CleanMsmqQueueAttribute.GetMessageQueue(''my-queue'')", span="36-36"];
n27 [cluster="Unk.Enqueue", label="Entry Unk.Enqueue", span=""];
n18 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", label="var transaction = new MessageQueueTransaction()", span="37-37"];
n28 [cluster="Hangfire.Msmq.Tests.CleanMsmqQueueAttribute.GetMessageQueue(string)", label="Entry Hangfire.Msmq.Tests.CleanMsmqQueueAttribute.GetMessageQueue(string)", span="45-45"];
n20 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", label="var message = messageQueue.Receive(TimeSpan.FromSeconds(5), transaction)", span="41-41"];
n19 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", label="transaction.Begin()", span="39-39"];
n29 [cluster="MessageQueueTransaction.cstr", label="Entry MessageQueueTransaction.cstr", span=""];
n24 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", label="transaction.Commit()", span="47-47"];
n30 [cluster="Unk.Begin", label="Entry Unk.Begin", span=""];
n21 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", label="message.Formatter = new BinaryMessageFormatter()", span="42-42"];
n31 [cluster="System.TimeSpan.FromSeconds(double)", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
n32 [cluster="Unk.Receive", label="Entry Unk.Receive", span=""];
n22 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", label="Assert.Equal(''job-id'', message.Body)", span="44-44"];
n33 [cluster="BinaryMessageFormatter.cstr", label="Entry BinaryMessageFormatter.cstr", span=""];
n23 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", label="Assert.Equal(''job-id'', message.Label)", span="45-45"];
n25 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", span="27-27"];
n34 [cluster="Unk.Commit", label="Entry Unk.Commit", span=""];
n35 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", span="52-52"];
n36 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", label="MsmqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="54-54"];
n37 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="55-55"];
n41 [cluster="Hangfire.Msmq.Tests.MsmqUtils.EnqueueJobId(string, string)", label="Entry Hangfire.Msmq.Tests.MsmqUtils.EnqueueJobId(string, string)", span="7-7"];
n38 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="57-57"];
n39 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", label="Assert.Equal(''job-id'', fetchedJob.JobId)", span="59-59"];
n42 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="43-43"];
n40 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", span="52-52"];
n43 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="63-63"];
n44 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="65-65"];
n45 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", label="var token = new CancellationToken(true)", span="66-66"];
n46 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", label="Assert.Throws<OperationCanceledException>(\r\n                () => queue.Dequeue(new[] { ''my-queue'' }, token))", span="68-69"];
n50 [cluster="lambda expression", label="queue.Dequeue(new[] { ''my-queue'' }, token)", span="69-69"];
n48 [cluster="System.Threading.CancellationToken.CancellationToken(bool)", label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0"];
n47 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="63-63"];
n49 [cluster="lambda expression", label="Entry lambda expression", span="69-69"];
n51 [cluster="lambda expression", label="Exit lambda expression", span="69-69"];
n52 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="73-73"];
n53 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", label="MsmqUtils.EnqueueJobId(''queue-2'', ''job-id'')", span="75-75"];
n54 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="76-76"];
n55 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", label="var fetchedJob = queue.Dequeue(new[] { ''queue-1'', ''queue-2'' }, _token)", span="78-78"];
n56 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", label="Assert.Equal(''job-id'', fetchedJob.JobId)", span="80-80"];
n57 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="73-73"];
n58 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", span="84-84"];
n59 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", label="MsmqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="87-87"];
n60 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="88-88"];
n61 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="91-91"];
n62 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", label="Assert.NotNull(fetchedJob)", span="94-94"];
n63 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", label="var exception = Assert.Throws<MessageQueueException>(\r\n                () => MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1)))", span="96-97"];
n66 [cluster="Unk.NotNull", label="Entry Unk.NotNull", span=""];
n64 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", label="Assert.Equal(MessageQueueErrorCode.IOTimeout, exception.MessageQueueErrorCode)", span="99-99"];
n67 [cluster="lambda expression", label="Entry lambda expression", span="97-97"];
n65 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", span="84-84"];
n68 [cluster="lambda expression", label="MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1))", span="97-97"];
n69 [cluster="lambda expression", label="Exit lambda expression", span="97-97"];
n70 [cluster="Hangfire.Msmq.Tests.MsmqUtils.DequeueJobId(string, System.TimeSpan)", label="Entry Hangfire.Msmq.Tests.MsmqUtils.DequeueJobId(string, System.TimeSpan)", span="19-19"];
n71 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", span="103-103"];
n72 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", label="MsmqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="106-106"];
n73 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="107-107"];
n74 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="110-110"];
n75 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", label="fetchedJob.RemoveFromQueue()", span="112-112"];
n76 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", label="var exception = Assert.Throws<MessageQueueException>(\r\n                () => MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5)))", span="116-117"];
n79 [cluster="Hangfire.Storage.IFetchedJob.RemoveFromQueue()", label="Entry Hangfire.Storage.IFetchedJob.RemoveFromQueue()", span="24-24"];
n77 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", label="Assert.Equal(MessageQueueErrorCode.IOTimeout, exception.MessageQueueErrorCode)", span="119-119"];
n80 [cluster="lambda expression", label="Entry lambda expression", span="117-117"];
n78 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", span="103-103"];
n81 [cluster="lambda expression", label="MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5))", span="117-117"];
n82 [cluster="lambda expression", label="Exit lambda expression", span="117-117"];
n83 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="123-123"];
n84 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", label="MsmqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="126-126"];
n85 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="127-127"];
n86 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="130-130"];
n87 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", label="fetchedJob.Dispose()", span="131-131"];
n88 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", label="var jobId = MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5))", span="134-134"];
n91 [cluster="System.IDisposable.Dispose()", label="Entry System.IDisposable.Dispose()", span="0-0"];
n89 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", label="Assert.Equal(''job-id'', jobId)", span="135-135"];
n90 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="123-123"];
n92 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", label="return new MsmqJobQueue(CleanMsmqQueueAttribute.PathPattern, transactionType);", span="140-140"];
n93 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="138-138"];
m0_5 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="MsmqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", span="29-29"];
m0_14 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="MsmqJobQueueProviderFacts.cs", label="return new MsmqJobQueueProvider(\r\n                CleanMsmqQueueAttribute.PathPattern,\r\n                Queues,\r\n                MsmqTransactionType.Internal);", span="31-34"];
m0_15 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="MsmqJobQueueProviderFacts.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", span="29-29"];
m0_0 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="10-10"];
m0_1 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="var provider = CreateProvider()", span="12-12"];
m0_2 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", color=green, community=0, file="MsmqJobQueueProviderFacts.cs", label="var jobQueue = provider.GetJobQueue()", prediction=0, span="14-14"];
m0_3 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Assert.NotNull(jobQueue)", span="16-16"];
m0_4 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="10-10"];
m0_6 [cluster="Unk.GetJobQueue", file="MsmqJobQueueProviderFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m0_8 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="20-20"];
m0_9 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="var provider = CreateProvider()", span="22-22"];
m0_10 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="MsmqJobQueueProviderFacts.cs", label="var monitoring = provider.GetJobQueueMonitoringApi()", prediction=1, span="24-24"];
m0_11 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Assert.NotNull(monitoring)", span="26-26"];
m0_12 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="20-20"];
m0_16 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="MsmqJobQueueProviderFacts.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="26-26"];
m0_13 [cluster="Unk.GetJobQueueMonitoringApi", file="MsmqJobQueueProviderFacts.cs", label="Entry Unk.GetJobQueueMonitoringApi", span=""];
m1_6 [cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.SucceededStateHandlerFacts()", file="RabbitMqJobQueueFacts.cs", label="var stateChangingContext = new StateChangingContext(\r\n                stateContext, stateMock.Object, ''Old'', connectionMock.Object)", span="27-28"];
m1_7 [cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.SucceededStateHandlerFacts()", file="RabbitMqJobQueueFacts.cs", label="_context = new StateApplyingContext(stateChangingContext)", span="30-30"];
m1_8 [cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.SucceededStateHandlerFacts()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Core.Tests.States.SucceededStateHandlerFacts.SucceededStateHandlerFacts()", span="18-18"];
m1_121 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn))", span="126-126"];
m1_119 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="123-123"];
m1_120 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.DecrementValue(RedisStorage.Prefix + key))", span="125-125"];
m1_122 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="123-123"];
m1_5 [cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.SucceededStateHandlerFacts()", file="RabbitMqJobQueueFacts.cs", label="var connectionMock = new Mock<IStorageConnection>()", span="26-26"];
m1_83 [cluster="Unk.EnqueueItemOnList", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m1_57 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RabbitMqJobQueueFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m1_149 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", span="147-147"];
m1_150 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                RedisStorage.Prefix + key, value))", span="149-150"];
m1_151 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", span="147-147"];
m1_70 [cluster="Unk.SetRangeInHash", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.SetRangeInHash", span=""];
m1_104 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn))", span="115-115"];
m1_102 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="112-112"];
m1_103 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.IncrementValue(RedisStorage.Prefix + key))", span="114-114"];
m1_105 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="112-112"];
m1_27 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="36-38"];
m1_162 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", span="159-159"];
m1_163 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.TrimList(\r\n                RedisStorage.Prefix + key, keepStartingFrom, keepEndingAt))", span="162-163"];
m1_164 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", span="159-159"];
m1_55 [cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="27-27"];
m1_13 [cluster="Unk.Commit", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.Commit", span=""];
m1_62 [cluster="Unk.SetEntryInHash", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.SetEntryInHash", span=""];
m1_91 [cluster="Unk.AddItemToSet", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.AddItemToSet", span=""];
m1_22 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="32-34"];
m1_23 [cluster="string.Format(string, object)", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Entry string.Format(string, object)", prediction=2, span="0-0"];
m1_24 [cluster="Unk.ExpireEntryIn", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.ExpireEntryIn", span=""];
m1_25 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="36-38"];
m1_26 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                expireIn)", span="36-38"];
m1_12 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="25-25"];
m1_182 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                RedisStorage.Prefix + key, expireIn))", span="179-180"];
m1_181 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="177-177"];
m1_183 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="177-177"];
m1_9 [cluster="Unk.Dispose", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.Dispose", span=""];
m1_66 [cluster="Unk.RemoveEntry", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.RemoveEntry", span=""];
m1_101 [cluster="Unk.IncrementValue", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.IncrementValue", span=""];
m1_10 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="25-25"];
m1_31 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", span="45-45"];
m1_32 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId)))", span="47-48"];
m1_33 [cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.Unapply_ShouldDecrementStatistics()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Core.Tests.States.SucceededStateHandlerFacts.Unapply_ShouldDecrementStatistics()", span="50-50"];
m1_34 [cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.Unapply_ShouldDecrementStatistics()", file="RabbitMqJobQueueFacts.cs", label="var handler = new SucceededState.Handler()", span="52-52"];
m1_35 [cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.Unapply_ShouldDecrementStatistics()", file="RabbitMqJobQueueFacts.cs", label="handler.Unapply(_context, _transactionMock.Object)", span="53-53"];
m1_36 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="47-48"];
m1_37 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId))", span="47-48"];
m1_135 [cluster="Unk.AddItemToSortedSet", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m1_112 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", span="118-118"];
m1_113 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.DecrementValue(RedisStorage.Prefix + key))", span="120-120"];
m1_114 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", span="118-118"];
m1_129 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", span="129-129"];
m1_130 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value))", span="131-132"];
m1_131 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", span="129-129"];
m1_42 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="49-50"];
m1_142 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", span="141-141"];
m1_143 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.RemoveItemFromSortedSet(\r\n                RedisStorage.Prefix + key, value))", span="143-144"];
m1_144 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", span="141-141"];
m1_14 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="30-30"];
m1_56 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="RabbitMqJobQueueFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0"];
m1_58 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="82-82"];
m1_71 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="var stateData = state.GetData(method)", span="84-84"];
m1_73 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="storedData.Add(''State'', state.StateName)", span="89-89"];
m1_74 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="storedData.Add(''Reason'', state.Reason)", span="90-90"];
m1_76 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                JobHelper.ToJson(storedData)))", span="93-95"];
m1_72 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="var storedData = new Dictionary<string, string>(stateData)", span="88-88"];
m1_75 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="storedData.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="91-91"];
m1_77 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="82-82"];
m1_15 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                expireIn))", span="32-34"];
m1_38 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="47-48"];
m1_11 [cluster="HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", span="27-27"];
m1_169 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", span="166-166"];
m1_170 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.IncrementValue(\r\n                RedisStorage.Prefix + key))", span="168-169"];
m1_171 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", span="166-166"];
m1_39 [cluster="Unk.Persist", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.Persist", span=""];
m1_21 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                expireIn)", span="32-34"];
m1_20 [cluster="HangFire.States.SucceededState.Handler.Handler()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.States.SucceededState.Handler.Handler()", span="38-38"];
m1_28 [cluster="Unk.Verify", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.Verify", span=""];
m1_30 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="40-42"];
m1_41 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="55-55"];
m1_44 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId))", span="51-52"];
m1_40 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.DecrementCounter(''stats:succeeded'')", span="55-55"];
m1_43 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="51-52"];
m1_45 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="HangFire.Core.Tests.States.SucceededStateHandlerFacts", span=""];
m1_60 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''State'',\r\n                state.StateName)", span="58-61"];
m1_64 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.RemoveEntry(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId))", span="63-64"];
m1_68 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.SetRangeInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                storedData)", span="75-77"];
m1_59 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="58-61"];
m1_63 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="63-64"];
m1_67 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="75-77"];
m1_61 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="58-61"];
m1_65 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="63-64"];
m1_69 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="75-77"];
m1_80 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                JobHelper.ToJson(storedData))", span="93-95"];
m1_79 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="93-95"];
m1_81 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="93-95"];
m1_89 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.AddItemToSet(\r\n                RedisStorage.Prefix + ''queues'', queue)", span="100-101"];
m1_93 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''queue:{0}'', queue), jobId)", span="103-104"];
m1_88 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="100-101"];
m1_92 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="103-104"];
m1_90 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="100-101"];
m1_94 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="103-104"];
m1_99 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.IncrementValue(RedisStorage.Prefix + key)", span="109-109"];
m1_98 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="109-109"];
m1_100 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="109-109"];
m1_107 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.IncrementValue(RedisStorage.Prefix + key)", span="114-114"];
m1_110 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn)", span="115-115"];
m1_106 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="114-114"];
m1_109 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="115-115"];
m1_108 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="114-114"];
m1_111 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="115-115"];
m1_116 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.DecrementValue(RedisStorage.Prefix + key)", span="120-120"];
m1_115 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="120-120"];
m1_117 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="120-120"];
m1_124 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.DecrementValue(RedisStorage.Prefix + key)", span="125-125"];
m1_127 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn)", span="126-126"];
m1_123 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="125-125"];
m1_126 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="126-126"];
m1_125 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="125-125"];
m1_128 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="126-126"];
m1_133 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value)", span="131-132"];
m1_132 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="131-132"];
m1_134 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="131-132"];
m1_140 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value, score)", span="137-138"];
m1_139 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="137-138"];
m1_141 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="137-138"];
m1_146 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.RemoveItemFromSortedSet(\r\n                RedisStorage.Prefix + key, value)", span="143-144"];
m1_145 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="143-144"];
m1_147 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="143-144"];
m1_153 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.EnqueueItemOnList(\r\n                RedisStorage.Prefix + key, value)", span="149-150"];
m1_152 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="149-150"];
m1_154 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="149-150"];
m1_159 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.RemoveItemFromList(\r\n                RedisStorage.Prefix + key, value)", span="155-156"];
m1_158 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="155-156"];
m1_160 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="155-156"];
m1_166 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.TrimList(\r\n                RedisStorage.Prefix + key, keepStartingFrom, keepEndingAt)", span="162-163"];
m1_165 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="162-163"];
m1_167 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="162-163"];
m1_173 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.IncrementValue(\r\n                RedisStorage.Prefix + key)", span="168-169"];
m1_172 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="168-169"];
m1_174 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="168-169"];
m1_179 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.DecrementValue(RedisStorage.Prefix + key)", span="174-174"];
m1_178 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="174-174"];
m1_180 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="174-174"];
m1_185 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="x.ExpireEntryIn(\r\n                RedisStorage.Prefix + key, expireIn)", span="179-180"];
m1_184 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="179-180"];
m1_186 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="179-180"];
m1_136 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", span="135-135"];
m1_137 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value, score))", span="137-138"];
m1_138 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", span="135-135"];
m1_78 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m1_175 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", span="172-172"];
m1_176 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.DecrementValue(RedisStorage.Prefix + key))", span="174-174"];
m1_177 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", span="172-172"];
m1_95 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", span="107-107"];
m1_96 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.IncrementValue(RedisStorage.Prefix + key))", span="109-109"];
m1_97 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", span="107-107"];
m1_161 [cluster="Unk.RemoveItemFromList", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.RemoveItemFromList", span=""];
m1_16 [cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.ShouldWorkOnlyWithSucceededState()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Core.Tests.States.SucceededStateHandlerFacts.ShouldWorkOnlyWithSucceededState()", span="34-34"];
m1_18 [cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.ShouldWorkOnlyWithSucceededState()", file="RabbitMqJobQueueFacts.cs", label="Assert.Equal(SucceededState.Name, handler.StateName)", span="37-37"];
m1_84 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="98-98"];
m1_85 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.AddItemToSet(\r\n                RedisStorage.Prefix + ''queues'', queue))", span="100-101"];
m1_86 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''queue:{0}'', queue), jobId))", span="103-104"];
m1_87 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="98-98"];
m1_19 [cluster="Unk.QueueCommand", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.QueueCommand", span=""];
m1_82 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m1_0 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", span="13-13"];
m1_3 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RabbitMqJobQueueFacts.cs", label="_transaction = transaction", span="17-17"];
m1_4 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", span="13-13"];
m1_2 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RabbitMqJobQueueFacts.cs", label="throw new ArgumentNullException(''transaction'');", span="15-15"];
m1_1 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RabbitMqJobQueueFacts.cs", label="transaction == null", span="15-15"];
m1_48 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.RemoveEntry(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId)))", span="63-64"];
m1_46 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="55-55"];
m1_47 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''State'',\r\n                state.StateName))", span="58-61"];
m1_49 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="var stateData = state.GetData(method)", span="66-66"];
m1_51 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="storedData.Add(''State'', state.StateName)", span="73-73"];
m1_52 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.SetRangeInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                storedData))", span="75-77"];
m1_53 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="AddJobState(jobId, state, method)", span="79-79"];
m1_50 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="var storedData = new Dictionary<string, string>(stateData)", span="72-72"];
m1_54 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="55-55"];
m1_118 [cluster="Unk.DecrementValue", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.DecrementValue", span=""];
m1_168 [cluster="Unk.TrimList", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.TrimList", span=""];
m1_155 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", span="153-153"];
m1_156 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RabbitMqJobQueueFacts.cs", label="_transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                RedisStorage.Prefix + key, value))", span="155-156"];
m1_157 [cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", span="153-153"];
m1_148 [cluster="Unk.RemoveItemFromSortedSet", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.RemoveItemFromSortedSet", span=""];
m1_187 [file="RabbitMqJobQueueFacts.cs", label="HangFire.Redis.RedisWriteOnlyTransaction", span=""];
m1_188 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_189 [file="RabbitMqJobQueueFacts.cs", label="System.TimeSpan", span=""];
m1_190 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_191 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_192 [file="RabbitMqJobQueueFacts.cs", label="HangFire.Common.States.JobState", span=""];
m1_193 [file="RabbitMqJobQueueFacts.cs", label=storedData, span=""];
m1_194 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_195 [file="RabbitMqJobQueueFacts.cs", label=storedData, span=""];
m1_196 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_197 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_198 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_199 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_200 [file="RabbitMqJobQueueFacts.cs", label="System.TimeSpan", span=""];
m1_201 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_202 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_203 [file="RabbitMqJobQueueFacts.cs", label="System.TimeSpan", span=""];
m1_204 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_205 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_206 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_207 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_208 [file="RabbitMqJobQueueFacts.cs", label=double, span=""];
m1_209 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_210 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_211 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_212 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_213 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_214 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_215 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_216 [file="RabbitMqJobQueueFacts.cs", label=int, span=""];
m1_217 [file="RabbitMqJobQueueFacts.cs", label=int, span=""];
m1_218 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_219 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_220 [file="RabbitMqJobQueueFacts.cs", label=string, span=""];
m1_221 [file="RabbitMqJobQueueFacts.cs", label="System.TimeSpan", span=""];
m2_39 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="54-54"];
m2_40 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProviderFacts.cs", label="var processingJob = CreateProcessingJob()", span="56-56"];
m2_41 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProviderFacts.cs", label="Assert.Equal(JobId, processingJob.JobId)", span="58-58"];
m2_42 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProviderFacts.cs", label="Assert.Equal(Queue, processingJob.Queue)", span="59-59"];
m2_43 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="54-54"];
m2_32 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="45-45"];
m2_33 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RedisProcessingJob(_redisConnection, JobId, null))", span="47-48"];
m2_34 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="Assert.Equal(''queue'', exception.ParamName)", span="50-50"];
m2_35 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="45-45"];
m2_25 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="36-36"];
m2_26 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RedisProcessingJob(_redisConnection, null, Queue))", span="38-39"];
m2_27 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="Assert.Equal(''jobId'', exception.ParamName)", span="41-41"];
m2_28 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="36-36"];
m2_44 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", span="72-72"];
m2_56 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", file="RabbitMqJobQueueProviderFacts.cs", label="return new RedisProcessingJob(_redisConnection, JobId, Queue);", span="74-74"];
m2_57 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", span="72-72"];
m2_51 [cluster="Unk.Verify", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Unk.Verify", span=""];
m2_15 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="27-27"];
m2_16 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RedisProcessingJob(null, JobId, Queue))", span="29-30"];
m2_17 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="Assert.Equal(''connection'', exception.ParamName)", span="32-32"];
m2_18 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="27-27"];
m2_8 [cluster="Unk.Setup", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Unk.Setup", span=""];
m2_55 [cluster="Unk.Commit", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Unk.Commit", span=""];
m2_50 [cluster="HangFire.Redis.RedisProcessingJob.Dispose()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.Redis.RedisProcessingJob.Dispose()", span="40-40"];
m2_45 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", span="63-63"];
m2_46 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RabbitMqJobQueueProviderFacts.cs", label="var processingJob = CreateProcessingJob()", span="65-65"];
m2_47 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RabbitMqJobQueueProviderFacts.cs", label="processingJob.Dispose()", span="67-67"];
m2_48 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RabbitMqJobQueueProviderFacts.cs", label="_transaction.Verify(x => x.Commit())", span="69-69"];
m2_49 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", span="63-63"];
m2_20 [cluster="Unk.Equal", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Unk.Equal", span=""];
m2_9 [cluster="Unk.Returns", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Unk.Returns", span=""];
m2_52 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Entry lambda expression", span="69-69"];
m2_11 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Entry lambda expression", span="21-21"];
m2_12 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="x.CreateTransaction()", span="21-21"];
m2_13 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Exit lambda expression", span="21-21"];
m2_21 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Entry lambda expression", span="30-30"];
m2_22 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="new RedisProcessingJob(null, JobId, Queue)", span="30-30"];
m2_23 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Exit lambda expression", span="30-30"];
m2_29 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Entry lambda expression", span="39-39"];
m2_30 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="new RedisProcessingJob(_redisConnection, null, Queue)", span="39-39"];
m2_31 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Exit lambda expression", span="39-39"];
m2_36 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Entry lambda expression", span="48-48"];
m2_37 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="new RedisProcessingJob(_redisConnection, JobId, null)", span="48-48"];
m2_38 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Exit lambda expression", span="48-48"];
m2_53 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="x.Commit()", span="69-69"];
m2_54 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Exit lambda expression", span="69-69"];
m2_24 [cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", span="25-25"];
m2_6 [cluster="Mock<IRedisClient>.cstr", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Mock<IRedisClient>.cstr", span=""];
m2_10 [cluster="RedisConnection.cstr", file="RabbitMqJobQueueProviderFacts.cs", label="Entry RedisConnection.cstr", span=""];
m2_14 [cluster="Unk.CreateTransaction", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Unk.CreateTransaction", span=""];
m2_7 [cluster="Mock<IRedisTransaction>.cstr", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Mock<IRedisTransaction>.cstr", span=""];
m2_0 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", span="16-16"];
m2_1 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs", label="_redis = new Mock<IRedisClient>()", span="18-18"];
m2_2 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs", label="_transaction = new Mock<IRedisTransaction>()", span="19-19"];
m2_3 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs", label="_redis.Setup(x => x.CreateTransaction()).Returns(_transaction.Object)", span="21-21"];
m2_4 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs", label="_redisConnection = new RedisConnection(_redis.Object)", span="23-23"];
m2_5 [cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", span="16-16"];
m2_58 [file="RabbitMqJobQueueProviderFacts.cs", label="HangFire.Redis.Tests.RedisProcessingJobFacts", span=""];
m3_0 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", span="27-27"];
m3_1 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs", label="connection == null", span="29-29"];
m3_3 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs", label="jobId == null", span="30-30"];
m3_5 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs", label="queue == null", span="31-31"];
m3_8 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs", label="JobId = jobId", span="35-35"];
m3_2 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs", label="throw new ArgumentNullException(''connection'');", span="29-29"];
m3_4 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs", label="throw new ArgumentNullException(''jobId'');", span="30-30"];
m3_6 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs", label="throw new ArgumentNullException(''queue'');", span="31-31"];
m3_10 [cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", span="27-27"];
m3_11 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerConnectionFacts.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m3_15 [cluster="Unk.Execute", file="SqlServerConnectionFacts.cs", label="Entry Unk.Execute", span=""];
m3_12 [cluster="HangFire.SqlServer.SqlServerProcessingJob.Dispose()", file="SqlServerConnectionFacts.cs", label="Entry HangFire.SqlServer.SqlServerProcessingJob.Dispose()", span="42-42"];
m3_14 [cluster="HangFire.SqlServer.SqlServerProcessingJob.Dispose()", file="SqlServerConnectionFacts.cs", label="Exit HangFire.SqlServer.SqlServerProcessingJob.Dispose()", span="42-42"];
m3_16 [file="SqlServerConnectionFacts.cs", label="HangFire.SqlServer.SqlServerProcessingJob", span=""];
m4_48 [cluster="System.Threading.Thread.Join()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.Thread.Join()", span="0-0"];
m4_79 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", span="96-96"];
m4_19 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(SqlConnection)", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(SqlConnection)", span="105-105"];
m4_77 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(SqlConnection)", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="return new SqlServerStorage(connection);", prediction=3, span="107-107"];
m4_78 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(SqlConnection)", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(SqlConnection)", span="105-105"];
m4_13 [cluster="Unk.UseConnection", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.UseConnection", span=""];
m4_45 [cluster="System.Threading.Thread.Start()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.Thread.Start()", span="0-0"];
m4_10 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="23-23"];
m4_11 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var storage = CreateStorage(connection);\r\n\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerDistributedLock(storage, '''', _timeout));\r\n\r\n                Assert.Equal(''resource'', exception.ParamName);\r\n            })", prediction=4, span="25-33"];
m4_12 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="23-23"];
m4_47 [cluster="System.Threading.ManualResetEventSlim.Set()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.ManualResetEventSlim.Set()", span="0-0"];
m4_83 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m4_4 [cluster="Unk.>", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.>", span=""];
m4_66 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", span="90-90"];
m4_67 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var storage = CreateStorage(sql);\r\n                var distributedLock = new SqlServerDistributedLock(storage, ''hello'', _timeout);\r\n                distributedLock.Dispose();\r\n\r\n                var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single();\r\n\r\n                Assert.Equal(''NoLock'', lockMode);\r\n            })", prediction=5, span="92-102"];
m4_68 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", span="90-90"];
m4_76 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="83-83"];
m4_84 [cluster="System.Action<T>.Invoke(T)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m4_23 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", span="37-37"];
m4_24 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // ReSharper disable once UnusedVariable\r\n                var storage = CreateStorage(sql);\r\n                using (new SqlServerDistributedLock(storage, ''hello'', _timeout))\r\n                {\r\n                    var lockMode = sql.Query<string>(\r\n                        ''select applock_mode('public', 'hello', 'session')'').Single();\r\n\r\n                    Assert.Equal(''Exclusive'', lockMode);\r\n                }\r\n            })", prediction=6, span="39-50"];
m4_25 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", span="37-37"];
m4_9 [cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="44-44"];
m4_0 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="14-14"];
m4_1 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerDistributedLock(null, ''hello'', _timeout))", prediction=7, span="16-17"];
m4_46 [cluster="System.Threading.ManualResetEventSlim.Wait()", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.ManualResetEventSlim.Wait()", span="0-0"];
m4_43 [cluster="System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", span="0-0"];
m4_52 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", span="110-110"];
m4_80 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerDistributedLockFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="112-112"];
m4_81 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerDistributedLockFacts.cs", label="action(connection)", span="114-114"];
m4_82 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", span="110-110"];
m4_69 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="92-102"];
m4_6 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="17-17"];
m4_7 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(null, ''hello'', _timeout)", prediction=8, span="17-17"];
m4_8 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="17-17"];
m4_14 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="25-33"];
m4_15 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var storage = CreateStorage(connection)", prediction=8, span="27-27"];
m4_16 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerDistributedLock(storage, '''', _timeout))", prediction=10, span="29-30"];
m4_21 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(storage, '''', _timeout)", prediction=8, span="30-30"];
m4_17 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''resource'', exception.ParamName)", prediction=12, span="32-32"];
m4_20 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="30-30"];
m4_22 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="30-30"];
m4_18 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="25-33"];
m4_26 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="39-50"];
m4_27 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var storage = CreateStorage(sql)", prediction=13, span="42-42"];
m4_28 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(storage, ''hello'', _timeout)", prediction=8, span="43-43"];
m4_29 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var lockMode = sql.Query<string>(\r\n                        ''select applock_mode('public', 'hello', 'session')'').Single()", prediction=15, span="45-46"];
m4_30 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''Exclusive'', lockMode)", prediction=16, span="48-48"];
m4_31 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="39-50"];
m4_50 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="UseConnection(connection1 =>\r\n                {\r\n                    var storage = CreateStorage(connection1);\r\n                    using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                })", prediction=17, span="60-68"];
m4_49 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="60-68"];
m4_51 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="60-68"];
m4_53 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="60-68"];
m4_59 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="73-83"];
m4_54 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var storage = CreateStorage(connection1)", prediction=18, span="62-62"];
m4_55 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(storage, ''exclusive'', _timeout)", prediction=8, span="63-63"];
m4_56 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="lockAcquired.Set()", span="65-65"];
m4_60 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var storage = CreateStorage(connection2)", prediction=8, span="75-75"];
m4_61 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="Assert.Throws<SqlServerDistributedLockException>(\r\n                    () =>\r\n                    {\r\n                        using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                        {\r\n                        }\r\n                    })", prediction=8, span="76-82"];
m4_64 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="new SqlServerDistributedLock(storage, ''exclusive'', _timeout)", prediction=8, span="79-79"];
m4_62 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="73-83"];
m4_63 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Entry lambda expression", span="77-82"];
m4_65 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="77-82"];
m4_70 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var storage = CreateStorage(sql)", prediction=23, span="94-94"];
m4_71 [cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var distributedLock = new SqlServerDistributedLock(storage, ''hello'', _timeout)", prediction=24, span="95-95"];
m4_72 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="distributedLock.Dispose()", span="96-96"];
m4_73 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single()", span="98-99"];
m4_74 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''NoLock'', lockMode)", span="101-101"];
m4_57 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="releaseLock.Wait()", span="66-66"];
m4_58 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="60-68"];
m4_75 [cluster="lambda expression", file="SqlServerDistributedLockFacts.cs", label="Exit lambda expression", span="92-102"];
m4_32 [cluster="Unk.Single", file="SqlServerDistributedLockFacts.cs", label="Entry Unk.Single", span=""];
m4_2 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", prediction=25, span="19-19"];
m4_3 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="14-14"];
m4_33 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", span="54-54"];
m4_36 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="var thread = new Thread(\r\n                () => UseConnection(connection1 =>\r\n                {\r\n                    var storage = CreateStorage(connection1);\r\n                    using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                }))", prediction=26, span="59-68"];
m4_34 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="var releaseLock = new ManualResetEventSlim(false)", span="56-56"];
m4_35 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="var lockAcquired = new ManualResetEventSlim(false)", span="57-57"];
m4_37 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="thread.Start()", span="69-69"];
m4_41 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="thread.Join()", span="86-86"];
m4_39 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=0, file="SqlServerDistributedLockFacts.cs", label="UseConnection(connection2 =>\r\n            {\r\n                var storage = CreateStorage(connection2);\r\n                Assert.Throws<SqlServerDistributedLockException>(\r\n                    () =>\r\n                    {\r\n                        using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                        {\r\n                        }\r\n                    });\r\n            })", prediction=27, span="73-83"];
m4_38 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="lockAcquired.Wait()", span="71-71"];
m4_40 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="releaseLock.Set()", span="85-85"];
m4_42 [cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", span="54-54"];
m4_44 [cluster="System.Threading.Thread.Thread(System.Threading.ThreadStart)", file="SqlServerDistributedLockFacts.cs", label="Entry System.Threading.Thread.Thread(System.Threading.ThreadStart)", span="0-0"];
m4_85 [file="SqlServerDistributedLockFacts.cs", label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", span=""];
m4_86 [file="SqlServerDistributedLockFacts.cs", label=storage, span=""];
m4_87 [file="SqlServerDistributedLockFacts.cs", label=releaseLock, span=""];
m4_88 [file="SqlServerDistributedLockFacts.cs", label=lockAcquired, span=""];
m4_89 [file="SqlServerDistributedLockFacts.cs", label=storage, span=""];
m5_5 [cluster="Unk.GetTestRunner", file="SqlServerFetchedJob.cs", label="Entry Unk.GetTestRunner", span=""];
m5_14 [cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", span="46-46"];
m5_16 [cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="SqlServerFetchedJob.cs", label="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(null)", span="51-51"];
m5_15 [cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="SqlServerFetchedJob.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Enqueued state''))", span="48-49"];
m5_17 [cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", span="46-46"];
m5_13 [cluster="Unk.OnFeatureEnd", file="SqlServerFetchedJob.cs", label="Entry Unk.OnFeatureEnd", span=""];
m5_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerFetchedJob.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m5_0 [cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SqlServerFetchedJob.cs", label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24"];
m5_1 [cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", color=green, community=0, file="SqlServerFetchedJob.cs", label="Exit Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", prediction=28, span="24-24"];
m5_2 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJob.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Enqueued state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m5_3 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJob.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m5_4 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m5_8 [cluster="Unk.OnFeatureStart", file="SqlServerFetchedJob.cs", label="Entry Unk.OnFeatureStart", span=""];
m5_9 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="SqlServerFetchedJob.cs", label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", span="39-39"];
m5_11 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", color=green, community=0, file="SqlServerFetchedJob.cs", label="testRunner = null", prediction=29, span="42-42"];
m5_10 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="SqlServerFetchedJob.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m5_12 [cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="SqlServerFetchedJob.cs", label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", span="39-39"];
m5_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerFetchedJob.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m6_25 [cluster="Unk.OnScenarioStart", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.OnScenarioStart", span=""];
m6_29 [cluster="Unk.CollectScenarioErrors", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m6_26 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", span="66-66"];
m6_27 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", file="SqlServerFetchedJobFacts.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m6_28 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", span="66-66"];
m6_50 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", span="105-105"];
m6_51 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple server filters should be executed depending on their order'', ((string[])(null)))", prediction=30, span="107-107"];
m6_52 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=31, span="109-109"];
m6_53 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=32, span="111-111"];
m6_57 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", prediction=33, span="119-120"];
m6_54 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="113-113"];
m6_55 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=34, span="115-115"];
m6_56 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="117-117"];
m6_58 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="table2.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", prediction=35, span="121-122"];
m6_59 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="table2.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="123-124"];
m6_60 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="table2.AddRow(new string[] {\r\n                        ''second::OnPerformed''})", span="125-126"];
m6_61 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="table2.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="127-128"];
m6_62 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table2, ''Then '')", span="130-130"];
m6_63 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioCleanup()", span="132-132"];
m6_64 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", span="105-105"];
m6_81 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", span="175-175"];
m6_84 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="181-181"];
m6_85 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="183-183"];
m6_86 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server filter \'second\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="185-185"];
m6_93 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200"];
m6_88 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="189-190"];
m6_89 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="table4.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="191-192"];
m6_90 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="table4.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="193-194"];
m6_91 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="table4.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="195-196"];
m6_92 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Then(''only the following server filter methods were executed:'', ((string)(null)), table4, ''Then '')", span="198-198"];
m6_83 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="179-179"];
m6_94 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioCleanup()", span="202-202"];
m6_82 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter\'s OnPerformed could be skipped if there was an exception'', ((string[])(null)))", span="177-177"];
m6_87 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="187-187"];
m6_95 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", span="175-175"];
m6_45 [cluster="Unk.And", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.And", span=""];
m6_5 [cluster="Unk.GetTestRunner", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.GetTestRunner", span=""];
m6_124 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", span="274-274"];
m6_127 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="280-280"];
m6_128 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="282-282"];
m6_129 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server exception filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="284-284"];
m6_135 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="297-297"];
m6_131 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="288-289"];
m6_132 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="table6.AddRow(new string[] {\r\n                        ''first''})", span="290-291"];
m6_133 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="table6.AddRow(new string[] {\r\n                        ''second''})", span="292-293"];
m6_134 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Then(''the server exception filters should be executed in the following order:'', ((string)(null)), table6, ''Then '')", span="295-295"];
m6_126 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="278-278"];
m6_136 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioCleanup()", span="299-299"];
m6_125 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple server exception filters are executed depending on their order'', ((string[])(null)))", span="276-276"];
m6_130 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="286-286"];
m6_137 [cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", span="274-274"];
m6_0 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m6_1 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", prediction=36, span="32-32"];
m6_2 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Server filters'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m6_3 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJobFacts.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m6_4 [cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m6_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerFetchedJobFacts.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m6_22 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m6_23 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerFetchedJobFacts.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m6_24 [cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m6_46 [cluster="Unk.When", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.When", span=""];
m6_48 [cluster="Unk.AddRow", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.AddRow", span=""];
m6_65 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", span="139-139"];
m6_68 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="145-145"];
m6_69 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="147-147"];
m6_70 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server filter \'second\' that cancels the performing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="149-149"];
m6_71 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="151-151"];
m6_78 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''only the following server filter methods were executed:'', ((string)(null)), table3, ''And '')", span="166-166"];
m6_74 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="157-158"];
m6_75 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="table3.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="159-160"];
m6_76 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="table3.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="161-162"];
m6_77 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="table3.AddRow(new string[] {\r\n                        ''first::OnPerformed (with the canceled flag set)''})", span="163-164"];
m6_73 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Then(''the job should not be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="155-155"];
m6_67 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="143-143"];
m6_79 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioCleanup()", span="168-168"];
m6_66 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter should be able to cancel the performing of a job'', ((string[])(null)))", span="141-141"];
m6_72 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="153-153"];
m6_80 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", span="139-139"];
m6_96 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", span="209-209"];
m6_99 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="215-215"];
m6_100 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="217-217"];
m6_101 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="219-219"];
m6_102 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server filter \'third\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="221-221"];
m6_111 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''the state of the job should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="240-240"];
m6_104 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="225-226"];
m6_105 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="table5.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="227-228"];
m6_106 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="table5.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="229-230"];
m6_107 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="table5.AddRow(new string[] {\r\n                        ''third::OnPerforming''})", span="231-232"];
m6_108 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="table5.AddRow(new string[] {\r\n                        ''second::OnPerformed''})", span="233-234"];
m6_109 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="table5.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="235-236"];
m6_110 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table5, ''Then '')", span="238-238"];
m6_98 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="213-213"];
m6_112 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioCleanup()", span="242-242"];
m6_97 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter can handle the exception'', ((string[])(null)))", span="211-211"];
m6_103 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="223-223"];
m6_113 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", span="209-209"];
m6_43 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerFetchedJobFacts.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m6_14 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.TestInitialize()", span="46-46"];
m6_15 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Server filters''))", prediction=37, span="48-49"];
m6_16 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="HangFire.Tests.ServerFiltersFeature.FeatureSetup(null)", prediction=38, span="51-51"];
m6_17 [cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.TestInitialize()", span="46-46"];
m6_49 [cluster="Unk.Then", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.Then", span=""];
m6_44 [cluster="Unk.Given", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.Given", span=""];
m6_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerFetchedJobFacts.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m6_47 [cluster="TechTalk.SpecFlow.Table.cstr", file="SqlServerFetchedJobFacts.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m6_8 [cluster="Unk.OnFeatureStart", file="SqlServerFetchedJobFacts.cs", label="Entry Unk.OnFeatureStart", span=""];
m6_114 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", span="250-250"];
m6_117 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="257-257"];
m6_118 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server exception filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="259-259"];
m6_121 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="265-265"];
m6_120 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Then(''the server exception filter should be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="263-263"];
m6_116 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="255-255"];
m6_122 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioCleanup()", span="267-267"];
m6_115 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server exception filters are executed when there was an exception while performin'' +\r\n                    ''g a job'', ((string[])(null)))", span="252-253"];
m6_119 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="261-261"];
m6_123 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", span="250-250"];
m6_30 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", span="75-75"];
m6_33 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=39, span="81-81"];
m6_32 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m6_34 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=40, span="83-83"];
m6_35 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m6_36 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", prediction=41, span="87-88"];
m6_37 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="table1.AddRow(new string[] {\r\n                        ''test::OnPerforming''})", prediction=42, span="89-90"];
m6_38 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs", label="table1.AddRow(new string[] {\r\n                        ''test::OnPerformed''})", span="91-92"];
m6_39 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table1, ''Then '')", prediction=41, span="94-94"];
m6_40 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''the job should be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=44, span="96-96"];
m6_41 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs", label="this.ScenarioCleanup()", prediction=31, span="98-98"];
m6_31 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filters should be executed when the worker performs the job'', ((string[])(null)))", span="77-77"];
m6_42 [cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", span="75-75"];
m6_138 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="Entry HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", span="306-306"];
m6_141 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="312-312"];
m6_142 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="314-314"];
m6_143 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server exception filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="316-316"];
m6_144 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''a server exception filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="318-318"];
m6_151 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.And(''the state of the job should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="333-333"];
m6_146 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="322-323"];
m6_147 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="table7.AddRow(new string[] {\r\n                        ''first''})", span="324-325"];
m6_148 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="table7.AddRow(new string[] {\r\n                        ''second''})", span="326-327"];
m6_149 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="table7.AddRow(new string[] {\r\n                        ''third''})", span="328-329"];
m6_150 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.Then(''the following server exception filters should be executed:'', ((string)(null)), table7, ''Then '')", span="331-331"];
m6_140 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="310-310"];
m6_152 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="this.ScenarioCleanup()", span="335-335"];
m6_139 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server exception filter can handle the exception'', ((string[])(null)))", span="308-308"];
m6_145 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="320-320"];
m6_153 [cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs", label="Exit HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", span="306-306"];
m6_154 [file="SqlServerFetchedJobFacts.cs", label="HangFire.Tests.ServerFiltersFeature", span=""];
m7_46 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueue.cs", label="builder.Append(''@'')", span="101-101"];
m7_13 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="throw new ArgumentException(''Queue array must be non-empty.'', ''queues'');", span="46-46"];
m7_8 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="_connectionString = connectionString", span="43-43"];
m7_37 [cluster="Unk.InfoFormat", file="SqlServerJobQueue.cs", label="Entry Unk.InfoFormat", span=""];
m7_38 [cluster="Unk.BeginTransaction", file="SqlServerJobQueue.cs", label="Entry Unk.BeginTransaction", span=""];
m7_42 [cluster="Unk.Dispose", color=green, community=0, file="SqlServerJobQueue.cs", label="Entry Unk.Dispose", prediction=46, span=""];
m7_41 [cluster="Unk.SingleOrDefault", file="SqlServerJobQueue.cs", label="Entry Unk.SingleOrDefault", span=""];
m7_43 [cluster="Unk.Rollback", file="SqlServerJobQueue.cs", label="Entry Unk.Rollback", span=""];
m7_45 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)", span="29-29"];
m7_44 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SqlServerJobQueue.cs", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
m7_40 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueue.cs", label="var parts = _connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)\r\n                    .Select(x => x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))\r\n                    .Select(x => new { Key = x[0].Trim(), Value = x[1].Trim() })\r\n                    .ToDictionary(x => x.Key, x => x.Value)", span="85-88"];
m7_49 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs", label="connection.Execute(enqueueJobSql, new { jobId = jobId, queue = queue })", span="104-104"];
m7_50 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", span="99-99"];
m7_47 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", span="99-99"];
m7_39 [cluster="System.TimeSpan.Negate()", file="SqlServerJobQueue.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m7_48 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs", label="string enqueueJobSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue) values (@jobId, @queue)''", span="101-102"];
m7_52 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueue.cs", label="Hangfire.SqlServer.SqlServerJobQueue", span=""];
m7_51 [cluster="Unk.Execute", file="SqlServerJobQueue.cs", label="Entry Unk.Execute", span=""];
m7_53 [cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueue.cs", label="Exit HangFire.SqlServer.SqlServerStorage.ToString()", span="79-79"];
m7_20 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted)", span="63-63"];
m7_21 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="fetchedJob = connection.Query<FetchedJob>(\r\n                               fetchJobSqlTemplate,\r\n                               new { queues = queues, timeout = _options.InvisibilityTimeout.Negate().TotalSeconds },\r\n                               transaction)\r\n                               .SingleOrDefault()", span="67-71"];
m7_22 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label=SqlException, span="73-73"];
m7_23 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="transaction.Dispose()", span="75-75"];
m7_19 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="connection = _storage.CreateAndOpenConnection()", span="62-62"];
m7_26 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="fetchedJob == null", span="80-80"];
m7_60 [cluster="System.Text.StringBuilder.Append(string)", file="SqlServerJobQueue.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m7_56 [cluster="Unk.ToDictionary", file="SqlServerJobQueue.cs", label="Entry Unk.ToDictionary", span=""];
m7_61 [cluster="string.Format(string, object)", file="SqlServerJobQueue.cs", label="Entry string.Format(string, object)", span="0-0"];
m7_36 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="SqlServerJobQueue.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m7_0 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="33-33"];
m7_1 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="storage == null", span="35-35"];
m7_3 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="connectionString == null", span="39-39"];
m7_5 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="options == null", span="40-40"];
m7_6 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="throw new ArgumentNullException(''options'');", span="40-40"];
m7_2 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
m7_4 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="throw new ArgumentNullException(''connectionString'');", span="39-39"];
m7_7 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs", label="_options = options", span="42-42"];
m7_31 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="87-87"];
m7_34 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", color=green, community=0, file="SqlServerJobQueue.cs", label="Exit Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", prediction=47, span="43-43"];
m7_32 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="fetchedJob == null", span="89-89"];
m7_35 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerJobQueue.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m7_57 [cluster="System.Text.StringBuilder.StringBuilder()", file="SqlServerJobQueue.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m7_80 [cluster="Unk.Open", file="SqlServerJobQueue.cs", label="Entry Unk.Open", span=""];
m7_68 [cluster="Unk.Trim", file="SqlServerJobQueue.cs", label="Entry Unk.Trim", span=""];
m7_79 [cluster="SqlConnection.cstr", file="SqlServerJobQueue.cs", label="Entry SqlConnection.cstr", span=""];
m7_59 [cluster="Unk.AppendFormat", file="SqlServerJobQueue.cs", label="Entry Unk.AppendFormat", span=""];
m7_16 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="SqlTransaction transaction = null", span="50-50"];
m7_17 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="string fetchJobSqlTemplate = @''\r\ndelete top (1) from HangFire.JobQueue with (readpast, updlock)\r\noutput DELETED.Id, DELETED.JobId, DELETED.Queue\r\nwhere (FetchedAt is null or FetchedAt < DATEADD(second, @timeout, GETUTCDATE()))\r\nand Queue in @queues''", span="52-56"];
m7_18 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="cancellationToken.ThrowIfCancellationRequested()", span="60-60"];
m7_30 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="cancellationToken.WaitHandle.WaitOne(_options.QueuePollInterval)", span="86-86"];
m7_25 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="throw;", span="77-77"];
m7_10 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="queues == null", span="45-45"];
m7_9 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="43-43"];
m7_11 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="throw new ArgumentNullException(''queues'');", span="45-45"];
m7_12 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="queues.Length == 0", span="46-46"];
m7_54 [cluster="string.Split(char[], System.StringSplitOptions)", file="SqlServerJobQueue.cs", label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0"];
m7_72 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="88-88"];
m7_62 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="86-86"];
m7_65 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="87-87"];
m7_69 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Entry lambda expression", span="88-88"];
m7_63 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", span="86-86"];
m7_64 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="86-86"];
m7_67 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="87-87"];
m7_66 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="new { Key = x[0].Trim(), Value = x[1].Trim() }", span="87-87"];
m7_71 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="88-88"];
m7_70 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Key", span="88-88"];
m7_73 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="x.Value", span="88-88"];
m7_74 [cluster="lambda expression", file="SqlServerJobQueue.cs", label="Exit lambda expression", span="88-88"];
m7_55 [cluster="Unk.Select", file="SqlServerJobQueue.cs", label="Entry Unk.Select", span=""];
m7_27 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="transaction.Rollback()", span="82-82"];
m7_28 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="transaction.Dispose()", span="83-83"];
m7_15 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="SqlConnection connection = null", span="49-49"];
m7_14 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", label="FetchedJob fetchedJob = null", span="48-48"];
m7_75 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueue.cs", label="var connection = new SqlConnection(_connectionString)", span="124-124"];
m7_76 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueue.cs", label="connection.Open()", span="125-125"];
m7_77 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueue.cs", label="return connection;", span="127-127"];
m7_78 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueue.cs", label="Exit HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="122-122"];
m7_58 [cluster="Unk.ContainsKey", file="SqlServerJobQueue.cs", label="Entry Unk.ContainsKey", span=""];
m7_81 [file="SqlServerJobQueue.cs", label="HangFire.SqlServer.SqlServerStorage", span=""];
m8_57 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", span="119-119"];
m8_88 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerJobQueueFacts.cs", label="return new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, jobId, queue);", span="121-121"];
m8_89 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerJobQueueFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", span="119-119"];
m8_7 [cluster="Mock<SqlServerStorage>.cstr", file="SqlServerJobQueueFacts.cs", label="Entry Mock<SqlServerStorage>.cstr", span=""];
m8_19 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="36-36"];
m8_20 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerJobQueueFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, null, _transaction.Object, JobId, Queue))", span="38-39"];
m8_21 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''connection'', exception.ParamName)", span="41-41"];
m8_22 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerJobQueueFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="36-36"];
m8_5 [cluster="Mock<IDbConnection>.cstr", file="SqlServerJobQueueFacts.cs", label="Entry Mock<IDbConnection>.cstr", span=""];
m8_13 [cluster="Unk.>", file="SqlServerJobQueueFacts.cs", label="Entry Unk.>", span=""];
m8_0 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", span="19-19"];
m8_2 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerJobQueueFacts.cs", label="_transaction = new Mock<IDbTransaction>()", span="22-22"];
m8_3 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerJobQueueFacts.cs", label="_storage = new Mock<SqlServerStorage>(ConnectionUtils.GetConnectionString())", span="23-23"];
m8_4 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerJobQueueFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", span="19-19"];
m8_9 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="27-27"];
m8_10 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerJobQueueFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(null, _connection.Object, _transaction.Object, JobId, Queue))", span="29-30"];
m8_11 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="32-32"];
m8_12 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerJobQueueFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="27-27"];
m8_18 [cluster="SqlServerFetchedJob.cstr", file="SqlServerJobQueueFacts.cs", label="Entry SqlServerFetchedJob.cstr", span=""];
m8_47 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="72-72"];
m8_48 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerJobQueueFacts.cs", label="var fetchedJob = new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, Queue)", span="74-74"];
m8_49 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(JobId, fetchedJob.JobId)", span="76-76"];
m8_50 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(Queue, fetchedJob.Queue)", span="77-77"];
m8_51 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerJobQueueFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="72-72"];
m8_73 [cluster="Unk.Rollback", file="SqlServerJobQueueFacts.cs", label="Entry Unk.Rollback", span=""];
m8_26 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", span="45-45"];
m8_27 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerJobQueueFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, null, JobId, Queue))", span="47-48"];
m8_28 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''transaction'', exception.ParamName)", span="50-50"];
m8_29 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerJobQueueFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", span="45-45"];
m8_74 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", span="107-107"];
m8_75 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerJobQueueFacts.cs", label="var processingJob = CreateFetchedJob(''1'', ''queue'')", span="109-109"];
m8_76 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerJobQueueFacts.cs", label="processingJob.Dispose()", span="112-112"];
m8_77 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="_transaction.Verify(x => x.Dispose())", prediction=48, span="115-115"];
m8_78 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerJobQueueFacts.cs", label="_connection.Verify(x => x.Dispose())", span="116-116"];
m8_79 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerJobQueueFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", span="107-107"];
m8_33 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="54-54"];
m8_34 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerJobQueueFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, null, Queue))", span="56-57"];
m8_35 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''jobId'', exception.ParamName)", span="59-59"];
m8_36 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerJobQueueFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="54-54"];
m8_6 [cluster="Mock<IDbTransaction>.cstr", file="SqlServerJobQueueFacts.cs", label="Entry Mock<IDbTransaction>.cstr", span=""];
m8_84 [cluster="Unk.Dispose", file="SqlServerJobQueueFacts.cs", label="Entry Unk.Dispose", span=""];
m8_58 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="53-53"];
m8_85 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="116-116"];
m8_15 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="30-30"];
m8_16 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="new SqlServerFetchedJob(null, _connection.Object, _transaction.Object, JobId, Queue)", span="30-30"];
m8_17 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="30-30"];
m8_23 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="39-39"];
m8_24 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="new SqlServerFetchedJob(_storage.Object, null, _transaction.Object, JobId, Queue)", span="39-39"];
m8_25 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="39-39"];
m8_30 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="48-48"];
m8_31 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="new SqlServerFetchedJob(_storage.Object, _connection.Object, null, JobId, Queue)", span="48-48"];
m8_32 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="48-48"];
m8_37 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="57-57"];
m8_38 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, null, Queue)", span="57-57"];
m8_39 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="57-57"];
m8_44 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="66-66"];
m8_45 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, null)", span="66-66"];
m8_46 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="66-66"];
m8_60 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="90-90"];
m8_61 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="x.Commit()", span="90-90"];
m8_62 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="90-90"];
m8_70 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="103-103"];
m8_71 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="x.Rollback()", span="103-103"];
m8_72 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="103-103"];
m8_81 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Entry lambda expression", span="115-115"];
m8_82 [cluster="lambda expression", color=green, community=0, file="SqlServerJobQueueFacts.cs", label="x.Dispose()", prediction=49, span="115-115"];
m8_83 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="115-115"];
m8_86 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="x.Dispose()", span="116-116"];
m8_87 [cluster="lambda expression", file="SqlServerJobQueueFacts.cs", label="Exit lambda expression", span="116-116"];
m8_64 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", span="94-94"];
m8_65 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerJobQueueFacts.cs", label="var processingJob = CreateFetchedJob(''1'', ''default'')", span="97-97"];
m8_66 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerJobQueueFacts.cs", label="processingJob.Requeue()", span="100-100"];
m8_67 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerJobQueueFacts.cs", label="_transaction.Verify(x => x.Rollback())", span="103-103"];
m8_68 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerJobQueueFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", span="94-94"];
m8_63 [cluster="Unk.Commit", file="SqlServerJobQueueFacts.cs", label="Entry Unk.Commit", span=""];
m8_69 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="58-58"];
m8_8 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26"];
m8_80 [cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="63-63"];
m8_59 [cluster="Unk.Verify", file="SqlServerJobQueueFacts.cs", label="Entry Unk.Verify", span=""];
m8_52 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", span="81-81"];
m8_53 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerJobQueueFacts.cs", label="var processingJob = CreateFetchedJob(''1'', ''default'')", span="84-84"];
m8_54 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerJobQueueFacts.cs", label="processingJob.RemoveFromQueue()", span="87-87"];
m8_55 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerJobQueueFacts.cs", label="_transaction.Verify(x => x.Commit())", span="90-90"];
m8_56 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerJobQueueFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", span="81-81"];
m8_40 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerJobQueueFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="63-63"];
m8_41 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerJobQueueFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, null))", span="65-66"];
m8_42 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerJobQueueFacts.cs", label="Assert.Equal(''queue'', exception.ParamName)", span="68-68"];
m8_43 [cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerJobQueueFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="63-63"];
m8_90 [file="SqlServerJobQueueFacts.cs", label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", span=""];
m9_0 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", span="27-27"];
m9_1 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs", label="transaction == null", span="29-29"];
m9_3 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs", label="jobId == null", span="30-30"];
m9_5 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs", label="_transaction = transaction", span="32-32"];
m9_6 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs", label="JobId = jobId", span="34-34"];
m9_2 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''transaction'');", span="29-29"];
m9_4 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''jobId'');", span="30-30"];
m9_7 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", span="27-27"];
m9_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorage.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m9_17 [cluster="Unk.Dispose", file="SqlServerStorage.cs", label="Entry Unk.Dispose", span=""];
m9_9 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs", label="Entry HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", span="39-39"];
m9_10 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs", label=_disposed, span="41-41"];
m9_11 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs", label="return;", span="41-41"];
m9_12 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs", label="_disposed = true", span="43-43"];
m9_13 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs", label="_transaction.Commit()", span="45-45"];
m9_14 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs", label="_transaction.Dispose()", span="46-46"];
m9_15 [cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs", label="Exit HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", span="39-39"];
m9_18 [file="SqlServerStorage.cs", label="HangFire.SqlServer.MessageQueueProcessingJob", span=""];
m10_6 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageFacts.cs", label="Entry HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", span="17-17"];
m10_7 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageFacts.cs", label="var state = new ScheduledState(DateTime.UtcNow.AddDays(1))", span="19-19"];
m10_8 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageFacts.cs", label="var data = state.GetData(null)", span="20-20"];
m10_9 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageFacts.cs", label="DictionaryAssert.ContainsFollowingItems(\r\n                new Dictionary<string, string>\r\n                {\r\n                    { ''ScheduledAt'', ''<UtcNow timestamp>'' },\r\n                    { ''EnqueueAt'', ''<Tomorrow timestamp>'' },\r\n                },\r\n                data)", span="22-28"];
m10_10 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageFacts.cs", label="Exit HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", span="17-17"];
m10_12 [cluster="HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", file="SqlServerStorageFacts.cs", label="Entry HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", span="36-36"];
m10_13 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerStorageFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m10_4 [cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="SqlServerStorageFacts.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="28-28"];
m10_14 [cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="SqlServerStorageFacts.cs", label="Entry HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", span="9-9"];
m10_0 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="SqlServerStorageFacts.cs", label="Entry HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", span="10-10"];
m10_1 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="SqlServerStorageFacts.cs", label="var state = new ScheduledState(DateTime.UtcNow)", span="12-12"];
m10_2 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="SqlServerStorageFacts.cs", label="Assert.Equal(ScheduledState.Name, state.StateName)", span="13-13"];
m10_3 [cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="SqlServerStorageFacts.cs", label="Exit HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", span="10-10"];
m10_11 [cluster="System.DateTime.AddDays(double)", file="SqlServerStorageFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m11_22 [cluster="HangFire.Tests.States.FailedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Tests.States.FailedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m11_23 [cluster="HangFire.Tests.States.FailedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerStorageOptions.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m11_24 [cluster="HangFire.Tests.States.FailedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerStorageOptions.cs", label="Exit HangFire.Tests.States.FailedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m11_25 [cluster="Unk.OnScenarioStart", file="SqlServerStorageOptions.cs", label="Entry Unk.OnScenarioStart", span=""];
m11_29 [cluster="Unk.CollectScenarioErrors", file="SqlServerStorageOptions.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m11_21 [cluster="Unk.OnScenarioEnd", file="SqlServerStorageOptions.cs", label="Entry Unk.OnScenarioEnd", span=""];
m11_11 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", file="SqlServerStorageOptions.cs", label="testRunner = null", span="42-42"];
m11_12 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", span="39-39"];
m11_36 [cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", span="85-85"];
m11_37 [cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name is \'Failed\''', ((string[])(null)))", span="87-87"];
m11_38 [cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs", label="this.ScenarioSetup(scenarioInfo)", span="89-89"];
m11_39 [cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs", label="this.FeatureBackground()", span="91-91"];
m11_40 [cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs", label="testRunner.Then(''the state name is equal to \'Failed\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="93-93"];
m11_41 [cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs", label="this.ScenarioCleanup()", span="95-95"];
m11_42 [cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", span="85-85"];
m11_0 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorageOptions.cs", label="Entry HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m11_8 [cluster="Unk.OnFeatureStart", color=green, community=0, file="SqlServerStorageOptions.cs", label="Entry Unk.OnFeatureStart", prediction=50, span=""];
m11_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerStorageOptions.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m11_1 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorageOptions.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m11_2 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorageOptions.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Failed state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m11_3 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorageOptions.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m11_4 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorageOptions.cs", label="Exit HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m11_5 [cluster="Unk.GetTestRunner", file="SqlServerStorageOptions.cs", label="Entry Unk.GetTestRunner", span=""];
m11_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerStorageOptions.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m11_9 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", span="39-39"];
m11_35 [cluster="Unk.And", file="SqlServerStorageOptions.cs", label="Entry Unk.And", span=""];
m11_18 [cluster="HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", span="56-56"];
m11_19 [cluster="HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", file="SqlServerStorageOptions.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m11_20 [cluster="HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", span="56-56"];
m11_26 [cluster="HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", span="66-66"];
m11_27 [cluster="HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", file="SqlServerStorageOptions.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m11_28 [cluster="HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", span="66-66"];
m11_13 [cluster="Unk.OnFeatureEnd", file="SqlServerStorageOptions.cs", label="Hangfire.SqlServer.SqlServerStorageOptions", span=""];
m11_67 [cluster="Unk.When", file="SqlServerStorageOptions.cs", label="Entry Unk.When", span=""];
m11_59 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", span="135-135"];
m11_60 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying it should add the job to the failed set'', ((string[])(null)))", span="137-137"];
m11_61 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs", label="this.ScenarioSetup(scenarioInfo)", span="139-139"];
m11_62 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs", label="this.FeatureBackground()", span="141-141"];
m11_63 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="143-143"];
m11_64 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs", label="testRunner.Then(''the job should be added to the failed set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="145-145"];
m11_65 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs", label="this.ScenarioCleanup()", span="147-147"];
m11_66 [cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", span="135-135"];
m11_58 [cluster="Unk.AddRow", file="SqlServerStorageOptions.cs", label="Entry Unk.AddRow", span=""];
m11_68 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", span="154-154"];
m11_69 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should remove the job from the failed set'', ((string[])(null)))", span="156-156"];
m11_70 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs", label="this.ScenarioSetup(scenarioInfo)", span="158-158"];
m11_71 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs", label="this.FeatureBackground()", span="160-160"];
m11_72 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="162-162"];
m11_73 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="164-164"];
m11_74 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs", label="testRunner.Then(''the job should be removed from the failed set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="166-166"];
m11_75 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs", label="this.ScenarioCleanup()", span="168-168"];
m11_76 [cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", span="154-154"];
m11_43 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerStorageOptions.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m11_45 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102"];
m11_46 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It has the correct properties set'', ((string[])(null)))", span="104-104"];
m11_47 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="this.ScenarioSetup(scenarioInfo)", span="106-106"];
m11_48 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="this.FeatureBackground()", span="108-108"];
m11_49 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112"];
m11_50 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="table1.AddRow(new string[] {\r\n                        ''FailedAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115"];
m11_51 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="table1.AddRow(new string[] {\r\n                        ''ExceptionType'',\r\n                        ''System.InvalidOperationException''})", span="116-118"];
m11_52 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="table1.AddRow(new string[] {\r\n                        ''ExceptionMessage'',\r\n                        ''Hello''})", span="119-121"];
m11_53 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="table1.AddRow(new string[] {\r\n                        ''ExceptionDetails'',\r\n                        ''<Non-empty>''})", span="122-124"];
m11_54 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="testRunner.Then(''properties table contains the following items:'', ((string)(null)), table1, ''Then '')", span="126-126"];
m11_55 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="this.ScenarioCleanup()", span="128-128"];
m11_56 [cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102"];
m11_44 [cluster="Unk.Then", file="SqlServerStorageOptions.cs", label="Entry Unk.Then", span=""];
m11_34 [cluster="Unk.Given", file="SqlServerStorageOptions.cs", label="Entry Unk.Given", span=""];
m11_10 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", file="SqlServerStorageOptions.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m11_57 [cluster="TechTalk.SpecFlow.Table.cstr", file="SqlServerStorageOptions.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m11_30 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureBackground()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Tests.States.FailedStateFeature.FeatureBackground()", span="71-71"];
m11_31 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureBackground()", file="SqlServerStorageOptions.cs", label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75"];
m11_32 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureBackground()", file="SqlServerStorageOptions.cs", label="testRunner.And(''the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="77-77"];
m11_33 [cluster="HangFire.Tests.States.FailedStateFeature.FeatureBackground()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Tests.States.FailedStateFeature.FeatureBackground()", span="71-71"];
m11_14 [cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="SqlServerStorageOptions.cs", label="Entry HangFire.Tests.States.FailedStateFeature.TestInitialize()", span="46-46"];
m11_15 [cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="SqlServerStorageOptions.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Failed state''))", span="48-49"];
m11_16 [cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="SqlServerStorageOptions.cs", label="HangFire.Tests.States.FailedStateFeature.FeatureSetup(null)", span="51-51"];
m11_17 [cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="SqlServerStorageOptions.cs", label="Exit HangFire.Tests.States.FailedStateFeature.TestInitialize()", span="46-46"];
m11_77 [file="SqlServerStorageOptions.cs", label="HangFire.Tests.States.FailedStateFeature", span=""];
m12_587 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m12_153 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="162-162"];
m12_155 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="162-162"];
m12_726 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="287-287"];
m12_627 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722"];
m12_628 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="724-725"];
m12_629 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", span="727-739"];
m12_630 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722"];
m12_119 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="129-129"];
m12_120 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="131-134"];
m12_121 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="136-158"];
m12_122 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="129-129"];
m12_393 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454"];
m12_394 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="456-468"];
m12_395 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454"];
m12_614 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712"];
m12_615 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)));\r\n            })", span="714-718"];
m12_616 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712"];
m12_211 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="132-132"];
m12_419 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489"];
m12_420 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="491-502"];
m12_421 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489"];
m12_318 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158"];
m12_48 [cluster="Unk.ToString", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToString", span=""];
m12_152 [cluster="Unk.AddJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.AddJobState", span=""];
m12_476 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564"];
m12_477 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="566-577"];
m12_478 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564"];
m12_782 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897"];
m12_783 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="899-905"];
m12_784 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897"];
m12_655 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="265-265"];
m12_319 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355"];
m12_320 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="357-368"];
m12_321 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355"];
m12_559 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653"];
m12_560 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''));\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="655-670"];
m12_561 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653"];
m12_589 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686"];
m12_590 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", span="688-694"];
m12_591 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686"];
m12_637 [cluster="Unk.Execute", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Execute", span=""];
m12_407 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472"];
m12_408 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="474-485"];
m12_409 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472"];
m12_177 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179"];
m12_178 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="return connection\r\n                .Query(''select * from HangFire.Job where Id = @id'', new { id = jobId })\r\n                .Single();", span="181-183"];
m12_179 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179"];
m12_761 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="298-298"];
m12_343 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="173-173"];
m12_50 [cluster="Unk.GetTestJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetTestJob", span=""];
m12_7 [cluster="Mock<IPersistentJobQueue>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IPersistentJobQueue>.cstr", span=""];
m12_816 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935"];
m12_817 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="937-943"];
m12_818 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935"];
m12_267 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="291-291"];
m12_268 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="293-302"];
m12_269 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="291-291"];
m12_829 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="320-320"];
m12_193 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125"];
m12_795 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="309-309"];
m12_514 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610"];
m12_515 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="612-618"];
m12_516 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610"];
m12_691 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="276-276"];
m12_23 [cluster="SqlServerWriteOnlyTransaction.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry SqlServerWriteOnlyTransaction.cstr", span=""];
m12_280 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153"];
m12_194 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="202-202"];
m12_195 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="204-218"];
m12_196 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="202-202"];
m12_293 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="323-323"];
m12_294 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="325-336"];
m12_295 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="323-323"];
m12_513 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="214-214"];
m12_441 [cluster="Unk.ToArray", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToArray", span=""];
m12_52 [cluster="System.DateTime.AddDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m12_677 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782"];
m12_678 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="784-790"];
m12_679 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782"];
m12_5 [cluster="Mock<IPersistentJobQueueProvider>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IPersistentJobQueueProvider>.cstr", span=""];
m12_0 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="17-17"];
m12_1 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="var defaultProvider = new Mock<IPersistentJobQueueProvider>()", span="19-19"];
m12_3 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="23-23"];
m12_4 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="17-17"];
m12_830 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947"];
m12_831 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="949-951"];
m12_832 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", span="953-969"];
m12_833 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947"];
m12_692 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794"];
m12_693 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="796-798"];
m12_694 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", span="800-817"];
m12_695 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794"];
m12_847 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="966-966"];
m12_10 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="20-20"];
m12_12 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="20-20"];
m12_20 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="30-30"];
m12_22 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="30-30"];
m12_28 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="39-39"];
m12_30 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="39-39"];
m12_38 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54"];
m12_39 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="55-55"];
m12_37 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="52-64"];
m12_40 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="57-57"];
m12_41 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="59-59"];
m12_43 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="62-62"];
m12_56 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="57-57"];
m12_55 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="57-57"];
m12_42 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1))", span="60-60"];
m12_44 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.ExpireAt)", span="63-63"];
m12_45 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="52-64"];
m12_57 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="57-57"];
m12_65 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="77-77"];
m12_66 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="78-78"];
m12_64 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="75-87"];
m12_67 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistJob(jobId))", span="80-80"];
m12_68 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="82-82"];
m12_70 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="85-85"];
m12_75 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistJob(jobId)", span="80-80"];
m12_74 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="80-80"];
m12_69 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.ExpireAt)", span="83-83"];
m12_71 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(anotherJob.ExpireAt)", span="86-86"];
m12_72 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="75-87"];
m12_76 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="80-80"];
m12_83 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="100-100"];
m12_84 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="101-101"];
m12_82 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="98-125"];
m12_89 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="109-109"];
m12_90 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="111-111"];
m12_93 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="115-115"];
m12_96 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="119-119"];
m12_116 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetJobState(jobId, state.Object)", span="109-109"];
m12_97 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="120-120"];
m12_85 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="103-103"];
m12_86 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="104-104"];
m12_87 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="105-105"];
m12_88 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="106-107"];
m12_105 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="104-104"];
m12_108 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="105-105"];
m12_111 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="106-106"];
m12_115 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="109-109"];
m12_91 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', job.StateName)", span="112-112"];
m12_92 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(job.StateId)", span="113-113"];
m12_94 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateName)", span="116-116"];
m12_95 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateId)", span="117-117"];
m12_98 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="121-121"];
m12_99 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="122-122"];
m12_100 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="123-123"];
m12_101 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="124-124"];
m12_102 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="98-125"];
m12_106 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="104-104"];
m12_107 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="104-104"];
m12_109 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="105-105"];
m12_110 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="105-105"];
m12_112 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="106-106"];
m12_113 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="106-106"];
m12_117 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="109-109"];
m12_124 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="138-138"];
m12_123 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="136-158"];
m12_129 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="146-146"];
m12_130 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="148-148"];
m12_133 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="152-152"];
m12_125 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="140-140"];
m12_150 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddJobState(jobId, state.Object)", span="146-146"];
m12_134 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="153-153"];
m12_126 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="141-141"];
m12_127 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="142-142"];
m12_128 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="143-144"];
m12_140 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="141-141"];
m12_143 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="142-142"];
m12_146 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="143-143"];
m12_149 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="146-146"];
m12_131 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateName)", span="149-149"];
m12_132 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateId)", span="150-150"];
m12_135 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="154-154"];
m12_136 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="155-155"];
m12_137 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="156-156"];
m12_138 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="157-157"];
m12_139 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="136-158"];
m12_141 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="141-141"];
m12_142 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="141-141"];
m12_144 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="142-142"];
m12_145 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="142-142"];
m12_147 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="143-143"];
m12_148 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="143-143"];
m12_151 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="146-146"];
m12_156 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="164-176"];
m12_161 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="173-173"];
m12_166 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="168-168"];
m12_169 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="173-173"];
m12_163 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="164-176"];
m12_173 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="175-175"];
m12_168 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="168-168"];
m12_170 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToQueue(''default'', ''1'')", span="173-173"];
m12_171 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="173-173"];
m12_175 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="175-175"];
m12_183 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="189-198"];
m12_184 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="191-191"];
m12_185 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="193-193"];
m12_190 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="191-191"];
m12_186 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="195-195"];
m12_187 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="196-196"];
m12_188 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="197-197"];
m12_189 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="189-198"];
m12_191 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="191-191"];
m12_192 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="191-191"];
m12_197 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="204-218"];
m12_198 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="206-206"];
m12_199 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="208-208"];
m12_208 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="206-206"];
m12_200 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="210-210"];
m12_201 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="211-211"];
m12_202 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="212-212"];
m12_203 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime) record.ExpireAt", span="214-214"];
m12_204 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="216-216"];
m12_205 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="217-217"];
m12_206 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="204-218"];
m12_209 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="206-206"];
m12_210 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="206-206"];
m12_215 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="224-235"];
m12_216 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="226-230"];
m12_217 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="232-232"];
m12_220 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="226-230"];
m12_218 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="234-234"];
m12_219 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="224-235"];
m12_221 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="228-228"];
m12_222 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="229-229"];
m12_223 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="226-230"];
m12_227 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="241-250"];
m12_228 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="243-243"];
m12_229 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="245-245"];
m12_234 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="243-243"];
m12_230 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="247-247"];
m12_231 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="248-248"];
m12_232 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="249-249"];
m12_233 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="241-250"];
m12_235 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="243-243"];
m12_236 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="243-243"];
m12_241 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="256-270"];
m12_242 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="258-258"];
m12_243 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="260-260"];
m12_251 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="258-258"];
m12_244 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="262-262"];
m12_245 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="263-263"];
m12_246 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="264-264"];
m12_247 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime)record.ExpireAt", span="266-266"];
m12_248 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="268-268"];
m12_249 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="269-269"];
m12_250 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="256-270"];
m12_252 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="258-258"];
m12_253 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="258-258"];
m12_258 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="276-287"];
m12_259 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="278-282"];
m12_260 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="284-284"];
m12_263 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="278-282"];
m12_261 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="286-286"];
m12_262 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="276-287"];
m12_264 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="280-280"];
m12_265 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="281-281"];
m12_266 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="278-282"];
m12_270 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="293-302"];
m12_271 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="295-295"];
m12_272 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="297-297"];
m12_277 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="295-295"];
m12_273 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="299-299"];
m12_274 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="300-300"];
m12_275 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0.0, record.Score, 2)", span="301-301"];
m12_276 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="293-302"];
m12_278 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="295-295"];
m12_279 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="295-295"];
m12_284 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="308-319"];
m12_285 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="310-314"];
m12_286 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="316-316"];
m12_289 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="310-314"];
m12_287 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="318-318"];
m12_288 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="308-319"];
m12_290 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="312-312"];
m12_291 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''another-value'')", span="313-313"];
m12_292 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="310-314"];
m12_296 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="325-336"];
m12_297 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="327-331"];
m12_298 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="333-333"];
m12_301 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="327-331"];
m12_299 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="335-335"];
m12_300 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="325-336"];
m12_302 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="329-329"];
m12_303 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="330-330"];
m12_304 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="327-331"];
m12_308 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="342-351"];
m12_309 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="344-344"];
m12_310 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="346-346"];
m12_315 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="344-344"];
m12_311 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="348-348"];
m12_312 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="349-349"];
m12_313 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="350-350"];
m12_314 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="342-351"];
m12_316 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="344-344"];
m12_317 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="344-344"];
m12_322 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="357-368"];
m12_323 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="359-363"];
m12_324 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="365-365"];
m12_327 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="359-363"];
m12_325 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="367-367"];
m12_326 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="357-368"];
m12_328 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="361-361"];
m12_329 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="362-362"];
m12_330 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="359-363"];
m12_334 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="374-385"];
m12_335 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="376-380"];
m12_336 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="382-382"];
m12_339 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="376-380"];
m12_337 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="384-384"];
m12_338 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="374-385"];
m12_340 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="378-378"];
m12_341 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''my-value'')", span="379-379"];
m12_342 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="376-380"];
m12_347 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="391-402"];
m12_348 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="393-397"];
m12_349 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="399-399"];
m12_352 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="393-397"];
m12_350 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="401-401"];
m12_351 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="391-402"];
m12_353 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="395-395"];
m12_354 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="396-396"];
m12_355 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="393-397"];
m12_359 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="408-419"];
m12_360 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="410-414"];
m12_361 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="416-416"];
m12_364 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="410-414"];
m12_362 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="418-418"];
m12_363 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="408-419"];
m12_365 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="412-412"];
m12_366 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''different-key'', ''my-value'')", span="413-413"];
m12_367 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="410-414"];
m12_371 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="425-433"];
m12_372 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="427-427"];
m12_373 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.List'').Single()", span="429-429"];
m12_377 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="427-427"];
m12_374 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="431-431"];
m12_375 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="432-432"];
m12_376 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="425-433"];
m12_378 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="427-427"];
m12_379 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="427-427"];
m12_384 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="439-450"];
m12_385 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="441-445"];
m12_386 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="447-447"];
m12_389 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="441-445"];
m12_387 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="449-449"];
m12_388 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="439-450"];
m12_390 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="443-443"];
m12_391 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="444-444"];
m12_392 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="441-445"];
m12_396 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="456-468"];
m12_397 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="458-463"];
m12_398 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="465-465"];
m12_401 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="458-463"];
m12_399 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="467-467"];
m12_400 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="456-468"];
m12_402 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="460-460"];
m12_403 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="461-461"];
m12_404 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''my-value'')", span="462-462"];
m12_405 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="458-463"];
m12_410 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="474-485"];
m12_411 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="476-480"];
m12_412 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="482-482"];
m12_415 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="476-480"];
m12_413 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="484-484"];
m12_414 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="474-485"];
m12_416 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="478-478"];
m12_417 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''different-value'')", span="479-479"];
m12_418 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="476-480"];
m12_422 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="491-502"];
m12_423 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="493-497"];
m12_424 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="499-499"];
m12_427 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="493-497"];
m12_425 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="501-501"];
m12_426 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="491-502"];
m12_428 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="495-495"];
m12_429 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''different-key'', ''my-value'')", span="496-496"];
m12_430 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="493-497"];
m12_434 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="508-524"];
m12_435 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="510-517"];
m12_436 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="519-519"];
m12_442 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="510-517"];
m12_437 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, records.Length)", span="521-521"];
m12_438 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''1'', records[0].Value)", span="522-522"];
m12_439 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''2'', records[1].Value)", span="523-523"];
m12_440 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="508-524"];
m12_443 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="512-512"];
m12_444 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="513-513"];
m12_445 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="514-514"];
m12_446 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''3'')", span="515-515"];
m12_447 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 2)", span="516-516"];
m12_448 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="510-517"];
m12_453 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="530-543"];
m12_454 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="532-538"];
m12_455 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="540-540"];
m12_458 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="532-538"];
m12_456 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="542-542"];
m12_457 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="530-543"];
m12_459 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="534-534"];
m12_460 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="535-535"];
m12_461 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="536-536"];
m12_462 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="537-537"];
m12_463 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="532-538"];
m12_467 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="549-560"];
m12_468 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="551-555"];
m12_469 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="557-557"];
m12_472 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="551-555"];
m12_470 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="559-559"];
m12_471 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="549-560"];
m12_473 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="553-553"];
m12_474 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="554-554"];
m12_475 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="551-555"];
m12_479 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="566-577"];
m12_480 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="568-572"];
m12_481 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="574-574"];
m12_484 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="568-572"];
m12_482 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="576-576"];
m12_483 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="566-577"];
m12_485 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="570-570"];
m12_486 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 0)", span="571-571"];
m12_487 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="568-572"];
m12_491 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="583-594"];
m12_492 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="585-589"];
m12_493 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="591-591"];
m12_496 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="585-589"];
m12_494 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="593-593"];
m12_495 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="583-594"];
m12_497 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="587-587"];
m12_498 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''another-key'', 1, 0)", span="588-588"];
m12_499 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="585-589"];
m12_503 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="600-606"];
m12_504 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())))", span="602-603"];
m12_508 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()))", span="603-603"];
m12_505 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="605-605"];
m12_507 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="603-603"];
m12_506 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="600-606"];
m12_509 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="603-603"];
m12_510 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="603-603"];
m12_511 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="603-603"];
m12_512 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="603-603"];
m12_517 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="612-618"];
m12_518 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)))", span="614-615"];
m12_522 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null))", span="615-615"];
m12_519 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="617-617"];
m12_521 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="615-615"];
m12_520 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="612-618"];
m12_523 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="615-615"];
m12_524 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="615-615"];
m12_525 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', null)", span="615-615"];
m12_526 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="615-615"];
m12_530 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="624-639"];
m12_531 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="626-630"];
m12_532 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="632-635"];
m12_537 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="626-630"];
m12_533 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="637-637"];
m12_540 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="635-635"];
m12_543 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="635-635"];
m12_534 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="638-638"];
m12_535 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="624-639"];
m12_538 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="626-630"];
m12_539 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="626-630"];
m12_541 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Field", span="635-635"];
m12_542 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="635-635"];
m12_544 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Value", span="635-635"];
m12_545 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="635-635"];
m12_549 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="645-649"];
m12_550 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)))", span="647-648"];
m12_553 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveHash(null))", span="648-648"];
m12_551 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="645-649"];
m12_552 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="648-648"];
m12_554 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="648-648"];
m12_555 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="648-648"];
m12_556 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveHash(null)", span="648-648"];
m12_557 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="648-648"];
m12_562 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="655-670"];
m12_563 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="658-662"];
m12_564 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveHash(''some-hash''))", span="665-665"];
m12_565 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="668-668"];
m12_568 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="658-662"];
m12_571 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="665-665"];
m12_566 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, count)", span="669-669"];
m12_567 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="655-670"];
m12_569 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="658-662"];
m12_570 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="658-662"];
m12_572 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveHash(''some-hash'')", span="665-665"];
m12_573 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="665-665"];
m12_577 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="676-682"];
m12_578 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())))", span="678-679"];
m12_582 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()))", span="679-679"];
m12_579 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="681-681"];
m12_581 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="679-679"];
m12_580 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="676-682"];
m12_583 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="679-679"];
m12_584 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="679-679"];
m12_585 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(null, new List<string>())", span="679-679"];
m12_586 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="679-679"];
m12_592 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="688-694"];
m12_593 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)))", span="690-691"];
m12_597 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(''my-set'', null))", span="691-691"];
m12_594 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''items'', exception.ParamName)", span="693-693"];
m12_596 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="691-691"];
m12_595 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="688-694"];
m12_598 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="691-691"];
m12_599 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="691-691"];
m12_600 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(''my-set'', null)", span="691-691"];
m12_601 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="691-691"];
m12_605 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="700-708"];
m12_606 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="702-702"];
m12_607 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(''my-set'', items))", span="704-704"];
m12_608 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="706-706"];
m12_612 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(''my-set'', items)", span="704-704"];
m12_609 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(items, records)", span="707-707"];
m12_611 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="704-704"];
m12_610 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="700-708"];
m12_613 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="704-704"];
m12_617 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="714-718"];
m12_618 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)))", span="716-717"];
m12_621 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveSet(null))", span="717-717"];
m12_619 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="714-718"];
m12_620 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="717-717"];
m12_622 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="717-717"];
m12_623 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="717-717"];
m12_624 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveSet(null)", span="717-717"];
m12_625 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="717-717"];
m12_632 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="729-733"];
m12_631 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="727-739"];
m12_633 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveSet(''set-1''))", span="735-735"];
m12_634 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="737-737"];
m12_638 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="735-735"];
m12_635 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''set-2'', record.Key)", span="738-738"];
m12_636 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="727-739"];
m12_639 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveSet(''set-1'')", span="735-735"];
m12_640 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="735-735"];
m12_644 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="745-751"];
m12_645 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))))", span="747-748"];
m12_649 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)))", span="748-748"];
m12_646 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="750-750"];
m12_648 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="748-748"];
m12_647 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="745-751"];
m12_650 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="748-748"];
m12_651 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="748-748"];
m12_652 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireHash(null, TimeSpan.FromMinutes(5))", span="748-748"];
m12_653 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="748-748"];
m12_661 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="764-768"];
m12_660 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="761-778"];
m12_662 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)))", span="771-771"];
m12_663 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="774-774"];
m12_668 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="771-771"];
m12_664 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="775-775"];
m12_671 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="774-774"];
m12_674 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="774-774"];
m12_665 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="776-776"];
m12_666 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-2''])", span="777-777"];
m12_667 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="761-778"];
m12_669 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60))", span="771-771"];
m12_670 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="771-771"];
m12_672 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="774-774"];
m12_673 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="774-774"];
m12_675 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="774-774"];
m12_676 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="774-774"];
m12_680 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="784-790"];
m12_681 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))))", span="786-787"];
m12_685 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)))", span="787-787"];
m12_682 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="789-789"];
m12_684 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="787-787"];
m12_683 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="784-790"];
m12_686 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="787-787"];
m12_687 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="787-787"];
m12_688 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireSet(null, TimeSpan.FromSeconds(45))", span="787-787"];
m12_689 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="787-787"];
m12_697 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="803-807"];
m12_696 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="800-817"];
m12_698 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)))", span="810-810"];
m12_699 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="813-813"];
m12_704 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="810-810"];
m12_700 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="814-814"];
m12_707 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="813-813"];
m12_710 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="813-813"];
m12_701 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="815-815"];
m12_702 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-2''])", span="816-816"];
m12_703 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="800-817"];
m12_705 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60))", span="810-810"];
m12_706 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="810-810"];
m12_708 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="813-813"];
m12_709 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="813-813"];
m12_711 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="813-813"];
m12_712 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="813-813"];
m12_716 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="823-829"];
m12_717 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))))", span="825-826"];
m12_721 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)))", span="826-826"];
m12_718 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="828-828"];
m12_720 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="826-826"];
m12_719 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="823-829"];
m12_722 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="826-826"];
m12_723 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="826-826"];
m12_724 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireList(null, TimeSpan.FromSeconds(45))", span="826-826"];
m12_725 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="826-826"];
m12_732 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="841-845"];
m12_731 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="838-855"];
m12_733 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)))", span="848-848"];
m12_734 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="851-851"];
m12_739 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="848-848"];
m12_735 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="852-852"];
m12_742 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="851-851"];
m12_745 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="851-851"];
m12_736 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="853-853"];
m12_737 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-2''])", span="854-854"];
m12_738 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="838-855"];
m12_740 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireList(''list-1'', TimeSpan.FromMinutes(60))", span="848-848"];
m12_741 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="848-848"];
m12_743 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="851-851"];
m12_744 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="851-851"];
m12_746 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="851-851"];
m12_747 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="851-851"];
m12_751 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="861-867"];
m12_752 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)))", span="863-864"];
m12_756 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistHash(null))", span="864-864"];
m12_753 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="866-866"];
m12_755 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="864-864"];
m12_754 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="861-867"];
m12_757 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="864-864"];
m12_758 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="864-864"];
m12_759 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistHash(null)", span="864-864"];
m12_760 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="864-864"];
m12_767 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="880-884"];
m12_766 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="877-893"];
m12_768 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistHash(''hash-1''))", span="887-887"];
m12_769 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="890-890"];
m12_773 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="887-887"];
m12_770 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-1''])", span="891-891"];
m12_776 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="890-890"];
m12_779 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="890-890"];
m12_771 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''hash-2''])", span="892-892"];
m12_772 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="877-893"];
m12_774 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistHash(''hash-1'')", span="887-887"];
m12_775 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="887-887"];
m12_777 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="890-890"];
m12_778 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="890-890"];
m12_780 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="890-890"];
m12_781 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="890-890"];
m12_785 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="899-905"];
m12_786 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)))", span="901-902"];
m12_790 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistSet(null))", span="902-902"];
m12_787 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="904-904"];
m12_789 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="902-902"];
m12_788 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="899-905"];
m12_791 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="902-902"];
m12_792 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="902-902"];
m12_793 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistSet(null)", span="902-902"];
m12_794 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="902-902"];
m12_801 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="918-922"];
m12_800 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="915-931"];
m12_802 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistSet(''set-1''))", span="925-925"];
m12_803 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="928-928"];
m12_807 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="925-925"];
m12_804 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-1''])", span="929-929"];
m12_810 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="928-928"];
m12_813 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="928-928"];
m12_805 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''set-2''])", span="930-930"];
m12_806 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="915-931"];
m12_808 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistSet(''set-1'')", span="925-925"];
m12_809 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="925-925"];
m12_811 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="928-928"];
m12_812 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="928-928"];
m12_814 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="928-928"];
m12_815 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="928-928"];
m12_819 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="937-943"];
m12_820 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)))", span="939-940"];
m12_824 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistList(null))", span="940-940"];
m12_821 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="942-942"];
m12_823 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="940-940"];
m12_822 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="937-943"];
m12_825 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="940-940"];
m12_826 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="940-940"];
m12_827 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistList(null)", span="940-940"];
m12_828 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="940-940"];
m12_835 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="956-960"];
m12_834 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="953-969"];
m12_836 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistList(''list-1''))", span="963-963"];
m12_837 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="966-966"];
m12_841 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="963-963"];
m12_838 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-1''])", span="967-967"];
m12_844 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="966-966"];
m12_839 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''list-2''])", span="968-968"];
m12_840 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="953-969"];
m12_842 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistList(''list-1'')", span="963-963"];
m12_843 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="963-963"];
m12_845 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="966-966"];
m12_846 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="966-966"];
m12_848 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="966-966"];
m12_849 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="966-966"];
m12_588 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="242-242"];
m12_381 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="437-437"];
m12_382 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="439-450"];
m12_383 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="437-437"];
m12_368 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="423-423"];
m12_369 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="425-433"];
m12_370 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="423-423"];
m12_602 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="698-698"];
m12_603 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var items = new List<string> { ''1'', ''2'', ''3'' };\r\n\r\n                Commit(sql, x => x.AddRangeToSet(''my-set'', items));\r\n\r\n                var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''');\r\n                Assert.Equal(items, records);\r\n            })", span="700-708"];
m12_604 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="698-698"];
m12_406 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="191-191"];
m12_8 [cluster="Unk.Returns", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Returns", span=""];
m12_796 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="909-909"];
m12_797 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="911-913"];
m12_798 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistSet(''set-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''set-1'']);\r\n                Assert.NotNull(records[''set-2'']);\r\n            })", span="915-931"];
m12_799 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="909-909"];
m12_356 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="406-406"];
m12_357 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="408-419"];
m12_358 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="406-406"];
m12_713 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="821-821"];
m12_714 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="823-829"];
m12_715 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="821-821"];
m12_103 [cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IState>.cstr", span=""];
m12_51 [cluster="System.DateTime.AddMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m12_224 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239"];
m12_225 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="241-250"];
m12_226 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239"];
m12_859 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="44-44"];
m12_36 [cluster="Unk.UseConnection", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.UseConnection", span=""];
m12_237 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139"];
m12_118 [cluster="Unk.SetJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SetJobState", span=""];
m12_488 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="581-581"];
m12_489 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="583-594"];
m12_490 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="581-581"];
m12_31 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m12_24 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="36-36"];
m12_27 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="36-36"];
m12_59 [cluster="Unk.ExpireJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ExpireJob", span=""];
m12_331 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="372-372"];
m12_332 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="374-385"];
m12_333 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="372-372"];
m12_15 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="27-27"];
m12_18 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="27-27"];
m12_305 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="340-340"];
m12_306 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="342-351"];
m12_307 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="340-340"];
m12_46 [cluster="Unk.Query", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Query", span=""];
m12_854 [cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m12_558 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="232-232"];
m12_238 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254"];
m12_239 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="256-270"];
m12_240 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254"];
m12_500 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="598-598"];
m12_501 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="600-606"];
m12_502 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="598-598"];
m12_164 [cluster="Unk.Add", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Add", span=""];
m12_727 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="833-833"];
m12_728 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="835-836"];
m12_729 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1'']);\r\n                Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''list-2'']);\r\n            })", span="838-855"];
m12_730 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="833-833"];
m12_73 [cluster="Unk.NotNull", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.NotNull", span=""];
m12_762 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="871-871"];
m12_763 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="873-875"];
m12_764 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistHash(''hash-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''hash-1'']);\r\n                Assert.NotNull(records[''hash-2'']);\r\n            })", span="877-893"];
m12_765 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="871-871"];
m12_49 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="980-980"];
m12_856 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(transaction)", span="986-986"];
m12_857 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="transaction.Commit()", span="987-987"];
m12_858 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="980-980"];
m12_180 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="187-187"];
m12_181 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="189-198"];
m12_182 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="187-187"];
m12_6 [cluster="Unk.Setup", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Setup", span=""];
m12_54 [cluster="Unk.Null", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Null", span=""];
m12_9 [cluster="PersistentJobQueueProviderCollection.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry PersistentJobQueueProviderCollection.cstr", span=""];
m12_850 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="972-972"];
m12_851 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="974-974"];
m12_852 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(connection)", span="976-976"];
m12_853 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="972-972"];
m12_656 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="755-755"];
m12_657 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="757-759"];
m12_658 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1'']);\r\n                Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''hash-2'']);\r\n            })", span="761-778"];
m12_659 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="755-755"];
m12_464 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="547-547"];
m12_465 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="549-560"];
m12_466 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="547-547"];
m12_207 [cluster="System.DateTime.AddHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m12_212 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="222-222"];
m12_213 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="224-235"];
m12_214 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="222-222"];
m12_748 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="859-859"];
m12_749 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="861-867"];
m12_750 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="859-859"];
m12_14 [cluster="Unk.GetJobQueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m12_450 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="528-528"];
m12_451 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="530-543"];
m12_452 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="528-528"];
m12_431 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="506-506"];
m12_432 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="508-524"];
m12_433 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="506-506"];
m12_165 [cluster="Unk.Verify", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Verify", span=""];
m12_255 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274"];
m12_256 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="276-287"];
m12_257 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274"];
m12_449 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="199-199"];
m12_654 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m12_536 [cluster="Unk.ToDictionary", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToDictionary", span=""];
m12_281 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306"];
m12_282 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="308-319"];
m12_283 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306"];
m12_78 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="91-91"];
m12_79 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="93-96"];
m12_80 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="98-125"];
m12_81 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="91-91"];
m12_60 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="68-68"];
m12_61 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="70-73"];
m12_62 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="75-87"];
m12_63 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="68-68"];
m12_254 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="146-146"];
m12_626 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="255-255"];
m12_13 [cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.>", span=""];
m12_690 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m12_172 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="117-117"];
m12_58 [cluster="System.TimeSpan.FromDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m12_176 [cluster="Unk.Enqueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Enqueue", span=""];
m12_527 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="622-622"];
m12_528 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="624-639"];
m12_529 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="622-622"];
m12_104 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m12_574 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="674-674"];
m12_575 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="676-682"];
m12_576 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="674-674"];
m12_114 [cluster="Unk.SerializeData", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SerializeData", span=""];
m12_344 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="389-389"];
m12_345 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="391-402"];
m12_346 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="389-389"];
m12_641 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="743-743"];
m12_642 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="745-751"];
m12_643 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="743-743"];
m12_47 [cluster="Unk.Single", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Single", span=""];
m12_53 [cluster="Unk.True", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.True", span=""];
m12_77 [cluster="Unk.PersistJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.PersistJob", span=""];
m12_32 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="45-45"];
m12_33 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="47-50"];
m12_34 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="52-64"];
m12_35 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="45-45"];
m12_380 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="183-183"];
m12_546 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="643-643"];
m12_547 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)));\r\n            })", span="645-649"];
m12_548 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="643-643"];
m12_860 [file="SqlServerWriteOnlyTransactionFacts.cs", label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span=""];
m12_861 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_862 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m12_863 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_864 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m12_865 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_866 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m12_867 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m12_868 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_869 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m12_870 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m12_871 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_872 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_873 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_874 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_875 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_876 [file="SqlServerWriteOnlyTransactionFacts.cs", label=items, span=""];
m12_877 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_878 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_879 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_880 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_881 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_882 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_883 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_884 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_885 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_886 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_887 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_888 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m12_889 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m12_890 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
n95 -> n50  [color=darkseagreen4, key=1, label=queue, style=dashed];
n96 -> n50  [color=darkseagreen4, key=1, label=token, style=dashed];
n5 -> n10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n18 -> n24  [color=darkseagreen4, key=1, label=transaction, style=dashed];
n21 -> n23  [color=darkseagreen4, key=1, label=message, style=dashed];
n44 -> n46  [color=darkseagreen4, key=1, label=queue, style=dashed];
n44 -> n50  [color=darkseagreen4, key=1, label=queue, style=dashed];
n45 -> n50  [color=darkseagreen4, key=1, label=token, style=dashed];
n46 -> n49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n63 -> n67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n76 -> n80  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_121 -> m1_126  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_119 -> m1_124  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_119 -> m1_121  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_119 -> m1_127  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_120 -> m1_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_149 -> m1_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_150 -> m1_152  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_104 -> m1_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_102 -> m1_107  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_102 -> m1_104  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_102 -> m1_110  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_103 -> m1_106  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_162 -> m1_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_163 -> m1_165  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_182 -> m1_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_181 -> m1_185  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_31 -> m1_37  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_31 -> m1_33  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_31 -> m1_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_31 -> m1_44  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_32 -> m1_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_33 -> m1_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_34 -> m1_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_36 -> m1_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_112 -> m1_116  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_113 -> m1_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_129 -> m1_133  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_130 -> m1_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_142 -> m1_146  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_143 -> m1_145  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_14 -> m1_21  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_14 -> m1_16  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_14 -> m1_26  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_58 -> m1_73  [color=darkseagreen4, key=1, label="HangFire.Common.States.JobState", style=dashed];
m1_58 -> m1_74  [color=darkseagreen4, key=1, label="HangFire.Common.States.JobState", style=dashed];
m1_58 -> m1_76  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_58 -> m1_80  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_76 -> m1_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_72 -> m1_74  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_72 -> m1_75  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_72 -> m1_76  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_72 -> m1_80  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_15 -> m1_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_169 -> m1_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_170 -> m1_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_45 -> m1_24  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.States.SucceededStateHandlerFacts", style=dashed];
m1_45 -> m1_25  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.States.SucceededStateHandlerFacts", style=dashed];
m1_45 -> m1_35  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.States.SucceededStateHandlerFacts", style=dashed];
m1_45 -> m1_36  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.States.SucceededStateHandlerFacts", style=dashed];
m1_136 -> m1_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_137 -> m1_139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_175 -> m1_179  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_176 -> m1_178  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_95 -> m1_99  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_96 -> m1_98  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_16 -> m1_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_84 -> m1_89  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_84 -> m1_86  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_84 -> m1_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_85 -> m1_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_86 -> m1_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_48 -> m1_63  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_60  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_46 -> m1_48  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_46 -> m1_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_46 -> m1_51  [color=darkseagreen4, key=1, label="HangFire.Common.States.JobState", style=dashed];
m1_46 -> m1_52  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_46 -> m1_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_46 -> m1_53  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_47 -> m1_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_52 -> m1_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_50 -> m1_52  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_50 -> m1_68  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_155 -> m1_159  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_156 -> m1_158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_187 -> m1_11  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_15  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_16  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_32  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_33  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_47  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_48  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_52  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_53  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_76  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_85  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_86  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_96  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_103  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_104  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_113  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_120  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_121  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_130  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_137  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_143  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_150  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_156  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_163  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_170  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_176  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_187 -> m1_182  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisWriteOnlyTransaction", style=dashed];
m1_188 -> m1_21  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_188 -> m1_26  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_189 -> m1_21  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_189 -> m1_26  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_190 -> m1_37  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_190 -> m1_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_190 -> m1_44  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_191 -> m1_60  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_191 -> m1_64  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_191 -> m1_68  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_192 -> m1_60  [color=darkseagreen4, key=1, label="HangFire.Common.States.JobState", style=dashed];
m1_193 -> m1_68  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_194 -> m1_80  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_195 -> m1_80  [color=darkseagreen4, key=1, label=storedData, style=dashed];
m1_196 -> m1_89  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_196 -> m1_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_197 -> m1_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_198 -> m1_99  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_199 -> m1_107  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_199 -> m1_110  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_200 -> m1_110  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_201 -> m1_116  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_202 -> m1_124  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_202 -> m1_127  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_203 -> m1_127  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_204 -> m1_133  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_205 -> m1_133  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_206 -> m1_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_207 -> m1_140  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_208 -> m1_140  [color=darkseagreen4, key=1, label=double, style=dashed];
m1_209 -> m1_146  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_210 -> m1_146  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_211 -> m1_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_212 -> m1_153  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_213 -> m1_159  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_214 -> m1_159  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_215 -> m1_166  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_216 -> m1_166  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_217 -> m1_166  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_218 -> m1_173  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_219 -> m1_179  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_220 -> m1_185  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_221 -> m1_185  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m2_40 -> m2_42  [color=darkseagreen4, key=1, label=processingJob, style=dashed];
m2_33 -> m2_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_26 -> m2_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_16 -> m2_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_48 -> m2_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_3 -> m2_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_58 -> m2_3  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisProcessingJobFacts", style=dashed];
m2_58 -> m2_30  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisProcessingJobFacts", style=dashed];
m2_58 -> m2_37  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisProcessingJobFacts", style=dashed];
m2_58 -> m2_48  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisProcessingJobFacts", style=dashed];
m2_58 -> m2_56  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisProcessingJobFacts", style=dashed];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_0 -> m3_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_11 -> m4_14  [color=green, key=1, label="lambda expression", style=dashed];
m4_67 -> m4_69  [color=green, key=1, label="lambda expression", style=dashed];
m4_24 -> m4_26  [color=green, key=1, label="lambda expression", style=dashed];
m4_1 -> m4_6  [color=green, key=1, label="lambda expression", style=dashed];
m4_52 -> m4_81  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m4_15 -> m4_21  [color=green, key=1, label=storage, style=dashed];
m4_16 -> m4_20  [color=green, key=1, label="lambda expression", style=dashed];
m4_50 -> m4_53  [color=green, key=1, label="lambda expression", style=dashed];
m4_60 -> m4_64  [color=green, key=1, label=storage, style=dashed];
m4_61 -> m4_63  [color=green, key=1, label="lambda expression", style=dashed];
m4_36 -> m4_41  [color=green, key=1, label=thread, style=dashed];
m4_34 -> m4_57  [color=darkseagreen4, key=1, label=releaseLock, style=dashed];
m4_34 -> m4_40  [color=darkseagreen4, key=1, label=releaseLock, style=dashed];
m4_35 -> m4_56  [color=darkseagreen4, key=1, label=lockAcquired, style=dashed];
m4_35 -> m4_38  [color=darkseagreen4, key=1, label=lockAcquired, style=dashed];
m4_39 -> m4_59  [color=green, key=1, label="lambda expression", style=dashed];
m4_85 -> m4_7  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m4_85 -> m4_21  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m4_85 -> m4_28  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m4_85 -> m4_55  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m4_85 -> m4_61  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m4_85 -> m4_64  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", style=dashed];
m4_86 -> m4_21  [color=green, key=1, label=storage, style=dashed];
m4_87 -> m4_57  [color=darkseagreen4, key=1, label=releaseLock, style=dashed];
m4_88 -> m4_56  [color=darkseagreen4, key=1, label=lockAcquired, style=dashed];
m4_89 -> m4_64  [color=green, key=1, label=storage, style=dashed];
m6_57 -> m6_59  [color=green, key=1, label=table2, style=dashed];
m6_57 -> m6_60  [color=green, key=1, label=table2, style=dashed];
m6_57 -> m6_61  [color=green, key=1, label=table2, style=dashed];
m6_57 -> m6_62  [color=green, key=1, label=table2, style=dashed];
m6_88 -> m6_90  [color=darkseagreen4, key=1, label=table4, style=dashed];
m6_88 -> m6_91  [color=darkseagreen4, key=1, label=table4, style=dashed];
m6_88 -> m6_92  [color=darkseagreen4, key=1, label=table4, style=dashed];
m6_131 -> m6_133  [color=darkseagreen4, key=1, label=table6, style=dashed];
m6_131 -> m6_134  [color=darkseagreen4, key=1, label=table6, style=dashed];
m6_74 -> m6_78  [color=darkseagreen4, key=1, label=table3, style=dashed];
m6_74 -> m6_76  [color=darkseagreen4, key=1, label=table3, style=dashed];
m6_74 -> m6_77  [color=darkseagreen4, key=1, label=table3, style=dashed];
m6_104 -> m6_106  [color=darkseagreen4, key=1, label=table5, style=dashed];
m6_104 -> m6_107  [color=darkseagreen4, key=1, label=table5, style=dashed];
m6_104 -> m6_108  [color=darkseagreen4, key=1, label=table5, style=dashed];
m6_104 -> m6_109  [color=darkseagreen4, key=1, label=table5, style=dashed];
m6_104 -> m6_110  [color=darkseagreen4, key=1, label=table5, style=dashed];
m6_36 -> m6_38  [color=green, key=1, label=table1, style=dashed];
m6_36 -> m6_39  [color=green, key=1, label=table1, style=dashed];
m6_146 -> m6_148  [color=darkseagreen4, key=1, label=table7, style=dashed];
m6_146 -> m6_149  [color=darkseagreen4, key=1, label=table7, style=dashed];
m6_146 -> m6_150  [color=darkseagreen4, key=1, label=table7, style=dashed];
m6_154 -> m6_41  [color=green, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_52  [color=green, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_32  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_63  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_67  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_79  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_83  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_94  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_98  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_112  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_116  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_122  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_126  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_136  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_140  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m6_154 -> m6_152  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerFiltersFeature", style=dashed];
m7_42 -> m7_44  [color=green, key=1, label=alias, style=dashed];
m7_41 -> m7_44  [color=darkseagreen4, key=1, label=builder, style=dashed];
m7_41 -> m7_45  [color=darkseagreen4, key=1, label=builder, style=dashed];
m7_41 -> m7_46  [color=darkseagreen4, key=1, label=builder, style=dashed];
m7_41 -> m7_50  [color=darkseagreen4, key=1, label=builder, style=dashed];
m7_40 -> m7_43  [color=darkseagreen4, key=1, label=parts, style=dashed];
m7_40 -> m7_44  [color=darkseagreen4, key=1, label=parts, style=dashed];
m7_40 -> m7_62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_40 -> m7_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_40 -> m7_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_40 -> m7_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_39 -> m7_50  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m7_39 -> m7_52  [color=darkseagreen4, key=1, label=canNotParseMessage, style=dashed];
m7_52 -> m7_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueue", style=dashed];
m7_52 -> m7_6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueue", style=dashed];
m7_52 -> m7_30  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerJobQueue", style=dashed];
m7_20 -> m7_23  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m7_20 -> m7_27  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m7_20 -> m7_28  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m7_21 -> m7_23  [color=darkseagreen4, key=1, label=connection, style=dashed];
m7_21 -> m7_32  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m7_0 -> m7_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m7_0 -> m7_6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m7_2 -> m7_5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m7_2 -> m7_9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorageOptions", style=dashed];
m7_31 -> m7_34  [color=green, key=1, label=ILog, style=dashed];
m7_31 -> m7_31  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_18 -> m7_18  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_18 -> m7_30  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_30 -> m7_30  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_9 -> m7_18  [color=darkseagreen4, key=1, label="System.Threading.CancellationToken", style=dashed];
m7_75 -> m7_77  [color=darkseagreen4, key=1, label=connection, style=dashed];
m7_81 -> m7_34  [color=green, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m7_81 -> m7_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m7_81 -> m7_22  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m7_81 -> m7_28  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m8_20 -> m8_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_10 -> m8_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_48 -> m8_50  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m8_27 -> m8_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_77 -> m8_81  [color=green, key=1, label="lambda expression", style=dashed];
m8_78 -> m8_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_34 -> m8_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_67 -> m8_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_55 -> m8_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_41 -> m8_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_90 -> m8_16  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", style=dashed];
m8_90 -> m8_24  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", style=dashed];
m8_90 -> m8_31  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", style=dashed];
m8_90 -> m8_38  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", style=dashed];
m8_90 -> m8_45  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", style=dashed];
m8_90 -> m8_55  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", style=dashed];
m8_90 -> m8_67  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", style=dashed];
m8_90 -> m8_77  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", style=dashed];
m8_90 -> m8_78  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", style=dashed];
m8_90 -> m8_88  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", style=dashed];
m9_0 -> m9_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_18 -> m9_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.MessageQueueProcessingJob", style=dashed];
m9_18 -> m9_13  [color=darkseagreen4, key=1, label="HangFire.SqlServer.MessageQueueProcessingJob", style=dashed];
m9_18 -> m9_14  [color=darkseagreen4, key=1, label="HangFire.SqlServer.MessageQueueProcessingJob", style=dashed];
m11_13 -> m11_8  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m11_13 -> m11_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m11_13 -> m11_4  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m11_13 -> m11_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m11_13 -> m11_6  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m11_13 -> m11_7  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m11_49 -> m11_51  [color=darkseagreen4, key=1, label=table1, style=dashed];
m11_49 -> m11_52  [color=darkseagreen4, key=1, label=table1, style=dashed];
m11_49 -> m11_53  [color=darkseagreen4, key=1, label=table1, style=dashed];
m11_49 -> m11_54  [color=darkseagreen4, key=1, label=table1, style=dashed];
m11_77 -> m11_38  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m11_77 -> m11_39  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m11_77 -> m11_41  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m11_77 -> m11_47  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m11_77 -> m11_48  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m11_77 -> m11_55  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m11_77 -> m11_61  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m11_77 -> m11_62  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m11_77 -> m11_65  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m11_77 -> m11_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m11_77 -> m11_71  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m11_77 -> m11_75  [color=darkseagreen4, key=1, label="HangFire.Tests.States.FailedStateFeature", style=dashed];
m12_629 -> m12_631  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_121 -> m12_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_394 -> m12_396  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_615 -> m12_617  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_420 -> m12_422  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_477 -> m12_479  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_783 -> m12_785  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_320 -> m12_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_560 -> m12_562  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_590 -> m12_592  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_408 -> m12_410  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_817 -> m12_819  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_268 -> m12_270  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_515 -> m12_517  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_195 -> m12_197  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_294 -> m12_296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_678 -> m12_680  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_832 -> m12_834  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_694 -> m12_696  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_38 -> m12_40  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_38 -> m12_56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_37 -> m12_40  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_40 -> m12_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_65 -> m12_67  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_65 -> m12_75  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_64 -> m12_67  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_67 -> m12_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_83 -> m12_89  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_83 -> m12_116  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_83 -> m12_97  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_82 -> m12_89  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_89 -> m12_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_90 -> m12_92  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_93 -> m12_95  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
m12_96 -> m12_98  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_96 -> m12_99  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_96 -> m12_100  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_96 -> m12_101  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_85 -> m12_87  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_85 -> m12_88  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_85 -> m12_89  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_85 -> m12_116  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_86 -> m12_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_87 -> m12_108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_88 -> m12_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_124 -> m12_129  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_124 -> m12_150  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_124 -> m12_134  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_123 -> m12_129  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_129 -> m12_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_130 -> m12_132  [color=darkseagreen4, key=1, label=job, style=dashed];
m12_133 -> m12_135  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_133 -> m12_136  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_133 -> m12_137  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_133 -> m12_138  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m12_125 -> m12_127  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_125 -> m12_128  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_125 -> m12_129  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_125 -> m12_150  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_126 -> m12_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_127 -> m12_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_128 -> m12_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_156 -> m12_161  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_161 -> m12_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_184 -> m12_190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_185 -> m12_187  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_185 -> m12_188  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_198 -> m12_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_199 -> m12_201  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_199 -> m12_202  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_203 -> m12_205  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m12_216 -> m12_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_220 -> m12_222  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_228 -> m12_234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_229 -> m12_231  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_229 -> m12_232  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_242 -> m12_251  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_243 -> m12_245  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_243 -> m12_246  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_247 -> m12_249  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m12_259 -> m12_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_263 -> m12_265  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_271 -> m12_277  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_272 -> m12_274  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_272 -> m12_275  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_285 -> m12_289  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_289 -> m12_291  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_297 -> m12_301  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_301 -> m12_303  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_309 -> m12_315  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_310 -> m12_312  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_310 -> m12_313  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_323 -> m12_327  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_327 -> m12_329  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_335 -> m12_339  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_339 -> m12_341  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_348 -> m12_352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_352 -> m12_354  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_360 -> m12_364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_364 -> m12_366  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_372 -> m12_377  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_373 -> m12_375  [color=darkseagreen4, key=1, label=record, style=dashed];
m12_385 -> m12_389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_389 -> m12_391  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_397 -> m12_401  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_401 -> m12_403  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_401 -> m12_404  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_411 -> m12_415  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_415 -> m12_417  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_423 -> m12_427  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_427 -> m12_429  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_435 -> m12_442  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_436 -> m12_438  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_436 -> m12_439  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_442 -> m12_444  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_442 -> m12_445  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_442 -> m12_446  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_442 -> m12_447  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_454 -> m12_458  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_458 -> m12_460  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_458 -> m12_461  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_458 -> m12_462  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_468 -> m12_472  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_472 -> m12_474  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_480 -> m12_484  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_484 -> m12_486  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_492 -> m12_496  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_496 -> m12_498  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_503 -> m12_508  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_504 -> m12_507  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_508 -> m12_510  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_517 -> m12_522  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_518 -> m12_521  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_522 -> m12_524  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_531 -> m12_537  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_532 -> m12_540  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_532 -> m12_543  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_532 -> m12_534  [color=darkseagreen4, key=1, label=result, style=dashed];
m12_549 -> m12_553  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_550 -> m12_552  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_553 -> m12_555  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_562 -> m12_564  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_563 -> m12_568  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_564 -> m12_571  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_577 -> m12_582  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_578 -> m12_581  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_582 -> m12_584  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_592 -> m12_597  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_593 -> m12_596  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_597 -> m12_599  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_605 -> m12_607  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_606 -> m12_612  [color=darkseagreen4, key=1, label=items, style=dashed];
m12_606 -> m12_609  [color=darkseagreen4, key=1, label=items, style=dashed];
m12_607 -> m12_611  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_617 -> m12_621  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_618 -> m12_620  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_621 -> m12_623  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_631 -> m12_633  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_633 -> m12_638  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_644 -> m12_649  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_645 -> m12_648  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_649 -> m12_651  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_660 -> m12_662  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_662 -> m12_668  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_663 -> m12_671  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_663 -> m12_674  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_663 -> m12_665  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_663 -> m12_666  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_680 -> m12_685  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_681 -> m12_684  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_685 -> m12_687  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_696 -> m12_698  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_698 -> m12_704  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_699 -> m12_707  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_699 -> m12_710  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_699 -> m12_701  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_699 -> m12_702  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_716 -> m12_721  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_717 -> m12_720  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_721 -> m12_723  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_731 -> m12_733  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_733 -> m12_739  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_734 -> m12_742  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_734 -> m12_745  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_734 -> m12_736  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_734 -> m12_737  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_751 -> m12_756  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_752 -> m12_755  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_756 -> m12_758  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_766 -> m12_768  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_768 -> m12_773  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_769 -> m12_776  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_769 -> m12_779  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_769 -> m12_771  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_785 -> m12_790  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_786 -> m12_789  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_790 -> m12_792  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_800 -> m12_802  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_802 -> m12_807  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_803 -> m12_810  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_803 -> m12_813  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_803 -> m12_805  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_819 -> m12_824  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_820 -> m12_823  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_824 -> m12_826  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_834 -> m12_836  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_836 -> m12_841  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_837 -> m12_844  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_837 -> m12_847  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_837 -> m12_839  [color=darkseagreen4, key=1, label=records, style=dashed];
m12_382 -> m12_384  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_369 -> m12_371  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_603 -> m12_605  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_798 -> m12_800  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_357 -> m12_359  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_714 -> m12_716  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_225 -> m12_227  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_489 -> m12_491  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_332 -> m12_334  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_306 -> m12_308  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_239 -> m12_241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_501 -> m12_503  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_729 -> m12_731  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_764 -> m12_766  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_49 -> m12_856  [color=darkseagreen4, key=1, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
m12_181 -> m12_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_850 -> m12_852  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m12_658 -> m12_660  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_465 -> m12_467  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_213 -> m12_215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_749 -> m12_751  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_451 -> m12_453  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_432 -> m12_434  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_256 -> m12_258  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_282 -> m12_284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_80 -> m12_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_62 -> m12_64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_528 -> m12_530  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_575 -> m12_577  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_345 -> m12_347  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_642 -> m12_644  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_34 -> m12_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_547 -> m12_549  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_860 -> m12_40  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_67  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_89  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_129  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_161  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_184  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_198  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_216  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_228  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_242  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_259  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_271  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_285  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_297  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_309  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_323  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_335  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_348  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_360  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_372  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_385  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_397  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_411  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_423  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_435  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_454  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_468  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_480  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_492  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_508  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_522  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_531  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_547  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_550  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_553  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_563  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_564  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_582  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_597  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_607  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_615  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_618  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_621  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_633  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_649  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_662  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_685  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_698  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_721  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_733  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_756  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_768  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_790  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_802  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_824  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_860 -> m12_836  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m12_862 -> m12_56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_864 -> m12_75  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_866 -> m12_116  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_867 -> m12_116  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_869 -> m12_150  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m12_870 -> m12_150  [color=darkseagreen4, key=1, label=state, style=dashed];
m12_871 -> m12_508  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_872 -> m12_522  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_873 -> m12_553  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_874 -> m12_582  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_875 -> m12_597  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_876 -> m12_612  [color=darkseagreen4, key=1, label=items, style=dashed];
m12_877 -> m12_621  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_879 -> m12_649  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_881 -> m12_685  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_883 -> m12_721  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_885 -> m12_756  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_887 -> m12_790  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m12_889 -> m12_824  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
}
