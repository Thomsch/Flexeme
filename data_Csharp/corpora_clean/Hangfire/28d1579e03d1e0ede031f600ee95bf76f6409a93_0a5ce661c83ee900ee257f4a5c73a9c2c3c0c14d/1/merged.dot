digraph  {
n94 [label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts", span=""];
n95 [label=queue, span=""];
n96 [label=token, span=""];
n0 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", span="12-12", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()"];
n1 [label="_token = new CancellationToken()", span="14-14", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()"];
n2 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()", span="12-12", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.MsmqJobQueueFacts()"];
n3 [label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken()"];
n4 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", span="18-18", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()"];
n5 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new MsmqJobQueue(null, MsmqTransactionType.Internal))", span="20-21", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()"];
n6 [label="Assert.Equal(''pathPattern'', exception.ParamName)", span="23-23", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()"];
n8 [label="Entry Unk.>", span="", cluster="Unk.>"];
n10 [label="Entry lambda expression", span="21-21", cluster="lambda expression"];
n7 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()", span="18-18", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Ctor_ThrowsAnException_WhenPathPatternIsNull()"];
n9 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n11 [label="new MsmqJobQueue(null, MsmqTransactionType.Internal)", span="21-21", cluster="lambda expression"];
n12 [label="Exit lambda expression", span="21-21", cluster="lambda expression"];
n13 [label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueue.MsmqJobQueue(string, Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="32-32", cluster="Hangfire.SqlServer.Msmq.MsmqJobQueue.MsmqJobQueue(string, Hangfire.SqlServer.Msmq.MsmqTransactionType)"];
n14 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", span="27-27", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()"];
n15 [label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="30-30", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()"];
n16 [label="queue.Enqueue(''my-queue'', ''job-id'')", span="33-33", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", color=red, community=0];
n26 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="138-138", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)"];
n17 [label="var messageQueue = CleanMsmqQueueAttribute.GetMessageQueue(''my-queue'')", span="36-36", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()"];
n27 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue"];
n18 [label="var transaction = new MessageQueueTransaction()", span="37-37", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()"];
n28 [label="Entry Hangfire.Msmq.Tests.CleanMsmqQueueAttribute.GetMessageQueue(string)", span="45-45", cluster="Hangfire.Msmq.Tests.CleanMsmqQueueAttribute.GetMessageQueue(string)"];
n20 [label="var message = messageQueue.Receive(TimeSpan.FromSeconds(5), transaction)", span="41-41", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()"];
n19 [label="transaction.Begin()", span="39-39", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()"];
n29 [label="Entry MessageQueueTransaction.cstr", span="", cluster="MessageQueueTransaction.cstr"];
n24 [label="transaction.Commit()", span="47-47", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()"];
n30 [label="Entry Unk.Begin", span="", cluster="Unk.Begin"];
n21 [label="message.Formatter = new BinaryMessageFormatter()", span="42-42", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()"];
n31 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)"];
n32 [label="Entry Unk.Receive", span="", cluster="Unk.Receive"];
n22 [label="Assert.Equal(''job-id'', message.Body)", span="44-44", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()"];
n33 [label="Entry BinaryMessageFormatter.cstr", span="", cluster="BinaryMessageFormatter.cstr"];
n23 [label="Assert.Equal(''job-id'', message.Label)", span="45-45", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()"];
n25 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()", span="27-27", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Enqueue_SendsTheJobId()"];
n34 [label="Entry Unk.Commit", span="", cluster="Unk.Commit"];
n35 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", span="52-52", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()"];
n36 [label="MsmqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="54-54", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()"];
n37 [label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="55-55", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()"];
n41 [label="Entry Hangfire.Msmq.Tests.MsmqUtils.EnqueueJobId(string, string)", span="7-7", cluster="Hangfire.Msmq.Tests.MsmqUtils.EnqueueJobId(string, string)"];
n38 [label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="57-57", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()"];
n39 [label="Assert.Equal(''job-id'', fetchedJob.JobId)", span="59-59", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()"];
n42 [label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="43-43", cluster="Hangfire.SqlServer.Msmq.MsmqJobQueue.Dequeue(string[], System.Threading.CancellationToken)"];
n40 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", span="52-52", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()"];
n43 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="63-63", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()"];
n44 [label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="65-65", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()"];
n45 [label="var token = new CancellationToken(true)", span="66-66", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()"];
n46 [label="Assert.Throws<OperationCanceledException>(\r\n                () => queue.Dequeue(new[] { ''my-queue'' }, token))", span="68-69", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()"];
n50 [label="queue.Dequeue(new[] { ''my-queue'' }, token)", span="69-69", cluster="lambda expression"];
n48 [label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken(bool)"];
n47 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="63-63", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()"];
n49 [label="Entry lambda expression", span="69-69", cluster="lambda expression"];
n51 [label="Exit lambda expression", span="69-69", cluster="lambda expression"];
n52 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="73-73", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()"];
n53 [label="MsmqUtils.EnqueueJobId(''queue-2'', ''job-id'')", span="75-75", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()"];
n54 [label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="76-76", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()"];
n55 [label="var fetchedJob = queue.Dequeue(new[] { ''queue-1'', ''queue-2'' }, _token)", span="78-78", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()"];
n56 [label="Assert.Equal(''job-id'', fetchedJob.JobId)", span="80-80", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()"];
n57 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="73-73", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()"];
n58 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", span="84-84", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()"];
n59 [label="MsmqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="87-87", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()"];
n60 [label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="88-88", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()"];
n61 [label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="91-91", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()"];
n62 [label="Assert.NotNull(fetchedJob)", span="94-94", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()"];
n63 [label="var exception = Assert.Throws<MessageQueueException>(\r\n                () => MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1)))", span="96-97", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()"];
n66 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull"];
n64 [label="Assert.Equal(MessageQueueErrorCode.IOTimeout, exception.MessageQueueErrorCode)", span="99-99", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()"];
n67 [label="Entry lambda expression", span="97-97", cluster="lambda expression"];
n65 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", span="84-84", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()"];
n68 [label="MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1))", span="97-97", cluster="lambda expression"];
n69 [label="Exit lambda expression", span="97-97", cluster="lambda expression"];
n70 [label="Entry Hangfire.Msmq.Tests.MsmqUtils.DequeueJobId(string, System.TimeSpan)", span="19-19", cluster="Hangfire.Msmq.Tests.MsmqUtils.DequeueJobId(string, System.TimeSpan)"];
n71 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", span="103-103", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()"];
n72 [label="MsmqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="106-106", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()"];
n73 [label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="107-107", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()"];
n74 [label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="110-110", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()"];
n75 [label="fetchedJob.RemoveFromQueue()", span="112-112", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()"];
n76 [label="var exception = Assert.Throws<MessageQueueException>(\r\n                () => MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5)))", span="116-117", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()"];
n79 [label="Entry Hangfire.Storage.IFetchedJob.RemoveFromQueue()", span="24-24", cluster="Hangfire.Storage.IFetchedJob.RemoveFromQueue()"];
n77 [label="Assert.Equal(MessageQueueErrorCode.IOTimeout, exception.MessageQueueErrorCode)", span="119-119", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()"];
n80 [label="Entry lambda expression", span="117-117", cluster="lambda expression"];
n78 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", span="103-103", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()"];
n81 [label="MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5))", span="117-117", cluster="lambda expression"];
n82 [label="Exit lambda expression", span="117-117", cluster="lambda expression"];
n83 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="123-123", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()"];
n84 [label="MsmqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="126-126", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()"];
n85 [label="var queue = CreateQueue(MsmqTransactionType.Internal)", span="127-127", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()"];
n86 [label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="130-130", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()"];
n87 [label="fetchedJob.Dispose()", span="131-131", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()"];
n88 [label="var jobId = MsmqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5))", span="134-134", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()"];
n91 [label="Entry System.IDisposable.Dispose()", span="0-0", cluster="System.IDisposable.Dispose()"];
n89 [label="Assert.Equal(''job-id'', jobId)", span="135-135", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()"];
n90 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="123-123", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()"];
n92 [label="return new MsmqJobQueue(CleanMsmqQueueAttribute.PathPattern, transactionType);", span="140-140", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)"];
n93 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="138-138", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts.CreateQueue(Hangfire.SqlServer.Msmq.MsmqTransactionType)"];
m0_5 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", span="29-29", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="MsmqJobQueueProviderFacts.cs"];
m0_14 [label="return new MsmqJobQueueProvider(\r\n                CleanMsmqQueueAttribute.PathPattern,\r\n                Queues,\r\n                MsmqTransactionType.Internal);", span="31-34", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="MsmqJobQueueProviderFacts.cs"];
m0_15 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", span="29-29", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="MsmqJobQueueProviderFacts.cs"];
m0_0 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="10-10", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs"];
m0_1 [label="var provider = CreateProvider()", span="12-12", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs"];
m0_2 [label="var jobQueue = provider.GetJobQueue()", span="14-14", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", color=green, community=0, file="MsmqJobQueueProviderFacts.cs"];
m0_3 [label="Assert.NotNull(jobQueue)", span="16-16", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs"];
m0_4 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="10-10", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs"];
m0_6 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="MsmqJobQueueProviderFacts.cs"];
m0_8 [label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="20-20", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs"];
m0_9 [label="var provider = CreateProvider()", span="22-22", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs"];
m0_10 [label="var monitoring = provider.GetJobQueueMonitoringApi()", span="24-24", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="MsmqJobQueueProviderFacts.cs"];
m0_11 [label="Assert.NotNull(monitoring)", span="26-26", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs"];
m0_12 [label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="20-20", cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="MsmqJobQueueProviderFacts.cs"];
m0_16 [label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", span="26-26", cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.MsmqJobQueueProvider(string, System.Collections.Generic.IEnumerable<string>, Hangfire.SqlServer.Msmq.MsmqTransactionType)", file="MsmqJobQueueProviderFacts.cs"];
m0_13 [label="Entry Unk.GetJobQueueMonitoringApi", span="", cluster="Unk.GetJobQueueMonitoringApi", file="MsmqJobQueueProviderFacts.cs"];
m1_6 [label="var stateChangingContext = new StateChangingContext(\r\n                stateContext, stateMock.Object, ''Old'', connectionMock.Object)", span="27-28", cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.SucceededStateHandlerFacts()", file="RabbitMqJobQueueFacts.cs"];
m1_7 [label="_context = new StateApplyingContext(stateChangingContext)", span="30-30", cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.SucceededStateHandlerFacts()", file="RabbitMqJobQueueFacts.cs"];
m1_8 [label="Exit HangFire.Core.Tests.States.SucceededStateHandlerFacts.SucceededStateHandlerFacts()", span="18-18", cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.SucceededStateHandlerFacts()", file="RabbitMqJobQueueFacts.cs"];
m1_121 [label="_transaction.QueueCommand(x => x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn))", span="126-126", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_119 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="123-123", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_120 [label="_transaction.QueueCommand(x => x.DecrementValue(RedisStorage.Prefix + key))", span="125-125", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_122 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="123-123", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_5 [label="var connectionMock = new Mock<IStorageConnection>()", span="26-26", cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.SucceededStateHandlerFacts()", file="RabbitMqJobQueueFacts.cs"];
m1_83 [label="Entry Unk.EnqueueItemOnList", span="", cluster="Unk.EnqueueItemOnList", file="RabbitMqJobQueueFacts.cs"];
m1_57 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="RabbitMqJobQueueFacts.cs"];
m1_149 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", span="147-147", cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_150 [label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                RedisStorage.Prefix + key, value))", span="149-150", cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_151 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", span="147-147", cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_70 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="RabbitMqJobQueueFacts.cs"];
m1_104 [label="_transaction.QueueCommand(x => x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn))", span="115-115", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_102 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="112-112", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_103 [label="_transaction.QueueCommand(x => x.IncrementValue(RedisStorage.Prefix + key))", span="114-114", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_105 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="112-112", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_27 [label="Exit lambda expression", span="36-38", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_162 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", span="159-159", cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RabbitMqJobQueueFacts.cs"];
m1_163 [label="_transaction.QueueCommand(x => x.TrimList(\r\n                RedisStorage.Prefix + key, keepStartingFrom, keepEndingAt))", span="162-163", cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RabbitMqJobQueueFacts.cs"];
m1_164 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", span="159-159", cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RabbitMqJobQueueFacts.cs"];
m1_55 [label="Entry HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="27-27", cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_13 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="RabbitMqJobQueueFacts.cs"];
m1_62 [label="Entry Unk.SetEntryInHash", span="", cluster="Unk.SetEntryInHash", file="RabbitMqJobQueueFacts.cs"];
m1_91 [label="Entry Unk.AddItemToSet", span="", cluster="Unk.AddItemToSet", file="RabbitMqJobQueueFacts.cs"];
m1_22 [label="Exit lambda expression", span="32-34", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_23 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m1_24 [label="Entry Unk.ExpireEntryIn", span="", cluster="Unk.ExpireEntryIn", file="RabbitMqJobQueueFacts.cs"];
m1_25 [label="Entry lambda expression", span="36-38", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_26 [label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                expireIn)", span="36-38", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_12 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="25-25", cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RabbitMqJobQueueFacts.cs"];
m1_182 [label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                RedisStorage.Prefix + key, expireIn))", span="179-180", cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_181 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="177-177", cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_183 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="177-177", cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_9 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="RabbitMqJobQueueFacts.cs"];
m1_66 [label="Entry Unk.RemoveEntry", span="", cluster="Unk.RemoveEntry", file="RabbitMqJobQueueFacts.cs"];
m1_101 [label="Entry Unk.IncrementValue", span="", cluster="Unk.IncrementValue", file="RabbitMqJobQueueFacts.cs"];
m1_10 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="25-25", cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RabbitMqJobQueueFacts.cs"];
m1_31 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", span="45-45", cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RabbitMqJobQueueFacts.cs"];
m1_32 [label="_transaction.QueueCommand(x => ((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId)))", span="47-48", cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RabbitMqJobQueueFacts.cs"];
m1_33 [label="Entry HangFire.Core.Tests.States.SucceededStateHandlerFacts.Unapply_ShouldDecrementStatistics()", span="50-50", cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.Unapply_ShouldDecrementStatistics()", file="RabbitMqJobQueueFacts.cs"];
m1_34 [label="var handler = new SucceededState.Handler()", span="52-52", cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.Unapply_ShouldDecrementStatistics()", file="RabbitMqJobQueueFacts.cs"];
m1_35 [label="handler.Unapply(_context, _transactionMock.Object)", span="53-53", cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.Unapply_ShouldDecrementStatistics()", file="RabbitMqJobQueueFacts.cs"];
m1_36 [label="Entry lambda expression", span="47-48", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_37 [label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId))", span="47-48", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_135 [label="Entry Unk.AddItemToSortedSet", span="", cluster="Unk.AddItemToSortedSet", file="RabbitMqJobQueueFacts.cs"];
m1_112 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", span="118-118", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RabbitMqJobQueueFacts.cs"];
m1_113 [label="_transaction.QueueCommand(x => x.DecrementValue(RedisStorage.Prefix + key))", span="120-120", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RabbitMqJobQueueFacts.cs"];
m1_114 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", span="118-118", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RabbitMqJobQueueFacts.cs"];
m1_129 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", span="129-129", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_130 [label="_transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value))", span="131-132", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_131 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", span="129-129", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_42 [label="Exit lambda expression", span="49-50", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_142 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", span="141-141", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_143 [label="_transaction.QueueCommand(x => x.RemoveItemFromSortedSet(\r\n                RedisStorage.Prefix + key, value))", span="143-144", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_144 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", span="141-141", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_14 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="30-30", cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_56 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="RabbitMqJobQueueFacts.cs"];
m1_58 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="82-82", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_71 [label="var stateData = state.GetData(method)", span="84-84", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_73 [label="storedData.Add(''State'', state.StateName)", span="89-89", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_74 [label="storedData.Add(''Reason'', state.Reason)", span="90-90", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_76 [label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                JobHelper.ToJson(storedData)))", span="93-95", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_72 [label="var storedData = new Dictionary<string, string>(stateData)", span="88-88", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_75 [label="storedData.Add(''CreatedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow))", span="91-91", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_77 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="82-82", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_15 [label="_transaction.QueueCommand(x => x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                expireIn))", span="32-34", cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m1_38 [label="Exit lambda expression", span="47-48", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_11 [label="Entry HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", span="27-27", cluster="HangFire.Common.States.StateContext.StateContext(string, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_169 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", span="166-166", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", file="RabbitMqJobQueueFacts.cs"];
m1_170 [label="_transaction.QueueCommand(x => x.IncrementValue(\r\n                RedisStorage.Prefix + key))", span="168-169", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", file="RabbitMqJobQueueFacts.cs"];
m1_171 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", span="166-166", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementValue(string)", file="RabbitMqJobQueueFacts.cs"];
m1_39 [label="Entry Unk.Persist", span="", cluster="Unk.Persist", file="RabbitMqJobQueueFacts.cs"];
m1_21 [label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                expireIn)", span="32-34", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_29 [label="x.ExpireEntryIn(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                expireIn)", span="40-42", cluster="lambda expression", color=red, community=0, file="RabbitMqJobQueueFacts.cs"];
m1_20 [label="Entry HangFire.States.SucceededState.Handler.Handler()", span="38-38", cluster="HangFire.States.SucceededState.Handler.Handler()", file="RabbitMqJobQueueFacts.cs"];
m1_28 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RabbitMqJobQueueFacts.cs"];
m1_30 [label="Exit lambda expression", span="40-42", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_41 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_44 [label="((IRedisNativeClient)x).Persist(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId))", span="51-52", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_40 [label="x.DecrementCounter(''stats:succeeded'')", span="55-55", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_43 [label="Entry lambda expression", span="51-52", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_45 [label="HangFire.Core.Tests.States.SucceededStateHandlerFacts", span="", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_60 [label="x.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''State'',\r\n                state.StateName)", span="58-61", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_64 [label="x.RemoveEntry(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId))", span="63-64", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_68 [label="x.SetRangeInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                storedData)", span="75-77", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_59 [label="Entry lambda expression", span="58-61", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_63 [label="Entry lambda expression", span="63-64", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_67 [label="Entry lambda expression", span="75-77", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_61 [label="Exit lambda expression", span="58-61", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_65 [label="Exit lambda expression", span="63-64", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_69 [label="Exit lambda expression", span="75-77", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_80 [label="x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:history'', jobId),\r\n                JobHelper.ToJson(storedData))", span="93-95", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_79 [label="Entry lambda expression", span="93-95", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_81 [label="Exit lambda expression", span="93-95", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_89 [label="x.AddItemToSet(\r\n                RedisStorage.Prefix + ''queues'', queue)", span="100-101", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_93 [label="x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''queue:{0}'', queue), jobId)", span="103-104", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_88 [label="Entry lambda expression", span="100-101", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_92 [label="Entry lambda expression", span="103-104", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_90 [label="Exit lambda expression", span="100-101", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_94 [label="Exit lambda expression", span="103-104", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_99 [label="x.IncrementValue(RedisStorage.Prefix + key)", span="109-109", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_98 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_100 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_107 [label="x.IncrementValue(RedisStorage.Prefix + key)", span="114-114", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_110 [label="x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn)", span="115-115", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_106 [label="Entry lambda expression", span="114-114", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_109 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_108 [label="Exit lambda expression", span="114-114", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_111 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_116 [label="x.DecrementValue(RedisStorage.Prefix + key)", span="120-120", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_115 [label="Entry lambda expression", span="120-120", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_117 [label="Exit lambda expression", span="120-120", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_124 [label="x.DecrementValue(RedisStorage.Prefix + key)", span="125-125", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_127 [label="x.ExpireEntryIn(RedisStorage.Prefix + key, expireIn)", span="126-126", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_123 [label="Entry lambda expression", span="125-125", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_126 [label="Entry lambda expression", span="126-126", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_125 [label="Exit lambda expression", span="125-125", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_128 [label="Exit lambda expression", span="126-126", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_133 [label="x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value)", span="131-132", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_132 [label="Entry lambda expression", span="131-132", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_134 [label="Exit lambda expression", span="131-132", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_140 [label="x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value, score)", span="137-138", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_139 [label="Entry lambda expression", span="137-138", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_141 [label="Exit lambda expression", span="137-138", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_146 [label="x.RemoveItemFromSortedSet(\r\n                RedisStorage.Prefix + key, value)", span="143-144", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_145 [label="Entry lambda expression", span="143-144", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_147 [label="Exit lambda expression", span="143-144", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_153 [label="x.EnqueueItemOnList(\r\n                RedisStorage.Prefix + key, value)", span="149-150", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_152 [label="Entry lambda expression", span="149-150", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_154 [label="Exit lambda expression", span="149-150", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_159 [label="x.RemoveItemFromList(\r\n                RedisStorage.Prefix + key, value)", span="155-156", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_158 [label="Entry lambda expression", span="155-156", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_160 [label="Exit lambda expression", span="155-156", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_166 [label="x.TrimList(\r\n                RedisStorage.Prefix + key, keepStartingFrom, keepEndingAt)", span="162-163", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_165 [label="Entry lambda expression", span="162-163", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_167 [label="Exit lambda expression", span="162-163", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_173 [label="x.IncrementValue(\r\n                RedisStorage.Prefix + key)", span="168-169", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_172 [label="Entry lambda expression", span="168-169", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_174 [label="Exit lambda expression", span="168-169", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_179 [label="x.DecrementValue(RedisStorage.Prefix + key)", span="174-174", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_178 [label="Entry lambda expression", span="174-174", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_180 [label="Exit lambda expression", span="174-174", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_185 [label="x.ExpireEntryIn(\r\n                RedisStorage.Prefix + key, expireIn)", span="179-180", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_184 [label="Entry lambda expression", span="179-180", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_186 [label="Exit lambda expression", span="179-180", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m1_136 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", span="135-135", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RabbitMqJobQueueFacts.cs"];
m1_137 [label="_transaction.QueueCommand(x => x.AddItemToSortedSet(\r\n                RedisStorage.Prefix + key, value, score))", span="137-138", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RabbitMqJobQueueFacts.cs"];
m1_138 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", span="135-135", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RabbitMqJobQueueFacts.cs"];
m1_78 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="RabbitMqJobQueueFacts.cs"];
m1_175 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", span="172-172", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", file="RabbitMqJobQueueFacts.cs"];
m1_176 [label="_transaction.QueueCommand(x => x.DecrementValue(RedisStorage.Prefix + key))", span="174-174", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", file="RabbitMqJobQueueFacts.cs"];
m1_177 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", span="172-172", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementValue(string)", file="RabbitMqJobQueueFacts.cs"];
m1_95 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", span="107-107", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RabbitMqJobQueueFacts.cs"];
m1_96 [label="_transaction.QueueCommand(x => x.IncrementValue(RedisStorage.Prefix + key))", span="109-109", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RabbitMqJobQueueFacts.cs"];
m1_97 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", span="107-107", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RabbitMqJobQueueFacts.cs"];
m1_161 [label="Entry Unk.RemoveItemFromList", span="", cluster="Unk.RemoveItemFromList", file="RabbitMqJobQueueFacts.cs"];
m1_17 [label="var handler = new SucceededState.Handler()", span="36-36", cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.ShouldWorkOnlyWithSucceededState()", color=red, community=0, file="RabbitMqJobQueueFacts.cs"];
m1_16 [label="Entry HangFire.Core.Tests.States.SucceededStateHandlerFacts.ShouldWorkOnlyWithSucceededState()", span="34-34", cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.ShouldWorkOnlyWithSucceededState()", file="RabbitMqJobQueueFacts.cs"];
m1_18 [label="Assert.Equal(SucceededState.Name, handler.StateName)", span="37-37", cluster="HangFire.Core.Tests.States.SucceededStateHandlerFacts.ShouldWorkOnlyWithSucceededState()", file="RabbitMqJobQueueFacts.cs"];
m1_84 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="98-98", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_85 [label="_transaction.QueueCommand(x => x.AddItemToSet(\r\n                RedisStorage.Prefix + ''queues'', queue))", span="100-101", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_86 [label="_transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(RedisStorage.Prefix + ''queue:{0}'', queue), jobId))", span="103-104", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_87 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="98-98", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_19 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="RabbitMqJobQueueFacts.cs"];
m1_82 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="RabbitMqJobQueueFacts.cs"];
m1_0 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", span="13-13", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RabbitMqJobQueueFacts.cs"];
m1_3 [label="_transaction = transaction", span="17-17", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RabbitMqJobQueueFacts.cs"];
m1_4 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", span="13-13", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RabbitMqJobQueueFacts.cs"];
m1_2 [label="throw new ArgumentNullException(''transaction'');", span="15-15", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RabbitMqJobQueueFacts.cs"];
m1_1 [label="transaction == null", span="15-15", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RabbitMqJobQueueFacts.cs"];
m1_48 [label="_transaction.QueueCommand(x => x.RemoveEntry(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId)))", span="63-64", cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_46 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="55-55", cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_47 [label="_transaction.QueueCommand(x => x.SetEntryInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}'', jobId),\r\n                ''State'',\r\n                state.StateName))", span="58-61", cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_49 [label="var stateData = state.GetData(method)", span="66-66", cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_51 [label="storedData.Add(''State'', state.StateName)", span="73-73", cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_52 [label="_transaction.QueueCommand(x => x.SetRangeInHash(\r\n                String.Format(RedisStorage.Prefix + ''job:{0}:state'', jobId),\r\n                storedData))", span="75-77", cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_53 [label="AddJobState(jobId, state, method)", span="79-79", cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_50 [label="var storedData = new Dictionary<string, string>(stateData)", span="72-72", cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_54 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="55-55", cluster="HangFire.Redis.RedisWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="RabbitMqJobQueueFacts.cs"];
m1_118 [label="Entry Unk.DecrementValue", span="", cluster="Unk.DecrementValue", file="RabbitMqJobQueueFacts.cs"];
m1_168 [label="Entry Unk.TrimList", span="", cluster="Unk.TrimList", file="RabbitMqJobQueueFacts.cs"];
m1_155 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", span="153-153", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_156 [label="_transaction.QueueCommand(x => x.RemoveItemFromList(\r\n                RedisStorage.Prefix + key, value))", span="155-156", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_157 [label="Exit HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", span="153-153", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RabbitMqJobQueueFacts.cs"];
m1_148 [label="Entry Unk.RemoveItemFromSortedSet", span="", cluster="Unk.RemoveItemFromSortedSet", file="RabbitMqJobQueueFacts.cs"];
m1_187 [label="HangFire.Redis.RedisWriteOnlyTransaction", span="", file="RabbitMqJobQueueFacts.cs"];
m1_188 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_189 [label="System.TimeSpan", span="", file="RabbitMqJobQueueFacts.cs"];
m1_190 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_191 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_192 [label="HangFire.Common.States.JobState", span="", file="RabbitMqJobQueueFacts.cs"];
m1_193 [label=storedData, span="", file="RabbitMqJobQueueFacts.cs"];
m1_194 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_195 [label=storedData, span="", file="RabbitMqJobQueueFacts.cs"];
m1_196 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_197 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_198 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_199 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_200 [label="System.TimeSpan", span="", file="RabbitMqJobQueueFacts.cs"];
m1_201 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_202 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_203 [label="System.TimeSpan", span="", file="RabbitMqJobQueueFacts.cs"];
m1_204 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_205 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_206 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_207 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_208 [label=double, span="", file="RabbitMqJobQueueFacts.cs"];
m1_209 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_210 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_211 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_212 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_213 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_214 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_215 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_216 [label=int, span="", file="RabbitMqJobQueueFacts.cs"];
m1_217 [label=int, span="", file="RabbitMqJobQueueFacts.cs"];
m1_218 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_219 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_220 [label=string, span="", file="RabbitMqJobQueueFacts.cs"];
m1_221 [label="System.TimeSpan", span="", file="RabbitMqJobQueueFacts.cs"];
m2_39 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="54-54", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_40 [label="var processingJob = CreateProcessingJob()", span="56-56", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_41 [label="Assert.Equal(JobId, processingJob.JobId)", span="58-58", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_42 [label="Assert.Equal(Queue, processingJob.Queue)", span="59-59", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_43 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="54-54", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_32 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="45-45", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_33 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RedisProcessingJob(_redisConnection, JobId, null))", span="47-48", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_34 [label="Assert.Equal(''queue'', exception.ParamName)", span="50-50", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_35 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="45-45", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_25 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="36-36", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_26 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RedisProcessingJob(_redisConnection, null, Queue))", span="38-39", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_27 [label="Assert.Equal(''jobId'', exception.ParamName)", span="41-41", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_28 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="36-36", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_44 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", span="72-72", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_56 [label="return new RedisProcessingJob(_redisConnection, JobId, Queue);", span="74-74", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_57 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", span="72-72", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.CreateProcessingJob()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_51 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RabbitMqJobQueueProviderFacts.cs"];
m2_15 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="27-27", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_16 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RedisProcessingJob(null, JobId, Queue))", span="29-30", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_17 [label="Assert.Equal(''connection'', exception.ParamName)", span="32-32", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_18 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="27-27", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_8 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RabbitMqJobQueueProviderFacts.cs"];
m2_55 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="RabbitMqJobQueueProviderFacts.cs"];
m2_50 [label="Entry HangFire.Redis.RedisProcessingJob.Dispose()", span="40-40", cluster="HangFire.Redis.RedisProcessingJob.Dispose()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_45 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", span="63-63", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_46 [label="var processingJob = CreateProcessingJob()", span="65-65", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_47 [label="processingJob.Dispose()", span="67-67", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_48 [label="_transaction.Verify(x => x.Commit())", span="69-69", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_49 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", span="63-63", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.Dispose_CommitsTransaction()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RabbitMqJobQueueProviderFacts.cs"];
m2_9 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="RabbitMqJobQueueProviderFacts.cs"];
m2_52 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_11 [label="Entry lambda expression", span="21-21", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_12 [label="x.CreateTransaction()", span="21-21", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_13 [label="Exit lambda expression", span="21-21", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_21 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_22 [label="new RedisProcessingJob(null, JobId, Queue)", span="30-30", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_23 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_29 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_30 [label="new RedisProcessingJob(_redisConnection, null, Queue)", span="39-39", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_31 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_36 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_37 [label="new RedisProcessingJob(_redisConnection, JobId, null)", span="48-48", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_38 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_53 [label="x.Commit()", span="69-69", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_54 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m2_24 [label="Entry HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", span="25-25", cluster="HangFire.Redis.RedisProcessingJob.RedisProcessingJob(HangFire.Redis.RedisConnection, string, string)", file="RabbitMqJobQueueProviderFacts.cs"];
m2_6 [label="Entry Mock<IRedisClient>.cstr", span="", cluster="Mock<IRedisClient>.cstr", file="RabbitMqJobQueueProviderFacts.cs"];
m2_10 [label="Entry RedisConnection.cstr", span="", cluster="RedisConnection.cstr", file="RabbitMqJobQueueProviderFacts.cs"];
m2_14 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="RabbitMqJobQueueProviderFacts.cs"];
m2_7 [label="Entry Mock<IRedisTransaction>.cstr", span="", cluster="Mock<IRedisTransaction>.cstr", file="RabbitMqJobQueueProviderFacts.cs"];
m2_0 [label="Entry HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", span="16-16", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_1 [label="_redis = new Mock<IRedisClient>()", span="18-18", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_2 [label="_transaction = new Mock<IRedisTransaction>()", span="19-19", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_3 [label="_redis.Setup(x => x.CreateTransaction()).Returns(_transaction.Object)", span="21-21", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_4 [label="_redisConnection = new RedisConnection(_redis.Object)", span="23-23", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_5 [label="Exit HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", span="16-16", cluster="HangFire.Redis.Tests.RedisProcessingJobFacts.RedisProcessingJobFacts()", file="RabbitMqJobQueueProviderFacts.cs"];
m2_58 [label="HangFire.Redis.Tests.RedisProcessingJobFacts", span="", file="RabbitMqJobQueueProviderFacts.cs"];
m3_0 [label="Entry HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", span="27-27", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs"];
m3_1 [label="connection == null", span="29-29", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs"];
m3_3 [label="jobId == null", span="30-30", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs"];
m3_5 [label="queue == null", span="31-31", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs"];
m3_7 [label="_connection = connection", span="33-33", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m3_8 [label="JobId = jobId", span="35-35", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs"];
m3_9 [label="Queue = queue", span="36-36", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m3_2 [label="throw new ArgumentNullException(''connection'');", span="29-29", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs"];
m3_4 [label="throw new ArgumentNullException(''jobId'');", span="30-30", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs"];
m3_6 [label="throw new ArgumentNullException(''queue'');", span="31-31", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs"];
m3_10 [label="Exit HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", span="27-27", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(IDbConnection, string, string)", file="SqlServerConnectionFacts.cs"];
m3_11 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerConnectionFacts.cs"];
m3_15 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerConnectionFacts.cs"];
m3_12 [label="Entry HangFire.SqlServer.SqlServerProcessingJob.Dispose()", span="42-42", cluster="HangFire.SqlServer.SqlServerProcessingJob.Dispose()", file="SqlServerConnectionFacts.cs"];
m3_13 [label="_connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = JobId, queueName = Queue })", span="44-45", cluster="HangFire.SqlServer.SqlServerProcessingJob.Dispose()", color=red, community=0, file="SqlServerConnectionFacts.cs"];
m3_14 [label="Exit HangFire.SqlServer.SqlServerProcessingJob.Dispose()", span="42-42", cluster="HangFire.SqlServer.SqlServerProcessingJob.Dispose()", file="SqlServerConnectionFacts.cs"];
m3_16 [label="HangFire.SqlServer.SqlServerProcessingJob", span="", file="SqlServerConnectionFacts.cs"];
m4_48 [label="Entry System.Threading.Thread.Join()", span="0-0", cluster="System.Threading.Thread.Join()", file="SqlServerDistributedLockFacts.cs"];
m4_79 [label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", span="96-96", cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="SqlServerDistributedLockFacts.cs"];
m4_19 [label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(SqlConnection)", span="105-105", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(SqlConnection)", file="SqlServerDistributedLockFacts.cs"];
m4_77 [label="return new SqlServerStorage(connection);", span="107-107", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(SqlConnection)", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_78 [label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(SqlConnection)", span="105-105", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.CreateStorage(SqlConnection)", file="SqlServerDistributedLockFacts.cs"];
m4_13 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="SqlServerDistributedLockFacts.cs"];
m4_45 [label="Entry System.Threading.Thread.Start()", span="0-0", cluster="System.Threading.Thread.Start()", file="SqlServerDistributedLockFacts.cs"];
m4_10 [label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="23-23", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerDistributedLockFacts.cs"];
m4_11 [label="UseConnection(connection =>\r\n            {\r\n                var storage = CreateStorage(connection);\r\n\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerDistributedLock(storage, '''', _timeout));\r\n\r\n                Assert.Equal(''resource'', exception.ParamName);\r\n            })", span="25-33", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_12 [label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", span="23-23", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenResourceIsNullOrEmpty()", file="SqlServerDistributedLockFacts.cs"];
m4_47 [label="Entry System.Threading.ManualResetEventSlim.Set()", span="0-0", cluster="System.Threading.ManualResetEventSlim.Set()", file="SqlServerDistributedLockFacts.cs"];
m4_83 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerDistributedLockFacts.cs"];
m4_4 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerDistributedLockFacts.cs"];
m4_66 [label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", span="90-90", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerDistributedLockFacts.cs"];
m4_67 [label="UseConnection(sql =>\r\n            {\r\n                var storage = CreateStorage(sql);\r\n                var distributedLock = new SqlServerDistributedLock(storage, ''hello'', _timeout);\r\n                distributedLock.Dispose();\r\n\r\n                var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single();\r\n\r\n                Assert.Equal(''NoLock'', lockMode);\r\n            })", span="92-102", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_68 [label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", span="90-90", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="SqlServerDistributedLockFacts.cs"];
m4_76 [label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="83-83", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="SqlServerDistributedLockFacts.cs"];
m4_84 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SqlServerDistributedLockFacts.cs"];
m4_23 [label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", span="37-37", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerDistributedLockFacts.cs"];
m4_24 [label="UseConnection(sql =>\r\n            {\r\n                // ReSharper disable once UnusedVariable\r\n                var storage = CreateStorage(sql);\r\n                using (new SqlServerDistributedLock(storage, ''hello'', _timeout))\r\n                {\r\n                    var lockMode = sql.Query<string>(\r\n                        ''select applock_mode('public', 'hello', 'session')'').Single();\r\n\r\n                    Assert.Equal(''Exclusive'', lockMode);\r\n                }\r\n            })", span="39-50", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_25 [label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", span="37-37", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_AcquiresExclusiveApplicationLock_OnSession()", file="SqlServerDistributedLockFacts.cs"];
m4_9 [label="Entry Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", span="44-44", cluster="Hangfire.SqlServer.SqlServerDistributedLock.SqlServerDistributedLock(Hangfire.SqlServer.SqlServerStorage, string, System.TimeSpan)", file="SqlServerDistributedLockFacts.cs"];
m4_0 [label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="14-14", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerDistributedLockFacts.cs"];
m4_1 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerDistributedLock(null, ''hello'', _timeout))", span="16-17", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerDistributedLockFacts.cs", color=green, community=0];
m4_46 [label="Entry System.Threading.ManualResetEventSlim.Wait()", span="0-0", cluster="System.Threading.ManualResetEventSlim.Wait()", file="SqlServerDistributedLockFacts.cs"];
m4_43 [label="Entry System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", span="0-0", cluster="System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", file="SqlServerDistributedLockFacts.cs"];
m4_52 [label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", span="110-110", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerDistributedLockFacts.cs"];
m4_80 [label="var connection = ConnectionUtils.CreateConnection()", span="112-112", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerDistributedLockFacts.cs"];
m4_81 [label="action(connection)", span="114-114", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerDistributedLockFacts.cs"];
m4_82 [label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", span="110-110", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerDistributedLockFacts.cs"];
m4_69 [label="Entry lambda expression", span="92-102", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_6 [label="Entry lambda expression", span="17-17", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_7 [label="new SqlServerDistributedLock(null, ''hello'', _timeout)", span="17-17", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_8 [label="Exit lambda expression", span="17-17", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_14 [label="Entry lambda expression", span="25-33", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_15 [label="var storage = CreateStorage(connection)", span="27-27", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_16 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerDistributedLock(storage, '''', _timeout))", span="29-30", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_21 [label="new SqlServerDistributedLock(storage, '''', _timeout)", span="30-30", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_17 [label="Assert.Equal(''resource'', exception.ParamName)", span="32-32", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_20 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_22 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_18 [label="Exit lambda expression", span="25-33", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_26 [label="Entry lambda expression", span="39-50", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_27 [label="var storage = CreateStorage(sql)", span="42-42", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_28 [label="new SqlServerDistributedLock(storage, ''hello'', _timeout)", span="43-43", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_29 [label="var lockMode = sql.Query<string>(\r\n                        ''select applock_mode('public', 'hello', 'session')'').Single()", span="45-46", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_30 [label="Assert.Equal(''Exclusive'', lockMode)", span="48-48", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_31 [label="Exit lambda expression", span="39-50", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_50 [label="UseConnection(connection1 =>\r\n                {\r\n                    var storage = CreateStorage(connection1);\r\n                    using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                })", span="60-68", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_49 [label="Entry lambda expression", span="60-68", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_51 [label="Exit lambda expression", span="60-68", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_53 [label="Entry lambda expression", span="60-68", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_59 [label="Entry lambda expression", span="73-83", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_54 [label="var storage = CreateStorage(connection1)", span="62-62", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_55 [label="new SqlServerDistributedLock(storage, ''exclusive'', _timeout)", span="63-63", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_56 [label="lockAcquired.Set()", span="65-65", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_60 [label="var storage = CreateStorage(connection2)", span="75-75", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_61 [label="Assert.Throws<SqlServerDistributedLockException>(\r\n                    () =>\r\n                    {\r\n                        using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                        {\r\n                        }\r\n                    })", span="76-82", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_64 [label="new SqlServerDistributedLock(storage, ''exclusive'', _timeout)", span="79-79", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_62 [label="Exit lambda expression", span="73-83", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_63 [label="Entry lambda expression", span="77-82", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_65 [label="Exit lambda expression", span="77-82", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_70 [label="var storage = CreateStorage(sql)", span="94-94", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_71 [label="var distributedLock = new SqlServerDistributedLock(storage, ''hello'', _timeout)", span="95-95", cluster="lambda expression", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_72 [label="distributedLock.Dispose()", span="96-96", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_73 [label="var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single()", span="98-99", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_74 [label="Assert.Equal(''NoLock'', lockMode)", span="101-101", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_57 [label="releaseLock.Wait()", span="66-66", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_58 [label="Exit lambda expression", span="60-68", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_75 [label="Exit lambda expression", span="92-102", cluster="lambda expression", file="SqlServerDistributedLockFacts.cs"];
m4_32 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerDistributedLockFacts.cs"];
m4_2 [label="Assert.Equal(''storage'', exception.ParamName)", span="19-19", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_3 [label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="14-14", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerDistributedLockFacts.cs"];
m4_33 [label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", span="54-54", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs"];
m4_36 [label="var thread = new Thread(\r\n                () => UseConnection(connection1 =>\r\n                {\r\n                    var storage = CreateStorage(connection1);\r\n                    using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                }))", span="59-68", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_34 [label="var releaseLock = new ManualResetEventSlim(false)", span="56-56", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs"];
m4_35 [label="var lockAcquired = new ManualResetEventSlim(false)", span="57-57", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs"];
m4_37 [label="thread.Start()", span="69-69", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs"];
m4_41 [label="thread.Join()", span="86-86", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs"];
m4_39 [label="UseConnection(connection2 =>\r\n            {\r\n                var storage = CreateStorage(connection2);\r\n                Assert.Throws<SqlServerDistributedLockException>(\r\n                    () =>\r\n                    {\r\n                        using (new SqlServerDistributedLock(storage, ''exclusive'', _timeout))\r\n                        {\r\n                        }\r\n                    });\r\n            })", span="73-83", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=green, community=0, file="SqlServerDistributedLockFacts.cs"];
m4_38 [label="lockAcquired.Wait()", span="71-71", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs"];
m4_40 [label="releaseLock.Set()", span="85-85", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs"];
m4_42 [label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", span="54-54", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="SqlServerDistributedLockFacts.cs"];
m4_44 [label="Entry System.Threading.Thread.Thread(System.Threading.ThreadStart)", span="0-0", cluster="System.Threading.Thread.Thread(System.Threading.ThreadStart)", file="SqlServerDistributedLockFacts.cs"];
m4_85 [label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", span="", file="SqlServerDistributedLockFacts.cs"];
m4_86 [label=storage, span="", file="SqlServerDistributedLockFacts.cs"];
m4_87 [label=releaseLock, span="", file="SqlServerDistributedLockFacts.cs"];
m4_88 [label=lockAcquired, span="", file="SqlServerDistributedLockFacts.cs"];
m4_89 [label=storage, span="", file="SqlServerDistributedLockFacts.cs"];
m5_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="SqlServerFetchedJob.cs"];
m5_14 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="SqlServerFetchedJob.cs"];
m5_16 [label="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="SqlServerFetchedJob.cs"];
m5_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Enqueued state''))", span="48-49", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="SqlServerFetchedJob.cs"];
m5_17 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.EnqueuedStateFeature.TestInitialize()", file="SqlServerFetchedJob.cs"];
m5_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="SqlServerFetchedJob.cs"];
m5_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerFetchedJob.cs"];
m5_0 [label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SqlServerFetchedJob.cs"];
m5_1 [label="Exit Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", color=green, community=0, file="SqlServerFetchedJob.cs"];
m5_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Enqueued state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJob.cs"];
m5_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJob.cs"];
m5_4 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJob.cs"];
m5_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="SqlServerFetchedJob.cs"];
m5_9 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="SqlServerFetchedJob.cs"];
m5_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", color=green, community=0, file="SqlServerFetchedJob.cs"];
m5_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="SqlServerFetchedJob.cs"];
m5_12 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="SqlServerFetchedJob.cs"];
m5_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerFetchedJob.cs"];
m6_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="SqlServerFetchedJobFacts.cs"];
m6_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="SqlServerFetchedJobFacts.cs"];
m6_26 [label="Entry HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", file="SqlServerFetchedJobFacts.cs"];
m6_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", file="SqlServerFetchedJobFacts.cs"];
m6_28 [label="Exit HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioCleanup()", file="SqlServerFetchedJobFacts.cs"];
m6_50 [label="Entry HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", span="105-105", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_51 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple server filters should be executed depending on their order'', ((string[])(null)))", span="107-107", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_52 [label="this.ScenarioSetup(scenarioInfo)", span="109-109", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_53 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="111-111", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_57 [label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="119-120", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_54 [label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="113-113", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_55 [label="testRunner.And(''a server filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="115-115", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_56 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="117-117", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_58 [label="table2.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="121-122", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_59 [label="table2.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="123-124", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_60 [label="table2.AddRow(new string[] {\r\n                        ''second::OnPerformed''})", span="125-126", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_61 [label="table2.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="127-128", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_62 [label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table2, ''Then '')", span="130-130", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_63 [label="this.ScenarioCleanup()", span="132-132", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_64 [label="Exit HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", span="105-105", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerFiltersShouldBeExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_81 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", span="175-175", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_84 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="181-181", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_85 [label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="183-183", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_86 [label="testRunner.And(''a server filter \'second\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="185-185", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_93 [label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_88 [label="TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="189-190", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_89 [label="table4.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="191-192", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_90 [label="table4.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="193-194", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_91 [label="table4.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="195-196", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_92 [label="testRunner.Then(''only the following server filter methods were executed:'', ((string)(null)), table4, ''Then '')", span="198-198", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_83 [label="this.ScenarioSetup(scenarioInfo)", span="179-179", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_94 [label="this.ScenarioCleanup()", span="202-202", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_82 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter\'s OnPerformed could be skipped if there was an exception'', ((string[])(null)))", span="177-177", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_87 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="187-187", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_95 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", span="175-175", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterSOnPerformedCouldBeSkippedIfThereWasAnException()", file="SqlServerFetchedJobFacts.cs"];
m6_45 [label="Entry Unk.And", span="", cluster="Unk.And", file="SqlServerFetchedJobFacts.cs"];
m6_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="SqlServerFetchedJobFacts.cs"];
m6_124 [label="Entry HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", span="274-274", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_127 [label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="280-280", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_128 [label="testRunner.And(''a server exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="282-282", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_129 [label="testRunner.And(''a server exception filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="284-284", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_135 [label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="297-297", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_131 [label="TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="288-289", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_132 [label="table6.AddRow(new string[] {\r\n                        ''first''})", span="290-291", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_133 [label="table6.AddRow(new string[] {\r\n                        ''second''})", span="292-293", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_134 [label="testRunner.Then(''the server exception filters should be executed in the following order:'', ((string)(null)), table6, ''Then '')", span="295-295", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_126 [label="this.ScenarioSetup(scenarioInfo)", span="278-278", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_136 [label="this.ScenarioCleanup()", span="299-299", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_125 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple server exception filters are executed depending on their order'', ((string[])(null)))", span="276-276", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_130 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="286-286", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_137 [label="Exit HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", span="274-274", cluster="HangFire.Tests.ServerFiltersFeature.MultipleServerExceptionFiltersAreExecutedDependingOnTheirOrder()", file="SqlServerFetchedJobFacts.cs"];
m6_0 [label="Entry HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJobFacts.cs"];
m6_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Server filters'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJobFacts.cs"];
m6_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJobFacts.cs"];
m6_4 [label="Exit HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.ServerFiltersFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerFetchedJobFacts.cs"];
m6_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerFetchedJobFacts.cs"];
m6_22 [label="Entry HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerFetchedJobFacts.cs"];
m6_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerFetchedJobFacts.cs"];
m6_24 [label="Exit HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.ServerFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerFetchedJobFacts.cs"];
m6_46 [label="Entry Unk.When", span="", cluster="Unk.When", file="SqlServerFetchedJobFacts.cs"];
m6_48 [label="Entry Unk.AddRow", span="", cluster="Unk.AddRow", file="SqlServerFetchedJobFacts.cs"];
m6_65 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", span="139-139", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_68 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="145-145", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_69 [label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="147-147", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_70 [label="testRunner.And(''a server filter \'second\' that cancels the performing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="149-149", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_71 [label="testRunner.And(''a server filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="151-151", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_78 [label="testRunner.And(''only the following server filter methods were executed:'', ((string)(null)), table3, ''And '')", span="166-166", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_74 [label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="157-158", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_75 [label="table3.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="159-160", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_76 [label="table3.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="161-162", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_77 [label="table3.AddRow(new string[] {\r\n                        ''first::OnPerformed (with the canceled flag set)''})", span="163-164", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_73 [label="testRunner.Then(''the job should not be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="155-155", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_67 [label="this.ScenarioSetup(scenarioInfo)", span="143-143", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_79 [label="this.ScenarioCleanup()", span="168-168", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_66 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter should be able to cancel the performing of a job'', ((string[])(null)))", span="141-141", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_72 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="153-153", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_80 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", span="139-139", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterShouldBeAbleToCancelThePerformingOfAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_96 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", span="209-209", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_99 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="215-215", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_100 [label="testRunner.And(''a server filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="217-217", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_101 [label="testRunner.And(''a server filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="219-219", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_102 [label="testRunner.And(''a server filter \'third\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="221-221", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_111 [label="testRunner.And(''the state of the job should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="240-240", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_104 [label="TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="225-226", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_105 [label="table5.AddRow(new string[] {\r\n                        ''first::OnPerforming''})", span="227-228", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_106 [label="table5.AddRow(new string[] {\r\n                        ''second::OnPerforming''})", span="229-230", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_107 [label="table5.AddRow(new string[] {\r\n                        ''third::OnPerforming''})", span="231-232", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_108 [label="table5.AddRow(new string[] {\r\n                        ''second::OnPerformed''})", span="233-234", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_109 [label="table5.AddRow(new string[] {\r\n                        ''first::OnPerformed''})", span="235-236", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_110 [label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table5, ''Then '')", span="238-238", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_98 [label="this.ScenarioSetup(scenarioInfo)", span="213-213", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_112 [label="this.ScenarioCleanup()", span="242-242", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_97 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filter can handle the exception'', ((string[])(null)))", span="211-211", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_103 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="223-223", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_113 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", span="209-209", cluster="HangFire.Tests.ServerFiltersFeature.ServerFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_43 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerFetchedJobFacts.cs"];
m6_14 [label="Entry HangFire.Tests.ServerFiltersFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="SqlServerFetchedJobFacts.cs"];
m6_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Server filters''))", span="48-49", cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_16 [label="HangFire.Tests.ServerFiltersFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_17 [label="Exit HangFire.Tests.ServerFiltersFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.ServerFiltersFeature.TestInitialize()", file="SqlServerFetchedJobFacts.cs"];
m6_49 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="SqlServerFetchedJobFacts.cs"];
m6_44 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="SqlServerFetchedJobFacts.cs"];
m6_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerFetchedJobFacts.cs"];
m6_47 [label="Entry TechTalk.SpecFlow.Table.cstr", span="", cluster="TechTalk.SpecFlow.Table.cstr", file="SqlServerFetchedJobFacts.cs"];
m6_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="SqlServerFetchedJobFacts.cs"];
m6_114 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", span="250-250", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_117 [label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="257-257", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_118 [label="testRunner.And(''a server exception filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="259-259", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_121 [label="testRunner.And(''the state of the job should be Failed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="265-265", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_120 [label="testRunner.Then(''the server exception filter should be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="263-263", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_116 [label="this.ScenarioSetup(scenarioInfo)", span="255-255", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_122 [label="this.ScenarioCleanup()", span="267-267", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_115 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server exception filters are executed when there was an exception while performin'' +\r\n                    ''g a job'', ((string[])(null)))", span="252-253", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_119 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="261-261", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_123 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", span="250-250", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFiltersAreExecutedWhenThereWasAnExceptionWhilePerformingAJob()", file="SqlServerFetchedJobFacts.cs"];
m6_30 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", span="75-75", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs"];
m6_33 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs"];
m6_34 [label="testRunner.And(''a server filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_35 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs"];
m6_36 [label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="87-88", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_37 [label="table1.AddRow(new string[] {\r\n                        ''test::OnPerforming''})", span="89-90", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_38 [label="table1.AddRow(new string[] {\r\n                        ''test::OnPerformed''})", span="91-92", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs"];
m6_39 [label="testRunner.Then(''the server filter methods should be executed in the following order:'', ((string)(null)), table1, ''Then '')", span="94-94", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_40 [label="testRunner.And(''the job should be performed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="96-96", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_41 [label="this.ScenarioCleanup()", span="98-98", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", color=green, community=0, file="SqlServerFetchedJobFacts.cs"];
m6_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server filters should be executed when the worker performs the job'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs"];
m6_42 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", span="75-75", cluster="HangFire.Tests.ServerFiltersFeature.ServerFiltersShouldBeExecutedWhenTheWorkerPerformsTheJob()", file="SqlServerFetchedJobFacts.cs"];
m6_138 [label="Entry HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", span="306-306", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_141 [label="testRunner.Given(''an enqueued broken job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="312-312", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_142 [label="testRunner.And(''a server exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="314-314", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_143 [label="testRunner.And(''a server exception filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="316-316", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_144 [label="testRunner.And(''a server exception filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="318-318", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_151 [label="testRunner.And(''the state of the job should be Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="333-333", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_146 [label="TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="322-323", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_147 [label="table7.AddRow(new string[] {\r\n                        ''first''})", span="324-325", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_148 [label="table7.AddRow(new string[] {\r\n                        ''second''})", span="326-327", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_149 [label="table7.AddRow(new string[] {\r\n                        ''third''})", span="328-329", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_150 [label="testRunner.Then(''the following server exception filters should be executed:'', ((string)(null)), table7, ''Then '')", span="331-331", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_140 [label="this.ScenarioSetup(scenarioInfo)", span="310-310", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_152 [label="this.ScenarioCleanup()", span="335-335", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_139 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Server exception filter can handle the exception'', ((string[])(null)))", span="308-308", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_145 [label="testRunner.When(''the manager processes the next job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="320-320", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_153 [label="Exit HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", span="306-306", cluster="HangFire.Tests.ServerFiltersFeature.ServerExceptionFilterCanHandleTheException()", file="SqlServerFetchedJobFacts.cs"];
m6_154 [label="HangFire.Tests.ServerFiltersFeature", span="", file="SqlServerFetchedJobFacts.cs"];
m7_46 [label="builder.Append(''@'')", span="101-101", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueue.cs"];
m7_13 [label="throw new ArgumentException(''Queue array must be non-empty.'', ''queues'');", span="46-46", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_8 [label="_connectionString = connectionString", span="43-43", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs"];
m7_37 [label="Entry Unk.InfoFormat", span="", cluster="Unk.InfoFormat", file="SqlServerJobQueue.cs"];
m7_38 [label="Entry Unk.BeginTransaction", span="", cluster="Unk.BeginTransaction", file="SqlServerJobQueue.cs"];
m7_42 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", color=green, community=0, file="SqlServerJobQueue.cs"];
m7_41 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="SqlServerJobQueue.cs"];
m7_43 [label="Entry Unk.Rollback", span="", cluster="Unk.Rollback", file="SqlServerJobQueue.cs"];
m7_45 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)", span="29-29", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)", file="SqlServerJobQueue.cs"];
m7_44 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="SqlServerJobQueue.cs"];
m7_40 [label="var parts = _connectionString.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)\r\n                    .Select(x => x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries))\r\n                    .Select(x => new { Key = x[0].Trim(), Value = x[1].Trim() })\r\n                    .ToDictionary(x => x.Key, x => x.Value)", span="85-88", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueue.cs"];
m7_49 [label="connection.Execute(enqueueJobSql, new { jobId = jobId, queue = queue })", span="104-104", cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs"];
m7_50 [label="Exit Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", span="99-99", cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs"];
m7_47 [label="Entry Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", span="99-99", cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs"];
m7_39 [label="Entry System.TimeSpan.Negate()", span="0-0", cluster="System.TimeSpan.Negate()", file="SqlServerJobQueue.cs"];
m7_48 [label="string enqueueJobSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue) values (@jobId, @queue)''", span="101-102", cluster="Hangfire.SqlServer.SqlServerJobQueue.Enqueue(IDbConnection, string, string)", file="SqlServerJobQueue.cs"];
m7_52 [label="Hangfire.SqlServer.SqlServerJobQueue", span="", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueue.cs"];
m7_51 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerJobQueue.cs"];
m7_53 [label="Exit HangFire.SqlServer.SqlServerStorage.ToString()", span="79-79", cluster="HangFire.SqlServer.SqlServerStorage.ToString()", file="SqlServerJobQueue.cs"];
m7_20 [label="transaction = connection.BeginTransaction(IsolationLevel.ReadCommitted)", span="63-63", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_21 [label="fetchedJob = connection.Query<FetchedJob>(\r\n                               fetchJobSqlTemplate,\r\n                               new { queues = queues, timeout = _options.InvisibilityTimeout.Negate().TotalSeconds },\r\n                               transaction)\r\n                               .SingleOrDefault()", span="67-71", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_22 [label=SqlException, span="73-73", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_23 [label="transaction.Dispose()", span="75-75", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_24 [label="connection.Dispose()", span="76-76", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", color=red, community=0];
m7_19 [label="connection = _storage.CreateAndOpenConnection()", span="62-62", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_26 [label="fetchedJob == null", span="80-80", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_60 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="SqlServerJobQueue.cs"];
m7_56 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="SqlServerJobQueue.cs"];
m7_61 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerJobQueue.cs"];
m7_36 [label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0", cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="SqlServerJobQueue.cs"];
m7_0 [label="Entry Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="33-33", cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs"];
m7_1 [label="storage == null", span="35-35", cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs"];
m7_3 [label="connectionString == null", span="39-39", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs"];
m7_5 [label="options == null", span="40-40", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs"];
m7_6 [label="throw new ArgumentNullException(''options'');", span="40-40", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs"];
m7_2 [label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs"];
m7_4 [label="throw new ArgumentNullException(''connectionString'');", span="39-39", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs"];
m7_7 [label="_options = options", span="42-42", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", file="SqlServerJobQueue.cs"];
m7_31 [label="cancellationToken.ThrowIfCancellationRequested()", span="87-87", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_34 [label="Exit Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="43-43", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", color=green, community=0, file="SqlServerJobQueue.cs"];
m7_33 [label="return new SqlServerFetchedJob(\r\n                connection,\r\n                transaction,\r\n                fetchedJob.Id,\r\n                fetchedJob.JobId.ToString(CultureInfo.InvariantCulture),\r\n                fetchedJob.Queue);", span="91-96", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", color=red, community=0];
m7_32 [label="fetchedJob == null", span="89-89", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_35 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerJobQueue.cs"];
m7_57 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="SqlServerJobQueue.cs"];
m7_80 [label="Entry Unk.Open", span="", cluster="Unk.Open", file="SqlServerJobQueue.cs"];
m7_68 [label="Entry Unk.Trim", span="", cluster="Unk.Trim", file="SqlServerJobQueue.cs"];
m7_79 [label="Entry SqlConnection.cstr", span="", cluster="SqlConnection.cstr", file="SqlServerJobQueue.cs"];
m7_59 [label="Entry Unk.AppendFormat", span="", cluster="Unk.AppendFormat", file="SqlServerJobQueue.cs"];
m7_16 [label="SqlTransaction transaction = null", span="50-50", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_17 [label="string fetchJobSqlTemplate = @''\r\ndelete top (1) from HangFire.JobQueue with (readpast, updlock)\r\noutput DELETED.Id, DELETED.JobId, DELETED.Queue\r\nwhere (FetchedAt is null or FetchedAt < DATEADD(second, @timeout, GETUTCDATE()))\r\nand Queue in @queues''", span="52-56", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_18 [label="cancellationToken.ThrowIfCancellationRequested()", span="60-60", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_30 [label="cancellationToken.WaitHandle.WaitOne(_options.QueuePollInterval)", span="86-86", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_25 [label="throw;", span="77-77", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_10 [label="queues == null", span="45-45", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_9 [label="Entry Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="43-43", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_11 [label="throw new ArgumentNullException(''queues'');", span="45-45", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_12 [label="queues.Length == 0", span="46-46", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_54 [label="Entry string.Split(char[], System.StringSplitOptions)", span="0-0", cluster="string.Split(char[], System.StringSplitOptions)", file="SqlServerJobQueue.cs"];
m7_72 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_62 [label="Entry lambda expression", span="86-86", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_65 [label="Entry lambda expression", span="87-87", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_69 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_63 [label="x.Split(new[] { '=' }, StringSplitOptions.RemoveEmptyEntries)", span="86-86", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_64 [label="Exit lambda expression", span="86-86", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_67 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_66 [label="new { Key = x[0].Trim(), Value = x[1].Trim() }", span="87-87", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_71 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_70 [label="x.Key", span="88-88", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_73 [label="x.Value", span="88-88", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_74 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="SqlServerJobQueue.cs"];
m7_55 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="SqlServerJobQueue.cs"];
m7_27 [label="transaction.Rollback()", span="82-82", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_28 [label="transaction.Dispose()", span="83-83", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_29 [label="connection.Dispose()", span="84-84", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs", color=red, community=0];
m7_15 [label="SqlConnection connection = null", span="49-49", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_14 [label="FetchedJob fetchedJob = null", span="48-48", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="SqlServerJobQueue.cs"];
m7_75 [label="var connection = new SqlConnection(_connectionString)", span="124-124", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueue.cs"];
m7_76 [label="connection.Open()", span="125-125", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueue.cs"];
m7_77 [label="return connection;", span="127-127", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueue.cs"];
m7_78 [label="Exit HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="122-122", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", file="SqlServerJobQueue.cs"];
m7_58 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="SqlServerJobQueue.cs"];
m7_81 [label="HangFire.SqlServer.SqlServerStorage", span="", file="SqlServerJobQueue.cs"];
m8_57 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", span="119-119", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerJobQueueFacts.cs"];
m8_88 [label="return new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, jobId, queue);", span="121-121", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerJobQueueFacts.cs"];
m8_89 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", span="119-119", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.CreateFetchedJob(string, string)", file="SqlServerJobQueueFacts.cs"];
m8_7 [label="Entry Mock<SqlServerStorage>.cstr", span="", cluster="Mock<SqlServerStorage>.cstr", file="SqlServerJobQueueFacts.cs"];
m8_19 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="36-36", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_20 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, null, _transaction.Object, JobId, Queue))", span="38-39", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_21 [label="Assert.Equal(''connection'', exception.ParamName)", span="41-41", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_22 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="36-36", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_5 [label="Entry Mock<IDbConnection>.cstr", span="", cluster="Mock<IDbConnection>.cstr", file="SqlServerJobQueueFacts.cs"];
m8_13 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerJobQueueFacts.cs"];
m8_0 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", span="19-19", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerJobQueueFacts.cs"];
m8_1 [label="_connection = new Mock<IDbConnection>()", span="21-21", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", color=red, community=0, file="SqlServerJobQueueFacts.cs"];
m8_2 [label="_transaction = new Mock<IDbTransaction>()", span="22-22", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerJobQueueFacts.cs"];
m8_3 [label="_storage = new Mock<SqlServerStorage>(ConnectionUtils.GetConnectionString())", span="23-23", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerJobQueueFacts.cs"];
m8_4 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", span="19-19", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.SqlServerFetchedJobFacts()", file="SqlServerJobQueueFacts.cs"];
m8_9 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="27-27", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_10 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(null, _connection.Object, _transaction.Object, JobId, Queue))", span="29-30", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_11 [label="Assert.Equal(''storage'', exception.ParamName)", span="32-32", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_12 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="27-27", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_18 [label="Entry SqlServerFetchedJob.cstr", span="", cluster="SqlServerFetchedJob.cstr", file="SqlServerJobQueueFacts.cs"];
m8_47 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="72-72", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerJobQueueFacts.cs"];
m8_48 [label="var fetchedJob = new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, Queue)", span="74-74", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerJobQueueFacts.cs"];
m8_49 [label="Assert.Equal(JobId, fetchedJob.JobId)", span="76-76", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerJobQueueFacts.cs"];
m8_50 [label="Assert.Equal(Queue, fetchedJob.Queue)", span="77-77", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerJobQueueFacts.cs"];
m8_51 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="72-72", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="SqlServerJobQueueFacts.cs"];
m8_73 [label="Entry Unk.Rollback", span="", cluster="Unk.Rollback", file="SqlServerJobQueueFacts.cs"];
m8_26 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", span="45-45", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_27 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, null, JobId, Queue))", span="47-48", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_28 [label="Assert.Equal(''transaction'', exception.ParamName)", span="50-50", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_29 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", span="45-45", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_74 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", span="107-107", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerJobQueueFacts.cs"];
m8_75 [label="var processingJob = CreateFetchedJob(''1'', ''queue'')", span="109-109", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerJobQueueFacts.cs"];
m8_76 [label="processingJob.Dispose()", span="112-112", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerJobQueueFacts.cs"];
m8_77 [label="_transaction.Verify(x => x.Dispose())", span="115-115", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerJobQueueFacts.cs", color=green, community=0];
m8_78 [label="_connection.Verify(x => x.Dispose())", span="116-116", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerJobQueueFacts.cs"];
m8_79 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", span="107-107", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Dispose_DisposesTheTransactionAndConnection()", file="SqlServerJobQueueFacts.cs"];
m8_33 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="54-54", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_34 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, null, Queue))", span="56-57", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_35 [label="Assert.Equal(''jobId'', exception.ParamName)", span="59-59", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_36 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="54-54", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_6 [label="Entry Mock<IDbTransaction>.cstr", span="", cluster="Mock<IDbTransaction>.cstr", file="SqlServerJobQueueFacts.cs"];
m8_84 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="SqlServerJobQueueFacts.cs"];
m8_58 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="53-53", cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", file="SqlServerJobQueueFacts.cs"];
m8_85 [label="Entry lambda expression", span="116-116", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_15 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_16 [label="new SqlServerFetchedJob(null, _connection.Object, _transaction.Object, JobId, Queue)", span="30-30", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_17 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_23 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_24 [label="new SqlServerFetchedJob(_storage.Object, null, _transaction.Object, JobId, Queue)", span="39-39", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_25 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_30 [label="Entry lambda expression", span="48-48", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_31 [label="new SqlServerFetchedJob(_storage.Object, _connection.Object, null, JobId, Queue)", span="48-48", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_32 [label="Exit lambda expression", span="48-48", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_37 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_38 [label="new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, null, Queue)", span="57-57", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_39 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_44 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_45 [label="new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, null)", span="66-66", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_46 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_60 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_61 [label="x.Commit()", span="90-90", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_62 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_70 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_71 [label="x.Rollback()", span="103-103", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_72 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_81 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_82 [label="x.Dispose()", span="115-115", cluster="lambda expression", file="SqlServerJobQueueFacts.cs", color=green, community=0];
m8_83 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_86 [label="x.Dispose()", span="116-116", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_87 [label="Exit lambda expression", span="116-116", cluster="lambda expression", file="SqlServerJobQueueFacts.cs"];
m8_64 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", span="94-94", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerJobQueueFacts.cs"];
m8_65 [label="var processingJob = CreateFetchedJob(''1'', ''default'')", span="97-97", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerJobQueueFacts.cs"];
m8_66 [label="processingJob.Requeue()", span="100-100", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerJobQueueFacts.cs"];
m8_67 [label="_transaction.Verify(x => x.Rollback())", span="103-103", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerJobQueueFacts.cs"];
m8_68 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", span="94-94", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Requeue_RollsbackTheTransaction()", file="SqlServerJobQueueFacts.cs"];
m8_63 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="SqlServerJobQueueFacts.cs"];
m8_69 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="58-58", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", file="SqlServerJobQueueFacts.cs"];
m8_8 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="SqlServerJobQueueFacts.cs"];
m8_80 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="63-63", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", file="SqlServerJobQueueFacts.cs"];
m8_59 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerJobQueueFacts.cs"];
m8_52 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", span="81-81", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerJobQueueFacts.cs"];
m8_53 [label="var processingJob = CreateFetchedJob(''1'', ''default'')", span="84-84", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerJobQueueFacts.cs"];
m8_54 [label="processingJob.RemoveFromQueue()", span="87-87", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerJobQueueFacts.cs"];
m8_55 [label="_transaction.Verify(x => x.Commit())", span="90-90", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerJobQueueFacts.cs"];
m8_56 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", span="81-81", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.RemoveFromQueue_CommitsTheTransaction()", file="SqlServerJobQueueFacts.cs"];
m8_40 [label="Entry Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="63-63", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_41 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerFetchedJob(_storage.Object, _connection.Object, _transaction.Object, JobId, null))", span="65-66", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_42 [label="Assert.Equal(''queue'', exception.ParamName)", span="68-68", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_43 [label="Exit Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="63-63", cluster="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="SqlServerJobQueueFacts.cs"];
m8_90 [label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts", span="", file="SqlServerJobQueueFacts.cs"];
m9_0 [label="Entry HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", span="27-27", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs"];
m9_1 [label="transaction == null", span="29-29", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs"];
m9_3 [label="jobId == null", span="30-30", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs"];
m9_5 [label="_transaction = transaction", span="32-32", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs"];
m9_6 [label="JobId = jobId", span="34-34", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs"];
m9_2 [label="throw new ArgumentNullException(''transaction'');", span="29-29", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs"];
m9_4 [label="throw new ArgumentNullException(''jobId'');", span="30-30", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs"];
m9_7 [label="Exit HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", span="27-27", cluster="HangFire.SqlServer.MessageQueueProcessingJob.MessageQueueProcessingJob(MessageQueueTransaction, string)", file="SqlServerStorage.cs"];
m9_8 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorage.cs"];
m9_17 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="SqlServerStorage.cs"];
m9_9 [label="Entry HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", span="39-39", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs"];
m9_10 [label=_disposed, span="41-41", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs"];
m9_11 [label="return;", span="41-41", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs"];
m9_12 [label="_disposed = true", span="43-43", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs"];
m9_13 [label="_transaction.Commit()", span="45-45", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs"];
m9_14 [label="_transaction.Dispose()", span="46-46", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs"];
m9_15 [label="Exit HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", span="39-39", cluster="HangFire.SqlServer.MessageQueueProcessingJob.Dispose()", file="SqlServerStorage.cs"];
m9_18 [label="HangFire.SqlServer.MessageQueueProcessingJob", span="", file="SqlServerStorage.cs"];
m10_6 [label="Entry HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", span="17-17", cluster="HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageFacts.cs"];
m10_7 [label="var state = new ScheduledState(DateTime.UtcNow.AddDays(1))", span="19-19", cluster="HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageFacts.cs"];
m10_8 [label="var data = state.GetData(null)", span="20-20", cluster="HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageFacts.cs"];
m10_9 [label="DictionaryAssert.ContainsFollowingItems(\r\n                new Dictionary<string, string>\r\n                {\r\n                    { ''ScheduledAt'', ''<UtcNow timestamp>'' },\r\n                    { ''EnqueueAt'', ''<Tomorrow timestamp>'' },\r\n                },\r\n                data)", span="22-28", cluster="HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageFacts.cs"];
m10_10 [label="Exit HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", span="17-17", cluster="HangFire.Core.Tests.States.ScheduledStateFacts.GetStateData_ReturnsCorrectData()", file="SqlServerStorageFacts.cs"];
m10_12 [label="Entry HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", span="36-36", cluster="HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", file="SqlServerStorageFacts.cs"];
m10_13 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerStorageFacts.cs"];
m10_4 [label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="28-28", cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="SqlServerStorageFacts.cs"];
m10_14 [label="Entry HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", span="9-9", cluster="HangFire.Core.Tests.DictionaryAssert.ContainsFollowingItems(System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="SqlServerStorageFacts.cs"];
m10_0 [label="Entry HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", span="10-10", cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="SqlServerStorageFacts.cs"];
m10_1 [label="var state = new ScheduledState(DateTime.UtcNow)", span="12-12", cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="SqlServerStorageFacts.cs"];
m10_2 [label="Assert.Equal(ScheduledState.Name, state.StateName)", span="13-13", cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="SqlServerStorageFacts.cs"];
m10_3 [label="Exit HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", span="10-10", cluster="HangFire.Core.Tests.States.ScheduledStateFacts.StateName_IsCorrect()", file="SqlServerStorageFacts.cs"];
m10_11 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="SqlServerStorageFacts.cs"];
m11_22 [label="Entry HangFire.Tests.States.FailedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.FailedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerStorageOptions.cs"];
m11_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.States.FailedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerStorageOptions.cs"];
m11_24 [label="Exit HangFire.Tests.States.FailedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.FailedStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerStorageOptions.cs"];
m11_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="SqlServerStorageOptions.cs"];
m11_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="SqlServerStorageOptions.cs"];
m11_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="SqlServerStorageOptions.cs"];
m11_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", file="SqlServerStorageOptions.cs"];
m11_12 [label="Exit HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", file="SqlServerStorageOptions.cs"];
m11_36 [label="Entry HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", span="85-85", cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs"];
m11_37 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name is \'Failed\''', ((string[])(null)))", span="87-87", cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs"];
m11_38 [label="this.ScenarioSetup(scenarioInfo)", span="89-89", cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs"];
m11_39 [label="this.FeatureBackground()", span="91-91", cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs"];
m11_40 [label="testRunner.Then(''the state name is equal to \'Failed\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="93-93", cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs"];
m11_41 [label="this.ScenarioCleanup()", span="95-95", cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs"];
m11_42 [label="Exit HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", span="85-85", cluster="HangFire.Tests.States.FailedStateFeature.StateNameIsFailed()", file="SqlServerStorageOptions.cs"];
m11_0 [label="Entry HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorageOptions.cs"];
m11_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", color=green, community=0, file="SqlServerStorageOptions.cs"];
m11_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SqlServerStorageOptions.cs"];
m11_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorageOptions.cs"];
m11_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Failed state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorageOptions.cs"];
m11_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorageOptions.cs"];
m11_4 [label="Exit HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.FailedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SqlServerStorageOptions.cs"];
m11_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="SqlServerStorageOptions.cs"];
m11_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SqlServerStorageOptions.cs"];
m11_9 [label="Entry HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", file="SqlServerStorageOptions.cs"];
m11_35 [label="Entry Unk.And", span="", cluster="Unk.And", file="SqlServerStorageOptions.cs"];
m11_18 [label="Entry HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", file="SqlServerStorageOptions.cs"];
m11_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", file="SqlServerStorageOptions.cs"];
m11_20 [label="Exit HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.FailedStateFeature.ScenarioTearDown()", file="SqlServerStorageOptions.cs"];
m11_26 [label="Entry HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", file="SqlServerStorageOptions.cs"];
m11_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", file="SqlServerStorageOptions.cs"];
m11_28 [label="Exit HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.FailedStateFeature.ScenarioCleanup()", file="SqlServerStorageOptions.cs"];
m11_13 [label="Hangfire.SqlServer.SqlServerStorageOptions", span="", cluster="Unk.OnFeatureEnd", file="SqlServerStorageOptions.cs"];
m11_67 [label="Entry Unk.When", span="", cluster="Unk.When", file="SqlServerStorageOptions.cs"];
m11_59 [label="Entry HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", span="135-135", cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_60 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After applying it should add the job to the failed set'', ((string[])(null)))", span="137-137", cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_61 [label="this.ScenarioSetup(scenarioInfo)", span="139-139", cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_62 [label="this.FeatureBackground()", span="141-141", cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_63 [label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="143-143", cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_64 [label="testRunner.Then(''the job should be added to the failed set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="145-145", cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_65 [label="this.ScenarioCleanup()", span="147-147", cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_66 [label="Exit HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", span="135-135", cluster="HangFire.Tests.States.FailedStateFeature.AfterApplyingItShouldAddTheJobToTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_58 [label="Entry Unk.AddRow", span="", cluster="Unk.AddRow", file="SqlServerStorageOptions.cs"];
m11_68 [label="Entry HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", span="154-154", cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_69 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should remove the job from the failed set'', ((string[])(null)))", span="156-156", cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_70 [label="this.ScenarioSetup(scenarioInfo)", span="158-158", cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_71 [label="this.FeatureBackground()", span="160-160", cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_72 [label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="162-162", cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_73 [label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="164-164", cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_74 [label="testRunner.Then(''the job should be removed from the failed set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="166-166", cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_75 [label="this.ScenarioCleanup()", span="168-168", cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_76 [label="Exit HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", span="154-154", cluster="HangFire.Tests.States.FailedStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheFailedSet()", file="SqlServerStorageOptions.cs"];
m11_43 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerStorageOptions.cs"];
m11_45 [label="Entry HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_46 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It has the correct properties set'', ((string[])(null)))", span="104-104", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_47 [label="this.ScenarioSetup(scenarioInfo)", span="106-106", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_48 [label="this.FeatureBackground()", span="108-108", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_49 [label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_50 [label="table1.AddRow(new string[] {\r\n                        ''FailedAt'',\r\n                        ''<UtcNow timestamp>''})", span="113-115", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_51 [label="table1.AddRow(new string[] {\r\n                        ''ExceptionType'',\r\n                        ''System.InvalidOperationException''})", span="116-118", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_52 [label="table1.AddRow(new string[] {\r\n                        ''ExceptionMessage'',\r\n                        ''Hello''})", span="119-121", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_53 [label="table1.AddRow(new string[] {\r\n                        ''ExceptionDetails'',\r\n                        ''<Non-empty>''})", span="122-124", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_54 [label="testRunner.Then(''properties table contains the following items:'', ((string)(null)), table1, ''Then '')", span="126-126", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_55 [label="this.ScenarioCleanup()", span="128-128", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_56 [label="Exit HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102", cluster="HangFire.Tests.States.FailedStateFeature.ItHasTheCorrectPropertiesSet()", file="SqlServerStorageOptions.cs"];
m11_44 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="SqlServerStorageOptions.cs"];
m11_34 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="SqlServerStorageOptions.cs"];
m11_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.States.FailedStateFeature.FeatureTearDown()", file="SqlServerStorageOptions.cs"];
m11_57 [label="Entry TechTalk.SpecFlow.Table.cstr", span="", cluster="TechTalk.SpecFlow.Table.cstr", file="SqlServerStorageOptions.cs"];
m11_30 [label="Entry HangFire.Tests.States.FailedStateFeature.FeatureBackground()", span="71-71", cluster="HangFire.Tests.States.FailedStateFeature.FeatureBackground()", file="SqlServerStorageOptions.cs"];
m11_31 [label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75", cluster="HangFire.Tests.States.FailedStateFeature.FeatureBackground()", file="SqlServerStorageOptions.cs"];
m11_32 [label="testRunner.And(''the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="77-77", cluster="HangFire.Tests.States.FailedStateFeature.FeatureBackground()", file="SqlServerStorageOptions.cs"];
m11_33 [label="Exit HangFire.Tests.States.FailedStateFeature.FeatureBackground()", span="71-71", cluster="HangFire.Tests.States.FailedStateFeature.FeatureBackground()", file="SqlServerStorageOptions.cs"];
m11_14 [label="Entry HangFire.Tests.States.FailedStateFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="SqlServerStorageOptions.cs"];
m11_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Failed state''))", span="48-49", cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="SqlServerStorageOptions.cs"];
m11_16 [label="HangFire.Tests.States.FailedStateFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="SqlServerStorageOptions.cs"];
m11_17 [label="Exit HangFire.Tests.States.FailedStateFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.FailedStateFeature.TestInitialize()", file="SqlServerStorageOptions.cs"];
m11_77 [label="HangFire.Tests.States.FailedStateFeature", span="", file="SqlServerStorageOptions.cs"];
m12_587 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_153 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="162-162", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_154 [label="UseConnection(sql =>\r\n            {\r\n                var correctJobQueue = new Mock<IPersistentJobQueue>();\r\n                var correctProvider = new Mock<IPersistentJobQueueProvider>();\r\n                correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object);\r\n\r\n                _queueProviders.Add(correctProvider.Object, new [] { ''default'' });\r\n\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''));\r\n\r\n                correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''));\r\n            })", span="164-176", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_155 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", span="162-162", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_726 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="287-287", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_627 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_628 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="724-725", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_629 [label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", span="727-739", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_630 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_119 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="129-129", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_120 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="131-134", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_121 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="136-158", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_122 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="129-129", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_393 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_394 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="456-468", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_395 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_614 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_615 [label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)));\r\n            })", span="714-718", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_616 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_211 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="132-132", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_419 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_420 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="491-502", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_421 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_318 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_48 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_152 [label="Entry Unk.AddJobState", span="", cluster="Unk.AddJobState", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_476 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_477 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="566-577", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_478 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_782 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_783 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="899-905", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_784 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_655 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="265-265", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_319 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_320 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="357-368", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_321 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_559 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_560 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''));\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="655-670", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_561 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_589 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_590 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", span="688-694", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_591 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_637 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_407 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_408 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="474-485", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_409 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_177 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_178 [label="return connection\r\n                .Query(''select * from HangFire.Job where Id = @id'', new { id = jobId })\r\n                .Single();", span="181-183", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_179 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_761 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="298-298", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_343 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="173-173", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_50 [label="Entry Unk.GetTestJob", span="", cluster="Unk.GetTestJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_7 [label="Entry Mock<IPersistentJobQueue>.cstr", span="", cluster="Mock<IPersistentJobQueue>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_816 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_817 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="937-943", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_818 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_267 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="291-291", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_268 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="293-302", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_269 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", span="291-291", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_829 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="320-320", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_193 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="125-125", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_795 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="309-309", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_514 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_515 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="612-618", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_516 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_691 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="276-276", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_23 [label="Entry SqlServerWriteOnlyTransaction.cstr", span="", cluster="SqlServerWriteOnlyTransaction.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_280 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="153-153", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_194 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="202-202", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_195 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="204-218", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_196 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="202-202", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_293 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="323-323", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_294 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="325-336", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_295 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", span="323-323", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_513 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="214-214", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_441 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_52 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_677 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_678 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="784-790", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_679 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_5 [label="Entry Mock<IPersistentJobQueueProvider>.cstr", span="", cluster="Mock<IPersistentJobQueueProvider>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_0 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="17-17", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_1 [label="var defaultProvider = new Mock<IPersistentJobQueueProvider>()", span="19-19", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_2 [label="defaultProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                .Returns(new Mock<IPersistentJobQueue>().Object)", span="20-21", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_3 [label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="23-23", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_4 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="17-17", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_830 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_831 [label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="949-951", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_832 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", span="953-969", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_833 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_692 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_693 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="796-798", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_694 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", span="800-817", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_695 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_847 [label="Entry lambda expression", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_10 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_11 [label="x.GetJobQueue(It.IsNotNull<IDbConnection>())", span="20-20", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_12 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_20 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_21 [label="new SqlServerWriteOnlyTransaction(null, null, _queueProviders)", span="30-30", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_22 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_28 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_29 [label="new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null, null)", span="39-39", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_30 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_38 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_39 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="55-55", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_37 [label="Entry lambda expression", span="52-64", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_40 [label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="57-57", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_41 [label="var job = GetTestJob(sql, jobId)", span="59-59", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_43 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="62-62", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_56 [label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="57-57", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_55 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_42 [label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1))", span="60-60", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_44 [label="Assert.Null(anotherJob.ExpireAt)", span="63-63", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_45 [label="Exit lambda expression", span="52-64", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_57 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_65 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="77-77", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_66 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="78-78", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_64 [label="Entry lambda expression", span="75-87", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_67 [label="Commit(sql, x => x.PersistJob(jobId))", span="80-80", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_68 [label="var job = GetTestJob(sql, jobId)", span="82-82", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_70 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="85-85", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_75 [label="x.PersistJob(jobId)", span="80-80", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_74 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_69 [label="Assert.Null(job.ExpireAt)", span="83-83", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_71 [label="Assert.NotNull(anotherJob.ExpireAt)", span="86-86", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_72 [label="Exit lambda expression", span="75-87", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_76 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_83 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="100-100", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_84 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="101-101", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_82 [label="Entry lambda expression", span="98-125", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_89 [label="Commit(sql, x => x.SetJobState(jobId, state.Object))", span="109-109", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_90 [label="var job = GetTestJob(sql, jobId)", span="111-111", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_93 [label="var anotherJob = GetTestJob(sql, anotherJobId)", span="115-115", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_96 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="119-119", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_116 [label="x.SetJobState(jobId, state.Object)", span="109-109", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_97 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="120-120", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_85 [label="var state = new Mock<IState>()", span="103-103", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_86 [label="state.Setup(x => x.Name).Returns(''State'')", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_87 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="105-105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_88 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="106-107", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_105 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_108 [label="Entry lambda expression", span="105-105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_111 [label="Entry lambda expression", span="106-106", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_115 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_91 [label="Assert.Equal(''State'', job.StateName)", span="112-112", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_92 [label="Assert.NotNull(job.StateId)", span="113-113", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_94 [label="Assert.Null(anotherJob.StateName)", span="116-116", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_95 [label="Assert.Null(anotherJob.StateId)", span="117-117", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_98 [label="Assert.Equal(''State'', jobState.Name)", span="121-121", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_99 [label="Assert.Equal(''Reason'', jobState.Reason)", span="122-122", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_100 [label="Assert.NotNull(jobState.CreatedAt)", span="123-123", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_101 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="124-124", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_102 [label="Exit lambda expression", span="98-125", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_106 [label="x.Name", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_107 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_109 [label="x.Reason", span="105-105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_110 [label="Exit lambda expression", span="105-105", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_112 [label="x.SerializeData()", span="106-106", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_113 [label="Exit lambda expression", span="106-106", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_117 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_124 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="138-138", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_123 [label="Entry lambda expression", span="136-158", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_129 [label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="146-146", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_130 [label="var job = GetTestJob(sql, jobId)", span="148-148", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_133 [label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="152-152", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_125 [label="var state = new Mock<IState>()", span="140-140", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_150 [label="x.AddJobState(jobId, state.Object)", span="146-146", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_134 [label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="153-153", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_126 [label="state.Setup(x => x.Name).Returns(''State'')", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_127 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_128 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="143-144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_140 [label="Entry lambda expression", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_143 [label="Entry lambda expression", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_146 [label="Entry lambda expression", span="143-143", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_149 [label="Entry lambda expression", span="146-146", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_131 [label="Assert.Null(job.StateName)", span="149-149", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_132 [label="Assert.Null(job.StateId)", span="150-150", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_135 [label="Assert.Equal(''State'', jobState.Name)", span="154-154", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_136 [label="Assert.Equal(''Reason'', jobState.Reason)", span="155-155", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_137 [label="Assert.NotNull(jobState.CreatedAt)", span="156-156", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_138 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="157-157", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_139 [label="Exit lambda expression", span="136-158", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_141 [label="x.Name", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_142 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_144 [label="x.Reason", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_145 [label="Exit lambda expression", span="142-142", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_147 [label="x.SerializeData()", span="143-143", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_148 [label="Exit lambda expression", span="143-143", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_151 [label="Exit lambda expression", span="146-146", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_156 [label="Entry lambda expression", span="164-176", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_157 [label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="166-166", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_161 [label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_158 [label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="167-167", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_159 [label="correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object)", span="168-169", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_162 [label="correctJobQueue.Verify(x => x.Enqueue(''default'', ''1''))", span="175-175", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_160 [label="_queueProviders.Add(correctProvider.Object, new [] { ''default'' })", span="171-171", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_166 [label="Entry lambda expression", span="168-168", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_169 [label="Entry lambda expression", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_163 [label="Exit lambda expression", span="164-176", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_173 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_167 [label="x.GetJobQueue(It.IsNotNull<IDbConnection>())", span="168-168", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_168 [label="Exit lambda expression", span="168-168", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_170 [label="x.AddToQueue(''default'', ''1'')", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_171 [label="Exit lambda expression", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_174 [label="x.Enqueue(''default'', ''1'')", span="175-175", cluster="lambda expression", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_175 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_183 [label="Entry lambda expression", span="189-198", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_184 [label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="191-191", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_185 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="193-193", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_190 [label="Entry lambda expression", span="191-191", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_186 [label="Assert.Equal(''my-key'', record.Key)", span="195-195", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_187 [label="Assert.Equal(1, record.Value)", span="196-196", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_188 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="197-197", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_189 [label="Exit lambda expression", span="189-198", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_191 [label="x.IncrementCounter(''my-key'')", span="191-191", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_192 [label="Exit lambda expression", span="191-191", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_197 [label="Entry lambda expression", span="204-218", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_198 [label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="206-206", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_199 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="208-208", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_208 [label="Entry lambda expression", span="206-206", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_200 [label="Assert.Equal(''my-key'', record.Key)", span="210-210", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_201 [label="Assert.Equal(1, record.Value)", span="211-211", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_202 [label="Assert.NotNull(record.ExpireAt)", span="212-212", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_203 [label="var expireAt = (DateTime) record.ExpireAt", span="214-214", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_204 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="216-216", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_205 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="217-217", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_206 [label="Exit lambda expression", span="204-218", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_209 [label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="206-206", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_210 [label="Exit lambda expression", span="206-206", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_215 [label="Entry lambda expression", span="224-235", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_216 [label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                })", span="226-230", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_217 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="232-232", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_220 [label="Entry lambda expression", span="226-230", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_218 [label="Assert.Equal(2, recordCount)", span="234-234", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_219 [label="Exit lambda expression", span="224-235", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_221 [label="x.IncrementCounter(''my-key'')", span="228-228", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_222 [label="x.IncrementCounter(''my-key'')", span="229-229", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_223 [label="Exit lambda expression", span="226-230", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_227 [label="Entry lambda expression", span="241-250", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_228 [label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_229 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="245-245", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_234 [label="Entry lambda expression", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_230 [label="Assert.Equal(''my-key'', record.Key)", span="247-247", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_231 [label="Assert.Equal(-1, record.Value)", span="248-248", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_232 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="249-249", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_233 [label="Exit lambda expression", span="241-250", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_235 [label="x.DecrementCounter(''my-key'')", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_236 [label="Exit lambda expression", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_241 [label="Entry lambda expression", span="256-270", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_242 [label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_243 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="260-260", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_251 [label="Entry lambda expression", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_244 [label="Assert.Equal(''my-key'', record.Key)", span="262-262", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_245 [label="Assert.Equal(-1, record.Value)", span="263-263", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_246 [label="Assert.NotNull(record.ExpireAt)", span="264-264", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_247 [label="var expireAt = (DateTime)record.ExpireAt", span="266-266", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_248 [label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="268-268", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_249 [label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="269-269", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_250 [label="Exit lambda expression", span="256-270", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_252 [label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_253 [label="Exit lambda expression", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_258 [label="Entry lambda expression", span="276-287", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_259 [label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="278-282", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_260 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="284-284", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_263 [label="Entry lambda expression", span="278-282", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_261 [label="Assert.Equal(2, recordCount)", span="286-286", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_262 [label="Exit lambda expression", span="276-287", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_264 [label="x.DecrementCounter(''my-key'')", span="280-280", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_265 [label="x.DecrementCounter(''my-key'')", span="281-281", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_266 [label="Exit lambda expression", span="278-282", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_270 [label="Entry lambda expression", span="293-302", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_271 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="295-295", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_272 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="297-297", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_277 [label="Entry lambda expression", span="295-295", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_273 [label="Assert.Equal(''my-key'', record.Key)", span="299-299", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_274 [label="Assert.Equal(''my-value'', record.Value)", span="300-300", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_275 [label="Assert.Equal(0.0, record.Score, 2)", span="301-301", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_276 [label="Exit lambda expression", span="293-302", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_278 [label="x.AddToSet(''my-key'', ''my-value'')", span="295-295", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_279 [label="Exit lambda expression", span="295-295", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_284 [label="Entry lambda expression", span="308-319", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_285 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="310-314", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_286 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="316-316", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_289 [label="Entry lambda expression", span="310-314", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_287 [label="Assert.Equal(2, recordCount)", span="318-318", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_288 [label="Exit lambda expression", span="308-319", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_290 [label="x.AddToSet(''my-key'', ''my-value'')", span="312-312", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_291 [label="x.AddToSet(''my-key'', ''another-value'')", span="313-313", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_292 [label="Exit lambda expression", span="310-314", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_296 [label="Entry lambda expression", span="325-336", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_297 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                })", span="327-331", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_298 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="333-333", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_301 [label="Entry lambda expression", span="327-331", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_299 [label="Assert.Equal(1, recordCount)", span="335-335", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_300 [label="Exit lambda expression", span="325-336", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_302 [label="x.AddToSet(''my-key'', ''my-value'')", span="329-329", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_303 [label="x.AddToSet(''my-key'', ''my-value'')", span="330-330", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_304 [label="Exit lambda expression", span="327-331", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_308 [label="Entry lambda expression", span="342-351", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_309 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="344-344", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_310 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="346-346", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_315 [label="Entry lambda expression", span="344-344", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_311 [label="Assert.Equal(''my-key'', record.Key)", span="348-348", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_312 [label="Assert.Equal(''my-value'', record.Value)", span="349-349", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_313 [label="Assert.Equal(3.2, record.Score, 3)", span="350-350", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_314 [label="Exit lambda expression", span="342-351", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_316 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="344-344", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_317 [label="Exit lambda expression", span="344-344", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_322 [label="Entry lambda expression", span="357-368", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_323 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="359-363", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_324 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="365-365", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_327 [label="Entry lambda expression", span="359-363", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_325 [label="Assert.Equal(3.2, record.Score, 3)", span="367-367", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_326 [label="Exit lambda expression", span="357-368", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_328 [label="x.AddToSet(''my-key'', ''my-value'')", span="361-361", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_329 [label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="362-362", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_330 [label="Exit lambda expression", span="359-363", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_334 [label="Entry lambda expression", span="374-385", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_335 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="376-380", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_336 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="382-382", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_339 [label="Entry lambda expression", span="376-380", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_337 [label="Assert.Equal(0, recordCount)", span="384-384", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_338 [label="Exit lambda expression", span="374-385", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_340 [label="x.AddToSet(''my-key'', ''my-value'')", span="378-378", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_341 [label="x.RemoveFromSet(''my-key'', ''my-value'')", span="379-379", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_342 [label="Exit lambda expression", span="376-380", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_347 [label="Entry lambda expression", span="391-402", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_348 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="393-397", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_349 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="399-399", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_352 [label="Entry lambda expression", span="393-397", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_350 [label="Assert.Equal(1, recordCount)", span="401-401", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_351 [label="Exit lambda expression", span="391-402", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_353 [label="x.AddToSet(''my-key'', ''my-value'')", span="395-395", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_354 [label="x.RemoveFromSet(''my-key'', ''different-value'')", span="396-396", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_355 [label="Exit lambda expression", span="393-397", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_359 [label="Entry lambda expression", span="408-419", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_360 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="410-414", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_361 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="416-416", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_364 [label="Entry lambda expression", span="410-414", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_362 [label="Assert.Equal(1, recordCount)", span="418-418", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_363 [label="Exit lambda expression", span="408-419", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_365 [label="x.AddToSet(''my-key'', ''my-value'')", span="412-412", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_366 [label="x.RemoveFromSet(''different-key'', ''my-value'')", span="413-413", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_367 [label="Exit lambda expression", span="410-414", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_371 [label="Entry lambda expression", span="425-433", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_372 [label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="427-427", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_373 [label="var record = sql.Query(''select * from HangFire.List'').Single()", span="429-429", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_377 [label="Entry lambda expression", span="427-427", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_374 [label="Assert.Equal(''my-key'', record.Key)", span="431-431", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_375 [label="Assert.Equal(''my-value'', record.Value)", span="432-432", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_376 [label="Exit lambda expression", span="425-433", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_378 [label="x.InsertToList(''my-key'', ''my-value'')", span="427-427", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_379 [label="Exit lambda expression", span="427-427", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_384 [label="Entry lambda expression", span="439-450", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_385 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="441-445", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_386 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="447-447", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_389 [label="Entry lambda expression", span="441-445", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_387 [label="Assert.Equal(2, recordCount)", span="449-449", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_388 [label="Exit lambda expression", span="439-450", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_390 [label="x.InsertToList(''my-key'', ''my-value'')", span="443-443", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_391 [label="x.InsertToList(''my-key'', ''my-value'')", span="444-444", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_392 [label="Exit lambda expression", span="441-445", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_396 [label="Entry lambda expression", span="456-468", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_397 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="458-463", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_398 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="465-465", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_401 [label="Entry lambda expression", span="458-463", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_399 [label="Assert.Equal(0, recordCount)", span="467-467", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_400 [label="Exit lambda expression", span="456-468", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_402 [label="x.InsertToList(''my-key'', ''my-value'')", span="460-460", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_403 [label="x.InsertToList(''my-key'', ''my-value'')", span="461-461", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_404 [label="x.RemoveFromList(''my-key'', ''my-value'')", span="462-462", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_405 [label="Exit lambda expression", span="458-463", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_410 [label="Entry lambda expression", span="474-485", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_411 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="476-480", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_412 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="482-482", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_415 [label="Entry lambda expression", span="476-480", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_413 [label="Assert.Equal(1, recordCount)", span="484-484", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_414 [label="Exit lambda expression", span="474-485", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_416 [label="x.InsertToList(''my-key'', ''my-value'')", span="478-478", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_417 [label="x.RemoveFromList(''my-key'', ''different-value'')", span="479-479", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_418 [label="Exit lambda expression", span="476-480", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_422 [label="Entry lambda expression", span="491-502", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_423 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="493-497", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_424 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="499-499", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_427 [label="Entry lambda expression", span="493-497", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_425 [label="Assert.Equal(1, recordCount)", span="501-501", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_426 [label="Exit lambda expression", span="491-502", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_428 [label="x.InsertToList(''my-key'', ''my-value'')", span="495-495", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_429 [label="x.RemoveFromList(''different-key'', ''my-value'')", span="496-496", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_430 [label="Exit lambda expression", span="493-497", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_434 [label="Entry lambda expression", span="508-524", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_435 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="510-517", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_436 [label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="519-519", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_442 [label="Entry lambda expression", span="510-517", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_437 [label="Assert.Equal(2, records.Length)", span="521-521", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_438 [label="Assert.Equal(''1'', records[0].Value)", span="522-522", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_439 [label="Assert.Equal(''2'', records[1].Value)", span="523-523", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_440 [label="Exit lambda expression", span="508-524", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_443 [label="x.InsertToList(''my-key'', ''0'')", span="512-512", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_444 [label="x.InsertToList(''my-key'', ''1'')", span="513-513", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_445 [label="x.InsertToList(''my-key'', ''2'')", span="514-514", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_446 [label="x.InsertToList(''my-key'', ''3'')", span="515-515", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_447 [label="x.TrimList(''my-key'', 1, 2)", span="516-516", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_448 [label="Exit lambda expression", span="510-517", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_453 [label="Entry lambda expression", span="530-543", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_454 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="532-538", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_455 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="540-540", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_458 [label="Entry lambda expression", span="532-538", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_456 [label="Assert.Equal(2, recordCount)", span="542-542", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_457 [label="Exit lambda expression", span="530-543", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_459 [label="x.InsertToList(''my-key'', ''0'')", span="534-534", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_460 [label="x.InsertToList(''my-key'', ''1'')", span="535-535", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_461 [label="x.InsertToList(''my-key'', ''2'')", span="536-536", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_462 [label="x.TrimList(''my-key'', 1, 100)", span="537-537", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_463 [label="Exit lambda expression", span="532-538", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_467 [label="Entry lambda expression", span="549-560", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_468 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="551-555", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_469 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="557-557", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_472 [label="Entry lambda expression", span="551-555", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_470 [label="Assert.Equal(0, recordCount)", span="559-559", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_471 [label="Exit lambda expression", span="549-560", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_473 [label="x.InsertToList(''my-key'', ''0'')", span="553-553", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_474 [label="x.TrimList(''my-key'', 1, 100)", span="554-554", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_475 [label="Exit lambda expression", span="551-555", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_479 [label="Entry lambda expression", span="566-577", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_480 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="568-572", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_481 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="574-574", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_484 [label="Entry lambda expression", span="568-572", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_482 [label="Assert.Equal(0, recordCount)", span="576-576", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_483 [label="Exit lambda expression", span="566-577", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_485 [label="x.InsertToList(''my-key'', ''0'')", span="570-570", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_486 [label="x.TrimList(''my-key'', 1, 0)", span="571-571", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_487 [label="Exit lambda expression", span="568-572", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_491 [label="Entry lambda expression", span="583-594", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_492 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="585-589", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_493 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="591-591", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_496 [label="Entry lambda expression", span="585-589", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_494 [label="Assert.Equal(1, recordCount)", span="593-593", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_495 [label="Exit lambda expression", span="583-594", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_497 [label="x.InsertToList(''my-key'', ''0'')", span="587-587", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_498 [label="x.TrimList(''another-key'', 1, 0)", span="588-588", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_499 [label="Exit lambda expression", span="585-589", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_503 [label="Entry lambda expression", span="600-606", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_504 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())))", span="602-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_508 [label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()))", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_505 [label="Assert.Equal(''key'', exception.ParamName)", span="605-605", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_507 [label="Entry lambda expression", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_506 [label="Exit lambda expression", span="600-606", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_509 [label="Exit lambda expression", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_510 [label="Entry lambda expression", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_511 [label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_512 [label="Exit lambda expression", span="603-603", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_517 [label="Entry lambda expression", span="612-618", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_518 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)))", span="614-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_522 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null))", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_519 [label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="617-617", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_521 [label="Entry lambda expression", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_520 [label="Exit lambda expression", span="612-618", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_523 [label="Exit lambda expression", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_524 [label="Entry lambda expression", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_525 [label="x.SetRangeInHash(''some-hash'', null)", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_526 [label="Exit lambda expression", span="615-615", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_530 [label="Entry lambda expression", span="624-639", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_531 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="626-630", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_532 [label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="632-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_537 [label="Entry lambda expression", span="626-630", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_533 [label="Assert.Equal(''Value1'', result[''Key1''])", span="637-637", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_540 [label="Entry lambda expression", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_543 [label="Entry lambda expression", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_534 [label="Assert.Equal(''Value2'', result[''Key2''])", span="638-638", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_535 [label="Exit lambda expression", span="624-639", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_538 [label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="626-630", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_539 [label="Exit lambda expression", span="626-630", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_541 [label="(string)x.Field", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_542 [label="Exit lambda expression", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_544 [label="(string)x.Value", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_545 [label="Exit lambda expression", span="635-635", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_549 [label="Entry lambda expression", span="645-649", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_550 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)))", span="647-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_553 [label="Commit(sql, x => x.RemoveHash(null))", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_551 [label="Exit lambda expression", span="645-649", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_552 [label="Entry lambda expression", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_554 [label="Exit lambda expression", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_555 [label="Entry lambda expression", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_556 [label="x.RemoveHash(null)", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_557 [label="Exit lambda expression", span="648-648", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_562 [label="Entry lambda expression", span="655-670", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_563 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="658-662", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_564 [label="Commit(sql, x => x.RemoveHash(''some-hash''))", span="665-665", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_565 [label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="668-668", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_568 [label="Entry lambda expression", span="658-662", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_571 [label="Entry lambda expression", span="665-665", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_566 [label="Assert.Equal(0, count)", span="669-669", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_567 [label="Exit lambda expression", span="655-670", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_569 [label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="658-662", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_570 [label="Exit lambda expression", span="658-662", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_572 [label="x.RemoveHash(''some-hash'')", span="665-665", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_573 [label="Exit lambda expression", span="665-665", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_577 [label="Entry lambda expression", span="676-682", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_578 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())))", span="678-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_582 [label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()))", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_579 [label="Assert.Equal(''key'', exception.ParamName)", span="681-681", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_581 [label="Entry lambda expression", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_580 [label="Exit lambda expression", span="676-682", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_583 [label="Exit lambda expression", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_584 [label="Entry lambda expression", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_585 [label="x.AddRangeToSet(null, new List<string>())", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_586 [label="Exit lambda expression", span="679-679", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_592 [label="Entry lambda expression", span="688-694", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_593 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)))", span="690-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_597 [label="Commit(sql, x => x.AddRangeToSet(''my-set'', null))", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_594 [label="Assert.Equal(''items'', exception.ParamName)", span="693-693", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_596 [label="Entry lambda expression", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_595 [label="Exit lambda expression", span="688-694", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_598 [label="Exit lambda expression", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_599 [label="Entry lambda expression", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_600 [label="x.AddRangeToSet(''my-set'', null)", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_601 [label="Exit lambda expression", span="691-691", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_605 [label="Entry lambda expression", span="700-708", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_606 [label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="702-702", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_607 [label="Commit(sql, x => x.AddRangeToSet(''my-set'', items))", span="704-704", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_608 [label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="706-706", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_612 [label="x.AddRangeToSet(''my-set'', items)", span="704-704", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_609 [label="Assert.Equal(items, records)", span="707-707", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_611 [label="Entry lambda expression", span="704-704", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_610 [label="Exit lambda expression", span="700-708", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_613 [label="Exit lambda expression", span="704-704", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_617 [label="Entry lambda expression", span="714-718", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_618 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)))", span="716-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_621 [label="Commit(sql, x => x.RemoveSet(null))", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_619 [label="Exit lambda expression", span="714-718", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_620 [label="Entry lambda expression", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_622 [label="Exit lambda expression", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_623 [label="Entry lambda expression", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_624 [label="x.RemoveSet(null)", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_625 [label="Exit lambda expression", span="717-717", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_632 [label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="729-733", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_631 [label="Entry lambda expression", span="727-739", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_633 [label="Commit(sql, x => x.RemoveSet(''set-1''))", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_634 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="737-737", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_638 [label="Entry lambda expression", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_635 [label="Assert.Equal(''set-2'', record.Key)", span="738-738", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_636 [label="Exit lambda expression", span="727-739", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_639 [label="x.RemoveSet(''set-1'')", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_640 [label="Exit lambda expression", span="735-735", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_644 [label="Entry lambda expression", span="745-751", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_645 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))))", span="747-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_649 [label="Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)))", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_646 [label="Assert.Equal(''key'', exception.ParamName)", span="750-750", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_648 [label="Entry lambda expression", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_647 [label="Exit lambda expression", span="745-751", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_650 [label="Exit lambda expression", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_651 [label="Entry lambda expression", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_652 [label="x.ExpireHash(null, TimeSpan.FromMinutes(5))", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_653 [label="Exit lambda expression", span="748-748", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_661 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="764-768", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_660 [label="Entry lambda expression", span="761-778", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_662 [label="Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)))", span="771-771", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_663 [label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_668 [label="Entry lambda expression", span="771-771", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_664 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="775-775", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_671 [label="Entry lambda expression", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_674 [label="Entry lambda expression", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_665 [label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="776-776", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_666 [label="Assert.Null(records[''hash-2''])", span="777-777", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_667 [label="Exit lambda expression", span="761-778", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_669 [label="x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60))", span="771-771", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_670 [label="Exit lambda expression", span="771-771", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_672 [label="(string)x.Key", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_673 [label="Exit lambda expression", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_675 [label="(DateTime?)x.ExpireAt", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_676 [label="Exit lambda expression", span="774-774", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_680 [label="Entry lambda expression", span="784-790", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_681 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))))", span="786-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_685 [label="Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)))", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_682 [label="Assert.Equal(''key'', exception.ParamName)", span="789-789", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_684 [label="Entry lambda expression", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_683 [label="Exit lambda expression", span="784-790", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_686 [label="Exit lambda expression", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_687 [label="Entry lambda expression", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_688 [label="x.ExpireSet(null, TimeSpan.FromSeconds(45))", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_689 [label="Exit lambda expression", span="787-787", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_697 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="803-807", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_696 [label="Entry lambda expression", span="800-817", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_698 [label="Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)))", span="810-810", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_699 [label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_704 [label="Entry lambda expression", span="810-810", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_700 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="814-814", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_707 [label="Entry lambda expression", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_710 [label="Entry lambda expression", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_701 [label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="815-815", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_702 [label="Assert.Null(records[''set-2''])", span="816-816", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_703 [label="Exit lambda expression", span="800-817", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_705 [label="x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60))", span="810-810", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_706 [label="Exit lambda expression", span="810-810", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_708 [label="(string)x.Key", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_709 [label="Exit lambda expression", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_711 [label="(DateTime?)x.ExpireAt", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_712 [label="Exit lambda expression", span="813-813", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_716 [label="Entry lambda expression", span="823-829", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_717 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))))", span="825-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_721 [label="Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)))", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_718 [label="Assert.Equal(''key'', exception.ParamName)", span="828-828", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_720 [label="Entry lambda expression", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_719 [label="Exit lambda expression", span="823-829", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_722 [label="Exit lambda expression", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_723 [label="Entry lambda expression", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_724 [label="x.ExpireList(null, TimeSpan.FromSeconds(45))", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_725 [label="Exit lambda expression", span="826-826", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_732 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="841-845", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_731 [label="Entry lambda expression", span="838-855", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_733 [label="Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)))", span="848-848", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_734 [label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_739 [label="Entry lambda expression", span="848-848", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_735 [label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="852-852", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_742 [label="Entry lambda expression", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_745 [label="Entry lambda expression", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_736 [label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="853-853", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_737 [label="Assert.Null(records[''list-2''])", span="854-854", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_738 [label="Exit lambda expression", span="838-855", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_740 [label="x.ExpireList(''list-1'', TimeSpan.FromMinutes(60))", span="848-848", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_741 [label="Exit lambda expression", span="848-848", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_743 [label="(string)x.Key", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_744 [label="Exit lambda expression", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_746 [label="(DateTime?)x.ExpireAt", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_747 [label="Exit lambda expression", span="851-851", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_751 [label="Entry lambda expression", span="861-867", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_752 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)))", span="863-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_756 [label="Commit(sql, x => x.PersistHash(null))", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_753 [label="Assert.Equal(''key'', exception.ParamName)", span="866-866", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_755 [label="Entry lambda expression", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_754 [label="Exit lambda expression", span="861-867", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_757 [label="Exit lambda expression", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_758 [label="Entry lambda expression", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_759 [label="x.PersistHash(null)", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_760 [label="Exit lambda expression", span="864-864", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_767 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="880-884", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_766 [label="Entry lambda expression", span="877-893", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_768 [label="Commit(sql, x => x.PersistHash(''hash-1''))", span="887-887", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_769 [label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_773 [label="Entry lambda expression", span="887-887", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_770 [label="Assert.Null(records[''hash-1''])", span="891-891", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_776 [label="Entry lambda expression", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_779 [label="Entry lambda expression", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_771 [label="Assert.NotNull(records[''hash-2''])", span="892-892", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_772 [label="Exit lambda expression", span="877-893", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_774 [label="x.PersistHash(''hash-1'')", span="887-887", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_775 [label="Exit lambda expression", span="887-887", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_777 [label="(string)x.Key", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_778 [label="Exit lambda expression", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_780 [label="(DateTime?)x.ExpireAt", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_781 [label="Exit lambda expression", span="890-890", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_785 [label="Entry lambda expression", span="899-905", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_786 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)))", span="901-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_790 [label="Commit(sql, x => x.PersistSet(null))", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_787 [label="Assert.Equal(''key'', exception.ParamName)", span="904-904", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_789 [label="Entry lambda expression", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_788 [label="Exit lambda expression", span="899-905", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_791 [label="Exit lambda expression", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_792 [label="Entry lambda expression", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_793 [label="x.PersistSet(null)", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_794 [label="Exit lambda expression", span="902-902", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_801 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="918-922", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_800 [label="Entry lambda expression", span="915-931", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_802 [label="Commit(sql, x => x.PersistSet(''set-1''))", span="925-925", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_803 [label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_807 [label="Entry lambda expression", span="925-925", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_804 [label="Assert.Null(records[''set-1''])", span="929-929", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_810 [label="Entry lambda expression", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_813 [label="Entry lambda expression", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_805 [label="Assert.NotNull(records[''set-2''])", span="930-930", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_806 [label="Exit lambda expression", span="915-931", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_808 [label="x.PersistSet(''set-1'')", span="925-925", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_809 [label="Exit lambda expression", span="925-925", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_811 [label="(string)x.Key", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_812 [label="Exit lambda expression", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_814 [label="(DateTime?)x.ExpireAt", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_815 [label="Exit lambda expression", span="928-928", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_819 [label="Entry lambda expression", span="937-943", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_820 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)))", span="939-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_824 [label="Commit(sql, x => x.PersistList(null))", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_821 [label="Assert.Equal(''key'', exception.ParamName)", span="942-942", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_823 [label="Entry lambda expression", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_822 [label="Exit lambda expression", span="937-943", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_825 [label="Exit lambda expression", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_826 [label="Entry lambda expression", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_827 [label="x.PersistList(null)", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_828 [label="Exit lambda expression", span="940-940", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_835 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="956-960", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_834 [label="Entry lambda expression", span="953-969", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_836 [label="Commit(sql, x => x.PersistList(''list-1''))", span="963-963", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_837 [label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_841 [label="Entry lambda expression", span="963-963", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_838 [label="Assert.Null(records[''list-1''])", span="967-967", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_844 [label="Entry lambda expression", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_839 [label="Assert.NotNull(records[''list-2''])", span="968-968", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_840 [label="Exit lambda expression", span="953-969", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_842 [label="x.PersistList(''list-1'')", span="963-963", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_843 [label="Exit lambda expression", span="963-963", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_845 [label="(string)x.Key", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_846 [label="Exit lambda expression", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_848 [label="(DateTime?)x.ExpireAt", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_849 [label="Exit lambda expression", span="966-966", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_588 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="242-242", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_381 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="437-437", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_382 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="439-450", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_383 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="437-437", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_368 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="423-423", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_369 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''));\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="425-433", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_370 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", span="423-423", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_602 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="698-698", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_603 [label="UseConnection(sql =>\r\n            {\r\n                var items = new List<string> { ''1'', ''2'', ''3'' };\r\n\r\n                Commit(sql, x => x.AddRangeToSet(''my-set'', items));\r\n\r\n                var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''');\r\n                Assert.Equal(items, records);\r\n            })", span="700-708", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_604 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", span="698-698", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_406 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="191-191", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_8 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_796 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="909-909", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_797 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="911-913", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_798 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistSet(''set-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''set-1'']);\r\n                Assert.NotNull(records[''set-2'']);\r\n            })", span="915-931", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_799 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", span="909-909", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_356 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="406-406", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_357 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="408-419", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_358 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", span="406-406", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_713 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="821-821", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_714 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="823-829", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_715 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", span="821-821", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_103 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_51 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_224 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_225 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="241-250", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_226 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_859 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="44-44", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_36 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_237 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_118 [label="Entry Unk.SetJobState", span="", cluster="Unk.SetJobState", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_488 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="581-581", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_489 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="583-594", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_490 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="581-581", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_31 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_24 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="36-36", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_25 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null, null))", span="38-39", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_26 [label="Assert.Equal(''queueProviders'', exception.ParamName)", span="41-41", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_27 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="36-36", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_59 [label="Entry Unk.ExpireJob", span="", cluster="Unk.ExpireJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_331 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="372-372", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_332 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="374-385", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_333 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", span="372-372", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_15 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="27-27", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_16 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null, null, _queueProviders))", span="29-30", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_17 [label="Assert.Equal(''connection'', exception.ParamName)", span="32-32", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_18 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="27-27", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_305 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="340-340", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_306 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="342-351", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_307 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", span="340-340", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_46 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_854 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_558 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="232-232", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_238 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_239 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="256-270", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_240 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_500 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="598-598", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_501 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="600-606", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_502 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="598-598", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_164 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_727 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="833-833", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_728 [label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="835-836", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_729 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1'']);\r\n                Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''list-2'']);\r\n            })", span="838-855", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_730 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", span="833-833", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_73 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_762 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="871-871", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_763 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="873-875", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_764 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistHash(''hash-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''hash-1'']);\r\n                Assert.NotNull(records[''hash-2'']);\r\n            })", span="877-893", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_765 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", span="871-871", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_49 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="980-980", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_855 [label="var transaction = new SqlServerWriteOnlyTransaction(connection, null, _queueProviders)", span="984-984", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", color=red, community=0, file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_856 [label="action(transaction)", span="986-986", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_857 [label="transaction.Commit()", span="987-987", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_858 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="980-980", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_180 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="187-187", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_181 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="189-198", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_182 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="187-187", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_6 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_54 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_9 [label="Entry PersistentJobQueueProviderCollection.cstr", span="", cluster="PersistentJobQueueProviderCollection.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_850 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="972-972", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_851 [label="var connection = ConnectionUtils.CreateConnection()", span="974-974", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_852 [label="action(connection)", span="976-976", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_853 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="972-972", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_656 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="755-755", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_657 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="757-759", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_658 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1'']);\r\n                Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''hash-2'']);\r\n            })", span="761-778", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_659 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", span="755-755", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_464 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="547-547", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_465 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="549-560", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_466 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="547-547", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_207 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_212 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="222-222", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_213 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="224-235", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_214 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", span="222-222", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_748 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="859-859", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_749 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="861-867", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_750 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", span="859-859", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_14 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_450 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="528-528", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_451 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="530-543", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_452 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="528-528", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_431 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="506-506", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_432 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="508-524", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_433 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="506-506", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_165 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_255 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_256 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="276-287", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_257 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_449 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="199-199", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_654 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_536 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_281 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_282 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="308-319", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_283 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_78 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="91-91", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_79 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="93-96", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_80 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="98-125", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_81 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="91-91", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_60 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="68-68", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_61 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="70-73", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_62 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="75-87", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_63 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", span="68-68", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_254 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="146-146", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_626 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="255-255", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_13 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_690 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_172 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="117-117", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_58 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_176 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_527 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="622-622", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_528 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="624-639", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_529 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="622-622", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_104 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_574 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="674-674", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_575 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="676-682", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_576 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", span="674-674", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_114 [label="Entry Unk.SerializeData", span="", cluster="Unk.SerializeData", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_344 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="389-389", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_345 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="391-402", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_346 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", span="389-389", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_641 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="743-743", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_642 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="745-751", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_643 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", span="743-743", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_47 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_53 [label="Entry Unk.True", span="", cluster="Unk.True", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_77 [label="Entry Unk.PersistJob", span="", cluster="Unk.PersistJob", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_32 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="45-45", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_33 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="47-50", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_34 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="52-64", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_35 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="45-45", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_380 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="183-183", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_546 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="643-643", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_547 [label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)));\r\n            })", span="645-649", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_548 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", span="643-643", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_860 [label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_861 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_862 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_863 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_864 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_865 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_866 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_867 [label=state, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_868 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_869 [label=jobId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_870 [label=state, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_871 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_872 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_873 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_874 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_875 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_876 [label=items, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_877 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_878 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_879 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_880 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_881 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_882 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_883 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_884 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_885 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_886 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_887 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_888 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_889 [label=SqlConnection, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_890 [label=arrangeSql, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
n94 -> n1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
n94 -> n38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
n94 -> n55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
n94 -> n61  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
n94 -> n74  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
n94 -> n86  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueFacts"];
n95 -> n50  [key=1, style=dashed, color=darkseagreen4, label=queue];
n96 -> n50  [key=1, style=dashed, color=darkseagreen4, label=token];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n8  [key=2, style=dotted];
n5 -> n10  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n6 -> n7  [key=0, style=solid];
n6 -> n9  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n7 -> n4  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n11 -> n13  [key=2, style=dotted];
n12 -> n10  [key=0, style=bold, color=blue];
n14 -> n15  [key=0, style=solid];
n15 -> n16  [key=0, style=solid, color=red];
n15 -> n26  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid, color=red];
n16 -> n27  [key=2, style=dotted, color=red];
n26 -> n92  [key=0, style=solid];
n26 -> n15  [key=3, color=darkorchid, style=bold, label="Parameter variable Hangfire.SqlServer.Msmq.MsmqTransactionType transactionType"];
n17 -> n18  [key=0, style=solid];
n17 -> n28  [key=2, style=dotted];
n17 -> n20  [key=1, style=dashed, color=darkseagreen4, label=messageQueue];
n18 -> n19  [key=0, style=solid];
n18 -> n29  [key=2, style=dotted];
n18 -> n20  [key=1, style=dashed, color=darkseagreen4, label=transaction];
n18 -> n24  [key=1, style=dashed, color=darkseagreen4, label=transaction];
n20 -> n21  [key=0, style=solid];
n20 -> n31  [key=2, style=dotted];
n20 -> n32  [key=2, style=dotted];
n19 -> n20  [key=0, style=solid];
n19 -> n30  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n24 -> n34  [key=2, style=dotted];
n21 -> n22  [key=0, style=solid];
n21 -> n33  [key=2, style=dotted];
n21 -> n21  [key=1, style=dashed, color=darkseagreen4, label=message];
n21 -> n23  [key=1, style=dashed, color=darkseagreen4, label=message];
n22 -> n23  [key=0, style=solid];
n22 -> n9  [key=2, style=dotted];
n23 -> n24  [key=0, style=solid];
n23 -> n9  [key=2, style=dotted];
n25 -> n14  [key=0, style=bold, color=blue];
n35 -> n36  [key=0, style=solid];
n36 -> n37  [key=0, style=solid];
n36 -> n41  [key=2, style=dotted];
n37 -> n38  [key=0, style=solid];
n37 -> n26  [key=2, style=dotted];
n38 -> n39  [key=0, style=solid];
n38 -> n42  [key=2, style=dotted];
n39 -> n40  [key=0, style=solid];
n39 -> n9  [key=2, style=dotted];
n40 -> n35  [key=0, style=bold, color=blue];
n43 -> n44  [key=0, style=solid];
n44 -> n45  [key=0, style=solid];
n44 -> n26  [key=2, style=dotted];
n44 -> n46  [key=1, style=dashed, color=darkseagreen4, label=queue];
n44 -> n50  [key=1, style=dashed, color=darkseagreen4, label=queue];
n45 -> n46  [key=0, style=solid];
n45 -> n48  [key=2, style=dotted];
n45 -> n50  [key=1, style=dashed, color=darkseagreen4, label=token];
n46 -> n47  [key=0, style=solid];
n46 -> n8  [key=2, style=dotted];
n46 -> n49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n50 -> n51  [key=0, style=solid];
n50 -> n42  [key=2, style=dotted];
n47 -> n43  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid];
n51 -> n49  [key=0, style=bold, color=blue];
n52 -> n53  [key=0, style=solid];
n53 -> n54  [key=0, style=solid];
n53 -> n41  [key=2, style=dotted];
n54 -> n55  [key=0, style=solid];
n54 -> n26  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n55 -> n42  [key=2, style=dotted];
n56 -> n57  [key=0, style=solid];
n56 -> n9  [key=2, style=dotted];
n57 -> n52  [key=0, style=bold, color=blue];
n58 -> n59  [key=0, style=solid];
n59 -> n60  [key=0, style=solid];
n59 -> n41  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n60 -> n26  [key=2, style=dotted];
n61 -> n62  [key=0, style=solid];
n61 -> n42  [key=2, style=dotted];
n62 -> n63  [key=0, style=solid];
n62 -> n66  [key=2, style=dotted];
n63 -> n64  [key=0, style=solid];
n63 -> n8  [key=2, style=dotted];
n63 -> n67  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n64 -> n65  [key=0, style=solid];
n64 -> n9  [key=2, style=dotted];
n67 -> n68  [key=0, style=solid];
n65 -> n58  [key=0, style=bold, color=blue];
n68 -> n69  [key=0, style=solid];
n68 -> n31  [key=2, style=dotted];
n68 -> n70  [key=2, style=dotted];
n69 -> n67  [key=0, style=bold, color=blue];
n71 -> n72  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n72 -> n41  [key=2, style=dotted];
n73 -> n74  [key=0, style=solid];
n73 -> n26  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n74 -> n42  [key=2, style=dotted];
n75 -> n76  [key=0, style=solid];
n75 -> n79  [key=2, style=dotted];
n76 -> n77  [key=0, style=solid];
n76 -> n8  [key=2, style=dotted];
n76 -> n80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n77 -> n78  [key=0, style=solid];
n77 -> n9  [key=2, style=dotted];
n80 -> n81  [key=0, style=solid];
n78 -> n71  [key=0, style=bold, color=blue];
n81 -> n82  [key=0, style=solid];
n81 -> n31  [key=2, style=dotted];
n81 -> n70  [key=2, style=dotted];
n82 -> n80  [key=0, style=bold, color=blue];
n83 -> n84  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n84 -> n41  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n85 -> n26  [key=2, style=dotted];
n86 -> n87  [key=0, style=solid];
n86 -> n42  [key=2, style=dotted];
n87 -> n88  [key=0, style=solid];
n87 -> n91  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n88 -> n31  [key=2, style=dotted];
n88 -> n70  [key=2, style=dotted];
n89 -> n90  [key=0, style=solid];
n89 -> n9  [key=2, style=dotted];
n90 -> n83  [key=0, style=bold, color=blue];
n92 -> n93  [key=0, style=solid];
n92 -> n13  [key=2, style=dotted];
n93 -> n26  [key=0, style=bold, color=blue];
m0_5 -> m0_14  [key=0, style=solid];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_16  [key=2, style=dotted];
m0_15 -> m0_5  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_1 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid, color=green];
m0_2 -> m0_6  [key=2, style=dotted, color=green];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> n66  [key=2, style=dotted];
m0_4 -> m0_0  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid, color=green];
m0_9 -> m0_5  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid, color=green];
m0_10 -> m0_13  [key=2, style=dotted, color=green];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> n66  [key=2, style=dotted];
m0_12 -> m0_8  [key=0, style=bold, color=blue];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_14  [key=2, style=dotted];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_9  [key=2, style=dotted];
m1_7 -> m1_15  [key=2, style=dotted];
m1_8 -> m1_6  [key=0, style=bold, color=blue];
m1_8 -> m1_0  [key=0, style=bold, color=blue];
m1_121 -> m1_122  [key=0, style=solid];
m1_121 -> m1_19  [key=2, style=dotted];
m1_121 -> m1_126  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_119 -> m1_120  [key=0, style=solid];
m1_119 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_119 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_119 -> m1_127  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_19  [key=2, style=dotted];
m1_120 -> m1_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_122 -> m1_119  [key=0, style=bold, color=blue];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_13  [key=2, style=dotted];
m1_149 -> m1_150  [key=0, style=solid];
m1_149 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_150 -> m1_151  [key=0, style=solid];
m1_150 -> m1_19  [key=2, style=dotted];
m1_150 -> m1_152  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_151 -> m1_149  [key=0, style=bold, color=blue];
m1_104 -> m1_105  [key=0, style=solid];
m1_104 -> m1_19  [key=2, style=dotted];
m1_104 -> m1_109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_102 -> m1_104  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_102 -> m1_110  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_103 -> m1_104  [key=0, style=solid];
m1_103 -> m1_19  [key=2, style=dotted];
m1_103 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_105 -> m1_102  [key=0, style=bold, color=blue];
m1_27 -> m1_25  [key=0, style=bold, color=blue];
m1_162 -> m1_163  [key=0, style=solid];
m1_162 -> m1_166  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_163 -> m1_164  [key=0, style=solid];
m1_163 -> m1_19  [key=2, style=dotted];
m1_163 -> m1_165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_164 -> m1_162  [key=0, style=bold, color=blue];
m1_22 -> m1_23  [key=0, style=solid, color=green];
m1_22 -> m1_20  [key=0, style=bold, color=blue];
m1_23 -> m1_24  [key=0, style=solid, color=green];
m1_23 -> m1_20  [key=2, style=dotted, color=green];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_27  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_28  [key=2, style=dotted];
m1_26 -> m1_22  [key=0, style=bold, color=blue];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_23  [key=2, style=dotted];
m1_26 -> m1_24  [key=2, style=dotted];
m1_12 -> m1_10  [key=0, style=bold, color=blue];
m1_182 -> m1_183  [key=0, style=solid];
m1_182 -> m1_19  [key=2, style=dotted];
m1_182 -> m1_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_181 -> m1_182  [key=0, style=solid];
m1_181 -> m1_185  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_183 -> m1_181  [key=0, style=bold, color=blue];
m1_10 -> m1_11  [key=0, style=solid];
m1_31 -> m1_32  [key=0, style=solid];
m1_31 -> m1_37  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_31 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_31 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_31 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_31 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_19  [key=2, style=dotted];
m1_32 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_19  [key=2, style=dotted];
m1_33 -> m1_40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_34 -> m1_35  [key=0, style=solid];
m1_34 -> m1_19  [key=2, style=dotted];
m1_34 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_34 -> m1_20  [key=2, style=dotted];
m1_35 -> m1_31  [key=0, style=bold, color=blue];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_38  [key=2, style=dotted];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_28  [key=2, style=dotted];
m1_36 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_37 -> m1_33  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_23  [key=2, style=dotted];
m1_37 -> m1_39  [key=2, style=dotted];
m1_112 -> m1_113  [key=0, style=solid];
m1_112 -> m1_116  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_113 -> m1_114  [key=0, style=solid];
m1_113 -> m1_19  [key=2, style=dotted];
m1_113 -> m1_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_114 -> m1_112  [key=0, style=bold, color=blue];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_133  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_19  [key=2, style=dotted];
m1_130 -> m1_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_131 -> m1_129  [key=0, style=bold, color=blue];
m1_42 -> m1_40  [key=0, style=bold, color=blue];
m1_142 -> m1_143  [key=0, style=solid];
m1_142 -> m1_146  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_19  [key=2, style=dotted];
m1_143 -> m1_145  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_144 -> m1_142  [key=0, style=bold, color=blue];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_14 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_14 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_14 -> m1_17  [key=1, style=dashed, color=red, label=string];
m1_14 -> m1_29  [key=1, style=dashed, color=red, label=string];
m1_58 -> m1_71  [key=0, style=solid];
m1_58 -> m1_73  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m1_58 -> m1_74  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m1_58 -> m1_76  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_58 -> m1_80  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_71 -> m1_72  [key=0, style=solid];
m1_71 -> m1_55  [key=2, style=dotted];
m1_73 -> m1_74  [key=0, style=solid];
m1_73 -> m1_57  [key=2, style=dotted];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_57  [key=2, style=dotted];
m1_76 -> m1_77  [key=0, style=solid];
m1_76 -> m1_19  [key=2, style=dotted];
m1_76 -> m1_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_72 -> m1_73  [key=0, style=solid];
m1_72 -> m1_56  [key=2, style=dotted];
m1_72 -> m1_74  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m1_72 -> m1_75  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m1_72 -> m1_76  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m1_72 -> m1_80  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m1_75 -> m1_76  [key=0, style=solid];
m1_75 -> m1_78  [key=2, style=dotted];
m1_75 -> m1_57  [key=2, style=dotted];
m1_77 -> m1_58  [key=0, style=bold, color=blue];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_19  [key=2, style=dotted];
m1_15 -> m1_20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_38 -> m1_36  [key=0, style=bold, color=blue];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_13  [key=2, style=dotted];
m1_169 -> m1_170  [key=0, style=solid];
m1_169 -> m1_173  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_170 -> m1_171  [key=0, style=solid];
m1_170 -> m1_19  [key=2, style=dotted];
m1_170 -> m1_172  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_171 -> m1_169  [key=0, style=bold, color=blue];
m1_39 -> m1_40  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_23  [key=2, style=dotted];
m1_21 -> m1_24  [key=2, style=dotted];
m1_29 -> m1_30  [key=0, style=solid, color=red];
m1_29 -> m1_23  [key=2, style=dotted, color=red];
m1_29 -> m1_24  [key=2, style=dotted, color=red];
m1_20 -> m1_21  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid, color=red];
m1_30 -> m1_28  [key=0, style=bold, color=blue];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_23  [key=2, style=dotted];
m1_41 -> m1_39  [key=2, style=dotted];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_23  [key=2, style=dotted];
m1_44 -> m1_39  [key=2, style=dotted];
m1_40 -> m1_41  [key=0, style=solid];
m1_40 -> m1_42  [key=2, style=dotted];
m1_43 -> m1_44  [key=0, style=solid];
m1_45 -> m1_43  [key=0, style=bold, color=blue];
m1_45 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.SucceededStateHandlerFacts"];
m1_45 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.SucceededStateHandlerFacts"];
m1_45 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.SucceededStateHandlerFacts"];
m1_45 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.SucceededStateHandlerFacts"];
m1_45 -> m1_36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.States.SucceededStateHandlerFacts"];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_23  [key=2, style=dotted];
m1_60 -> m1_62  [key=2, style=dotted];
m1_64 -> m1_65  [key=0, style=solid];
m1_64 -> m1_23  [key=2, style=dotted];
m1_64 -> m1_66  [key=2, style=dotted];
m1_68 -> m1_69  [key=0, style=solid];
m1_68 -> m1_23  [key=2, style=dotted];
m1_68 -> m1_70  [key=2, style=dotted];
m1_59 -> m1_60  [key=0, style=solid];
m1_63 -> m1_64  [key=0, style=solid];
m1_67 -> m1_68  [key=0, style=solid];
m1_61 -> m1_59  [key=0, style=bold, color=blue];
m1_65 -> m1_63  [key=0, style=bold, color=blue];
m1_69 -> m1_67  [key=0, style=bold, color=blue];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_23  [key=2, style=dotted];
m1_80 -> m1_82  [key=2, style=dotted];
m1_80 -> m1_83  [key=2, style=dotted];
m1_79 -> m1_80  [key=0, style=solid];
m1_81 -> m1_79  [key=0, style=bold, color=blue];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_91  [key=2, style=dotted];
m1_93 -> m1_94  [key=0, style=solid];
m1_93 -> m1_23  [key=2, style=dotted];
m1_93 -> m1_83  [key=2, style=dotted];
m1_88 -> m1_89  [key=0, style=solid];
m1_92 -> m1_93  [key=0, style=solid];
m1_90 -> m1_88  [key=0, style=bold, color=blue];
m1_94 -> m1_92  [key=0, style=bold, color=blue];
m1_99 -> m1_100  [key=0, style=solid];
m1_99 -> m1_101  [key=2, style=dotted];
m1_98 -> m1_99  [key=0, style=solid];
m1_100 -> m1_98  [key=0, style=bold, color=blue];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_101  [key=2, style=dotted];
m1_110 -> m1_111  [key=0, style=solid];
m1_110 -> m1_24  [key=2, style=dotted];
m1_106 -> m1_107  [key=0, style=solid];
m1_109 -> m1_110  [key=0, style=solid];
m1_108 -> m1_106  [key=0, style=bold, color=blue];
m1_111 -> m1_109  [key=0, style=bold, color=blue];
m1_116 -> m1_117  [key=0, style=solid];
m1_116 -> m1_118  [key=2, style=dotted];
m1_115 -> m1_116  [key=0, style=solid];
m1_117 -> m1_115  [key=0, style=bold, color=blue];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_118  [key=2, style=dotted];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_24  [key=2, style=dotted];
m1_123 -> m1_124  [key=0, style=solid];
m1_126 -> m1_127  [key=0, style=solid];
m1_125 -> m1_123  [key=0, style=bold, color=blue];
m1_128 -> m1_126  [key=0, style=bold, color=blue];
m1_133 -> m1_134  [key=0, style=solid];
m1_133 -> m1_135  [key=2, style=dotted];
m1_132 -> m1_133  [key=0, style=solid];
m1_134 -> m1_132  [key=0, style=bold, color=blue];
m1_140 -> m1_141  [key=0, style=solid];
m1_140 -> m1_135  [key=2, style=dotted];
m1_139 -> m1_140  [key=0, style=solid];
m1_141 -> m1_139  [key=0, style=bold, color=blue];
m1_146 -> m1_147  [key=0, style=solid];
m1_146 -> m1_148  [key=2, style=dotted];
m1_145 -> m1_146  [key=0, style=solid];
m1_147 -> m1_145  [key=0, style=bold, color=blue];
m1_153 -> m1_154  [key=0, style=solid];
m1_153 -> m1_83  [key=2, style=dotted];
m1_152 -> m1_153  [key=0, style=solid];
m1_154 -> m1_152  [key=0, style=bold, color=blue];
m1_159 -> m1_160  [key=0, style=solid];
m1_159 -> m1_161  [key=2, style=dotted];
m1_158 -> m1_159  [key=0, style=solid];
m1_160 -> m1_158  [key=0, style=bold, color=blue];
m1_166 -> m1_167  [key=0, style=solid];
m1_166 -> m1_168  [key=2, style=dotted];
m1_165 -> m1_166  [key=0, style=solid];
m1_167 -> m1_165  [key=0, style=bold, color=blue];
m1_173 -> m1_174  [key=0, style=solid];
m1_173 -> m1_101  [key=2, style=dotted];
m1_172 -> m1_173  [key=0, style=solid];
m1_174 -> m1_172  [key=0, style=bold, color=blue];
m1_179 -> m1_180  [key=0, style=solid];
m1_179 -> m1_118  [key=2, style=dotted];
m1_178 -> m1_179  [key=0, style=solid];
m1_180 -> m1_178  [key=0, style=bold, color=blue];
m1_185 -> m1_186  [key=0, style=solid];
m1_185 -> m1_24  [key=2, style=dotted];
m1_184 -> m1_185  [key=0, style=solid];
m1_186 -> m1_184  [key=0, style=bold, color=blue];
m1_136 -> m1_137  [key=0, style=solid];
m1_136 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_19  [key=2, style=dotted];
m1_137 -> m1_139  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_138 -> m1_136  [key=0, style=bold, color=blue];
m1_175 -> m1_176  [key=0, style=solid];
m1_175 -> m1_179  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_176 -> m1_177  [key=0, style=solid];
m1_176 -> m1_19  [key=2, style=dotted];
m1_176 -> m1_178  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_177 -> m1_175  [key=0, style=bold, color=blue];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_99  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_96 -> m1_97  [key=0, style=solid];
m1_96 -> m1_19  [key=2, style=dotted];
m1_96 -> m1_98  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_97 -> m1_95  [key=0, style=bold, color=blue];
m1_17 -> m1_18  [key=0, style=solid, color=red];
m1_17 -> m1_19  [key=2, style=dotted, color=red];
m1_17 -> m1_28  [key=1, style=dashed, color=red, label="lambda expression"];
m1_17 -> m1_20  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid, color=red];
m1_16 -> m1_19  [key=2, style=dotted];
m1_16 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_18 -> m1_14  [key=0, style=bold, color=blue];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> n9  [key=2, style=dotted];
m1_84 -> m1_85  [key=0, style=solid];
m1_84 -> m1_89  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_84 -> m1_86  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_84 -> m1_93  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_85 -> m1_86  [key=0, style=solid];
m1_85 -> m1_19  [key=2, style=dotted];
m1_85 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_86 -> m1_87  [key=0, style=solid];
m1_86 -> m1_19  [key=2, style=dotted];
m1_86 -> m1_92  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_87 -> m1_84  [key=0, style=bold, color=blue];
m1_19 -> m1_16  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label=IRedisTransaction];
m1_3 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label=stateContext];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_11  [key=2, style=dotted];
m1_4 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label=stateMock];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_12  [key=2, style=dotted];
m1_4 -> m1_0  [key=0, style=bold, color=blue];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_10  [key=2, style=dotted];
m1_2 -> m1_4  [key=0, style=solid];
m1_2 -> m1_5  [key=2, style=dotted];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_9  [key=2, style=dotted];
m1_1 -> m1_3  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_19  [key=2, style=dotted];
m1_48 -> m1_63  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_46 -> m1_47  [key=0, style=solid];
m1_46 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_46 -> m1_48  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_46 -> m1_64  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_46 -> m1_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m1_46 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m1_46 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_46 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_46 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_19  [key=2, style=dotted];
m1_47 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_55  [key=2, style=dotted];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_57  [key=2, style=dotted];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_19  [key=2, style=dotted];
m1_52 -> m1_67  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_58  [key=2, style=dotted];
m1_50 -> m1_51  [key=0, style=solid];
m1_50 -> m1_56  [key=2, style=dotted];
m1_50 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m1_50 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m1_54 -> m1_46  [key=0, style=bold, color=blue];
m1_155 -> m1_156  [key=0, style=solid];
m1_155 -> m1_159  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_156 -> m1_157  [key=0, style=solid];
m1_156 -> m1_19  [key=2, style=dotted];
m1_156 -> m1_158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_157 -> m1_155  [key=0, style=bold, color=blue];
m1_187 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_17  [key=1, style=dashed, color=red, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_76  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_85  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_86  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_96  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_104  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_120  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_137  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_150  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_156  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_163  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_170  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_176  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_187 -> m1_182  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisWriteOnlyTransaction"];
m1_188 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_188 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_188 -> m1_29  [key=1, style=dashed, color=red, label=string];
m1_189 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m1_189 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m1_189 -> m1_29  [key=1, style=dashed, color=red, label="System.TimeSpan"];
m1_190 -> m1_37  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_190 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_190 -> m1_44  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_191 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_191 -> m1_64  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_191 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_192 -> m1_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Common.States.JobState"];
m1_193 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m1_194 -> m1_80  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_195 -> m1_80  [key=1, style=dashed, color=darkseagreen4, label=storedData];
m1_196 -> m1_89  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_196 -> m1_93  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_197 -> m1_93  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_198 -> m1_99  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_199 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_199 -> m1_110  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_200 -> m1_110  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m1_201 -> m1_116  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_202 -> m1_124  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_202 -> m1_127  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_203 -> m1_127  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m1_204 -> m1_133  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_205 -> m1_133  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_206 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_207 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_208 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label=double];
m1_209 -> m1_146  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_210 -> m1_146  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_211 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_212 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_213 -> m1_159  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_214 -> m1_159  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_215 -> m1_166  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_216 -> m1_166  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_217 -> m1_166  [key=1, style=dashed, color=darkseagreen4, label=int];
m1_218 -> m1_173  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_219 -> m1_179  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_220 -> m1_185  [key=1, style=dashed, color=darkseagreen4, label=string];
m1_221 -> m1_185  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m2_39 -> m2_40  [key=0, style=solid];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_44  [key=2, style=dotted];
m2_40 -> m2_42  [key=1, style=dashed, color=darkseagreen4, label=processingJob];
m2_41 -> m2_42  [key=0, style=solid];
m2_41 -> m2_20  [key=2, style=dotted];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_20  [key=2, style=dotted];
m2_43 -> m2_39  [key=0, style=bold, color=blue];
m2_32 -> m2_33  [key=0, style=solid];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> n8  [key=2, style=dotted];
m2_33 -> m2_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_20  [key=2, style=dotted];
m2_35 -> m2_32  [key=0, style=bold, color=blue];
m2_25 -> m2_26  [key=0, style=solid];
m2_26 -> m2_27  [key=0, style=solid];
m2_26 -> n8  [key=2, style=dotted];
m2_26 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_20  [key=2, style=dotted];
m2_28 -> m2_25  [key=0, style=bold, color=blue];
m2_44 -> m2_56  [key=0, style=solid];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_24  [key=2, style=dotted];
m2_57 -> m2_44  [key=0, style=bold, color=blue];
m2_15 -> m2_16  [key=0, style=solid];
m2_16 -> m2_17  [key=0, style=solid];
m2_16 -> n8  [key=2, style=dotted];
m2_16 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_17 -> m2_18  [key=0, style=solid];
m2_17 -> m2_20  [key=2, style=dotted];
m2_18 -> m2_15  [key=0, style=bold, color=blue];
m2_45 -> m2_46  [key=0, style=solid];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_44  [key=2, style=dotted];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_50  [key=2, style=dotted];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_51  [key=2, style=dotted];
m2_48 -> m2_52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_49 -> m2_45  [key=0, style=bold, color=blue];
m2_52 -> m2_53  [key=0, style=solid];
m2_11 -> m2_12  [key=0, style=solid];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_14  [key=2, style=dotted];
m2_13 -> m2_11  [key=0, style=bold, color=blue];
m2_21 -> m2_22  [key=0, style=solid];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_24  [key=2, style=dotted];
m2_23 -> m2_21  [key=0, style=bold, color=blue];
m2_29 -> m2_30  [key=0, style=solid];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_24  [key=2, style=dotted];
m2_31 -> m2_29  [key=0, style=bold, color=blue];
m2_36 -> m2_37  [key=0, style=solid];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_24  [key=2, style=dotted];
m2_38 -> m2_36  [key=0, style=bold, color=blue];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_55  [key=2, style=dotted];
m2_54 -> m2_52  [key=0, style=bold, color=blue];
m2_24 -> m2_17  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueueProvider provider"];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_6  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_7  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_8  [key=2, style=dotted];
m2_3 -> m2_9  [key=2, style=dotted];
m2_3 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_10  [key=2, style=dotted];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m2_58 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m2_58 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m2_58 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m2_58 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m2_58 -> m2_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m2_58 -> m2_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m2_58 -> m2_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m2_58 -> m2_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m2_58 -> m2_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m2_58 -> m2_46  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m2_58 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m2_58 -> m2_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisProcessingJobFacts"];
m3_0 -> m3_1  [key=0, style=solid];
m3_0 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_0 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_0 -> m3_7  [key=1, style=dashed, color=red, label=IDbConnection];
m3_0 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label=string];
m3_0 -> m3_9  [key=1, style=dashed, color=red, label=string];
m3_1 -> m3_2  [key=0, style=solid];
m3_1 -> m3_3  [key=0, style=solid];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_5  [key=0, style=solid];
m3_5 -> m3_6  [key=0, style=solid];
m3_5 -> m3_7  [key=0, style=solid, color=red];
m3_7 -> m3_8  [key=0, style=solid, color=red];
m3_8 -> m3_9  [key=0, style=solid, color=red];
m3_9 -> m3_10  [key=0, style=solid, color=red];
m3_2 -> m3_10  [key=0, style=solid];
m3_2 -> m3_11  [key=2, style=dotted];
m3_4 -> m3_10  [key=0, style=solid];
m3_4 -> m3_11  [key=2, style=dotted];
m3_6 -> m3_10  [key=0, style=solid];
m3_6 -> m3_11  [key=2, style=dotted];
m3_10 -> m3_0  [key=0, style=bold, color=blue];
m3_12 -> m3_13  [key=0, style=solid, color=red];
m3_13 -> m3_14  [key=0, style=solid, color=red];
m3_13 -> m3_15  [key=2, style=dotted, color=red];
m3_14 -> m3_12  [key=0, style=bold, color=blue];
m3_16 -> m3_7  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerProcessingJob"];
m3_16 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerProcessingJob"];
m3_16 -> m3_9  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerProcessingJob"];
m3_16 -> m3_13  [key=1, style=dashed, color=red, label="HangFire.SqlServer.SqlServerProcessingJob"];
m4_19 -> m4_11  [key=3, color=green, style=bold, label="Parameter variable SqlConnection connection"];
m4_19 -> m4_24  [key=3, color=green, style=bold, label="Parameter variable SqlConnection connection"];
m4_19 -> m4_36  [key=3, color=green, style=bold, label="Parameter variable SqlConnection connection"];
m4_19 -> m4_39  [key=3, color=green, style=bold, label="Parameter variable SqlConnection connection"];
m4_19 -> m4_67  [key=3, color=green, style=bold, label="Parameter variable SqlConnection connection"];
m4_19 -> m4_77  [key=0, style=solid, color=green];
m4_77 -> m4_78  [key=0, style=solid, color=green];
m4_77 -> m4_79  [key=2, style=dotted, color=green];
m4_78 -> m4_19  [key=0, style=bold, color=blue];
m4_10 -> m4_11  [key=0, style=solid, color=green];
m4_11 -> m4_12  [key=0, style=solid, color=green];
m4_11 -> m4_13  [key=2, style=dotted, color=green];
m4_11 -> m4_14  [key=1, style=dashed, color=green, label="lambda expression"];
m4_11 -> m4_19  [key=3, color=green, style=bold, label="Local variable Hangfire.SqlServer.SqlServerStorage storage"];
m4_12 -> m4_10  [key=0, style=bold, color=blue];
m4_66 -> m4_67  [key=0, style=solid, color=green];
m4_67 -> m4_68  [key=0, style=solid, color=green];
m4_67 -> m4_13  [key=2, style=dotted, color=green];
m4_67 -> m4_69  [key=1, style=dashed, color=green, label="lambda expression"];
m4_67 -> m4_19  [key=3, color=green, style=bold, label="Local variable Hangfire.SqlServer.SqlServerStorage storage"];
m4_68 -> m4_66  [key=0, style=bold, color=blue];
m4_23 -> m4_24  [key=0, style=solid, color=green];
m4_24 -> m4_25  [key=0, style=solid, color=green];
m4_24 -> m4_13  [key=2, style=dotted, color=green];
m4_24 -> m4_26  [key=1, style=dashed, color=green, label="lambda expression"];
m4_24 -> m4_19  [key=3, color=green, style=bold, label="Local variable Hangfire.SqlServer.SqlServerStorage storage"];
m4_25 -> m4_23  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid, color=green];
m4_1 -> m4_0  [key=0, style=bold, color=blue];
m4_1 -> m4_2  [key=0, style=solid, color=green];
m4_1 -> m4_4  [key=2, style=dotted, color=green];
m4_1 -> m4_6  [key=1, style=dashed, color=green, label="lambda expression"];
m4_52 -> m4_36  [key=3, color=green, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m4_52 -> m4_80  [key=0, style=solid];
m4_52 -> m4_81  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection>"];
m4_80 -> m4_81  [key=0, style=solid];
m4_80 -> m4_83  [key=2, style=dotted];
m4_81 -> m4_82  [key=0, style=solid];
m4_81 -> m4_84  [key=2, style=dotted];
m4_82 -> m4_52  [key=0, style=bold, color=blue];
m4_69 -> m4_70  [key=0, style=solid, color=green];
m4_69 -> m4_73  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m4_6 -> m4_7  [key=0, style=solid, color=green];
m4_7 -> m4_8  [key=0, style=solid, color=green];
m4_7 -> m4_9  [key=2, style=dotted, color=green];
m4_8 -> m4_6  [key=0, style=bold, color=blue];
m4_14 -> m4_15  [key=0, style=solid, color=green];
m4_15 -> m4_16  [key=0, style=solid, color=green];
m4_15 -> m4_19  [key=2, style=dotted, color=green];
m4_15 -> m4_21  [key=1, style=dashed, color=green, label=storage];
m4_16 -> m4_17  [key=0, style=solid, color=green];
m4_16 -> m4_4  [key=2, style=dotted, color=green];
m4_16 -> m4_20  [key=1, style=dashed, color=green, label="lambda expression"];
m4_21 -> m4_22  [key=0, style=solid, color=green];
m4_21 -> m4_9  [key=2, style=dotted, color=green];
m4_17 -> m4_18  [key=0, style=solid, color=green];
m4_17 -> n9  [key=2, style=dotted, color=green];
m4_20 -> m4_21  [key=0, style=solid, color=green];
m4_22 -> m4_20  [key=0, style=bold, color=blue];
m4_18 -> m4_14  [key=0, style=bold, color=blue];
m4_26 -> m4_27  [key=0, style=solid, color=green];
m4_26 -> m4_29  [key=1, style=dashed, color=green, label=SqlConnection];
m4_27 -> m4_28  [key=0, style=solid, color=green];
m4_27 -> m4_19  [key=2, style=dotted, color=green];
m4_28 -> m4_29  [key=0, style=solid, color=green];
m4_28 -> m4_9  [key=2, style=dotted, color=green];
m4_29 -> m4_30  [key=0, style=solid, color=green];
m4_29 -> m4_4  [key=2, style=dotted, color=green];
m4_29 -> m4_32  [key=2, style=dotted, color=green];
m4_30 -> m4_31  [key=0, style=solid, color=green];
m4_30 -> n9  [key=2, style=dotted, color=green];
m4_31 -> m4_26  [key=0, style=bold, color=blue];
m4_50 -> m4_51  [key=0, style=solid, color=green];
m4_50 -> m4_52  [key=2, style=dotted, color=green];
m4_50 -> m4_53  [key=1, style=dashed, color=green, label="lambda expression"];
m4_49 -> m4_50  [key=0, style=solid, color=green];
m4_51 -> m4_49  [key=0, style=bold, color=blue];
m4_53 -> m4_54  [key=0, style=solid, color=green];
m4_59 -> m4_60  [key=0, style=solid, color=green];
m4_54 -> m4_55  [key=0, style=solid, color=green];
m4_54 -> m4_19  [key=2, style=dotted, color=green];
m4_55 -> m4_56  [key=0, style=solid, color=green];
m4_55 -> m4_9  [key=2, style=dotted, color=green];
m4_56 -> m4_57  [key=0, style=solid];
m4_56 -> m4_47  [key=2, style=dotted];
m4_60 -> m4_61  [key=0, style=solid, color=green];
m4_60 -> m4_19  [key=2, style=dotted, color=green];
m4_60 -> m4_64  [key=1, style=dashed, color=green, label=storage];
m4_61 -> m4_62  [key=0, style=solid, color=green];
m4_61 -> m4_4  [key=2, style=dotted, color=green];
m4_61 -> m4_63  [key=1, style=dashed, color=green, label="lambda expression"];
m4_64 -> m4_65  [key=0, style=solid, color=green];
m4_64 -> m4_9  [key=2, style=dotted, color=green];
m4_62 -> m4_59  [key=0, style=bold, color=blue];
m4_63 -> m4_64  [key=0, style=solid, color=green];
m4_65 -> m4_63  [key=0, style=bold, color=blue];
m4_70 -> m4_71  [key=0, style=solid, color=green];
m4_70 -> m4_19  [key=2, style=dotted, color=green];
m4_71 -> m4_72  [key=0, style=solid, color=green];
m4_71 -> m4_9  [key=2, style=dotted, color=green];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_76  [key=2, style=dotted];
m4_73 -> m4_4  [key=2, style=dotted];
m4_73 -> m4_32  [key=2, style=dotted];
m4_73 -> m4_74  [key=0, style=solid];
m4_74 -> n9  [key=2, style=dotted];
m4_74 -> m4_75  [key=0, style=solid];
m4_57 -> m4_58  [key=0, style=solid];
m4_57 -> m4_46  [key=2, style=dotted];
m4_58 -> m4_53  [key=0, style=bold, color=blue];
m4_75 -> m4_69  [key=0, style=bold, color=blue];
m4_2 -> m4_3  [key=0, style=solid, color=green];
m4_2 -> n9  [key=2, style=dotted, color=green];
m4_3 -> m4_0  [key=0, style=bold, color=blue];
m4_33 -> m4_34  [key=0, style=solid];
m4_36 -> m4_37  [key=0, style=solid, color=green];
m4_36 -> m4_44  [key=2, style=dotted, color=green];
m4_36 -> m4_41  [key=1, style=dashed, color=green, label=thread];
m4_36 -> m4_19  [key=3, color=green, style=bold, label="Local variable Hangfire.SqlServer.SqlServerStorage storage"];
m4_34 -> m4_36  [key=1, style=dashed, color=green, label=releaseLock];
m4_34 -> m4_50  [key=1, style=dashed, color=green, label=releaseLock];
m4_34 -> m4_35  [key=0, style=solid];
m4_34 -> m4_43  [key=2, style=dotted];
m4_34 -> m4_57  [key=1, style=dashed, color=darkseagreen4, label=releaseLock];
m4_34 -> m4_40  [key=1, style=dashed, color=darkseagreen4, label=releaseLock];
m4_35 -> m4_36  [key=0, style=solid, color=green];
m4_35 -> m4_50  [key=1, style=dashed, color=green, label=lockAcquired];
m4_35 -> m4_43  [key=2, style=dotted];
m4_35 -> m4_56  [key=1, style=dashed, color=darkseagreen4, label=lockAcquired];
m4_35 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label=lockAcquired];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> m4_45  [key=2, style=dotted];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_48  [key=2, style=dotted];
m4_39 -> m4_40  [key=0, style=solid, color=green];
m4_39 -> m4_13  [key=2, style=dotted, color=green];
m4_39 -> m4_59  [key=1, style=dashed, color=green, label="lambda expression"];
m4_39 -> m4_19  [key=3, color=green, style=bold, label="Local variable Hangfire.SqlServer.SqlServerStorage storage"];
m4_38 -> m4_39  [key=0, style=solid, color=green];
m4_38 -> m4_46  [key=2, style=dotted];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_47  [key=2, style=dotted];
m4_42 -> m4_33  [key=0, style=bold, color=blue];
m4_85 -> m4_1  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_7  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_11  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_15  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_16  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_21  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_24  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_27  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_28  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_36  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_50  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_39  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_54  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_55  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_60  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_61  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_64  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_67  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_70  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_85 -> m4_71  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts"];
m4_86 -> m4_21  [key=1, style=dashed, color=green, label=storage];
m4_87 -> m4_50  [key=1, style=dashed, color=green, label=releaseLock];
m4_87 -> m4_57  [key=1, style=dashed, color=darkseagreen4, label=releaseLock];
m4_88 -> m4_50  [key=1, style=dashed, color=green, label=lockAcquired];
m4_88 -> m4_56  [key=1, style=dashed, color=darkseagreen4, label=lockAcquired];
m4_89 -> m4_64  [key=1, style=dashed, color=green, label=storage];
m5_14 -> m5_15  [key=0, style=solid];
m5_16 -> m5_0  [key=2, style=dotted];
m5_16 -> m5_17  [key=0, style=solid];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_17  [key=0, style=solid];
m5_17 -> m5_14  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid, color=green];
m5_1 -> m5_2  [key=0, style=solid, color=green];
m5_1 -> m5_5  [key=2, style=dotted, color=green];
m5_1 -> m5_0  [key=0, style=bold, color=blue];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_6  [key=2, style=dotted];
m5_2 -> m5_7  [key=2, style=dotted];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_8  [key=2, style=dotted];
m5_4 -> m5_0  [key=0, style=bold, color=blue];
m5_9 -> m5_10  [key=0, style=solid];
m5_11 -> m5_12  [key=0, style=solid, color=green];
m5_10 -> m5_11  [key=0, style=solid, color=green];
m5_10 -> m5_13  [key=2, style=dotted];
m5_12 -> m5_9  [key=0, style=bold, color=blue];
m6_26 -> m6_27  [key=0, style=solid];
m6_27 -> m6_28  [key=0, style=solid];
m6_27 -> m6_29  [key=2, style=dotted];
m6_28 -> m6_26  [key=0, style=bold, color=blue];
m6_50 -> m6_51  [key=0, style=solid, color=green];
m6_51 -> m6_52  [key=0, style=solid, color=green];
m6_51 -> m6_43  [key=2, style=dotted, color=green];
m6_52 -> m6_53  [key=0, style=solid, color=green];
m6_52 -> m6_22  [key=2, style=dotted, color=green];
m6_52 -> m6_57  [key=3, color=green, style=bold, label="Local variable Hangfire.SqlServer.SqlServerFetchedJob processingJob"];
m6_53 -> m6_54  [key=0, style=solid, color=green];
m6_53 -> m6_44  [key=2, style=dotted, color=green];
m6_57 -> m6_58  [key=0, style=solid, color=green];
m6_57 -> m6_47  [key=2, style=dotted, color=green];
m6_57 -> m6_59  [key=1, style=dashed, color=green, label=table2];
m6_57 -> m6_60  [key=1, style=dashed, color=green, label=table2];
m6_57 -> m6_61  [key=1, style=dashed, color=green, label=table2];
m6_57 -> m6_62  [key=1, style=dashed, color=green, label=table2];
m6_54 -> m6_55  [key=0, style=solid, color=green];
m6_54 -> m6_45  [key=2, style=dotted];
m6_55 -> m6_56  [key=0, style=solid, color=green];
m6_55 -> m6_45  [key=2, style=dotted, color=green];
m6_56 -> m6_57  [key=0, style=solid, color=green];
m6_56 -> m6_46  [key=2, style=dotted];
m6_58 -> m6_59  [key=0, style=solid, color=green];
m6_58 -> m6_48  [key=2, style=dotted, color=green];
m6_59 -> m6_48  [key=2, style=dotted];
m6_59 -> m6_60  [key=0, style=solid];
m6_60 -> m6_48  [key=2, style=dotted];
m6_60 -> m6_61  [key=0, style=solid];
m6_61 -> m6_48  [key=2, style=dotted];
m6_61 -> m6_62  [key=0, style=solid];
m6_62 -> m6_49  [key=2, style=dotted];
m6_62 -> m6_63  [key=0, style=solid];
m6_63 -> m6_26  [key=2, style=dotted];
m6_63 -> m6_64  [key=0, style=solid];
m6_64 -> m6_50  [key=0, style=bold, color=blue];
m6_81 -> m6_82  [key=0, style=solid];
m6_84 -> m6_44  [key=2, style=dotted];
m6_84 -> m6_85  [key=0, style=solid];
m6_85 -> m6_45  [key=2, style=dotted];
m6_85 -> m6_86  [key=0, style=solid];
m6_86 -> m6_45  [key=2, style=dotted];
m6_86 -> m6_87  [key=0, style=solid];
m6_93 -> m6_45  [key=2, style=dotted];
m6_93 -> m6_94  [key=0, style=solid];
m6_88 -> m6_47  [key=2, style=dotted];
m6_88 -> m6_89  [key=0, style=solid];
m6_88 -> m6_90  [key=1, style=dashed, color=darkseagreen4, label=table4];
m6_88 -> m6_91  [key=1, style=dashed, color=darkseagreen4, label=table4];
m6_88 -> m6_92  [key=1, style=dashed, color=darkseagreen4, label=table4];
m6_89 -> m6_48  [key=2, style=dotted];
m6_89 -> m6_90  [key=0, style=solid];
m6_90 -> m6_48  [key=2, style=dotted];
m6_90 -> m6_91  [key=0, style=solid];
m6_91 -> m6_48  [key=2, style=dotted];
m6_91 -> m6_92  [key=0, style=solid];
m6_92 -> m6_49  [key=2, style=dotted];
m6_92 -> m6_93  [key=0, style=solid];
m6_83 -> m6_22  [key=2, style=dotted];
m6_83 -> m6_84  [key=0, style=solid];
m6_94 -> m6_26  [key=2, style=dotted];
m6_94 -> m6_95  [key=0, style=solid];
m6_82 -> m6_43  [key=2, style=dotted];
m6_82 -> m6_83  [key=0, style=solid];
m6_87 -> m6_46  [key=2, style=dotted];
m6_87 -> m6_88  [key=0, style=solid];
m6_95 -> m6_81  [key=0, style=bold, color=blue];
m6_124 -> m6_125  [key=0, style=solid];
m6_127 -> m6_44  [key=2, style=dotted];
m6_127 -> m6_128  [key=0, style=solid];
m6_128 -> m6_45  [key=2, style=dotted];
m6_128 -> m6_129  [key=0, style=solid];
m6_129 -> m6_45  [key=2, style=dotted];
m6_129 -> m6_130  [key=0, style=solid];
m6_135 -> m6_45  [key=2, style=dotted];
m6_135 -> m6_136  [key=0, style=solid];
m6_131 -> m6_47  [key=2, style=dotted];
m6_131 -> m6_132  [key=0, style=solid];
m6_131 -> m6_133  [key=1, style=dashed, color=darkseagreen4, label=table6];
m6_131 -> m6_134  [key=1, style=dashed, color=darkseagreen4, label=table6];
m6_132 -> m6_48  [key=2, style=dotted];
m6_132 -> m6_133  [key=0, style=solid];
m6_133 -> m6_48  [key=2, style=dotted];
m6_133 -> m6_134  [key=0, style=solid];
m6_134 -> m6_49  [key=2, style=dotted];
m6_134 -> m6_135  [key=0, style=solid];
m6_126 -> m6_22  [key=2, style=dotted];
m6_126 -> m6_127  [key=0, style=solid];
m6_136 -> m6_26  [key=2, style=dotted];
m6_136 -> m6_137  [key=0, style=solid];
m6_125 -> m6_43  [key=2, style=dotted];
m6_125 -> m6_126  [key=0, style=solid];
m6_130 -> m6_46  [key=2, style=dotted];
m6_130 -> m6_131  [key=0, style=solid];
m6_137 -> m6_124  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid, color=green];
m6_1 -> m6_2  [key=0, style=solid, color=green];
m6_1 -> m6_5  [key=2, style=dotted, color=green];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_6  [key=2, style=dotted];
m6_2 -> m6_7  [key=2, style=dotted];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_8  [key=2, style=dotted];
m6_4 -> m6_0  [key=0, style=bold, color=blue];
m6_22 -> m6_23  [key=0, style=solid];
m6_23 -> m6_24  [key=0, style=solid];
m6_23 -> m6_25  [key=2, style=dotted];
m6_24 -> m6_22  [key=0, style=bold, color=blue];
m6_65 -> m6_66  [key=0, style=solid];
m6_68 -> m6_44  [key=2, style=dotted];
m6_68 -> m6_69  [key=0, style=solid];
m6_69 -> m6_45  [key=2, style=dotted];
m6_69 -> m6_70  [key=0, style=solid];
m6_70 -> m6_45  [key=2, style=dotted];
m6_70 -> m6_71  [key=0, style=solid];
m6_71 -> m6_45  [key=2, style=dotted];
m6_71 -> m6_72  [key=0, style=solid];
m6_78 -> m6_45  [key=2, style=dotted];
m6_78 -> m6_79  [key=0, style=solid];
m6_74 -> m6_47  [key=2, style=dotted];
m6_74 -> m6_78  [key=1, style=dashed, color=darkseagreen4, label=table3];
m6_74 -> m6_75  [key=0, style=solid];
m6_74 -> m6_76  [key=1, style=dashed, color=darkseagreen4, label=table3];
m6_74 -> m6_77  [key=1, style=dashed, color=darkseagreen4, label=table3];
m6_75 -> m6_48  [key=2, style=dotted];
m6_75 -> m6_76  [key=0, style=solid];
m6_76 -> m6_48  [key=2, style=dotted];
m6_76 -> m6_77  [key=0, style=solid];
m6_77 -> m6_48  [key=2, style=dotted];
m6_77 -> m6_78  [key=0, style=solid];
m6_73 -> m6_49  [key=2, style=dotted];
m6_73 -> m6_74  [key=0, style=solid];
m6_67 -> m6_22  [key=2, style=dotted];
m6_67 -> m6_68  [key=0, style=solid];
m6_79 -> m6_26  [key=2, style=dotted];
m6_79 -> m6_80  [key=0, style=solid];
m6_66 -> m6_43  [key=2, style=dotted];
m6_66 -> m6_67  [key=0, style=solid];
m6_72 -> m6_46  [key=2, style=dotted];
m6_72 -> m6_73  [key=0, style=solid];
m6_80 -> m6_65  [key=0, style=bold, color=blue];
m6_96 -> m6_97  [key=0, style=solid];
m6_99 -> m6_44  [key=2, style=dotted];
m6_99 -> m6_100  [key=0, style=solid];
m6_100 -> m6_45  [key=2, style=dotted];
m6_100 -> m6_101  [key=0, style=solid];
m6_101 -> m6_45  [key=2, style=dotted];
m6_101 -> m6_102  [key=0, style=solid];
m6_102 -> m6_45  [key=2, style=dotted];
m6_102 -> m6_103  [key=0, style=solid];
m6_111 -> m6_45  [key=2, style=dotted];
m6_111 -> m6_112  [key=0, style=solid];
m6_104 -> m6_47  [key=2, style=dotted];
m6_104 -> m6_105  [key=0, style=solid];
m6_104 -> m6_106  [key=1, style=dashed, color=darkseagreen4, label=table5];
m6_104 -> m6_107  [key=1, style=dashed, color=darkseagreen4, label=table5];
m6_104 -> m6_108  [key=1, style=dashed, color=darkseagreen4, label=table5];
m6_104 -> m6_109  [key=1, style=dashed, color=darkseagreen4, label=table5];
m6_104 -> m6_110  [key=1, style=dashed, color=darkseagreen4, label=table5];
m6_105 -> m6_48  [key=2, style=dotted];
m6_105 -> m6_106  [key=0, style=solid];
m6_106 -> m6_48  [key=2, style=dotted];
m6_106 -> m6_107  [key=0, style=solid];
m6_107 -> m6_48  [key=2, style=dotted];
m6_107 -> m6_108  [key=0, style=solid];
m6_108 -> m6_48  [key=2, style=dotted];
m6_108 -> m6_109  [key=0, style=solid];
m6_109 -> m6_48  [key=2, style=dotted];
m6_109 -> m6_110  [key=0, style=solid];
m6_110 -> m6_49  [key=2, style=dotted];
m6_110 -> m6_111  [key=0, style=solid];
m6_98 -> m6_22  [key=2, style=dotted];
m6_98 -> m6_99  [key=0, style=solid];
m6_112 -> m6_26  [key=2, style=dotted];
m6_112 -> m6_113  [key=0, style=solid];
m6_97 -> m6_43  [key=2, style=dotted];
m6_97 -> m6_98  [key=0, style=solid];
m6_103 -> m6_46  [key=2, style=dotted];
m6_103 -> m6_104  [key=0, style=solid];
m6_113 -> m6_96  [key=0, style=bold, color=blue];
m6_14 -> m6_15  [key=0, style=solid, color=green];
m6_15 -> m6_16  [key=0, style=solid, color=green];
m6_15 -> m6_17  [key=0, style=solid, color=green];
m6_16 -> m6_17  [key=0, style=solid, color=green];
m6_16 -> m6_0  [key=2, style=dotted, color=green];
m6_17 -> m6_14  [key=0, style=bold, color=blue];
m6_114 -> m6_115  [key=0, style=solid];
m6_117 -> m6_44  [key=2, style=dotted];
m6_117 -> m6_118  [key=0, style=solid];
m6_118 -> m6_45  [key=2, style=dotted];
m6_118 -> m6_119  [key=0, style=solid];
m6_121 -> m6_45  [key=2, style=dotted];
m6_121 -> m6_122  [key=0, style=solid];
m6_120 -> m6_49  [key=2, style=dotted];
m6_120 -> m6_121  [key=0, style=solid];
m6_116 -> m6_22  [key=2, style=dotted];
m6_116 -> m6_117  [key=0, style=solid];
m6_122 -> m6_26  [key=2, style=dotted];
m6_122 -> m6_123  [key=0, style=solid];
m6_115 -> m6_43  [key=2, style=dotted];
m6_115 -> m6_116  [key=0, style=solid];
m6_119 -> m6_46  [key=2, style=dotted];
m6_119 -> m6_120  [key=0, style=solid];
m6_123 -> m6_114  [key=0, style=bold, color=blue];
m6_30 -> m6_31  [key=0, style=solid];
m6_33 -> m6_34  [key=0, style=solid, color=green];
m6_33 -> m6_44  [key=2, style=dotted, color=green];
m6_32 -> m6_33  [key=0, style=solid, color=green];
m6_32 -> m6_22  [key=2, style=dotted];
m6_34 -> m6_35  [key=0, style=solid, color=green];
m6_34 -> m6_45  [key=2, style=dotted, color=green];
m6_35 -> m6_36  [key=0, style=solid, color=green];
m6_35 -> m6_46  [key=2, style=dotted];
m6_36 -> m6_37  [key=0, style=solid, color=green];
m6_36 -> m6_47  [key=2, style=dotted, color=green];
m6_36 -> m6_38  [key=1, style=dashed, color=green, label=table1];
m6_36 -> m6_39  [key=1, style=dashed, color=green, label=table1];
m6_37 -> m6_38  [key=0, style=solid, color=green];
m6_37 -> m6_48  [key=2, style=dotted, color=green];
m6_38 -> m6_39  [key=0, style=solid, color=green];
m6_38 -> m6_48  [key=2, style=dotted];
m6_39 -> m6_40  [key=0, style=solid, color=green];
m6_39 -> m6_49  [key=2, style=dotted, color=green];
m6_40 -> m6_41  [key=0, style=solid, color=green];
m6_40 -> m6_45  [key=2, style=dotted, color=green];
m6_41 -> m6_42  [key=0, style=solid, color=green];
m6_41 -> m6_26  [key=2, style=dotted, color=green];
m6_31 -> m6_32  [key=0, style=solid];
m6_31 -> m6_43  [key=2, style=dotted];
m6_42 -> m6_30  [key=0, style=bold, color=blue];
m6_138 -> m6_139  [key=0, style=solid];
m6_141 -> m6_44  [key=2, style=dotted];
m6_141 -> m6_142  [key=0, style=solid];
m6_142 -> m6_45  [key=2, style=dotted];
m6_142 -> m6_143  [key=0, style=solid];
m6_143 -> m6_45  [key=2, style=dotted];
m6_143 -> m6_144  [key=0, style=solid];
m6_144 -> m6_45  [key=2, style=dotted];
m6_144 -> m6_145  [key=0, style=solid];
m6_151 -> m6_45  [key=2, style=dotted];
m6_151 -> m6_152  [key=0, style=solid];
m6_146 -> m6_47  [key=2, style=dotted];
m6_146 -> m6_147  [key=0, style=solid];
m6_146 -> m6_148  [key=1, style=dashed, color=darkseagreen4, label=table7];
m6_146 -> m6_149  [key=1, style=dashed, color=darkseagreen4, label=table7];
m6_146 -> m6_150  [key=1, style=dashed, color=darkseagreen4, label=table7];
m6_147 -> m6_48  [key=2, style=dotted];
m6_147 -> m6_148  [key=0, style=solid];
m6_148 -> m6_48  [key=2, style=dotted];
m6_148 -> m6_149  [key=0, style=solid];
m6_149 -> m6_48  [key=2, style=dotted];
m6_149 -> m6_150  [key=0, style=solid];
m6_150 -> m6_49  [key=2, style=dotted];
m6_150 -> m6_151  [key=0, style=solid];
m6_140 -> m6_22  [key=2, style=dotted];
m6_140 -> m6_141  [key=0, style=solid];
m6_152 -> m6_26  [key=2, style=dotted];
m6_152 -> m6_153  [key=0, style=solid];
m6_139 -> m6_43  [key=2, style=dotted];
m6_139 -> m6_140  [key=0, style=solid];
m6_145 -> m6_46  [key=2, style=dotted];
m6_145 -> m6_146  [key=0, style=solid];
m6_153 -> m6_138  [key=0, style=bold, color=blue];
m6_154 -> m6_41  [key=1, style=dashed, color=green, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_52  [key=1, style=dashed, color=green, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_63  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_67  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_94  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_98  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_112  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_116  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_122  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_126  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_136  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_140  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m6_154 -> m6_152  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.ServerFiltersFeature"];
m7_46 -> m7_47  [key=0, style=solid];
m7_46 -> m7_60  [key=2, style=dotted];
m7_13 -> m7_34  [key=0, style=solid];
m7_13 -> m7_35  [key=2, style=dotted];
m7_8 -> m7_9  [key=0, style=solid];
m7_38 -> m7_39  [key=0, style=solid];
m7_42 -> m7_43  [key=0, style=solid, color=green];
m7_42 -> m7_45  [key=0, style=solid, color=green];
m7_42 -> m7_44  [key=1, style=dashed, color=green, label=alias];
m7_41 -> m7_42  [key=0, style=solid, color=green];
m7_41 -> m7_57  [key=2, style=dotted];
m7_41 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=builder];
m7_41 -> m7_45  [key=1, style=dashed, color=darkseagreen4, label=builder];
m7_41 -> m7_46  [key=1, style=dashed, color=darkseagreen4, label=builder];
m7_41 -> m7_49  [key=1, style=dashed, color=darkseagreen4, label=builder];
m7_41 -> m7_50  [key=1, style=dashed, color=darkseagreen4, label=builder];
m7_43 -> m7_42  [key=0, style=solid, color=green];
m7_43 -> m7_44  [key=0, style=solid];
m7_43 -> m7_58  [key=2, style=dotted];
m7_45 -> m7_46  [key=0, style=solid];
m7_45 -> m7_47  [key=0, style=solid];
m7_44 -> m7_45  [key=0, style=solid];
m7_44 -> m7_59  [key=2, style=dotted];
m7_40 -> m7_41  [key=0, style=solid];
m7_40 -> m7_43  [key=1, style=dashed, color=darkseagreen4, label=parts];
m7_40 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=parts];
m7_40 -> m7_54  [key=2, style=dotted];
m7_40 -> m7_55  [key=2, style=dotted];
m7_40 -> m7_56  [key=2, style=dotted];
m7_40 -> m7_62  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_40 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_40 -> m7_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_40 -> m7_72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_40 -> m7_48  [key=1, style=dashed, color=darkseagreen4, label=parts];
m7_40 -> m7_49  [key=1, style=dashed, color=darkseagreen4, label=parts];
m7_49 -> m7_50  [key=0, style=solid];
m7_49 -> m7_59  [key=2, style=dotted];
m7_49 -> m7_51  [key=2, style=dotted];
m7_50 -> m7_53  [key=0, style=solid];
m7_50 -> m7_61  [key=2, style=dotted];
m7_50 -> m7_47  [key=0, style=bold, color=blue];
m7_47 -> m7_49  [key=1, style=dashed, color=darkseagreen4, label=IDbConnection];
m7_47 -> m7_50  [key=0, style=solid];
m7_47 -> m7_48  [key=0, style=solid];
m7_39 -> m7_40  [key=0, style=solid];
m7_39 -> m7_50  [key=1, style=dashed, color=darkseagreen4, label=canNotParseMessage];
m7_39 -> m7_52  [key=1, style=dashed, color=darkseagreen4, label=canNotParseMessage];
m7_48 -> m7_49  [key=0, style=solid];
m7_48 -> m7_58  [key=2, style=dotted];
m7_48 -> m7_47  [key=0, style=solid];
m7_48 -> m7_48  [key=3, color=darkorchid, style=bold, label="Local variable string enqueueJobSql"];
m7_52 -> m7_53  [key=0, style=solid];
m7_52 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueue"];
m7_52 -> m7_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueue"];
m7_52 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueue"];
m7_52 -> m7_21  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueue"];
m7_52 -> m7_30  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerJobQueue"];
m7_51 -> m7_52  [key=0, style=solid];
m7_53 -> m7_38  [key=0, style=bold, color=blue];
m7_20 -> m7_21  [key=0, style=solid];
m7_20 -> m7_38  [key=2, style=dotted];
m7_20 -> m7_23  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m7_20 -> m7_27  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m7_20 -> m7_28  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m7_20 -> m7_33  [key=1, style=dashed, color=red, label=transaction];
m7_21 -> m7_22  [key=0, style=solid];
m7_21 -> m7_14  [key=2, style=dotted];
m7_21 -> m7_23  [key=1, style=dashed, color=darkseagreen4, label=connection];
m7_21 -> m7_26  [key=0, style=solid];
m7_21 -> m7_39  [key=2, style=dotted];
m7_21 -> n8  [key=2, style=dotted];
m7_21 -> m7_41  [key=2, style=dotted];
m7_21 -> m7_32  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m7_21 -> m7_33  [key=1, style=dashed, color=red, label=fetchedJob];
m7_22 -> m7_23  [key=0, style=solid];
m7_22 -> m7_25  [key=2, style=dotted];
m7_23 -> m7_24  [key=0, style=solid, color=red];
m7_23 -> m7_26  [key=2, style=dotted];
m7_23 -> m7_42  [key=2, style=dotted];
m7_24 -> m7_20  [key=0, style=bold, color=blue];
m7_24 -> m7_25  [key=0, style=solid, color=red];
m7_24 -> m7_42  [key=2, style=dotted, color=red];
m7_19 -> m7_20  [key=0, style=solid];
m7_19 -> m7_37  [key=2, style=dotted];
m7_19 -> m7_21  [key=1, style=dashed, color=darkseagreen4, label=connection];
m7_19 -> m7_24  [key=1, style=dashed, color=red, label=connection];
m7_19 -> m7_29  [key=1, style=dashed, color=red, label=connection];
m7_19 -> m7_33  [key=1, style=dashed, color=red, label=connection];
m7_26 -> m7_27  [key=0, style=solid];
m7_26 -> m7_32  [key=0, style=solid];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m7_0 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
m7_0 -> m7_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=0, style=solid];
m7_3 -> m7_4  [key=0, style=solid];
m7_3 -> m7_5  [key=0, style=solid];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_7  [key=0, style=solid];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_12  [key=0, style=solid];
m7_6 -> m7_13  [key=2, style=dotted];
m7_2 -> m7_7  [key=0, style=solid];
m7_2 -> m7_8  [key=2, style=dotted];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m7_2 -> m7_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
m7_4 -> m7_7  [key=0, style=solid];
m7_4 -> m7_8  [key=2, style=dotted];
m7_4 -> m7_12  [key=0, style=solid];
m7_4 -> m7_13  [key=2, style=dotted];
m7_7 -> m7_0  [key=0, style=bold, color=blue];
m7_7 -> m7_8  [key=0, style=solid];
m7_31 -> m7_34  [key=1, style=dashed, color=green, label=ILog];
m7_31 -> m7_32  [key=0, style=solid];
m7_31 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label=ILog];
m7_31 -> m7_36  [key=2, style=dotted];
m7_31 -> m7_31  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_34 -> m7_35  [key=0, style=solid, color=green];
m7_34 -> m7_37  [key=2, style=dotted, color=green];
m7_34 -> m7_9  [key=0, style=bold, color=blue];
m7_33 -> m7_34  [key=0, style=solid, color=red];
m7_33 -> m7_37  [key=2, style=dotted];
m7_33 -> m7_45  [key=2, style=dotted, color=red];
m7_33 -> m7_46  [key=2, style=dotted, color=red];
m7_32 -> m7_33  [key=0, style=solid, color=red];
m7_32 -> m7_36  [key=2, style=dotted];
m7_32 -> m7_17  [key=0, style=solid];
m7_35 -> m7_31  [key=0, style=bold, color=blue];
m7_16 -> m7_17  [key=0, style=solid];
m7_16 -> m7_14  [key=3, color=darkorchid, style=bold, label="Local variable SqlTransaction transaction"];
m7_17 -> m7_18  [key=0, style=solid];
m7_17 -> m7_19  [key=2, style=dotted];
m7_17 -> m7_14  [key=2, style=dotted];
m7_17 -> m7_21  [key=1, style=dashed, color=darkseagreen4, label=fetchJobSqlTemplate];
m7_17 -> m7_17  [key=3, color=darkorchid, style=bold, label="Local variable string fetchJobSqlTemplate"];
m7_18 -> m7_16  [key=0, style=bold, color=blue];
m7_18 -> m7_19  [key=0, style=solid];
m7_18 -> m7_36  [key=2, style=dotted];
m7_18 -> m7_18  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_18 -> m7_30  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_30 -> m7_31  [key=0, style=solid];
m7_30 -> m7_44  [key=2, style=dotted];
m7_30 -> m7_30  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_25 -> m7_34  [key=0, style=solid];
m7_10 -> m7_11  [key=0, style=solid];
m7_10 -> m7_14  [key=2, style=dotted];
m7_10 -> m7_12  [key=0, style=solid];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_12  [key=0, style=solid];
m7_9 -> m7_18  [key=1, style=dashed, color=darkseagreen4, label="System.Threading.CancellationToken"];
m7_9 -> m7_21  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
m7_11 -> m7_12  [key=0, style=solid];
m7_11 -> m7_15  [key=2, style=dotted];
m7_11 -> m7_34  [key=0, style=solid];
m7_11 -> m7_8  [key=2, style=dotted];
m7_12 -> m7_2  [key=0, style=bold, color=blue];
m7_12 -> m7_13  [key=0, style=solid];
m7_12 -> m7_14  [key=0, style=solid];
m7_72 -> m7_73  [key=0, style=solid];
m7_62 -> m7_63  [key=0, style=solid];
m7_65 -> m7_66  [key=0, style=solid];
m7_69 -> m7_70  [key=0, style=solid];
m7_63 -> m7_54  [key=2, style=dotted];
m7_63 -> m7_64  [key=0, style=solid];
m7_64 -> m7_62  [key=0, style=bold, color=blue];
m7_67 -> m7_65  [key=0, style=bold, color=blue];
m7_66 -> m7_67  [key=0, style=solid];
m7_66 -> m7_68  [key=2, style=dotted];
m7_71 -> m7_69  [key=0, style=bold, color=blue];
m7_70 -> m7_71  [key=0, style=solid];
m7_73 -> m7_74  [key=0, style=solid];
m7_74 -> m7_72  [key=0, style=bold, color=blue];
m7_27 -> m7_28  [key=0, style=solid];
m7_27 -> m7_43  [key=2, style=dotted];
m7_28 -> m7_29  [key=0, style=solid, color=red];
m7_28 -> m7_30  [key=2, style=dotted];
m7_28 -> m7_42  [key=2, style=dotted];
m7_29 -> m7_27  [key=0, style=bold, color=blue];
m7_29 -> m7_30  [key=0, style=solid, color=red];
m7_29 -> m7_42  [key=2, style=dotted, color=red];
m7_15 -> m7_16  [key=0, style=solid];
m7_15 -> m7_14  [key=3, color=darkorchid, style=bold, label="Local variable SqlConnection connection"];
m7_14 -> m7_75  [key=0, style=solid];
m7_14 -> m7_15  [key=0, style=solid];
m7_14 -> m7_14  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.SqlServer.SqlServerJobQueue.FetchedJob fetchedJob"];
m7_75 -> m7_76  [key=0, style=solid];
m7_75 -> m7_79  [key=2, style=dotted];
m7_75 -> m7_77  [key=1, style=dashed, color=darkseagreen4, label=connection];
m7_76 -> m7_77  [key=0, style=solid];
m7_76 -> m7_80  [key=2, style=dotted];
m7_77 -> m7_78  [key=0, style=solid];
m7_78 -> m7_14  [key=0, style=bold, color=blue];
m7_81 -> m7_34  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerStorage"];
m7_81 -> m7_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m7_81 -> m7_8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m7_81 -> m7_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m7_81 -> m7_17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m7_81 -> m7_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m7_81 -> m7_22  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m7_81 -> m7_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m7_81 -> m7_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m7_81 -> m7_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m7_81 -> m7_75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
m8_57 -> m8_88  [key=0, style=solid];
m8_88 -> m8_89  [key=0, style=solid];
m8_88 -> m8_18  [key=2, style=dotted];
m8_89 -> m8_57  [key=0, style=bold, color=blue];
m8_19 -> m8_20  [key=0, style=solid];
m8_20 -> m8_21  [key=0, style=solid];
m8_20 -> m8_13  [key=2, style=dotted];
m8_20 -> m8_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_21 -> m8_22  [key=0, style=solid];
m8_21 -> n9  [key=2, style=dotted];
m8_22 -> m8_19  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid, color=red];
m8_1 -> m8_2  [key=0, style=solid, color=red];
m8_1 -> m8_5  [key=2, style=dotted, color=red];
m8_2 -> m8_3  [key=0, style=solid];
m8_2 -> m8_6  [key=2, style=dotted];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_7  [key=2, style=dotted];
m8_3 -> m8_8  [key=2, style=dotted];
m8_4 -> m8_0  [key=0, style=bold, color=blue];
m8_9 -> m8_10  [key=0, style=solid];
m8_10 -> m8_11  [key=0, style=solid];
m8_10 -> m8_13  [key=2, style=dotted];
m8_10 -> m8_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> n9  [key=2, style=dotted];
m8_12 -> m8_9  [key=0, style=bold, color=blue];
m8_47 -> m8_48  [key=0, style=solid];
m8_48 -> m8_49  [key=0, style=solid];
m8_48 -> m8_18  [key=2, style=dotted];
m8_48 -> m8_50  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m8_49 -> m8_50  [key=0, style=solid];
m8_49 -> n9  [key=2, style=dotted];
m8_50 -> m8_51  [key=0, style=solid];
m8_50 -> n9  [key=2, style=dotted];
m8_51 -> m8_47  [key=0, style=bold, color=blue];
m8_26 -> m8_27  [key=0, style=solid];
m8_27 -> m8_28  [key=0, style=solid];
m8_27 -> m8_13  [key=2, style=dotted];
m8_27 -> m8_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> n9  [key=2, style=dotted];
m8_28 -> m8_47  [key=3, color=darkorchid, style=bold, label="Local variable Hangfire.Client.CreateContext context"];
m8_29 -> m8_26  [key=0, style=bold, color=blue];
m8_74 -> m8_75  [key=0, style=solid];
m8_75 -> m8_76  [key=0, style=solid];
m8_75 -> m8_57  [key=2, style=dotted];
m8_76 -> m8_77  [key=0, style=solid, color=green];
m8_76 -> m8_80  [key=2, style=dotted];
m8_77 -> m8_78  [key=0, style=solid, color=green];
m8_77 -> m8_59  [key=2, style=dotted, color=green];
m8_77 -> m8_81  [key=1, style=dashed, color=green, label="lambda expression"];
m8_78 -> m8_79  [key=0, style=solid];
m8_78 -> m8_59  [key=2, style=dotted];
m8_78 -> m8_85  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_79 -> m8_74  [key=0, style=bold, color=blue];
m8_33 -> m8_34  [key=0, style=solid];
m8_34 -> m8_35  [key=0, style=solid];
m8_34 -> m8_13  [key=2, style=dotted];
m8_34 -> m8_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_35 -> m8_36  [key=0, style=solid];
m8_35 -> n9  [key=2, style=dotted];
m8_36 -> m8_33  [key=0, style=bold, color=blue];
m8_85 -> m8_86  [key=0, style=solid];
m8_85 -> m8_82  [key=0, style=solid, color=green];
m8_15 -> m8_16  [key=0, style=solid];
m8_16 -> m8_17  [key=0, style=solid];
m8_16 -> m8_18  [key=2, style=dotted];
m8_17 -> m8_15  [key=0, style=bold, color=blue];
m8_23 -> m8_24  [key=0, style=solid];
m8_24 -> m8_25  [key=0, style=solid];
m8_24 -> m8_18  [key=2, style=dotted];
m8_25 -> m8_23  [key=0, style=bold, color=blue];
m8_30 -> m8_31  [key=0, style=solid];
m8_31 -> m8_32  [key=0, style=solid];
m8_31 -> m8_18  [key=2, style=dotted];
m8_32 -> m8_30  [key=0, style=bold, color=blue];
m8_37 -> m8_38  [key=0, style=solid];
m8_38 -> m8_39  [key=0, style=solid];
m8_38 -> m8_18  [key=2, style=dotted];
m8_39 -> m8_37  [key=0, style=bold, color=blue];
m8_44 -> m8_45  [key=0, style=solid];
m8_45 -> m8_46  [key=0, style=solid];
m8_45 -> m8_18  [key=2, style=dotted];
m8_46 -> m8_44  [key=0, style=bold, color=blue];
m8_60 -> m8_61  [key=0, style=solid];
m8_61 -> m8_62  [key=0, style=solid];
m8_61 -> m8_63  [key=2, style=dotted];
m8_62 -> m8_60  [key=0, style=bold, color=blue];
m8_70 -> m8_71  [key=0, style=solid];
m8_71 -> m8_72  [key=0, style=solid];
m8_71 -> m8_73  [key=2, style=dotted];
m8_72 -> m8_70  [key=0, style=bold, color=blue];
m8_81 -> m8_82  [key=0, style=solid, color=green];
m8_82 -> m8_83  [key=0, style=solid, color=green];
m8_82 -> m8_84  [key=2, style=dotted, color=green];
m8_82 -> m8_87  [key=0, style=solid, color=green];
m8_83 -> m8_81  [key=0, style=bold, color=blue];
m8_86 -> m8_87  [key=0, style=solid];
m8_86 -> m8_84  [key=2, style=dotted];
m8_87 -> m8_85  [key=0, style=bold, color=blue];
m8_64 -> m8_65  [key=0, style=solid];
m8_65 -> m8_66  [key=0, style=solid];
m8_65 -> m8_57  [key=2, style=dotted];
m8_66 -> m8_67  [key=0, style=solid];
m8_66 -> m8_69  [key=2, style=dotted];
m8_67 -> m8_68  [key=0, style=solid];
m8_67 -> m8_59  [key=2, style=dotted];
m8_67 -> m8_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_68 -> m8_64  [key=0, style=bold, color=blue];
m8_52 -> m8_53  [key=0, style=solid];
m8_53 -> m8_54  [key=0, style=solid];
m8_53 -> m8_57  [key=2, style=dotted];
m8_54 -> m8_55  [key=0, style=solid];
m8_54 -> m8_58  [key=2, style=dotted];
m8_55 -> m8_56  [key=0, style=solid];
m8_55 -> m8_59  [key=2, style=dotted];
m8_55 -> m8_60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_55 -> m8_55  [key=3, color=green, style=bold, label="Local variable string arrangeSql"];
m8_56 -> m8_52  [key=0, style=bold, color=blue];
m8_40 -> m8_41  [key=0, style=solid];
m8_41 -> m8_42  [key=0, style=solid];
m8_41 -> m8_13  [key=2, style=dotted];
m8_41 -> m8_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_42 -> m8_43  [key=0, style=solid];
m8_42 -> n9  [key=2, style=dotted];
m8_43 -> m8_40  [key=0, style=bold, color=blue];
m8_90 -> m8_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_20  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_24  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_27  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_38  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_45  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_48  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_55  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_67  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_77  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_78  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m8_90 -> m8_88  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerFetchedJobFacts"];
m9_0 -> m9_1  [key=0, style=solid];
m9_0 -> m9_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_0 -> m9_5  [key=1, style=dashed, color=darkseagreen4, label=MessageQueueTransaction];
m9_0 -> m9_6  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_1 -> m9_2  [key=0, style=solid];
m9_1 -> m9_3  [key=0, style=solid];
m9_3 -> m9_4  [key=0, style=solid];
m9_3 -> m9_5  [key=0, style=solid];
m9_5 -> m9_6  [key=0, style=solid];
m9_6 -> m9_7  [key=0, style=solid];
m9_2 -> m9_7  [key=0, style=solid];
m9_2 -> m9_8  [key=2, style=dotted];
m9_4 -> m9_7  [key=0, style=solid];
m9_4 -> m9_8  [key=2, style=dotted];
m9_7 -> m9_0  [key=0, style=bold, color=blue];
m9_9 -> m9_10  [key=0, style=solid];
m9_10 -> m9_11  [key=0, style=solid];
m9_10 -> m9_12  [key=0, style=solid];
m9_11 -> m9_15  [key=0, style=solid];
m9_12 -> m9_13  [key=0, style=solid];
m9_13 -> m9_14  [key=0, style=solid];
m9_13 -> n34  [key=2, style=dotted];
m9_14 -> m9_15  [key=0, style=solid];
m9_14 -> m9_17  [key=2, style=dotted];
m9_15 -> m9_9  [key=0, style=bold, color=blue];
m9_18 -> m9_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m9_18 -> m9_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m9_18 -> m9_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m9_18 -> m9_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m9_18 -> m9_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m9_18 -> m9_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.MessageQueueProcessingJob"];
m10_6 -> m10_7  [key=0, style=solid];
m10_7 -> m10_8  [key=0, style=solid];
m10_7 -> m10_4  [key=2, style=dotted];
m10_7 -> m10_11  [key=2, style=dotted];
m10_8 -> m10_9  [key=0, style=solid];
m10_8 -> m10_12  [key=2, style=dotted];
m10_9 -> m10_10  [key=0, style=solid];
m10_9 -> m10_13  [key=2, style=dotted];
m10_9 -> m10_14  [key=2, style=dotted];
m10_10 -> m10_6  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_4  [key=2, style=dotted];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> n9  [key=2, style=dotted];
m10_3 -> m10_0  [key=0, style=bold, color=blue];
m11_22 -> m11_23  [key=0, style=solid];
m11_23 -> m11_24  [key=0, style=solid];
m11_23 -> m11_25  [key=2, style=dotted];
m11_24 -> m11_22  [key=0, style=bold, color=blue];
m11_11 -> m11_12  [key=0, style=solid];
m11_12 -> m11_9  [key=0, style=bold, color=blue];
m11_36 -> m11_37  [key=0, style=solid];
m11_37 -> m11_38  [key=0, style=solid];
m11_37 -> m11_43  [key=2, style=dotted];
m11_38 -> m11_39  [key=0, style=solid];
m11_38 -> m11_22  [key=2, style=dotted];
m11_39 -> m11_40  [key=0, style=solid];
m11_39 -> m11_30  [key=2, style=dotted];
m11_40 -> m11_41  [key=0, style=solid];
m11_40 -> m11_44  [key=2, style=dotted];
m11_41 -> m11_42  [key=0, style=solid];
m11_41 -> m11_26  [key=2, style=dotted];
m11_42 -> m11_36  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid];
m11_8 -> m11_9  [key=0, style=solid, color=green];
m11_8 -> m11_11  [key=2, style=dotted, color=green];
m11_7 -> m11_8  [key=0, style=solid, color=green];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_5  [key=2, style=dotted];
m11_2 -> m11_3  [key=0, style=solid];
m11_2 -> n31  [key=2, style=dotted];
m11_2 -> m11_6  [key=2, style=dotted];
m11_2 -> m11_7  [key=2, style=dotted];
m11_3 -> m11_11  [key=2, style=dotted];
m11_3 -> m11_4  [key=0, style=solid];
m11_3 -> m11_8  [key=2, style=dotted];
m11_4 -> m11_5  [key=0, style=solid];
m11_4 -> m11_12  [key=2, style=dotted];
m11_4 -> m11_0  [key=0, style=bold, color=blue];
m11_5 -> m11_11  [key=2, style=dotted];
m11_5 -> m11_6  [key=0, style=solid];
m11_6 -> m11_7  [key=0, style=solid];
m11_9 -> m11_0  [key=0, style=bold, color=blue];
m11_9 -> m11_10  [key=0, style=solid];
m11_18 -> m11_19  [key=0, style=solid];
m11_19 -> m11_20  [key=0, style=solid];
m11_19 -> m11_21  [key=2, style=dotted];
m11_20 -> m11_18  [key=0, style=bold, color=blue];
m11_26 -> m11_27  [key=0, style=solid];
m11_27 -> m11_28  [key=0, style=solid];
m11_27 -> m11_29  [key=2, style=dotted];
m11_28 -> m11_26  [key=0, style=bold, color=blue];
m11_13 -> m11_8  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m11_13 -> m11_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m11_13 -> m11_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m11_13 -> m11_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m11_13 -> m11_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m11_13 -> m11_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m11_13 -> m11_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m11_13 -> m11_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m11_59 -> m11_60  [key=0, style=solid];
m11_60 -> m11_61  [key=0, style=solid];
m11_60 -> m11_43  [key=2, style=dotted];
m11_61 -> m11_62  [key=0, style=solid];
m11_61 -> m11_22  [key=2, style=dotted];
m11_62 -> m11_63  [key=0, style=solid];
m11_62 -> m11_30  [key=2, style=dotted];
m11_63 -> m11_64  [key=0, style=solid];
m11_63 -> m11_67  [key=2, style=dotted];
m11_64 -> m11_65  [key=0, style=solid];
m11_64 -> m11_44  [key=2, style=dotted];
m11_65 -> m11_66  [key=0, style=solid];
m11_65 -> m11_26  [key=2, style=dotted];
m11_66 -> m11_59  [key=0, style=bold, color=blue];
m11_68 -> m11_69  [key=0, style=solid];
m11_69 -> m11_70  [key=0, style=solid];
m11_69 -> m11_43  [key=2, style=dotted];
m11_70 -> m11_71  [key=0, style=solid];
m11_70 -> m11_22  [key=2, style=dotted];
m11_71 -> m11_72  [key=0, style=solid];
m11_71 -> m11_30  [key=2, style=dotted];
m11_72 -> m11_73  [key=0, style=solid];
m11_72 -> m11_67  [key=2, style=dotted];
m11_73 -> m11_74  [key=0, style=solid];
m11_73 -> m11_35  [key=2, style=dotted];
m11_74 -> m11_75  [key=0, style=solid];
m11_74 -> m11_44  [key=2, style=dotted];
m11_75 -> m11_76  [key=0, style=solid];
m11_75 -> m11_26  [key=2, style=dotted];
m11_76 -> m11_68  [key=0, style=bold, color=blue];
m11_45 -> m11_46  [key=0, style=solid];
m11_46 -> m11_47  [key=0, style=solid];
m11_46 -> m11_43  [key=2, style=dotted];
m11_47 -> m11_48  [key=0, style=solid];
m11_47 -> m11_22  [key=2, style=dotted];
m11_48 -> m11_49  [key=0, style=solid];
m11_48 -> m11_30  [key=2, style=dotted];
m11_49 -> m11_50  [key=0, style=solid];
m11_49 -> m11_57  [key=2, style=dotted];
m11_49 -> m11_51  [key=1, style=dashed, color=darkseagreen4, label=table1];
m11_49 -> m11_52  [key=1, style=dashed, color=darkseagreen4, label=table1];
m11_49 -> m11_53  [key=1, style=dashed, color=darkseagreen4, label=table1];
m11_49 -> m11_54  [key=1, style=dashed, color=darkseagreen4, label=table1];
m11_50 -> m11_51  [key=0, style=solid];
m11_50 -> m11_58  [key=2, style=dotted];
m11_51 -> m11_52  [key=0, style=solid];
m11_51 -> m11_58  [key=2, style=dotted];
m11_52 -> m11_53  [key=0, style=solid];
m11_52 -> m11_58  [key=2, style=dotted];
m11_53 -> m11_54  [key=0, style=solid];
m11_53 -> m11_58  [key=2, style=dotted];
m11_54 -> m11_55  [key=0, style=solid];
m11_54 -> m11_44  [key=2, style=dotted];
m11_55 -> m11_56  [key=0, style=solid];
m11_55 -> m11_26  [key=2, style=dotted];
m11_56 -> m11_45  [key=0, style=bold, color=blue];
m11_10 -> m11_11  [key=0, style=solid];
m11_10 -> m11_13  [key=2, style=dotted];
m11_30 -> m11_31  [key=0, style=solid];
m11_31 -> m11_32  [key=0, style=solid];
m11_31 -> m11_34  [key=2, style=dotted];
m11_32 -> m11_33  [key=0, style=solid];
m11_32 -> m11_35  [key=2, style=dotted];
m11_33 -> m11_30  [key=0, style=bold, color=blue];
m11_14 -> m11_15  [key=0, style=solid];
m11_15 -> m11_16  [key=0, style=solid];
m11_15 -> m11_17  [key=0, style=solid];
m11_16 -> m11_17  [key=0, style=solid];
m11_16 -> m11_0  [key=2, style=dotted];
m11_17 -> m11_14  [key=0, style=bold, color=blue];
m11_77 -> m11_38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m11_77 -> m11_39  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m11_77 -> m11_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m11_77 -> m11_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m11_77 -> m11_48  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m11_77 -> m11_55  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m11_77 -> m11_61  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m11_77 -> m11_62  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m11_77 -> m11_65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m11_77 -> m11_70  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m11_77 -> m11_71  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m11_77 -> m11_75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Tests.States.FailedStateFeature"];
m12_153 -> m12_154  [key=0, style=solid, color=red];
m12_154 -> m12_155  [key=0, style=solid, color=red];
m12_154 -> m12_36  [key=2, style=dotted, color=red];
m12_154 -> m12_156  [key=1, style=dashed, color=red, label="lambda expression"];
m12_155 -> m12_153  [key=0, style=bold, color=blue];
m12_627 -> m12_628  [key=0, style=solid];
m12_628 -> m12_629  [key=0, style=solid];
m12_628 -> m12_632  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_628 -> m12_628  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_629 -> m12_630  [key=0, style=solid];
m12_629 -> m12_36  [key=2, style=dotted];
m12_629 -> m12_631  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_630 -> m12_627  [key=0, style=bold, color=blue];
m12_119 -> m12_120  [key=0, style=solid];
m12_120 -> m12_121  [key=0, style=solid];
m12_120 -> m12_124  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_120 -> m12_33  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_121 -> m12_122  [key=0, style=solid];
m12_121 -> m12_36  [key=2, style=dotted];
m12_121 -> m12_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_122 -> m12_119  [key=0, style=bold, color=blue];
m12_393 -> m12_394  [key=0, style=solid];
m12_394 -> m12_395  [key=0, style=solid];
m12_394 -> m12_36  [key=2, style=dotted];
m12_394 -> m12_396  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_395 -> m12_393  [key=0, style=bold, color=blue];
m12_614 -> m12_615  [key=0, style=solid];
m12_615 -> m12_616  [key=0, style=solid];
m12_615 -> m12_36  [key=2, style=dotted];
m12_615 -> m12_617  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_616 -> m12_614  [key=0, style=bold, color=blue];
m12_419 -> m12_420  [key=0, style=solid];
m12_420 -> m12_421  [key=0, style=solid];
m12_420 -> m12_36  [key=2, style=dotted];
m12_420 -> m12_422  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_421 -> m12_419  [key=0, style=bold, color=blue];
m12_476 -> m12_477  [key=0, style=solid];
m12_477 -> m12_478  [key=0, style=solid];
m12_477 -> m12_36  [key=2, style=dotted];
m12_477 -> m12_479  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_478 -> m12_476  [key=0, style=bold, color=blue];
m12_782 -> m12_783  [key=0, style=solid];
m12_783 -> m12_784  [key=0, style=solid];
m12_783 -> m12_36  [key=2, style=dotted];
m12_783 -> m12_785  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_784 -> m12_782  [key=0, style=bold, color=blue];
m12_319 -> m12_320  [key=0, style=solid];
m12_320 -> m12_321  [key=0, style=solid];
m12_320 -> m12_36  [key=2, style=dotted];
m12_320 -> m12_322  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_321 -> m12_319  [key=0, style=bold, color=blue];
m12_559 -> m12_560  [key=0, style=solid];
m12_560 -> m12_561  [key=0, style=solid];
m12_560 -> m12_36  [key=2, style=dotted];
m12_560 -> m12_562  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_561 -> m12_559  [key=0, style=bold, color=blue];
m12_589 -> m12_590  [key=0, style=solid];
m12_590 -> m12_591  [key=0, style=solid];
m12_590 -> m12_36  [key=2, style=dotted];
m12_590 -> m12_592  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_591 -> m12_589  [key=0, style=bold, color=blue];
m12_407 -> m12_408  [key=0, style=solid];
m12_408 -> m12_409  [key=0, style=solid];
m12_408 -> m12_36  [key=2, style=dotted];
m12_408 -> m12_410  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_409 -> m12_407  [key=0, style=bold, color=blue];
m12_177 -> m12_178  [key=0, style=solid];
m12_178 -> m12_179  [key=0, style=solid];
m12_178 -> m12_46  [key=2, style=dotted];
m12_178 -> m12_47  [key=2, style=dotted];
m12_179 -> m12_177  [key=0, style=bold, color=blue];
m12_816 -> m12_817  [key=0, style=solid];
m12_817 -> m12_818  [key=0, style=solid];
m12_817 -> m12_36  [key=2, style=dotted];
m12_817 -> m12_819  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_818 -> m12_816  [key=0, style=bold, color=blue];
m12_267 -> m12_268  [key=0, style=solid];
m12_268 -> m12_269  [key=0, style=solid];
m12_268 -> m12_36  [key=2, style=dotted];
m12_268 -> m12_270  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_269 -> m12_267  [key=0, style=bold, color=blue];
m12_514 -> m12_515  [key=0, style=solid];
m12_515 -> m12_516  [key=0, style=solid];
m12_515 -> m12_36  [key=2, style=dotted];
m12_515 -> m12_517  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_516 -> m12_514  [key=0, style=bold, color=blue];
m12_194 -> m12_195  [key=0, style=solid];
m12_195 -> m12_196  [key=0, style=solid];
m12_195 -> m12_36  [key=2, style=dotted];
m12_195 -> m12_197  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_196 -> m12_194  [key=0, style=bold, color=blue];
m12_293 -> m12_294  [key=0, style=solid];
m12_294 -> m12_295  [key=0, style=solid];
m12_294 -> m12_36  [key=2, style=dotted];
m12_294 -> m12_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_295 -> m12_293  [key=0, style=bold, color=blue];
m12_677 -> m12_678  [key=0, style=solid];
m12_678 -> m12_679  [key=0, style=solid];
m12_678 -> m12_36  [key=2, style=dotted];
m12_678 -> m12_680  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_679 -> m12_677  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid, color=red];
m12_1 -> m12_5  [key=2, style=dotted];
m12_1 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label=defaultProvider];
m12_2 -> m12_3  [key=0, style=solid, color=red];
m12_2 -> m12_6  [key=2, style=dotted, color=red];
m12_2 -> m12_7  [key=2, style=dotted, color=red];
m12_2 -> m12_8  [key=2, style=dotted, color=red];
m12_2 -> m12_10  [key=1, style=dashed, color=red, label="lambda expression"];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_9  [key=2, style=dotted];
m12_4 -> m12_0  [key=0, style=bold, color=blue];
m12_830 -> m12_831  [key=0, style=solid];
m12_831 -> m12_832  [key=0, style=solid];
m12_831 -> m12_835  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_831 -> m12_831  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_832 -> m12_833  [key=0, style=solid];
m12_832 -> m12_36  [key=2, style=dotted];
m12_832 -> m12_834  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_833 -> m12_830  [key=0, style=bold, color=blue];
m12_692 -> m12_693  [key=0, style=solid];
m12_693 -> m12_694  [key=0, style=solid];
m12_693 -> m12_697  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_693 -> m12_693  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_694 -> m12_695  [key=0, style=solid];
m12_694 -> m12_36  [key=2, style=dotted];
m12_694 -> m12_696  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_695 -> m12_692  [key=0, style=bold, color=blue];
m12_847 -> m12_848  [key=0, style=solid];
m12_10 -> m12_11  [key=0, style=solid, color=red];
m12_11 -> m12_12  [key=0, style=solid, color=red];
m12_11 -> m12_13  [key=2, style=dotted, color=red];
m12_11 -> m12_14  [key=2, style=dotted, color=red];
m12_12 -> m12_10  [key=0, style=bold, color=blue];
m12_20 -> m12_21  [key=0, style=solid, color=red];
m12_21 -> m12_22  [key=0, style=solid, color=red];
m12_21 -> m12_23  [key=2, style=dotted, color=red];
m12_22 -> m12_20  [key=0, style=bold, color=blue];
m12_28 -> m12_29  [key=0, style=solid, color=red];
m12_29 -> m12_30  [key=0, style=solid, color=red];
m12_29 -> m12_23  [key=2, style=dotted, color=red];
m12_29 -> m12_31  [key=2, style=dotted, color=red];
m12_30 -> m12_28  [key=0, style=bold, color=blue];
m12_38 -> m12_39  [key=0, style=solid];
m12_38 -> m12_46  [key=2, style=dotted];
m12_38 -> m12_47  [key=2, style=dotted];
m12_38 -> m12_48  [key=2, style=dotted];
m12_38 -> m12_40  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_38 -> m12_56  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_38 -> m12_41  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_39 -> m12_40  [key=0, style=solid];
m12_39 -> m12_46  [key=2, style=dotted];
m12_39 -> m12_47  [key=2, style=dotted];
m12_39 -> m12_48  [key=2, style=dotted];
m12_39 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m12_37 -> m12_38  [key=0, style=solid];
m12_37 -> m12_39  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_37 -> m12_40  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_37 -> m12_41  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_37 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_40 -> m12_41  [key=0, style=solid];
m12_40 -> m12_49  [key=2, style=dotted];
m12_40 -> m12_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_41 -> m12_42  [key=0, style=solid];
m12_41 -> m12_50  [key=2, style=dotted];
m12_43 -> m12_44  [key=0, style=solid];
m12_43 -> m12_50  [key=2, style=dotted];
m12_56 -> m12_57  [key=0, style=solid];
m12_56 -> m12_58  [key=2, style=dotted];
m12_56 -> m12_59  [key=2, style=dotted];
m12_55 -> m12_56  [key=0, style=solid];
m12_42 -> m12_43  [key=0, style=solid];
m12_42 -> m12_51  [key=2, style=dotted];
m12_42 -> m12_52  [key=2, style=dotted];
m12_42 -> m12_53  [key=2, style=dotted];
m12_44 -> m12_45  [key=0, style=solid];
m12_44 -> m12_54  [key=2, style=dotted];
m12_45 -> m12_37  [key=0, style=bold, color=blue];
m12_57 -> m12_55  [key=0, style=bold, color=blue];
m12_65 -> m12_66  [key=0, style=solid];
m12_65 -> m12_46  [key=2, style=dotted];
m12_65 -> m12_47  [key=2, style=dotted];
m12_65 -> m12_48  [key=2, style=dotted];
m12_65 -> m12_67  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_65 -> m12_75  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_65 -> m12_68  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_66 -> m12_67  [key=0, style=solid];
m12_66 -> m12_46  [key=2, style=dotted];
m12_66 -> m12_47  [key=2, style=dotted];
m12_66 -> m12_48  [key=2, style=dotted];
m12_66 -> m12_70  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m12_64 -> m12_65  [key=0, style=solid];
m12_64 -> m12_66  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_64 -> m12_67  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_64 -> m12_68  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_64 -> m12_70  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_67 -> m12_68  [key=0, style=solid];
m12_67 -> m12_49  [key=2, style=dotted];
m12_67 -> m12_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_68 -> m12_69  [key=0, style=solid];
m12_68 -> m12_50  [key=2, style=dotted];
m12_70 -> m12_71  [key=0, style=solid];
m12_70 -> m12_50  [key=2, style=dotted];
m12_75 -> m12_76  [key=0, style=solid];
m12_75 -> m12_77  [key=2, style=dotted];
m12_74 -> m12_75  [key=0, style=solid];
m12_69 -> m12_70  [key=0, style=solid];
m12_69 -> m12_54  [key=2, style=dotted];
m12_71 -> m12_72  [key=0, style=solid];
m12_71 -> m12_73  [key=2, style=dotted];
m12_72 -> m12_64  [key=0, style=bold, color=blue];
m12_76 -> m12_74  [key=0, style=bold, color=blue];
m12_83 -> m12_84  [key=0, style=solid];
m12_83 -> m12_46  [key=2, style=dotted];
m12_83 -> m12_47  [key=2, style=dotted];
m12_83 -> m12_48  [key=2, style=dotted];
m12_83 -> m12_89  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_83 -> m12_116  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_83 -> m12_90  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_83 -> m12_97  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_84 -> m12_85  [key=0, style=solid];
m12_84 -> m12_46  [key=2, style=dotted];
m12_84 -> m12_47  [key=2, style=dotted];
m12_84 -> m12_48  [key=2, style=dotted];
m12_84 -> m12_93  [key=1, style=dashed, color=darkseagreen4, label=anotherJobId];
m12_82 -> m12_83  [key=0, style=solid];
m12_82 -> m12_84  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_82 -> m12_89  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_82 -> m12_90  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_82 -> m12_93  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_82 -> m12_96  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_89 -> m12_90  [key=0, style=solid];
m12_89 -> m12_49  [key=2, style=dotted];
m12_89 -> m12_115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_90 -> m12_91  [key=0, style=solid];
m12_90 -> m12_50  [key=2, style=dotted];
m12_90 -> m12_92  [key=1, style=dashed, color=darkseagreen4, label=job];
m12_93 -> m12_94  [key=0, style=solid];
m12_93 -> m12_50  [key=2, style=dotted];
m12_93 -> m12_95  [key=1, style=dashed, color=darkseagreen4, label=anotherJob];
m12_96 -> m12_97  [key=0, style=solid];
m12_96 -> m12_46  [key=2, style=dotted];
m12_96 -> m12_47  [key=2, style=dotted];
m12_96 -> m12_98  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_96 -> m12_99  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_96 -> m12_100  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_96 -> m12_101  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_116 -> m12_117  [key=0, style=solid];
m12_116 -> m12_118  [key=2, style=dotted];
m12_97 -> m12_98  [key=0, style=solid];
m12_97 -> m12_48  [key=2, style=dotted];
m12_97 -> n9  [key=2, style=dotted];
m12_85 -> m12_86  [key=0, style=solid];
m12_85 -> m12_103  [key=2, style=dotted];
m12_85 -> m12_87  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_85 -> m12_88  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_85 -> m12_89  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_85 -> m12_116  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_86 -> m12_87  [key=0, style=solid];
m12_86 -> m12_6  [key=2, style=dotted];
m12_86 -> m12_8  [key=2, style=dotted];
m12_86 -> m12_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_87 -> m12_88  [key=0, style=solid];
m12_87 -> m12_6  [key=2, style=dotted];
m12_87 -> m12_8  [key=2, style=dotted];
m12_87 -> m12_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_88 -> m12_89  [key=0, style=solid];
m12_88 -> m12_6  [key=2, style=dotted];
m12_88 -> m12_104  [key=2, style=dotted];
m12_88 -> m12_8  [key=2, style=dotted];
m12_88 -> m12_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_105 -> m12_106  [key=0, style=solid];
m12_108 -> m12_109  [key=0, style=solid];
m12_111 -> m12_112  [key=0, style=solid];
m12_115 -> m12_116  [key=0, style=solid];
m12_91 -> m12_92  [key=0, style=solid];
m12_91 -> n9  [key=2, style=dotted];
m12_92 -> m12_93  [key=0, style=solid];
m12_92 -> m12_73  [key=2, style=dotted];
m12_94 -> m12_95  [key=0, style=solid];
m12_94 -> m12_54  [key=2, style=dotted];
m12_95 -> m12_96  [key=0, style=solid];
m12_95 -> m12_54  [key=2, style=dotted];
m12_98 -> m12_99  [key=0, style=solid];
m12_98 -> n9  [key=2, style=dotted];
m12_99 -> m12_100  [key=0, style=solid];
m12_99 -> n9  [key=2, style=dotted];
m12_100 -> m12_101  [key=0, style=solid];
m12_100 -> m12_73  [key=2, style=dotted];
m12_101 -> m12_102  [key=0, style=solid];
m12_101 -> n9  [key=2, style=dotted];
m12_102 -> m12_82  [key=0, style=bold, color=blue];
m12_106 -> m12_107  [key=0, style=solid];
m12_107 -> m12_105  [key=0, style=bold, color=blue];
m12_109 -> m12_110  [key=0, style=solid];
m12_110 -> m12_108  [key=0, style=bold, color=blue];
m12_112 -> m12_113  [key=0, style=solid];
m12_112 -> m12_114  [key=2, style=dotted];
m12_113 -> m12_111  [key=0, style=bold, color=blue];
m12_117 -> m12_115  [key=0, style=bold, color=blue];
m12_124 -> m12_125  [key=0, style=solid];
m12_124 -> m12_46  [key=2, style=dotted];
m12_124 -> m12_47  [key=2, style=dotted];
m12_124 -> m12_48  [key=2, style=dotted];
m12_124 -> m12_129  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_124 -> m12_150  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_124 -> m12_130  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_124 -> m12_134  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_123 -> m12_124  [key=0, style=solid];
m12_123 -> m12_129  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_123 -> m12_130  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_123 -> m12_133  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_129 -> m12_130  [key=0, style=solid];
m12_129 -> m12_49  [key=2, style=dotted];
m12_129 -> m12_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_130 -> m12_131  [key=0, style=solid];
m12_130 -> m12_50  [key=2, style=dotted];
m12_130 -> m12_132  [key=1, style=dashed, color=darkseagreen4, label=job];
m12_133 -> m12_134  [key=0, style=solid];
m12_133 -> m12_46  [key=2, style=dotted];
m12_133 -> m12_47  [key=2, style=dotted];
m12_133 -> m12_135  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_133 -> m12_136  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_133 -> m12_137  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_133 -> m12_138  [key=1, style=dashed, color=darkseagreen4, label=jobState];
m12_125 -> m12_126  [key=0, style=solid];
m12_125 -> m12_103  [key=2, style=dotted];
m12_125 -> m12_127  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_125 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_125 -> m12_129  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_125 -> m12_150  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_150 -> m12_151  [key=0, style=solid];
m12_150 -> m12_152  [key=2, style=dotted];
m12_134 -> m12_135  [key=0, style=solid];
m12_134 -> m12_48  [key=2, style=dotted];
m12_134 -> n9  [key=2, style=dotted];
m12_126 -> m12_127  [key=0, style=solid];
m12_126 -> m12_6  [key=2, style=dotted];
m12_126 -> m12_8  [key=2, style=dotted];
m12_126 -> m12_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_127 -> m12_128  [key=0, style=solid];
m12_127 -> m12_6  [key=2, style=dotted];
m12_127 -> m12_8  [key=2, style=dotted];
m12_127 -> m12_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_128 -> m12_129  [key=0, style=solid];
m12_128 -> m12_6  [key=2, style=dotted];
m12_128 -> m12_104  [key=2, style=dotted];
m12_128 -> m12_8  [key=2, style=dotted];
m12_128 -> m12_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_140 -> m12_141  [key=0, style=solid];
m12_143 -> m12_144  [key=0, style=solid];
m12_146 -> m12_147  [key=0, style=solid];
m12_149 -> m12_150  [key=0, style=solid];
m12_131 -> m12_132  [key=0, style=solid];
m12_131 -> m12_54  [key=2, style=dotted];
m12_132 -> m12_133  [key=0, style=solid];
m12_132 -> m12_54  [key=2, style=dotted];
m12_135 -> m12_136  [key=0, style=solid];
m12_135 -> n9  [key=2, style=dotted];
m12_136 -> m12_137  [key=0, style=solid];
m12_136 -> n9  [key=2, style=dotted];
m12_137 -> m12_138  [key=0, style=solid];
m12_137 -> m12_73  [key=2, style=dotted];
m12_138 -> m12_139  [key=0, style=solid];
m12_138 -> n9  [key=2, style=dotted];
m12_139 -> m12_123  [key=0, style=bold, color=blue];
m12_141 -> m12_142  [key=0, style=solid];
m12_142 -> m12_140  [key=0, style=bold, color=blue];
m12_144 -> m12_145  [key=0, style=solid];
m12_145 -> m12_143  [key=0, style=bold, color=blue];
m12_147 -> m12_148  [key=0, style=solid];
m12_147 -> m12_114  [key=2, style=dotted];
m12_148 -> m12_146  [key=0, style=bold, color=blue];
m12_151 -> m12_149  [key=0, style=bold, color=blue];
m12_156 -> m12_157  [key=0, style=solid, color=red];
m12_156 -> m12_161  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_157 -> m12_158  [key=0, style=solid, color=red];
m12_157 -> m12_7  [key=2, style=dotted, color=red];
m12_157 -> m12_159  [key=1, style=dashed, color=red, label=correctJobQueue];
m12_157 -> m12_162  [key=1, style=dashed, color=red, label=correctJobQueue];
m12_161 -> m12_162  [key=0, style=solid, color=red];
m12_161 -> m12_49  [key=2, style=dotted];
m12_161 -> m12_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_158 -> m12_159  [key=0, style=solid, color=red];
m12_158 -> m12_5  [key=2, style=dotted, color=red];
m12_158 -> m12_160  [key=1, style=dashed, color=red, label=correctProvider];
m12_159 -> m12_160  [key=0, style=solid, color=red];
m12_159 -> m12_6  [key=2, style=dotted, color=red];
m12_159 -> m12_8  [key=2, style=dotted, color=red];
m12_159 -> m12_166  [key=1, style=dashed, color=red, label="lambda expression"];
m12_162 -> m12_163  [key=0, style=solid, color=red];
m12_162 -> m12_165  [key=2, style=dotted, color=red];
m12_162 -> m12_173  [key=1, style=dashed, color=red, label="lambda expression"];
m12_160 -> m12_161  [key=0, style=solid, color=red];
m12_160 -> m12_164  [key=2, style=dotted, color=red];
m12_166 -> m12_167  [key=0, style=solid, color=red];
m12_169 -> m12_170  [key=0, style=solid];
m12_163 -> m12_156  [key=0, style=bold, color=blue];
m12_173 -> m12_174  [key=0, style=solid, color=red];
m12_167 -> m12_168  [key=0, style=solid, color=red];
m12_167 -> m12_13  [key=2, style=dotted, color=red];
m12_167 -> m12_14  [key=2, style=dotted, color=red];
m12_168 -> m12_166  [key=0, style=bold, color=blue];
m12_170 -> m12_171  [key=0, style=solid];
m12_170 -> m12_172  [key=2, style=dotted];
m12_171 -> m12_169  [key=0, style=bold, color=blue];
m12_174 -> m12_175  [key=0, style=solid, color=red];
m12_174 -> m12_176  [key=2, style=dotted, color=red];
m12_175 -> m12_173  [key=0, style=bold, color=blue];
m12_183 -> m12_184  [key=0, style=solid];
m12_183 -> m12_185  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_184 -> m12_185  [key=0, style=solid];
m12_184 -> m12_49  [key=2, style=dotted];
m12_184 -> m12_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_185 -> m12_186  [key=0, style=solid];
m12_185 -> m12_46  [key=2, style=dotted];
m12_185 -> m12_47  [key=2, style=dotted];
m12_185 -> m12_187  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_185 -> m12_188  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_190 -> m12_191  [key=0, style=solid];
m12_186 -> m12_187  [key=0, style=solid];
m12_186 -> n9  [key=2, style=dotted];
m12_187 -> m12_188  [key=0, style=solid];
m12_187 -> n9  [key=2, style=dotted];
m12_188 -> m12_189  [key=0, style=solid];
m12_188 -> n9  [key=2, style=dotted];
m12_189 -> m12_183  [key=0, style=bold, color=blue];
m12_191 -> m12_192  [key=0, style=solid];
m12_191 -> m12_193  [key=2, style=dotted];
m12_192 -> m12_190  [key=0, style=bold, color=blue];
m12_197 -> m12_198  [key=0, style=solid];
m12_197 -> m12_199  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_198 -> m12_199  [key=0, style=solid];
m12_198 -> m12_49  [key=2, style=dotted];
m12_198 -> m12_208  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_199 -> m12_200  [key=0, style=solid];
m12_199 -> m12_46  [key=2, style=dotted];
m12_199 -> m12_47  [key=2, style=dotted];
m12_199 -> m12_201  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_199 -> m12_202  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_199 -> m12_203  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_208 -> m12_209  [key=0, style=solid];
m12_200 -> m12_201  [key=0, style=solid];
m12_200 -> n9  [key=2, style=dotted];
m12_201 -> m12_202  [key=0, style=solid];
m12_201 -> n9  [key=2, style=dotted];
m12_202 -> m12_203  [key=0, style=solid];
m12_202 -> m12_73  [key=2, style=dotted];
m12_203 -> m12_204  [key=0, style=solid];
m12_203 -> m12_205  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m12_204 -> m12_205  [key=0, style=solid];
m12_204 -> m12_207  [key=2, style=dotted];
m12_204 -> m12_53  [key=2, style=dotted];
m12_205 -> m12_206  [key=0, style=solid];
m12_205 -> m12_207  [key=2, style=dotted];
m12_205 -> m12_53  [key=2, style=dotted];
m12_206 -> m12_197  [key=0, style=bold, color=blue];
m12_209 -> m12_210  [key=0, style=solid];
m12_209 -> m12_58  [key=2, style=dotted];
m12_209 -> m12_211  [key=2, style=dotted];
m12_210 -> m12_208  [key=0, style=bold, color=blue];
m12_215 -> m12_216  [key=0, style=solid];
m12_215 -> m12_217  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_216 -> m12_217  [key=0, style=solid];
m12_216 -> m12_49  [key=2, style=dotted];
m12_216 -> m12_220  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_217 -> m12_218  [key=0, style=solid];
m12_217 -> m12_13  [key=2, style=dotted];
m12_217 -> m12_47  [key=2, style=dotted];
m12_220 -> m12_221  [key=0, style=solid];
m12_220 -> m12_222  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_218 -> m12_219  [key=0, style=solid];
m12_218 -> n9  [key=2, style=dotted];
m12_219 -> m12_215  [key=0, style=bold, color=blue];
m12_221 -> m12_222  [key=0, style=solid];
m12_221 -> m12_193  [key=2, style=dotted];
m12_222 -> m12_223  [key=0, style=solid];
m12_222 -> m12_193  [key=2, style=dotted];
m12_223 -> m12_220  [key=0, style=bold, color=blue];
m12_227 -> m12_228  [key=0, style=solid];
m12_227 -> m12_229  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_228 -> m12_229  [key=0, style=solid];
m12_228 -> m12_49  [key=2, style=dotted];
m12_228 -> m12_234  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_229 -> m12_230  [key=0, style=solid];
m12_229 -> m12_46  [key=2, style=dotted];
m12_229 -> m12_47  [key=2, style=dotted];
m12_229 -> m12_231  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_229 -> m12_232  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_234 -> m12_235  [key=0, style=solid];
m12_230 -> m12_231  [key=0, style=solid];
m12_230 -> n9  [key=2, style=dotted];
m12_231 -> m12_232  [key=0, style=solid];
m12_231 -> n9  [key=2, style=dotted];
m12_232 -> m12_233  [key=0, style=solid];
m12_232 -> n9  [key=2, style=dotted];
m12_233 -> m12_227  [key=0, style=bold, color=blue];
m12_235 -> m12_236  [key=0, style=solid];
m12_235 -> m12_237  [key=2, style=dotted];
m12_236 -> m12_234  [key=0, style=bold, color=blue];
m12_241 -> m12_242  [key=0, style=solid];
m12_241 -> m12_243  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_242 -> m12_243  [key=0, style=solid];
m12_242 -> m12_49  [key=2, style=dotted];
m12_242 -> m12_251  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_243 -> m12_244  [key=0, style=solid];
m12_243 -> m12_46  [key=2, style=dotted];
m12_243 -> m12_47  [key=2, style=dotted];
m12_243 -> m12_245  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_243 -> m12_246  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_243 -> m12_247  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_251 -> m12_252  [key=0, style=solid];
m12_244 -> m12_245  [key=0, style=solid];
m12_244 -> n9  [key=2, style=dotted];
m12_245 -> m12_246  [key=0, style=solid];
m12_245 -> n9  [key=2, style=dotted];
m12_246 -> m12_247  [key=0, style=solid];
m12_246 -> m12_73  [key=2, style=dotted];
m12_247 -> m12_248  [key=0, style=solid];
m12_247 -> m12_249  [key=1, style=dashed, color=darkseagreen4, label=expireAt];
m12_248 -> m12_249  [key=0, style=solid];
m12_248 -> m12_207  [key=2, style=dotted];
m12_248 -> m12_53  [key=2, style=dotted];
m12_249 -> m12_250  [key=0, style=solid];
m12_249 -> m12_207  [key=2, style=dotted];
m12_249 -> m12_53  [key=2, style=dotted];
m12_250 -> m12_241  [key=0, style=bold, color=blue];
m12_252 -> m12_253  [key=0, style=solid];
m12_252 -> m12_58  [key=2, style=dotted];
m12_252 -> m12_254  [key=2, style=dotted];
m12_253 -> m12_251  [key=0, style=bold, color=blue];
m12_258 -> m12_259  [key=0, style=solid];
m12_258 -> m12_260  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_259 -> m12_260  [key=0, style=solid];
m12_259 -> m12_49  [key=2, style=dotted];
m12_259 -> m12_263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_260 -> m12_261  [key=0, style=solid];
m12_260 -> m12_13  [key=2, style=dotted];
m12_260 -> m12_47  [key=2, style=dotted];
m12_263 -> m12_264  [key=0, style=solid];
m12_263 -> m12_265  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_261 -> m12_262  [key=0, style=solid];
m12_261 -> n9  [key=2, style=dotted];
m12_262 -> m12_258  [key=0, style=bold, color=blue];
m12_264 -> m12_265  [key=0, style=solid];
m12_264 -> m12_237  [key=2, style=dotted];
m12_265 -> m12_266  [key=0, style=solid];
m12_265 -> m12_237  [key=2, style=dotted];
m12_266 -> m12_263  [key=0, style=bold, color=blue];
m12_270 -> m12_271  [key=0, style=solid];
m12_270 -> m12_272  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_271 -> m12_272  [key=0, style=solid];
m12_271 -> m12_49  [key=2, style=dotted];
m12_271 -> m12_277  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_272 -> m12_273  [key=0, style=solid];
m12_272 -> m12_46  [key=2, style=dotted];
m12_272 -> m12_47  [key=2, style=dotted];
m12_272 -> m12_274  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_272 -> m12_275  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_277 -> m12_278  [key=0, style=solid];
m12_273 -> m12_274  [key=0, style=solid];
m12_273 -> n9  [key=2, style=dotted];
m12_274 -> m12_275  [key=0, style=solid];
m12_274 -> n9  [key=2, style=dotted];
m12_275 -> m12_276  [key=0, style=solid];
m12_275 -> n9  [key=2, style=dotted];
m12_276 -> m12_270  [key=0, style=bold, color=blue];
m12_278 -> m12_279  [key=0, style=solid];
m12_278 -> m12_280  [key=2, style=dotted];
m12_279 -> m12_277  [key=0, style=bold, color=blue];
m12_284 -> m12_285  [key=0, style=solid];
m12_284 -> m12_286  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_285 -> m12_286  [key=0, style=solid];
m12_285 -> m12_49  [key=2, style=dotted];
m12_285 -> m12_289  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_286 -> m12_287  [key=0, style=solid];
m12_286 -> m12_13  [key=2, style=dotted];
m12_286 -> m12_47  [key=2, style=dotted];
m12_289 -> m12_290  [key=0, style=solid];
m12_289 -> m12_291  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_287 -> m12_288  [key=0, style=solid];
m12_287 -> n9  [key=2, style=dotted];
m12_288 -> m12_284  [key=0, style=bold, color=blue];
m12_290 -> m12_291  [key=0, style=solid];
m12_290 -> m12_280  [key=2, style=dotted];
m12_291 -> m12_292  [key=0, style=solid];
m12_291 -> m12_280  [key=2, style=dotted];
m12_292 -> m12_289  [key=0, style=bold, color=blue];
m12_296 -> m12_297  [key=0, style=solid];
m12_296 -> m12_298  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_297 -> m12_298  [key=0, style=solid];
m12_297 -> m12_49  [key=2, style=dotted];
m12_297 -> m12_301  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_298 -> m12_299  [key=0, style=solid];
m12_298 -> m12_13  [key=2, style=dotted];
m12_298 -> m12_47  [key=2, style=dotted];
m12_301 -> m12_302  [key=0, style=solid];
m12_301 -> m12_303  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_299 -> m12_300  [key=0, style=solid];
m12_299 -> n9  [key=2, style=dotted];
m12_300 -> m12_296  [key=0, style=bold, color=blue];
m12_302 -> m12_303  [key=0, style=solid];
m12_302 -> m12_280  [key=2, style=dotted];
m12_303 -> m12_304  [key=0, style=solid];
m12_303 -> m12_280  [key=2, style=dotted];
m12_304 -> m12_301  [key=0, style=bold, color=blue];
m12_308 -> m12_309  [key=0, style=solid];
m12_308 -> m12_310  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_309 -> m12_310  [key=0, style=solid];
m12_309 -> m12_49  [key=2, style=dotted];
m12_309 -> m12_315  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_310 -> m12_311  [key=0, style=solid];
m12_310 -> m12_46  [key=2, style=dotted];
m12_310 -> m12_47  [key=2, style=dotted];
m12_310 -> m12_312  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_310 -> m12_313  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_315 -> m12_316  [key=0, style=solid];
m12_311 -> m12_312  [key=0, style=solid];
m12_311 -> n9  [key=2, style=dotted];
m12_312 -> m12_313  [key=0, style=solid];
m12_312 -> n9  [key=2, style=dotted];
m12_313 -> m12_314  [key=0, style=solid];
m12_313 -> n9  [key=2, style=dotted];
m12_314 -> m12_308  [key=0, style=bold, color=blue];
m12_316 -> m12_317  [key=0, style=solid];
m12_316 -> m12_318  [key=2, style=dotted];
m12_317 -> m12_315  [key=0, style=bold, color=blue];
m12_322 -> m12_323  [key=0, style=solid];
m12_322 -> m12_324  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_323 -> m12_324  [key=0, style=solid];
m12_323 -> m12_49  [key=2, style=dotted];
m12_323 -> m12_327  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_324 -> m12_325  [key=0, style=solid];
m12_324 -> m12_46  [key=2, style=dotted];
m12_324 -> m12_47  [key=2, style=dotted];
m12_327 -> m12_328  [key=0, style=solid];
m12_327 -> m12_329  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_325 -> m12_326  [key=0, style=solid];
m12_325 -> n9  [key=2, style=dotted];
m12_326 -> m12_322  [key=0, style=bold, color=blue];
m12_328 -> m12_329  [key=0, style=solid];
m12_328 -> m12_280  [key=2, style=dotted];
m12_329 -> m12_330  [key=0, style=solid];
m12_329 -> m12_318  [key=2, style=dotted];
m12_330 -> m12_327  [key=0, style=bold, color=blue];
m12_334 -> m12_335  [key=0, style=solid];
m12_334 -> m12_336  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_335 -> m12_336  [key=0, style=solid];
m12_335 -> m12_49  [key=2, style=dotted];
m12_335 -> m12_339  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_336 -> m12_337  [key=0, style=solid];
m12_336 -> m12_13  [key=2, style=dotted];
m12_336 -> m12_47  [key=2, style=dotted];
m12_339 -> m12_340  [key=0, style=solid];
m12_339 -> m12_341  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_337 -> m12_338  [key=0, style=solid];
m12_337 -> n9  [key=2, style=dotted];
m12_338 -> m12_334  [key=0, style=bold, color=blue];
m12_340 -> m12_341  [key=0, style=solid];
m12_340 -> m12_280  [key=2, style=dotted];
m12_341 -> m12_342  [key=0, style=solid];
m12_341 -> m12_343  [key=2, style=dotted];
m12_342 -> m12_339  [key=0, style=bold, color=blue];
m12_347 -> m12_348  [key=0, style=solid];
m12_347 -> m12_349  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_348 -> m12_349  [key=0, style=solid];
m12_348 -> m12_49  [key=2, style=dotted];
m12_348 -> m12_352  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_349 -> m12_350  [key=0, style=solid];
m12_349 -> m12_13  [key=2, style=dotted];
m12_349 -> m12_47  [key=2, style=dotted];
m12_352 -> m12_353  [key=0, style=solid];
m12_352 -> m12_354  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_350 -> m12_351  [key=0, style=solid];
m12_350 -> n9  [key=2, style=dotted];
m12_351 -> m12_347  [key=0, style=bold, color=blue];
m12_353 -> m12_354  [key=0, style=solid];
m12_353 -> m12_280  [key=2, style=dotted];
m12_354 -> m12_355  [key=0, style=solid];
m12_354 -> m12_343  [key=2, style=dotted];
m12_355 -> m12_352  [key=0, style=bold, color=blue];
m12_359 -> m12_360  [key=0, style=solid];
m12_359 -> m12_361  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_360 -> m12_361  [key=0, style=solid];
m12_360 -> m12_49  [key=2, style=dotted];
m12_360 -> m12_364  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_361 -> m12_362  [key=0, style=solid];
m12_361 -> m12_13  [key=2, style=dotted];
m12_361 -> m12_47  [key=2, style=dotted];
m12_364 -> m12_365  [key=0, style=solid];
m12_364 -> m12_366  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_362 -> m12_363  [key=0, style=solid];
m12_362 -> n9  [key=2, style=dotted];
m12_363 -> m12_359  [key=0, style=bold, color=blue];
m12_365 -> m12_366  [key=0, style=solid];
m12_365 -> m12_280  [key=2, style=dotted];
m12_366 -> m12_367  [key=0, style=solid];
m12_366 -> m12_343  [key=2, style=dotted];
m12_367 -> m12_364  [key=0, style=bold, color=blue];
m12_371 -> m12_372  [key=0, style=solid];
m12_371 -> m12_373  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_372 -> m12_373  [key=0, style=solid];
m12_372 -> m12_49  [key=2, style=dotted];
m12_372 -> m12_377  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_373 -> m12_374  [key=0, style=solid];
m12_373 -> m12_46  [key=2, style=dotted];
m12_373 -> m12_47  [key=2, style=dotted];
m12_373 -> m12_375  [key=1, style=dashed, color=darkseagreen4, label=record];
m12_377 -> m12_378  [key=0, style=solid];
m12_374 -> m12_375  [key=0, style=solid];
m12_374 -> n9  [key=2, style=dotted];
m12_375 -> m12_376  [key=0, style=solid];
m12_375 -> n9  [key=2, style=dotted];
m12_376 -> m12_371  [key=0, style=bold, color=blue];
m12_378 -> m12_379  [key=0, style=solid];
m12_378 -> m12_380  [key=2, style=dotted];
m12_379 -> m12_377  [key=0, style=bold, color=blue];
m12_384 -> m12_385  [key=0, style=solid];
m12_384 -> m12_386  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_385 -> m12_386  [key=0, style=solid];
m12_385 -> m12_49  [key=2, style=dotted];
m12_385 -> m12_389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_386 -> m12_387  [key=0, style=solid];
m12_386 -> m12_13  [key=2, style=dotted];
m12_386 -> m12_47  [key=2, style=dotted];
m12_389 -> m12_390  [key=0, style=solid];
m12_389 -> m12_391  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_387 -> m12_388  [key=0, style=solid];
m12_387 -> n9  [key=2, style=dotted];
m12_388 -> m12_384  [key=0, style=bold, color=blue];
m12_390 -> m12_391  [key=0, style=solid];
m12_390 -> m12_380  [key=2, style=dotted];
m12_391 -> m12_392  [key=0, style=solid];
m12_391 -> m12_380  [key=2, style=dotted];
m12_392 -> m12_389  [key=0, style=bold, color=blue];
m12_396 -> m12_397  [key=0, style=solid];
m12_396 -> m12_398  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_397 -> m12_398  [key=0, style=solid];
m12_397 -> m12_49  [key=2, style=dotted];
m12_397 -> m12_401  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_398 -> m12_399  [key=0, style=solid];
m12_398 -> m12_13  [key=2, style=dotted];
m12_398 -> m12_47  [key=2, style=dotted];
m12_401 -> m12_402  [key=0, style=solid];
m12_401 -> m12_403  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_401 -> m12_404  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_399 -> m12_400  [key=0, style=solid];
m12_399 -> n9  [key=2, style=dotted];
m12_400 -> m12_396  [key=0, style=bold, color=blue];
m12_402 -> m12_403  [key=0, style=solid];
m12_402 -> m12_380  [key=2, style=dotted];
m12_403 -> m12_404  [key=0, style=solid];
m12_403 -> m12_380  [key=2, style=dotted];
m12_404 -> m12_405  [key=0, style=solid];
m12_404 -> m12_406  [key=2, style=dotted];
m12_405 -> m12_401  [key=0, style=bold, color=blue];
m12_410 -> m12_411  [key=0, style=solid];
m12_410 -> m12_412  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_411 -> m12_412  [key=0, style=solid];
m12_411 -> m12_49  [key=2, style=dotted];
m12_411 -> m12_415  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_412 -> m12_413  [key=0, style=solid];
m12_412 -> m12_13  [key=2, style=dotted];
m12_412 -> m12_47  [key=2, style=dotted];
m12_415 -> m12_416  [key=0, style=solid];
m12_415 -> m12_417  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_413 -> m12_414  [key=0, style=solid];
m12_413 -> n9  [key=2, style=dotted];
m12_414 -> m12_410  [key=0, style=bold, color=blue];
m12_416 -> m12_417  [key=0, style=solid];
m12_416 -> m12_380  [key=2, style=dotted];
m12_417 -> m12_418  [key=0, style=solid];
m12_417 -> m12_406  [key=2, style=dotted];
m12_418 -> m12_415  [key=0, style=bold, color=blue];
m12_422 -> m12_423  [key=0, style=solid];
m12_422 -> m12_424  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_423 -> m12_424  [key=0, style=solid];
m12_423 -> m12_49  [key=2, style=dotted];
m12_423 -> m12_427  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_424 -> m12_425  [key=0, style=solid];
m12_424 -> m12_13  [key=2, style=dotted];
m12_424 -> m12_47  [key=2, style=dotted];
m12_427 -> m12_428  [key=0, style=solid];
m12_427 -> m12_429  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_425 -> m12_426  [key=0, style=solid];
m12_425 -> n9  [key=2, style=dotted];
m12_426 -> m12_422  [key=0, style=bold, color=blue];
m12_428 -> m12_429  [key=0, style=solid];
m12_428 -> m12_380  [key=2, style=dotted];
m12_429 -> m12_430  [key=0, style=solid];
m12_429 -> m12_406  [key=2, style=dotted];
m12_430 -> m12_427  [key=0, style=bold, color=blue];
m12_434 -> m12_435  [key=0, style=solid];
m12_434 -> m12_436  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_435 -> m12_436  [key=0, style=solid];
m12_435 -> m12_49  [key=2, style=dotted];
m12_435 -> m12_442  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_436 -> m12_437  [key=0, style=solid];
m12_436 -> m12_46  [key=2, style=dotted];
m12_436 -> m12_441  [key=2, style=dotted];
m12_436 -> m12_438  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_436 -> m12_439  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_442 -> m12_443  [key=0, style=solid];
m12_442 -> m12_444  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_442 -> m12_445  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_442 -> m12_446  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_442 -> m12_447  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_437 -> m12_438  [key=0, style=solid];
m12_437 -> n9  [key=2, style=dotted];
m12_438 -> m12_439  [key=0, style=solid];
m12_438 -> n9  [key=2, style=dotted];
m12_439 -> m12_440  [key=0, style=solid];
m12_439 -> n9  [key=2, style=dotted];
m12_440 -> m12_434  [key=0, style=bold, color=blue];
m12_443 -> m12_444  [key=0, style=solid];
m12_443 -> m12_380  [key=2, style=dotted];
m12_444 -> m12_445  [key=0, style=solid];
m12_444 -> m12_380  [key=2, style=dotted];
m12_445 -> m12_446  [key=0, style=solid];
m12_445 -> m12_380  [key=2, style=dotted];
m12_446 -> m12_447  [key=0, style=solid];
m12_446 -> m12_380  [key=2, style=dotted];
m12_447 -> m12_448  [key=0, style=solid];
m12_447 -> m12_449  [key=2, style=dotted];
m12_448 -> m12_442  [key=0, style=bold, color=blue];
m12_453 -> m12_454  [key=0, style=solid];
m12_453 -> m12_455  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_454 -> m12_455  [key=0, style=solid];
m12_454 -> m12_49  [key=2, style=dotted];
m12_454 -> m12_458  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_455 -> m12_456  [key=0, style=solid];
m12_455 -> m12_13  [key=2, style=dotted];
m12_455 -> m12_47  [key=2, style=dotted];
m12_458 -> m12_459  [key=0, style=solid];
m12_458 -> m12_460  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_458 -> m12_461  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_458 -> m12_462  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_456 -> m12_457  [key=0, style=solid];
m12_456 -> n9  [key=2, style=dotted];
m12_457 -> m12_453  [key=0, style=bold, color=blue];
m12_459 -> m12_460  [key=0, style=solid];
m12_459 -> m12_380  [key=2, style=dotted];
m12_460 -> m12_461  [key=0, style=solid];
m12_460 -> m12_380  [key=2, style=dotted];
m12_461 -> m12_462  [key=0, style=solid];
m12_461 -> m12_380  [key=2, style=dotted];
m12_462 -> m12_463  [key=0, style=solid];
m12_462 -> m12_449  [key=2, style=dotted];
m12_463 -> m12_458  [key=0, style=bold, color=blue];
m12_467 -> m12_468  [key=0, style=solid];
m12_467 -> m12_469  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_468 -> m12_469  [key=0, style=solid];
m12_468 -> m12_49  [key=2, style=dotted];
m12_468 -> m12_472  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_469 -> m12_470  [key=0, style=solid];
m12_469 -> m12_13  [key=2, style=dotted];
m12_469 -> m12_47  [key=2, style=dotted];
m12_472 -> m12_473  [key=0, style=solid];
m12_472 -> m12_474  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_470 -> m12_471  [key=0, style=solid];
m12_470 -> n9  [key=2, style=dotted];
m12_471 -> m12_467  [key=0, style=bold, color=blue];
m12_473 -> m12_474  [key=0, style=solid];
m12_473 -> m12_380  [key=2, style=dotted];
m12_474 -> m12_475  [key=0, style=solid];
m12_474 -> m12_449  [key=2, style=dotted];
m12_475 -> m12_472  [key=0, style=bold, color=blue];
m12_479 -> m12_480  [key=0, style=solid];
m12_479 -> m12_481  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_480 -> m12_481  [key=0, style=solid];
m12_480 -> m12_49  [key=2, style=dotted];
m12_480 -> m12_484  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_481 -> m12_482  [key=0, style=solid];
m12_481 -> m12_13  [key=2, style=dotted];
m12_481 -> m12_47  [key=2, style=dotted];
m12_484 -> m12_485  [key=0, style=solid];
m12_484 -> m12_486  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_482 -> m12_483  [key=0, style=solid];
m12_482 -> n9  [key=2, style=dotted];
m12_483 -> m12_479  [key=0, style=bold, color=blue];
m12_485 -> m12_486  [key=0, style=solid];
m12_485 -> m12_380  [key=2, style=dotted];
m12_486 -> m12_487  [key=0, style=solid];
m12_486 -> m12_449  [key=2, style=dotted];
m12_487 -> m12_484  [key=0, style=bold, color=blue];
m12_491 -> m12_492  [key=0, style=solid];
m12_491 -> m12_493  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_492 -> m12_493  [key=0, style=solid];
m12_492 -> m12_49  [key=2, style=dotted];
m12_492 -> m12_496  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_493 -> m12_494  [key=0, style=solid];
m12_493 -> m12_13  [key=2, style=dotted];
m12_493 -> m12_47  [key=2, style=dotted];
m12_496 -> m12_497  [key=0, style=solid];
m12_496 -> m12_498  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction"];
m12_494 -> m12_495  [key=0, style=solid];
m12_494 -> n9  [key=2, style=dotted];
m12_495 -> m12_491  [key=0, style=bold, color=blue];
m12_497 -> m12_498  [key=0, style=solid];
m12_497 -> m12_380  [key=2, style=dotted];
m12_498 -> m12_499  [key=0, style=solid];
m12_498 -> m12_449  [key=2, style=dotted];
m12_499 -> m12_496  [key=0, style=bold, color=blue];
m12_503 -> m12_504  [key=0, style=solid];
m12_503 -> m12_508  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_504 -> m12_505  [key=0, style=solid];
m12_504 -> m12_13  [key=2, style=dotted];
m12_504 -> m12_507  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_508 -> m12_509  [key=0, style=solid];
m12_508 -> m12_49  [key=2, style=dotted];
m12_508 -> m12_510  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_505 -> m12_506  [key=0, style=solid];
m12_505 -> n9  [key=2, style=dotted];
m12_507 -> m12_508  [key=0, style=solid];
m12_506 -> m12_503  [key=0, style=bold, color=blue];
m12_509 -> m12_507  [key=0, style=bold, color=blue];
m12_510 -> m12_511  [key=0, style=solid];
m12_511 -> m12_512  [key=0, style=solid];
m12_511 -> m12_104  [key=2, style=dotted];
m12_511 -> m12_513  [key=2, style=dotted];
m12_512 -> m12_510  [key=0, style=bold, color=blue];
m12_517 -> m12_518  [key=0, style=solid];
m12_517 -> m12_522  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_518 -> m12_519  [key=0, style=solid];
m12_518 -> m12_13  [key=2, style=dotted];
m12_518 -> m12_521  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_522 -> m12_523  [key=0, style=solid];
m12_522 -> m12_49  [key=2, style=dotted];
m12_522 -> m12_524  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_519 -> m12_520  [key=0, style=solid];
m12_519 -> n9  [key=2, style=dotted];
m12_521 -> m12_522  [key=0, style=solid];
m12_520 -> m12_517  [key=0, style=bold, color=blue];
m12_523 -> m12_521  [key=0, style=bold, color=blue];
m12_524 -> m12_525  [key=0, style=solid];
m12_525 -> m12_526  [key=0, style=solid];
m12_525 -> m12_513  [key=2, style=dotted];
m12_526 -> m12_524  [key=0, style=bold, color=blue];
m12_530 -> m12_531  [key=0, style=solid];
m12_530 -> m12_532  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_531 -> m12_532  [key=0, style=solid];
m12_531 -> m12_49  [key=2, style=dotted];
m12_531 -> m12_537  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_532 -> m12_533  [key=0, style=solid];
m12_532 -> m12_46  [key=2, style=dotted];
m12_532 -> m12_536  [key=2, style=dotted];
m12_532 -> m12_540  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_532 -> m12_543  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_532 -> m12_534  [key=1, style=dashed, color=darkseagreen4, label=result];
m12_537 -> m12_538  [key=0, style=solid];
m12_533 -> m12_534  [key=0, style=solid];
m12_533 -> n9  [key=2, style=dotted];
m12_540 -> m12_541  [key=0, style=solid];
m12_543 -> m12_544  [key=0, style=solid];
m12_534 -> m12_535  [key=0, style=solid];
m12_534 -> n9  [key=2, style=dotted];
m12_535 -> m12_530  [key=0, style=bold, color=blue];
m12_538 -> m12_539  [key=0, style=solid];
m12_538 -> m12_104  [key=2, style=dotted];
m12_538 -> m12_513  [key=2, style=dotted];
m12_539 -> m12_537  [key=0, style=bold, color=blue];
m12_541 -> m12_542  [key=0, style=solid];
m12_542 -> m12_540  [key=0, style=bold, color=blue];
m12_544 -> m12_545  [key=0, style=solid];
m12_545 -> m12_543  [key=0, style=bold, color=blue];
m12_549 -> m12_550  [key=0, style=solid];
m12_549 -> m12_553  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_550 -> m12_551  [key=0, style=solid];
m12_550 -> m12_13  [key=2, style=dotted];
m12_550 -> m12_552  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_553 -> m12_554  [key=0, style=solid];
m12_553 -> m12_49  [key=2, style=dotted];
m12_553 -> m12_555  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_551 -> m12_549  [key=0, style=bold, color=blue];
m12_552 -> m12_553  [key=0, style=solid];
m12_554 -> m12_552  [key=0, style=bold, color=blue];
m12_555 -> m12_556  [key=0, style=solid];
m12_556 -> m12_557  [key=0, style=solid];
m12_556 -> m12_558  [key=2, style=dotted];
m12_557 -> m12_555  [key=0, style=bold, color=blue];
m12_562 -> m12_563  [key=0, style=solid];
m12_562 -> m12_564  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_562 -> m12_565  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_563 -> m12_564  [key=0, style=solid];
m12_563 -> m12_49  [key=2, style=dotted];
m12_563 -> m12_568  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_564 -> m12_565  [key=0, style=solid];
m12_564 -> m12_49  [key=2, style=dotted];
m12_564 -> m12_571  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_565 -> m12_566  [key=0, style=solid];
m12_565 -> m12_13  [key=2, style=dotted];
m12_565 -> m12_47  [key=2, style=dotted];
m12_568 -> m12_569  [key=0, style=solid];
m12_571 -> m12_572  [key=0, style=solid];
m12_566 -> m12_567  [key=0, style=solid];
m12_566 -> n9  [key=2, style=dotted];
m12_567 -> m12_562  [key=0, style=bold, color=blue];
m12_569 -> m12_570  [key=0, style=solid];
m12_569 -> m12_104  [key=2, style=dotted];
m12_569 -> m12_513  [key=2, style=dotted];
m12_570 -> m12_568  [key=0, style=bold, color=blue];
m12_572 -> m12_573  [key=0, style=solid];
m12_572 -> m12_558  [key=2, style=dotted];
m12_573 -> m12_571  [key=0, style=bold, color=blue];
m12_577 -> m12_578  [key=0, style=solid];
m12_577 -> m12_582  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_578 -> m12_579  [key=0, style=solid];
m12_578 -> m12_13  [key=2, style=dotted];
m12_578 -> m12_581  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_582 -> m12_583  [key=0, style=solid];
m12_582 -> m12_49  [key=2, style=dotted];
m12_582 -> m12_584  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_579 -> m12_580  [key=0, style=solid];
m12_579 -> n9  [key=2, style=dotted];
m12_581 -> m12_582  [key=0, style=solid];
m12_580 -> m12_577  [key=0, style=bold, color=blue];
m12_583 -> m12_581  [key=0, style=bold, color=blue];
m12_584 -> m12_585  [key=0, style=solid];
m12_585 -> m12_586  [key=0, style=solid];
m12_585 -> m12_587  [key=2, style=dotted];
m12_585 -> m12_588  [key=2, style=dotted];
m12_586 -> m12_584  [key=0, style=bold, color=blue];
m12_592 -> m12_593  [key=0, style=solid];
m12_592 -> m12_597  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_593 -> m12_594  [key=0, style=solid];
m12_593 -> m12_13  [key=2, style=dotted];
m12_593 -> m12_596  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_597 -> m12_598  [key=0, style=solid];
m12_597 -> m12_49  [key=2, style=dotted];
m12_597 -> m12_599  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_594 -> m12_595  [key=0, style=solid];
m12_594 -> n9  [key=2, style=dotted];
m12_596 -> m12_597  [key=0, style=solid];
m12_595 -> m12_592  [key=0, style=bold, color=blue];
m12_598 -> m12_596  [key=0, style=bold, color=blue];
m12_599 -> m12_600  [key=0, style=solid];
m12_600 -> m12_601  [key=0, style=solid];
m12_600 -> m12_588  [key=2, style=dotted];
m12_601 -> m12_599  [key=0, style=bold, color=blue];
m12_605 -> m12_606  [key=0, style=solid];
m12_605 -> m12_607  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_605 -> m12_608  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_606 -> m12_607  [key=0, style=solid];
m12_606 -> m12_587  [key=2, style=dotted];
m12_606 -> m12_612  [key=1, style=dashed, color=darkseagreen4, label=items];
m12_606 -> m12_609  [key=1, style=dashed, color=darkseagreen4, label=items];
m12_607 -> m12_608  [key=0, style=solid];
m12_607 -> m12_49  [key=2, style=dotted];
m12_607 -> m12_611  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_608 -> m12_609  [key=0, style=solid];
m12_608 -> m12_13  [key=2, style=dotted];
m12_612 -> m12_613  [key=0, style=solid];
m12_612 -> m12_588  [key=2, style=dotted];
m12_609 -> m12_610  [key=0, style=solid];
m12_609 -> n9  [key=2, style=dotted];
m12_611 -> m12_612  [key=0, style=solid];
m12_610 -> m12_605  [key=0, style=bold, color=blue];
m12_613 -> m12_611  [key=0, style=bold, color=blue];
m12_617 -> m12_618  [key=0, style=solid];
m12_617 -> m12_621  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_618 -> m12_619  [key=0, style=solid];
m12_618 -> m12_13  [key=2, style=dotted];
m12_618 -> m12_620  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_621 -> m12_622  [key=0, style=solid];
m12_621 -> m12_49  [key=2, style=dotted];
m12_621 -> m12_623  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_619 -> m12_617  [key=0, style=bold, color=blue];
m12_620 -> m12_621  [key=0, style=solid];
m12_622 -> m12_620  [key=0, style=bold, color=blue];
m12_623 -> m12_624  [key=0, style=solid];
m12_624 -> m12_625  [key=0, style=solid];
m12_624 -> m12_626  [key=2, style=dotted];
m12_625 -> m12_623  [key=0, style=bold, color=blue];
m12_632 -> m12_633  [key=0, style=solid];
m12_632 -> m12_637  [key=2, style=dotted];
m12_631 -> m12_632  [key=0, style=solid];
m12_631 -> m12_633  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_631 -> m12_634  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_633 -> m12_634  [key=0, style=solid];
m12_633 -> m12_49  [key=2, style=dotted];
m12_633 -> m12_638  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_634 -> m12_635  [key=0, style=solid];
m12_634 -> m12_46  [key=2, style=dotted];
m12_634 -> m12_47  [key=2, style=dotted];
m12_638 -> m12_639  [key=0, style=solid];
m12_635 -> m12_636  [key=0, style=solid];
m12_635 -> n9  [key=2, style=dotted];
m12_636 -> m12_631  [key=0, style=bold, color=blue];
m12_639 -> m12_640  [key=0, style=solid];
m12_639 -> m12_626  [key=2, style=dotted];
m12_640 -> m12_638  [key=0, style=bold, color=blue];
m12_644 -> m12_645  [key=0, style=solid];
m12_644 -> m12_649  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_645 -> m12_646  [key=0, style=solid];
m12_645 -> m12_13  [key=2, style=dotted];
m12_645 -> m12_648  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_649 -> m12_650  [key=0, style=solid];
m12_649 -> m12_49  [key=2, style=dotted];
m12_649 -> m12_651  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_646 -> m12_647  [key=0, style=solid];
m12_646 -> n9  [key=2, style=dotted];
m12_648 -> m12_649  [key=0, style=solid];
m12_647 -> m12_644  [key=0, style=bold, color=blue];
m12_650 -> m12_648  [key=0, style=bold, color=blue];
m12_651 -> m12_652  [key=0, style=solid];
m12_652 -> m12_653  [key=0, style=solid];
m12_652 -> m12_654  [key=2, style=dotted];
m12_652 -> m12_655  [key=2, style=dotted];
m12_653 -> m12_651  [key=0, style=bold, color=blue];
m12_661 -> m12_662  [key=0, style=solid];
m12_661 -> m12_637  [key=2, style=dotted];
m12_660 -> m12_661  [key=0, style=solid];
m12_660 -> m12_662  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_660 -> m12_663  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_662 -> m12_663  [key=0, style=solid];
m12_662 -> m12_49  [key=2, style=dotted];
m12_662 -> m12_668  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_663 -> m12_664  [key=0, style=solid];
m12_663 -> m12_46  [key=2, style=dotted];
m12_663 -> m12_536  [key=2, style=dotted];
m12_663 -> m12_671  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_663 -> m12_674  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_663 -> m12_665  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_663 -> m12_666  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_668 -> m12_669  [key=0, style=solid];
m12_664 -> m12_665  [key=0, style=solid];
m12_664 -> m12_51  [key=2, style=dotted];
m12_664 -> m12_53  [key=2, style=dotted];
m12_671 -> m12_672  [key=0, style=solid];
m12_674 -> m12_675  [key=0, style=solid];
m12_665 -> m12_666  [key=0, style=solid];
m12_665 -> m12_51  [key=2, style=dotted];
m12_665 -> m12_53  [key=2, style=dotted];
m12_666 -> m12_667  [key=0, style=solid];
m12_666 -> m12_54  [key=2, style=dotted];
m12_667 -> m12_660  [key=0, style=bold, color=blue];
m12_669 -> m12_670  [key=0, style=solid];
m12_669 -> m12_654  [key=2, style=dotted];
m12_669 -> m12_655  [key=2, style=dotted];
m12_670 -> m12_668  [key=0, style=bold, color=blue];
m12_672 -> m12_673  [key=0, style=solid];
m12_673 -> m12_671  [key=0, style=bold, color=blue];
m12_675 -> m12_676  [key=0, style=solid];
m12_676 -> m12_674  [key=0, style=bold, color=blue];
m12_680 -> m12_681  [key=0, style=solid];
m12_680 -> m12_685  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_681 -> m12_682  [key=0, style=solid];
m12_681 -> m12_13  [key=2, style=dotted];
m12_681 -> m12_684  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_685 -> m12_686  [key=0, style=solid];
m12_685 -> m12_49  [key=2, style=dotted];
m12_685 -> m12_687  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_682 -> m12_683  [key=0, style=solid];
m12_682 -> n9  [key=2, style=dotted];
m12_684 -> m12_685  [key=0, style=solid];
m12_683 -> m12_680  [key=0, style=bold, color=blue];
m12_686 -> m12_684  [key=0, style=bold, color=blue];
m12_687 -> m12_688  [key=0, style=solid];
m12_688 -> m12_689  [key=0, style=solid];
m12_688 -> m12_690  [key=2, style=dotted];
m12_688 -> m12_691  [key=2, style=dotted];
m12_689 -> m12_687  [key=0, style=bold, color=blue];
m12_697 -> m12_698  [key=0, style=solid];
m12_697 -> m12_637  [key=2, style=dotted];
m12_696 -> m12_697  [key=0, style=solid];
m12_696 -> m12_698  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_696 -> m12_699  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_698 -> m12_699  [key=0, style=solid];
m12_698 -> m12_49  [key=2, style=dotted];
m12_698 -> m12_704  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_699 -> m12_700  [key=0, style=solid];
m12_699 -> m12_46  [key=2, style=dotted];
m12_699 -> m12_536  [key=2, style=dotted];
m12_699 -> m12_707  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_699 -> m12_710  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_699 -> m12_701  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_699 -> m12_702  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_704 -> m12_705  [key=0, style=solid];
m12_700 -> m12_701  [key=0, style=solid];
m12_700 -> m12_51  [key=2, style=dotted];
m12_700 -> m12_53  [key=2, style=dotted];
m12_707 -> m12_708  [key=0, style=solid];
m12_710 -> m12_711  [key=0, style=solid];
m12_701 -> m12_702  [key=0, style=solid];
m12_701 -> m12_51  [key=2, style=dotted];
m12_701 -> m12_53  [key=2, style=dotted];
m12_702 -> m12_703  [key=0, style=solid];
m12_702 -> m12_54  [key=2, style=dotted];
m12_703 -> m12_696  [key=0, style=bold, color=blue];
m12_705 -> m12_706  [key=0, style=solid];
m12_705 -> m12_654  [key=2, style=dotted];
m12_705 -> m12_691  [key=2, style=dotted];
m12_706 -> m12_704  [key=0, style=bold, color=blue];
m12_708 -> m12_709  [key=0, style=solid];
m12_709 -> m12_707  [key=0, style=bold, color=blue];
m12_711 -> m12_712  [key=0, style=solid];
m12_712 -> m12_710  [key=0, style=bold, color=blue];
m12_716 -> m12_717  [key=0, style=solid];
m12_716 -> m12_721  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_717 -> m12_718  [key=0, style=solid];
m12_717 -> m12_13  [key=2, style=dotted];
m12_717 -> m12_720  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_721 -> m12_722  [key=0, style=solid];
m12_721 -> m12_49  [key=2, style=dotted];
m12_721 -> m12_723  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_718 -> m12_719  [key=0, style=solid];
m12_718 -> n9  [key=2, style=dotted];
m12_720 -> m12_721  [key=0, style=solid];
m12_719 -> m12_716  [key=0, style=bold, color=blue];
m12_722 -> m12_720  [key=0, style=bold, color=blue];
m12_723 -> m12_724  [key=0, style=solid];
m12_724 -> m12_725  [key=0, style=solid];
m12_724 -> m12_690  [key=2, style=dotted];
m12_724 -> m12_726  [key=2, style=dotted];
m12_725 -> m12_723  [key=0, style=bold, color=blue];
m12_732 -> m12_733  [key=0, style=solid];
m12_732 -> m12_637  [key=2, style=dotted];
m12_731 -> m12_732  [key=0, style=solid];
m12_731 -> m12_733  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_731 -> m12_734  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_733 -> m12_734  [key=0, style=solid];
m12_733 -> m12_49  [key=2, style=dotted];
m12_733 -> m12_739  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_734 -> m12_735  [key=0, style=solid];
m12_734 -> m12_46  [key=2, style=dotted];
m12_734 -> m12_536  [key=2, style=dotted];
m12_734 -> m12_742  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_734 -> m12_745  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_734 -> m12_736  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_734 -> m12_737  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_739 -> m12_740  [key=0, style=solid];
m12_735 -> m12_736  [key=0, style=solid];
m12_735 -> m12_51  [key=2, style=dotted];
m12_735 -> m12_53  [key=2, style=dotted];
m12_742 -> m12_743  [key=0, style=solid];
m12_745 -> m12_746  [key=0, style=solid];
m12_736 -> m12_737  [key=0, style=solid];
m12_736 -> m12_51  [key=2, style=dotted];
m12_736 -> m12_53  [key=2, style=dotted];
m12_737 -> m12_738  [key=0, style=solid];
m12_737 -> m12_54  [key=2, style=dotted];
m12_738 -> m12_731  [key=0, style=bold, color=blue];
m12_740 -> m12_741  [key=0, style=solid];
m12_740 -> m12_654  [key=2, style=dotted];
m12_740 -> m12_726  [key=2, style=dotted];
m12_741 -> m12_739  [key=0, style=bold, color=blue];
m12_743 -> m12_744  [key=0, style=solid];
m12_744 -> m12_742  [key=0, style=bold, color=blue];
m12_746 -> m12_747  [key=0, style=solid];
m12_747 -> m12_745  [key=0, style=bold, color=blue];
m12_751 -> m12_752  [key=0, style=solid];
m12_751 -> m12_756  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_752 -> m12_753  [key=0, style=solid];
m12_752 -> m12_13  [key=2, style=dotted];
m12_752 -> m12_755  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_756 -> m12_757  [key=0, style=solid];
m12_756 -> m12_49  [key=2, style=dotted];
m12_756 -> m12_758  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_753 -> m12_754  [key=0, style=solid];
m12_753 -> n9  [key=2, style=dotted];
m12_755 -> m12_756  [key=0, style=solid];
m12_754 -> m12_751  [key=0, style=bold, color=blue];
m12_757 -> m12_755  [key=0, style=bold, color=blue];
m12_758 -> m12_759  [key=0, style=solid];
m12_759 -> m12_760  [key=0, style=solid];
m12_759 -> m12_761  [key=2, style=dotted];
m12_760 -> m12_758  [key=0, style=bold, color=blue];
m12_767 -> m12_768  [key=0, style=solid];
m12_767 -> m12_52  [key=2, style=dotted];
m12_767 -> m12_637  [key=2, style=dotted];
m12_766 -> m12_767  [key=0, style=solid];
m12_766 -> m12_768  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_766 -> m12_769  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_768 -> m12_769  [key=0, style=solid];
m12_768 -> m12_49  [key=2, style=dotted];
m12_768 -> m12_773  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_769 -> m12_770  [key=0, style=solid];
m12_769 -> m12_46  [key=2, style=dotted];
m12_769 -> m12_536  [key=2, style=dotted];
m12_769 -> m12_776  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_769 -> m12_779  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_769 -> m12_771  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_773 -> m12_774  [key=0, style=solid];
m12_770 -> m12_771  [key=0, style=solid];
m12_770 -> m12_54  [key=2, style=dotted];
m12_776 -> m12_777  [key=0, style=solid];
m12_779 -> m12_780  [key=0, style=solid];
m12_771 -> m12_772  [key=0, style=solid];
m12_771 -> m12_73  [key=2, style=dotted];
m12_772 -> m12_766  [key=0, style=bold, color=blue];
m12_774 -> m12_775  [key=0, style=solid];
m12_774 -> m12_761  [key=2, style=dotted];
m12_775 -> m12_773  [key=0, style=bold, color=blue];
m12_777 -> m12_778  [key=0, style=solid];
m12_778 -> m12_776  [key=0, style=bold, color=blue];
m12_780 -> m12_781  [key=0, style=solid];
m12_781 -> m12_779  [key=0, style=bold, color=blue];
m12_785 -> m12_786  [key=0, style=solid];
m12_785 -> m12_790  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_786 -> m12_787  [key=0, style=solid];
m12_786 -> m12_13  [key=2, style=dotted];
m12_786 -> m12_789  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_790 -> m12_791  [key=0, style=solid];
m12_790 -> m12_49  [key=2, style=dotted];
m12_790 -> m12_792  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_787 -> m12_788  [key=0, style=solid];
m12_787 -> n9  [key=2, style=dotted];
m12_789 -> m12_790  [key=0, style=solid];
m12_788 -> m12_785  [key=0, style=bold, color=blue];
m12_791 -> m12_789  [key=0, style=bold, color=blue];
m12_792 -> m12_793  [key=0, style=solid];
m12_793 -> m12_794  [key=0, style=solid];
m12_793 -> m12_795  [key=2, style=dotted];
m12_794 -> m12_792  [key=0, style=bold, color=blue];
m12_801 -> m12_802  [key=0, style=solid];
m12_801 -> m12_52  [key=2, style=dotted];
m12_801 -> m12_637  [key=2, style=dotted];
m12_800 -> m12_801  [key=0, style=solid];
m12_800 -> m12_802  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_800 -> m12_803  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_802 -> m12_803  [key=0, style=solid];
m12_802 -> m12_49  [key=2, style=dotted];
m12_802 -> m12_807  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_803 -> m12_804  [key=0, style=solid];
m12_803 -> m12_46  [key=2, style=dotted];
m12_803 -> m12_536  [key=2, style=dotted];
m12_803 -> m12_810  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_803 -> m12_813  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_803 -> m12_805  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_807 -> m12_808  [key=0, style=solid];
m12_804 -> m12_805  [key=0, style=solid];
m12_804 -> m12_54  [key=2, style=dotted];
m12_810 -> m12_811  [key=0, style=solid];
m12_813 -> m12_814  [key=0, style=solid];
m12_805 -> m12_806  [key=0, style=solid];
m12_805 -> m12_73  [key=2, style=dotted];
m12_806 -> m12_800  [key=0, style=bold, color=blue];
m12_808 -> m12_809  [key=0, style=solid];
m12_808 -> m12_795  [key=2, style=dotted];
m12_809 -> m12_807  [key=0, style=bold, color=blue];
m12_811 -> m12_812  [key=0, style=solid];
m12_812 -> m12_810  [key=0, style=bold, color=blue];
m12_814 -> m12_815  [key=0, style=solid];
m12_815 -> m12_813  [key=0, style=bold, color=blue];
m12_819 -> m12_820  [key=0, style=solid];
m12_819 -> m12_824  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_820 -> m12_821  [key=0, style=solid];
m12_820 -> m12_13  [key=2, style=dotted];
m12_820 -> m12_823  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_824 -> m12_825  [key=0, style=solid];
m12_824 -> m12_49  [key=2, style=dotted];
m12_824 -> m12_826  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_821 -> m12_822  [key=0, style=solid];
m12_821 -> n9  [key=2, style=dotted];
m12_823 -> m12_824  [key=0, style=solid];
m12_822 -> m12_819  [key=0, style=bold, color=blue];
m12_825 -> m12_823  [key=0, style=bold, color=blue];
m12_826 -> m12_827  [key=0, style=solid];
m12_827 -> m12_828  [key=0, style=solid];
m12_827 -> m12_829  [key=2, style=dotted];
m12_828 -> m12_826  [key=0, style=bold, color=blue];
m12_835 -> m12_836  [key=0, style=solid];
m12_835 -> m12_52  [key=2, style=dotted];
m12_835 -> m12_637  [key=2, style=dotted];
m12_834 -> m12_835  [key=0, style=solid];
m12_834 -> m12_836  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_834 -> m12_837  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_836 -> m12_837  [key=0, style=solid];
m12_836 -> m12_49  [key=2, style=dotted];
m12_836 -> m12_841  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_837 -> m12_838  [key=0, style=solid];
m12_837 -> m12_46  [key=2, style=dotted];
m12_837 -> m12_536  [key=2, style=dotted];
m12_837 -> m12_844  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_837 -> m12_847  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_837 -> m12_839  [key=1, style=dashed, color=darkseagreen4, label=records];
m12_841 -> m12_842  [key=0, style=solid];
m12_838 -> m12_839  [key=0, style=solid];
m12_838 -> m12_54  [key=2, style=dotted];
m12_844 -> m12_845  [key=0, style=solid];
m12_839 -> m12_840  [key=0, style=solid];
m12_839 -> m12_73  [key=2, style=dotted];
m12_840 -> m12_834  [key=0, style=bold, color=blue];
m12_842 -> m12_843  [key=0, style=solid];
m12_842 -> m12_829  [key=2, style=dotted];
m12_843 -> m12_841  [key=0, style=bold, color=blue];
m12_845 -> m12_846  [key=0, style=solid];
m12_846 -> m12_844  [key=0, style=bold, color=blue];
m12_848 -> m12_849  [key=0, style=solid];
m12_849 -> m12_847  [key=0, style=bold, color=blue];
m12_381 -> m12_382  [key=0, style=solid];
m12_382 -> m12_383  [key=0, style=solid];
m12_382 -> m12_36  [key=2, style=dotted];
m12_382 -> m12_384  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_383 -> m12_381  [key=0, style=bold, color=blue];
m12_368 -> m12_369  [key=0, style=solid];
m12_369 -> m12_370  [key=0, style=solid];
m12_369 -> m12_36  [key=2, style=dotted];
m12_369 -> m12_371  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_370 -> m12_368  [key=0, style=bold, color=blue];
m12_602 -> m12_603  [key=0, style=solid];
m12_603 -> m12_604  [key=0, style=solid];
m12_603 -> m12_36  [key=2, style=dotted];
m12_603 -> m12_605  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_604 -> m12_602  [key=0, style=bold, color=blue];
m12_796 -> m12_797  [key=0, style=solid];
m12_797 -> m12_798  [key=0, style=solid];
m12_797 -> m12_801  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_797 -> m12_797  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_798 -> m12_799  [key=0, style=solid];
m12_798 -> m12_36  [key=2, style=dotted];
m12_798 -> m12_800  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_799 -> m12_796  [key=0, style=bold, color=blue];
m12_356 -> m12_357  [key=0, style=solid];
m12_357 -> m12_358  [key=0, style=solid];
m12_357 -> m12_36  [key=2, style=dotted];
m12_357 -> m12_359  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_358 -> m12_356  [key=0, style=bold, color=blue];
m12_713 -> m12_714  [key=0, style=solid];
m12_714 -> m12_715  [key=0, style=solid];
m12_714 -> m12_36  [key=2, style=dotted];
m12_714 -> m12_716  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_715 -> m12_713  [key=0, style=bold, color=blue];
m12_224 -> m12_225  [key=0, style=solid];
m12_225 -> m12_226  [key=0, style=solid];
m12_225 -> m12_36  [key=2, style=dotted];
m12_225 -> m12_227  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_226 -> m12_224  [key=0, style=bold, color=blue];
m12_488 -> m12_489  [key=0, style=solid];
m12_489 -> m12_490  [key=0, style=solid];
m12_489 -> m12_36  [key=2, style=dotted];
m12_489 -> m12_491  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_490 -> m12_488  [key=0, style=bold, color=blue];
m12_24 -> m12_25  [key=0, style=solid, color=red];
m12_25 -> m12_26  [key=0, style=solid, color=red];
m12_25 -> m12_13  [key=2, style=dotted, color=red];
m12_25 -> m12_28  [key=1, style=dashed, color=red, label="lambda expression"];
m12_26 -> m12_27  [key=0, style=solid, color=red];
m12_26 -> n9  [key=2, style=dotted, color=red];
m12_27 -> m12_24  [key=0, style=bold, color=blue];
m12_331 -> m12_332  [key=0, style=solid];
m12_332 -> m12_333  [key=0, style=solid];
m12_332 -> m12_36  [key=2, style=dotted];
m12_332 -> m12_334  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_333 -> m12_331  [key=0, style=bold, color=blue];
m12_15 -> m12_16  [key=0, style=solid, color=red];
m12_16 -> m12_17  [key=0, style=solid, color=red];
m12_16 -> m12_13  [key=2, style=dotted, color=red];
m12_16 -> m12_20  [key=1, style=dashed, color=red, label="lambda expression"];
m12_17 -> m12_18  [key=0, style=solid, color=red];
m12_17 -> n9  [key=2, style=dotted, color=red];
m12_18 -> m12_15  [key=0, style=bold, color=blue];
m12_305 -> m12_306  [key=0, style=solid];
m12_306 -> m12_307  [key=0, style=solid];
m12_306 -> m12_36  [key=2, style=dotted];
m12_306 -> m12_308  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_307 -> m12_305  [key=0, style=bold, color=blue];
m12_238 -> m12_239  [key=0, style=solid];
m12_239 -> m12_240  [key=0, style=solid];
m12_239 -> m12_36  [key=2, style=dotted];
m12_239 -> m12_241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_240 -> m12_238  [key=0, style=bold, color=blue];
m12_500 -> m12_501  [key=0, style=solid];
m12_501 -> m12_502  [key=0, style=solid];
m12_501 -> m12_36  [key=2, style=dotted];
m12_501 -> m12_503  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_502 -> m12_500  [key=0, style=bold, color=blue];
m12_727 -> m12_728  [key=0, style=solid];
m12_728 -> m12_729  [key=0, style=solid];
m12_728 -> m12_732  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_728 -> m12_728  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_729 -> m12_730  [key=0, style=solid];
m12_729 -> m12_36  [key=2, style=dotted];
m12_729 -> m12_731  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_730 -> m12_727  [key=0, style=bold, color=blue];
m12_762 -> m12_763  [key=0, style=solid];
m12_763 -> m12_764  [key=0, style=solid];
m12_763 -> m12_767  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_763 -> m12_763  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_764 -> m12_765  [key=0, style=solid];
m12_764 -> m12_36  [key=2, style=dotted];
m12_764 -> m12_766  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_765 -> m12_762  [key=0, style=bold, color=blue];
m12_49 -> m12_855  [key=0, style=solid, color=red];
m12_49 -> m12_856  [key=1, style=dashed, color=darkseagreen4, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>"];
m12_855 -> m12_856  [key=0, style=solid, color=red];
m12_855 -> m12_23  [key=2, style=dotted, color=red];
m12_855 -> m12_857  [key=1, style=dashed, color=red, label=transaction];
m12_856 -> m12_857  [key=0, style=solid];
m12_856 -> m12_854  [key=2, style=dotted];
m12_857 -> m12_858  [key=0, style=solid];
m12_857 -> m12_859  [key=2, style=dotted];
m12_858 -> m12_49  [key=0, style=bold, color=blue];
m12_180 -> m12_181  [key=0, style=solid];
m12_181 -> m12_182  [key=0, style=solid];
m12_181 -> m12_36  [key=2, style=dotted];
m12_181 -> m12_183  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_182 -> m12_180  [key=0, style=bold, color=blue];
m12_850 -> m12_851  [key=0, style=solid];
m12_850 -> m12_852  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection>"];
m12_851 -> m12_852  [key=0, style=solid];
m12_851 -> m12_31  [key=2, style=dotted];
m12_852 -> m12_853  [key=0, style=solid];
m12_852 -> m12_854  [key=2, style=dotted];
m12_853 -> m12_850  [key=0, style=bold, color=blue];
m12_656 -> m12_657  [key=0, style=solid];
m12_657 -> m12_658  [key=0, style=solid];
m12_657 -> m12_661  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_657 -> m12_657  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_658 -> m12_659  [key=0, style=solid];
m12_658 -> m12_36  [key=2, style=dotted];
m12_658 -> m12_660  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_659 -> m12_656  [key=0, style=bold, color=blue];
m12_464 -> m12_465  [key=0, style=solid];
m12_465 -> m12_466  [key=0, style=solid];
m12_465 -> m12_36  [key=2, style=dotted];
m12_465 -> m12_467  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_466 -> m12_464  [key=0, style=bold, color=blue];
m12_212 -> m12_213  [key=0, style=solid];
m12_213 -> m12_214  [key=0, style=solid];
m12_213 -> m12_36  [key=2, style=dotted];
m12_213 -> m12_215  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_214 -> m12_212  [key=0, style=bold, color=blue];
m12_748 -> m12_749  [key=0, style=solid];
m12_749 -> m12_750  [key=0, style=solid];
m12_749 -> m12_36  [key=2, style=dotted];
m12_749 -> m12_751  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_750 -> m12_748  [key=0, style=bold, color=blue];
m12_450 -> m12_451  [key=0, style=solid];
m12_451 -> m12_452  [key=0, style=solid];
m12_451 -> m12_36  [key=2, style=dotted];
m12_451 -> m12_453  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_452 -> m12_450  [key=0, style=bold, color=blue];
m12_431 -> m12_432  [key=0, style=solid];
m12_432 -> m12_433  [key=0, style=solid];
m12_432 -> m12_36  [key=2, style=dotted];
m12_432 -> m12_434  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_433 -> m12_431  [key=0, style=bold, color=blue];
m12_255 -> m12_256  [key=0, style=solid];
m12_256 -> m12_257  [key=0, style=solid];
m12_256 -> m12_36  [key=2, style=dotted];
m12_256 -> m12_258  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_257 -> m12_255  [key=0, style=bold, color=blue];
m12_281 -> m12_282  [key=0, style=solid];
m12_282 -> m12_283  [key=0, style=solid];
m12_282 -> m12_36  [key=2, style=dotted];
m12_282 -> m12_284  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_283 -> m12_281  [key=0, style=bold, color=blue];
m12_78 -> m12_79  [key=0, style=solid];
m12_79 -> m12_80  [key=0, style=solid];
m12_79 -> m12_83  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_79 -> m12_84  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_79 -> m12_33  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_80 -> m12_81  [key=0, style=solid];
m12_80 -> m12_36  [key=2, style=dotted];
m12_80 -> m12_82  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_81 -> m12_78  [key=0, style=bold, color=blue];
m12_60 -> m12_61  [key=0, style=solid];
m12_61 -> m12_62  [key=0, style=solid];
m12_61 -> m12_65  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_61 -> m12_66  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_61 -> m12_61  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_62 -> m12_63  [key=0, style=solid];
m12_62 -> m12_36  [key=2, style=dotted];
m12_62 -> m12_64  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_63 -> m12_60  [key=0, style=bold, color=blue];
m12_527 -> m12_528  [key=0, style=solid];
m12_528 -> m12_529  [key=0, style=solid];
m12_528 -> m12_36  [key=2, style=dotted];
m12_528 -> m12_530  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_529 -> m12_527  [key=0, style=bold, color=blue];
m12_574 -> m12_575  [key=0, style=solid];
m12_575 -> m12_576  [key=0, style=solid];
m12_575 -> m12_36  [key=2, style=dotted];
m12_575 -> m12_577  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_576 -> m12_574  [key=0, style=bold, color=blue];
m12_344 -> m12_345  [key=0, style=solid];
m12_345 -> m12_346  [key=0, style=solid];
m12_345 -> m12_36  [key=2, style=dotted];
m12_345 -> m12_347  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_346 -> m12_344  [key=0, style=bold, color=blue];
m12_641 -> m12_642  [key=0, style=solid];
m12_642 -> m12_643  [key=0, style=solid];
m12_642 -> m12_36  [key=2, style=dotted];
m12_642 -> m12_644  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_643 -> m12_641  [key=0, style=bold, color=blue];
m12_32 -> m12_33  [key=0, style=solid];
m12_33 -> m12_34  [key=0, style=solid];
m12_33 -> m12_38  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_33 -> m12_39  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_33 -> m12_33  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
m12_34 -> m12_35  [key=0, style=solid];
m12_34 -> m12_36  [key=2, style=dotted];
m12_34 -> m12_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_35 -> m12_32  [key=0, style=bold, color=blue];
m12_546 -> m12_547  [key=0, style=solid];
m12_547 -> m12_548  [key=0, style=solid];
m12_547 -> m12_36  [key=2, style=dotted];
m12_547 -> m12_549  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_548 -> m12_546  [key=0, style=bold, color=blue];
m12_860 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_16  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_21  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_40  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_62  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_67  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_68  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_70  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_80  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_89  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_90  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_93  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_121  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_129  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_130  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_154  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_160  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_161  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_181  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_184  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_195  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_198  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_213  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_216  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_225  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_228  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_239  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_242  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_256  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_259  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_268  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_271  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_282  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_285  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_294  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_297  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_306  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_309  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_320  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_323  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_332  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_335  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_345  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_348  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_357  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_360  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_369  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_372  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_382  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_385  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_394  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_397  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_408  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_411  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_420  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_423  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_432  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_435  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_451  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_454  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_465  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_468  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_477  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_480  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_489  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_492  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_501  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_504  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_508  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_515  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_518  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_522  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_528  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_531  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_547  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_550  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_553  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_560  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_563  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_564  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_575  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_578  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_582  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_590  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_593  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_597  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_603  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_607  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_615  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_618  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_621  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_629  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_633  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_642  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_645  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_649  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_658  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_662  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_678  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_681  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_685  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_694  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_698  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_714  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_717  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_721  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_729  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_733  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_749  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_752  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_756  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_764  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_768  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_783  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_786  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_790  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_798  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_802  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_817  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_820  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_824  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_832  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_836  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_860 -> m12_855  [key=1, style=dashed, color=red, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts"];
m12_861 -> m12_38  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_861 -> m12_39  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_862 -> m12_56  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_863 -> m12_65  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_863 -> m12_66  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_864 -> m12_75  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_865 -> m12_83  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_865 -> m12_84  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_866 -> m12_116  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_867 -> m12_116  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_868 -> m12_124  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_869 -> m12_150  [key=1, style=dashed, color=darkseagreen4, label=jobId];
m12_870 -> m12_150  [key=1, style=dashed, color=darkseagreen4, label=state];
m12_871 -> m12_508  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_872 -> m12_522  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_873 -> m12_553  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_874 -> m12_582  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_875 -> m12_597  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_876 -> m12_612  [key=1, style=dashed, color=darkseagreen4, label=items];
m12_877 -> m12_621  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_878 -> m12_632  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_879 -> m12_649  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_880 -> m12_661  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_881 -> m12_685  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_882 -> m12_697  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_883 -> m12_721  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_884 -> m12_732  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_885 -> m12_756  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_886 -> m12_767  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_887 -> m12_790  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_888 -> m12_801  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m12_889 -> m12_824  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m12_890 -> m12_835  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
}
