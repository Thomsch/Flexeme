digraph  {
n13 [label="HangFire.States.ProcessingState", span=""];
n0 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="26-26"];
n1 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", label="String.IsNullOrWhiteSpace(serverName)", span="28-28"];
n3 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", label="ServerName = serverName", span="30-30"];
n2 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", label="throw new ArgumentNullException(''serverName'');", span="28-28"];
n6 [cluster="string.IsNullOrWhiteSpace(string)", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
n4 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", label="StartedAt = DateTime.UtcNow", span="31-31"];
n5 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", label="Exit HangFire.States.ProcessingState.ProcessingState(string)", span="26-26"];
n7 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n8 [cluster="HangFire.States.ProcessingState.SerializeData()", label="Entry HangFire.States.ProcessingState.SerializeData()", span="41-41"];
n9 [cluster="HangFire.States.ProcessingState.SerializeData()", label="return new Dictionary<string, string>\r\n            {\r\n                { ''StartedAt'', JobHelper.ToStringTimestamp(StartedAt) },\r\n                { ''ServerName'', ServerName }\r\n            };", span="43-47"];
n10 [cluster="HangFire.States.ProcessingState.SerializeData()", label="Exit HangFire.States.ProcessingState.SerializeData()", span="41-41"];
n11 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n12 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50"];
m0_199 [cluster="System.Collections.Generic.List<T>.List()", file="DequeuedJobsWatcher.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_145 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", span="215-215"];
m0_146 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(NotNullNullableValue, value)", span="215-215"];
m0_147 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", span="215-215"];
m0_136 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", span="200-200"];
m0_137 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(GuidValue)", span="202-202"];
m0_138 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", span="200-200"];
m0_47 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(DecimalValue)", span="67-67"];
m0_48 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", span="65-65"];
m0_49 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", color=red, community=0, file="DequeuedJobsWatcher.cs", label="9: Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", span="71-71"];
m0_50 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(DoubleValue, value)", span="71-71"];
m0_51 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", span="71-71"];
m0_70 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()", span="101-101"];
m0_97 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", span="143-143"];
m0_98 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(StringValue, value)", span="143-143"];
m0_99 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", span="143-143"];
m0_203 [cluster="Tuple<string, Func<string>>.cstr", file="DequeuedJobsWatcher.cs", label="Entry Tuple<string, Func<string>>.cstr", span=""];
m0_204 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="68-68"];
m0_154 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", span="227-227"];
m0_155 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(NullNullableValue)", span="229-229"];
m0_156 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", span="227-227"];
m0_0 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", span="16-16"];
m0_1 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", file="DequeuedJobsWatcher.cs", label="_activator = new Mock<JobActivator>()", span="18-18"];
m0_2 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", file="DequeuedJobsWatcher.cs", label="_activator.Setup(x => x.ActivateJob(It.IsAny<Type>()))\r\n				      .Returns(() => new JobArgumentFacts())", span="19-20"];
m0_3 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", file="DequeuedJobsWatcher.cs", label="_token = new Mock<IJobCancellationToken>()", span="22-22"];
m0_4 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", span="16-16"];
m0_5 [cluster="Mock<JobActivator>.cstr", file="DequeuedJobsWatcher.cs", label="Entry Mock<JobActivator>.cstr", span=""];
m0_23 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", span="29-29"];
m0_24 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", span="292-292"];
m0_25 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", span="35-35"];
m0_106 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", span="155-155"];
m0_107 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(TimeSpanValue)", span="157-157"];
m0_108 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", span="155-155"];
m0_214 [cluster="Unk.SerializeObject", file="DequeuedJobsWatcher.cs", label="Entry Unk.SerializeObject", span=""];
m0_118 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", span="173-173"];
m0_119 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(DateTimeOffsetValue)", span="175-175"];
m0_120 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", span="173-173"];
m0_30 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", span="38-38"];
m0_31 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", span="44-44"];
m0_32 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(SByteValue, value)", span="44-44"];
m0_33 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", span="44-44"];
m0_17 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Exit lambda expression", span="37-37"];
m0_18 [cluster="Unk.>", file="DequeuedJobsWatcher.cs", label="Entry Unk.>", span=""];
m0_19 [cluster="Unk.CreateWorkerSupervisor", file="DequeuedJobsWatcher.cs", label="Entry Unk.CreateWorkerSupervisor", span=""];
m0_73 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Exit lambda expression", span="84-84"];
m0_74 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsDisposeMethodOnAllWorkers()", file="DequeuedJobsWatcher.cs", label="Entry HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsDisposeMethodOnAllWorkers()", span="88-88"];
m0_75 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsDisposeMethodOnAllWorkers()", file="DequeuedJobsWatcher.cs", label="_manager.Object.Execute(new CancellationToken(true))", span="90-90"];
m0_166 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", span="245-245"];
m0_167 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(ListValue, true)", span="247-247"];
m0_168 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", span="245-245"];
m0_127 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", span="188-188"];
m0_128 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(EnumValue, value)", span="188-188"];
m0_129 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", span="188-188"];
m0_112 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", span="164-164"];
m0_113 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(ObjectValue)", span="166-166"];
m0_114 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", span="164-164"];
m0_37 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Exit lambda expression", span="52-53"];
m0_38 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerSupervisor_CreatesAWorkerSupervisorWithGivenParameters()", file="DequeuedJobsWatcher.cs", label="Entry HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerSupervisor_CreatesAWorkerSupervisorWithGivenParameters()", span="59-59"];
m0_39 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerSupervisor_CreatesAWorkerSupervisorWithGivenParameters()", file="DequeuedJobsWatcher.cs", label="var manager = new WorkerManager(_sharedContext, WorkerCount)", span="61-61"];
m0_53 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()", color=green, community=0, file="DequeuedJobsWatcher.cs", label="16: CreateAndPerform(DoubleValue)", span="76-76"];
m0_88 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", span="128-128"];
m0_89 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(Int16Value)", span="130-130"];
m0_90 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", span="128-128"];
m0_58 [cluster="Unk.Start", file="DequeuedJobsWatcher.cs", label="Entry Unk.Start", span=""];
m0_59 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Entry lambda expression", span="75-75"];
m0_60 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="x.Start()", span="75-75"];
m0_7 [cluster="Unk.Returns", file="DequeuedJobsWatcher.cs", label="Entry Unk.Returns", span=""];
m0_76 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsDisposeMethodOnAllWorkers()", file="DequeuedJobsWatcher.cs", label="_workerSupervisors[0].Verify(x => x.Dispose())", span="92-92"];
m0_77 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsDisposeMethodOnAllWorkers()", file="DequeuedJobsWatcher.cs", label="_workerSupervisors[1].Verify(x => x.Dispose())", span="93-93"];
m0_78 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsDisposeMethodOnAllWorkers()", file="DequeuedJobsWatcher.cs", label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsDisposeMethodOnAllWorkers()", span="88-88"];
m0_43 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerSupervisor_CreatesAWorkerSupervisorWithGivenParameters()", file="DequeuedJobsWatcher.cs", label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerSupervisor_CreatesAWorkerSupervisorWithGivenParameters()", span="59-59"];
m0_44 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.SharedWorkerContext, int)", file="DequeuedJobsWatcher.cs", label="Entry HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.SharedWorkerContext, int)", span="27-27"];
m0_45 [cluster="HangFire.Server.WorkerManager.CreateWorkerSupervisor(HangFire.Server.WorkerContext)", file="DequeuedJobsWatcher.cs", label="Entry HangFire.Server.WorkerManager.CreateWorkerSupervisor(HangFire.Server.WorkerContext)", span="62-62"];
m0_85 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Exit lambda expression", span="93-93"];
m0_86 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", file="DequeuedJobsWatcher.cs", label="HangFire.Core.Tests.Server.WorkerManagerFacts", span=""];
m0_87 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", span="125-125"];
m0_139 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", span="206-206"];
m0_140 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(UriValue, value)", span="206-206"];
m0_141 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", span="206-206"];
m0_184 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", span="287-287"];
m0_185 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(CustomClassValue, true)", span="289-289"];
m0_186 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", span="287-287"];
m0_115 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", span="170-170"];
m0_116 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(DateTimeOffsetValue, value)", span="170-170"];
m0_117 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", span="170-170"];
m0_71 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Entry lambda expression", span="84-84"];
m0_72 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="x.Stop()", span="84-84"];
m0_79 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Entry lambda expression", span="92-92"];
m0_80 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="x.Dispose()", span="92-92"];
m0_81 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Exit lambda expression", span="92-92"];
m0_103 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", span="152-152"];
m0_104 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(TimeSpanValue, value)", span="152-152"];
m0_105 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", span="152-152"];
m0_82 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", span="119-119"];
m0_94 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", span="137-137"];
m0_95 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(UInt16Value)", span="139-139"];
m0_96 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", span="137-137"];
m0_196 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label="job.Perform(_activator.Object, _token.Object)", span="314-314"];
m0_187 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label="var type = typeof(JobArgumentFacts)", span="294-294"];
m0_190 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label="!checkJsonOnly", span="299-299"];
m0_192 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label="serializationMethods.Add(new Tuple<string, Func<string>>(\r\n					''TypeDescriptor'',\r\n					() => converter.ConvertToInvariantString(argumentValue)))", span="302-304"];
m0_193 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label="serializationMethods.Add(new Tuple<string, Func<string>>(\r\n				''JSON'',\r\n				() => JsonConvert.SerializeObject(argumentValue)))", span="307-309"];
m0_195 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label="var job = new Job(type, methodInfo, new[] { method.Item2() })", span="313-313"];
m0_194 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label=serializationMethods, span="311-311"];
m0_188 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label="var methodInfo = type.GetMethod(''Method'', new[] { typeof(T) })", span="295-295"];
m0_189 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label="var serializationMethods = new List<Tuple<string, Func<string>>>()", span="297-297"];
m0_191 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label="var converter = TypeDescriptor.GetConverter(typeof(T))", span="301-301"];
m0_197 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", span="292-292"];
m0_211 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Entry lambda expression", span="309-309"];
m0_15 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="new JobArgumentFacts()", span="20-20"];
m0_20 [cluster="Unk.Equal", file="DequeuedJobsWatcher.cs", label="Entry Unk.Equal", span=""];
m0_16 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Exit lambda expression", span="20-20"];
m0_21 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", span="29-29"];
m0_22 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(BooleanValue)", span="31-31"];
m0_26 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(ByteValue, value)", span="35-35"];
m0_27 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", span="35-35"];
m0_28 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", span="38-38"];
m0_35 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(SByteValue)", span="49-49"];
m0_36 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", span="47-47"];
m0_55 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", span="80-80"];
m0_56 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", color=red, community=0, file="DequeuedJobsWatcher.cs", label="9: Assert.Equal(SingleValue, value)", span="80-80"];
m0_57 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", span="80-80"];
m0_61 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", span="89-89"];
m0_67 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", span="98-98"];
m0_68 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(UInt32Value, value)", span="98-98"];
m0_69 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", span="98-98"];
m0_83 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(UInt64Value)", span="121-121"];
m0_84 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", span="119-119"];
m0_208 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="converter.ConvertToInvariantString(argumentValue)", span="304-304"];
m0_212 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="JsonConvert.SerializeObject(argumentValue)", span="309-309"];
m0_14 [cluster="Unk.Returns", file="DequeuedJobsWatcher.cs", label="Entry Unk.Returns", span=""];
m0_207 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Entry lambda expression", span="304-304"];
m0_209 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Exit lambda expression", span="304-304"];
m0_213 [cluster="lambda expression", file="DequeuedJobsWatcher.cs", label="Exit lambda expression", span="309-309"];
m0_9 [cluster="Mock<JobActivator>.cstr", file="DequeuedJobsWatcher.cs", label="Entry Mock<JobActivator>.cstr", span=""];
m0_62 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(Int32Value, value)", span="89-89"];
m0_63 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", span="89-89"];
m0_64 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", span="92-92"];
m0_65 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(Int32Value)", span="94-94"];
m0_66 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", span="92-92"];
m0_202 [cluster="System.Collections.Generic.List<T>.Add(T)", file="DequeuedJobsWatcher.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m0_6 [cluster="Unk.Setup", file="DequeuedJobsWatcher.cs", label="Entry Unk.Setup", span=""];
m0_121 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", span="179-179"];
m0_122 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(CultureInfoValue, value)", span="179-179"];
m0_123 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", span="179-179"];
m0_175 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", span="270-270"];
m0_176 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(CustomStructValue, value)", span="270-270"];
m0_177 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", span="270-270"];
m0_205 [cluster="System.Func<TResult>.Invoke()", file="DequeuedJobsWatcher.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_10 [cluster="Mock<IStateMachineFactory>.cstr", file="DequeuedJobsWatcher.cs", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
m0_34 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", span="47-47"];
m0_130 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", span="191-191"];
m0_131 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(EnumValue)", span="193-193"];
m0_132 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", span="191-191"];
m0_124 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", span="182-182"];
m0_125 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(CultureInfoValue)", span="184-184"];
m0_126 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", span="182-182"];
m0_46 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", span="65-65"];
m0_52 [cluster="System.Threading.CancellationToken.CancellationToken(bool)", file="DequeuedJobsWatcher.cs", label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0"];
m0_54 [cluster="Unk.Verify", file="DequeuedJobsWatcher.cs", label="Entry Unk.Verify", span=""];
m0_178 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", span="273-273"];
m0_179 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(CustomStructValue, true)", span="275-275"];
m0_180 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", span="273-273"];
m0_169 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", span="255-255"];
m0_170 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(DictionaryValue, value)", span="255-255"];
m0_171 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", span="255-255"];
m0_13 [cluster="Unk.Setup", file="DequeuedJobsWatcher.cs", label="Entry Unk.Setup", span=""];
m0_100 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", span="146-146"];
m0_101 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(StringValue)", span="148-148"];
m0_102 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", span="146-146"];
m0_40 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", span="56-56"];
m0_41 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(CharValue)", span="58-58"];
m0_42 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", span="56-56"];
m0_8 [cluster="Mock<IJobPerformanceProcess>.cstr", file="DequeuedJobsWatcher.cs", label="Entry Mock<IJobPerformanceProcess>.cstr", span=""];
m0_91 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", span="134-134"];
m0_92 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(UInt16Value, value)", span="134-134"];
m0_93 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", span="134-134"];
m0_151 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", span="224-224"];
m0_152 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(NullNullableValue, value)", span="224-224"];
m0_153 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", span="224-224"];
m0_157 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", span="233-233"];
m0_158 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", file="DequeuedJobsWatcher.cs", label="Assert.Equal(ArrayValue, value)", span="233-233"];
m0_159 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", span="233-233"];
m0_109 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", span="161-161"];
m0_110 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(ObjectValue, value)", span="161-161"];
m0_111 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", span="161-161"];
m0_172 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", span="258-258"];
m0_173 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(DictionaryValue, true)", span="260-260"];
m0_174 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", span="258-258"];
m0_163 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", span="242-242"];
m0_164 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(ListValue, value)", span="242-242"];
m0_165 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", span="242-242"];
m0_198 [cluster="System.Type.GetMethod(string, System.Type[])", file="DequeuedJobsWatcher.cs", label="Entry System.Type.GetMethod(string, System.Type[])", span="0-0"];
m0_142 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", span="209-209"];
m0_143 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(UriValue)", span="211-211"];
m0_144 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", span="209-209"];
m0_210 [cluster="System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", file="DequeuedJobsWatcher.cs", label="Entry System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", span="0-0"];
m0_11 [cluster="Mock<IServerSupervisor>.cstr", file="DequeuedJobsWatcher.cs", label="Entry Mock<IServerSupervisor>.cstr", span=""];
m0_12 [cluster="Mock<WorkerManager>.cstr", file="DequeuedJobsWatcher.cs", label="Entry Mock<WorkerManager>.cstr", span=""];
m0_200 [cluster="System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", file="DequeuedJobsWatcher.cs", label="Entry System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", span="0-0"];
m0_201 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="DequeuedJobsWatcher.cs", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
m0_148 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", span="218-218"];
m0_149 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(NotNullNullableValue)", span="220-220"];
m0_150 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", span="218-218"];
m0_206 [cluster="Unk.Perform", file="DequeuedJobsWatcher.cs", label="Entry Unk.Perform", span=""];
m0_181 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", span="284-284"];
m0_182 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(CustomClassValue.CreatedAt, value.CreatedAt)", span="284-284"];
m0_183 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", span="284-284"];
m0_133 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", span="197-197"];
m0_134 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", file="DequeuedJobsWatcher.cs", label="Assert.Equal(GuidValue, value)", span="197-197"];
m0_135 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", span="197-197"];
m0_29 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(ByteValue)", span="40-40"];
m0_160 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", span="236-236"];
m0_161 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="CreateAndPerform(ArrayValue, true)", span="238-238"];
m0_162 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", file="DequeuedJobsWatcher.cs", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", span="236-236"];
m0_215 [file="DequeuedJobsWatcher.cs", label="Hangfire.Core.Tests.Common.JobArgumentFacts", span=""];
m0_216 [file="DequeuedJobsWatcher.cs", label=T, span=""];
m0_217 [file="DequeuedJobsWatcher.cs", label=converter, span=""];
m1_41 [cluster="Unk.Then", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.Then", span=""];
m1_39 [cluster="Unk.Given", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.Given", span=""];
m1_78 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="184-184"];
m1_82 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="193-193"];
m1_85 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="199-199"];
m1_86 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="201-201"];
m1_87 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job does not have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="203-203"];
m1_80 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="189-189"];
m1_79 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out jobs in the \'Fetched\' state should be re-queued'', new string[] {\r\n                        ''checkpoint-2''})", span="186-187"];
m1_81 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="191-191"];
m1_83 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="195-195"];
m1_84 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="197-197"];
m1_88 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="205-205"];
m1_89 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="184-184"];
m1_40 [cluster="Unk.When", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.When", span=""];
m1_25 [cluster="Unk.OnScenarioStart", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m1_113 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", span="268-268"];
m1_114 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="14: TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job is being enqueued on it\'s actual queue after timing out'', ((string[])(null)))", span="270-270"];
m1_115 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="272-272"];
m1_116 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''a dequeued job from the \'test\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="274-274"];
m1_117 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="276-276"];
m1_118 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="278-278"];
m1_120 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="282-282"];
m1_119 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="280-280"];
m1_121 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", span="268-268"];
m1_122 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="290-290"];
m1_126 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="299-299"];
m1_129 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="305-305"];
m1_124 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="295-295"];
m1_123 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When the server could not find the job\'s type, the job is moved to the Failed sta'' +\r\n                    ''te'', ((string[])(null)))", span="292-293"];
m1_125 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="297-297"];
m1_127 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="301-301"];
m1_128 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="303-303"];
m1_130 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="307-307"];
m1_131 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="290-290"];
m1_22 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m1_23 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="DequeuedJobsWatcher.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m1_24 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m1_26 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="66-66"];
m1_27 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m1_28 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="66-66"];
m1_29 [cluster="Unk.CollectScenarioErrors", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m1_132 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="314-314"];
m1_136 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="2: testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="322-322"];
m1_135 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="320-320"];
m1_137 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="324-324"];
m1_134 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="318-318"];
m1_133 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Succeeded job of non-existing type will not be moved to the failed state'', ((string[])(null)))", span="316-316"];
m1_138 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="326-326"];
m1_141 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="332-332"];
m1_139 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="328-328"];
m1_140 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="330-330"];
m1_142 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="314-314"];
m1_90 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="214-214"];
m1_94 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="10: testRunner.And(''it\'s state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="224-224"];
m1_93 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="222-222"];
m1_95 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="226-226"];
m1_92 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="220-220"];
m1_96 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="228-228"];
m1_98 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="232-232"];
m1_91 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job\'s state is changed to the Enqueued when the job is being timed out after proc'' +\r\n                    ''eeding to the Processing state'', new string[] {\r\n                        ''checkpoint-3''})", span="216-218"];
m1_97 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the job moved to the Enqueued state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="230-230"];
m1_99 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="234-234"];
m1_100 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="214-214"];
m1_101 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="242-242"];
m1_105 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", color=green, community=0, file="DequeuedJobsWatcher.feature.cs", label="10: testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="251-251"];
m1_104 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="249-249"];
m1_106 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="253-253"];
m1_103 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="247-247"];
m1_107 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="255-255"];
m1_102 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job in the Succeeded state does not move to the Enqueued state'', new string[] {\r\n                        ''checkpoint-4''})", span="244-245"];
m1_108 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="257-257"];
m1_110 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="261-261"];
m1_109 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="259-259"];
m1_111 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="242-242"];
m1_42 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="97-97"];
m1_46 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was checked a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106"];
m1_49 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="112-112"];
m1_50 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="114-114"];
m1_44 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="102-102"];
m1_43 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Non-timed out job in the \'Checked\' state should not be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="99-100"];
m1_45 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="104-104"];
m1_47 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="108-108"];
m1_48 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="110-110"];
m1_51 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="116-116"];
m1_52 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="97-97"];
m1_54 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="124-124"];
m1_58 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="133-133"];
m1_61 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="139-139"];
m1_62 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="141-141"];
m1_56 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="129-129"];
m1_55 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed job in the \'Checked\' state should be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="126-127"];
m1_57 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="131-131"];
m1_59 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="135-135"];
m1_60 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="137-137"];
m1_63 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="143-143"];
m1_64 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="124-124"];
m1_65 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="152-152"];
m1_69 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="162-162"];
m1_70 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''it was fetched a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="164-164"];
m1_73 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="170-170"];
m1_74 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="172-172"];
m1_75 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.And(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="174-174"];
m1_67 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="158-158"];
m1_66 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job by the \'checked\' flag in the \'Fetched\' state should not be re-queue'' +\r\n                    ''d'', new string[] {\r\n                        ''checkpoint-2''})", span="154-156"];
m1_68 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="160-160"];
m1_71 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="166-166"];
m1_72 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="168-168"];
m1_76 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="176-176"];
m1_77 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="152-152"];
m1_38 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="DequeuedJobsWatcher.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m1_53 [cluster="Unk.And", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.And", span=""];
m1_112 [cluster="Unk.But", file="DequeuedJobsWatcher.feature.cs", label="Entry Unk.But", span=""];
m1_30 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="76-76"];
m1_32 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="81-81"];
m1_31 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''A job in the implicit \'Dequeued\' state moved to the \'Checked\' state'', new string[] {\r\n                        ''checkpoint-1-1''})", span="78-79"];
m1_33 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="83-83"];
m1_36 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="this.ScenarioCleanup()", span="89-89"];
m1_34 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m1_35 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="testRunner.Then(''it marks the job as \'checked\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87"];
m1_37 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="DequeuedJobsWatcher.feature.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="76-76"];
m1_143 [file="DequeuedJobsWatcher.feature.cs", label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", span=""];
m2_0 [cluster="HangFire.Web.Pages.ErrorPage.ErrorPage(System.Exception)", file="ErrorPage.cs", label="Entry HangFire.Web.Pages.ErrorPage.ErrorPage(System.Exception)", span="6-6"];
m2_1 [cluster="HangFire.Web.Pages.ErrorPage.ErrorPage(System.Exception)", color=green, community=0, file="ErrorPage.cs", label="5: Exception = exception", span="8-8"];
m2_2 [cluster="HangFire.Web.Pages.ErrorPage.ErrorPage(System.Exception)", file="ErrorPage.cs", label="Exit HangFire.Web.Pages.ErrorPage.ErrorPage(System.Exception)", span="6-6"];
m2_3 [file="ErrorPage.cs", label="HangFire.Web.Pages.ErrorPage", span=""];
m3_34 [cluster="HangFire.States.IStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ErrorPage.generated.cs", label="Entry HangFire.States.IStateHandler.Unapply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="25-25"];
m3_36 [cluster="HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="ErrorPage.generated.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="26-26"];
m3_39 [cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="ErrorPage.generated.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="24-24"];
m3_12 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", file="ErrorPage.generated.cs", label="Entry HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", span="46-46"];
m3_13 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="16: handlers == null", span="49-49"];
m3_14 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="14: throw new ArgumentNullException(''handlers'');", span="49-49"];
m3_15 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="15: filters == null", span="50-50"];
m3_16 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="14: throw new ArgumentNullException(''filters'');", span="50-50"];
m3_17 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="16: var transaction = _connection.CreateWriteTransaction()", span="52-52"];
m3_18 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="15: handlers.GetHandlers(OldStateName)", span="54-54"];
m3_19 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="7: handler.Unapply(this, transaction)", span="56-56"];
m3_20 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="1: filters", span="59-59"];
m3_21 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="15: filter.OnStateUnapplied(this, transaction)", span="61-61"];
m3_22 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="15: transaction.SetJobState(JobId, NewState)", span="64-64"];
m3_23 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="1: handlers.GetHandlers(NewState.Name)", span="66-66"];
m3_24 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="15: handler.Apply(this, transaction)", span="68-68"];
m3_25 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="16: filters", span="71-71"];
m3_26 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="1: filter.OnStateApplied(this, transaction)", span="73-73"];
m3_27 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="14: NewState.IsFinal", span="76-76"];
m3_28 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="16: transaction.ExpireJob(JobId, JobExpirationTimeout)", span="78-78"];
m3_29 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", color=green, community=0, file="ErrorPage.generated.cs", label="16: transaction.PersistJob(JobId)", span="82-82"];
m3_30 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", file="ErrorPage.generated.cs", label="transaction.Commit()", span="85-85"];
m3_31 [cluster="HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", file="ErrorPage.generated.cs", label="Exit HangFire.States.ApplyStateContext.ApplyState(HangFire.States.StateHandlerCollection, System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>)", span="46-46"];
m3_38 [cluster="HangFire.States.IApplyStateFilter.OnStateApplied(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ErrorPage.generated.cs", label="Entry HangFire.States.IApplyStateFilter.OnStateApplied(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="29-29"];
m3_40 [cluster="HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", file="ErrorPage.generated.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", span="25-25"];
m3_32 [cluster="HangFire.Storage.IStorageConnection.CreateWriteTransaction()", file="ErrorPage.generated.cs", label="Entry HangFire.Storage.IStorageConnection.CreateWriteTransaction()", span="26-26"];
m3_33 [cluster="HangFire.States.StateHandlerCollection.GetHandlers(string)", file="ErrorPage.generated.cs", label="Entry HangFire.States.StateHandlerCollection.GetHandlers(string)", span="40-40"];
m3_41 [cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="ErrorPage.generated.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.Commit()", span="48-48"];
m3_37 [cluster="HangFire.States.IStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ErrorPage.generated.cs", label="Entry HangFire.States.IStateHandler.Apply(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="24-24"];
m3_11 [cluster="System.TimeSpan.FromDays(double)", file="ErrorPage.generated.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m3_35 [cluster="HangFire.States.IApplyStateFilter.OnStateUnapplied(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", file="ErrorPage.generated.cs", label="Entry HangFire.States.IApplyStateFilter.OnStateUnapplied(HangFire.States.ApplyStateContext, HangFire.Storage.IWriteOnlyTransaction)", span="36-36"];
m3_0 [cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", file="ErrorPage.generated.cs", label="Entry HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", span="26-26"];
m3_1 [cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", color=green, community=0, file="ErrorPage.generated.cs", label="17: connection == null", span="33-33"];
m3_2 [cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", color=green, community=0, file="ErrorPage.generated.cs", label="17: throw new ArgumentNullException(''connection'');", span="33-33"];
m3_3 [cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", color=green, community=0, file="ErrorPage.generated.cs", label="17: newState == null", span="34-34"];
m3_4 [cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", color=green, community=0, file="ErrorPage.generated.cs", label="17: throw new ArgumentNullException(''newState'');", span="34-34"];
m3_5 [cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", color=green, community=0, file="ErrorPage.generated.cs", label="7: _connection = connection", span="36-36"];
m3_6 [cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", color=green, community=0, file="ErrorPage.generated.cs", label="17: OldStateName = oldStateName", span="37-37"];
m3_7 [cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", color=green, community=0, file="ErrorPage.generated.cs", label="7: NewState = newState", span="38-38"];
m3_8 [cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", color=green, community=0, file="ErrorPage.generated.cs", label="17: JobExpirationTimeout = TimeSpan.FromDays(1)", span="39-39"];
m3_9 [cluster="HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", file="ErrorPage.generated.cs", label="Exit HangFire.States.ApplyStateContext.ApplyStateContext(HangFire.Storage.IStorageConnection, HangFire.States.StateContext, HangFire.States.IState, string)", span="26-26"];
m3_42 [file="ErrorPage.generated.cs", label="HangFire.States.ApplyStateContext", span=""];
m6_26 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="Perform.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", span="39-39"];
m6_27 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="Perform.cs", label="var options = CreateOptions()", span="41-41"];
m6_28 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="Perform.cs", label="Assert.Throws<ArgumentOutOfRangeException>(\r\n                () => options.WorkerCount = -1)", span="43-44"];
m6_29 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", file="Perform.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsNegative()", span="39-39"];
m6_15 [cluster="Unk.>", file="Perform.cs", label="Entry Unk.>", span=""];
m6_19 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="Perform.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", span="30-30"];
m6_20 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="Perform.cs", label="var options = CreateOptions()", span="32-32"];
m6_21 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="Perform.cs", label="Assert.Throws<ArgumentOutOfRangeException>(\r\n                () => options.WorkerCount = 0)", span="34-35"];
m6_22 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", file="Perform.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.WorkerCount_ThrowsAnException_WhenValueIsEqualToZero()", span="30-30"];
m6_40 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="Perform.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="57-57"];
m6_41 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="Perform.cs", label="var options = CreateOptions()", span="59-59"];
m6_42 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="Perform.cs", label="Assert.Throws<ArgumentException>(\r\n                () => options.Queues = new string[0])", span="61-62"];
m6_43 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", file="Perform.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenGivenArrayIsEmpty()", span="57-57"];
m6_10 [cluster="Unk.True", file="Perform.cs", label="Entry Unk.True", span=""];
m6_9 [cluster="Unk.Equal", file="Perform.cs", label="Entry Unk.Equal", span=""];
m6_11 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="Perform.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", span="21-21"];
m6_12 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="Perform.cs", label="var options = CreateOptions()", span="23-23"];
m6_13 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="Perform.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => options.ServerName = null)", span="25-26"];
m6_14 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", file="Perform.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.ServerName_ThrowsAnException_WhenValueIsNull()", span="21-21"];
m6_0 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="Perform.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", span="9-9"];
m6_1 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="Perform.cs", label="var options = CreateOptions()", span="11-11"];
m6_2 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="Perform.cs", label="Assert.Equal(Environment.ProcessorCount * 5, options.WorkerCount)", span="13-13"];
m6_3 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="Perform.cs", label="Assert.Equal(Environment.MachineName, options.ServerName)", span="14-14"];
m6_4 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="Perform.cs", label="Assert.Equal(EnqueuedState.DefaultQueue, options.Queues[0])", span="15-15"];
m6_5 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="Perform.cs", label="Assert.True(options.ShutdownTimeout > TimeSpan.Zero)", span="16-16"];
m6_6 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="Perform.cs", label="Assert.True(options.SchedulePollingInterval > TimeSpan.Zero)", span="17-17"];
m6_7 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", file="Perform.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Ctor_InitializeProperties_WithCorrectValues()", span="9-9"];
m6_33 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="Perform.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", span="48-48"];
m6_34 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="Perform.cs", label="var options = CreateOptions()", span="50-50"];
m6_35 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="Perform.cs", label="Assert.Throws<ArgumentNullException>(\r\n                () => options.Queues = null)", span="52-53"];
m6_36 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", file="Perform.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.Queues_ThrowsAnException_WhenValueIsNull()", span="48-48"];
m6_49 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="Perform.cs", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="32-32"];
m6_44 [cluster="lambda expression", file="Perform.cs", label="Entry lambda expression", span="62-62"];
m6_17 [cluster="lambda expression", file="Perform.cs", label="options.ServerName = null", span="26-26"];
m6_16 [cluster="lambda expression", file="Perform.cs", label="Entry lambda expression", span="26-26"];
m6_18 [cluster="lambda expression", file="Perform.cs", label="Exit lambda expression", span="26-26"];
m6_24 [cluster="lambda expression", file="Perform.cs", label="options.WorkerCount = 0", span="35-35"];
m6_23 [cluster="lambda expression", file="Perform.cs", label="Entry lambda expression", span="35-35"];
m6_25 [cluster="lambda expression", file="Perform.cs", label="Exit lambda expression", span="35-35"];
m6_31 [cluster="lambda expression", file="Perform.cs", label="options.WorkerCount = -1", span="44-44"];
m6_30 [cluster="lambda expression", file="Perform.cs", label="Entry lambda expression", span="44-44"];
m6_32 [cluster="lambda expression", file="Perform.cs", label="Exit lambda expression", span="44-44"];
m6_38 [cluster="lambda expression", file="Perform.cs", label="options.Queues = null", span="53-53"];
m6_37 [cluster="lambda expression", file="Perform.cs", label="Entry lambda expression", span="53-53"];
m6_39 [cluster="lambda expression", file="Perform.cs", label="Exit lambda expression", span="53-53"];
m6_45 [cluster="lambda expression", file="Perform.cs", label="options.Queues = new string[0]", span="62-62"];
m6_46 [cluster="lambda expression", file="Perform.cs", label="Exit lambda expression", span="62-62"];
m6_8 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", file="Perform.cs", label="Entry Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", span="65-65"];
m6_47 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", file="Perform.cs", label="return new BackgroundJobServerOptions();", span="67-67"];
m6_48 [cluster="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", file="Perform.cs", label="Exit Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts.CreateOptions()", span="65-65"];
m6_50 [file="Perform.cs", label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", span=""];
m6_51 [file="Perform.cs", label=options, span=""];
m6_52 [file="Perform.cs", label=options, span=""];
m6_53 [file="Perform.cs", label=options, span=""];
m6_54 [file="Perform.cs", label=options, span=""];
m6_55 [file="Perform.cs", label=options, span=""];
m7_0 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="RazorPage.cs", label="Entry HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", span="37-37"];
m7_1 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="RazorPage.cs", label="Items = context.Items", span="40-40"];
m7_3 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="RazorPage.cs", label="_jobWasCreated = context._jobWasCreated", span="42-42"];
m7_2 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="RazorPage.cs", label="JobId = context.JobId", span="41-41"];
m7_4 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="RazorPage.cs", label="_parameters = context._parameters", span="43-43"];
m7_5 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", file="RazorPage.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.CreateProvider()", span="29-29"];
m7_45 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="RazorPage.cs", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30"];
m7_33 [cluster="string.IsNullOrWhiteSpace(string)", file="RazorPage.cs", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
m7_16 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="RazorPage.cs", label="Connection = connection", span="59-59"];
m7_47 [cluster="string.Format(string, object)", file="RazorPage.cs", label="Entry string.Format(string, object)", span="0-0"];
m7_54 [cluster="HangFire.States.IStateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.State)", file="RazorPage.cs", label="Entry HangFire.States.IStateMachine.CreateInState(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, HangFire.States.State)", span="23-23"];
m7_48 [cluster="HangFire.Client.CreateContext.CreateJob()", file="RazorPage.cs", label="Entry HangFire.Client.CreateContext.CreateJob()", span="147-147"];
m7_49 [cluster="HangFire.Client.CreateContext.CreateJob()", file="RazorPage.cs", label="var stateMachine = _stateMachineFactory.Create(Connection)", span="149-149"];
m7_50 [cluster="HangFire.Client.CreateContext.CreateJob()", file="RazorPage.cs", label="JobId = stateMachine.CreateInState(Job, _parameters, InitialState)", span="151-151"];
m7_51 [cluster="HangFire.Client.CreateContext.CreateJob()", file="RazorPage.cs", label="_jobWasCreated = true", span="152-152"];
m7_52 [cluster="HangFire.Client.CreateContext.CreateJob()", file="RazorPage.cs", label="Exit HangFire.Client.CreateContext.CreateJob()", span="147-147"];
m7_34 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="RazorPage.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m7_7 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="RazorPage.cs", label="connection == null", span="52-52"];
m7_6 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="RazorPage.cs", label="Entry HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", span="46-46"];
m7_22 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RazorPage.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m7_14 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", color=green, community=0, file="RazorPage.cs", label="20: throw new ArgumentNullException(''initialState'');", span="55-55"];
m7_15 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="RazorPage.cs", label="_stateMachineFactory = stateMachineFactory", span="57-57"];
m7_46 [cluster="System.InvalidOperationException.InvalidOperationException(string, System.Exception)", file="RazorPage.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string, System.Exception)", span="0-0"];
m7_53 [cluster="HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", file="RazorPage.cs", label="Entry HangFire.States.IStateMachineFactory.Create(HangFire.Storage.IStorageConnection)", span="8-8"];
m7_9 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="RazorPage.cs", label="20: var provider = CreateProvider()", span="22-22"];
m7_11 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="RazorPage.cs", label="20: Assert.NotNull(monitoring)", span="26-26"];
m7_13 [cluster="Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="RazorPage.cs", label="Entry Hangfire.SqlServer.Msmq.MsmqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="37-37"];
m7_17 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="RazorPage.cs", label="Job = job", span="60-60"];
m7_18 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="RazorPage.cs", label="InitialState = initialState", span="61-61"];
m7_8 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="RazorPage.cs", label="Entry Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="20-20"];
m7_10 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="RazorPage.cs", label="20: var monitoring = provider.GetJobQueueMonitoringApi(null)", span="24-24"];
m7_12 [cluster="Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="RazorPage.cs", label="Exit Hangfire.SqlServer.Msmq.Tests.MsmqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="20-20"];
m7_19 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="RazorPage.cs", label="Items = new Dictionary<string, object>()", span="63-63"];
m7_20 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", file="RazorPage.cs", label="Exit HangFire.Client.CreateContext.CreateContext(HangFire.Storage.IStorageConnection, HangFire.States.IStateMachineFactory, HangFire.Common.Job, HangFire.States.State)", span="46-46"];
m7_36 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="RazorPage.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m7_35 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="RazorPage.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23"];
m7_23 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="RazorPage.cs", label="Entry HangFire.Client.CreateContext.SetJobParameter(string, object)", span="96-96"];
m7_24 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="RazorPage.cs", label="String.IsNullOrWhiteSpace(name)", span="98-98"];
m7_28 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="RazorPage.cs", label="var serializedValue = JobHelper.ToJson(value)", span="105-105"];
m7_29 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="RazorPage.cs", label="!_parameters.ContainsKey(name)", span="107-107"];
m7_30 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="RazorPage.cs", label="_parameters.Add(name, serializedValue)", span="109-109"];
m7_31 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="RazorPage.cs", label="_parameters[name] = serializedValue", span="113-113"];
m7_25 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="RazorPage.cs", label="throw new ArgumentNullException(''name'');", span="98-98"];
m7_26 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="RazorPage.cs", label=_jobWasCreated, span="100-100"];
m7_27 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="RazorPage.cs", label="throw new InvalidOperationException(''Could not set parameter for a created job.'');", span="102-102"];
m7_32 [cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="RazorPage.cs", label="Exit HangFire.Client.CreateContext.SetJobParameter(string, object)", span="96-96"];
m7_38 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="RazorPage.cs", label="Entry HangFire.Client.CreateContext.GetJobParameter<T>(string)", span="129-129"];
m7_39 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="RazorPage.cs", label="String.IsNullOrWhiteSpace(name)", span="131-131"];
m7_41 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="RazorPage.cs", label="return _parameters.ContainsKey(name)\r\n                    ? JobHelper.FromJson<T>(_parameters[name])\r\n                    : default(T);", span="135-137"];
m7_43 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="RazorPage.cs", label="throw new InvalidOperationException(String.Format(\r\n                    ''Could not get a value of the job parameter `{0}`. See inner exception for details.'',\r\n                    name), ex);", span="141-143"];
m7_40 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="RazorPage.cs", label="throw new ArgumentNullException(''name'');", span="131-131"];
m7_42 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="RazorPage.cs", label=Exception, span="139-139"];
m7_44 [cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="RazorPage.cs", label="Exit HangFire.Client.CreateContext.GetJobParameter<T>(string)", span="129-129"];
m7_37 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="RazorPage.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m7_55 [file="RazorPage.cs", label="HangFire.Client.CreateContext", span=""];
m8_71 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="154-154"];
m8_25 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SchedulePoller.feature.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148"];
m8_29 [cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="SchedulePoller.feature.cs", label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0"];
m8_115 [cluster="Unk.SetRangeInHash", file="SchedulePoller.feature.cs", label="Entry Unk.SetRangeInHash", span=""];
m8_21 [cluster="Mock<IScheduleInstant>.cstr", file="SchedulePoller.feature.cs", label="Entry Mock<IScheduleInstant>.cstr", span=""];
m8_63 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="135-135"];
m8_64 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="137-137"];
m8_65 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="139-139"];
m8_66 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="141-141"];
m8_152 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SchedulePoller.feature.cs", label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", span="160-160"];
m8_153 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", color=green, community=0, file="SchedulePoller.feature.cs", label="15: var time = DateTime.UtcNow", span="162-162"];
m8_154 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SchedulePoller.feature.cs", label="_recurringJob[''LastExecution''] = JobHelper.SerializeDateTime(DateTime.UtcNow)", span="163-163"];
m8_157 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SchedulePoller.feature.cs", label="_instant.Verify(x => x.GetMatches(time))", span="168-168"];
m8_155 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SchedulePoller.feature.cs", label="var scheduler = CreateScheduler()", span="164-164"];
m8_156 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SchedulePoller.feature.cs", label="scheduler.Execute(_token)", span="166-166"];
m8_158 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SchedulePoller.feature.cs", label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", span="160-160"];
m8_17 [cluster="HangFire.Tests.Server.SchedulePollerFeature.TestInitialize()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.TestInitialize()", span="46-46"];
m8_19 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioTearDown()", file="SchedulePoller.feature.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m8_30 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="37-37"];
m8_31 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.GetMatches(It.IsAny<DateTime?>())", span="37-37"];
m8_32 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="37-37"];
m8_33 [cluster="Unk.>", file="SchedulePoller.feature.cs", label="Entry Unk.>", span=""];
m8_34 [cluster="Unk.GetMatches", file="SchedulePoller.feature.cs", label="Entry Unk.GetMatches", span=""];
m8_35 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="39-39"];
m8_36 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.GetInstant(It.IsNotNull<CrontabSchedule>())", span="39-39"];
m8_37 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="39-39"];
m8_38 [cluster="Unk.GetInstant", file="SchedulePoller.feature.cs", label="Entry Unk.GetInstant", span=""];
m8_39 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="40-40"];
m8_40 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="_instant.Object", span="40-40"];
m8_163 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="SchedulePoller.feature.cs", label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="172-172"];
m8_164 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="SchedulePoller.feature.cs", label="_connection.Setup(x => x.GetAllItemsFromSet(It.IsAny<string>()))\r\n                .Returns(new HashSet<string> { ''non-existing-job'' })", span="174-175"];
m8_165 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="SchedulePoller.feature.cs", label="var scheduler = CreateScheduler()", span="176-176"];
m8_166 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="SchedulePoller.feature.cs", label="Assert.DoesNotThrow(() => scheduler.Execute(_token))", span="178-178"];
m8_167 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="SchedulePoller.feature.cs", label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="172-172"];
m8_0 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SchedulePoller.feature.cs", label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="27-27"];
m8_1 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SchedulePoller.feature.cs", label="_storage = new Mock<JobStorage>()", span="29-29"];
m8_2 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SchedulePoller.feature.cs", label="_client = new Mock<IBackgroundJobClient>()", span="30-30"];
m8_3 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SchedulePoller.feature.cs", label="_instantFactory = new Mock<IScheduleInstantFactory>()", span="31-31"];
m8_4 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SchedulePoller.feature.cs", label="_throttler = new Mock<IThrottler>()", span="32-32"];
m8_67 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", span="125-125"];
m8_28 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioCleanup()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.ScenarioCleanup()", span="66-66"];
m8_168 [cluster="Unk.DoesNotThrow", file="SchedulePoller.feature.cs", label="Entry Unk.DoesNotThrow", span=""];
m8_58 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.PollerWillEnqueueOnlyJobsInTheScheduledState()", span="125-125"];
m8_57 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.FutureJobsAreNotBeingEnqueued()", span="100-100"];
m8_104 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SchedulePoller.feature.cs", label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", span="111-111"];
m8_110 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", color=green, community=0, file="SchedulePoller.feature.cs", label="6: _connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence))))", span="133-137"];
m8_107 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SchedulePoller.feature.cs", label="var jobKey = String.Format(''recurring-job:{0}'', RecurringJobId)", span="120-120"];
m8_109 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SchedulePoller.feature.cs", label="_connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastExecution'') && rj[''LastExecution''] \r\n                        == JobHelper.SerializeDateTime(_instant.Object.UtcTime))))", span="127-131"];
m8_105 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SchedulePoller.feature.cs", label="var scheduler = CreateScheduler()", span="114-114"];
m8_106 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SchedulePoller.feature.cs", label="scheduler.Execute(_token)", span="117-117"];
m8_108 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SchedulePoller.feature.cs", label="_connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == ''job-id'')))", span="122-125"];
m8_111 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SchedulePoller.feature.cs", label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", span="111-111"];
m8_45 [cluster="System.Console.WriteLine()", file="SchedulePoller.feature.cs", label="Entry System.Console.WriteLine()", span="0-0"];
m8_46 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="49-49"];
m8_133 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SchedulePoller.feature.cs", label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", span="141-141"];
m8_134 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SchedulePoller.feature.cs", label="_instant.Setup(x => x.GetMatches(It.IsAny<DateTime?>())).Returns(Enumerable.Empty<DateTime>)", span="143-143"];
m8_135 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SchedulePoller.feature.cs", label="var scheduler = CreateScheduler()", span="144-144"];
m8_136 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SchedulePoller.feature.cs", label="scheduler.Execute(_token)", span="146-146"];
m8_137 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SchedulePoller.feature.cs", label="_client.Verify(\r\n                x => x.Create(It.IsAny<Job>(), It.IsAny<EnqueuedState>()),\r\n                Times.Never)", span="148-150"];
m8_138 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SchedulePoller.feature.cs", label="_connection.Verify(x => x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence))))", span="152-156"];
m8_139 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SchedulePoller.feature.cs", label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", span="141-141"];
m8_83 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="85-85"];
m8_84 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="new RecurringJobScheduler(_storage.Object, _client.Object, null, _throttler.Object)", span="85-85"];
m8_85 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="85-85"];
m8_86 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="SchedulePoller.feature.cs", label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", span="91-91"];
m8_87 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", color=red, community=0, file="SchedulePoller.feature.cs", label="6: var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(_storage.Object, _client.Object, _instantFactory.Object, null))", span="93-95"];
m8_88 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="SchedulePoller.feature.cs", label="Assert.Equal(''throttler'', exception.ParamName)", span="97-97"];
m8_89 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="SchedulePoller.feature.cs", label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", span="91-91"];
m8_90 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="95-95"];
m8_91 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="new RecurringJobScheduler(_storage.Object, _client.Object, _instantFactory.Object, null)", span="95-95"];
m8_47 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.GetConnection()", span="49-49"];
m8_48 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="49-49"];
m8_49 [cluster="Unk.GetConnection", file="SchedulePoller.feature.cs", label="Entry Unk.GetConnection", span=""];
m8_50 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="51-51"];
m8_51 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.GetAllItemsFromSet(''recurring-jobs'')", span="51-51"];
m8_52 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="51-51"];
m8_53 [cluster="Unk.GetAllItemsFromSet", file="SchedulePoller.feature.cs", label="Entry Unk.GetAllItemsFromSet", span=""];
m8_54 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="54-54"];
m8_55 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', RecurringJobId))", span="54-54"];
m8_56 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="54-54"];
m8_5 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SchedulePoller.feature.cs", label="_token = new CancellationTokenSource().Token", span="33-33"];
m8_59 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="57-57"];
m8_60 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.Create(It.IsAny<Job>(), It.IsAny<IState>())", span="57-57"];
m8_61 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="57-57"];
m8_62 [cluster="Unk.Create", color=red, community=0, file="SchedulePoller.feature.cs", label="6: Entry Unk.Create", span=""];
m8_79 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs", label="testRunner.When(''the poller runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="173-173"];
m8_80 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs", label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="175-175"];
m8_81 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs", label="this.ScenarioCleanup()", span="177-177"];
m8_82 [cluster="HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.PollerMoveTheJobToTheFailedStateWhenItCouldNotFindItSType()", span="165-165"];
m8_98 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="SchedulePoller.feature.cs", label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="194-194"];
m8_184 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="SchedulePoller.feature.cs", label="return new RecurringJobScheduler(\r\n                _storage.Object, \r\n                _client.Object, \r\n                _instantFactory.Object,\r\n                _throttler.Object);", span="196-200"];
m8_185 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="SchedulePoller.feature.cs", label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="194-194"];
m8_18 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioTearDown()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.ScenarioTearDown()", span="56-56"];
m8_99 [cluster="Hangfire.Server.RecurringJobScheduler.Execute(System.Threading.CancellationToken)", file="SchedulePoller.feature.cs", label="Entry Hangfire.Server.RecurringJobScheduler.Execute(System.Threading.CancellationToken)", span="56-56"];
m8_14 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SchedulePoller.feature.cs", label="_client.Setup(x => x.Create(It.IsAny<Job>(), It.IsAny<IState>())).Returns(''job-id'')", span="57-57"];
m8_15 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SchedulePoller.feature.cs", label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="27-27"];
m8_16 [cluster="Mock<JobStorage>.cstr", file="SchedulePoller.feature.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m8_26 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioCleanup()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.ScenarioCleanup()", span="66-66"];
m8_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SchedulePoller.feature.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m8_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SchedulePoller.feature.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m8_8 [cluster="Unk.OnFeatureStart", file="SchedulePoller.feature.cs", label="Entry Unk.OnFeatureStart", span=""];
m8_9 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", span="39-39"];
m8_10 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", file="SchedulePoller.feature.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m8_11 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", file="SchedulePoller.feature.cs", label="testRunner = null", span="42-42"];
m8_12 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", span="39-39"];
m8_13 [cluster="Unk.OnFeatureEnd", file="SchedulePoller.feature.cs", label="Entry Unk.OnFeatureEnd", span=""];
m8_27 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SchedulePoller.feature.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m8_20 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="SchedulePoller.feature.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m8_126 [cluster="Unk.SerializeDateTime", file="SchedulePoller.feature.cs", label="Entry Unk.SerializeDateTime", span=""];
m8_75 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="SchedulePoller.feature.cs", label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", span="71-71"];
m8_76 [cluster="lambda expression", color=red, community=0, file="SchedulePoller.feature.cs", label="6: Entry lambda expression", span="75-75"];
m8_77 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="new RecurringJobScheduler(_storage.Object, null, _instantFactory.Object, _throttler.Object)", span="75-75"];
m8_78 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="75-75"];
m8_43 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Console.WriteLine()", span="45-45"];
m8_159 [cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="SchedulePoller.feature.cs", label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68"];
m8_22 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m8_93 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="SchedulePoller.feature.cs", label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", span="101-101"];
m8_94 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="SchedulePoller.feature.cs", label="var scheduler = CreateScheduler()", span="103-103"];
m8_95 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="SchedulePoller.feature.cs", label="scheduler.Execute(_token)", span="105-105"];
m8_96 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="SchedulePoller.feature.cs", label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="107-107"];
m8_97 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="SchedulePoller.feature.cs", label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", span="101-101"];
m8_116 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="124-125"];
m8_127 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="133-137"];
m8_128 [cluster="lambda expression", color=green, community=0, file="SchedulePoller.feature.cs", label="0: x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)))", span="133-137"];
m8_129 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="133-137"];
m8_130 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="135-137"];
m8_161 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.GetMatches(time)", span="168-168"];
m8_69 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Returns false when there are no jobs in the schedule'', ((string[])(null)))", span="150-150"];
m8_121 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastExecution'') && rj[''LastExecution''] \r\n                        == JobHelper.SerializeDateTime(_instant.Object.UtcTime)))", span="127-131"];
m8_124 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="rj.ContainsKey(''LastExecution'') && rj[''LastExecution''] \r\n                        == JobHelper.SerializeDateTime(_instant.Object.UtcTime)", span="130-131"];
m8_131 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)", span="136-137"];
m8_147 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)))", span="152-156"];
m8_150 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)", span="155-156"];
m8_173 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="scheduler.Execute(_token)", span="178-178"];
m8_182 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="scheduler.Execute(_token)", span="191-191"];
m8_113 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == ''job-id''))", span="122-125"];
m8_120 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="127-131"];
m8_102 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="107-107"];
m8_141 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.GetMatches(It.IsAny<DateTime?>())", span="143-143"];
m8_144 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.Create(It.IsAny<Job>(), It.IsAny<EnqueuedState>())", span="149-149"];
m8_170 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="x.GetAllItemsFromSet(It.IsAny<string>())", span="174-174"];
m8_132 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="135-137"];
m8_160 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="168-168"];
m8_162 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="168-168"];
m8_41 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SchedulePoller.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m8_42 [cluster="Unk.Given", file="SchedulePoller.feature.cs", label="Entry Unk.Given", span=""];
m8_68 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="Entry HangFire.Tests.Server.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", span="148-148"];
m8_70 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ReturnsFalseWhenThereAreNoJobsInTheSchedule()", file="SchedulePoller.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="152-152"];
m8_92 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="HangFire.Tests.Server.SchedulePollerFeature", span=""];
m8_101 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="107-107"];
m8_112 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="122-125"];
m8_122 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="127-131"];
m8_123 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="129-131"];
m8_125 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="129-131"];
m8_140 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="143-143"];
m8_143 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="149-149"];
m8_146 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="152-156"];
m8_148 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="152-156"];
m8_149 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="154-156"];
m8_151 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="154-156"];
m8_169 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="174-174"];
m8_172 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="178-178"];
m8_174 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="178-178"];
m8_181 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Entry lambda expression", span="191-191"];
m8_183 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="191-191"];
m8_114 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="122-125"];
m8_103 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="107-107"];
m8_142 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="143-143"];
m8_145 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="149-149"];
m8_171 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="174-174"];
m8_44 [cluster="Unk.Then", file="SchedulePoller.feature.cs", label="Entry Unk.Then", span=""];
m8_117 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == ''job-id''", span="125-125"];
m8_118 [cluster="lambda expression", file="SchedulePoller.feature.cs", label="Exit lambda expression", span="124-125"];
m8_72 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="SchedulePoller.feature.cs", label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", span="71-71"];
m8_73 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="SchedulePoller.feature.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(_storage.Object, null, _instantFactory.Object, _throttler.Object))", span="73-75"];
m8_74 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="SchedulePoller.feature.cs", label="Assert.Equal(''client'', exception.ParamName)", span="77-77"];
m8_23 [cluster="Unk.Returns", file="SchedulePoller.feature.cs", label="Entry Unk.Returns", span=""];
m8_24 [cluster="HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SchedulePoller.feature.cs", label="Exit HangFire.Tests.Server.SchedulePollerFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m8_180 [cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", file="SchedulePoller.feature.cs", label="Entry Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", span="26-26"];
m8_175 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="SchedulePoller.feature.cs", label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", span="182-182"];
m8_176 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="SchedulePoller.feature.cs", label="_recurringJob[''Job''] =\r\n                JobHelper.ToJson(new InvocationData(''SomeType'', ''SomeMethod'', ''Parameters'', ''arguments''))", span="185-186"];
m8_177 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="SchedulePoller.feature.cs", label="var scheduler = CreateScheduler()", span="188-188"];
m8_178 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="SchedulePoller.feature.cs", label="Assert.DoesNotThrow(() => scheduler.Execute(_token))", span="191-191"];
m8_179 [cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="SchedulePoller.feature.cs", label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", span="182-182"];
m8_100 [cluster="Unk.Verify", file="SchedulePoller.feature.cs", label="Entry Unk.Verify", span=""];
m8_119 [cluster="Unk.ContainsKey", file="SchedulePoller.feature.cs", label="Entry Unk.ContainsKey", span=""];
m8_186 [file="SchedulePoller.feature.cs", label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", span=""];
m8_187 [file="SchedulePoller.feature.cs", label=jobKey, span=""];
m8_188 [file="SchedulePoller.feature.cs", label=time, span=""];
m8_189 [file="SchedulePoller.feature.cs", label=scheduler, span=""];
m8_190 [file="SchedulePoller.feature.cs", label=scheduler, span=""];
m9_29 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleDoesNotContainItAnymore()", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.ThenTheScheduleDoesNotContainItAnymore()", span="58-58"];
m9_30 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleDoesNotContainItAnymore()", file="SchedulePollerSteps.cs", label="Assert.IsFalse(Redis.Client.SortedSetContainsItem(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId))", span="60-62"];
m9_31 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleDoesNotContainItAnymore()", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.ThenTheScheduleDoesNotContainItAnymore()", span="58-58"];
m9_7 [cluster="System.DateTime.AddMinutes(double)", file="SchedulePollerSteps.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m9_10 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", span="25-25"];
m9_11 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerSteps.cs", label="Given(String.Format(''a job of the '{0}' type'', type))", span="27-27"];
m9_12 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", color=red, community=0, file="SchedulePollerSteps.cs", label="14: And(''it's state is Scheduled'')", span="28-28"];
m9_13 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerSteps.cs", label="Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddMinutes(-1)))", span="30-33"];
m9_14 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", span="25-25"];
m9_32 [cluster="Unk.SortedSetContainsItem", file="SchedulePollerSteps.cs", label="Entry Unk.SortedSetContainsItem", span=""];
m9_37 [cluster="Unk.IsTrue", file="SchedulePollerSteps.cs", label="Entry Unk.IsTrue", span=""];
m9_15 [cluster="string.Format(string, object)", file="SchedulePollerSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m9_34 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleContainsTheJob()", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.ThenTheScheduleContainsTheJob()", span="66-66"];
m9_35 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleContainsTheJob()", file="SchedulePollerSteps.cs", label="Assert.IsTrue(Redis.Client.SortedSetContainsItem(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId))", span="68-70"];
m9_36 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheScheduleContainsTheJob()", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.ThenTheScheduleContainsTheJob()", span="66-66"];
m9_6 [cluster="Unk.And", file="SchedulePollerSteps.cs", label="Entry Unk.And", span=""];
m9_26 [cluster="HangFire.Server.SchedulePoller.SchedulePoller(IRedisClientsManager, System.TimeSpan)", file="SchedulePollerSteps.cs", label="Entry HangFire.Server.SchedulePoller.SchedulePoller(IRedisClientsManager, System.TimeSpan)", span="21-21"];
m9_8 [cluster="HangFire.JobHelper.ToTimestamp(System.DateTime)", file="SchedulePollerSteps.cs", label="Entry HangFire.JobHelper.ToTimestamp(System.DateTime)", span="52-52"];
m9_27 [cluster="System.TimeSpan.FromSeconds(double)", file="SchedulePollerSteps.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m9_9 [cluster="Unk.AddItemToSortedSet", file="SchedulePollerSteps.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m9_33 [cluster="Unk.IsFalse", file="SchedulePollerSteps.cs", label="Entry Unk.IsFalse", span=""];
m9_41 [cluster="Unk.AreEqual", file="SchedulePollerSteps.cs", label="Entry Unk.AreEqual", span=""];
m9_22 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", span="49-49"];
m9_23 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerSteps.cs", label="var poller = new SchedulePoller(RedisFactory.BasicManager, TimeSpan.FromSeconds(15))", span="51-51"];
m9_24 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerSteps.cs", label="_pollerResult = poller.EnqueueNextScheduledJob()", span="53-53"];
m9_25 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", span="49-49"];
m9_38 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheSchedulePollerReturns(bool)", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.ThenTheSchedulePollerReturns(bool)", span="74-74"];
m9_39 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheSchedulePollerReturns(bool)", file="SchedulePollerSteps.cs", label="Assert.AreEqual(result, _pollerResult)", span="76-76"];
m9_40 [cluster="HangFire.Tests.SchedulePollerSteps.ThenTheSchedulePollerReturns(bool)", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.ThenTheSchedulePollerReturns(bool)", span="74-74"];
m9_21 [cluster="System.DateTime.AddHours(double)", file="SchedulePollerSteps.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m9_16 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", span="37-37"];
m9_17 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerSteps.cs", label="Given(''a job'')", span="39-39"];
m9_18 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", color=red, community=0, file="SchedulePollerSteps.cs", label="8: And(''it's state is Scheduled'')", span="40-40"];
m9_19 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerSteps.cs", label="Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddHours(1)))", span="42-45"];
m9_20 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", span="37-37"];
m9_5 [cluster="Unk.Given", file="SchedulePollerSteps.cs", label="Entry Unk.Given", span=""];
m9_0 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerSteps.cs", label="Entry HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", span="13-13"];
m9_1 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerSteps.cs", label="Given(''a job'')", span="15-15"];
m9_2 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", color=red, community=0, file="SchedulePollerSteps.cs", label="8: And(''it's state is Scheduled'')", span="16-16"];
m9_3 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerSteps.cs", label="Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddMinutes(-1)))", span="18-21"];
m9_4 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerSteps.cs", label="Exit HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", span="13-13"];
m9_28 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SchedulePollerSteps.cs", label="Entry HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", span="29-29"];
m9_42 [file="SchedulePollerSteps.cs", label="HangFire.Tests.SchedulePollerSteps", span=""];
m10_0 [cluster="HangFire.IBackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.IState)", file="StateSteps.cs", label="Entry HangFire.IBackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.IState)", span="41-41"];
m10_1 [cluster="HangFire.IBackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.IState)", file="StateSteps.cs", label="Exit HangFire.IBackgroundJobClient.Create(HangFire.Common.Job, HangFire.States.IState)", span="41-41"];
m11_191 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", span="192-192"];
m11_192 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="Worker.cs", label="_client.Object.Requeue(JobId)", span="194-194"];
m11_193 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="Worker.cs", label="_client.Verify(x => x.ChangeState(JobId, It.IsAny<EnqueuedState>(), null))", span="196-196"];
m11_194 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", span="192-192"];
m11_153 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", span="144-144"];
m11_154 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="Worker.cs", label="_client.Object.ChangeState(''job-id'', _state.Object)", span="146-146"];
m11_155 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="Worker.cs", label="_client.Verify(x => x.ChangeState(''job-id'', _state.Object, null))", span="148-148"];
m11_156 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", span="144-144"];
m11_5 [cluster="Mock<IState>.cstr", file="Worker.cs", label="Entry Mock<IState>.cstr", span=""];
m11_128 [cluster="Hangfire.BackgroundJobClientExtensions.Schedule<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="Worker.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Schedule<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="85-85"];
m11_160 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", span="152-152"];
m11_161 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Delete(null, JobId))", span="154-155"];
m11_162 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Assert.Equal(''client'', exception.ParamName)", span="157-157"];
m11_163 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", span="152-152"];
m11_4 [cluster="Mock<IBackgroundJobClient>.cstr", file="Worker.cs", label="Entry Mock<IBackgroundJobClient>.cstr", span=""];
m11_6 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", span="22-22"];
m11_7 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Create(\r\n                    null, () => StaticMethod(), _state.Object))", span="24-26"];
m11_8 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Assert.Equal(''client'', exception.ParamName)", span="28-28"];
m11_9 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ThrowsAnException_WhenClientIsNull()", span="22-22"];
m11_11 [cluster="Unk.Equal", file="Worker.cs", label="Entry Unk.Equal", span=""];
m11_52 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="58-58"];
m11_53 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod()))", span="60-62"];
m11_54 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Assert.Equal(''client'', exception.ParamName)", span="64-64"];
m11_55 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="58-58"];
m11_199 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", span="200-200"];
m11_200 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="Worker.cs", label="_client.Object.Requeue(JobId, FailedState.StateName)", span="202-202"];
m11_201 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="Worker.cs", label="_client.Verify(x => x.ChangeState(JobId, It.IsAny<EnqueuedState>(), FailedState.StateName))", span="204-204"];
m11_202 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", span="200-200"];
m11_74 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="76-76"];
m11_75 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod()))", span="78-80"];
m11_76 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Assert.Equal(''client'', exception.ParamName)", span="82-82"];
m11_77 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="76-76"];
m11_190 [cluster="Hangfire.BackgroundJobClientExtensions.Requeue(Hangfire.IBackgroundJobClient, string, string)", file="Worker.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Requeue(Hangfire.IBackgroundJobClient, string, string)", span="227-227"];
m11_0 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", span="15-15"];
m11_1 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="Worker.cs", label="_client = new Mock<IBackgroundJobClient>()", span="17-17"];
m11_2 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="Worker.cs", label="_state = new Mock<IState>()", span="18-18"];
m11_3 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.BackgroundJobClientExtensionsFacts()", span="15-15"];
m11_20 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", span="32-32"];
m11_21 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="Worker.cs", label="_client.Object.Create(() => StaticMethod(), _state.Object)", span="34-34"];
m11_22 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="Worker.cs", label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), _state.Object))", span="36-36"];
m11_23 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", span="32-32"];
m11_167 [cluster="Hangfire.BackgroundJobClientExtensions.Delete(Hangfire.IBackgroundJobClient, string)", file="Worker.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Delete(Hangfire.IBackgroundJobClient, string)", span="166-166"];
m11_195 [cluster="Unk.Requeue", file="Worker.cs", label="Entry Unk.Requeue", span=""];
m11_31 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", span="40-40"];
m11_32 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object))", span="42-44"];
m11_33 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Assert.Equal(''client'', exception.ParamName)", span="46-46"];
m11_34 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", span="40-40"];
m11_103 [cluster="Hangfire.BackgroundJobClientExtensions.Schedule(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", file="Worker.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Schedule(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", span="68-68"];
m11_10 [cluster="Unk.>", file="Worker.cs", label="Entry Unk.>", span=""];
m11_63 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="68-68"];
m11_64 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="Worker.cs", label="_client.Object.Enqueue(() => StaticMethod())", span="70-70"];
m11_65 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="Worker.cs", label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="72-72"];
m11_66 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="68-68"];
m11_107 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="104-104"];
m11_108 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="Worker.cs", label="_client.Object.Schedule(() => StaticMethod(), TimeSpan.FromDays(1))", span="106-106"];
m11_109 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="Worker.cs", label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="108-110"];
m11_110 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="104-104"];
m11_95 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="94-94"];
m11_96 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1)))", span="96-98"];
m11_97 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Assert.Equal(''client'', exception.ParamName)", span="100-100"];
m11_98 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="94-94"];
m11_81 [cluster="Hangfire.BackgroundJobClientExtensions.Enqueue<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", file="Worker.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Enqueue<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", span="53-53"];
m11_41 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="211-211"];
m11_207 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="211-211"];
m11_19 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="207-207"];
m11_206 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="207-207"];
m11_176 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", span="172-172"];
m11_177 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="Worker.cs", label="_client.Object.Delete(JobId, FailedState.StateName)", span="174-174"];
m11_178 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="Worker.cs", label="_client.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                FailedState.StateName))", span="176-179"];
m11_179 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", span="172-172"];
m11_102 [cluster="System.TimeSpan.FromDays(double)", file="Worker.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m11_67 [cluster="Unk.Enqueue", file="Worker.cs", label="Entry Unk.Enqueue", span=""];
m11_152 [cluster="Unk.ChangeState", file="Worker.cs", label="Entry Unk.ChangeState", span=""];
m11_132 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="124-124"];
m11_133 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="Worker.cs", label="_client.Object.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="126-127"];
m11_134 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="Worker.cs", label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="129-131"];
m11_135 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="124-124"];
m11_168 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", span="161-161"];
m11_169 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="Worker.cs", label="_client.Object.Delete(JobId)", span="163-163"];
m11_170 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="Worker.cs", label="_client.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                null))", span="165-168"];
m11_171 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", span="161-161"];
m11_85 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="86-86"];
m11_86 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="Worker.cs", label="_client.Object.Enqueue<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod())", span="88-88"];
m11_87 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="Worker.cs", label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="90-90"];
m11_88 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="86-86"];
m11_59 [cluster="Hangfire.BackgroundJobClientExtensions.Enqueue(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", file="Worker.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Enqueue(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", span="35-35"];
m11_203 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="204-204"];
m11_12 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="25-26"];
m11_13 [cluster="lambda expression", file="Worker.cs", label="BackgroundJobClientExtensions.Create(\r\n                    null, () => StaticMethod(), _state.Object)", span="25-26"];
m11_14 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="25-26"];
m11_16 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="26-26"];
m11_17 [cluster="lambda expression", file="Worker.cs", label="StaticMethod()", span="26-26"];
m11_18 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="26-26"];
m11_25 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="34-34"];
m11_28 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="36-36"];
m11_26 [cluster="lambda expression", file="Worker.cs", label="StaticMethod()", span="34-34"];
m11_27 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="34-34"];
m11_29 [cluster="lambda expression", file="Worker.cs", label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="36-36"];
m11_30 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="36-36"];
m11_35 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="43-44"];
m11_36 [cluster="lambda expression", file="Worker.cs", label="BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object)", span="43-44"];
m11_37 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="43-44"];
m11_38 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="44-44"];
m11_39 [cluster="lambda expression", file="Worker.cs", label="x.InstanceMethod()", span="44-44"];
m11_40 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="44-44"];
m11_46 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="52-52"];
m11_49 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="54-54"];
m11_47 [cluster="lambda expression", file="Worker.cs", label="x.InstanceMethod()", span="52-52"];
m11_48 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="52-52"];
m11_50 [cluster="lambda expression", file="Worker.cs", label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="54-54"];
m11_51 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="54-54"];
m11_56 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="61-62"];
m11_57 [cluster="lambda expression", file="Worker.cs", label="BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod())", span="61-62"];
m11_58 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="61-62"];
m11_60 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="62-62"];
m11_61 [cluster="lambda expression", file="Worker.cs", label="StaticMethod()", span="62-62"];
m11_62 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="62-62"];
m11_68 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="70-70"];
m11_71 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="72-72"];
m11_69 [cluster="lambda expression", file="Worker.cs", label="StaticMethod()", span="70-70"];
m11_70 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="70-70"];
m11_72 [cluster="lambda expression", file="Worker.cs", label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="72-72"];
m11_73 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="72-72"];
m11_78 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="79-80"];
m11_79 [cluster="lambda expression", file="Worker.cs", label="BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod())", span="79-80"];
m11_80 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="79-80"];
m11_82 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="80-80"];
m11_83 [cluster="lambda expression", file="Worker.cs", label="x.InstanceMethod()", span="80-80"];
m11_84 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="80-80"];
m11_89 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="88-88"];
m11_92 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="90-90"];
m11_90 [cluster="lambda expression", file="Worker.cs", label="x.InstanceMethod()", span="88-88"];
m11_91 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="88-88"];
m11_93 [cluster="lambda expression", file="Worker.cs", label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="90-90"];
m11_94 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="90-90"];
m11_99 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="97-98"];
m11_100 [cluster="lambda expression", file="Worker.cs", label="BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1))", span="97-98"];
m11_101 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="97-98"];
m11_104 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="98-98"];
m11_105 [cluster="lambda expression", file="Worker.cs", label="StaticMethod()", span="98-98"];
m11_106 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="98-98"];
m11_112 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="106-106"];
m11_115 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="108-110"];
m11_113 [cluster="lambda expression", file="Worker.cs", label="StaticMethod()", span="106-106"];
m11_114 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="106-106"];
m11_116 [cluster="lambda expression", file="Worker.cs", label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="108-110"];
m11_117 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="108-110"];
m11_118 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="110-110"];
m11_119 [cluster="lambda expression", file="Worker.cs", label="state.EnqueueAt > DateTime.UtcNow", span="110-110"];
m11_120 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="110-110"];
m11_125 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="117-118"];
m11_126 [cluster="lambda expression", file="Worker.cs", label="BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="117-118"];
m11_127 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="117-118"];
m11_129 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="118-118"];
m11_130 [cluster="lambda expression", file="Worker.cs", label="x.InstanceMethod()", span="118-118"];
m11_131 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="118-118"];
m11_136 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="127-127"];
m11_139 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="129-131"];
m11_137 [cluster="lambda expression", file="Worker.cs", label="x.InstanceMethod()", span="127-127"];
m11_138 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="127-127"];
m11_140 [cluster="lambda expression", file="Worker.cs", label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="129-131"];
m11_141 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="129-131"];
m11_142 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="131-131"];
m11_143 [cluster="lambda expression", file="Worker.cs", label="state.EnqueueAt > DateTime.UtcNow", span="131-131"];
m11_144 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="131-131"];
m11_149 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="138-138"];
m11_150 [cluster="lambda expression", file="Worker.cs", label="BackgroundJobClientExtensions.ChangeState(null, ''job-id'', _state.Object)", span="138-138"];
m11_151 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="138-138"];
m11_157 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="148-148"];
m11_158 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(''job-id'', _state.Object, null)", span="148-148"];
m11_159 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="148-148"];
m11_164 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="155-155"];
m11_165 [cluster="lambda expression", file="Worker.cs", label="BackgroundJobClientExtensions.Delete(null, JobId)", span="155-155"];
m11_166 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="155-155"];
m11_173 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="165-168"];
m11_174 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                null)", span="165-168"];
m11_175 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="165-168"];
m11_180 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="176-179"];
m11_181 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                FailedState.StateName)", span="176-179"];
m11_182 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="176-179"];
m11_187 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="186-186"];
m11_188 [cluster="lambda expression", file="Worker.cs", label="BackgroundJobClientExtensions.Requeue(null, JobId, FailedState.StateName)", span="186-186"];
m11_189 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="186-186"];
m11_196 [cluster="lambda expression", file="Worker.cs", label="Entry lambda expression", span="196-196"];
m11_197 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(JobId, It.IsAny<EnqueuedState>(), null)", span="196-196"];
m11_198 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="196-196"];
m11_204 [cluster="lambda expression", file="Worker.cs", label="x.ChangeState(JobId, It.IsAny<EnqueuedState>(), FailedState.StateName)", span="204-204"];
m11_205 [cluster="lambda expression", file="Worker.cs", label="Exit lambda expression", span="204-204"];
m11_42 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="50-50"];
m11_43 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="Worker.cs", label="_client.Object.Create<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod(), _state.Object)", span="52-52"];
m11_44 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="Worker.cs", label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), _state.Object))", span="54-54"];
m11_45 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="50-50"];
m11_172 [cluster="Unk.Delete", file="Worker.cs", label="Entry Unk.Delete", span=""];
m11_145 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", span="135-135"];
m11_146 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.ChangeState(null, ''job-id'', _state.Object))", span="137-138"];
m11_147 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Assert.Equal(''client'', exception.ParamName)", span="140-140"];
m11_148 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", span="135-135"];
m11_121 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="114-114"];
m11_122 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1)))", span="116-118"];
m11_123 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Assert.Equal(''client'', exception.ParamName)", span="120-120"];
m11_124 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="114-114"];
m11_111 [cluster="Unk.Schedule", file="Worker.cs", label="Entry Unk.Schedule", span=""];
m11_15 [cluster="Unk.Create", file="Worker.cs", label="Entry Unk.Create", span=""];
m11_183 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", span="183-183"];
m11_184 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Requeue(null, JobId, FailedState.StateName))", span="185-186"];
m11_185 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Assert.Equal(''client'', exception.ParamName)", span="188-188"];
m11_186 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="Worker.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", span="183-183"];
m11_24 [cluster="Unk.Verify", file="Worker.cs", label="Entry Unk.Verify", span=""];
m11_208 [file="Worker.cs", label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", span=""];
n13 -> n3  [color=darkseagreen4, key=1, label="HangFire.States.ProcessingState", style=dashed];
n13 -> n4  [color=darkseagreen4, key=1, label="HangFire.States.ProcessingState", style=dashed];
n13 -> n9  [color=darkseagreen4, key=1, label="HangFire.States.ProcessingState", style=dashed];
n0 -> n1  [key=0, style=solid];
n0 -> n3  [color=darkseagreen4, key=1, label=string, style=dashed];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=0, style=solid];
n1 -> n6  [key=2, style=dotted];
n3 -> n4  [key=0, style=solid];
n2 -> n5  [key=0, style=solid];
n2 -> n7  [key=2, style=dotted];
n4 -> n5  [key=0, style=solid];
n5 -> n0  [color=blue, key=0, style=bold];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=2, style=dotted];
n9 -> n12  [key=2, style=dotted];
n10 -> n8  [color=blue, key=0, style=bold];
m0_145 -> m0_146  [key=0, style=solid];
m0_146 -> m0_20  [key=2, style=dotted];
m0_146 -> m0_147  [key=0, style=solid];
m0_147 -> m0_145  [color=blue, key=0, style=bold];
m0_136 -> m0_137  [key=0, style=solid];
m0_137 -> m0_24  [key=2, style=dotted];
m0_137 -> m0_138  [key=0, style=solid];
m0_138 -> m0_136  [color=blue, key=0, style=bold];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_24  [key=2, style=dotted];
m0_48 -> m0_49  [color=red, key=0, style=solid];
m0_48 -> m0_52  [key=2, style=dotted];
m0_48 -> m0_53  [key=2, style=dotted];
m0_48 -> m0_46  [color=blue, key=0, style=bold];
m0_49 -> m0_50  [color=red, key=0, style=solid];
m0_49 -> m0_54  [color=red, key=2, style=dotted];
m0_49 -> m0_55  [color=red, key=1, label="lambda expression", style=dashed];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_54  [key=2, style=dotted];
m0_50 -> m0_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_50 -> m0_20  [key=2, style=dotted];
m0_51 -> m0_47  [color=blue, key=0, style=bold];
m0_51 -> m0_49  [color=blue, key=0, style=bold];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_37  [color=darkorchid, key=3, label="Parameter variable string jobId", style=bold];
m0_97 -> m0_98  [key=0, style=solid];
m0_98 -> m0_20  [key=2, style=dotted];
m0_98 -> m0_99  [key=0, style=solid];
m0_99 -> m0_97  [color=blue, key=0, style=bold];
m0_154 -> m0_155  [key=0, style=solid];
m0_155 -> m0_24  [key=2, style=dotted];
m0_155 -> m0_156  [key=0, style=solid];
m0_156 -> m0_154  [color=blue, key=0, style=bold];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_6  [key=2, style=dotted];
m0_1 -> m0_7  [key=2, style=dotted];
m0_1 -> m0_8  [key=2, style=dotted];
m0_1 -> m0_9  [key=2, style=dotted];
m0_1 -> m0_10  [key=2, style=dotted];
m0_1 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_11  [key=2, style=dotted];
m0_2 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_7  [key=2, style=dotted];
m0_2 -> m0_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_2 -> m0_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_12  [key=2, style=dotted];
m0_3 -> m0_8  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_13  [key=2, style=dotted];
m0_4 -> m0_14  [key=2, style=dotted];
m0_4 -> m0_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_0  [color=blue, key=0, style=bold];
m0_5 -> m0_0  [color=blue, key=0, style=bold];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_21  [color=blue, key=0, style=bold];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_18  [key=2, style=dotted];
m0_24 -> m0_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_24 -> m0_187  [key=0, style=solid];
m0_24 -> m0_190  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_24 -> m0_192  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_24 -> m0_208  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_24 -> m0_193  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_24 -> m0_212  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_25 -> m0_23  [color=blue, key=0, style=bold];
m0_25 -> m0_26  [key=0, style=solid];
m0_106 -> m0_107  [key=0, style=solid];
m0_107 -> m0_24  [key=2, style=dotted];
m0_107 -> m0_108  [key=0, style=solid];
m0_108 -> m0_106  [color=blue, key=0, style=bold];
m0_118 -> m0_119  [key=0, style=solid];
m0_119 -> m0_24  [key=2, style=dotted];
m0_119 -> m0_120  [key=0, style=solid];
m0_120 -> m0_118  [color=blue, key=0, style=bold];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_28  [color=blue, key=0, style=bold];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_18  [key=2, style=dotted];
m0_31 -> m0_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_34  [key=2, style=dotted];
m0_32 -> m0_20  [key=2, style=dotted];
m0_33 -> m0_30  [color=blue, key=0, style=bold];
m0_33 -> m0_31  [color=blue, key=0, style=bold];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_15  [color=blue, key=0, style=bold];
m0_18 -> m0_20  [key=2, style=dotted];
m0_18 -> m0_19  [key=0, style=solid];
m0_19 -> m0_17  [color=blue, key=0, style=bold];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_71  [color=blue, key=0, style=bold];
m0_74 -> m0_20  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_75 -> m0_73  [color=blue, key=0, style=bold];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_52  [key=2, style=dotted];
m0_75 -> m0_53  [key=2, style=dotted];
m0_166 -> m0_167  [key=0, style=solid];
m0_167 -> m0_24  [key=2, style=dotted];
m0_167 -> m0_168  [key=0, style=solid];
m0_168 -> m0_166  [color=blue, key=0, style=bold];
m0_127 -> m0_128  [key=0, style=solid];
m0_128 -> m0_20  [key=2, style=dotted];
m0_128 -> m0_129  [key=0, style=solid];
m0_129 -> m0_127  [color=blue, key=0, style=bold];
m0_112 -> m0_113  [key=0, style=solid];
m0_113 -> m0_24  [key=2, style=dotted];
m0_113 -> m0_114  [key=0, style=solid];
m0_114 -> m0_112  [color=blue, key=0, style=bold];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_35  [color=blue, key=0, style=bold];
m0_38 -> m0_39  [key=0, style=solid];
m0_38 -> m0_20  [key=2, style=dotted];
m0_39 -> m0_37  [color=blue, key=0, style=bold];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_29  [key=2, style=dotted];
m0_39 -> m0_41  [color=darkseagreen4, key=1, label=manager, style=dashed];
m0_53 -> m0_54  [color=green, key=0, style=solid];
m0_53 -> m0_24  [color=green, key=2, style=dotted];
m0_88 -> m0_89  [key=0, style=solid];
m0_89 -> m0_24  [key=2, style=dotted];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_94  [color=darkorchid, key=3, label="method methodReturn bool TimedOutByCheckedTime", style=bold];
m0_90 -> m0_88  [color=blue, key=0, style=bold];
m0_58 -> m0_59  [key=0, style=solid];
m0_59 -> m0_24  [key=2, style=dotted];
m0_59 -> m0_60  [key=0, style=solid];
m0_60 -> m0_58  [color=blue, key=0, style=bold];
m0_60 -> m0_61  [key=0, style=solid];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_54  [key=2, style=dotted];
m0_76 -> m0_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_77 -> m0_24  [key=2, style=dotted];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_54  [key=2, style=dotted];
m0_77 -> m0_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_78 -> m0_76  [color=blue, key=0, style=bold];
m0_78 -> m0_74  [color=blue, key=0, style=bold];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_38  [color=blue, key=0, style=bold];
m0_44 -> m0_20  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_45 -> m0_43  [color=blue, key=0, style=bold];
m0_85 -> m0_86  [key=0, style=solid];
m0_85 -> m0_83  [color=blue, key=0, style=bold];
m0_86 -> m0_20  [key=2, style=dotted];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_1  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_2  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_3  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_4  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_21  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_31  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_36  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_39  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_40  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_48  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_49  [color=red, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_50  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_63  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_64  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_65  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_75  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_76  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_86 -> m0_77  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m0_87 -> m0_85  [color=blue, key=0, style=bold];
m0_139 -> m0_140  [key=0, style=solid];
m0_140 -> m0_20  [key=2, style=dotted];
m0_140 -> m0_141  [key=0, style=solid];
m0_141 -> m0_139  [color=blue, key=0, style=bold];
m0_184 -> m0_185  [key=0, style=solid];
m0_185 -> m0_24  [key=2, style=dotted];
m0_185 -> m0_186  [key=0, style=solid];
m0_186 -> m0_184  [color=blue, key=0, style=bold];
m0_115 -> m0_116  [key=0, style=solid];
m0_116 -> m0_20  [key=2, style=dotted];
m0_116 -> m0_117  [key=0, style=solid];
m0_117 -> m0_115  [color=blue, key=0, style=bold];
m0_71 -> m0_24  [key=2, style=dotted];
m0_71 -> m0_72  [key=0, style=solid];
m0_72 -> m0_70  [color=blue, key=0, style=bold];
m0_72 -> m0_73  [key=0, style=solid];
m0_79 -> m0_80  [key=0, style=solid];
m0_80 -> m0_20  [key=2, style=dotted];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_82  [key=2, style=dotted];
m0_81 -> m0_79  [color=blue, key=0, style=bold];
m0_103 -> m0_104  [key=0, style=solid];
m0_104 -> m0_20  [key=2, style=dotted];
m0_104 -> m0_105  [key=0, style=solid];
m0_105 -> m0_103  [color=blue, key=0, style=bold];
m0_82 -> m0_83  [key=0, style=solid];
m0_94 -> m0_95  [key=0, style=solid];
m0_95 -> m0_24  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_96 -> m0_94  [color=blue, key=0, style=bold];
m0_196 -> m0_194  [key=0, style=solid];
m0_196 -> m0_206  [key=2, style=dotted];
m0_187 -> m0_188  [key=0, style=solid];
m0_187 -> m0_195  [color=darkseagreen4, key=1, label=type, style=dashed];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_193  [key=0, style=solid];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_201  [key=2, style=dotted];
m0_192 -> m0_202  [key=2, style=dotted];
m0_193 -> m0_194  [key=0, style=solid];
m0_193 -> m0_203  [key=2, style=dotted];
m0_193 -> m0_202  [key=2, style=dotted];
m0_195 -> m0_196  [key=0, style=solid];
m0_195 -> m0_204  [key=2, style=dotted];
m0_195 -> m0_205  [key=2, style=dotted];
m0_194 -> m0_197  [key=0, style=solid];
m0_194 -> m0_195  [key=0, style=solid];
m0_188 -> m0_195  [color=darkseagreen4, key=1, label=methodInfo, style=dashed];
m0_188 -> m0_189  [key=0, style=solid];
m0_188 -> m0_198  [key=2, style=dotted];
m0_189 -> m0_190  [key=0, style=solid];
m0_189 -> m0_192  [color=darkseagreen4, key=1, label=serializationMethods, style=dashed];
m0_189 -> m0_193  [color=darkseagreen4, key=1, label=serializationMethods, style=dashed];
m0_189 -> m0_194  [color=darkseagreen4, key=1, label=serializationMethods, style=dashed];
m0_189 -> m0_199  [key=2, style=dotted];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_208  [color=darkseagreen4, key=1, label=converter, style=dashed];
m0_191 -> m0_200  [key=2, style=dotted];
m0_197 -> m0_24  [color=blue, key=0, style=bold];
m0_211 -> m0_212  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_0  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=2, style=dotted];
m0_16 -> m0_19  [key=2, style=dotted];
m0_16 -> m0_14  [color=blue, key=0, style=bold];
m0_21 -> m0_22  [key=0, style=solid];
m0_22 -> m0_20  [color=blue, key=0, style=bold];
m0_22 -> m0_24  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_20  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_29  [key=2, style=dotted];
m0_27 -> m0_25  [color=blue, key=0, style=bold];
m0_28 -> m0_26  [color=blue, key=0, style=bold];
m0_28 -> m0_29  [key=0, style=solid];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_24  [key=2, style=dotted];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_29  [key=2, style=dotted];
m0_36 -> m0_34  [color=blue, key=0, style=bold];
m0_55 -> m0_56  [color=red, key=0, style=solid];
m0_56 -> m0_57  [color=red, key=0, style=solid];
m0_56 -> m0_58  [color=red, key=2, style=dotted];
m0_56 -> m0_20  [key=2, style=dotted];
m0_57 -> m0_55  [color=blue, key=0, style=bold];
m0_61 -> m0_59  [color=blue, key=0, style=bold];
m0_61 -> m0_62  [key=0, style=solid];
m0_67 -> m0_68  [key=0, style=solid];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_70  [key=2, style=dotted];
m0_68 -> m0_20  [key=2, style=dotted];
m0_69 -> m0_67  [color=blue, key=0, style=bold];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_24  [key=2, style=dotted];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_82  [key=2, style=dotted];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_210  [key=2, style=dotted];
m0_212 -> m0_213  [key=0, style=solid];
m0_212 -> m0_214  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid];
m0_207 -> m0_208  [key=0, style=solid];
m0_209 -> m0_207  [color=blue, key=0, style=bold];
m0_213 -> m0_211  [color=blue, key=0, style=bold];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_20  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_52  [key=2, style=dotted];
m0_63 -> m0_53  [key=2, style=dotted];
m0_63 -> m0_61  [color=blue, key=0, style=bold];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_54  [key=2, style=dotted];
m0_64 -> m0_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_54  [key=2, style=dotted];
m0_65 -> m0_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_65 -> m0_24  [key=2, style=dotted];
m0_66 -> m0_62  [color=blue, key=0, style=bold];
m0_66 -> m0_64  [color=blue, key=0, style=bold];
m0_121 -> m0_122  [key=0, style=solid];
m0_122 -> m0_20  [key=2, style=dotted];
m0_122 -> m0_123  [key=0, style=solid];
m0_123 -> m0_121  [color=blue, key=0, style=bold];
m0_175 -> m0_176  [key=0, style=solid];
m0_176 -> m0_20  [key=2, style=dotted];
m0_176 -> m0_177  [key=0, style=solid];
m0_177 -> m0_175  [color=blue, key=0, style=bold];
m0_34 -> m0_35  [key=0, style=solid];
m0_130 -> m0_131  [key=0, style=solid];
m0_131 -> m0_24  [key=2, style=dotted];
m0_131 -> m0_132  [key=0, style=solid];
m0_132 -> m0_130  [color=blue, key=0, style=bold];
m0_124 -> m0_125  [key=0, style=solid];
m0_125 -> m0_24  [key=2, style=dotted];
m0_125 -> m0_126  [key=0, style=solid];
m0_126 -> m0_124  [color=blue, key=0, style=bold];
m0_46 -> m0_47  [key=0, style=solid];
m0_52 -> m0_53  [color=green, key=0, style=solid];
m0_54 -> m0_52  [color=blue, key=0, style=bold];
m0_178 -> m0_179  [key=0, style=solid];
m0_179 -> m0_24  [key=2, style=dotted];
m0_179 -> m0_180  [key=0, style=solid];
m0_180 -> m0_178  [color=blue, key=0, style=bold];
m0_169 -> m0_170  [key=0, style=solid];
m0_170 -> m0_20  [key=2, style=dotted];
m0_170 -> m0_171  [key=0, style=solid];
m0_171 -> m0_169  [color=blue, key=0, style=bold];
m0_100 -> m0_101  [key=0, style=solid];
m0_101 -> m0_24  [key=2, style=dotted];
m0_101 -> m0_102  [key=0, style=solid];
m0_102 -> m0_100  [color=blue, key=0, style=bold];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_44  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_45  [key=2, style=dotted];
m0_41 -> m0_24  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_46  [key=2, style=dotted];
m0_42 -> m0_40  [color=blue, key=0, style=bold];
m0_91 -> m0_92  [key=0, style=solid];
m0_92 -> m0_20  [key=2, style=dotted];
m0_92 -> m0_93  [key=0, style=solid];
m0_93 -> m0_91  [color=blue, key=0, style=bold];
m0_151 -> m0_152  [key=0, style=solid];
m0_152 -> m0_20  [key=2, style=dotted];
m0_152 -> m0_153  [key=0, style=solid];
m0_153 -> m0_151  [color=blue, key=0, style=bold];
m0_157 -> m0_158  [key=0, style=solid];
m0_158 -> m0_20  [key=2, style=dotted];
m0_158 -> m0_159  [key=0, style=solid];
m0_159 -> m0_157  [color=blue, key=0, style=bold];
m0_109 -> m0_110  [key=0, style=solid];
m0_110 -> m0_20  [key=2, style=dotted];
m0_110 -> m0_111  [key=0, style=solid];
m0_111 -> m0_109  [color=blue, key=0, style=bold];
m0_172 -> m0_173  [key=0, style=solid];
m0_173 -> m0_24  [key=2, style=dotted];
m0_173 -> m0_174  [key=0, style=solid];
m0_174 -> m0_172  [color=blue, key=0, style=bold];
m0_163 -> m0_164  [key=0, style=solid];
m0_164 -> m0_20  [key=2, style=dotted];
m0_164 -> m0_165  [key=0, style=solid];
m0_165 -> m0_163  [color=blue, key=0, style=bold];
m0_142 -> m0_143  [key=0, style=solid];
m0_143 -> m0_24  [key=2, style=dotted];
m0_143 -> m0_144  [key=0, style=solid];
m0_144 -> m0_142  [color=blue, key=0, style=bold];
m0_148 -> m0_149  [key=0, style=solid];
m0_149 -> m0_24  [key=2, style=dotted];
m0_149 -> m0_150  [key=0, style=solid];
m0_150 -> m0_148  [color=blue, key=0, style=bold];
m0_181 -> m0_182  [key=0, style=solid];
m0_182 -> m0_20  [key=2, style=dotted];
m0_182 -> m0_183  [key=0, style=solid];
m0_183 -> m0_181  [color=blue, key=0, style=bold];
m0_133 -> m0_134  [key=0, style=solid];
m0_134 -> m0_20  [key=2, style=dotted];
m0_134 -> m0_135  [key=0, style=solid];
m0_135 -> m0_133  [color=blue, key=0, style=bold];
m0_29 -> m0_24  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_160 -> m0_161  [key=0, style=solid];
m0_161 -> m0_24  [key=2, style=dotted];
m0_161 -> m0_162  [key=0, style=solid];
m0_162 -> m0_160  [color=blue, key=0, style=bold];
m0_215 -> m0_53  [color=green, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_3  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_22  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_29  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_35  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_41  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_47  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_59  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_65  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_71  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_77  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_83  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_89  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_95  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_101  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_107  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_113  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_119  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_125  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_131  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_137  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_143  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_149  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_155  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_161  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_167  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_173  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_179  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_185  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_215 -> m0_196  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
m0_216 -> m0_208  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_216 -> m0_212  [color=darkseagreen4, key=1, label=T, style=dashed];
m0_217 -> m0_208  [color=darkseagreen4, key=1, label=converter, style=dashed];
m1_78 -> m1_79  [key=0, style=solid];
m1_82 -> m1_53  [key=2, style=dotted];
m1_82 -> m1_83  [key=0, style=solid];
m1_85 -> m1_53  [key=2, style=dotted];
m1_85 -> m1_86  [key=0, style=solid];
m1_86 -> m1_53  [key=2, style=dotted];
m1_86 -> m1_87  [key=0, style=solid];
m1_87 -> m1_53  [key=2, style=dotted];
m1_87 -> m1_88  [key=0, style=solid];
m1_80 -> m1_22  [key=2, style=dotted];
m1_80 -> m1_81  [key=0, style=solid];
m1_79 -> m1_38  [key=2, style=dotted];
m1_79 -> m1_80  [key=0, style=solid];
m1_81 -> m1_39  [key=2, style=dotted];
m1_81 -> m1_82  [key=0, style=solid];
m1_83 -> m1_40  [key=2, style=dotted];
m1_83 -> m1_84  [key=0, style=solid];
m1_84 -> m1_85  [key=0, style=solid];
m1_84 -> m1_41  [key=2, style=dotted];
m1_88 -> m1_89  [key=0, style=solid];
m1_88 -> m1_26  [key=2, style=dotted];
m1_89 -> m1_78  [color=blue, key=0, style=bold];
m1_113 -> m1_114  [color=green, key=0, style=solid];
m1_114 -> m1_115  [color=green, key=0, style=solid];
m1_114 -> m1_38  [color=green, key=2, style=dotted];
m1_115 -> m1_22  [key=2, style=dotted];
m1_115 -> m1_116  [key=0, style=solid];
m1_116 -> m1_53  [key=2, style=dotted];
m1_116 -> m1_117  [key=0, style=solid];
m1_117 -> m1_53  [key=2, style=dotted];
m1_117 -> m1_118  [key=0, style=solid];
m1_118 -> m1_40  [key=2, style=dotted];
m1_118 -> m1_119  [key=0, style=solid];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_26  [key=2, style=dotted];
m1_119 -> m1_120  [key=0, style=solid];
m1_119 -> m1_41  [key=2, style=dotted];
m1_121 -> m1_113  [color=blue, key=0, style=bold];
m1_122 -> m1_123  [key=0, style=solid];
m1_126 -> m1_53  [key=2, style=dotted];
m1_126 -> m1_127  [key=0, style=solid];
m1_129 -> m1_53  [key=2, style=dotted];
m1_129 -> m1_130  [key=0, style=solid];
m1_124 -> m1_22  [key=2, style=dotted];
m1_124 -> m1_125  [key=0, style=solid];
m1_123 -> m1_38  [key=2, style=dotted];
m1_123 -> m1_124  [key=0, style=solid];
m1_125 -> m1_39  [key=2, style=dotted];
m1_125 -> m1_126  [key=0, style=solid];
m1_127 -> m1_40  [key=2, style=dotted];
m1_127 -> m1_128  [key=0, style=solid];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_41  [key=2, style=dotted];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_26  [key=2, style=dotted];
m1_131 -> m1_122  [color=blue, key=0, style=bold];
m1_22 -> m1_114  [color=green, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_31  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m1_22 -> m1_43  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m1_22 -> m1_55  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m1_22 -> m1_66  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m1_22 -> m1_79  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m1_22 -> m1_91  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m1_22 -> m1_102  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m1_22 -> m1_123  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m1_22 -> m1_133  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_25  [key=2, style=dotted];
m1_24 -> m1_22  [color=blue, key=0, style=bold];
m1_26 -> m1_27  [key=0, style=solid];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_29  [key=2, style=dotted];
m1_28 -> m1_26  [color=blue, key=0, style=bold];
m1_132 -> m1_133  [key=0, style=solid];
m1_136 -> m1_137  [color=green, key=0, style=solid];
m1_136 -> m1_53  [color=green, key=2, style=dotted];
m1_135 -> m1_136  [color=green, key=0, style=solid];
m1_135 -> m1_39  [key=2, style=dotted];
m1_137 -> m1_53  [key=2, style=dotted];
m1_137 -> m1_138  [key=0, style=solid];
m1_134 -> m1_22  [key=2, style=dotted];
m1_134 -> m1_135  [key=0, style=solid];
m1_133 -> m1_38  [key=2, style=dotted];
m1_133 -> m1_134  [key=0, style=solid];
m1_138 -> m1_139  [key=0, style=solid];
m1_138 -> m1_40  [key=2, style=dotted];
m1_141 -> m1_142  [key=0, style=solid];
m1_141 -> m1_26  [key=2, style=dotted];
m1_139 -> m1_140  [key=0, style=solid];
m1_139 -> m1_41  [key=2, style=dotted];
m1_140 -> m1_141  [key=0, style=solid];
m1_140 -> m1_112  [key=2, style=dotted];
m1_142 -> m1_132  [color=blue, key=0, style=bold];
m1_90 -> m1_91  [key=0, style=solid];
m1_94 -> m1_95  [color=green, key=0, style=solid];
m1_94 -> m1_53  [color=green, key=2, style=dotted];
m1_93 -> m1_94  [color=green, key=0, style=solid];
m1_93 -> m1_39  [key=2, style=dotted];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_53  [key=2, style=dotted];
m1_92 -> m1_93  [key=0, style=solid];
m1_92 -> m1_22  [key=2, style=dotted];
m1_96 -> m1_97  [key=0, style=solid];
m1_96 -> m1_40  [key=2, style=dotted];
m1_98 -> m1_53  [key=2, style=dotted];
m1_98 -> m1_99  [key=0, style=solid];
m1_91 -> m1_38  [key=2, style=dotted];
m1_91 -> m1_92  [key=0, style=solid];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_41  [key=2, style=dotted];
m1_99 -> m1_100  [key=0, style=solid];
m1_99 -> m1_26  [key=2, style=dotted];
m1_100 -> m1_90  [color=blue, key=0, style=bold];
m1_101 -> m1_102  [key=0, style=solid];
m1_105 -> m1_106  [color=green, key=0, style=solid];
m1_105 -> m1_53  [color=green, key=2, style=dotted];
m1_104 -> m1_105  [color=green, key=0, style=solid];
m1_104 -> m1_39  [key=2, style=dotted];
m1_106 -> m1_53  [key=2, style=dotted];
m1_106 -> m1_107  [key=0, style=solid];
m1_103 -> m1_104  [key=0, style=solid];
m1_103 -> m1_22  [key=2, style=dotted];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_40  [key=2, style=dotted];
m1_102 -> m1_38  [key=2, style=dotted];
m1_102 -> m1_103  [key=0, style=solid];
m1_108 -> m1_109  [key=0, style=solid];
m1_108 -> m1_41  [key=2, style=dotted];
m1_110 -> m1_111  [key=0, style=solid];
m1_110 -> m1_26  [key=2, style=dotted];
m1_109 -> m1_110  [key=0, style=solid];
m1_109 -> m1_112  [key=2, style=dotted];
m1_111 -> m1_101  [color=blue, key=0, style=bold];
m1_42 -> m1_43  [key=0, style=solid];
m1_46 -> m1_53  [key=2, style=dotted];
m1_46 -> m1_47  [key=0, style=solid];
m1_49 -> m1_53  [key=2, style=dotted];
m1_49 -> m1_50  [key=0, style=solid];
m1_50 -> m1_53  [key=2, style=dotted];
m1_50 -> m1_51  [key=0, style=solid];
m1_44 -> m1_22  [key=2, style=dotted];
m1_44 -> m1_45  [key=0, style=solid];
m1_43 -> m1_38  [key=2, style=dotted];
m1_43 -> m1_44  [key=0, style=solid];
m1_45 -> m1_39  [key=2, style=dotted];
m1_45 -> m1_46  [key=0, style=solid];
m1_47 -> m1_40  [key=2, style=dotted];
m1_47 -> m1_48  [key=0, style=solid];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_41  [key=2, style=dotted];
m1_51 -> m1_52  [key=0, style=solid];
m1_51 -> m1_26  [key=2, style=dotted];
m1_52 -> m1_42  [color=blue, key=0, style=bold];
m1_54 -> m1_55  [key=0, style=solid];
m1_58 -> m1_53  [key=2, style=dotted];
m1_58 -> m1_59  [key=0, style=solid];
m1_61 -> m1_53  [key=2, style=dotted];
m1_61 -> m1_62  [key=0, style=solid];
m1_62 -> m1_53  [key=2, style=dotted];
m1_62 -> m1_63  [key=0, style=solid];
m1_56 -> m1_22  [key=2, style=dotted];
m1_56 -> m1_57  [key=0, style=solid];
m1_55 -> m1_38  [key=2, style=dotted];
m1_55 -> m1_56  [key=0, style=solid];
m1_57 -> m1_39  [key=2, style=dotted];
m1_57 -> m1_58  [key=0, style=solid];
m1_59 -> m1_40  [key=2, style=dotted];
m1_59 -> m1_60  [key=0, style=solid];
m1_60 -> m1_61  [key=0, style=solid];
m1_60 -> m1_41  [key=2, style=dotted];
m1_63 -> m1_64  [key=0, style=solid];
m1_63 -> m1_26  [key=2, style=dotted];
m1_64 -> m1_54  [color=blue, key=0, style=bold];
m1_65 -> m1_66  [key=0, style=solid];
m1_69 -> m1_53  [key=2, style=dotted];
m1_69 -> m1_70  [key=0, style=solid];
m1_70 -> m1_53  [key=2, style=dotted];
m1_70 -> m1_71  [key=0, style=solid];
m1_73 -> m1_53  [key=2, style=dotted];
m1_73 -> m1_74  [key=0, style=solid];
m1_74 -> m1_53  [key=2, style=dotted];
m1_74 -> m1_75  [key=0, style=solid];
m1_75 -> m1_53  [key=2, style=dotted];
m1_75 -> m1_76  [key=0, style=solid];
m1_67 -> m1_22  [key=2, style=dotted];
m1_67 -> m1_68  [key=0, style=solid];
m1_66 -> m1_38  [key=2, style=dotted];
m1_66 -> m1_67  [key=0, style=solid];
m1_68 -> m1_39  [key=2, style=dotted];
m1_68 -> m1_69  [key=0, style=solid];
m1_71 -> m1_40  [key=2, style=dotted];
m1_71 -> m1_72  [key=0, style=solid];
m1_72 -> m1_73  [key=0, style=solid];
m1_72 -> m1_41  [key=2, style=dotted];
m1_76 -> m1_77  [key=0, style=solid];
m1_76 -> m1_26  [key=2, style=dotted];
m1_77 -> m1_65  [color=blue, key=0, style=bold];
m1_30 -> m1_31  [key=0, style=solid];
m1_32 -> m1_22  [key=2, style=dotted];
m1_32 -> m1_33  [key=0, style=solid];
m1_31 -> m1_38  [key=2, style=dotted];
m1_31 -> m1_32  [key=0, style=solid];
m1_33 -> m1_39  [key=2, style=dotted];
m1_33 -> m1_34  [key=0, style=solid];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_26  [key=2, style=dotted];
m1_34 -> m1_40  [key=2, style=dotted];
m1_34 -> m1_35  [key=0, style=solid];
m1_35 -> m1_36  [key=0, style=solid];
m1_35 -> m1_41  [key=2, style=dotted];
m1_37 -> m1_30  [color=blue, key=0, style=bold];
m1_143 -> m1_115  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_103  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_44  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_56  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_67  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_80  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_124  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_134  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_51  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_63  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_76  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_88  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_99  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_110  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_120  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_130  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m1_143 -> m1_141  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_0 -> m2_1  [color=green, key=0, style=solid];
m2_1 -> m2_2  [color=green, key=0, style=solid];
m2_2 -> m2_0  [color=blue, key=0, style=bold];
m2_3 -> m2_1  [color=green, key=1, label="HangFire.Web.Pages.ErrorPage", style=dashed];
m3_12 -> m3_13  [color=green, key=0, style=solid];
m3_12 -> m3_15  [color=green, key=1, label="System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>", style=dashed];
m3_12 -> m3_18  [color=green, key=1, label="HangFire.States.StateHandlerCollection", style=dashed];
m3_12 -> m3_20  [color=green, key=1, label="System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>", style=dashed];
m3_12 -> m3_23  [color=green, key=1, label="HangFire.States.StateHandlerCollection", style=dashed];
m3_12 -> m3_25  [color=green, key=1, label="System.Collections.Generic.IEnumerable<HangFire.States.IApplyStateFilter>", style=dashed];
m3_13 -> m3_14  [color=green, key=0, style=solid];
m3_13 -> m3_15  [color=green, key=0, style=solid];
m3_14 -> m3_31  [color=green, key=0, style=solid];
m3_14 -> n7  [color=green, key=2, style=dotted];
m3_15 -> m3_16  [color=green, key=0, style=solid];
m3_15 -> m3_17  [color=green, key=0, style=solid];
m3_16 -> m3_31  [color=green, key=0, style=solid];
m3_16 -> n7  [color=green, key=2, style=dotted];
m3_17 -> m3_18  [color=green, key=0, style=solid];
m3_17 -> m3_32  [color=green, key=2, style=dotted];
m3_17 -> m3_19  [color=green, key=1, label=transaction, style=dashed];
m3_17 -> m3_21  [color=green, key=1, label=transaction, style=dashed];
m3_17 -> m3_22  [color=green, key=1, label=transaction, style=dashed];
m3_17 -> m3_24  [color=green, key=1, label=transaction, style=dashed];
m3_17 -> m3_26  [color=green, key=1, label=transaction, style=dashed];
m3_17 -> m3_28  [color=green, key=1, label=transaction, style=dashed];
m3_17 -> m3_29  [color=green, key=1, label=transaction, style=dashed];
m3_17 -> m3_30  [color=green, key=1, label=transaction, style=dashed];
m3_18 -> m3_19  [color=green, key=0, style=solid];
m3_18 -> m3_20  [color=green, key=0, style=solid];
m3_18 -> m3_33  [color=green, key=2, style=dotted];
m3_19 -> m3_18  [color=green, key=0, style=solid];
m3_19 -> m3_34  [color=green, key=2, style=dotted];
m3_20 -> m3_21  [color=green, key=0, style=solid];
m3_20 -> m3_22  [color=green, key=0, style=solid];
m3_21 -> m3_20  [color=green, key=0, style=solid];
m3_21 -> m3_35  [color=green, key=2, style=dotted];
m3_22 -> m3_23  [color=green, key=0, style=solid];
m3_22 -> m3_36  [color=green, key=2, style=dotted];
m3_23 -> m3_24  [color=green, key=0, style=solid];
m3_23 -> m3_25  [color=green, key=0, style=solid];
m3_23 -> m3_33  [color=green, key=2, style=dotted];
m3_24 -> m3_23  [color=green, key=0, style=solid];
m3_24 -> m3_37  [color=green, key=2, style=dotted];
m3_25 -> m3_26  [color=green, key=0, style=solid];
m3_25 -> m3_27  [color=green, key=0, style=solid];
m3_26 -> m3_25  [color=green, key=0, style=solid];
m3_26 -> m3_38  [color=green, key=2, style=dotted];
m3_27 -> m3_28  [color=green, key=0, style=solid];
m3_27 -> m3_29  [color=green, key=0, style=solid];
m3_28 -> m3_30  [color=green, key=0, style=solid];
m3_28 -> m3_39  [color=green, key=2, style=dotted];
m3_29 -> m3_30  [color=green, key=0, style=solid];
m3_29 -> m3_40  [color=green, key=2, style=dotted];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_41  [key=2, style=dotted];
m3_31 -> m3_12  [color=blue, key=0, style=bold];
m3_0 -> m3_1  [color=green, key=0, style=solid];
m3_0 -> m3_3  [color=green, key=1, label="HangFire.States.IState", style=dashed];
m3_0 -> m3_5  [color=green, key=1, label="HangFire.Storage.IStorageConnection", style=dashed];
m3_0 -> m3_6  [color=green, key=1, label=string, style=dashed];
m3_0 -> m3_7  [color=green, key=1, label="HangFire.States.IState", style=dashed];
m3_1 -> m3_2  [color=green, key=0, style=solid];
m3_1 -> m3_3  [color=green, key=0, style=solid];
m3_2 -> m3_9  [color=green, key=0, style=solid];
m3_2 -> n7  [color=green, key=2, style=dotted];
m3_3 -> m3_4  [color=green, key=0, style=solid];
m3_3 -> m3_5  [color=green, key=0, style=solid];
m3_4 -> m3_9  [color=green, key=0, style=solid];
m3_4 -> n7  [color=green, key=2, style=dotted];
m3_5 -> m3_6  [color=green, key=0, style=solid];
m3_6 -> m3_7  [color=green, key=0, style=solid];
m3_7 -> m3_8  [color=green, key=0, style=solid];
m3_8 -> m3_9  [color=green, key=0, style=solid];
m3_8 -> m3_11  [color=green, key=2, style=dotted];
m3_9 -> m3_0  [color=blue, key=0, style=bold];
m3_42 -> m3_5  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_6  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_7  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_8  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_18  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_23  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_17  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_19  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_21  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_22  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_24  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_26  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_28  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_29  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m3_42 -> m3_27  [color=green, key=1, label="HangFire.States.ApplyStateContext", style=dashed];
m6_26 -> m6_27  [key=0, style=solid];
m6_27 -> m6_28  [key=0, style=solid];
m6_27 -> m6_8  [key=2, style=dotted];
m6_27 -> m6_31  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_15  [key=2, style=dotted];
m6_28 -> m6_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_29 -> m6_26  [color=blue, key=0, style=bold];
m6_19 -> m6_20  [key=0, style=solid];
m6_20 -> m6_21  [key=0, style=solid];
m6_20 -> m6_8  [key=2, style=dotted];
m6_20 -> m6_24  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_21 -> m6_22  [key=0, style=solid];
m6_21 -> m6_15  [key=2, style=dotted];
m6_21 -> m6_23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_22 -> m6_19  [color=blue, key=0, style=bold];
m6_40 -> m6_41  [key=0, style=solid];
m6_41 -> m6_42  [key=0, style=solid];
m6_41 -> m6_8  [key=2, style=dotted];
m6_41 -> m6_45  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_42 -> m6_43  [key=0, style=solid];
m6_42 -> m6_15  [key=2, style=dotted];
m6_42 -> m6_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_43 -> m6_40  [color=blue, key=0, style=bold];
m6_11 -> m6_12  [key=0, style=solid];
m6_12 -> m6_13  [key=0, style=solid];
m6_12 -> m6_8  [key=2, style=dotted];
m6_12 -> m6_17  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_13 -> m6_14  [key=0, style=solid];
m6_13 -> m6_15  [key=2, style=dotted];
m6_13 -> m6_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_14 -> m6_11  [color=blue, key=0, style=bold];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_8  [key=2, style=dotted];
m6_1 -> m6_3  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_1 -> m6_4  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_1 -> m6_5  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_1 -> m6_6  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_9  [key=2, style=dotted];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_9  [key=2, style=dotted];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_9  [key=2, style=dotted];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_10  [key=2, style=dotted];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_10  [key=2, style=dotted];
m6_7 -> m6_0  [color=blue, key=0, style=bold];
m6_33 -> m6_34  [key=0, style=solid];
m6_34 -> m6_35  [key=0, style=solid];
m6_34 -> m6_8  [key=2, style=dotted];
m6_34 -> m6_38  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_35 -> m6_36  [key=0, style=solid];
m6_35 -> m6_15  [key=2, style=dotted];
m6_35 -> m6_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_36 -> m6_33  [color=blue, key=0, style=bold];
m6_44 -> m6_45  [key=0, style=solid];
m6_17 -> m6_18  [key=0, style=solid];
m6_16 -> m6_17  [key=0, style=solid];
m6_18 -> m6_16  [color=blue, key=0, style=bold];
m6_24 -> m6_25  [key=0, style=solid];
m6_23 -> m6_24  [key=0, style=solid];
m6_25 -> m6_23  [color=blue, key=0, style=bold];
m6_31 -> m6_32  [key=0, style=solid];
m6_30 -> m6_31  [key=0, style=solid];
m6_32 -> m6_30  [color=blue, key=0, style=bold];
m6_38 -> m6_39  [key=0, style=solid];
m6_37 -> m6_38  [key=0, style=solid];
m6_39 -> m6_37  [color=blue, key=0, style=bold];
m6_45 -> m6_46  [key=0, style=solid];
m6_46 -> m6_44  [color=blue, key=0, style=bold];
m6_8 -> m6_47  [key=0, style=solid];
m6_47 -> m6_48  [key=0, style=solid];
m6_47 -> m6_49  [key=2, style=dotted];
m6_48 -> m6_8  [color=blue, key=0, style=bold];
m6_50 -> m6_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_50 -> m6_12  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_50 -> m6_20  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_50 -> m6_27  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_50 -> m6_34  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_50 -> m6_41  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.BackgroundJobServerOptionsFacts", style=dashed];
m6_51 -> m6_17  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_52 -> m6_24  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_53 -> m6_31  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_54 -> m6_38  [color=darkseagreen4, key=1, label=options, style=dashed];
m6_55 -> m6_45  [color=darkseagreen4, key=1, label=options, style=dashed];
m7_0 -> m7_1  [key=0, style=solid];
m7_0 -> m7_2  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_0 -> m7_3  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_0 -> m7_4  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_1 -> m7_5  [key=2, style=dotted];
m7_1 -> m7_2  [key=0, style=solid];
m7_3 -> m7_7  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_6  [key=2, style=dotted];
m7_4 -> m7_0  [color=blue, key=0, style=bold];
m7_4 -> m7_5  [key=0, style=solid];
m7_5 -> m7_0  [color=blue, key=0, style=bold];
m7_5 -> m7_14  [color=green, key=0, style=solid];
m7_16 -> m7_17  [key=0, style=solid];
m7_48 -> m7_49  [key=0, style=solid];
m7_49 -> m7_50  [key=0, style=solid];
m7_49 -> m7_53  [key=2, style=dotted];
m7_50 -> m7_51  [key=0, style=solid];
m7_50 -> m7_54  [key=2, style=dotted];
m7_51 -> m7_52  [key=0, style=solid];
m7_52 -> m7_48  [color=blue, key=0, style=bold];
m7_7 -> m7_8  [key=0, style=solid];
m7_7 -> m7_9  [key=0, style=solid];
m7_6 -> m7_7  [key=0, style=solid];
m7_6 -> m7_9  [color=darkseagreen4, key=1, label="HangFire.States.IStateMachineFactory", style=dashed];
m7_6 -> m7_11  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m7_6 -> m7_13  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m7_6 -> m7_15  [color=darkseagreen4, key=1, label="HangFire.States.IStateMachineFactory", style=dashed];
m7_6 -> m7_16  [color=darkseagreen4, key=1, label="HangFire.Storage.IStorageConnection", style=dashed];
m7_6 -> m7_17  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
m7_6 -> m7_18  [color=darkseagreen4, key=1, label="HangFire.States.State", style=dashed];
m7_14 -> m7_15  [color=green, key=0, style=solid];
m7_14 -> m7_16  [color=green, key=2, style=dotted];
m7_14 -> m7_20  [key=0, style=solid];
m7_14 -> n7  [key=2, style=dotted];
m7_15 -> m7_5  [color=blue, key=0, style=bold];
m7_15 -> m7_16  [key=0, style=solid];
m7_9 -> m7_10  [color=green, key=0, style=solid];
m7_9 -> m7_11  [key=0, style=solid];
m7_9 -> m7_5  [color=green, key=2, style=dotted];
m7_11 -> m7_12  [color=green, key=0, style=solid];
m7_11 -> m7_13  [key=0, style=solid];
m7_11 -> m7_7  [color=green, key=2, style=dotted];
m7_13 -> m7_14  [key=0, style=solid];
m7_13 -> m7_15  [key=0, style=solid];
m7_17 -> m7_18  [key=0, style=solid];
m7_18 -> m7_19  [key=0, style=solid];
m7_8 -> m7_20  [key=0, style=solid];
m7_8 -> n7  [key=2, style=dotted];
m7_8 -> m7_9  [color=green, key=0, style=solid];
m7_10 -> m7_20  [key=0, style=solid];
m7_10 -> n7  [key=2, style=dotted];
m7_10 -> m7_11  [color=green, key=0, style=solid];
m7_10 -> m7_13  [color=green, key=2, style=dotted];
m7_12 -> m7_20  [key=0, style=solid];
m7_12 -> n7  [key=2, style=dotted];
m7_12 -> m7_8  [color=blue, key=0, style=bold];
m7_19 -> m7_20  [key=0, style=solid];
m7_19 -> m7_22  [key=2, style=dotted];
m7_20 -> m7_6  [color=blue, key=0, style=bold];
m7_23 -> m7_24  [key=0, style=solid];
m7_23 -> m7_28  [color=darkseagreen4, key=1, label=object, style=dashed];
m7_23 -> m7_29  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_23 -> m7_30  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_23 -> m7_31  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_24 -> m7_25  [key=0, style=solid];
m7_24 -> m7_26  [key=0, style=solid];
m7_24 -> m7_33  [key=2, style=dotted];
m7_28 -> m7_29  [key=0, style=solid];
m7_28 -> m7_35  [key=2, style=dotted];
m7_28 -> m7_30  [color=darkseagreen4, key=1, label=serializedValue, style=dashed];
m7_28 -> m7_31  [color=darkseagreen4, key=1, label=serializedValue, style=dashed];
m7_29 -> m7_30  [key=0, style=solid];
m7_29 -> m7_31  [key=0, style=solid];
m7_29 -> m7_36  [key=2, style=dotted];
m7_30 -> m7_32  [key=0, style=solid];
m7_30 -> m7_37  [key=2, style=dotted];
m7_31 -> m7_32  [key=0, style=solid];
m7_25 -> m7_32  [key=0, style=solid];
m7_25 -> n7  [key=2, style=dotted];
m7_26 -> m7_27  [key=0, style=solid];
m7_26 -> m7_28  [key=0, style=solid];
m7_27 -> m7_32  [key=0, style=solid];
m7_27 -> m7_34  [key=2, style=dotted];
m7_32 -> m7_23  [color=blue, key=0, style=bold];
m7_38 -> m7_39  [key=0, style=solid];
m7_38 -> m7_41  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_38 -> m7_43  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_39 -> m7_40  [key=0, style=solid];
m7_39 -> m7_41  [key=0, style=solid];
m7_39 -> m7_33  [key=2, style=dotted];
m7_41 -> m7_44  [key=0, style=solid];
m7_41 -> m7_36  [key=2, style=dotted];
m7_41 -> m7_45  [key=2, style=dotted];
m7_43 -> m7_44  [key=0, style=solid];
m7_43 -> m7_46  [key=2, style=dotted];
m7_43 -> m7_47  [key=2, style=dotted];
m7_40 -> m7_44  [key=0, style=solid];
m7_40 -> n7  [key=2, style=dotted];
m7_42 -> m7_43  [key=0, style=solid];
m7_44 -> m7_38  [color=blue, key=0, style=bold];
m7_55 -> m7_1  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_2  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_3  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_4  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_15  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_16  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_17  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_18  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_19  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_26  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_29  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_30  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_31  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_41  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_49  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_50  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m7_55 -> m7_51  [color=darkseagreen4, key=1, label="HangFire.Client.CreateContext", style=dashed];
m8_71 -> m8_72  [key=0, style=solid];
m8_71 -> m8_43  [key=2, style=dotted];
m8_63 -> m8_109  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m8_63 -> m8_64  [key=0, style=solid];
m8_63 -> m8_137  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m8_63 -> m8_176  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m8_63 -> m8_74  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m8_63 -> m8_43  [key=2, style=dotted];
m8_64 -> m8_33  [key=2, style=dotted];
m8_64 -> m8_65  [key=0, style=solid];
m8_64 -> m8_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_64 -> m8_44  [key=2, style=dotted];
m8_65 -> m8_66  [key=0, style=solid];
m8_65 -> m8_67  [key=2, style=dotted];
m8_65 -> m8_45  [key=2, style=dotted];
m8_66 -> m8_63  [color=blue, key=0, style=bold];
m8_66 -> m8_67  [key=0, style=solid];
m8_66 -> m8_26  [key=2, style=dotted];
m8_152 -> m8_153  [color=green, key=0, style=solid];
m8_153 -> m8_154  [color=green, key=0, style=solid];
m8_153 -> m8_157  [color=green, key=1, label=time, style=dashed];
m8_153 -> m8_161  [color=green, key=1, label=time, style=dashed];
m8_154 -> m8_155  [key=0, style=solid];
m8_154 -> m8_159  [key=2, style=dotted];
m8_157 -> m8_100  [key=2, style=dotted];
m8_157 -> m8_158  [key=0, style=solid];
m8_157 -> m8_160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_155 -> m8_156  [key=0, style=solid];
m8_155 -> m8_98  [key=2, style=dotted];
m8_156 -> m8_157  [key=0, style=solid];
m8_156 -> m8_99  [key=2, style=dotted];
m8_158 -> m8_152  [color=blue, key=0, style=bold];
m8_17 -> m8_14  [color=blue, key=0, style=bold];
m8_19 -> m8_20  [key=0, style=solid];
m8_19 -> m8_21  [key=2, style=dotted];
m8_30 -> m8_31  [key=0, style=solid];
m8_31 -> m8_32  [key=0, style=solid];
m8_31 -> m8_41  [key=2, style=dotted];
m8_31 -> m8_33  [key=2, style=dotted];
m8_31 -> m8_34  [key=2, style=dotted];
m8_32 -> m8_33  [key=0, style=solid];
m8_32 -> m8_22  [key=2, style=dotted];
m8_32 -> m8_30  [color=blue, key=0, style=bold];
m8_33 -> m8_34  [key=0, style=solid];
m8_33 -> m8_42  [key=2, style=dotted];
m8_34 -> m8_35  [key=0, style=solid];
m8_34 -> m8_43  [key=2, style=dotted];
m8_35 -> m8_36  [key=0, style=solid];
m8_35 -> m8_44  [key=2, style=dotted];
m8_36 -> m8_37  [key=0, style=solid];
m8_36 -> m8_45  [key=2, style=dotted];
m8_36 -> m8_33  [key=2, style=dotted];
m8_36 -> m8_38  [key=2, style=dotted];
m8_37 -> m8_38  [key=0, style=solid];
m8_37 -> m8_46  [key=2, style=dotted];
m8_37 -> m8_35  [color=blue, key=0, style=bold];
m8_38 -> m8_39  [key=0, style=solid];
m8_38 -> m8_45  [key=2, style=dotted];
m8_39 -> m8_40  [key=0, style=solid];
m8_39 -> m8_26  [key=2, style=dotted];
m8_40 -> m8_30  [color=blue, key=0, style=bold];
m8_40 -> m8_41  [key=0, style=solid];
m8_163 -> m8_164  [key=0, style=solid];
m8_164 -> m8_165  [key=0, style=solid];
m8_164 -> m8_22  [key=2, style=dotted];
m8_164 -> m8_29  [key=2, style=dotted];
m8_164 -> m8_23  [key=2, style=dotted];
m8_164 -> m8_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_165 -> m8_166  [key=0, style=solid];
m8_165 -> m8_98  [key=2, style=dotted];
m8_165 -> m8_173  [color=darkseagreen4, key=1, label=scheduler, style=dashed];
m8_166 -> m8_167  [key=0, style=solid];
m8_166 -> m8_168  [key=2, style=dotted];
m8_166 -> m8_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_167 -> m8_163  [color=blue, key=0, style=bold];
m8_0 -> m8_1  [key=0, style=solid];
m8_0 -> m8_16  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m8_1 -> m8_2  [key=0, style=solid];
m8_1 -> m8_5  [key=2, style=dotted];
m8_1 -> m8_16  [key=2, style=dotted];
m8_2 -> m8_3  [key=0, style=solid];
m8_2 -> m8_6  [key=2, style=dotted];
m8_2 -> m8_7  [key=2, style=dotted];
m8_2 -> m8_17  [key=2, style=dotted];
m8_2 -> m8_12  [color=darkorchid, key=3, label="Parameter variable Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext", style=bold];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_8  [key=2, style=dotted];
m8_3 -> m8_18  [key=2, style=dotted];
m8_4 -> m8_0  [color=blue, key=0, style=bold];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_19  [key=2, style=dotted];
m8_67 -> m8_58  [color=blue, key=0, style=bold];
m8_28 -> m8_26  [color=blue, key=0, style=bold];
m8_58 -> m8_59  [key=0, style=solid];
m8_57 -> m8_47  [color=blue, key=0, style=bold];
m8_104 -> m8_105  [key=0, style=solid];
m8_110 -> m8_111  [color=green, key=0, style=solid];
m8_110 -> m8_100  [color=green, key=2, style=dotted];
m8_110 -> m8_127  [color=green, key=1, label="lambda expression", style=dashed];
m8_107 -> m8_110  [color=green, key=1, label=jobKey, style=dashed];
m8_107 -> m8_128  [color=green, key=1, label=jobKey, style=dashed];
m8_107 -> m8_108  [key=0, style=solid];
m8_107 -> m8_57  [key=2, style=dotted];
m8_107 -> m8_113  [color=darkseagreen4, key=1, label=jobKey, style=dashed];
m8_107 -> m8_109  [color=darkseagreen4, key=1, label=jobKey, style=dashed];
m8_107 -> m8_121  [color=darkseagreen4, key=1, label=jobKey, style=dashed];
m8_109 -> m8_110  [color=green, key=0, style=solid];
m8_109 -> m8_100  [key=2, style=dotted];
m8_109 -> m8_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_105 -> m8_106  [key=0, style=solid];
m8_105 -> m8_98  [key=2, style=dotted];
m8_106 -> m8_107  [key=0, style=solid];
m8_106 -> m8_99  [key=2, style=dotted];
m8_108 -> m8_109  [key=0, style=solid];
m8_108 -> m8_100  [key=2, style=dotted];
m8_108 -> m8_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_111 -> m8_104  [color=blue, key=0, style=bold];
m8_46 -> m8_47  [key=0, style=solid];
m8_133 -> m8_134  [key=0, style=solid];
m8_134 -> m8_135  [key=0, style=solid];
m8_134 -> m8_22  [key=2, style=dotted];
m8_134 -> m8_23  [key=2, style=dotted];
m8_134 -> m8_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_135 -> m8_136  [key=0, style=solid];
m8_135 -> m8_98  [key=2, style=dotted];
m8_136 -> m8_137  [key=0, style=solid];
m8_136 -> m8_99  [key=2, style=dotted];
m8_137 -> m8_100  [key=2, style=dotted];
m8_137 -> m8_138  [key=0, style=solid];
m8_137 -> m8_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_138 -> m8_100  [key=2, style=dotted];
m8_138 -> m8_139  [key=0, style=solid];
m8_138 -> m8_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_139 -> m8_133  [color=blue, key=0, style=bold];
m8_83 -> m8_84  [key=0, style=solid];
m8_84 -> m8_85  [key=0, style=solid];
m8_84 -> m8_41  [key=2, style=dotted];
m8_84 -> m8_71  [key=2, style=dotted];
m8_85 -> m8_86  [key=0, style=solid];
m8_85 -> m8_22  [key=2, style=dotted];
m8_85 -> m8_83  [color=blue, key=0, style=bold];
m8_86 -> m8_87  [color=red, key=0, style=solid];
m8_86 -> m8_42  [key=2, style=dotted];
m8_87 -> m8_88  [color=red, key=0, style=solid];
m8_87 -> m8_45  [color=red, key=2, style=dotted];
m8_87 -> m8_33  [key=2, style=dotted];
m8_87 -> m8_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_88 -> m8_89  [key=0, style=solid];
m8_88 -> m8_43  [key=2, style=dotted];
m8_88 -> m8_67  [key=2, style=dotted];
m8_89 -> m8_90  [key=0, style=solid];
m8_89 -> m8_44  [key=2, style=dotted];
m8_89 -> m8_86  [color=blue, key=0, style=bold];
m8_90 -> m8_91  [key=0, style=solid];
m8_90 -> m8_26  [key=2, style=dotted];
m8_91 -> m8_83  [color=blue, key=0, style=bold];
m8_91 -> m8_92  [key=0, style=solid];
m8_91 -> m8_71  [key=2, style=dotted];
m8_47 -> m8_48  [key=0, style=solid];
m8_47 -> m8_49  [key=2, style=dotted];
m8_48 -> m8_49  [key=0, style=solid];
m8_48 -> m8_41  [key=2, style=dotted];
m8_48 -> m8_46  [color=blue, key=0, style=bold];
m8_49 -> m8_50  [key=0, style=solid];
m8_49 -> m8_22  [key=2, style=dotted];
m8_50 -> m8_51  [key=0, style=solid];
m8_50 -> m8_42  [key=2, style=dotted];
m8_51 -> m8_52  [key=0, style=solid];
m8_51 -> m8_43  [key=2, style=dotted];
m8_51 -> m8_53  [key=2, style=dotted];
m8_52 -> m8_53  [key=0, style=solid];
m8_52 -> m8_44  [key=2, style=dotted];
m8_52 -> m8_50  [color=blue, key=0, style=bold];
m8_53 -> m8_54  [key=0, style=solid];
m8_53 -> m8_45  [key=2, style=dotted];
m8_54 -> m8_55  [key=0, style=solid];
m8_54 -> m8_45  [key=2, style=dotted];
m8_55 -> m8_56  [key=0, style=solid];
m8_55 -> m8_45  [key=2, style=dotted];
m8_55 -> m8_57  [key=2, style=dotted];
m8_55 -> m8_58  [key=2, style=dotted];
m8_56 -> m8_57  [key=0, style=solid];
m8_56 -> m8_26  [key=2, style=dotted];
m8_56 -> m8_54  [color=blue, key=0, style=bold];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_20  [key=2, style=dotted];
m8_59 -> m8_60  [key=0, style=solid];
m8_59 -> m8_41  [key=2, style=dotted];
m8_60 -> m8_61  [key=0, style=solid];
m8_60 -> m8_22  [key=2, style=dotted];
m8_60 -> m8_33  [key=2, style=dotted];
m8_60 -> m8_62  [key=2, style=dotted];
m8_61 -> m8_62  [color=red, key=0, style=solid];
m8_61 -> m8_42  [key=2, style=dotted];
m8_61 -> m8_59  [color=blue, key=0, style=bold];
m8_62 -> m8_63  [color=red, key=0, style=solid];
m8_62 -> m8_45  [color=red, key=2, style=dotted];
m8_79 -> m8_80  [key=0, style=solid];
m8_79 -> m8_43  [key=2, style=dotted];
m8_80 -> m8_33  [key=2, style=dotted];
m8_80 -> m8_81  [key=0, style=solid];
m8_80 -> m8_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_80 -> m8_44  [key=2, style=dotted];
m8_81 -> m8_82  [key=0, style=solid];
m8_81 -> m8_67  [key=2, style=dotted];
m8_81 -> m8_26  [key=2, style=dotted];
m8_82 -> m8_79  [color=blue, key=0, style=bold];
m8_82 -> m8_75  [color=blue, key=0, style=bold];
m8_98 -> m8_184  [key=0, style=solid];
m8_184 -> m8_185  [key=0, style=solid];
m8_184 -> m8_71  [key=2, style=dotted];
m8_185 -> m8_98  [color=blue, key=0, style=bold];
m8_18 -> m8_19  [key=0, style=solid];
m8_14 -> m8_15  [key=0, style=solid];
m8_14 -> m8_22  [key=2, style=dotted];
m8_14 -> m8_23  [key=2, style=dotted];
m8_14 -> m8_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_15 -> m8_16  [key=0, style=solid];
m8_15 -> m8_17  [key=0, style=solid];
m8_15 -> m8_0  [color=blue, key=0, style=bold];
m8_16 -> m8_17  [key=0, style=solid];
m8_16 -> m8_0  [key=2, style=dotted];
m8_26 -> m8_27  [key=0, style=solid];
m8_6 -> m8_7  [key=0, style=solid];
m8_6 -> m8_21  [key=2, style=dotted];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_22  [key=2, style=dotted];
m8_7 -> m8_23  [key=2, style=dotted];
m8_7 -> m8_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_8 -> m8_9  [key=0, style=solid];
m8_8 -> m8_22  [key=2, style=dotted];
m8_8 -> m8_23  [key=2, style=dotted];
m8_8 -> m8_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_8 -> m8_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_9 -> m8_10  [key=0, style=solid];
m8_9 -> n11  [key=2, style=dotted];
m8_9 -> m8_25  [key=2, style=dotted];
m8_9 -> m8_26  [key=2, style=dotted];
m8_9 -> m8_27  [key=2, style=dotted];
m8_9 -> m8_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_10 -> m8_11  [key=0, style=solid];
m8_10 -> m8_28  [key=2, style=dotted];
m8_10 -> m8_13  [key=2, style=dotted];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> m8_22  [key=2, style=dotted];
m8_11 -> m8_23  [key=2, style=dotted];
m8_11 -> m8_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_12 -> m8_13  [key=0, style=solid];
m8_12 -> m8_22  [key=2, style=dotted];
m8_12 -> m8_29  [key=2, style=dotted];
m8_12 -> m8_23  [key=2, style=dotted];
m8_12 -> m8_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_12 -> m8_9  [color=blue, key=0, style=bold];
m8_13 -> m8_14  [key=0, style=solid];
m8_13 -> m8_22  [key=2, style=dotted];
m8_13 -> m8_23  [key=2, style=dotted];
m8_13 -> m8_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_27 -> m8_28  [key=0, style=solid];
m8_27 -> m8_29  [key=2, style=dotted];
m8_20 -> m8_18  [color=blue, key=0, style=bold];
m8_75 -> m8_76  [color=red, key=0, style=solid];
m8_75 -> m8_72  [color=blue, key=0, style=bold];
m8_76 -> m8_77  [color=red, key=0, style=solid];
m8_76 -> m8_41  [color=red, key=2, style=dotted];
m8_77 -> m8_78  [key=0, style=solid];
m8_77 -> m8_22  [key=2, style=dotted];
m8_77 -> m8_71  [key=2, style=dotted];
m8_78 -> m8_79  [key=0, style=solid];
m8_78 -> m8_42  [key=2, style=dotted];
m8_78 -> m8_76  [color=blue, key=0, style=bold];
m8_43 -> m8_44  [key=0, style=solid];
m8_43 -> m8_45  [key=2, style=dotted];
m8_22 -> m8_23  [key=0, style=solid];
m8_22 -> m8_31  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m8_22 -> m8_48  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m8_22 -> m8_59  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m8_22 -> m8_69  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m8_22 -> m8_76  [color=red, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m8_22 -> m8_84  [color=darkorchid, key=3, label="Parameter variable TechTalk.SpecFlow.ScenarioInfo scenarioInfo", style=bold];
m8_93 -> m8_94  [key=0, style=solid];
m8_94 -> m8_95  [key=0, style=solid];
m8_94 -> m8_98  [key=2, style=dotted];
m8_95 -> m8_96  [key=0, style=solid];
m8_95 -> m8_99  [key=2, style=dotted];
m8_96 -> m8_100  [key=2, style=dotted];
m8_96 -> m8_97  [key=0, style=solid];
m8_96 -> m8_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_97 -> m8_93  [color=blue, key=0, style=bold];
m8_116 -> m8_117  [key=0, style=solid];
m8_127 -> m8_128  [color=green, key=0, style=solid];
m8_128 -> m8_129  [color=green, key=0, style=solid];
m8_128 -> m8_33  [color=green, key=2, style=dotted];
m8_128 -> m8_115  [color=green, key=2, style=dotted];
m8_128 -> m8_130  [color=green, key=1, label="lambda expression", style=dashed];
m8_129 -> m8_127  [color=blue, key=0, style=bold];
m8_130 -> m8_131  [key=0, style=solid];
m8_161 -> m8_162  [key=0, style=solid];
m8_161 -> m8_34  [key=2, style=dotted];
m8_69 -> m8_70  [key=0, style=solid];
m8_69 -> m8_71  [key=2, style=dotted];
m8_69 -> m8_41  [key=2, style=dotted];
m8_121 -> m8_33  [key=2, style=dotted];
m8_121 -> m8_115  [key=2, style=dotted];
m8_121 -> m8_122  [key=0, style=solid];
m8_121 -> m8_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_124 -> m8_125  [key=0, style=solid];
m8_124 -> m8_119  [key=2, style=dotted];
m8_124 -> m8_126  [key=2, style=dotted];
m8_131 -> m8_132  [key=0, style=solid];
m8_131 -> m8_119  [key=2, style=dotted];
m8_131 -> m8_126  [key=2, style=dotted];
m8_147 -> m8_33  [key=2, style=dotted];
m8_147 -> m8_115  [key=2, style=dotted];
m8_147 -> m8_148  [key=0, style=solid];
m8_147 -> m8_57  [key=2, style=dotted];
m8_147 -> m8_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_150 -> m8_151  [key=0, style=solid];
m8_150 -> m8_119  [key=2, style=dotted];
m8_150 -> m8_126  [key=2, style=dotted];
m8_173 -> m8_174  [key=0, style=solid];
m8_173 -> m8_99  [key=2, style=dotted];
m8_182 -> m8_183  [key=0, style=solid];
m8_182 -> m8_99  [key=2, style=dotted];
m8_113 -> m8_33  [key=2, style=dotted];
m8_113 -> m8_115  [key=2, style=dotted];
m8_113 -> m8_114  [key=0, style=solid];
m8_113 -> m8_116  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_120 -> m8_121  [key=0, style=solid];
m8_102 -> m8_33  [key=2, style=dotted];
m8_102 -> m8_103  [key=0, style=solid];
m8_102 -> m8_62  [key=2, style=dotted];
m8_141 -> m8_33  [key=2, style=dotted];
m8_141 -> m8_142  [key=0, style=solid];
m8_141 -> m8_34  [key=2, style=dotted];
m8_144 -> m8_33  [key=2, style=dotted];
m8_144 -> m8_145  [key=0, style=solid];
m8_144 -> m8_62  [key=2, style=dotted];
m8_170 -> m8_33  [key=2, style=dotted];
m8_170 -> m8_171  [key=0, style=solid];
m8_170 -> m8_53  [key=2, style=dotted];
m8_132 -> m8_130  [color=blue, key=0, style=bold];
m8_160 -> m8_161  [key=0, style=solid];
m8_162 -> m8_160  [color=blue, key=0, style=bold];
m8_41 -> m8_39  [color=blue, key=0, style=bold];
m8_42 -> m8_43  [key=0, style=solid];
m8_68 -> m8_69  [key=0, style=solid];
m8_70 -> m8_68  [color=blue, key=0, style=bold];
m8_70 -> m8_71  [key=0, style=solid];
m8_70 -> m8_22  [key=2, style=dotted];
m8_92 -> m8_90  [color=blue, key=0, style=bold];
m8_92 -> m8_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m8_92 -> m8_39  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m8_92 -> m8_49  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m8_92 -> m8_56  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m8_92 -> m8_60  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m8_92 -> m8_66  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m8_92 -> m8_70  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m8_92 -> m8_73  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m8_92 -> m8_77  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m8_92 -> m8_81  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m8_92 -> m8_85  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.SchedulePollerFeature", style=dashed];
m8_101 -> m8_102  [key=0, style=solid];
m8_112 -> m8_113  [key=0, style=solid];
m8_122 -> m8_120  [color=blue, key=0, style=bold];
m8_123 -> m8_124  [key=0, style=solid];
m8_125 -> m8_123  [color=blue, key=0, style=bold];
m8_140 -> m8_141  [key=0, style=solid];
m8_143 -> m8_144  [key=0, style=solid];
m8_146 -> m8_147  [key=0, style=solid];
m8_148 -> m8_146  [color=blue, key=0, style=bold];
m8_149 -> m8_150  [key=0, style=solid];
m8_151 -> m8_149  [color=blue, key=0, style=bold];
m8_169 -> m8_170  [key=0, style=solid];
m8_172 -> m8_173  [key=0, style=solid];
m8_174 -> m8_172  [color=blue, key=0, style=bold];
m8_181 -> m8_182  [key=0, style=solid];
m8_183 -> m8_181  [color=blue, key=0, style=bold];
m8_114 -> m8_112  [color=blue, key=0, style=bold];
m8_103 -> m8_101  [color=blue, key=0, style=bold];
m8_142 -> m8_140  [color=blue, key=0, style=bold];
m8_145 -> m8_143  [color=blue, key=0, style=bold];
m8_171 -> m8_169  [color=blue, key=0, style=bold];
m8_44 -> m8_42  [color=blue, key=0, style=bold];
m8_117 -> m8_119  [key=2, style=dotted];
m8_117 -> m8_118  [key=0, style=solid];
m8_118 -> m8_116  [color=blue, key=0, style=bold];
m8_72 -> m8_73  [key=0, style=solid];
m8_72 -> m8_44  [key=2, style=dotted];
m8_73 -> m8_74  [key=0, style=solid];
m8_73 -> m8_26  [key=2, style=dotted];
m8_73 -> m8_33  [key=2, style=dotted];
m8_73 -> m8_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_74 -> m8_68  [color=blue, key=0, style=bold];
m8_74 -> m8_75  [key=0, style=solid];
m8_74 -> m8_67  [key=2, style=dotted];
m8_23 -> m8_24  [key=0, style=solid];
m8_23 -> m8_25  [key=2, style=dotted];
m8_24 -> m8_22  [color=blue, key=0, style=bold];
m8_175 -> m8_176  [key=0, style=solid];
m8_176 -> m8_177  [key=0, style=solid];
m8_176 -> m8_180  [key=2, style=dotted];
m8_176 -> m8_27  [key=2, style=dotted];
m8_177 -> m8_178  [key=0, style=solid];
m8_177 -> m8_98  [key=2, style=dotted];
m8_177 -> m8_182  [color=darkseagreen4, key=1, label=scheduler, style=dashed];
m8_178 -> m8_179  [key=0, style=solid];
m8_178 -> m8_168  [key=2, style=dotted];
m8_178 -> m8_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_179 -> m8_175  [color=blue, key=0, style=bold];
m8_186 -> m8_110  [color=green, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_128  [color=green, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_3  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_4  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_5  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_6  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_8  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_40  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_9  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_10  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_11  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_12  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_13  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_14  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_64  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_69  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_73  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_77  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_80  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_84  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_87  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_91  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_94  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_95  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_96  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_105  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_106  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_108  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_109  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_121  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_124  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_131  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_134  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_135  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_136  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_137  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_138  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_147  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_150  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_154  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_155  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_156  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_157  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_164  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_165  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_166  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_173  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_176  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_177  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_178  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_182  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_186 -> m8_184  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", style=dashed];
m8_187 -> m8_128  [color=green, key=1, label=jobKey, style=dashed];
m8_187 -> m8_113  [color=darkseagreen4, key=1, label=jobKey, style=dashed];
m8_187 -> m8_121  [color=darkseagreen4, key=1, label=jobKey, style=dashed];
m8_188 -> m8_161  [color=darkseagreen4, key=1, label=time, style=dashed];
m8_189 -> m8_173  [color=darkseagreen4, key=1, label=scheduler, style=dashed];
m8_190 -> m8_182  [color=darkseagreen4, key=1, label=scheduler, style=dashed];
m9_29 -> m9_30  [key=0, style=solid];
m9_30 -> m9_31  [key=0, style=solid];
m9_30 -> m9_32  [key=2, style=dotted];
m9_30 -> m9_33  [key=2, style=dotted];
m9_31 -> m9_29  [color=blue, key=0, style=bold];
m9_10 -> m9_11  [key=0, style=solid];
m9_11 -> m9_12  [color=red, key=0, style=solid];
m9_11 -> m9_15  [key=2, style=dotted];
m9_11 -> m9_5  [key=2, style=dotted];
m9_12 -> m9_13  [color=red, key=0, style=solid];
m9_12 -> m9_6  [color=red, key=2, style=dotted];
m9_13 -> m9_14  [key=0, style=solid];
m9_13 -> m9_7  [key=2, style=dotted];
m9_13 -> m9_8  [key=2, style=dotted];
m9_13 -> m9_9  [key=2, style=dotted];
m9_14 -> m9_10  [color=blue, key=0, style=bold];
m9_34 -> m9_35  [key=0, style=solid];
m9_35 -> m9_36  [key=0, style=solid];
m9_35 -> m9_32  [key=2, style=dotted];
m9_35 -> m9_37  [key=2, style=dotted];
m9_36 -> m9_34  [color=blue, key=0, style=bold];
m9_22 -> m9_23  [key=0, style=solid];
m9_23 -> m9_24  [key=0, style=solid];
m9_23 -> m9_26  [key=2, style=dotted];
m9_23 -> m9_27  [key=2, style=dotted];
m9_24 -> m9_25  [key=0, style=solid];
m9_24 -> m9_28  [key=2, style=dotted];
m9_25 -> m9_22  [color=blue, key=0, style=bold];
m9_38 -> m9_39  [key=0, style=solid];
m9_39 -> m9_40  [key=0, style=solid];
m9_39 -> m9_41  [key=2, style=dotted];
m9_40 -> m9_38  [color=blue, key=0, style=bold];
m9_16 -> m9_17  [key=0, style=solid];
m9_17 -> m9_18  [color=red, key=0, style=solid];
m9_17 -> m9_5  [key=2, style=dotted];
m9_18 -> m9_19  [color=red, key=0, style=solid];
m9_18 -> m9_6  [color=red, key=2, style=dotted];
m9_19 -> m9_20  [key=0, style=solid];
m9_19 -> m9_21  [key=2, style=dotted];
m9_19 -> m9_8  [key=2, style=dotted];
m9_19 -> m9_9  [key=2, style=dotted];
m9_20 -> m9_16  [color=blue, key=0, style=bold];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_2  [color=red, key=0, style=solid];
m9_1 -> m9_5  [key=2, style=dotted];
m9_2 -> m9_3  [color=red, key=0, style=solid];
m9_2 -> m9_6  [color=red, key=2, style=dotted];
m9_3 -> m9_4  [key=0, style=solid];
m9_3 -> m9_7  [key=2, style=dotted];
m9_3 -> m9_8  [key=2, style=dotted];
m9_3 -> m9_9  [key=2, style=dotted];
m9_4 -> m9_0  [color=blue, key=0, style=bold];
m9_42 -> m9_24  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerSteps", style=dashed];
m9_42 -> m9_39  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerSteps", style=dashed];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_0  [color=blue, key=0, style=bold];
m11_191 -> m11_192  [key=0, style=solid];
m11_192 -> m11_193  [key=0, style=solid];
m11_192 -> m11_195  [key=2, style=dotted];
m11_193 -> m11_194  [key=0, style=solid];
m11_193 -> m11_24  [key=2, style=dotted];
m11_193 -> m11_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_194 -> m11_191  [color=blue, key=0, style=bold];
m11_153 -> m11_154  [key=0, style=solid];
m11_154 -> m11_155  [key=0, style=solid];
m11_154 -> m11_152  [key=2, style=dotted];
m11_155 -> m11_156  [key=0, style=solid];
m11_155 -> m11_24  [key=2, style=dotted];
m11_155 -> m11_157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_156 -> m11_153  [color=blue, key=0, style=bold];
m11_160 -> m11_161  [key=0, style=solid];
m11_161 -> m11_162  [key=0, style=solid];
m11_161 -> m11_10  [key=2, style=dotted];
m11_161 -> m11_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_162 -> m11_163  [key=0, style=solid];
m11_162 -> m11_11  [key=2, style=dotted];
m11_163 -> m11_160  [color=blue, key=0, style=bold];
m11_6 -> m11_7  [key=0, style=solid];
m11_7 -> m11_8  [key=0, style=solid];
m11_7 -> m11_10  [key=2, style=dotted];
m11_7 -> m11_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_8 -> m11_9  [key=0, style=solid];
m11_8 -> m11_11  [key=2, style=dotted];
m11_9 -> m11_6  [color=blue, key=0, style=bold];
m11_52 -> m11_53  [key=0, style=solid];
m11_53 -> m11_54  [key=0, style=solid];
m11_53 -> m11_10  [key=2, style=dotted];
m11_53 -> m11_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_54 -> m11_55  [key=0, style=solid];
m11_54 -> m11_11  [key=2, style=dotted];
m11_55 -> m11_52  [color=blue, key=0, style=bold];
m11_199 -> m11_200  [key=0, style=solid];
m11_200 -> m11_201  [key=0, style=solid];
m11_200 -> m11_195  [key=2, style=dotted];
m11_201 -> m11_202  [key=0, style=solid];
m11_201 -> m11_24  [key=2, style=dotted];
m11_201 -> m11_203  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_202 -> m11_199  [color=blue, key=0, style=bold];
m11_74 -> m11_75  [key=0, style=solid];
m11_75 -> m11_76  [key=0, style=solid];
m11_75 -> m11_10  [key=2, style=dotted];
m11_75 -> m11_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_76 -> m11_77  [key=0, style=solid];
m11_76 -> m11_11  [key=2, style=dotted];
m11_77 -> m11_74  [color=blue, key=0, style=bold];
m11_0 -> m11_1  [key=0, style=solid];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_4  [key=2, style=dotted];
m11_2 -> m11_3  [key=0, style=solid];
m11_2 -> m11_5  [key=2, style=dotted];
m11_3 -> m11_0  [color=blue, key=0, style=bold];
m11_20 -> m11_21  [key=0, style=solid];
m11_21 -> m11_22  [key=0, style=solid];
m11_21 -> m11_15  [key=2, style=dotted];
m11_21 -> m11_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_22 -> m11_23  [key=0, style=solid];
m11_22 -> m11_24  [key=2, style=dotted];
m11_22 -> m11_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_23 -> m11_20  [color=blue, key=0, style=bold];
m11_31 -> m11_32  [key=0, style=solid];
m11_32 -> m11_33  [key=0, style=solid];
m11_32 -> m11_10  [key=2, style=dotted];
m11_32 -> m11_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_33 -> m11_34  [key=0, style=solid];
m11_33 -> m11_11  [key=2, style=dotted];
m11_34 -> m11_31  [color=blue, key=0, style=bold];
m11_63 -> m11_64  [key=0, style=solid];
m11_64 -> m11_65  [key=0, style=solid];
m11_64 -> m11_67  [key=2, style=dotted];
m11_64 -> m11_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_65 -> m11_66  [key=0, style=solid];
m11_65 -> m11_24  [key=2, style=dotted];
m11_65 -> m11_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_66 -> m11_63  [color=blue, key=0, style=bold];
m11_107 -> m11_108  [key=0, style=solid];
m11_108 -> m11_109  [key=0, style=solid];
m11_108 -> m11_102  [key=2, style=dotted];
m11_108 -> m11_111  [key=2, style=dotted];
m11_108 -> m11_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_109 -> m11_110  [key=0, style=solid];
m11_109 -> m11_24  [key=2, style=dotted];
m11_109 -> m11_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_110 -> m11_107  [color=blue, key=0, style=bold];
m11_95 -> m11_96  [key=0, style=solid];
m11_96 -> m11_97  [key=0, style=solid];
m11_96 -> m11_10  [key=2, style=dotted];
m11_96 -> m11_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_97 -> m11_98  [key=0, style=solid];
m11_97 -> m11_11  [key=2, style=dotted];
m11_98 -> m11_95  [color=blue, key=0, style=bold];
m11_41 -> m11_207  [key=0, style=solid];
m11_207 -> m11_41  [color=blue, key=0, style=bold];
m11_19 -> m11_206  [key=0, style=solid];
m11_206 -> m11_19  [color=blue, key=0, style=bold];
m11_176 -> m11_177  [key=0, style=solid];
m11_177 -> m11_178  [key=0, style=solid];
m11_177 -> m11_172  [key=2, style=dotted];
m11_178 -> m11_179  [key=0, style=solid];
m11_178 -> m11_24  [key=2, style=dotted];
m11_178 -> m11_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_179 -> m11_176  [color=blue, key=0, style=bold];
m11_132 -> m11_133  [key=0, style=solid];
m11_133 -> m11_134  [key=0, style=solid];
m11_133 -> m11_102  [key=2, style=dotted];
m11_133 -> m11_10  [key=2, style=dotted];
m11_133 -> m11_136  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_134 -> m11_135  [key=0, style=solid];
m11_134 -> m11_24  [key=2, style=dotted];
m11_134 -> m11_139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_135 -> m11_132  [color=blue, key=0, style=bold];
m11_168 -> m11_169  [key=0, style=solid];
m11_169 -> m11_170  [key=0, style=solid];
m11_169 -> m11_172  [key=2, style=dotted];
m11_170 -> m11_171  [key=0, style=solid];
m11_170 -> m11_24  [key=2, style=dotted];
m11_170 -> m11_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_171 -> m11_168  [color=blue, key=0, style=bold];
m11_85 -> m11_86  [key=0, style=solid];
m11_86 -> m11_87  [key=0, style=solid];
m11_86 -> m11_10  [key=2, style=dotted];
m11_86 -> m11_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_87 -> m11_88  [key=0, style=solid];
m11_87 -> m11_24  [key=2, style=dotted];
m11_87 -> m11_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_88 -> m11_85  [color=blue, key=0, style=bold];
m11_203 -> m11_204  [key=0, style=solid];
m11_12 -> m11_13  [key=0, style=solid];
m11_13 -> m11_14  [key=0, style=solid];
m11_13 -> m11_15  [key=2, style=dotted];
m11_13 -> m11_16  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_14 -> m11_12  [color=blue, key=0, style=bold];
m11_16 -> m11_17  [key=0, style=solid];
m11_17 -> m11_18  [key=0, style=solid];
m11_17 -> m11_19  [key=2, style=dotted];
m11_18 -> m11_16  [color=blue, key=0, style=bold];
m11_25 -> m11_26  [key=0, style=solid];
m11_28 -> m11_29  [key=0, style=solid];
m11_26 -> m11_27  [key=0, style=solid];
m11_26 -> m11_19  [key=2, style=dotted];
m11_27 -> m11_25  [color=blue, key=0, style=bold];
m11_29 -> m11_30  [key=0, style=solid];
m11_29 -> m11_10  [key=2, style=dotted];
m11_29 -> m11_15  [key=2, style=dotted];
m11_30 -> m11_28  [color=blue, key=0, style=bold];
m11_35 -> m11_36  [key=0, style=solid];
m11_36 -> m11_37  [key=0, style=solid];
m11_36 -> m11_10  [key=2, style=dotted];
m11_36 -> m11_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_37 -> m11_35  [color=blue, key=0, style=bold];
m11_38 -> m11_39  [key=0, style=solid];
m11_39 -> m11_40  [key=0, style=solid];
m11_39 -> m11_41  [key=2, style=dotted];
m11_40 -> m11_38  [color=blue, key=0, style=bold];
m11_46 -> m11_47  [key=0, style=solid];
m11_49 -> m11_50  [key=0, style=solid];
m11_47 -> m11_48  [key=0, style=solid];
m11_47 -> m11_41  [key=2, style=dotted];
m11_48 -> m11_46  [color=blue, key=0, style=bold];
m11_50 -> m11_51  [key=0, style=solid];
m11_50 -> m11_10  [key=2, style=dotted];
m11_50 -> m11_15  [key=2, style=dotted];
m11_51 -> m11_49  [color=blue, key=0, style=bold];
m11_56 -> m11_57  [key=0, style=solid];
m11_57 -> m11_58  [key=0, style=solid];
m11_57 -> m11_59  [key=2, style=dotted];
m11_57 -> m11_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_58 -> m11_56  [color=blue, key=0, style=bold];
m11_60 -> m11_61  [key=0, style=solid];
m11_61 -> m11_62  [key=0, style=solid];
m11_61 -> m11_19  [key=2, style=dotted];
m11_62 -> m11_60  [color=blue, key=0, style=bold];
m11_68 -> m11_69  [key=0, style=solid];
m11_71 -> m11_72  [key=0, style=solid];
m11_69 -> m11_70  [key=0, style=solid];
m11_69 -> m11_19  [key=2, style=dotted];
m11_70 -> m11_68  [color=blue, key=0, style=bold];
m11_72 -> m11_73  [key=0, style=solid];
m11_72 -> m11_10  [key=2, style=dotted];
m11_72 -> m11_15  [key=2, style=dotted];
m11_73 -> m11_71  [color=blue, key=0, style=bold];
m11_78 -> m11_79  [key=0, style=solid];
m11_79 -> m11_80  [key=0, style=solid];
m11_79 -> m11_81  [key=2, style=dotted];
m11_79 -> m11_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_80 -> m11_78  [color=blue, key=0, style=bold];
m11_82 -> m11_83  [key=0, style=solid];
m11_83 -> m11_84  [key=0, style=solid];
m11_83 -> m11_41  [key=2, style=dotted];
m11_84 -> m11_82  [color=blue, key=0, style=bold];
m11_89 -> m11_90  [key=0, style=solid];
m11_92 -> m11_93  [key=0, style=solid];
m11_90 -> m11_91  [key=0, style=solid];
m11_90 -> m11_41  [key=2, style=dotted];
m11_91 -> m11_89  [color=blue, key=0, style=bold];
m11_93 -> m11_94  [key=0, style=solid];
m11_93 -> m11_10  [key=2, style=dotted];
m11_93 -> m11_15  [key=2, style=dotted];
m11_94 -> m11_92  [color=blue, key=0, style=bold];
m11_99 -> m11_100  [key=0, style=solid];
m11_100 -> m11_101  [key=0, style=solid];
m11_100 -> m11_102  [key=2, style=dotted];
m11_100 -> m11_103  [key=2, style=dotted];
m11_100 -> m11_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_101 -> m11_99  [color=blue, key=0, style=bold];
m11_104 -> m11_105  [key=0, style=solid];
m11_105 -> m11_106  [key=0, style=solid];
m11_105 -> m11_19  [key=2, style=dotted];
m11_106 -> m11_104  [color=blue, key=0, style=bold];
m11_112 -> m11_113  [key=0, style=solid];
m11_115 -> m11_116  [key=0, style=solid];
m11_113 -> m11_114  [key=0, style=solid];
m11_113 -> m11_19  [key=2, style=dotted];
m11_114 -> m11_112  [color=blue, key=0, style=bold];
m11_116 -> m11_117  [key=0, style=solid];
m11_116 -> m11_10  [key=2, style=dotted];
m11_116 -> m11_15  [key=2, style=dotted];
m11_116 -> m11_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_117 -> m11_115  [color=blue, key=0, style=bold];
m11_118 -> m11_119  [key=0, style=solid];
m11_119 -> m11_120  [key=0, style=solid];
m11_120 -> m11_118  [color=blue, key=0, style=bold];
m11_125 -> m11_126  [key=0, style=solid];
m11_126 -> m11_127  [key=0, style=solid];
m11_126 -> m11_102  [key=2, style=dotted];
m11_126 -> m11_128  [key=2, style=dotted];
m11_126 -> m11_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_127 -> m11_125  [color=blue, key=0, style=bold];
m11_129 -> m11_130  [key=0, style=solid];
m11_130 -> m11_131  [key=0, style=solid];
m11_130 -> m11_41  [key=2, style=dotted];
m11_131 -> m11_129  [color=blue, key=0, style=bold];
m11_136 -> m11_137  [key=0, style=solid];
m11_139 -> m11_140  [key=0, style=solid];
m11_137 -> m11_138  [key=0, style=solid];
m11_137 -> m11_41  [key=2, style=dotted];
m11_138 -> m11_136  [color=blue, key=0, style=bold];
m11_140 -> m11_141  [key=0, style=solid];
m11_140 -> m11_10  [key=2, style=dotted];
m11_140 -> m11_15  [key=2, style=dotted];
m11_140 -> m11_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_141 -> m11_139  [color=blue, key=0, style=bold];
m11_142 -> m11_143  [key=0, style=solid];
m11_143 -> m11_144  [key=0, style=solid];
m11_144 -> m11_142  [color=blue, key=0, style=bold];
m11_149 -> m11_150  [key=0, style=solid];
m11_150 -> m11_151  [key=0, style=solid];
m11_150 -> m11_152  [key=2, style=dotted];
m11_151 -> m11_149  [color=blue, key=0, style=bold];
m11_157 -> m11_158  [key=0, style=solid];
m11_158 -> m11_159  [key=0, style=solid];
m11_158 -> m11_152  [key=2, style=dotted];
m11_159 -> m11_157  [color=blue, key=0, style=bold];
m11_164 -> m11_165  [key=0, style=solid];
m11_165 -> m11_166  [key=0, style=solid];
m11_165 -> m11_167  [key=2, style=dotted];
m11_166 -> m11_164  [color=blue, key=0, style=bold];
m11_173 -> m11_174  [key=0, style=solid];
m11_174 -> m11_175  [key=0, style=solid];
m11_174 -> m11_10  [key=2, style=dotted];
m11_174 -> m11_152  [key=2, style=dotted];
m11_175 -> m11_173  [color=blue, key=0, style=bold];
m11_180 -> m11_181  [key=0, style=solid];
m11_181 -> m11_182  [key=0, style=solid];
m11_181 -> m11_10  [key=2, style=dotted];
m11_181 -> m11_152  [key=2, style=dotted];
m11_182 -> m11_180  [color=blue, key=0, style=bold];
m11_187 -> m11_188  [key=0, style=solid];
m11_188 -> m11_189  [key=0, style=solid];
m11_188 -> m11_190  [key=2, style=dotted];
m11_189 -> m11_187  [color=blue, key=0, style=bold];
m11_196 -> m11_197  [key=0, style=solid];
m11_197 -> m11_198  [key=0, style=solid];
m11_197 -> m11_10  [key=2, style=dotted];
m11_197 -> m11_152  [key=2, style=dotted];
m11_198 -> m11_196  [color=blue, key=0, style=bold];
m11_204 -> m11_205  [key=0, style=solid];
m11_204 -> m11_10  [key=2, style=dotted];
m11_204 -> m11_152  [key=2, style=dotted];
m11_205 -> m11_203  [color=blue, key=0, style=bold];
m11_42 -> m11_43  [key=0, style=solid];
m11_43 -> m11_44  [key=0, style=solid];
m11_43 -> m11_10  [key=2, style=dotted];
m11_43 -> m11_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_44 -> m11_45  [key=0, style=solid];
m11_44 -> m11_24  [key=2, style=dotted];
m11_44 -> m11_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_45 -> m11_42  [color=blue, key=0, style=bold];
m11_145 -> m11_146  [key=0, style=solid];
m11_146 -> m11_147  [key=0, style=solid];
m11_146 -> m11_10  [key=2, style=dotted];
m11_146 -> m11_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_147 -> m11_148  [key=0, style=solid];
m11_147 -> m11_11  [key=2, style=dotted];
m11_148 -> m11_145  [color=blue, key=0, style=bold];
m11_121 -> m11_122  [key=0, style=solid];
m11_122 -> m11_123  [key=0, style=solid];
m11_122 -> m11_10  [key=2, style=dotted];
m11_122 -> m11_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_123 -> m11_124  [key=0, style=solid];
m11_123 -> m11_11  [key=2, style=dotted];
m11_124 -> m11_121  [color=blue, key=0, style=bold];
m11_183 -> m11_184  [key=0, style=solid];
m11_184 -> m11_185  [key=0, style=solid];
m11_184 -> m11_10  [key=2, style=dotted];
m11_184 -> m11_187  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_185 -> m11_186  [key=0, style=solid];
m11_185 -> m11_11  [key=2, style=dotted];
m11_186 -> m11_183  [color=blue, key=0, style=bold];
m11_208 -> m11_1  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_13  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_21  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_22  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_29  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_32  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_36  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_43  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_44  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_50  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_64  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_65  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_86  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_87  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_108  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_109  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_133  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_134  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_146  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_150  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_154  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_155  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_158  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_169  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_170  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_177  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_178  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_192  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_193  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_200  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m11_208 -> m11_201  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
}
