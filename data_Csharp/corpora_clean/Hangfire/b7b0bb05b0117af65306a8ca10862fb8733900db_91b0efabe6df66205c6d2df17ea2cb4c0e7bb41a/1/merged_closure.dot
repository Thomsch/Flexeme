digraph  {
n0 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="34-34"];
n4 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", label="!IsSqlEditionSupported(connection)", span="40-40"];
n8 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", label="connection.Execute(script)", span="51-51"];
n12 [cluster="Unk.Debug", label="Entry Unk.Debug", span=""];
n5 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", label="throw new PlatformNotSupportedException(''The SQL Server edition of the target server is unsupported, e.g. SQL Azure.'');", span="42-42"];
n13 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.IsSqlEditionSupported(SqlConnection)", label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.IsSqlEditionSupported(SqlConnection)", span="56-56"];
n7 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", label="script = script.Replace(''SET @TARGET_SCHEMA_VERSION = 2;'', ''SET @TARGET_SCHEMA_VERSION = '' + RequiredSchemaVersion + '';'')", span="49-49"];
n15 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", label="Entry HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", span="62-62"];
n16 [cluster="string.Replace(string, string)", label="Entry string.Replace(string, string)", span="0-0"];
n9 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", label="Log.Debug(''HangFire SQL objects installed.'')", span="53-53"];
n17 [cluster="Unk.Execute", label="Entry Unk.Execute", span=""];
n10 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", label="Exit HangFire.SqlServer.SqlServerObjectsInstaller.Install(SqlConnection)", span="34-34"];
n14 [cluster="System.PlatformNotSupportedException.PlatformNotSupportedException(string)", label="Entry System.PlatformNotSupportedException.PlatformNotSupportedException(string)", span="0-0"];
n11 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n19 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.IsSqlEditionSupported(SqlConnection)", label="return edition >= SqlEngineEdition.Standard && edition <= SqlEngineEdition.Express;", span="59-59"];
n21 [cluster="Unk.>", label="Entry Unk.>", span=""];
n22 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n20 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.IsSqlEditionSupported(SqlConnection)", label="Exit HangFire.SqlServer.SqlServerObjectsInstaller.IsSqlEditionSupported(SqlConnection)", span="56-56"];
n23 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", label="var stream = assembly.GetManifestResourceStream(resourceName)", span="64-64"];
n24 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", label="stream == null", span="66-66"];
n29 [cluster="System.Reflection.Assembly.GetManifestResourceStream(string)", label="Entry System.Reflection.Assembly.GetManifestResourceStream(string)", span="0-0"];
n26 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", label="var reader = new StreamReader(stream)", span="74-74"];
n27 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", label="return reader.ReadToEnd();", span="76-76"];
n32 [cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0"];
n28 [cluster="HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", label="Exit HangFire.SqlServer.SqlServerObjectsInstaller.GetStringResource(System.Reflection.Assembly, string)", span="62-62"];
n30 [cluster="System.InvalidOperationException.InvalidOperationException(string)", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
n31 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
n33 [cluster="System.IO.StreamReader.ReadToEnd()", label="Entry System.IO.StreamReader.ReadToEnd()", span="0-0"];
m0_0 [cluster="Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", file="BackgroundJobClientException.cs", label="Entry Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", span="23-23"];
m0_1 [cluster="Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", file="BackgroundJobClientException.cs", label="Exit Hangfire.BackgroundJobClientException.BackgroundJobClientException(string, System.Exception)", span="23-23"];
m3_12 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86"];
m3_14 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="89-89"];
m3_15 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="90-90"];
m3_16 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="91-91"];
m3_17 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="92-92"];
m3_13 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="logger.InfoFormat(''Using the following options for Hangfire Server:'')", span="88-88"];
m3_18 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="BackgroundJobServerOptions.cs", label="Exit Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="86-86"];
m3_0 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34"];
m3_1 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="WorkerCount = Math.Min(Environment.ProcessorCount * 5, MaxDefaultWorkerCount)", span="36-36"];
m3_11 [cluster="System.Math.Min(int, int)", file="BackgroundJobServerOptions.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m3_19 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="BackgroundJobServerOptions.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="210-210"];
m3_2 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="37-37"];
m3_3 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ShutdownTimeout = BackgroundProcessingServer.DefaultShutdownTimeout", span="38-38"];
m3_21 [cluster="Unk.Join", file="BackgroundJobServerOptions.cs", label="Entry Unk.Join", span=""];
m3_4 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", color=green, community=0, file="BackgroundJobServerOptions.cs", label="SchedulePollingInterval = DelayedJobScheduler.DefaultPollingInterval", prediction=0, span="39-39"];
m3_5 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="HeartbeatInterval = ServerHeartbeat.DefaultHeartbeatInterval", span="40-40"];
m3_6 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ServerTimeout = ServerWatchdog.DefaultServerTimeout", span="41-41"];
m3_7 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="ServerCheckInterval = ServerWatchdog.DefaultCheckInterval", span="42-42"];
m3_8 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="FilterProvider = JobFilterProviders.Providers", span="44-44"];
m3_9 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Activator = JobActivator.Current", span="45-45"];
m3_10 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="BackgroundJobServerOptions.cs", label="Exit Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="34-34"];
m3_22 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="Entry lambda expression", span="90-90"];
m3_23 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="''''' + x + '''''", span="90-90"];
m3_24 [cluster="lambda expression", file="BackgroundJobServerOptions.cs", label="Exit lambda expression", span="90-90"];
m3_20 [cluster="Unk.Select", file="BackgroundJobServerOptions.cs", label="Entry Unk.Select", span=""];
m3_25 [file="BackgroundJobServerOptions.cs", label="Hangfire.BackgroundJobServerOptions", span=""];
m4_2 [cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="IBackgroundJobClient.cs", label="Entry Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="63-63"];
m4_3 [cluster="Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="IBackgroundJobClient.cs", label="Exit Hangfire.IBackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="63-63"];
m4_0 [cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="IBackgroundJobClient.cs", label="Entry Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="50-50"];
m4_1 [cluster="Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="IBackgroundJobClient.cs", label="Exit Hangfire.IBackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="50-50"];
m5_52 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", file="Job.cs", label="var fetchedTimestamp = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId), ''Fetched'')", span="82-83"];
m5_84 [cluster="Hangfire.Common.Job.GetExpressionValues(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)", file="Job.cs", label="return expressions.Select(GetExpressionValue).ToArray();", span="364-364"];
m5_85 [cluster="Hangfire.Common.Job.GetExpressionValues(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)", file="Job.cs", label="Exit Hangfire.Common.Job.GetExpressionValues(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)", span="362-362"];
m5_40 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="callExpression.Object != null", span="239-239"];
m5_82 [cluster="string.Format(string, object, object)", file="Job.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m5_41 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="var objectValue = GetExpressionValue(callExpression.Object)", span="241-241"];
m5_6 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", file="Job.cs", label="throw new InvalidOperationException(String.Format(''Unknown period '{0}'.'', timeAgo));", span="15-15"];
m5_14 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="Job.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
m5_15 [cluster="Unk.SetEntryInHash", file="Job.cs", label="Entry Unk.SetEntryInHash", span=""];
m5_16 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", file="Job.cs", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", span="24-24"];
m5_13 [cluster="string.Format(string, object)", file="Job.cs", label="Entry string.Format(string, object)", span="0-0"];
m5_7 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", file="Job.cs", label="Redis.Client.SetEntryInHash(\r\n                String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                ''Checked'',\r\n                JobHelper.ToStringTimestamp(time))", span="17-20"];
m5_9 [cluster="string.Equals(string)", file="Job.cs", label="Entry string.Equals(string)", span="0-0"];
m5_11 [cluster="System.DateTime.AddDays(double)", file="Job.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m5_8 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", file="Job.cs", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", span="10-10"];
m5_10 [cluster="System.DateTime.AddMilliseconds(double)", file="Job.cs", label="Entry System.DateTime.AddMilliseconds(double)", span="0-0"];
m5_12 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="Job.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m5_17 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", file="Job.cs", label="DateTime time", span="26-26"];
m5_39 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="Type type", span="237-237"];
m5_91 [cluster="Hangfire.Common.CachedExpressionCompiler.Evaluate(System.Linq.Expressions.Expression)", file="Job.cs", label="Entry Hangfire.Common.CachedExpressionCompiler.Evaluate(System.Linq.Expressions.Expression)", span="25-25"];
m5_32 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenItMarksTheJobAsChecked()", file="Job.cs", label="var checkedTimestamp = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                ''Checked'')", span="49-51"];
m5_81 [cluster="System.Type.IsAssignableFrom(System.Type)", file="Job.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m5_51 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", file="Job.cs", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", span="80-80"];
m5_23 [cluster="Hangfire.Common.ReflectedAttributeCache.GetTypeFilterAttributes(System.Type)", file="Job.cs", label="Entry Hangfire.Common.ReflectedAttributeCache.GetTypeFilterAttributes(System.Type)", span="33-33"];
m5_18 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.GivenItWasFetchedAAgo(string)", file="Job.cs", label="timeAgo.Equals(''millisecond'')", span="27-27"];
m5_20 [cluster="Hangfire.Common.Job.GetTypeFilterAttributes(bool)", file="Job.cs", label="Entry Hangfire.Common.Job.GetTypeFilterAttributes(bool)", span="178-178"];
m5_22 [cluster="Hangfire.Common.Job.GetTypeFilterAttributes(bool)", file="Job.cs", label="Exit Hangfire.Common.Job.GetTypeFilterAttributes(bool)", span="178-178"];
m5_19 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="Entry Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", span="297-297"];
m5_21 [cluster="Hangfire.Common.Job.GetTypeFilterAttributes(bool)", color=green, community=0, file="Job.cs", label="return useCache\r\n                ? ReflectedAttributeCache.GetTypeFilterAttributes(Type)\r\n                : GetFilterAttributes(Type);", prediction=1, span="180-182"];
m5_24 [cluster="Hangfire.Common.Job.GetFilterAttributes(System.Reflection.MemberInfo)", file="Job.cs", label="Entry Hangfire.Common.Job.GetFilterAttributes(System.Reflection.MemberInfo)", span="192-192"];
m5_53 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", file="Job.cs", label="Assert.IsNotNull(fetchedTimestamp)", span="85-85"];
m5_59 [cluster="Hangfire.Common.Job.FromExpression<TType>(System.Linq.Expressions.Expression<System.Action<TType>>)", file="Job.cs", label="return new Job(\r\n                typeof(TType),\r\n                callExpression.Method,\r\n                GetExpressionValues(callExpression.Arguments));", span="291-294"];
m5_56 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", file="Job.cs", label="var fetchedTimestamp = Redis.Client.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId), ''Fetched'')", span="91-92"];
m5_57 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", file="Job.cs", label="Assert.IsNull(fetchedTimestamp)", span="94-94"];
m5_54 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", file="Job.cs", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobHasTheFetchedFlagSet()", span="80-80"];
m5_58 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", file="Job.cs", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", span="89-89"];
m5_55 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", file="Job.cs", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheFetchedFlagSet()", span="89-89"];
m5_60 [cluster="Hangfire.Common.Job.FromExpression<TType>(System.Linq.Expressions.Expression<System.Action<TType>>)", file="Job.cs", label="Exit Hangfire.Common.Job.FromExpression<TType>(System.Linq.Expressions.Expression<System.Action<TType>>)", span="281-281"];
m5_31 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenItMarksTheJobAsChecked()", file="Job.cs", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.ThenItMarksTheJobAsChecked()", span="47-47"];
m5_30 [cluster="Hangfire.Common.Job.GetFilterAttributes(System.Reflection.MemberInfo)", file="Job.cs", label="Exit Hangfire.Common.Job.GetFilterAttributes(System.Reflection.MemberInfo)", span="192-192"];
m5_0 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", file="Job.cs", label="Entry HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", span="10-10"];
m5_1 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", file="Job.cs", label="DateTime time", span="12-12"];
m5_2 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", file="Job.cs", label="timeAgo.Equals(''millisecond'')", span="13-13"];
m5_4 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", file="Job.cs", label="timeAgo.Equals(''day'')", span="14-14"];
m5_3 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", file="Job.cs", label="time = DateTime.UtcNow.AddMilliseconds(-1)", span="13-13"];
m5_5 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ItWasCheckedAAgo(string)", file="Job.cs", label="time = DateTime.UtcNow.AddDays(-1)", span="14-14"];
m5_49 [cluster="HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheCheckedFlagSet()", file="Job.cs", label="Exit HangFire.Tests.DequeuedJobsWatcherSteps.ThenTheJobDoesNotHaveTheCheckedFlagSet()", span="70-70"];
m5_88 [cluster="Hangfire.Common.Job.GetExpressionValue(System.Linq.Expressions.Expression)", file="Job.cs", label="var constantExpression = expression as ConstantExpression", span="369-369"];
m5_89 [cluster="Hangfire.Common.Job.GetExpressionValue(System.Linq.Expressions.Expression)", file="Job.cs", label="return constantExpression != null\r\n                ? constantExpression.Value\r\n                : CachedExpressionCompiler.Evaluate(expression);", span="371-373"];
m5_90 [cluster="Hangfire.Common.Job.GetExpressionValue(System.Linq.Expressions.Expression)", file="Job.cs", label="Exit Hangfire.Common.Job.GetExpressionValue(System.Linq.Expressions.Expression)", span="367-367"];
m5_50 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="Job.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m5_87 [cluster="Unk.ToArray", file="Job.cs", label="Entry Unk.ToArray", span=""];
m5_25 [cluster="Hangfire.Common.Job.GetMethodFilterAttributes(bool)", file="Job.cs", label="Entry Hangfire.Common.Job.GetMethodFilterAttributes(bool)", span="185-185"];
m5_26 [cluster="Hangfire.Common.Job.GetMethodFilterAttributes(bool)", file="Job.cs", label="return useCache\r\n                ? ReflectedAttributeCache.GetMethodFilterAttributes(Method)\r\n                : GetFilterAttributes(Method);", span="187-189"];
m5_27 [cluster="Hangfire.Common.Job.GetMethodFilterAttributes(bool)", file="Job.cs", label="Exit Hangfire.Common.Job.GetMethodFilterAttributes(bool)", span="185-185"];
m5_28 [cluster="Hangfire.Common.ReflectedAttributeCache.GetMethodFilterAttributes(System.Reflection.MethodInfo)", file="Job.cs", label="Entry Hangfire.Common.ReflectedAttributeCache.GetMethodFilterAttributes(System.Reflection.MethodInfo)", span="38-38"];
m5_80 [cluster="System.NotSupportedException.NotSupportedException(string)", file="Job.cs", label="Entry System.NotSupportedException.NotSupportedException(string)", span="0-0"];
m5_29 [cluster="HangFire.Server.DequeuedJobsWatcher.DequeuedJobsWatcher()", file="Job.cs", label="Entry HangFire.Server.DequeuedJobsWatcher.DequeuedJobsWatcher()", span="8-8"];
m5_38 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="throw new ArgumentException(''Expression body should be of type `MethodCallExpression`'', ''methodCall'');", span="234-234"];
m5_86 [cluster="Unk.Select", file="Job.cs", label="Entry Unk.Select", span=""];
m5_46 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="return new Job(\r\n                // ReSharper disable once AssignNullToNotNullAttribute\r\n                type,\r\n                callExpression.Method,\r\n                GetExpressionValues(callExpression.Arguments));", span="254-258"];
m5_47 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="Exit Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="227-227"];
m5_48 [cluster="System.ArgumentException.ArgumentException(string, string)", file="Job.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m5_37 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="callExpression == null", span="232-232"];
m5_33 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="227-227"];
m5_34 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="methodCall == null", span="229-229"];
m5_35 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="throw new ArgumentNullException(''methodCall'');", span="229-229"];
m5_36 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="var callExpression = methodCall.Body as MethodCallExpression", span="231-231"];
m5_42 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="objectValue == null", span="242-242"];
m5_43 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="throw new InvalidOperationException(''Expression object should be not null.'');", span="244-244"];
m5_44 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="type = objectValue.GetType()", span="247-247"];
m5_45 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="Job.cs", label="type = callExpression.Method.DeclaringType", span="251-251"];
m5_83 [cluster="System.Reflection.MethodBase.GetParameters()", file="Job.cs", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
m5_61 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="!method.IsPublic", span="306-306"];
m5_63 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="method.ContainsGenericParameters", span="311-311"];
m5_65 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="method.DeclaringType == null", span="316-316"];
m5_67 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="!method.DeclaringType.IsAssignableFrom(type)", span="321-321"];
m5_68 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="throw new ArgumentException(\r\n                    String.Format(''The type `{0}` must be derived from the `{1}` type.'', method.DeclaringType, type),\r\n                    typeParameterName);", span="323-325"];
m5_69 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="typeof(Task).IsAssignableFrom(method.ReturnType)", span="328-328"];
m5_71 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="var parameters = method.GetParameters()", span="333-333"];
m5_72 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="parameters.Length != argumentCount", span="335-335"];
m5_73 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="throw new ArgumentException(\r\n                    ''Argument count must be equal to method parameter count.'',\r\n                    argumentParameterName);", span="337-339"];
m5_62 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="throw new NotSupportedException(''Only public methods can be invoked in the background.'');", span="308-308"];
m5_64 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="throw new NotSupportedException(''Job method can not contain unassigned generic type parameters.'');", span="313-313"];
m5_66 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="throw new NotSupportedException(''Global methods are not supported. Use class methods instead.'');", span="318-318"];
m5_70 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="throw new NotSupportedException(''Async methods are not supported. Please make them synchronous before using them in background.'');", span="330-330"];
m5_74 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label=parameters, span="342-342"];
m5_76 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="throw new NotSupportedException(\r\n                        ''Output parameters are not supported: there is no guarantee that specified method will be invoked inside the same process.'');", span="350-351"];
m5_78 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="throw new NotSupportedException(\r\n                        ''Parameters, passed by reference, are not supported: there is no guarantee that specified method will be invoked inside the same process.'');", span="356-357"];
m5_77 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="parameter.ParameterType.IsByRef", span="354-354"];
m5_75 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="parameter.IsOut", span="348-348"];
m5_79 [cluster="Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", file="Job.cs", label="Exit Hangfire.Common.Job.Validate(System.Type, string, System.Reflection.MethodInfo, string, int, string)", span="297-297"];
m5_92 [file="Job.cs", label="Hangfire.Common.Job", span=""];
m6_0 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", file="JobFacts.cs", label="Entry HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", span="32-32"];
m6_1 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", file="JobFacts.cs", label="_manager = manager", span="34-34"];
m6_2 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", file="JobFacts.cs", label="_context = context", span="35-35"];
m6_3 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", file="JobFacts.cs", label="Logger = LogManager.GetLogger(String.Format(''HangFire.Worker.{0}'', _context.WorkerNumber))", span="37-37"];
m6_4 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", file="JobFacts.cs", label="_thread = new Thread(DoWork)\r\n                {\r\n                    Name = String.Format(''HangFire.Worker.{0}'', _context.WorkerNumber),\r\n                    IsBackground = true\r\n                }", span="39-43"];
m6_25 [cluster="HangFire.Server.Worker.Dispose()", file="JobFacts.cs", label="_thread.Join()", span="88-88"];
m6_29 [cluster="Unk.CollectScenarioErrors", file="JobFacts.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m6_47 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="JobFacts.cs", label="this.FeatureBackground()", span="108-108"];
m6_74 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="JobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="168-168"];
m6_14 [cluster="HangFire.Server.Worker.SendStop()", file="JobFacts.cs", label="Exit HangFire.Server.Worker.SendStop()", span="47-47"];
m6_15 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="JobFacts.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m6_16 [cluster="HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", file="JobFacts.cs", label="Entry HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", span="71-71"];
m6_17 [cluster="HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", file="JobFacts.cs", label=_jobLock, span="73-73"];
m6_21 [cluster="System.Threading.ManualResetEventSlim.Set()", file="JobFacts.cs", label="Entry System.Threading.ManualResetEventSlim.Set()", span="0-0"];
m6_18 [cluster="HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", file="JobFacts.cs", label="_jobPayload = payload", span="75-75"];
m6_19 [cluster="HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", file="JobFacts.cs", label="_jobIsReady.Set()", span="78-78"];
m6_20 [cluster="HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", file="JobFacts.cs", label="Exit HangFire.Server.Worker.Process(HangFire.Server.JobPayload)", span="71-71"];
m6_48 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="JobFacts.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Name'',\r\n                        ''Value''})", span="110-112"];
m6_10 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureTearDown()", file="JobFacts.cs", label="testRunner.OnFeatureEnd()", span="41-41"];
m6_30 [cluster="HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", file="JobFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.FeatureBackground()", span="71-71"];
m6_26 [cluster="HangFire.Server.Worker.Dispose()", file="JobFacts.cs", label="_cts.Dispose()", span="90-90"];
m6_27 [cluster="HangFire.Server.Worker.Dispose()", file="JobFacts.cs", label="_jobIsReady.Dispose()", span="91-91"];
m6_28 [cluster="HangFire.Server.Worker.Dispose()", file="JobFacts.cs", label="Exit HangFire.Server.Worker.Dispose()", span="81-81"];
m6_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JobFacts.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m6_89 [cluster="Unk.And", file="JobFacts.cs", label="Entry Unk.And", span=""];
m6_99 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="JobFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", span="225-225"];
m6_100 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="JobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should remove the job from the succeeded list'', ((string[])(null)))", span="227-227"];
m6_101 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="JobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="229-229"];
m6_102 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="JobFacts.cs", label="this.FeatureBackground()", span="231-231"];
m6_103 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="JobFacts.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="233-233"];
m6_104 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="JobFacts.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="235-235"];
m6_105 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="JobFacts.cs", label="testRunner.Then(''the job should be removed from the succeeded list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="237-237"];
m6_106 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="JobFacts.cs", label="this.ScenarioCleanup()", span="239-239"];
m6_107 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", file="JobFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldRemoveTheJobFromTheSucceededList()", span="225-225"];
m6_44 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="JobFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", span="102-102"];
m6_5 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.JobManager, HangFire.Server.WorkerContext)", file="JobFacts.cs", label="_thread.Start()", span="44-44"];
m6_9 [cluster="System.Threading.Thread.Thread(System.Threading.ThreadStart)", file="JobFacts.cs", label="Entry System.Threading.Thread.Thread(System.Threading.ThreadStart)", span="0-0"];
m6_11 [cluster="HangFire.Server.Worker.SendStop()", file="JobFacts.cs", label="Entry HangFire.Server.Worker.SendStop()", span="47-47"];
m6_12 [cluster="HangFire.Server.Worker.SendStop()", file="JobFacts.cs", label="_stopSent = true", span="49-49"];
m6_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="JobFacts.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m6_31 [cluster="System.Threading.ManualResetEventSlim.Dispose()", file="JobFacts.cs", label="Entry System.Threading.ManualResetEventSlim.Dispose()", span="0-0"];
m6_32 [cluster="HangFire.Server.Worker.DoWork()", file="JobFacts.cs", label="Entry HangFire.Server.Worker.DoWork()", span="95-95"];
m6_33 [cluster="HangFire.Server.Worker.DoWork()", file="JobFacts.cs", label=true, span="99-99"];
m6_8 [cluster="Unk.OnFeatureStart", file="JobFacts.cs", label="Entry Unk.OnFeatureStart", span=""];
m6_45 [cluster="HangFire.Tests.States.SucceededStateFeature.ItShouldHaveTheCorrectPropertiesSet()", file="JobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should have the correct properties set'', ((string[])(null)))", span="104-104"];
m6_34 [cluster="Unk.Given", file="JobFacts.cs", label="Entry Unk.Given", span=""];
m6_35 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="JobFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", span="85-85"];
m6_36 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="JobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name should be \'Succeeded\''', ((string[])(null)))", span="87-87"];
m6_37 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="JobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="89-89"];
m6_38 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="JobFacts.cs", label="this.FeatureBackground()", span="91-91"];
m6_41 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="JobFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", span="85-85"];
m6_42 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="JobFacts.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m6_40 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="JobFacts.cs", label="this.ScenarioCleanup()", span="95-95"];
m6_39 [cluster="HangFire.Tests.States.SucceededStateFeature.StateNameShouldBeSucceeded()", file="JobFacts.cs", label="testRunner.Then(''the state name should be equal to \'Succeeded\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="93-93"];
m6_43 [cluster="Unk.Then", file="JobFacts.cs", label="Entry Unk.Then", span=""];
m6_77 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="JobFacts.cs", label="testRunner.Then(''the job should be added to the succeeded list'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="174-174"];
m6_72 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="JobFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", span="164-164"];
m6_78 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="JobFacts.cs", label="this.ScenarioCleanup()", span="176-176"];
m6_13 [cluster="HangFire.Server.Worker.SendStop()", file="JobFacts.cs", label="_cts.Cancel()", span="50-50"];
m6_46 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="Entry HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", span="125-125"];
m6_49 [cluster="Unk.Fatal", file="JobFacts.cs", label="Entry Unk.Fatal", span=""];
m6_50 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="String.IsNullOrEmpty(payload.Type)", span="127-127"];
m6_51 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="Logger.Warn(String.Format(\r\n                    ''Could not process the job '{0}': it does not exist in the storage.'',\r\n                    payload.Id))", span="129-131"];
m6_52 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="return;", span="133-133"];
m6_73 [cluster="HangFire.Filters.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", file="JobFacts.cs", label="Entry HangFire.Filters.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", span="13-13"];
m6_75 [cluster="Unk.Error", file="JobFacts.cs", label="Entry Unk.Error", span=""];
m6_76 [cluster="HangFire.States.SucceededState.SucceededState(string, string)", file="JobFacts.cs", label="Entry HangFire.States.SucceededState.SucceededState(string, string)", span="12-12"];
m6_79 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldAddTheJobToTheSucceededList()", file="JobFacts.cs", label="HangFire.Server.Worker", span=""];
m6_70 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="JobFacts.cs", label="this.ScenarioCleanup()", span="157-157"];
m6_63 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="exception == null", span="178-178"];
m6_80 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="JobFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", span="183-183"];
m6_81 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="JobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should persist the job data'', ((string[])(null)))", span="185-185"];
m6_82 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="JobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="187-187"];
m6_83 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="JobFacts.cs", label="this.FeatureBackground()", span="189-189"];
m6_84 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="JobFacts.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="191-191"];
m6_85 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="JobFacts.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="193-193"];
m6_86 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="JobFacts.cs", label="testRunner.Then(''it should persist the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="195-195"];
m6_87 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="JobFacts.cs", label="this.ScenarioCleanup()", span="197-197"];
m6_88 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", file="JobFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldPersistTheJobData()", span="183-183"];
m6_90 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="JobFacts.cs", label="Entry HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", span="204-204"];
m6_91 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="JobFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''After unapplying it should change the stats'', ((string[])(null)))", span="206-206"];
m6_92 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="JobFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="208-208"];
m6_93 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="JobFacts.cs", label="this.FeatureBackground()", span="210-210"];
m6_94 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="JobFacts.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="212-212"];
m6_95 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="JobFacts.cs", label="testRunner.And(''after I unapply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="214-214"];
m6_96 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="JobFacts.cs", label="testRunner.Then(''it should decrease the succeeded counter'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="216-216"];
m6_97 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="JobFacts.cs", label="this.ScenarioCleanup()", span="218-218"];
m6_98 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", file="JobFacts.cs", label="Exit HangFire.Tests.States.SucceededStateFeature.AfterUnapplyingItShouldChangeTheStats()", span="204-204"];
m6_69 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="JobFacts.cs", label="testRunner.Then(''it should increase the succeeded counter'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="155-155"];
m6_54 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="return;", span="141-141"];
m6_68 [cluster="HangFire.Tests.States.SucceededStateFeature.AfterApplyingItShouldChangeTheStats()", file="JobFacts.cs", label="testRunner.When(''I apply it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="153-153"];
m6_55 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="Exception exception = null", span="149-149"];
m6_56 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="ServerJobDescriptor jobDescriptor = null", span="151-151"];
m6_57 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="jobDescriptor = new ServerJobDescriptor(\r\n                    _redis, _context.Activator, payload)", span="154-155"];
m6_58 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="var performContext = new PerformContext(\r\n                    _context, jobDescriptor)", span="157-158"];
m6_59 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="_context.Performer.PerformJob(performContext)", span="160-160"];
m6_60 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label=Exception, span="162-162"];
m6_61 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="exception = ex", span="164-164"];
m6_62 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="Logger.Error(String.Format(\r\n                    ''Failed to process the job '{0}': unexpected exception caught.'',\r\n                    payload.Id))", span="166-168"];
m6_64 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", color=green, community=0, file="JobFacts.cs", label="JobState.Apply(\r\n                    _redis,\r\n                    new SucceededState(payload.Id, ''The job has been completed successfully.''),\r\n                    ProcessingState.Name)", prediction=2, span="180-183"];
m6_65 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="JobState.Apply(\r\n                    _redis,\r\n                    new FailedState(payload.Id, ''The job has been failed.'', exception),\r\n                    ProcessingState.Name)", span="187-190"];
m6_66 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="JobFetcher.RemoveFromFetchedQueue(\r\n                _redis, payload.Id, payload.Queue)", span="198-199"];
m6_67 [cluster="HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", file="JobFacts.cs", label="Exit HangFire.Server.Worker.PerformJob(HangFire.Server.JobPayload)", span="125-125"];
m6_71 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="JobFacts.cs", label="Entry HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", span="47-47"];
m6_22 [cluster="HangFire.Server.Worker.Dispose()", file="JobFacts.cs", label="Entry HangFire.Server.Worker.Dispose()", span="81-81"];
m6_23 [cluster="HangFire.Server.Worker.Dispose()", file="JobFacts.cs", label="!_stopSent", span="83-83"];
m6_24 [cluster="HangFire.Server.Worker.Dispose()", file="JobFacts.cs", label="SendStop()", span="85-85"];
m6_53 [cluster="TechTalk.SpecFlow.Table.cstr", file="JobFacts.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m6_108 [file="JobFacts.cs", label="HangFire.Tests.States.SucceededStateFeature", span=""];
n0 -> n4  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n0 -> n8  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m3_12 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_12 -> m3_15  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_12 -> m3_16  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_12 -> m3_17  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_15 -> m3_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_25 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_15  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_16  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_25 -> m3_17  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m5_6 -> m5_14  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m5_6 -> m5_15  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m5_6 -> m5_16  [color=darkseagreen4, key=1, label="params object[]", style=dashed];
m5_6 -> m5_9  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m5_6 -> m5_11  [color=darkseagreen4, key=1, label="params object[]", style=dashed];
m5_6 -> m5_13  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m5_16 -> m5_18  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_16 -> m5_20  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_16 -> m5_22  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_17 -> m5_23  [color=darkseagreen4, key=1, label=time, style=dashed];
m5_32 -> m5_34  [color=darkseagreen4, key=1, label=checkedTimestamp, style=dashed];
m5_19 -> m5_63  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m5_19 -> m5_65  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m5_19 -> m5_67  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m5_19 -> m5_68  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m5_19 -> m5_69  [color=darkseagreen4, key=1, label="System.Reflection.MethodInfo", style=dashed];
m5_19 -> m5_72  [color=darkseagreen4, key=1, label=int, style=dashed];
m5_19 -> m5_73  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_56 -> m5_59  [color=darkseagreen4, key=1, label=callExpression, style=dashed];
m5_0 -> m5_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_0 -> m5_6  [color=darkseagreen4, key=1, label=string, style=dashed];
m5_1 -> m5_7  [color=darkseagreen4, key=1, label=time, style=dashed];
m5_49 -> m5_89  [color=darkseagreen4, key=1, label="System.Linq.Expressions.Expression", style=dashed];
m5_36 -> m5_46  [color=darkseagreen4, key=1, label=callExpression, style=dashed];
m5_36 -> m5_40  [color=darkseagreen4, key=1, label=callExpression, style=dashed];
m5_71 -> m5_74  [color=darkseagreen4, key=1, label=parameters, style=dashed];
m5_74 -> m5_77  [color=darkseagreen4, key=1, label=parameter, style=dashed];
m5_92 -> m5_21  [color=green, key=1, label="Hangfire.Common.Job", style=dashed];
m5_92 -> m5_14  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m5_92 -> m5_15  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m5_92 -> m5_16  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m5_92 -> m5_26  [color=darkseagreen4, key=1, label="Hangfire.Common.Job", style=dashed];
m6_48 -> m6_50  [color=darkseagreen4, key=1, label=table1, style=dashed];
m6_46 -> m6_64  [color=green, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_46 -> m6_51  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_46 -> m6_53  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_46 -> m6_62  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_46 -> m6_65  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_46 -> m6_66  [color=darkseagreen4, key=1, label="HangFire.Server.JobPayload", style=dashed];
m6_79 -> m6_64  [color=green, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_5  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_13  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_17  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_19  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_23  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_24  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_25  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_26  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_27  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_34  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_35  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_37  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_38  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_41  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_42  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_51  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_53  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_59  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_62  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_65  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_79 -> m6_66  [color=darkseagreen4, key=1, label="HangFire.Server.Worker", style=dashed];
m6_61 -> m6_63  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_61 -> m6_65  [color=darkseagreen4, key=1, label=exception, style=dashed];
m6_108 -> m6_37  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_38  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_40  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_46  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_47  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_51  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_66  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_67  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_74  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_75  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_78  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_82  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_83  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_87  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_92  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_93  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_97  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_101  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_102  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
m6_108 -> m6_106  [color=darkseagreen4, key=1, label="HangFire.Tests.States.SucceededStateFeature", style=dashed];
}
