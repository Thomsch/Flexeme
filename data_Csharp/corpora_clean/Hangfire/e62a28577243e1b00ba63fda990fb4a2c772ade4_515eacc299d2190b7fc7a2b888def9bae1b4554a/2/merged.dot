digraph  {
n3 [label="HangFire.Web.Pages.FetchedJobsPage", span=""];
n0 [label="Entry HangFire.Web.Pages.FetchedJobsPage.FetchedJobsPage(string)", span="4-4", cluster="HangFire.Web.Pages.FetchedJobsPage.FetchedJobsPage(string)"];
n1 [label="Queue = queue", span="6-6", cluster="HangFire.Web.Pages.FetchedJobsPage.FetchedJobsPage(string)"];
n2 [label="Exit HangFire.Web.Pages.FetchedJobsPage.FetchedJobsPage(string)", span="4-4", cluster="HangFire.Web.Pages.FetchedJobsPage.FetchedJobsPage(string)"];
m2_6 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", span="27-27", cluster="HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", file="IWriteOnlyTransaction.cs"];
m2_7 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", span="27-27", cluster="HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", file="IWriteOnlyTransaction.cs"];
m2_4 [label="Entry HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="26-26", cluster="HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="IWriteOnlyTransaction.cs"];
m2_5 [label="Exit HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="26-26", cluster="HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="IWriteOnlyTransaction.cs"];
m2_0 [label="Entry HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="24-24", cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs"];
m2_1 [label="Exit HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="24-24", cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs"];
m2_22 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="41-41", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="IWriteOnlyTransaction.cs"];
m2_23 [label="Exit HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="41-41", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="IWriteOnlyTransaction.cs"];
m2_26 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="45-45", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="IWriteOnlyTransaction.cs"];
m2_27 [label="Exit HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="45-45", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="IWriteOnlyTransaction.cs"];
m2_2 [label="Entry HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", span="25-25", cluster="HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", file="IWriteOnlyTransaction.cs"];
m2_3 [label="Exit HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", span="25-25", cluster="HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", file="IWriteOnlyTransaction.cs"];
m2_18 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="39-39", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", file="IWriteOnlyTransaction.cs"];
m2_19 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="39-39", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", file="IWriteOnlyTransaction.cs"];
m2_28 [label="Entry HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="46-46", cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="IWriteOnlyTransaction.cs"];
m2_29 [label="Exit HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="46-46", cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="IWriteOnlyTransaction.cs"];
m2_8 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", span="30-30", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", file="IWriteOnlyTransaction.cs"];
m2_9 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", span="30-30", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", file="IWriteOnlyTransaction.cs"];
m2_30 [label="Entry HangFire.Storage.IWriteOnlyTransaction.Commit()", span="48-48", cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="IWriteOnlyTransaction.cs"];
m2_31 [label="Exit HangFire.Storage.IWriteOnlyTransaction.Commit()", span="48-48", cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="IWriteOnlyTransaction.cs"];
m2_10 [label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="33-33", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="IWriteOnlyTransaction.cs"];
m2_11 [label="Exit HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="33-33", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="IWriteOnlyTransaction.cs"];
m2_20 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="40-40", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="IWriteOnlyTransaction.cs"];
m2_21 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="40-40", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="IWriteOnlyTransaction.cs"];
m2_14 [label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="35-35", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="IWriteOnlyTransaction.cs"];
m2_15 [label="Exit HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="35-35", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="IWriteOnlyTransaction.cs"];
m2_12 [label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="34-34", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs"];
m2_13 [label="Exit HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="34-34", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs"];
m2_16 [label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="36-36", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs"];
m2_17 [label="Exit HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="36-36", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="IWriteOnlyTransaction.cs"];
m2_24 [label="Entry HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="44-44", cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="IWriteOnlyTransaction.cs"];
m2_25 [label="Exit HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="44-44", cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="IWriteOnlyTransaction.cs"];
m7_180 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Component_ReturnsUnderlyingComponent()", span="229-229", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Component_ReturnsUnderlyingComponent()", file="RecurringJobScheduler.cs"];
m7_181 [label="var runner = CreateRunner()", span="231-231", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Component_ReturnsUnderlyingComponent()", file="RecurringJobScheduler.cs"];
m7_182 [label="Assert.Same(_component.Object, runner.Component)", span="233-233", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Component_ReturnsUnderlyingComponent()", file="RecurringJobScheduler.cs"];
m7_183 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Component_ReturnsUnderlyingComponent()", span="229-229", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Component_ReturnsUnderlyingComponent()", file="RecurringJobScheduler.cs"];
m7_184 [label="Entry Unk.Same", span="", cluster="Unk.Same", file="RecurringJobScheduler.cs"];
m7_38 [label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0", cluster="System.TimeSpan.FromMilliseconds(double)", file="RecurringJobScheduler.cs"];
m7_11 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RecurringJobScheduler.cs"];
m7_51 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_LeadsToLoopedComponentExecution()", span="67-67", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_LeadsToLoopedComponentExecution()", file="RecurringJobScheduler.cs"];
m7_52 [label="var runner = CreateRunner()", span="69-69", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_LeadsToLoopedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_53 [label="runner.Start()", span="71-71", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_LeadsToLoopedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_54 [label="Thread.Sleep(TimeSpan.FromMilliseconds(100))", span="72-72", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_LeadsToLoopedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_55 [label="_component.Verify(\r\n                x => x.Execute(It.IsNotNull<CancellationToken>()),\r\n                Times.AtLeast(2))", span="74-76", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_LeadsToLoopedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_56 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_LeadsToLoopedComponentExecution()", span="67-67", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_LeadsToLoopedComponentExecution()", file="RecurringJobScheduler.cs"];
m7_131 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalled_AfterStop()", span="163-163", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalled_AfterStop()", file="RecurringJobScheduler.cs"];
m7_132 [label="var runner = CreateRunner()", span="165-165", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalled_AfterStop()", file="RecurringJobScheduler.cs"];
m7_135 [label="Assert.DoesNotThrow(runner.Dispose)", span="169-169", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalled_AfterStop()", file="RecurringJobScheduler.cs"];
m7_133 [label="runner.Start()", span="166-166", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalled_AfterStop()", file="RecurringJobScheduler.cs"];
m7_134 [label="runner.Stop()", span="167-167", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalled_AfterStop()", file="RecurringJobScheduler.cs"];
m7_136 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalled_AfterStop()", span="163-163", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalled_AfterStop()", file="RecurringJobScheduler.cs"];
m7_0 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.ServerComponentRunnerFacts()", span="13-13", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.ServerComponentRunnerFacts()", file="RecurringJobScheduler.cs"];
m7_1 [label="_component = new Mock<IServerComponent>()", span="15-15", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.ServerComponentRunnerFacts()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_2 [label="_options = new ServerComponentRunnerOptions\r\n            {\r\n                ShutdownTimeout = TimeSpan.Zero // Letting tests to timeout\r\n            }", span="16-19", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.ServerComponentRunnerFacts()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_3 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.ServerComponentRunnerFacts()", span="13-13", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.ServerComponentRunnerFacts()", file="RecurringJobScheduler.cs"];
m7_27 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="RecurringJobScheduler.cs"];
m7_137 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", span="173-173", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", file="RecurringJobScheduler.cs"];
m7_138 [label="_options.MinimumLogVerbosity = true", span="176-176", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", file="RecurringJobScheduler.cs"];
m7_139 [label="_options.MaxRetryAttempts = 0", span="177-177", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", file="RecurringJobScheduler.cs"];
m7_141 [label="var runner = new ServerComponentRunner(component, _options)", span="180-180", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", file="RecurringJobScheduler.cs"];
m7_144 [label="runner.Dispose()", span="186-186", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", file="RecurringJobScheduler.cs"];
m7_142 [label="runner.Start()", span="182-182", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", file="RecurringJobScheduler.cs"];
m7_140 [label="var component = new DisposableComponent()", span="179-179", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", file="RecurringJobScheduler.cs"];
m7_143 [label="Thread.Sleep(100)", span="183-183", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", file="RecurringJobScheduler.cs"];
m7_145 [label="Thread.Sleep(500)", span="187-187", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", file="RecurringJobScheduler.cs"];
m7_146 [label="Assert.True(component.Disposed)", span="190-190", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", file="RecurringJobScheduler.cs"];
m7_147 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", span="173-173", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_ShouldDisposeDisposableComponent()", file="RecurringJobScheduler.cs"];
m7_100 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", span="121-121", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_102 [label="var runner = CreateRunner()", span="126-126", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_103 [label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>()))\r\n                .Callback(() => { timesExecuted++; Thread.Yield(); })", span="127-128", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_106 [label="Thread.Sleep(TimeSpan.FromMilliseconds(100))", span="132-132", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_109 [label="Thread.Sleep(TimeSpan.FromMilliseconds(100))", span="137-137", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_104 [label="runner.Start()", span="130-130", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_108 [label="runner.Start()", span="136-136", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_105 [label="runner.Stop()", span="131-131", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_101 [label="int timesExecuted = 0", span="124-124", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_107 [label="timesExecuted = 0", span="133-133", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_110 [label="Assert.True(timesExecuted > 0)", span="140-140", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_111 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", span="121-121", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_CanRestartStoppedComponent()", file="RecurringJobScheduler.cs"];
m7_150 [label="Entry System.Threading.Thread.Sleep(int)", span="0-0", cluster="System.Threading.Thread.Sleep(int)", file="RecurringJobScheduler.cs"];
m7_37 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.CreateRunner()", span="236-236", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.CreateRunner()", file="RecurringJobScheduler.cs"];
m7_185 [label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>()))\r\n                .Callback(() => Thread.Yield())", span="238-239", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.CreateRunner()", file="RecurringJobScheduler.cs"];
m7_186 [label="return new ServerComponentRunner(_component.Object, _options);", span="240-240", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.CreateRunner()", file="RecurringJobScheduler.cs"];
m7_187 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.CreateRunner()", span="236-236", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.CreateRunner()", file="RecurringJobScheduler.cs"];
m7_10 [label="Entry Unk.>", span="", cluster="Unk.>", file="RecurringJobScheduler.cs"];
m7_83 [label="Entry HangFire.Server.ServerComponentRunner.Stop()", span="70-70", cluster="HangFire.Server.ServerComponentRunner.Stop()", file="RecurringJobScheduler.cs"];
m7_166 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldBeExecutedSeveralTimes_Automatically()", span="214-214", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldBeExecutedSeveralTimes_Automatically()", file="RecurringJobScheduler.cs"];
m7_167 [label="var runner = CreateRunner()", span="216-216", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldBeExecutedSeveralTimes_Automatically()", file="RecurringJobScheduler.cs"];
m7_168 [label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Throws<InvalidOperationException>()", span="217-217", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldBeExecutedSeveralTimes_Automatically()", file="RecurringJobScheduler.cs"];
m7_172 [label="_component.Verify(x => x.Execute(\r\n                It.IsAny<CancellationToken>()),\r\n                Times.AtLeast(2))", span="223-225", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldBeExecutedSeveralTimes_Automatically()", file="RecurringJobScheduler.cs"];
m7_171 [label="runner.Dispose()", span="221-221", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldBeExecutedSeveralTimes_Automatically()", file="RecurringJobScheduler.cs"];
m7_169 [label="runner.Start()", span="218-218", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldBeExecutedSeveralTimes_Automatically()", file="RecurringJobScheduler.cs"];
m7_170 [label="Thread.Sleep(5000)", span="220-220", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldBeExecutedSeveralTimes_Automatically()", file="RecurringJobScheduler.cs"];
m7_173 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldBeExecutedSeveralTimes_Automatically()", span="214-214", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldBeExecutedSeveralTimes_Automatically()", file="RecurringJobScheduler.cs"];
m7_120 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_CanBeCalledMultipleTimesInARow()", span="144-144", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_CanBeCalledMultipleTimesInARow()", file="RecurringJobScheduler.cs"];
m7_121 [label="var runner = CreateRunner()", span="146-146", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_CanBeCalledMultipleTimesInARow()", file="RecurringJobScheduler.cs"];
m7_124 [label="Assert.DoesNotThrow(runner.Stop)", span="150-150", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_CanBeCalledMultipleTimesInARow()", file="RecurringJobScheduler.cs"];
m7_122 [label="runner.Start()", span="147-147", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_CanBeCalledMultipleTimesInARow()", file="RecurringJobScheduler.cs"];
m7_123 [label="runner.Stop()", span="148-148", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_CanBeCalledMultipleTimesInARow()", file="RecurringJobScheduler.cs"];
m7_125 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_CanBeCalledMultipleTimesInARow()", span="144-144", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_CanBeCalledMultipleTimesInARow()", file="RecurringJobScheduler.cs"];
m7_62 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_OnDisposedObject_ThrowsAnException()", span="80-80", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_OnDisposedObject_ThrowsAnException()", file="RecurringJobScheduler.cs"];
m7_63 [label="var runner = CreateRunner()", span="82-82", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_OnDisposedObject_ThrowsAnException()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_64 [label="runner.Dispose()", span="83-83", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_OnDisposedObject_ThrowsAnException()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_65 [label="Assert.Throws<ObjectDisposedException>(() => runner.Start())", span="85-85", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_OnDisposedObject_ThrowsAnException()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_66 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_OnDisposedObject_ThrowsAnException()", span="80-80", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Start_OnDisposedObject_ThrowsAnException()", file="RecurringJobScheduler.cs"];
m7_39 [label="Entry System.Threading.Thread.Sleep(System.TimeSpan)", span="0-0", cluster="System.Threading.Thread.Sleep(System.TimeSpan)", file="RecurringJobScheduler.cs"];
m7_92 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_OnDisposedObject_ThrowsAnException()", span="112-112", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_OnDisposedObject_ThrowsAnException()", file="RecurringJobScheduler.cs"];
m7_93 [label="var runner = CreateRunner()", span="114-114", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_OnDisposedObject_ThrowsAnException()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_94 [label="runner.Dispose()", span="115-115", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_OnDisposedObject_ThrowsAnException()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_95 [label="Assert.Throws<ObjectDisposedException>(() => runner.Stop())", span="117-117", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_OnDisposedObject_ThrowsAnException()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_96 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_OnDisposedObject_ThrowsAnException()", span="112-112", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_OnDisposedObject_ThrowsAnException()", file="RecurringJobScheduler.cs"];
m7_126 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_StopsExecutionAutomatically()", span="154-154", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_StopsExecutionAutomatically()", file="RecurringJobScheduler.cs"];
m7_127 [label="var runner = CreateRunner()", span="156-156", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_StopsExecutionAutomatically()", file="RecurringJobScheduler.cs"];
m7_129 [label="Assert.DoesNotThrow(runner.Dispose)", span="159-159", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_StopsExecutionAutomatically()", file="RecurringJobScheduler.cs"];
m7_128 [label="runner.Start()", span="157-157", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_StopsExecutionAutomatically()", file="RecurringJobScheduler.cs"];
m7_130 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_StopsExecutionAutomatically()", span="154-154", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_StopsExecutionAutomatically()", file="RecurringJobScheduler.cs"];
m7_23 [label="Entry ServerComponentRunner.cstr", span="", cluster="ServerComponentRunner.cstr", file="RecurringJobScheduler.cs"];
m7_16 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="32-32", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="RecurringJobScheduler.cs"];
m7_17 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ServerComponentRunner(_component.Object, null))", span="34-35", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_18 [label="Assert.Equal(''options'', exception.ParamName)", span="37-37", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_19 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="32-32", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="RecurringJobScheduler.cs"];
m7_40 [label="Entry HangFire.Server.ServerComponentRunner.Dispose()", span="84-84", cluster="HangFire.Server.ServerComponentRunner.Dispose()", file="RecurringJobScheduler.cs"];
m7_81 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RecurringJobScheduler.cs"];
m7_57 [label="Entry HangFire.Server.ServerComponentRunner.Start()", span="61-61", cluster="HangFire.Server.ServerComponentRunner.Start()", file="RecurringJobScheduler.cs"];
m7_31 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_OnJustCreatedRunner_DoNotLeadToComponentExecution()", span="47-47", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_OnJustCreatedRunner_DoNotLeadToComponentExecution()", file="RecurringJobScheduler.cs"];
m7_32 [label="var runner = CreateRunner()", span="49-49", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_OnJustCreatedRunner_DoNotLeadToComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_33 [label="Thread.Sleep(TimeSpan.FromMilliseconds(100))", span="50-50", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_OnJustCreatedRunner_DoNotLeadToComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_34 [label="runner.Dispose()", span="52-52", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_OnJustCreatedRunner_DoNotLeadToComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_35 [label="_component.Verify(x => x.Execute(It.IsAny<CancellationToken>()), Times.Never)", span="54-54", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_OnJustCreatedRunner_DoNotLeadToComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_36 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_OnJustCreatedRunner_DoNotLeadToComponentExecution()", span="47-47", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_OnJustCreatedRunner_DoNotLeadToComponentExecution()", file="RecurringJobScheduler.cs"];
m7_46 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalledMultipleTimes()", span="58-58", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalledMultipleTimes()", file="RecurringJobScheduler.cs"];
m7_47 [label="var runner = CreateRunner()", span="60-60", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalledMultipleTimes()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_48 [label="runner.Dispose()", span="61-61", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalledMultipleTimes()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_49 [label="Assert.DoesNotThrow(runner.Dispose)", span="63-63", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalledMultipleTimes()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_50 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalledMultipleTimes()", span="58-58", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Dispose_CanBeCalledMultipleTimes()", file="RecurringJobScheduler.cs"];
m7_149 [label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)", span="41-41", cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent, HangFire.Server.ServerComponentRunnerOptions)", file="RecurringJobScheduler.cs"];
m7_91 [label="Entry System.Threading.Thread.Yield()", span="0-0", cluster="System.Threading.Thread.Yield()", file="RecurringJobScheduler.cs"];
m7_4 [label="Entry Mock<IServerComponent>.cstr", span="", cluster="Mock<IServerComponent>.cstr", file="RecurringJobScheduler.cs"];
m7_191 [label="Entry lambda expression", span="239-239", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_12 [label="Entry lambda expression", span="26-26", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_13 [label="new ServerComponentRunner(null)", span="26-26", cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_14 [label="Exit lambda expression", span="26-26", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_20 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_21 [label="new ServerComponentRunner(_component.Object, null)", span="35-35", cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_22 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_28 [label="Entry lambda expression", span="43-43", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_29 [label="new ServerComponentRunner(_component.Object)", span="43-43", cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_30 [label="Exit lambda expression", span="43-43", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_42 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_43 [label="x.Execute(It.IsAny<CancellationToken>())", span="54-54", cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_44 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_59 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_60 [label="x.Execute(It.IsNotNull<CancellationToken>())", span="75-75", cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_61 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_68 [label="runner.Start()", span="85-85", cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_67 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_69 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_84 [label="Entry lambda expression", span="95-95", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_87 [label="Entry lambda expression", span="96-96", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_88 [label="timesExecuted++", span="96-96", cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_89 [label="Thread.Yield()", span="96-96", cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_85 [label="x.Execute(It.IsAny<CancellationToken>())", span="95-95", cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_86 [label="Exit lambda expression", span="95-95", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_90 [label="Exit lambda expression", span="96-96", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_98 [label="runner.Stop()", span="117-117", cluster="lambda expression", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_97 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_99 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_114 [label="x.Execute(It.IsAny<CancellationToken>())", span="127-127", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_161 [label="x.Execute(It.IsAny<CancellationToken>())", span="200-200", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_164 [label="x.Execute(It.IsAny<CancellationToken>())", span="209-209", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_175 [label="x.Execute(It.IsAny<CancellationToken>())", span="217-217", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_178 [label="x.Execute(\r\n                It.IsAny<CancellationToken>())", span="223-224", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_189 [label="x.Execute(It.IsAny<CancellationToken>())", span="238-238", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_118 [label="Thread.Yield()", span="128-128", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_192 [label="Thread.Yield()", span="239-239", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_113 [label="Entry lambda expression", span="127-127", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_116 [label="Entry lambda expression", span="128-128", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_117 [label="timesExecuted++", span="128-128", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_160 [label="Entry lambda expression", span="200-200", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_163 [label="Entry lambda expression", span="209-209", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_174 [label="Entry lambda expression", span="217-217", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_177 [label="Entry lambda expression", span="223-224", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_188 [label="Entry lambda expression", span="238-238", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_115 [label="Exit lambda expression", span="127-127", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_162 [label="Exit lambda expression", span="200-200", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_165 [label="Exit lambda expression", span="209-209", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_176 [label="Exit lambda expression", span="217-217", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_179 [label="Exit lambda expression", span="223-224", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_190 [label="Exit lambda expression", span="238-238", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_119 [label="Exit lambda expression", span="128-128", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_193 [label="Exit lambda expression", span="239-239", cluster="lambda expression", file="RecurringJobScheduler.cs"];
m7_6 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenComponentIsNull()", span="23-23", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenComponentIsNull()", file="RecurringJobScheduler.cs"];
m7_7 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new ServerComponentRunner(null))", span="25-26", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenComponentIsNull()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_8 [label="Assert.Equal(''component'', exception.ParamName)", span="28-28", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenComponentIsNull()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_9 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenComponentIsNull()", span="23-23", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_ThrowsAnException_WhenComponentIsNull()", file="RecurringJobScheduler.cs"];
m7_58 [label="Entry Unk.AtLeast", span="", cluster="Unk.AtLeast", file="RecurringJobScheduler.cs"];
m7_24 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_UsesDefaultOptions_IfTheyWereNoProvided()", span="41-41", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_UsesDefaultOptions_IfTheyWereNoProvided()", file="RecurringJobScheduler.cs"];
m7_25 [label="Assert.DoesNotThrow(() => new ServerComponentRunner(_component.Object))", span="43-43", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_UsesDefaultOptions_IfTheyWereNoProvided()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_26 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_UsesDefaultOptions_IfTheyWereNoProvided()", span="41-41", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Ctor_UsesDefaultOptions_IfTheyWereNoProvided()", file="RecurringJobScheduler.cs"];
m7_194 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.DisposableComponent.Execute(System.Threading.CancellationToken)", span="247-247", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.DisposableComponent.Execute(System.Threading.CancellationToken)", file="RecurringJobScheduler.cs"];
m7_195 [label="Thread.Yield()", span="249-249", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.DisposableComponent.Execute(System.Threading.CancellationToken)", file="RecurringJobScheduler.cs"];
m7_196 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.DisposableComponent.Execute(System.Threading.CancellationToken)", span="247-247", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.DisposableComponent.Execute(System.Threading.CancellationToken)", file="RecurringJobScheduler.cs"];
m7_148 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.DisposableComponent.DisposableComponent()", span="243-243", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.DisposableComponent.DisposableComponent()", file="RecurringJobScheduler.cs"];
m7_112 [label="Entry Unk.True", span="", cluster="Unk.True", file="RecurringJobScheduler.cs"];
m7_45 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="RecurringJobScheduler.cs"];
m7_70 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", span="89-89", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", file="RecurringJobScheduler.cs"];
m7_71 [label="int timesExecuted = 0", span="92-92", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_72 [label="var runner = CreateRunner()", span="94-94", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_73 [label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>()))\r\n                .Callback(() => { timesExecuted++; Thread.Yield(); })", span="95-96", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_74 [label="runner.Start()", span="98-98", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_75 [label="runner.Stop()", span="101-101", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_76 [label="Thread.Sleep(TimeSpan.FromMilliseconds(100))", span="102-102", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_77 [label="timesExecuted = 0", span="103-103", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_78 [label="Thread.Sleep(TimeSpan.FromMilliseconds(100))", span="105-105", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_79 [label="Assert.Equal(0, timesExecuted)", span="108-108", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", color=green, community=0, file="RecurringJobScheduler.cs"];
m7_80 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", span="89-89", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.Stop_LeadsToStoppedComponentExecution()", file="RecurringJobScheduler.cs"];
m7_82 [label="Entry Unk.Callback", span="", cluster="Unk.Callback", file="RecurringJobScheduler.cs"];
m7_5 [label="Entry HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", span="25-25", cluster="HangFire.Server.ServerComponentRunnerOptions.ServerComponentRunnerOptions()", file="RecurringJobScheduler.cs"];
m7_15 [label="Entry HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)", span="36-36", cluster="HangFire.Server.ServerComponentRunner.ServerComponentRunner(HangFire.Server.IServerComponent)", file="RecurringJobScheduler.cs"];
m7_41 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RecurringJobScheduler.cs"];
m7_151 [label="Entry HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldNotBeRetried_IfMaxRetryAttemptsIsZero()", span="194-194", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldNotBeRetried_IfMaxRetryAttemptsIsZero()", file="RecurringJobScheduler.cs"];
m7_152 [label="_options.MaxRetryAttempts = 0", span="197-197", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldNotBeRetried_IfMaxRetryAttemptsIsZero()", file="RecurringJobScheduler.cs"];
m7_153 [label="var runner = CreateRunner()", span="199-199", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldNotBeRetried_IfMaxRetryAttemptsIsZero()", file="RecurringJobScheduler.cs"];
m7_154 [label="_component.Setup(x => x.Execute(It.IsAny<CancellationToken>())).Throws<InvalidOperationException>()", span="200-200", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldNotBeRetried_IfMaxRetryAttemptsIsZero()", file="RecurringJobScheduler.cs"];
m7_158 [label="_component.Verify(\r\n                x => x.Execute(It.IsAny<CancellationToken>()),\r\n                Times.Once)", span="208-210", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldNotBeRetried_IfMaxRetryAttemptsIsZero()", file="RecurringJobScheduler.cs"];
m7_157 [label="runner.Dispose()", span="206-206", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldNotBeRetried_IfMaxRetryAttemptsIsZero()", file="RecurringJobScheduler.cs"];
m7_155 [label="runner.Start()", span="202-202", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldNotBeRetried_IfMaxRetryAttemptsIsZero()", file="RecurringJobScheduler.cs"];
m7_156 [label="Thread.Sleep(500)", span="203-203", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldNotBeRetried_IfMaxRetryAttemptsIsZero()", file="RecurringJobScheduler.cs"];
m7_159 [label="Exit HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldNotBeRetried_IfMaxRetryAttemptsIsZero()", span="194-194", cluster="HangFire.Core.Tests.Server.ServerComponentRunnerFacts.FailingComponent_ShouldNotBeRetried_IfMaxRetryAttemptsIsZero()", file="RecurringJobScheduler.cs"];
m7_200 [label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts", span="", file="RecurringJobScheduler.cs"];
m7_201 [label=runner, span="", file="RecurringJobScheduler.cs"];
m7_202 [label=timesExecuted, span="", file="RecurringJobScheduler.cs"];
m7_203 [label=runner, span="", file="RecurringJobScheduler.cs"];
m7_204 [label=timesExecuted, span="", file="RecurringJobScheduler.cs"];
m8_77 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", span="77-77", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", file="RecurringJobSchedulerFacts.cs"];
m8_78 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RecurringJobScheduler(_storage.Object, _client.Object, null))", span="79-80", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_79 [label="Assert.Equal(''dateTimeProvider'', exception.ParamName)", span="82-82", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_80 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", span="77-77", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenDateTimeProviderIsNull()", file="RecurringJobSchedulerFacts.cs"];
m8_69 [label="Entry RecurringJobScheduler.cstr", span="", cluster="RecurringJobScheduler.cstr", file="RecurringJobSchedulerFacts.cs"];
m8_104 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="RecurringJobSchedulerFacts.cs"];
m8_16 [label="Entry Mock<IBackgroundJobClient>.cstr", span="", cluster="Mock<IBackgroundJobClient>.cstr", file="RecurringJobSchedulerFacts.cs"];
m8_60 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="RecurringJobSchedulerFacts.cs"];
m8_65 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RecurringJobSchedulerFacts.cs"];
m8_18 [label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken()", file="RecurringJobSchedulerFacts.cs"];
m8_59 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RecurringJobSchedulerFacts.cs"];
m8_136 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="RecurringJobSchedulerFacts.cs"];
m8_40 [label="Entry Unk.GetNextOccurrence", span="", cluster="Unk.GetNextOccurrence", file="RecurringJobSchedulerFacts.cs"];
m8_19 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int)", file="RecurringJobSchedulerFacts.cs"];
m8_162 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", file="RecurringJobSchedulerFacts.cs"];
m8_39 [label="Entry Unk.>", span="", cluster="Unk.>", file="RecurringJobSchedulerFacts.cs"];
m8_91 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="169-169", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="RecurringJobSchedulerFacts.cs"];
m8_170 [label="return new RecurringJobScheduler(_storage.Object, _client.Object, _dateTimeProvider.Object);", span="171-171", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_171 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="169-169", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="RecurringJobSchedulerFacts.cs"];
m8_108 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", span="105-105", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", file="RecurringJobSchedulerFacts.cs"];
m8_109 [label="_recurringJob[''NextExecution''] = JobHelper.ToStringTimestamp(_currentTime.AddDays(1))", span="107-107", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_110 [label="var scheduler = CreateScheduler()", span="108-108", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_111 [label="scheduler.Execute(_token)", span="110-110", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_112 [label="_client.Verify(\r\n                x => x.Create(It.IsAny<Job>(), It.IsAny<EnqueuedState>()),\r\n                Times.Never)", span="112-114", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_113 [label="_connection.Verify(\r\n                x => x.SetRangeInHash(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<IEnumerable<KeyValuePair<string, string>>>()),\r\n                Times.Never)", span="116-120", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_114 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", span="105-105", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_WhenNextExecutionTime_IsInTheFuture()", file="RecurringJobSchedulerFacts.cs"];
m8_163 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="RecurringJobSchedulerFacts.cs"];
m8_143 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", span="145-145", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", file="RecurringJobSchedulerFacts.cs"];
m8_144 [label="_recurringJob.Remove(''NextExecution'')", span="147-147", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_145 [label="var scheduler = CreateScheduler()", span="148-148", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_146 [label="scheduler.Execute(_token)", span="150-150", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_147 [label="_connection.Setup(x => x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime))))", span="152-155", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_148 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", span="145-145", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_SetsTheNextExecutionTime_WhenItIsNull()", file="RecurringJobSchedulerFacts.cs"];
m8_51 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="RecurringJobSchedulerFacts.cs"];
m8_15 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="RecurringJobSchedulerFacts.cs"];
m8_115 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="RecurringJobSchedulerFacts.cs"];
m8_23 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobSchedulerFacts.cs"];
m8_21 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RecurringJobSchedulerFacts.cs"];
m8_156 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", span="159-159", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", file="RecurringJobSchedulerFacts.cs"];
m8_157 [label="_dateTimeProvider.Setup(x => x.CurrentDateTime).Returns(\r\n                new DateTime(2012, 12, 12, 12, 12, 12))", span="161-162", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_158 [label="var scheduler = CreateScheduler()", span="163-163", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_159 [label="var cts = new CancellationTokenSource(TimeSpan.FromSeconds(3))", span="164-164", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_160 [label="Assert.Throws<OperationCanceledException>(() => scheduler.Execute(cts.Token))", span="166-166", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_161 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", span="159-159", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_WorksWithOneMinuteInterval()", file="RecurringJobSchedulerFacts.cs"];
m8_61 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="59-59", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m8_62 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RecurringJobScheduler(null, _client.Object, _dateTimeProvider.Object))", span="61-62", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_63 [label="Assert.Equal(''storage'', exception.ParamName)", span="64-64", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_64 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="59-59", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m8_17 [label="Entry Mock<IDateTimeProvider>.cstr", span="", cluster="Mock<IDateTimeProvider>.cstr", file="RecurringJobSchedulerFacts.cs"];
m8_167 [label="Entry lambda expression", span="166-166", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_30 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_33 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_36 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_41 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_44 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_48 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_52 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_56 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_31 [label="x.CurrentDateTime", span="37-37", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_32 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_34 [label=_currentTime, span="37-37", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_35 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_37 [label="x.GetNextOccurrence(It.IsNotNull<CrontabSchedule>())", span="38-38", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_38 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_42 [label=_nextTime, span="39-39", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_43 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_45 [label="Console.WriteLine()", span="45-45", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_46 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_49 [label="x.GetConnection()", span="49-49", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_50 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_53 [label="x.GetAllItemsFromSet(''recurring-jobs'')", span="51-51", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_54 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_57 [label="x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', RecurringJobId))", span="54-54", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_58 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_66 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_67 [label="new RecurringJobScheduler(null, _client.Object, _dateTimeProvider.Object)", span="62-62", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_68 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_74 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_75 [label="new RecurringJobScheduler(_storage.Object, null, _dateTimeProvider.Object)", span="71-71", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_76 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_81 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_82 [label="new RecurringJobScheduler(_storage.Object, _client.Object, null)", span="80-80", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_83 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_94 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_98 [label="Entry lambda expression", span="94-94", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_101 [label="Entry lambda expression", span="96-101", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_95 [label="x.Create(It.IsAny<Job>(), It.IsAny<IState>())", span="88-88", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_96 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_99 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="94-94", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_100 [label="Exit lambda expression", span="94-94", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_102 [label="x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj[''LastExecution''] == JobHelper.ToStringTimestamp(_currentTime)\r\n                 && rj[''LastJobId''] == ''job-id''\r\n                 && rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime)))", span="96-101", cluster="lambda expression", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_103 [label="Exit lambda expression", span="96-101", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_105 [label="Entry lambda expression", span="98-101", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_106 [label="rj[''LastExecution''] == JobHelper.ToStringTimestamp(_currentTime)\r\n                 && rj[''LastJobId''] == ''job-id''\r\n                 && rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime)", span="99-101", cluster="lambda expression", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_107 [label="Exit lambda expression", span="98-101", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_116 [label="Entry lambda expression", span="113-113", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_119 [label="Entry lambda expression", span="117-119", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_117 [label="x.Create(It.IsAny<Job>(), It.IsAny<EnqueuedState>())", span="113-113", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_118 [label="Exit lambda expression", span="113-113", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_120 [label="x.SetRangeInHash(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<IEnumerable<KeyValuePair<string, string>>>())", span="117-119", cluster="lambda expression", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_121 [label="Exit lambda expression", span="117-119", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_128 [label="Entry lambda expression", span="131-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_129 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="131-131", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_130 [label="Exit lambda expression", span="131-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_137 [label="Entry lambda expression", span="137-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_141 [label="scheduler.Execute(_token)", span="141-141", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_140 [label="Entry lambda expression", span="141-141", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_142 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_138 [label="x.GetAllItemsFromSet(It.IsAny<string>())", span="137-137", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_139 [label="Exit lambda expression", span="137-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_150 [label="Entry lambda expression", span="152-155", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_151 [label="x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime)))", span="152-155", cluster="lambda expression", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_152 [label="Exit lambda expression", span="152-155", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_153 [label="Entry lambda expression", span="154-155", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_154 [label="rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime)", span="155-155", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_155 [label="Exit lambda expression", span="154-155", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_164 [label="Entry lambda expression", span="161-161", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_168 [label="scheduler.Execute(cts.Token)", span="166-166", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_169 [label="Exit lambda expression", span="166-166", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_165 [label="x.CurrentDateTime", span="161-161", cluster="lambda expression", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_166 [label="Exit lambda expression", span="161-161", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m8_92 [label="Entry HangFire.Server.RecurringJobScheduler.Execute(System.Threading.CancellationToken)", span="39-39", cluster="HangFire.Server.RecurringJobScheduler.Execute(System.Threading.CancellationToken)", file="RecurringJobSchedulerFacts.cs"];
m8_24 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="50-50", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="RecurringJobSchedulerFacts.cs"];
m8_131 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="135-135", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m8_132 [label="_connection.Setup(x => x.GetAllItemsFromSet(It.IsAny<string>()))\r\n                .Returns(new HashSet<string> { ''non-existing-job'' })", span="137-138", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_133 [label="var scheduler = CreateScheduler()", span="139-139", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_134 [label="Assert.DoesNotThrow(() => scheduler.Execute(_token))", span="141-141", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_135 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="135-135", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m8_70 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", span="68-68", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m8_71 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RecurringJobScheduler(_storage.Object, null, _dateTimeProvider.Object))", span="70-71", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_72 [label="Assert.Equal(''client'', exception.ParamName)", span="73-73", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_73 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", span="68-68", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m8_20 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="RecurringJobSchedulerFacts.cs"];
m8_93 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RecurringJobSchedulerFacts.cs"];
m8_27 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="RecurringJobSchedulerFacts.cs"];
m8_55 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="RecurringJobSchedulerFacts.cs"];
m8_84 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", span="86-86", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", file="RecurringJobSchedulerFacts.cs"];
m8_85 [label="_client.Setup(x => x.Create(It.IsAny<Job>(), It.IsAny<IState>())).Returns(''job-id'')", span="88-88", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_86 [label="var scheduler = CreateScheduler()", span="90-90", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_87 [label="scheduler.Execute(_token)", span="92-92", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_88 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="94-94", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_89 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj[''LastExecution''] == JobHelper.ToStringTimestamp(_currentTime)\r\n                 && rj[''LastJobId''] == ''job-id''\r\n                 && rj[''NextExecution''] == JobHelper.ToStringTimestamp(_nextTime))))", span="96-101", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_90 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", span="86-86", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_AndUpdatesIt_WhenNextExecutionTime_IsEqualToCurrentTime()", file="RecurringJobSchedulerFacts.cs"];
m8_25 [label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="117-117", cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="RecurringJobSchedulerFacts.cs"];
m8_97 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="RecurringJobSchedulerFacts.cs"];
m8_122 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", span="124-124", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", file="RecurringJobSchedulerFacts.cs"];
m8_123 [label="_recurringJob[''NextExecution''] = JobHelper.ToStringTimestamp(_currentTime.AddDays(-1))", span="126-126", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_124 [label="var scheduler = CreateScheduler()", span="127-127", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_125 [label="scheduler.Execute(_token)", span="129-129", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_126 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="131-131", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_127 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", span="124-124", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesRecurringJob_WhenNextExecutionTime_IsInThePast()", file="RecurringJobSchedulerFacts.cs"];
m8_22 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="RecurringJobSchedulerFacts.cs"];
m8_149 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", file="RecurringJobSchedulerFacts.cs"];
m8_28 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="RecurringJobSchedulerFacts.cs"];
m8_47 [label="Entry System.Console.WriteLine()", span="0-0", cluster="System.Console.WriteLine()", file="RecurringJobSchedulerFacts.cs"];
m8_26 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="RecurringJobSchedulerFacts.cs"];
m8_0 [label="Entry HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="26-26", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m8_1 [label="_storage = new Mock<JobStorage>()", span="28-28", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_2 [label="_client = new Mock<IBackgroundJobClient>()", span="29-29", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_3 [label="_dateTimeProvider = new Mock<IDateTimeProvider>()", span="30-30", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_4 [label="_token = new CancellationToken()", span="31-31", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_5 [label="_currentTime = new DateTime(2012, 12, 12, 12, 12, 0)", span="34-34", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_6 [label="_nextTime = _currentTime.AddHours(1)", span="35-35", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_7 [label="_dateTimeProvider.Setup(x => x.CurrentDateTime).Returns(() => _currentTime)", span="37-37", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_8 [label="_dateTimeProvider.Setup(x => x.GetNextOccurrence(It.IsNotNull<CrontabSchedule>()))\r\n                .Returns(() => _nextTime)", span="38-39", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_9 [label="_recurringJob = new Dictionary<string, string>\r\n            {\r\n                { ''NextExecution'', JobHelper.ToStringTimestamp(_currentTime) },\r\n                { ''Cron'', ''* * * * *'' },\r\n                { ''Job'', JobHelper.ToJson(InvocationData.Serialize(Job.FromExpression(() => Console.WriteLine()))) }\r\n            }", span="41-46", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_10 [label="_connection = new Mock<IStorageConnection>()", span="48-48", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_11 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="49-49", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m8_12 [label="_connection.Setup(x => x.GetAllItemsFromSet(''recurring-jobs''))\r\n                .Returns(new HashSet<string> { RecurringJobId })", span="51-52", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_13 [label="_connection.Setup(x => x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', RecurringJobId)))\r\n                .Returns(_recurringJob)", span="54-55", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", color=green, community=1, file="RecurringJobSchedulerFacts.cs"];
m8_14 [label="Exit HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="26-26", cluster="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m8_29 [label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0", cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="RecurringJobSchedulerFacts.cs"];
m8_172 [label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts", span="", file="RecurringJobSchedulerFacts.cs"];
m8_173 [label=scheduler, span="", file="RecurringJobSchedulerFacts.cs"];
m8_174 [label=scheduler, span="", file="RecurringJobSchedulerFacts.cs"];
m8_175 [label=cts, span="", file="RecurringJobSchedulerFacts.cs"];
m9_0 [label="Entry Hangfire.States.IState.SerializeData()", span="202-202", cluster="Hangfire.States.IState.SerializeData()", file="RedisWriteOnlyTransaction.cs"];
m9_1 [label="Exit Hangfire.States.IState.SerializeData()", span="202-202", cluster="Hangfire.States.IState.SerializeData()", file="RedisWriteOnlyTransaction.cs"];
m10_292 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", span="173-173", cluster="HangFire.Redis.RedisWriteOnlyTransaction.InsertToList(string, string)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_36 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_ModifiesJobEntry()", span="44-44", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_ModifiesJobEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_34 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_ModifiesJobEntry()", span="44-44", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_ModifiesJobEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_35 [label="UseConnection(redis =>\r\n            {\r\n                // Arrange\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.SerializeData()).Returns(new Dictionary<string, string>());\r\n                state.Setup(x => x.Name).Returns(''my-state'');\r\n\r\n                // Act\r\n                Commit(redis, x => x.SetJobState(''my-job'', state.Object));\r\n\r\n                // Assert\r\n                var hash = redis.GetAllEntriesFromHash(''hangfire:job:my-job'');\r\n                Assert.Equal(''my-state'', hash[''State'']);\r\n            })", span="46-59", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_ModifiesJobEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_26 [label="Entry Unk.GetTimeToLive", span="", cluster="Unk.GetTimeToLive", file="RedisWriteOnlyTransactionFacts.cs"];
m10_183 [label="Entry Unk.EnqueueItemOnList", span="", cluster="Unk.EnqueueItemOnList", file="RedisWriteOnlyTransactionFacts.cs"];
m10_241 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="149-149", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_45 [label="Entry Mock<IState>.cstr", span="", cluster="Mock<IState>.cstr", file="RedisWriteOnlyTransactionFacts.cs"];
m10_249 [label="Entry Unk.SortedSetContainsItem", span="", cluster="Unk.SortedSetContainsItem", file="RedisWriteOnlyTransactionFacts.cs"];
m10_202 [label="UseConnection(redis =>\r\n            {\r\n                redis.SetEntry(''hangfire:entry'', ''3'');\r\n\r\n                Commit(redis, x => x.IncrementCounter(''entry'', TimeSpan.FromDays(1)));\r\n\r\n                var entryTtl = redis.GetTimeToLive(''hangfire:entry'');\r\n                Assert.Equal(''4'', redis.GetValue(''hangfire:entry''));\r\n                Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25));\r\n            })", span="198-207", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_201 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate()", span="196-196", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_203 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate()", span="196-196", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_214 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="138-138", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_11 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="RedisWriteOnlyTransactionFacts.cs"];
m10_324 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", span="185-185", cluster="HangFire.Redis.RedisWriteOnlyTransaction.TrimList(string, int, int)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_49 [label="Write(entry[''CreatedAt''])", span="331-331", cluster="HangFire.Web.Pages.JobDetailsPage.Execute()", file="RedisWriteOnlyTransactionFacts.cs", color=green, community=0];
m10_50 [label="WriteLiteral(''\''>'')", span="336-336", cluster="HangFire.Web.Pages.JobDetailsPage.Execute()", file="RedisWriteOnlyTransactionFacts.cs", color=green, community=0];
m10_27 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_330 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="RedisWriteOnlyTransactionFacts.cs"];
m10_78 [label="Entry Unk.SetEntryInHash", span="", cluster="Unk.SetEntryInHash", file="RedisWriteOnlyTransactionFacts.cs"];
m10_79 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="RedisWriteOnlyTransactionFacts.cs"];
m10_61 [label="Entry Unk.SetJobState", span="", cluster="Unk.SetJobState", file="RedisWriteOnlyTransactionFacts.cs"];
m10_175 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_PrependsListWithJob()", span="169-169", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_PrependsListWithJob()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_176 [label="UseConnection(redis =>\r\n            {\r\n                redis.EnqueueItemOnList(''hangfire:queue:critical'', ''another-job'');\r\n\r\n                Commit(redis, x => x.AddToQueue(''critical'', ''my-job''));\r\n\r\n                Assert.Equal(''my-job'', redis.GetItemFromList(''hangfire:queue:critical'', 0));\r\n            })", span="171-178", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_PrependsListWithJob()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_177 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_PrependsListWithJob()", span="169-169", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_PrependsListWithJob()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_9 [label="UseConnection(redis =>\r\n            {\r\n                // Arrange\r\n                redis.SetEntry(''hangfire:job:my-job'', ''job'');\r\n                redis.SetEntry(''hangfire:job:my-job:state'', ''state'');\r\n                redis.SetEntry(''hangfire:job:my-job:history'', ''history'');\r\n\r\n                // Act\r\n                Commit(redis, x => x.ExpireJob(''my-job'', TimeSpan.FromDays(1)));\r\n\r\n                // Assert\r\n                var jobEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job'');\r\n                var stateEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job:state'');\r\n                var historyEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job:state'');\r\n\r\n                Assert.True(TimeSpan.FromHours(23) < jobEntryTtl && jobEntryTtl < TimeSpan.FromHours(25));\r\n                Assert.True(TimeSpan.FromHours(23) < stateEntryTtl && stateEntryTtl < TimeSpan.FromHours(25));\r\n                Assert.True(TimeSpan.FromHours(23) < historyEntryTtl && historyEntryTtl < TimeSpan.FromHours(25));\r\n            })", span="22-40", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.ExpireJob_SetsExpirationDateForAllRelatedKeys()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_8 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.ExpireJob_SetsExpirationDateForAllRelatedKeys()", span="20-20", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.ExpireJob_SetsExpirationDateForAllRelatedKeys()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_10 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.ExpireJob_SetsExpirationDateForAllRelatedKeys()", span="20-20", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.ExpireJob_SetsExpirationDateForAllRelatedKeys()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_64 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_RewritesStateEntry()", span="63-63", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_RewritesStateEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_62 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_RewritesStateEntry()", span="63-63", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_RewritesStateEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_63 [label="UseConnection(redis =>\r\n            {\r\n                // Arrange\r\n                redis.SetEntryInHash(''hangfire:job:my-job:state'', ''OldName'', ''OldValue'');\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.SerializeData()).Returns(\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''Name'', ''Value'' }\r\n                    });\r\n                state.Setup(x => x.Name).Returns(''my-state'');\r\n                state.Setup(x => x.Reason).Returns(''my-reason'');\r\n\r\n                // Act\r\n                Commit(redis, x => x.SetJobState(''my-job'', state.Object));\r\n\r\n                // Assert\r\n                var stateHash = redis.GetAllEntriesFromHash(''hangfire:job:my-job:state'');\r\n                Assert.False(stateHash.ContainsKey(''OldName''));\r\n                Assert.Equal(''my-state'', stateHash[''State'']);\r\n                Assert.Equal(''my-reason'', stateHash[''Reason'']);\r\n                Assert.Equal(''Value'', stateHash[''Name'']);\r\n            })", span="65-88", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_RewritesStateEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_24 [label="Entry Unk.SetEntry", span="", cluster="Unk.SetEntry", file="RedisWriteOnlyTransactionFacts.cs"];
m10_267 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromSet_RemoveSpecifiedItemFromSortedSet()", span="263-263", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromSet_RemoveSpecifiedItemFromSortedSet()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_268 [label="UseConnection(redis =>\r\n            {\r\n                redis.AddItemToSortedSet(''hangfire:my-set'', ''my-value'');\r\n\r\n                Commit(redis, x => x.RemoveFromSet(''my-set'', ''my-value''));\r\n\r\n                Assert.False(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''));\r\n            })", span="265-272", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromSet_RemoveSpecifiedItemFromSortedSet()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_269 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromSet_RemoveSpecifiedItemFromSortedSet()", span="263-263", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromSet_RemoveSpecifiedItemFromSortedSet()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_25 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", span="322-322", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_325 [label="var transaction = new RedisWriteOnlyTransaction(redis.CreateTransaction())", span="324-324", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_326 [label="action(transaction)", span="326-326", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_327 [label="transaction.Commit()", span="327-327", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_328 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", span="322-322", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Commit(IRedisClient, System.Action<HangFire.Redis.RedisWriteOnlyTransaction>)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_333 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", span="331-331", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_334 [label="var redis = RedisUtils.CreateClient()", span="333-333", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_335 [label="action(redis)", span="335-335", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_336 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", span="331-331", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.UseConnection(System.Action<IRedisClient>)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_162 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_AddsSpecifiedJobToTheQueue()", span="157-157", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_AddsSpecifiedJobToTheQueue()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_163 [label="UseConnection(redis =>\r\n            {\r\n                Commit(redis, x => x.AddToQueue(''critical'', ''my-job''));\r\n\r\n                Assert.True(redis.SetContainsItem(''hangfire:queues'', ''critical''));\r\n                Assert.Equal(''my-job'', redis.GetItemFromList(''hangfire:queue:critical'', 0));\r\n            })", span="159-165", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_AddsSpecifiedJobToTheQueue()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_164 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_AddsSpecifiedJobToTheQueue()", span="157-157", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToQueue_AddsSpecifiedJobToTheQueue()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_148 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_3 [label="Entry Unk.>", span="", cluster="Unk.>", file="RedisWriteOnlyTransactionFacts.cs"];
m10_262 [label="Entry Unk.GetItemScoreInSortedSet", span="", cluster="Unk.GetItemScoreInSortedSet", file="RedisWriteOnlyTransactionFacts.cs"];
m10_51 [label="Entry lambda expression", span="50-50", cluster="lambda expression", color=green, community=0, file="RedisWriteOnlyTransactionFacts.cs"];
m10_53 [label="Exit lambda expression", span="50-50", cluster="lambda expression", color=green, community=0, file="RedisWriteOnlyTransactionFacts.cs"];
m10_55 [label="Entry lambda expression", span="51-51", cluster="lambda expression", color=green, community=0, file="RedisWriteOnlyTransactionFacts.cs"];
m10_48 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", color=green, community=0, file="RedisWriteOnlyTransactionFacts.cs"];
m10_52 [label="x.SerializeData()", span="50-50", cluster="lambda expression", color=green, community=0, file="RedisWriteOnlyTransactionFacts.cs"];
m10_54 [label="Entry Unk.SerializeData", span="", cluster="Unk.SerializeData", color=green, community=0, file="RedisWriteOnlyTransactionFacts.cs"];
m10_80 [label="Entry Unk.False", span="", cluster="Unk.False", file="RedisWriteOnlyTransactionFacts.cs"];
m10_128 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", span="77-77", cluster="HangFire.Redis.RedisWriteOnlyTransaction.PersistJob(string)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_293 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromList_RemovesAllGivenValuesFromList()", span="289-289", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromList_RemovesAllGivenValuesFromList()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_294 [label="UseConnection(redis =>\r\n            {\r\n                redis.AddItemToList(''hangfire:list'', ''value'');\r\n                redis.AddItemToList(''hangfire:list'', ''another-value'');\r\n                redis.AddItemToList(''hangfire:list'', ''value'');\r\n\r\n                Commit(redis, x => x.RemoveFromList(''list'', ''value''));\r\n\r\n                Assert.Equal(1, redis.GetListCount(''hangfire:list''));\r\n                Assert.Equal(''another-value'', redis.GetItemFromList(''hangfire:list'', 0));\r\n            })", span="291-301", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromList_RemovesAllGivenValuesFromList()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_295 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromList_RemovesAllGivenValuesFromList()", span="289-289", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.RemoveFromList_RemovesAllGivenValuesFromList()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_229 [label="UseConnection(redis =>\r\n            {\r\n                redis.SetEntry(''hangfire:entry'', ''3'');\r\n\r\n                Commit(redis, x => x.DecrementCounter(''entry'', TimeSpan.FromDays(1)));\r\n\r\n                var entryTtl = redis.GetTimeToLive(''hangfire:entry'');\r\n                Assert.Equal(''2'', redis.GetValue(''hangfire:entry''));\r\n                Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25));\r\n            })", span="227-236", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_228 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate()", span="225-225", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_230 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate()", span="225-225", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_0 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", span="13-13", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_1 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new RedisWriteOnlyTransaction(null))", span="15-16", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_2 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", span="13-13", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.Ctor_ThrowsAnException_WhenTransactionIsNull()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_275 [label="Entry Unk.AddItemToSortedSet", span="", cluster="Unk.AddItemToSortedSet", file="RedisWriteOnlyTransactionFacts.cs"];
m10_227 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", span="144-144", cluster="HangFire.Redis.RedisWriteOnlyTransaction.DecrementCounter(string)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_103 [label="Entry Unk.GetListCount", span="", cluster="Unk.GetListCount", file="RedisWriteOnlyTransactionFacts.cs"];
m10_253 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", span="155-155", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_32 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_217 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_DecrementsTheValueEntry()", span="211-211", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_DecrementsTheValueEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_215 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_DecrementsTheValueEntry()", span="211-211", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_DecrementsTheValueEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_216 [label="UseConnection(redis =>\r\n            {\r\n                redis.SetEntry(''hangfire:entry'', ''3'');\r\n\r\n                Commit(redis, x => x.DecrementCounter(''entry''));\r\n\r\n                Assert.Equal(''2'', redis.GetValue(''hangfire:entry''));\r\n                Assert.True(redis.GetTimeToLive(''entry'') < TimeSpan.Zero);\r\n            })", span="213-221", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.DecrementCounter_DecrementsTheValueEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_331 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_146 [label="Entry Unk.GetItemFromList", span="", cluster="Unk.GetItemFromList", file="RedisWriteOnlyTransactionFacts.cs"];
m10_279 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", span="167-167", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromSet(string, string)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_280 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.InsertToList_PrependsListWithSpecifiedValue()", span="276-276", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.InsertToList_PrependsListWithSpecifiedValue()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_281 [label="UseConnection(redis =>\r\n            {\r\n                redis.AddItemToList(''hangfire:list'', ''value'');\r\n\r\n                Commit(redis, x => x.InsertToList(''list'', ''new-value''));\r\n\r\n                Assert.Equal(''new-value'', redis.GetItemFromList(''hangfire:list'', 0));\r\n            })", span="278-285", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.InsertToList_PrependsListWithSpecifiedValue()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_282 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.InsertToList_PrependsListWithSpecifiedValue()", span="276-276", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.InsertToList_PrependsListWithSpecifiedValue()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_93 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_AppendsJobHistoryList()", span="92-92", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_AppendsJobHistoryList()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_94 [label="UseConnection(redis =>\r\n            {\r\n                // Arrange\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''my-state'');\r\n                state.Setup(x => x.SerializeData()).Returns(new Dictionary<string, string>());\r\n\r\n                // Act\r\n                Commit(redis, x => x.SetJobState(''my-job'', state.Object));\r\n\r\n                // Assert\r\n                Assert.Equal(1, redis.GetListCount(''hangfire:job:my-job:history''));\r\n            })", span="94-106", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_AppendsJobHistoryList()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_95 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_AppendsJobHistoryList()", span="92-92", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.SetJobState_AppendsJobHistoryList()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_131 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddJobState_AddsJobHistoryEntry_AsJsonObject()", span="130-130", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddJobState_AddsJobHistoryEntry_AsJsonObject()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_129 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddJobState_AddsJobHistoryEntry_AsJsonObject()", span="130-130", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddJobState_AddsJobHistoryEntry_AsJsonObject()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_130 [label="UseConnection(redis =>\r\n            {\r\n                // Arrange\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''my-state'');\r\n                state.Setup(x => x.Reason).Returns(''my-reason'');\r\n                state.Setup(x => x.SerializeData()).Returns(\r\n                    new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                // Act\r\n                Commit(redis, x => x.AddJobState(''my-job'', state.Object));\r\n\r\n                // Assert\r\n                var serializedEntry = redis.GetItemFromList(''hangfire:job:my-job:history'', 0);\r\n                Assert.NotNull(serializedEntry);\r\n\r\n                var entry = JobHelper.FromJson<Dictionary<string, string>>(serializedEntry);\r\n                Assert.Equal(''my-state'', entry[''State'']);\r\n                Assert.Equal(''my-reason'', entry[''Reason'']);\r\n                Assert.Equal(''Value'', entry[''Name'']);\r\n                Assert.True(entry.ContainsKey(''CreatedAt''));\r\n            })", span="132-153", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddJobState_AddsJobHistoryEntry_AsJsonObject()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_161 [label="Entry Unk.AddJobState", span="", cluster="Unk.AddJobState", file="RedisWriteOnlyTransactionFacts.cs"];
m10_114 [label="UseConnection(redis =>\r\n            {\r\n                // Arrange\r\n                redis.SetEntry(''hangfire:job:my-job'', ''job'', TimeSpan.FromDays(1));\r\n                redis.SetEntry(''hangfire:job:my-job:state'', ''state'', TimeSpan.FromDays(1));\r\n                redis.SetEntry(''hangfire:job:my-job:history'', ''history'', TimeSpan.FromDays(1));\r\n\r\n                // Act\r\n                Commit(redis, x => x.PersistJob(''my-job''));\r\n\r\n                // Assert\r\n                Assert.True(redis.GetTimeToLive(''hangfire:job:my-job'') < TimeSpan.Zero);\r\n                Assert.True(redis.GetTimeToLive(''hangfire:job:my-job:state'') < TimeSpan.Zero);\r\n                Assert.True(redis.GetTimeToLive(''hangfire:job:my-job:history'') < TimeSpan.Zero);\r\n            })", span="112-126", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.PersistJob_RemovesExpirationDatesForAllRelatedKeys()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_113 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.PersistJob_RemovesExpirationDatesForAllRelatedKeys()", span="110-110", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.PersistJob_RemovesExpirationDatesForAllRelatedKeys()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_115 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.PersistJob_RemovesExpirationDatesForAllRelatedKeys()", span="110-110", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.PersistJob_RemovesExpirationDatesForAllRelatedKeys()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_147 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="RedisWriteOnlyTransactionFacts.cs"];
m10_47 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_242 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_AddsItemToSortedSet()", span="240-240", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_AddsItemToSortedSet()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_243 [label="UseConnection(redis =>\r\n            {\r\n                Commit(redis, x => x.AddToSet(''my-set'', ''my-value''));\r\n\r\n                Assert.True(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''));\r\n            })", span="242-247", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_AddsItemToSortedSet()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_244 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_AddsItemToSortedSet()", span="240-240", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_AddsItemToSortedSet()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_329 [label="Entry RedisWriteOnlyTransaction.cstr", span="", cluster="RedisWriteOnlyTransaction.cstr", file="RedisWriteOnlyTransactionFacts.cs"];
m10_46 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RedisWriteOnlyTransactionFacts.cs"];
m10_288 [label="Entry Unk.AddItemToList", span="", cluster="Unk.AddItemToList", file="RedisWriteOnlyTransactionFacts.cs"];
m10_332 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.Commit()", span="41-41", cluster="HangFire.Redis.RedisWriteOnlyTransaction.Commit()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_321 [label="Entry lambda expression", span="314-314", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_4 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_5 [label="new RedisWriteOnlyTransaction(null)", span="16-16", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_6 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_12 [label="Entry lambda expression", span="22-40", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_13 [label="redis.SetEntry(''hangfire:job:my-job'', ''job'')", span="25-25", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_14 [label="redis.SetEntry(''hangfire:job:my-job:state'', ''state'')", span="26-26", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_15 [label="redis.SetEntry(''hangfire:job:my-job:history'', ''history'')", span="27-27", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_16 [label="Commit(redis, x => x.ExpireJob(''my-job'', TimeSpan.FromDays(1)))", span="30-30", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_17 [label="var jobEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job'')", span="33-33", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_18 [label="var stateEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job:state'')", span="34-34", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_19 [label="var historyEntryTtl = redis.GetTimeToLive(''hangfire:job:my-job:state'')", span="35-35", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_29 [label="Entry lambda expression", span="30-30", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_20 [label="Assert.True(TimeSpan.FromHours(23) < jobEntryTtl && jobEntryTtl < TimeSpan.FromHours(25))", span="37-37", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_21 [label="Assert.True(TimeSpan.FromHours(23) < stateEntryTtl && stateEntryTtl < TimeSpan.FromHours(25))", span="38-38", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_22 [label="Assert.True(TimeSpan.FromHours(23) < historyEntryTtl && historyEntryTtl < TimeSpan.FromHours(25))", span="39-39", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_23 [label="Exit lambda expression", span="22-40", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_30 [label="x.ExpireJob(''my-job'', TimeSpan.FromDays(1))", span="30-30", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_31 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_37 [label="Entry lambda expression", span="46-59", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_38 [label="var state = new Mock<IState>()", span="49-49", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_41 [label="Commit(redis, x => x.SetJobState(''my-job'', state.Object))", span="54-54", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_42 [label="var hash = redis.GetAllEntriesFromHash(''hangfire:job:my-job'')", span="57-57", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_39 [label="state.Setup(x => x.SerializeData()).Returns(new Dictionary<string, string>())", span="50-50", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_40 [label="state.Setup(x => x.Name).Returns(''my-state'')", span="51-51", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_59 [label="x.SetJobState(''my-job'', state.Object)", span="54-54", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_58 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_43 [label="Assert.Equal(''my-state'', hash[''State''])", span="58-58", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_44 [label="Exit lambda expression", span="46-59", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_56 [label="x.Name", span="51-51", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_57 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_60 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_65 [label="Entry lambda expression", span="65-88", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_66 [label="redis.SetEntryInHash(''hangfire:job:my-job:state'', ''OldName'', ''OldValue'')", span="68-68", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_71 [label="Commit(redis, x => x.SetJobState(''my-job'', state.Object))", span="80-80", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_72 [label="var stateHash = redis.GetAllEntriesFromHash(''hangfire:job:my-job:state'')", span="83-83", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_67 [label="var state = new Mock<IState>()", span="70-70", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_68 [label="state.Setup(x => x.SerializeData()).Returns(\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''Name'', ''Value'' }\r\n                    })", span="71-75", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_69 [label="state.Setup(x => x.Name).Returns(''my-state'')", span="76-76", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_70 [label="state.Setup(x => x.Reason).Returns(''my-reason'')", span="77-77", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_91 [label="x.SetJobState(''my-job'', state.Object)", span="80-80", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_81 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_84 [label="Entry lambda expression", span="76-76", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_87 [label="Entry lambda expression", span="77-77", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_90 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_73 [label="Assert.False(stateHash.ContainsKey(''OldName''))", span="84-84", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_74 [label="Assert.Equal(''my-state'', stateHash[''State''])", span="85-85", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_75 [label="Assert.Equal(''my-reason'', stateHash[''Reason''])", span="86-86", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_76 [label="Assert.Equal(''Value'', stateHash[''Name''])", span="87-87", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_77 [label="Exit lambda expression", span="65-88", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_82 [label="x.SerializeData()", span="71-71", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_83 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_85 [label="x.Name", span="76-76", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_86 [label="Exit lambda expression", span="76-76", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_88 [label="x.Reason", span="77-77", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_89 [label="Exit lambda expression", span="77-77", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_92 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_96 [label="Entry lambda expression", span="94-106", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_97 [label="var state = new Mock<IState>()", span="97-97", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_100 [label="Commit(redis, x => x.SetJobState(''my-job'', state.Object))", span="102-102", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_101 [label="Assert.Equal(1, redis.GetListCount(''hangfire:job:my-job:history''))", span="105-105", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_98 [label="state.Setup(x => x.Name).Returns(''my-state'')", span="98-98", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_99 [label="state.Setup(x => x.SerializeData()).Returns(new Dictionary<string, string>())", span="99-99", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_111 [label="x.SetJobState(''my-job'', state.Object)", span="102-102", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_104 [label="Entry lambda expression", span="98-98", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_107 [label="Entry lambda expression", span="99-99", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_110 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_102 [label="Exit lambda expression", span="94-106", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_105 [label="x.Name", span="98-98", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_106 [label="Exit lambda expression", span="98-98", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_108 [label="x.SerializeData()", span="99-99", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_109 [label="Exit lambda expression", span="99-99", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_112 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_116 [label="Entry lambda expression", span="112-126", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_117 [label="redis.SetEntry(''hangfire:job:my-job'', ''job'', TimeSpan.FromDays(1))", span="115-115", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_118 [label="redis.SetEntry(''hangfire:job:my-job:state'', ''state'', TimeSpan.FromDays(1))", span="116-116", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_119 [label="redis.SetEntry(''hangfire:job:my-job:history'', ''history'', TimeSpan.FromDays(1))", span="117-117", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_120 [label="Commit(redis, x => x.PersistJob(''my-job''))", span="120-120", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_121 [label="Assert.True(redis.GetTimeToLive(''hangfire:job:my-job'') < TimeSpan.Zero)", span="123-123", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_122 [label="Assert.True(redis.GetTimeToLive(''hangfire:job:my-job:state'') < TimeSpan.Zero)", span="124-124", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_123 [label="Assert.True(redis.GetTimeToLive(''hangfire:job:my-job:history'') < TimeSpan.Zero)", span="125-125", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_125 [label="Entry lambda expression", span="120-120", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_124 [label="Exit lambda expression", span="112-126", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_126 [label="x.PersistJob(''my-job'')", span="120-120", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_127 [label="Exit lambda expression", span="120-120", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_132 [label="Entry lambda expression", span="132-153", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_133 [label="var state = new Mock<IState>()", span="135-135", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_137 [label="Commit(redis, x => x.AddJobState(''my-job'', state.Object))", span="142-142", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_138 [label="var serializedEntry = redis.GetItemFromList(''hangfire:job:my-job:history'', 0)", span="145-145", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_134 [label="state.Setup(x => x.Name).Returns(''my-state'')", span="136-136", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_135 [label="state.Setup(x => x.Reason).Returns(''my-reason'')", span="137-137", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_136 [label="state.Setup(x => x.SerializeData()).Returns(\r\n                    new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="138-139", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_159 [label="x.AddJobState(''my-job'', state.Object)", span="142-142", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_149 [label="Entry lambda expression", span="136-136", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_152 [label="Entry lambda expression", span="137-137", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_155 [label="Entry lambda expression", span="138-138", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_158 [label="Entry lambda expression", span="142-142", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_139 [label="Assert.NotNull(serializedEntry)", span="146-146", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_140 [label="var entry = JobHelper.FromJson<Dictionary<string, string>>(serializedEntry)", span="148-148", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_141 [label="Assert.Equal(''my-state'', entry[''State''])", span="149-149", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_142 [label="Assert.Equal(''my-reason'', entry[''Reason''])", span="150-150", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_143 [label="Assert.Equal(''Value'', entry[''Name''])", span="151-151", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_144 [label="Assert.True(entry.ContainsKey(''CreatedAt''))", span="152-152", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_145 [label="Exit lambda expression", span="132-153", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_150 [label="x.Name", span="136-136", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_151 [label="Exit lambda expression", span="136-136", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_153 [label="x.Reason", span="137-137", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_154 [label="Exit lambda expression", span="137-137", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_156 [label="x.SerializeData()", span="138-138", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_157 [label="Exit lambda expression", span="138-138", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_160 [label="Exit lambda expression", span="142-142", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_165 [label="Entry lambda expression", span="159-165", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_166 [label="Commit(redis, x => x.AddToQueue(''critical'', ''my-job''))", span="161-161", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_167 [label="Assert.True(redis.SetContainsItem(''hangfire:queues'', ''critical''))", span="163-163", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_168 [label="Assert.Equal(''my-job'', redis.GetItemFromList(''hangfire:queue:critical'', 0))", span="164-164", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_171 [label="Entry lambda expression", span="161-161", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_169 [label="Exit lambda expression", span="159-165", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_172 [label="x.AddToQueue(''critical'', ''my-job'')", span="161-161", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_173 [label="Exit lambda expression", span="161-161", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_178 [label="Entry lambda expression", span="171-178", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_179 [label="redis.EnqueueItemOnList(''hangfire:queue:critical'', ''another-job'')", span="173-173", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_180 [label="Commit(redis, x => x.AddToQueue(''critical'', ''my-job''))", span="175-175", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_181 [label="Assert.Equal(''my-job'', redis.GetItemFromList(''hangfire:queue:critical'', 0))", span="177-177", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_184 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_182 [label="Exit lambda expression", span="171-178", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_185 [label="x.AddToQueue(''critical'', ''my-job'')", span="175-175", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_186 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_190 [label="Entry lambda expression", span="184-192", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_191 [label="redis.SetEntry(''hangfire:entry'', ''3'')", span="186-186", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_192 [label="Commit(redis, x => x.IncrementCounter(''entry''))", span="188-188", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_193 [label="Assert.Equal(''4'', redis.GetValue(''hangfire:entry''))", span="190-190", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_194 [label="Assert.True(redis.GetTimeToLive(''hangfire:entry'') < TimeSpan.Zero)", span="191-191", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_197 [label="Entry lambda expression", span="188-188", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_195 [label="Exit lambda expression", span="184-192", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_198 [label="x.IncrementCounter(''entry'')", span="188-188", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_199 [label="Exit lambda expression", span="188-188", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_204 [label="Entry lambda expression", span="198-207", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_205 [label="redis.SetEntry(''hangfire:entry'', ''3'')", span="200-200", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_206 [label="Commit(redis, x => x.IncrementCounter(''entry'', TimeSpan.FromDays(1)))", span="202-202", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_207 [label="var entryTtl = redis.GetTimeToLive(''hangfire:entry'')", span="204-204", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_208 [label="Assert.Equal(''4'', redis.GetValue(''hangfire:entry''))", span="205-205", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_211 [label="Entry lambda expression", span="202-202", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_209 [label="Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25))", span="206-206", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_210 [label="Exit lambda expression", span="198-207", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_212 [label="x.IncrementCounter(''entry'', TimeSpan.FromDays(1))", span="202-202", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_213 [label="Exit lambda expression", span="202-202", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_218 [label="Entry lambda expression", span="213-221", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_219 [label="redis.SetEntry(''hangfire:entry'', ''3'')", span="215-215", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_220 [label="Commit(redis, x => x.DecrementCounter(''entry''))", span="217-217", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_221 [label="Assert.Equal(''2'', redis.GetValue(''hangfire:entry''))", span="219-219", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_222 [label="Assert.True(redis.GetTimeToLive(''entry'') < TimeSpan.Zero)", span="220-220", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_224 [label="Entry lambda expression", span="217-217", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_223 [label="Exit lambda expression", span="213-221", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_225 [label="x.DecrementCounter(''entry'')", span="217-217", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_226 [label="Exit lambda expression", span="217-217", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_231 [label="Entry lambda expression", span="227-236", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_232 [label="redis.SetEntry(''hangfire:entry'', ''3'')", span="229-229", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_233 [label="Commit(redis, x => x.DecrementCounter(''entry'', TimeSpan.FromDays(1)))", span="231-231", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_234 [label="var entryTtl = redis.GetTimeToLive(''hangfire:entry'')", span="233-233", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_235 [label="Assert.Equal(''2'', redis.GetValue(''hangfire:entry''))", span="234-234", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_238 [label="Entry lambda expression", span="231-231", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_236 [label="Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25))", span="235-235", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_237 [label="Exit lambda expression", span="227-236", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_239 [label="x.DecrementCounter(''entry'', TimeSpan.FromDays(1))", span="231-231", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_240 [label="Exit lambda expression", span="231-231", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_245 [label="Entry lambda expression", span="242-247", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_246 [label="Commit(redis, x => x.AddToSet(''my-set'', ''my-value''))", span="244-244", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_247 [label="Assert.True(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''))", span="246-246", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_250 [label="Entry lambda expression", span="244-244", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_248 [label="Exit lambda expression", span="242-247", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_251 [label="x.AddToSet(''my-set'', ''my-value'')", span="244-244", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_252 [label="Exit lambda expression", span="244-244", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_257 [label="Entry lambda expression", span="253-259", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_258 [label="Commit(redis, x => x.AddToSet(''my-set'', ''my-value'', 3.2))", span="255-255", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_259 [label="Assert.True(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''))", span="257-257", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_260 [label="Assert.Equal(3.2, redis.GetItemScoreInSortedSet(''hangfire:my-set'', ''my-value''), 3)", span="258-258", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_263 [label="Entry lambda expression", span="255-255", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_261 [label="Exit lambda expression", span="253-259", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_264 [label="x.AddToSet(''my-set'', ''my-value'', 3.2)", span="255-255", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_265 [label="Exit lambda expression", span="255-255", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_270 [label="Entry lambda expression", span="265-272", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_271 [label="redis.AddItemToSortedSet(''hangfire:my-set'', ''my-value'')", span="267-267", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_272 [label="Commit(redis, x => x.RemoveFromSet(''my-set'', ''my-value''))", span="269-269", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_273 [label="Assert.False(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''))", span="271-271", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_276 [label="Entry lambda expression", span="269-269", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_274 [label="Exit lambda expression", span="265-272", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_277 [label="x.RemoveFromSet(''my-set'', ''my-value'')", span="269-269", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_278 [label="Exit lambda expression", span="269-269", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_283 [label="Entry lambda expression", span="278-285", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_284 [label="redis.AddItemToList(''hangfire:list'', ''value'')", span="280-280", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_285 [label="Commit(redis, x => x.InsertToList(''list'', ''new-value''))", span="282-282", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_286 [label="Assert.Equal(''new-value'', redis.GetItemFromList(''hangfire:list'', 0))", span="284-284", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_289 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_287 [label="Exit lambda expression", span="278-285", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_290 [label="x.InsertToList(''list'', ''new-value'')", span="282-282", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_291 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_296 [label="Entry lambda expression", span="291-301", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_297 [label="redis.AddItemToList(''hangfire:list'', ''value'')", span="293-293", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_298 [label="redis.AddItemToList(''hangfire:list'', ''another-value'')", span="294-294", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_299 [label="redis.AddItemToList(''hangfire:list'', ''value'')", span="295-295", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_300 [label="Commit(redis, x => x.RemoveFromList(''list'', ''value''))", span="297-297", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_301 [label="Assert.Equal(1, redis.GetListCount(''hangfire:list''))", span="299-299", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_302 [label="Assert.Equal(''another-value'', redis.GetItemFromList(''hangfire:list'', 0))", span="300-300", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_304 [label="Entry lambda expression", span="297-297", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_303 [label="Exit lambda expression", span="291-301", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_305 [label="x.RemoveFromList(''list'', ''value'')", span="297-297", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_306 [label="Exit lambda expression", span="297-297", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_311 [label="Entry lambda expression", span="307-319", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_312 [label="redis.AddItemToList(''hangfire:list'', ''1'')", span="309-309", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_313 [label="redis.AddItemToList(''hangfire:list'', ''2'')", span="310-310", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_314 [label="redis.AddItemToList(''hangfire:list'', ''3'')", span="311-311", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_315 [label="redis.AddItemToList(''hangfire:list'', ''4'')", span="312-312", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_316 [label="Commit(redis, x => x.TrimList(''list'', 1, 2))", span="314-314", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_317 [label="Assert.Equal(2, redis.GetListCount(''hangfire:list''))", span="316-316", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_318 [label="Assert.Equal(''2'', redis.GetItemFromList(''hangfire:list'', 0))", span="317-317", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_319 [label="Assert.Equal(''3'', redis.GetItemFromList(''hangfire:list'', 1))", span="318-318", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_320 [label="Exit lambda expression", span="307-319", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_322 [label="x.TrimList(''list'', 1, 2)", span="314-314", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_323 [label="Exit lambda expression", span="314-314", cluster="lambda expression", file="RedisWriteOnlyTransactionFacts.cs"];
m10_170 [label="Entry Unk.SetContainsItem", span="", cluster="Unk.SetContainsItem", file="RedisWriteOnlyTransactionFacts.cs"];
m10_266 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", span="161-161", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToSet(string, string, double)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_337 [label="Entry HangFire.Redis.Tests.RedisUtils.CreateClient()", span="15-15", cluster="HangFire.Redis.Tests.RedisUtils.CreateClient()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_200 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", span="133-133", cluster="HangFire.Redis.RedisWriteOnlyTransaction.IncrementCounter(string)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_33 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="62-62", cluster="HangFire.Redis.RedisWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_174 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", span="124-124", cluster="HangFire.Redis.RedisWriteOnlyTransaction.AddToQueue(string, string)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_196 [label="Entry Unk.GetValue", span="", cluster="Unk.GetValue", file="RedisWriteOnlyTransactionFacts.cs"];
m10_28 [label="Entry Unk.True", span="", cluster="Unk.True", file="RedisWriteOnlyTransactionFacts.cs"];
m10_254 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_WithScore_AddsItemToSortedSetWithScore()", span="251-251", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_WithScore_AddsItemToSortedSetWithScore()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_255 [label="UseConnection(redis =>\r\n            {\r\n                Commit(redis, x => x.AddToSet(''my-set'', ''my-value'', 3.2));\r\n\r\n                Assert.True(redis.SortedSetContainsItem(''hangfire:my-set'', ''my-value''));\r\n                Assert.Equal(3.2, redis.GetItemScoreInSortedSet(''hangfire:my-set'', ''my-value''), 3);\r\n            })", span="253-259", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_WithScore_AddsItemToSortedSetWithScore()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_256 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_WithScore_AddsItemToSortedSetWithScore()", span="251-251", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.AddToSet_WithScore_AddsItemToSortedSetWithScore()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_189 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_IncrementValueEntry()", span="182-182", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_IncrementValueEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_187 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_IncrementValueEntry()", span="182-182", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_IncrementValueEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_188 [label="UseConnection(redis =>\r\n            {\r\n                redis.SetEntry(''hangfire:entry'', ''3'');\r\n\r\n                Commit(redis, x => x.IncrementCounter(''entry''));\r\n\r\n                Assert.Equal(''4'', redis.GetValue(''hangfire:entry''));\r\n                Assert.True(redis.GetTimeToLive(''hangfire:entry'') < TimeSpan.Zero);\r\n            })", span="184-192", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.IncrementCounter_IncrementValueEntry()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_307 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", span="179-179", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RemoveFromList(string, string)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_308 [label="Entry HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.TrimList_TrimsListToASpecifiedRange()", span="305-305", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.TrimList_TrimsListToASpecifiedRange()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_309 [label="UseConnection(redis =>\r\n            {\r\n                redis.AddItemToList(''hangfire:list'', ''1'');\r\n                redis.AddItemToList(''hangfire:list'', ''2'');\r\n                redis.AddItemToList(''hangfire:list'', ''3'');\r\n                redis.AddItemToList(''hangfire:list'', ''4'');\r\n\r\n                Commit(redis, x => x.TrimList(''list'', 1, 2));\r\n\r\n                Assert.Equal(2, redis.GetListCount(''hangfire:list''));\r\n                Assert.Equal(''2'', redis.GetItemFromList(''hangfire:list'', 0));\r\n                Assert.Equal(''3'', redis.GetItemFromList(''hangfire:list'', 1));\r\n            })", span="307-319", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.TrimList_TrimsListToASpecifiedRange()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_310 [label="Exit HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.TrimList_TrimsListToASpecifiedRange()", span="305-305", cluster="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts.TrimList_TrimsListToASpecifiedRange()", file="RedisWriteOnlyTransactionFacts.cs"];
m10_7 [label="Entry HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", span="29-29", cluster="HangFire.Redis.RedisWriteOnlyTransaction.RedisWriteOnlyTransaction(IRedisTransaction)", file="RedisWriteOnlyTransactionFacts.cs"];
m10_338 [label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts", span="", file="RedisWriteOnlyTransactionFacts.cs"];
m10_339 [label=state, span="", file="RedisWriteOnlyTransactionFacts.cs"];
m10_340 [label=state, span="", file="RedisWriteOnlyTransactionFacts.cs"];
m10_341 [label=state, span="", file="RedisWriteOnlyTransactionFacts.cs"];
m10_342 [label=state, span="", file="RedisWriteOnlyTransactionFacts.cs"];
m11_8 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_89 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="155-155", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_90 [label="AddToSet(key, value, 0.0)", span="157-157", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_91 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="155-155", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_105 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="181-181", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_106 [label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value)'',\r\n                new { key, value }))", span="183-185", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_107 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="181-181", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_92 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="160-160", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs"];
m11_94 [label="QueueCommand(x => x.Execute(\r\n                addSql,\r\n                new { key, value, score }))", span="169-171", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs"];
m11_93 [label="string addSql = @''\r\nmerge HangFire.[Set] as Target\r\nusing (VALUES (@key, @value, @score)) as Source ([Key], Value, Score)\r\non Target.[Key] = Source.[Key] and Target.Value = Source.Value\r\nwhen matched then update set Score = Source.Score\r\nwhen not matched then insert ([Key], Value, Score) values (Source.[Key], Source.Value, Source.Score);''", span="162-167", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs"];
m11_95 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="160-160", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransaction.cs"];
m11_71 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="134-134", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m11_72 [label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="136-138", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m11_73 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="134-134", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m11_0 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerWriteOnlyTransaction.cs"];
m11_1 [label="connection == null", span="39-39", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerWriteOnlyTransaction.cs"];
m11_126 [label="Entry System.Collections.Generic.Queue<T>.Enqueue(T)", span="0-0", cluster="System.Collections.Generic.Queue<T>.Enqueue(T)", file="SqlServerWriteOnlyTransaction.cs"];
m11_47 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", span="101-101", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m11_49 [label="QueueCommand(x => x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                }))", span="107-116", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m11_48 [label="string addStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data)''", span="103-105", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m11_50 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", span="101-101", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m11_5 [label="_connection = connection", span="42-42", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerWriteOnlyTransaction.cs"];
m11_6 [label="_queueProviders = queueProviders", span="43-43", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerWriteOnlyTransaction.cs"];
m11_3 [label="queueProviders == null", span="40-40", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerWriteOnlyTransaction.cs"];
m11_4 [label="throw new ArgumentNullException(''queueProviders'');", span="40-40", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerWriteOnlyTransaction.cs"];
m11_2 [label="throw new ArgumentNullException(''connection'');", span="39-39", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerWriteOnlyTransaction.cs"];
m11_7 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerWriteOnlyTransaction.cs"];
m11_117 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="195-195", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs"];
m11_119 [label="QueueCommand(x => x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 }))", span="202-204", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs"];
m11_118 [label="string trimSql = @''\r\nwith cte as (\r\nselect row_number() over (order by Id desc) as row_num, [Key] from HangFire.List)\r\ndelete from cte where row_num not between @start and @end and [Key] = @key''", span="197-200", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs"];
m11_120 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="195-195", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransaction.cs"];
m11_26 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="207-207", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs"];
m11_124 [label="_commandQueue.Enqueue(action)", span="209-209", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", color=green, community=0, file="SqlServerWriteOnlyTransaction.cs"];
m11_125 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="207-207", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransaction.cs"];
m11_45 [label="Entry HangFire.States.IState.SerializeData()", span="27-27", cluster="HangFire.States.IState.SerializeData()", file="SqlServerWriteOnlyTransaction.cs"];
m11_20 [label="Entry Unk.EnlistTransaction", span="", cluster="Unk.EnlistTransaction", file="SqlServerWriteOnlyTransaction.cs"];
m11_83 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="148-148", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m11_84 [label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="150-152", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m11_85 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="148-148", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m11_38 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="81-81", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m11_40 [label="QueueCommand(x => x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                }))", span="88-98", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m11_39 [label="string addAndSetStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data);\r\nupdate HangFire.Job set StateId = SCOPE_IDENTITY(), StateName = @name where Id = @id;''", span="83-86", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m11_41 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", span="81-81", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, HangFire.States.IState)", file="SqlServerWriteOnlyTransaction.cs"];
m11_21 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransaction.cs"];
m11_77 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="141-141", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_78 [label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 }))", span="143-145", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_79 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="141-141", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_18 [label="Entry TransactionScope.cstr", span="", cluster="TransactionScope.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m11_22 [label="Entry Unk.Complete", span="", cluster="Unk.Complete", file="SqlServerWriteOnlyTransaction.cs"];
m11_64 [label="Entry HangFire.SqlServer.IPersistentJobQueue.Enqueue(string, string)", span="24-24", cluster="HangFire.SqlServer.IPersistentJobQueue.Enqueue(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_30 [label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0", cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m11_99 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="174-174", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_100 [label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="176-178", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_101 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="174-174", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_23 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="67-67", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m11_24 [label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId }))", span="69-71", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m11_25 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="67-67", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="SqlServerWriteOnlyTransaction.cs"];
m11_111 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="188-188", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_112 [label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="190-192", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_113 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="188-188", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_11 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="50-50", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m11_13 [label="_connection.EnlistTransaction(Transaction.Current)", span="56-56", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m11_14 [label=_commandQueue, span="58-58", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m11_15 [label="command(_connection)", span="60-60", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m11_12 [label="var transaction = new TransactionScope(\r\n                TransactionScopeOption.Required,\r\n                new TransactionOptions { IsolationLevel = IsolationLevel.Serializable })", span="52-54", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m11_16 [label="transaction.Complete()", span="63-63", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m11_17 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="50-50", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransaction.cs"];
m11_59 [label="Entry HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_19 [label="Entry TransactionOptions.cstr", span="", cluster="TransactionOptions.cstr", file="SqlServerWriteOnlyTransaction.cs"];
m11_121 [label="Entry lambda expression", span="202-204", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_27 [label="Entry lambda expression", span="69-71", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_35 [label="Entry lambda expression", span="76-78", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_42 [label="Entry lambda expression", span="88-98", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_51 [label="Entry lambda expression", span="107-116", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_62 [label="persistentQueue.Enqueue(queue, jobId)", span="124-124", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_61 [label="Entry lambda expression", span="124-124", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_68 [label="Entry lambda expression", span="129-131", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_74 [label="Entry lambda expression", span="136-138", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_80 [label="Entry lambda expression", span="143-145", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_86 [label="Entry lambda expression", span="150-152", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_96 [label="Entry lambda expression", span="169-171", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_102 [label="Entry lambda expression", span="176-178", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_108 [label="Entry lambda expression", span="183-185", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_114 [label="Entry lambda expression", span="190-192", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_28 [label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId })", span="69-71", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_29 [label="Exit lambda expression", span="69-71", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_36 [label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId })", span="76-78", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_37 [label="Exit lambda expression", span="76-78", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_43 [label="x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                })", span="88-98", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_44 [label="Exit lambda expression", span="88-98", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_52 [label="x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                })", span="107-116", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_53 [label="Exit lambda expression", span="107-116", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_63 [label="Exit lambda expression", span="124-124", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_69 [label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 })", span="129-131", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_70 [label="Exit lambda expression", span="129-131", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_75 [label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="136-138", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_76 [label="Exit lambda expression", span="136-138", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_81 [label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 })", span="143-145", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_82 [label="Exit lambda expression", span="143-145", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_87 [label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="150-152", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_88 [label="Exit lambda expression", span="150-152", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_97 [label="x.Execute(\r\n                addSql,\r\n                new { key, value, score })", span="169-171", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_98 [label="Exit lambda expression", span="169-171", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_103 [label="x.Execute(\r\n                @''delete from HangFire.[Set] where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="176-178", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_104 [label="Exit lambda expression", span="176-178", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_109 [label="x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value)'',\r\n                new { key, value })", span="183-185", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_110 [label="Exit lambda expression", span="183-185", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_115 [label="x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="190-192", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_116 [label="Exit lambda expression", span="190-192", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_122 [label="x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 })", span="202-204", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_123 [label="Exit lambda expression", span="202-204", cluster="lambda expression", file="SqlServerWriteOnlyTransaction.cs"];
m11_46 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerWriteOnlyTransaction.cs"];
m11_31 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="SqlServerWriteOnlyTransaction.cs"];
m11_54 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="119-119", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_55 [label="var provider = _queueProviders.GetProvider(queue)", span="121-121", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_56 [label="var persistentQueue = provider.GetJobQueue(_connection)", span="122-122", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_57 [label="QueueCommand(_ => persistentQueue.Enqueue(queue, jobId))", span="124-124", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_58 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="119-119", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_60 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="SqlServerWriteOnlyTransaction.cs"];
m11_65 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="127-127", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_66 [label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 }))", span="129-131", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_67 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="127-127", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_32 [label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="74-74", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_33 [label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId }))", span="76-78", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_34 [label="Exit HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="74-74", cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="SqlServerWriteOnlyTransaction.cs"];
m11_127 [label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_137 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_138 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_139 [label=persistentQueue, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_128 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_129 [label="System.TimeSpan", span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_130 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_131 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_132 [label="HangFire.States.IState", span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_133 [label=addAndSetStateSql, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_134 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_135 [label="HangFire.States.IState", span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_136 [label=addStateSql, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_140 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_141 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_142 [label="System.TimeSpan", span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_143 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_144 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_145 [label="System.TimeSpan", span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_146 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_147 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_148 [label=double, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_149 [label=addSql, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_150 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_151 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_152 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_153 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_154 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_155 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_156 [label=string, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_157 [label=int, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_158 [label=int, span="", file="SqlServerWriteOnlyTransaction.cs"];
m11_159 [label=trimSql, span="", file="SqlServerWriteOnlyTransaction.cs"];
m12_73 [label="Entry RecurringJobScheduler.cstr", span="", cluster="RecurringJobScheduler.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_18 [label="Entry Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", span="12-12", cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_122 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_19 [label="Entry Mock<IThrottler>.cstr", span="", cluster="Mock<IThrottler>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_159 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", span="165-165", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_160 [label="var time = DateTime.UtcNow", span="167-167", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_161 [label="_recurringJob[''LastExecution''] = JobHelper.SerializeDateTime(time)", span="168-168", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_164 [label="_instant.Verify(x => x.GetNextInstants(time))", span="173-173", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_162 [label="var scheduler = CreateScheduler()", span="169-169", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_163 [label="scheduler.Execute(_context.Object)", span="171-171", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_165 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", span="165-165", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_257 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_PassesNextExecutionTime_ToGetNextInstants_WhenBothLastExecutionAndCreatedAtAreNotAvailable()", span="298-298", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_PassesNextExecutionTime_ToGetNextInstants_WhenBothLastExecutionAndCreatedAtAreNotAvailable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_258 [label="var nextExecution = DateTime.UtcNow.AddHours(-10)", span="301-301", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_PassesNextExecutionTime_ToGetNextInstants_WhenBothLastExecutionAndCreatedAtAreNotAvailable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_259 [label="_recurringJob[''NextExecution''] = JobHelper.SerializeDateTime(nextExecution)", span="302-302", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_PassesNextExecutionTime_ToGetNextInstants_WhenBothLastExecutionAndCreatedAtAreNotAvailable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_264 [label="_instant.Verify(x => x.GetNextInstants(\r\n                It.Is<DateTime>(time => time < nextExecution)))", span="312-313", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_PassesNextExecutionTime_ToGetNextInstants_WhenBothLastExecutionAndCreatedAtAreNotAvailable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_260 [label="_recurringJob.Remove(''CreatedAt'')", span="303-303", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_PassesNextExecutionTime_ToGetNextInstants_WhenBothLastExecutionAndCreatedAtAreNotAvailable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_261 [label="_recurringJob.Remove(''LastExecution'')", span="304-304", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_PassesNextExecutionTime_ToGetNextInstants_WhenBothLastExecutionAndCreatedAtAreNotAvailable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_262 [label="var scheduler = CreateScheduler()", span="306-306", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_PassesNextExecutionTime_ToGetNextInstants_WhenBothLastExecutionAndCreatedAtAreNotAvailable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_263 [label="scheduler.Execute(_context.Object)", span="309-309", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_PassesNextExecutionTime_ToGetNextInstants_WhenBothLastExecutionAndCreatedAtAreNotAvailable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_265 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_PassesNextExecutionTime_ToGetNextInstants_WhenBothLastExecutionAndCreatedAtAreNotAvailable()", span="298-298", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_PassesNextExecutionTime_ToGetNextInstants_WhenBothLastExecutionAndCreatedAtAreNotAvailable()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_60 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_69 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_170 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="177-177", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_171 [label="_connection.Setup(x => x.GetAllItemsFromSet(It.IsAny<string>()))\r\n                .Returns(new HashSet<string> { ''non-existing-job'' })", span="179-180", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_172 [label="var scheduler = CreateScheduler()", span="181-181", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_173 [label="scheduler.Execute(_context.Object)", span="184-184", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_174 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="177-177", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_111 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", span="118-118", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_112 [label="var scheduler = CreateScheduler()", span="121-121", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_113 [label="scheduler.Execute(_context.Object)", span="124-124", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_114 [label="var jobKey = $''recurring-job:{RecurringJobId}''", span="127-127", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_115 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == _backgroundJobMock.Id)))", span="129-132", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_116 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastExecution'') && rj[''LastExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NowInstant))))", span="134-138", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_117 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NowInstant))))", span="140-144", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_118 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", span="118-118", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_140 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", span="148-148", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_141 [label="_instant.Setup(x => x.GetNextInstants(It.IsAny<DateTime>())).Returns(Enumerable.Empty<DateTime>)", span="150-150", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_142 [label="var scheduler = CreateScheduler()", span="151-151", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_143 [label="scheduler.Execute(_context.Object)", span="153-153", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_144 [label="_factory.Verify(x => x.Create(It.IsAny<CreateContext>()), Times.Never)", span="155-155", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_145 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                $''recurring-job:{RecurringJobId}'',\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextInstant.Value))))", span="157-161", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_146 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", span="148-148", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_74 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", span="76-76", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_75 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(_factory.Object, null, _throttler.Object))", span="78-80", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_76 [label="Assert.Equal(''instantFactory'', exception.ParamName)", span="82-82", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_77 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", span="76-76", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_93 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="316-316", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_272 [label="return new RecurringJobScheduler(\r\n                _factory.Object,\r\n                _instantFactory,\r\n                _throttler.Object);", span="318-321", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_273 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="316-316", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_200 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_UseUtcTimeZone_WhenItIsNotProvided()", span="220-220", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_UseUtcTimeZone_WhenItIsNotProvided()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_201 [label="_instantFactory = (schedule, timeZoneInfo) =>\r\n            {\r\n                if (!timeZoneInfo.Equals(TimeZoneInfo.Utc)) throw new InvalidOperationException(''Invalid timezone'');\r\n                return _instant.Object;\r\n            }", span="223-227", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_UseUtcTimeZone_WhenItIsNotProvided()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_202 [label="_recurringJob.Remove(''TimeZoneId'')", span="228-228", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_UseUtcTimeZone_WhenItIsNotProvided()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_203 [label="var scheduler = CreateScheduler()", span="229-229", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_UseUtcTimeZone_WhenItIsNotProvided()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_204 [label="scheduler.Execute(_context.Object)", span="232-232", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_UseUtcTimeZone_WhenItIsNotProvided()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_205 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_UseUtcTimeZone_WhenItIsNotProvided()", span="220-220", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_UseUtcTimeZone_WhenItIsNotProvided()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_34 [label="Entry Unk.>", span="", cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_212 [label="Entry System.TimeZoneInfo.Equals(System.TimeZoneInfo)", span="0-0", cluster="System.TimeZoneInfo.Equals(System.TimeZoneInfo)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_192 [label="Entry Hangfire.Core.Tests.PlatformHelper.IsRunningOnWindows()", span="10-10", cluster="Hangfire.Core.Tests.PlatformHelper.IsRunningOnWindows()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_193 [label="Entry System.TimeZoneInfo.FindSystemTimeZoneById(string)", span="0-0", cluster="System.TimeZoneInfo.FindSystemTimeZoneById(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_222 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetNextInstants_IsCalledWithCreatedAtTime_IfExists()", span="247-247", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetNextInstants_IsCalledWithCreatedAtTime_IfExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_223 [label="var createdAt = DateTime.UtcNow.AddHours(-3)", span="250-250", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetNextInstants_IsCalledWithCreatedAtTime_IfExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_224 [label="_recurringJob[''CreatedAt''] = JobHelper.SerializeDateTime(createdAt)", span="251-251", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetNextInstants_IsCalledWithCreatedAtTime_IfExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_227 [label="_instant.Verify(x => x.GetNextInstants(createdAt), Times.Once)", span="258-258", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetNextInstants_IsCalledWithCreatedAtTime_IfExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_225 [label="var scheduler = CreateScheduler()", span="252-252", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetNextInstants_IsCalledWithCreatedAtTime_IfExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_226 [label="scheduler.Execute(_context.Object)", span="255-255", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetNextInstants_IsCalledWithCreatedAtTime_IfExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_228 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetNextInstants_IsCalledWithCreatedAtTime_IfExists()", span="247-247", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetNextInstants_IsCalledWithCreatedAtTime_IfExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_29 [label="Entry Hangfire.Core.Tests.BackgroundJobMock.BackgroundJobMock()", span="9-9", cluster="Hangfire.Core.Tests.BackgroundJobMock.BackgroundJobMock()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_245 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_FixedMissingCreatedAtField()", span="280-280", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_FixedMissingCreatedAtField()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_246 [label="_recurringJob.Remove(''CreatedAt'')", span="283-283", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_FixedMissingCreatedAtField()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_247 [label="var scheduler = CreateScheduler()", span="284-284", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_FixedMissingCreatedAtField()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_248 [label="scheduler.Execute(_context.Object)", span="287-287", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_FixedMissingCreatedAtField()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_249 [label="_connection.Verify(\r\n                x => x.SetRangeInHash(\r\n                    $''recurring-job:{RecurringJobId}'',\r\n                    It.Is<Dictionary<string, string>>(rj => rj.ContainsKey(''CreatedAt''))),\r\n                Times.Once)", span="290-294", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_FixedMissingCreatedAtField()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_250 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_FixedMissingCreatedAtField()", span="280-280", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_FixedMissingCreatedAtField()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_25 [label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="70-70", cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_0 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="27-27", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_1 [label="_context = new BackgroundProcessContextMock()", span="29-29", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_2 [label="_throttler = new Mock<IThrottler>()", span="31-31", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_3 [label="_instant = new Mock<IScheduleInstant>()", span="34-34", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_4 [label="_instant.Setup(x => x.GetNextInstants(It.IsAny<DateTime>())).Returns(new[] { _instant.Object.NowInstant })", span="35-35", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_5 [label="_instant.Setup(x => x.NowInstant).Returns(DateTime.UtcNow)", span="36-36", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_6 [label="_instant.Setup(x => x.NextInstant).Returns(_instant.Object.NowInstant)", span="37-37", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_7 [label="var timeZone1 = TimeZoneInfo.Local", span="39-39", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_8 [label="_instantFactory = (schedule, timeZone) => _instant.Object", span="41-41", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_9 [label="_recurringJob = new Dictionary<string, string>\r\n            {\r\n                { ''Cron'', ''* * * * *'' },\r\n                { ''Job'', JobHelper.ToJson(InvocationData.Serialize(Job.FromExpression(() => Console.WriteLine()))) },\r\n                { ''TimeZoneId'', timeZone1.Id }\r\n            }", span="43-48", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_10 [label="_connection = new Mock<IStorageConnection>()", span="50-50", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_11 [label="_context.Storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="51-51", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_12 [label="_connection.Setup(x => x.GetAllItemsFromSet(''recurring-jobs''))\r\n                .Returns(new HashSet<string> { RecurringJobId })", span="53-54", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_13 [label="_connection.Setup(x => x.GetAllEntriesFromHash($''recurring-job:{RecurringJobId}''))\r\n                .Returns(_recurringJob)", span="56-57", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_14 [label="_backgroundJobMock = new BackgroundJobMock()", span="59-59", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_15 [label="_factory = new Mock<IBackgroundJobFactory>()", span="61-61", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_16 [label="_factory.Setup(x => x.Create(It.IsAny<CreateContext>())).Returns(_backgroundJobMock.Object)", span="62-62", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_17 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="27-27", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_20 [label="Entry Mock<IScheduleInstant>.cstr", span="", cluster="Mock<IScheduleInstant>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_52 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_199 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_133 [label="Entry Unk.SerializeDateTime", span="", cluster="Unk.SerializeDateTime", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_23 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_99 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJobToAGivenQueue_WhenItIsTimeToRunIt()", span="106-106", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJobToAGivenQueue_WhenItIsTimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_100 [label="_recurringJob[''Queue''] = ''critical''", span="108-108", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJobToAGivenQueue_WhenItIsTimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_101 [label="var scheduler = CreateScheduler()", span="109-109", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJobToAGivenQueue_WhenItIsTimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_102 [label="scheduler.Execute(_context.Object)", span="111-111", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJobToAGivenQueue_WhenItIsTimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_103 [label="_factory.Verify(x => x.Create(\r\n                It.Is<CreateContext>(cc => ((EnqueuedState)cc.InitialState).Queue == ''critical'')))", span="113-114", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJobToAGivenQueue_WhenItIsTimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_104 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJobToAGivenQueue_WhenItIsTimeToRunIt()", span="106-106", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJobToAGivenQueue_WhenItIsTimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_166 [label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68", cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_21 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_213 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_DoesNotCreateAJob_WhenGivenOneIsNotFound()", span="236-236", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_DoesNotCreateAJob_WhenGivenOneIsNotFound()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_214 [label="_recurringJob[''TimeZoneId''] = ''Some garbage''", span="238-238", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_DoesNotCreateAJob_WhenGivenOneIsNotFound()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_215 [label="var scheduler = CreateScheduler()", span="239-239", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_DoesNotCreateAJob_WhenGivenOneIsNotFound()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_216 [label="scheduler.Execute(_context.Object)", span="241-241", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_DoesNotCreateAJob_WhenGivenOneIsNotFound()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_217 [label="_factory.Verify(x => x.Create(It.IsAny<CreateContext>()), Times.Never)", span="243-243", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_DoesNotCreateAJob_WhenGivenOneIsNotFound()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_218 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_DoesNotCreateAJob_WhenGivenOneIsNotFound()", span="236-236", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetInstance_DoesNotCreateAJob_WhenGivenOneIsNotFound()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_88 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", span="96-96", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_89 [label="var scheduler = CreateScheduler()", span="98-98", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_90 [label="scheduler.Execute(_context.Object)", span="100-100", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_91 [label="_factory.Verify(x => x.Create(It.IsNotNull<CreateContext>()))", span="102-102", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_92 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", span="96-96", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_233 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFixCreatedAtField_IfItExists()", span="262-262", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFixCreatedAtField_IfItExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_234 [label="_recurringJob[''CreatedAt''] = JobHelper.SerializeDateTime(DateTime.UtcNow)", span="265-265", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFixCreatedAtField_IfItExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_235 [label="var scheduler = CreateScheduler()", span="266-266", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFixCreatedAtField_IfItExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_236 [label="scheduler.Execute(_context.Object)", span="269-269", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFixCreatedAtField_IfItExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_237 [label="_connection.Verify(\r\n                x => x.SetRangeInHash(\r\n                    $''recurring-job:{RecurringJobId}'',\r\n                    It.Is<Dictionary<string, string>>(rj => rj.ContainsKey(''CreatedAt''))),\r\n                Times.Never)", span="272-276", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFixCreatedAtField_IfItExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_238 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFixCreatedAtField_IfItExists()", span="262-262", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFixCreatedAtField_IfItExists()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_184 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetsInstance_InAGivenTimeZone()", span="201-201", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetsInstance_InAGivenTimeZone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_185 [label="var timeZoneId = PlatformHelper.IsRunningOnWindows() ? ''Hawaiian Standard Time'' : ''Pacific/Honolulu''", span="203-203", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetsInstance_InAGivenTimeZone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_186 [label="_instantFactory = (schedule, timeZoneInfo) =>\r\n            {\r\n                if (timeZoneInfo.Id != timeZoneId) throw new InvalidOperationException(''Invalid timezone'');\r\n                return _instant.Object;\r\n            }", span="205-209", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetsInstance_InAGivenTimeZone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_187 [label="var timeZone = TimeZoneInfo.FindSystemTimeZoneById(timeZoneId)", span="211-211", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetsInstance_InAGivenTimeZone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_188 [label="_recurringJob[''TimeZoneId''] = timeZone.Id", span="212-212", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetsInstance_InAGivenTimeZone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_189 [label="var scheduler = CreateScheduler()", span="213-213", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetsInstance_InAGivenTimeZone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_190 [label="scheduler.Execute(_context.Object)", span="216-216", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetsInstance_InAGivenTimeZone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_191 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetsInstance_InAGivenTimeZone()", span="201-201", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_GetsInstance_InAGivenTimeZone()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_26 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_94 [label="Entry Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", span="110-110", cluster="Hangfire.Server.RecurringJobScheduler.Execute(Hangfire.Server.BackgroundProcessContext)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_269 [label="Entry lambda expression", span="313-313", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_31 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_36 [label="Entry lambda expression", span="36-36", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_39 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_45 [label="Entry lambda expression", span="46-46", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_49 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_53 [label="Entry lambda expression", span="53-53", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_57 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_61 [label="Entry lambda expression", span="62-62", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_32 [label="x.GetNextInstants(It.IsAny<DateTime>())", span="35-35", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_33 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_37 [label="x.NowInstant", span="36-36", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_38 [label="Exit lambda expression", span="36-36", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_40 [label="x.NextInstant", span="37-37", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_41 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_42 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_43 [label="_instant.Object", span="41-41", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_44 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_46 [label="Console.WriteLine()", span="46-46", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_47 [label="Exit lambda expression", span="46-46", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_50 [label="x.GetConnection()", span="51-51", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_51 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_54 [label="x.GetAllItemsFromSet(''recurring-jobs'')", span="53-53", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_55 [label="Exit lambda expression", span="53-53", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_58 [label="x.GetAllEntriesFromHash($''recurring-job:{RecurringJobId}'')", span="56-56", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_59 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_62 [label="x.Create(It.IsAny<CreateContext>())", span="62-62", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_63 [label="Exit lambda expression", span="62-62", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_70 [label="Entry lambda expression", span="70-70", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_71 [label="new RecurringJobScheduler(null, _instantFactory, _throttler.Object)", span="70-70", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_72 [label="Exit lambda expression", span="70-70", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_78 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_79 [label="new RecurringJobScheduler(_factory.Object, null, _throttler.Object)", span="80-80", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_80 [label="Exit lambda expression", span="80-80", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_85 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_86 [label="new RecurringJobScheduler(_factory.Object, _instantFactory, null)", span="90-90", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_87 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_96 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_97 [label="x.Create(It.IsNotNull<CreateContext>())", span="102-102", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_98 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_105 [label="Entry lambda expression", span="113-114", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_106 [label="x.Create(\r\n                It.Is<CreateContext>(cc => ((EnqueuedState)cc.InitialState).Queue == ''critical''))", span="113-114", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_107 [label="Exit lambda expression", span="113-114", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_108 [label="Entry lambda expression", span="114-114", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_109 [label="((EnqueuedState)cc.InitialState).Queue == ''critical''", span="114-114", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_110 [label="Exit lambda expression", span="114-114", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_120 [label="x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == _backgroundJobMock.Id))", span="129-132", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_128 [label="x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastExecution'') && rj[''LastExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NowInstant)))", span="134-138", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_135 [label="x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NowInstant)))", span="140-144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_119 [label="Entry lambda expression", span="129-132", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_127 [label="Entry lambda expression", span="134-138", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_134 [label="Entry lambda expression", span="140-144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_121 [label="Exit lambda expression", span="129-132", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_123 [label="Entry lambda expression", span="131-132", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_124 [label="rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == _backgroundJobMock.Id", span="132-132", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_125 [label="Exit lambda expression", span="131-132", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_129 [label="Exit lambda expression", span="134-138", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_130 [label="Entry lambda expression", span="136-138", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_131 [label="rj.ContainsKey(''LastExecution'') && rj[''LastExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NowInstant)", span="137-138", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_132 [label="Exit lambda expression", span="136-138", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_136 [label="Exit lambda expression", span="140-144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_137 [label="Entry lambda expression", span="142-144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_138 [label="rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NowInstant)", span="143-144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_139 [label="Exit lambda expression", span="142-144", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_147 [label="Entry lambda expression", span="150-150", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_150 [label="Entry lambda expression", span="155-155", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_153 [label="Entry lambda expression", span="157-161", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_148 [label="x.GetNextInstants(It.IsAny<DateTime>())", span="150-150", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_149 [label="Exit lambda expression", span="150-150", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_151 [label="x.Create(It.IsAny<CreateContext>())", span="155-155", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_152 [label="Exit lambda expression", span="155-155", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_154 [label="x.SetRangeInHash(\r\n                $''recurring-job:{RecurringJobId}'',\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextInstant.Value)))", span="157-161", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_155 [label="Exit lambda expression", span="157-161", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_156 [label="Entry lambda expression", span="159-161", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_157 [label="rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextInstant.Value)", span="160-161", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_158 [label="Exit lambda expression", span="159-161", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_168 [label="x.GetNextInstants(time)", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_167 [label="Entry lambda expression", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_169 [label="Exit lambda expression", span="173-173", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_175 [label="Entry lambda expression", span="179-179", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_176 [label="x.GetAllItemsFromSet(It.IsAny<string>())", span="179-179", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_177 [label="Exit lambda expression", span="179-179", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_195 [label="timeZoneInfo.Id != timeZoneId", span="207-207", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_194 [label="Entry lambda expression", span="205-209", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_196 [label="throw new InvalidOperationException(''Invalid timezone'');", span="207-207", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_197 [label="return _instant.Object;", span="208-208", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_198 [label="Exit lambda expression", span="205-209", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_208 [label="!timeZoneInfo.Equals(TimeZoneInfo.Utc)", span="225-225", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_207 [label="Entry lambda expression", span="223-227", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_209 [label="throw new InvalidOperationException(''Invalid timezone'');", span="225-225", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_210 [label="return _instant.Object;", span="226-226", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_211 [label="Exit lambda expression", span="223-227", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_219 [label="Entry lambda expression", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_220 [label="x.Create(It.IsAny<CreateContext>())", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_221 [label="Exit lambda expression", span="243-243", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_231 [label="x.GetNextInstants(createdAt)", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_230 [label="Entry lambda expression", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_232 [label="Exit lambda expression", span="258-258", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_239 [label="Entry lambda expression", span="273-275", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_240 [label="x.SetRangeInHash(\r\n                    $''recurring-job:{RecurringJobId}'',\r\n                    It.Is<Dictionary<string, string>>(rj => rj.ContainsKey(''CreatedAt'')))", span="273-275", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_241 [label="Exit lambda expression", span="273-275", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_242 [label="Entry lambda expression", span="275-275", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_243 [label="rj.ContainsKey(''CreatedAt'')", span="275-275", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_244 [label="Exit lambda expression", span="275-275", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_251 [label="Entry lambda expression", span="291-293", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_252 [label="x.SetRangeInHash(\r\n                    $''recurring-job:{RecurringJobId}'',\r\n                    It.Is<Dictionary<string, string>>(rj => rj.ContainsKey(''CreatedAt'')))", span="291-293", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_253 [label="Exit lambda expression", span="291-293", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_254 [label="Entry lambda expression", span="293-293", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_255 [label="rj.ContainsKey(''CreatedAt'')", span="293-293", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_256 [label="Exit lambda expression", span="293-293", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_267 [label="x.GetNextInstants(\r\n                It.Is<DateTime>(time => time < nextExecution))", span="312-313", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_270 [label="time < nextExecution", span="313-313", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_266 [label="Entry lambda expression", span="312-313", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_268 [label="Exit lambda expression", span="312-313", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_271 [label="Exit lambda expression", span="313-313", cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_35 [label="Entry Unk.GetNextInstants", span="", cluster="Unk.GetNextInstants", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_65 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", span="66-66", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_66 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(null, _instantFactory, _throttler.Object))", span="68-70", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_67 [label="Assert.Equal(''factory'', exception.ParamName)", span="72-72", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_68 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", span="66-66", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_95 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_229 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_56 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_64 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_183 [label="Entry Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", span="31-31", cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_30 [label="Entry Mock<IBackgroundJobFactory>.cstr", span="", cluster="Mock<IBackgroundJobFactory>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_22 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_81 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", span="86-86", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_82 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(_factory.Object, _instantFactory, null))", span="88-90", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_83 [label="Assert.Equal(''throttler'', exception.ParamName)", span="92-92", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_84 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", span="86-86", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_178 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", span="188-188", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_179 [label="_recurringJob[''Job''] =\r\n                JobHelper.ToJson(new InvocationData(''SomeType'', ''SomeMethod'', ''Parameters'', ''arguments''))", span="191-192", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_180 [label="var scheduler = CreateScheduler()", span="194-194", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_181 [label="scheduler.Execute(_context.Object)", span="197-197", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_182 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", span="188-188", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_206 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_27 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_48 [label="Entry System.Console.WriteLine()", span="0-0", cluster="System.Console.WriteLine()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_24 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="233-233", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_126 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_28 [label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0", cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_274 [label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_275 [label=jobKey, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_276 [label=time, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_277 [label=timeZoneId, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_278 [label=createdAt, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
m12_279 [label=nextExecution, span="", file="SqlServerWriteOnlyTransactionFacts.cs"];
n3 -> n1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Web.Pages.FetchedJobsPage"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n2 -> n0  [key=0, style=bold, color=blue];
m2_6 -> m2_7  [key=0, style=solid];
m2_7 -> m2_6  [key=0, style=bold, color=blue];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_4  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
m2_22 -> m2_23  [key=0, style=solid];
m2_23 -> m2_22  [key=0, style=bold, color=blue];
m2_26 -> m2_27  [key=0, style=solid];
m2_27 -> m2_26  [key=0, style=bold, color=blue];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_2  [key=0, style=bold, color=blue];
m2_18 -> m2_19  [key=0, style=solid];
m2_19 -> m2_18  [key=0, style=bold, color=blue];
m2_28 -> m2_29  [key=0, style=solid];
m2_29 -> m2_28  [key=0, style=bold, color=blue];
m2_8 -> m2_9  [key=0, style=solid];
m2_9 -> m2_8  [key=0, style=bold, color=blue];
m2_30 -> m2_31  [key=0, style=solid];
m2_31 -> m2_30  [key=0, style=bold, color=blue];
m2_10 -> m2_11  [key=0, style=solid];
m2_11 -> m2_10  [key=0, style=bold, color=blue];
m2_20 -> m2_21  [key=0, style=solid];
m2_21 -> m2_20  [key=0, style=bold, color=blue];
m2_14 -> m2_15  [key=0, style=solid];
m2_15 -> m2_14  [key=0, style=bold, color=blue];
m2_12 -> m2_13  [key=0, style=solid];
m2_13 -> m2_12  [key=0, style=bold, color=blue];
m2_16 -> m2_17  [key=0, style=solid];
m2_17 -> m2_16  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid];
m2_25 -> m2_24  [key=0, style=bold, color=blue];
m7_180 -> m7_181  [key=0, style=solid];
m7_181 -> m7_37  [key=2, style=dotted];
m7_181 -> m7_182  [key=0, style=solid];
m7_182 -> m7_183  [key=0, style=solid];
m7_182 -> m7_184  [key=2, style=dotted];
m7_183 -> m7_180  [key=0, style=bold, color=blue];
m7_51 -> m7_34  [key=3, color=green, style=bold, label="Parameter variable string recurringJobId"];
m7_51 -> m7_35  [key=3, color=green, style=bold, label="Parameter variable System.Collections.Generic.Dictionary<string, string> recurringJob"];
m7_51 -> m7_52  [key=0, style=solid, color=green];
m7_51 -> m7_31  [key=3, color=darkorchid, style=bold, label="Parameter variable HangFire.Storage.IStorageConnection connection"];
m7_52 -> m7_53  [key=0, style=solid, color=green];
m7_52 -> m7_37  [key=2, style=dotted, color=green];
m7_53 -> m7_54  [key=0, style=solid, color=green];
m7_53 -> m7_57  [key=2, style=dotted, color=green];
m7_54 -> m7_55  [key=0, style=solid, color=green];
m7_54 -> m7_38  [key=2, style=dotted, color=green];
m7_54 -> m7_39  [key=2, style=dotted, color=green];
m7_55 -> m7_56  [key=0, style=solid, color=green];
m7_55 -> m7_58  [key=2, style=dotted, color=green];
m7_55 -> m7_41  [key=2, style=dotted, color=green];
m7_55 -> m7_59  [key=1, style=dashed, color=green, label="lambda expression"];
m7_56 -> m7_51  [key=0, style=bold, color=blue];
m7_131 -> m7_132  [key=0, style=solid];
m7_132 -> m7_37  [key=2, style=dotted];
m7_132 -> m7_133  [key=0, style=solid];
m7_132 -> m7_134  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_132 -> m7_135  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_135 -> m7_27  [key=2, style=dotted];
m7_135 -> m7_136  [key=0, style=solid];
m7_133 -> m7_57  [key=2, style=dotted];
m7_133 -> m7_134  [key=0, style=solid];
m7_134 -> m7_83  [key=2, style=dotted];
m7_134 -> m7_135  [key=0, style=solid];
m7_136 -> m7_131  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid, color=green];
m7_1 -> m7_2  [key=0, style=solid, color=green];
m7_1 -> m7_4  [key=2, style=dotted, color=green];
m7_2 -> m7_3  [key=0, style=solid, color=green];
m7_2 -> m7_5  [key=2, style=dotted, color=green];
m7_3 -> m7_0  [key=0, style=bold, color=blue];
m7_137 -> m7_138  [key=0, style=solid];
m7_138 -> m7_139  [key=0, style=solid];
m7_139 -> m7_140  [key=0, style=solid];
m7_141 -> m7_142  [key=0, style=solid];
m7_141 -> m7_149  [key=2, style=dotted];
m7_141 -> m7_144  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_144 -> m7_40  [key=2, style=dotted];
m7_144 -> m7_145  [key=0, style=solid];
m7_142 -> m7_57  [key=2, style=dotted];
m7_142 -> m7_143  [key=0, style=solid];
m7_140 -> m7_141  [key=0, style=solid];
m7_140 -> m7_148  [key=2, style=dotted];
m7_140 -> m7_146  [key=1, style=dashed, color=darkseagreen4, label=component];
m7_143 -> m7_144  [key=0, style=solid];
m7_143 -> m7_150  [key=2, style=dotted];
m7_145 -> m7_146  [key=0, style=solid];
m7_145 -> m7_150  [key=2, style=dotted];
m7_146 -> m7_147  [key=0, style=solid];
m7_146 -> m7_112  [key=2, style=dotted];
m7_147 -> m7_137  [key=0, style=bold, color=blue];
m7_100 -> m7_101  [key=0, style=solid];
m7_102 -> m7_37  [key=2, style=dotted];
m7_102 -> m7_103  [key=0, style=solid];
m7_102 -> m7_104  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_102 -> m7_105  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_102 -> m7_108  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_103 -> m7_81  [key=2, style=dotted];
m7_103 -> m7_82  [key=2, style=dotted];
m7_103 -> m7_104  [key=0, style=solid];
m7_103 -> m7_113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_103 -> m7_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_103 -> m7_117  [key=1, style=dashed, color=darkseagreen4, label=timesExecuted];
m7_106 -> m7_38  [key=2, style=dotted];
m7_106 -> m7_39  [key=2, style=dotted];
m7_106 -> m7_107  [key=0, style=solid];
m7_109 -> m7_38  [key=2, style=dotted];
m7_109 -> m7_39  [key=2, style=dotted];
m7_109 -> m7_110  [key=0, style=solid];
m7_104 -> m7_57  [key=2, style=dotted];
m7_104 -> m7_105  [key=0, style=solid];
m7_108 -> m7_57  [key=2, style=dotted];
m7_108 -> m7_109  [key=0, style=solid];
m7_105 -> m7_83  [key=2, style=dotted];
m7_105 -> m7_106  [key=0, style=solid];
m7_101 -> m7_102  [key=0, style=solid];
m7_101 -> m7_103  [key=1, style=dashed, color=darkseagreen4, label=timesExecuted];
m7_107 -> m7_108  [key=0, style=solid];
m7_107 -> m7_110  [key=1, style=dashed, color=darkseagreen4, label=timesExecuted];
m7_110 -> m7_111  [key=0, style=solid];
m7_110 -> m7_112  [key=2, style=dotted];
m7_111 -> m7_100  [key=0, style=bold, color=blue];
m7_37 -> m7_185  [key=0, style=solid];
m7_185 -> m7_81  [key=2, style=dotted];
m7_185 -> m7_82  [key=2, style=dotted];
m7_185 -> m7_186  [key=0, style=solid];
m7_185 -> m7_188  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_185 -> m7_191  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_186 -> m7_23  [key=2, style=dotted];
m7_186 -> m7_187  [key=0, style=solid];
m7_187 -> m7_37  [key=0, style=bold, color=blue];
m7_166 -> m7_167  [key=0, style=solid];
m7_167 -> m7_37  [key=2, style=dotted];
m7_167 -> m7_168  [key=0, style=solid];
m7_167 -> m7_169  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_167 -> m7_171  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_168 -> m7_10  [key=2, style=dotted];
m7_168 -> m7_81  [key=2, style=dotted];
m7_168 -> m7_169  [key=0, style=solid];
m7_168 -> m7_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_172 -> m7_41  [key=2, style=dotted];
m7_172 -> m7_58  [key=2, style=dotted];
m7_172 -> m7_173  [key=0, style=solid];
m7_172 -> m7_177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_171 -> m7_40  [key=2, style=dotted];
m7_171 -> m7_172  [key=0, style=solid];
m7_169 -> m7_57  [key=2, style=dotted];
m7_169 -> m7_170  [key=0, style=solid];
m7_170 -> m7_171  [key=0, style=solid];
m7_170 -> m7_150  [key=2, style=dotted];
m7_173 -> m7_166  [key=0, style=bold, color=blue];
m7_120 -> m7_121  [key=0, style=solid];
m7_121 -> m7_37  [key=2, style=dotted];
m7_121 -> m7_122  [key=0, style=solid];
m7_121 -> m7_123  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_121 -> m7_124  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_124 -> m7_27  [key=2, style=dotted];
m7_124 -> m7_125  [key=0, style=solid];
m7_122 -> m7_57  [key=2, style=dotted];
m7_122 -> m7_123  [key=0, style=solid];
m7_123 -> m7_83  [key=2, style=dotted];
m7_123 -> m7_124  [key=0, style=solid];
m7_125 -> m7_120  [key=0, style=bold, color=blue];
m7_62 -> m7_63  [key=0, style=solid, color=green];
m7_63 -> m7_64  [key=0, style=solid, color=green];
m7_63 -> m7_37  [key=2, style=dotted, color=green];
m7_63 -> m7_65  [key=1, style=dashed, color=green, label=runner];
m7_63 -> m7_68  [key=1, style=dashed, color=green, label=runner];
m7_64 -> m7_65  [key=0, style=solid, color=green];
m7_64 -> m7_40  [key=2, style=dotted, color=green];
m7_65 -> m7_66  [key=0, style=solid, color=green];
m7_65 -> m7_10  [key=2, style=dotted, color=green];
m7_65 -> m7_67  [key=1, style=dashed, color=green, label="lambda expression"];
m7_66 -> m7_62  [key=0, style=bold, color=blue];
m7_92 -> m7_93  [key=0, style=solid, color=green];
m7_93 -> m7_94  [key=0, style=solid, color=green];
m7_93 -> m7_37  [key=2, style=dotted, color=green];
m7_93 -> m7_95  [key=1, style=dashed, color=green, label=runner];
m7_93 -> m7_98  [key=1, style=dashed, color=green, label=runner];
m7_94 -> m7_95  [key=0, style=solid, color=green];
m7_94 -> m7_40  [key=2, style=dotted, color=green];
m7_95 -> m7_96  [key=0, style=solid, color=green];
m7_95 -> m7_10  [key=2, style=dotted, color=green];
m7_95 -> m7_97  [key=1, style=dashed, color=green, label="lambda expression"];
m7_96 -> m7_92  [key=0, style=bold, color=blue];
m7_126 -> m7_127  [key=0, style=solid];
m7_127 -> m7_37  [key=2, style=dotted];
m7_127 -> m7_128  [key=0, style=solid];
m7_127 -> m7_129  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_129 -> m7_27  [key=2, style=dotted];
m7_129 -> m7_130  [key=0, style=solid];
m7_128 -> m7_57  [key=2, style=dotted];
m7_128 -> m7_129  [key=0, style=solid];
m7_130 -> m7_126  [key=0, style=bold, color=blue];
m7_16 -> m7_17  [key=0, style=solid, color=green];
m7_17 -> m7_18  [key=0, style=solid, color=green];
m7_17 -> m7_10  [key=2, style=dotted, color=green];
m7_17 -> m7_20  [key=1, style=dashed, color=green, label="lambda expression"];
m7_18 -> m7_19  [key=0, style=solid, color=green];
m7_18 -> m7_11  [key=2, style=dotted, color=green];
m7_19 -> m7_16  [key=0, style=bold, color=blue];
m7_31 -> m7_32  [key=0, style=solid, color=green];
m7_32 -> m7_33  [key=0, style=solid, color=green];
m7_32 -> m7_37  [key=2, style=dotted, color=green];
m7_32 -> m7_34  [key=1, style=dashed, color=green, label=runner];
m7_33 -> m7_34  [key=0, style=solid, color=green];
m7_33 -> m7_38  [key=2, style=dotted, color=green];
m7_33 -> m7_39  [key=2, style=dotted, color=green];
m7_34 -> m7_35  [key=0, style=solid, color=green];
m7_34 -> m7_40  [key=2, style=dotted, color=green];
m7_35 -> m7_36  [key=0, style=solid, color=green];
m7_35 -> m7_41  [key=2, style=dotted, color=green];
m7_35 -> m7_42  [key=1, style=dashed, color=green, label="lambda expression"];
m7_36 -> m7_31  [key=0, style=bold, color=blue];
m7_46 -> m7_47  [key=0, style=solid, color=green];
m7_47 -> m7_48  [key=0, style=solid, color=green];
m7_47 -> m7_37  [key=2, style=dotted, color=green];
m7_47 -> m7_49  [key=1, style=dashed, color=green, label=runner];
m7_48 -> m7_49  [key=0, style=solid, color=green];
m7_48 -> m7_40  [key=2, style=dotted, color=green];
m7_49 -> m7_50  [key=0, style=solid, color=green];
m7_49 -> m7_27  [key=2, style=dotted, color=green];
m7_50 -> m7_46  [key=0, style=bold, color=blue];
m7_191 -> m7_192  [key=0, style=solid];
m7_12 -> m7_13  [key=0, style=solid, color=green];
m7_13 -> m7_14  [key=0, style=solid, color=green];
m7_13 -> m7_15  [key=2, style=dotted, color=green];
m7_14 -> m7_12  [key=0, style=bold, color=blue];
m7_20 -> m7_21  [key=0, style=solid, color=green];
m7_21 -> m7_22  [key=0, style=solid, color=green];
m7_21 -> m7_23  [key=2, style=dotted, color=green];
m7_22 -> m7_20  [key=0, style=bold, color=blue];
m7_28 -> m7_29  [key=0, style=solid, color=green];
m7_29 -> m7_30  [key=0, style=solid, color=green];
m7_29 -> m7_23  [key=2, style=dotted, color=green];
m7_30 -> m7_28  [key=0, style=bold, color=blue];
m7_42 -> m7_43  [key=0, style=solid, color=green];
m7_43 -> m7_44  [key=0, style=solid, color=green];
m7_43 -> m7_10  [key=2, style=dotted, color=green];
m7_43 -> m7_45  [key=2, style=dotted, color=green];
m7_44 -> m7_42  [key=0, style=bold, color=blue];
m7_59 -> m7_60  [key=0, style=solid, color=green];
m7_60 -> m7_61  [key=0, style=solid, color=green];
m7_60 -> m7_10  [key=2, style=dotted, color=green];
m7_60 -> m7_45  [key=2, style=dotted, color=green];
m7_61 -> m7_59  [key=0, style=bold, color=blue];
m7_68 -> m7_69  [key=0, style=solid, color=green];
m7_68 -> m7_57  [key=2, style=dotted, color=green];
m7_67 -> m7_68  [key=0, style=solid, color=green];
m7_69 -> m7_67  [key=0, style=bold, color=blue];
m7_84 -> m7_85  [key=0, style=solid, color=green];
m7_87 -> m7_88  [key=0, style=solid, color=green];
m7_88 -> m7_88  [key=1, style=dashed, color=green, label=timesExecuted];
m7_88 -> m7_89  [key=0, style=solid, color=green];
m7_89 -> m7_90  [key=0, style=solid, color=green];
m7_89 -> m7_91  [key=2, style=dotted, color=green];
m7_85 -> m7_86  [key=0, style=solid, color=green];
m7_85 -> m7_10  [key=2, style=dotted, color=green];
m7_85 -> m7_45  [key=2, style=dotted, color=green];
m7_86 -> m7_84  [key=0, style=bold, color=blue];
m7_90 -> m7_87  [key=0, style=bold, color=blue];
m7_98 -> m7_99  [key=0, style=solid, color=green];
m7_98 -> m7_83  [key=2, style=dotted, color=green];
m7_97 -> m7_98  [key=0, style=solid, color=green];
m7_99 -> m7_97  [key=0, style=bold, color=blue];
m7_114 -> m7_10  [key=2, style=dotted];
m7_114 -> m7_45  [key=2, style=dotted];
m7_114 -> m7_115  [key=0, style=solid];
m7_161 -> m7_10  [key=2, style=dotted];
m7_161 -> m7_45  [key=2, style=dotted];
m7_161 -> m7_162  [key=0, style=solid];
m7_164 -> m7_10  [key=2, style=dotted];
m7_164 -> m7_45  [key=2, style=dotted];
m7_164 -> m7_165  [key=0, style=solid];
m7_175 -> m7_10  [key=2, style=dotted];
m7_175 -> m7_45  [key=2, style=dotted];
m7_175 -> m7_176  [key=0, style=solid];
m7_178 -> m7_10  [key=2, style=dotted];
m7_178 -> m7_45  [key=2, style=dotted];
m7_178 -> m7_179  [key=0, style=solid];
m7_189 -> m7_10  [key=2, style=dotted];
m7_189 -> m7_45  [key=2, style=dotted];
m7_189 -> m7_190  [key=0, style=solid];
m7_118 -> m7_91  [key=2, style=dotted];
m7_118 -> m7_119  [key=0, style=solid];
m7_192 -> m7_91  [key=2, style=dotted];
m7_192 -> m7_193  [key=0, style=solid];
m7_113 -> m7_114  [key=0, style=solid];
m7_116 -> m7_117  [key=0, style=solid];
m7_117 -> m7_118  [key=0, style=solid];
m7_117 -> m7_117  [key=1, style=dashed, color=darkseagreen4, label=timesExecuted];
m7_160 -> m7_161  [key=0, style=solid];
m7_163 -> m7_164  [key=0, style=solid];
m7_174 -> m7_175  [key=0, style=solid];
m7_177 -> m7_178  [key=0, style=solid];
m7_188 -> m7_189  [key=0, style=solid];
m7_115 -> m7_113  [key=0, style=bold, color=blue];
m7_162 -> m7_160  [key=0, style=bold, color=blue];
m7_165 -> m7_163  [key=0, style=bold, color=blue];
m7_176 -> m7_174  [key=0, style=bold, color=blue];
m7_179 -> m7_177  [key=0, style=bold, color=blue];
m7_190 -> m7_188  [key=0, style=bold, color=blue];
m7_119 -> m7_116  [key=0, style=bold, color=blue];
m7_193 -> m7_191  [key=0, style=bold, color=blue];
m7_6 -> m7_7  [key=0, style=solid, color=green];
m7_7 -> m7_8  [key=0, style=solid, color=green];
m7_7 -> m7_10  [key=2, style=dotted, color=green];
m7_7 -> m7_12  [key=1, style=dashed, color=green, label="lambda expression"];
m7_8 -> m7_9  [key=0, style=solid, color=green];
m7_8 -> m7_11  [key=2, style=dotted, color=green];
m7_9 -> m7_6  [key=0, style=bold, color=blue];
m7_24 -> m7_25  [key=0, style=solid, color=green];
m7_25 -> m7_26  [key=0, style=solid, color=green];
m7_25 -> m7_27  [key=2, style=dotted, color=green];
m7_25 -> m7_28  [key=1, style=dashed, color=green, label="lambda expression"];
m7_26 -> m7_24  [key=0, style=bold, color=blue];
m7_194 -> m7_195  [key=0, style=solid];
m7_195 -> m7_91  [key=2, style=dotted];
m7_195 -> m7_196  [key=0, style=solid];
m7_196 -> m7_194  [key=0, style=bold, color=blue];
m7_70 -> m7_71  [key=0, style=solid, color=green];
m7_71 -> m7_72  [key=0, style=solid, color=green];
m7_71 -> m7_73  [key=1, style=dashed, color=green, label=timesExecuted];
m7_72 -> m7_73  [key=0, style=solid, color=green];
m7_72 -> m7_37  [key=2, style=dotted, color=green];
m7_72 -> m7_74  [key=1, style=dashed, color=green, label=runner];
m7_72 -> m7_75  [key=1, style=dashed, color=green, label=runner];
m7_73 -> m7_74  [key=0, style=solid, color=green];
m7_73 -> m7_81  [key=2, style=dotted, color=green];
m7_73 -> m7_82  [key=2, style=dotted, color=green];
m7_73 -> m7_84  [key=1, style=dashed, color=green, label="lambda expression"];
m7_73 -> m7_87  [key=1, style=dashed, color=green, label="lambda expression"];
m7_73 -> m7_88  [key=1, style=dashed, color=green, label=timesExecuted];
m7_74 -> m7_75  [key=0, style=solid, color=green];
m7_74 -> m7_57  [key=2, style=dotted, color=green];
m7_75 -> m7_76  [key=0, style=solid, color=green];
m7_75 -> m7_83  [key=2, style=dotted, color=green];
m7_76 -> m7_77  [key=0, style=solid, color=green];
m7_76 -> m7_38  [key=2, style=dotted, color=green];
m7_76 -> m7_39  [key=2, style=dotted, color=green];
m7_77 -> m7_78  [key=0, style=solid, color=green];
m7_77 -> m7_79  [key=1, style=dashed, color=green, label=timesExecuted];
m7_78 -> m7_79  [key=0, style=solid, color=green];
m7_78 -> m7_38  [key=2, style=dotted, color=green];
m7_78 -> m7_39  [key=2, style=dotted, color=green];
m7_79 -> m7_80  [key=0, style=solid, color=green];
m7_79 -> m7_11  [key=2, style=dotted, color=green];
m7_80 -> m7_70  [key=0, style=bold, color=blue];
m7_151 -> m7_152  [key=0, style=solid];
m7_152 -> m7_153  [key=0, style=solid];
m7_153 -> m7_37  [key=2, style=dotted];
m7_153 -> m7_154  [key=0, style=solid];
m7_153 -> m7_155  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_153 -> m7_157  [key=1, style=dashed, color=darkseagreen4, label=runner];
m7_154 -> m7_10  [key=2, style=dotted];
m7_154 -> m7_81  [key=2, style=dotted];
m7_154 -> m7_155  [key=0, style=solid];
m7_154 -> m7_160  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_158 -> m7_41  [key=2, style=dotted];
m7_158 -> m7_159  [key=0, style=solid];
m7_158 -> m7_163  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_157 -> m7_40  [key=2, style=dotted];
m7_157 -> m7_158  [key=0, style=solid];
m7_155 -> m7_57  [key=2, style=dotted];
m7_155 -> m7_156  [key=0, style=solid];
m7_156 -> m7_157  [key=0, style=solid];
m7_156 -> m7_150  [key=2, style=dotted];
m7_159 -> m7_151  [key=0, style=bold, color=blue];
m7_200 -> m7_1  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_2  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_17  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_21  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_25  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_29  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_32  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_35  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_47  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_52  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_55  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_63  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_72  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_73  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_93  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_102  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_121  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_127  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_132  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_138  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_139  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_141  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_152  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_153  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_154  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_158  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_167  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_168  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_172  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_181  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_182  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_185  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_200 -> m7_186  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.Server.ServerComponentRunnerFacts"];
m7_201 -> m7_68  [key=1, style=dashed, color=green, label=runner];
m7_202 -> m7_88  [key=1, style=dashed, color=green, label=timesExecuted];
m7_203 -> m7_98  [key=1, style=dashed, color=green, label=runner];
m7_204 -> m7_117  [key=1, style=dashed, color=darkseagreen4, label=timesExecuted];
m8_77 -> m8_78  [key=0, style=solid, color=green];
m8_78 -> m8_79  [key=0, style=solid, color=green];
m8_78 -> m8_39  [key=2, style=dotted, color=green];
m8_78 -> m8_81  [key=1, style=dashed, color=green, label="lambda expression"];
m8_79 -> m8_80  [key=0, style=solid, color=green];
m8_79 -> m8_65  [key=2, style=dotted, color=green];
m8_80 -> m8_77  [key=0, style=bold, color=blue];
m8_91 -> m8_170  [key=0, style=solid, color=green];
m8_170 -> m8_171  [key=0, style=solid, color=green];
m8_170 -> m8_69  [key=2, style=dotted, color=green];
m8_171 -> m8_91  [key=0, style=bold, color=blue];
m8_108 -> m8_109  [key=0, style=solid, color=green];
m8_109 -> m8_110  [key=0, style=solid, color=green];
m8_109 -> m8_115  [key=2, style=dotted, color=green];
m8_109 -> m8_24  [key=2, style=dotted, color=green];
m8_110 -> m8_111  [key=0, style=solid, color=green];
m8_110 -> m8_91  [key=2, style=dotted, color=green];
m8_111 -> m8_112  [key=0, style=solid, color=green];
m8_111 -> m8_92  [key=2, style=dotted, color=green];
m8_112 -> m8_113  [key=0, style=solid, color=green];
m8_112 -> m8_93  [key=2, style=dotted, color=green];
m8_112 -> m8_116  [key=1, style=dashed, color=green, label="lambda expression"];
m8_113 -> m8_114  [key=0, style=solid, color=green];
m8_113 -> m8_93  [key=2, style=dotted, color=green];
m8_113 -> m8_119  [key=1, style=dashed, color=green, label="lambda expression"];
m8_114 -> m8_108  [key=0, style=bold, color=blue];
m8_143 -> m8_144  [key=0, style=solid, color=green];
m8_144 -> m8_145  [key=0, style=solid, color=green];
m8_144 -> m8_149  [key=2, style=dotted, color=green];
m8_145 -> m8_146  [key=0, style=solid, color=green];
m8_145 -> m8_91  [key=2, style=dotted, color=green];
m8_146 -> m8_147  [key=0, style=solid, color=green];
m8_146 -> m8_92  [key=2, style=dotted, color=green];
m8_147 -> m8_148  [key=0, style=solid, color=green];
m8_147 -> m8_21  [key=2, style=dotted, color=green];
m8_147 -> m8_150  [key=1, style=dashed, color=green, label="lambda expression"];
m8_148 -> m8_143  [key=0, style=bold, color=blue];
m8_156 -> m8_157  [key=0, style=solid, color=green];
m8_157 -> m8_158  [key=0, style=solid, color=green];
m8_157 -> m8_21  [key=2, style=dotted, color=green];
m8_157 -> m8_19  [key=2, style=dotted, color=green];
m8_157 -> m8_22  [key=2, style=dotted, color=green];
m8_157 -> m8_164  [key=1, style=dashed, color=green, label="lambda expression"];
m8_158 -> m8_159  [key=0, style=solid, color=green];
m8_158 -> m8_91  [key=2, style=dotted, color=green];
m8_158 -> m8_160  [key=1, style=dashed, color=green, label=scheduler];
m8_158 -> m8_168  [key=1, style=dashed, color=green, label=scheduler];
m8_159 -> m8_160  [key=0, style=solid, color=green];
m8_159 -> m8_162  [key=2, style=dotted, color=green];
m8_159 -> m8_163  [key=2, style=dotted, color=green];
m8_159 -> m8_168  [key=1, style=dashed, color=green, label=cts];
m8_160 -> m8_161  [key=0, style=solid, color=green];
m8_160 -> m8_39  [key=2, style=dotted, color=green];
m8_160 -> m8_167  [key=1, style=dashed, color=green, label="lambda expression"];
m8_161 -> m8_156  [key=0, style=bold, color=blue];
m8_61 -> m8_62  [key=0, style=solid, color=green];
m8_62 -> m8_63  [key=0, style=solid, color=green];
m8_62 -> m8_39  [key=2, style=dotted, color=green];
m8_62 -> m8_66  [key=1, style=dashed, color=green, label="lambda expression"];
m8_63 -> m8_64  [key=0, style=solid, color=green];
m8_63 -> m8_65  [key=2, style=dotted, color=green];
m8_64 -> m8_61  [key=0, style=bold, color=blue];
m8_167 -> m8_168  [key=0, style=solid, color=green];
m8_30 -> m8_31  [key=0, style=solid, color=green];
m8_33 -> m8_34  [key=0, style=solid, color=green];
m8_36 -> m8_37  [key=0, style=solid, color=green];
m8_41 -> m8_42  [key=0, style=solid, color=green];
m8_44 -> m8_45  [key=0, style=solid, color=green];
m8_48 -> m8_49  [key=0, style=solid, color=green];
m8_52 -> m8_53  [key=0, style=solid, color=green];
m8_56 -> m8_57  [key=0, style=solid, color=green];
m8_31 -> m8_32  [key=0, style=solid, color=green];
m8_32 -> m8_30  [key=0, style=bold, color=blue];
m8_34 -> m8_35  [key=0, style=solid, color=green];
m8_35 -> m8_33  [key=0, style=bold, color=blue];
m8_37 -> m8_38  [key=0, style=solid, color=green];
m8_37 -> m8_39  [key=2, style=dotted, color=green];
m8_37 -> m8_40  [key=2, style=dotted, color=green];
m8_38 -> m8_36  [key=0, style=bold, color=blue];
m8_42 -> m8_43  [key=0, style=solid, color=green];
m8_43 -> m8_41  [key=0, style=bold, color=blue];
m8_45 -> m8_46  [key=0, style=solid, color=green];
m8_45 -> m8_47  [key=2, style=dotted, color=green];
m8_46 -> m8_44  [key=0, style=bold, color=blue];
m8_49 -> m8_50  [key=0, style=solid, color=green];
m8_49 -> m8_51  [key=2, style=dotted, color=green];
m8_50 -> m8_48  [key=0, style=bold, color=blue];
m8_53 -> m8_54  [key=0, style=solid, color=green];
m8_53 -> m8_55  [key=2, style=dotted, color=green];
m8_54 -> m8_52  [key=0, style=bold, color=blue];
m8_57 -> m8_58  [key=0, style=solid, color=green];
m8_57 -> m8_59  [key=2, style=dotted, color=green];
m8_57 -> m8_60  [key=2, style=dotted, color=green];
m8_58 -> m8_56  [key=0, style=bold, color=blue];
m8_66 -> m8_67  [key=0, style=solid, color=green];
m8_67 -> m8_68  [key=0, style=solid, color=green];
m8_67 -> m8_69  [key=2, style=dotted, color=green];
m8_68 -> m8_66  [key=0, style=bold, color=blue];
m8_74 -> m8_75  [key=0, style=solid, color=green];
m8_75 -> m8_76  [key=0, style=solid, color=green];
m8_75 -> m8_69  [key=2, style=dotted, color=green];
m8_76 -> m8_74  [key=0, style=bold, color=blue];
m8_81 -> m8_82  [key=0, style=solid, color=green];
m8_82 -> m8_83  [key=0, style=solid, color=green];
m8_82 -> m8_69  [key=2, style=dotted, color=green];
m8_83 -> m8_81  [key=0, style=bold, color=blue];
m8_94 -> m8_95  [key=0, style=solid, color=green];
m8_98 -> m8_99  [key=0, style=solid, color=green];
m8_101 -> m8_102  [key=0, style=solid, color=green];
m8_95 -> m8_96  [key=0, style=solid, color=green];
m8_95 -> m8_39  [key=2, style=dotted, color=green];
m8_95 -> m8_97  [key=2, style=dotted, color=green];
m8_96 -> m8_94  [key=0, style=bold, color=blue];
m8_99 -> m8_100  [key=0, style=solid, color=green];
m8_99 -> m8_39  [key=2, style=dotted, color=green];
m8_99 -> m8_97  [key=2, style=dotted, color=green];
m8_100 -> m8_98  [key=0, style=bold, color=blue];
m8_102 -> m8_103  [key=0, style=solid, color=green];
m8_102 -> m8_59  [key=2, style=dotted, color=green];
m8_102 -> m8_39  [key=2, style=dotted, color=green];
m8_102 -> m8_104  [key=2, style=dotted, color=green];
m8_102 -> m8_105  [key=1, style=dashed, color=green, label="lambda expression"];
m8_103 -> m8_101  [key=0, style=bold, color=blue];
m8_105 -> m8_106  [key=0, style=solid, color=green];
m8_106 -> m8_107  [key=0, style=solid, color=green];
m8_106 -> m8_24  [key=2, style=dotted, color=green];
m8_107 -> m8_105  [key=0, style=bold, color=blue];
m8_116 -> m8_117  [key=0, style=solid, color=green];
m8_119 -> m8_120  [key=0, style=solid, color=green];
m8_117 -> m8_118  [key=0, style=solid, color=green];
m8_117 -> m8_39  [key=2, style=dotted, color=green];
m8_117 -> m8_97  [key=2, style=dotted, color=green];
m8_118 -> m8_116  [key=0, style=bold, color=blue];
m8_120 -> m8_121  [key=0, style=solid, color=green];
m8_120 -> m8_39  [key=2, style=dotted, color=green];
m8_120 -> m8_104  [key=2, style=dotted, color=green];
m8_121 -> m8_119  [key=0, style=bold, color=blue];
m8_128 -> m8_129  [key=0, style=solid, color=green];
m8_129 -> m8_130  [key=0, style=solid, color=green];
m8_129 -> m8_39  [key=2, style=dotted, color=green];
m8_129 -> m8_97  [key=2, style=dotted, color=green];
m8_130 -> m8_128  [key=0, style=bold, color=blue];
m8_137 -> m8_138  [key=0, style=solid, color=green];
m8_141 -> m8_142  [key=0, style=solid, color=green];
m8_141 -> m8_92  [key=2, style=dotted, color=green];
m8_140 -> m8_141  [key=0, style=solid, color=green];
m8_142 -> m8_140  [key=0, style=bold, color=blue];
m8_138 -> m8_139  [key=0, style=solid, color=green];
m8_138 -> m8_39  [key=2, style=dotted, color=green];
m8_138 -> m8_55  [key=2, style=dotted, color=green];
m8_139 -> m8_137  [key=0, style=bold, color=blue];
m8_150 -> m8_151  [key=0, style=solid, color=green];
m8_151 -> m8_152  [key=0, style=solid, color=green];
m8_151 -> m8_59  [key=2, style=dotted, color=green];
m8_151 -> m8_39  [key=2, style=dotted, color=green];
m8_151 -> m8_104  [key=2, style=dotted, color=green];
m8_151 -> m8_153  [key=1, style=dashed, color=green, label="lambda expression"];
m8_152 -> m8_150  [key=0, style=bold, color=blue];
m8_153 -> m8_154  [key=0, style=solid, color=green];
m8_154 -> m8_155  [key=0, style=solid, color=green];
m8_154 -> m8_24  [key=2, style=dotted, color=green];
m8_155 -> m8_153  [key=0, style=bold, color=blue];
m8_164 -> m8_165  [key=0, style=solid, color=green];
m8_168 -> m8_169  [key=0, style=solid, color=green];
m8_168 -> m8_92  [key=2, style=dotted, color=green];
m8_169 -> m8_167  [key=0, style=bold, color=blue];
m8_165 -> m8_166  [key=0, style=solid, color=green];
m8_166 -> m8_164  [key=0, style=bold, color=blue];
m8_131 -> m8_132  [key=0, style=solid, color=green];
m8_132 -> m8_133  [key=0, style=solid, color=green];
m8_132 -> m8_21  [key=2, style=dotted, color=green];
m8_132 -> m8_29  [key=2, style=dotted, color=green];
m8_132 -> m8_22  [key=2, style=dotted, color=green];
m8_132 -> m8_137  [key=1, style=dashed, color=green, label="lambda expression"];
m8_133 -> m8_134  [key=0, style=solid, color=green];
m8_133 -> m8_91  [key=2, style=dotted, color=green];
m8_133 -> m8_141  [key=1, style=dashed, color=green, label=scheduler];
m8_134 -> m8_135  [key=0, style=solid, color=green];
m8_134 -> m8_136  [key=2, style=dotted, color=green];
m8_134 -> m8_140  [key=1, style=dashed, color=green, label="lambda expression"];
m8_135 -> m8_131  [key=0, style=bold, color=blue];
m8_70 -> m8_71  [key=0, style=solid, color=green];
m8_71 -> m8_72  [key=0, style=solid, color=green];
m8_71 -> m8_39  [key=2, style=dotted, color=green];
m8_71 -> m8_74  [key=1, style=dashed, color=green, label="lambda expression"];
m8_72 -> m8_73  [key=0, style=solid, color=green];
m8_72 -> m8_65  [key=2, style=dotted, color=green];
m8_73 -> m8_70  [key=0, style=bold, color=blue];
m8_84 -> m8_85  [key=0, style=solid, color=green];
m8_85 -> m8_86  [key=0, style=solid, color=green];
m8_85 -> m8_21  [key=2, style=dotted, color=green];
m8_85 -> m8_22  [key=2, style=dotted, color=green];
m8_85 -> m8_94  [key=1, style=dashed, color=green, label="lambda expression"];
m8_86 -> m8_87  [key=0, style=solid, color=green];
m8_86 -> m8_91  [key=2, style=dotted, color=green];
m8_87 -> m8_88  [key=0, style=solid, color=green];
m8_87 -> m8_92  [key=2, style=dotted, color=green];
m8_88 -> m8_89  [key=0, style=solid, color=green];
m8_88 -> m8_93  [key=2, style=dotted, color=green];
m8_88 -> m8_98  [key=1, style=dashed, color=green, label="lambda expression"];
m8_89 -> m8_90  [key=0, style=solid, color=green];
m8_89 -> m8_93  [key=2, style=dotted, color=green];
m8_89 -> m8_101  [key=1, style=dashed, color=green, label="lambda expression"];
m8_90 -> m8_84  [key=0, style=bold, color=blue];
m8_122 -> m8_123  [key=0, style=solid, color=green];
m8_123 -> m8_124  [key=0, style=solid, color=green];
m8_123 -> m8_115  [key=2, style=dotted, color=green];
m8_123 -> m8_24  [key=2, style=dotted, color=green];
m8_124 -> m8_125  [key=0, style=solid, color=green];
m8_124 -> m8_91  [key=2, style=dotted, color=green];
m8_125 -> m8_126  [key=0, style=solid, color=green];
m8_125 -> m8_92  [key=2, style=dotted, color=green];
m8_126 -> m8_127  [key=0, style=solid, color=green];
m8_126 -> m8_93  [key=2, style=dotted, color=green];
m8_126 -> m8_128  [key=1, style=dashed, color=green, label="lambda expression"];
m8_127 -> m8_122  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid, color=green];
m8_1 -> m8_2  [key=0, style=solid, color=green];
m8_1 -> m8_15  [key=2, style=dotted, color=green];
m8_2 -> m8_3  [key=0, style=solid, color=green];
m8_2 -> m8_16  [key=2, style=dotted, color=green];
m8_3 -> m8_4  [key=0, style=solid, color=green];
m8_3 -> m8_17  [key=2, style=dotted, color=green];
m8_4 -> m8_5  [key=0, style=solid, color=green];
m8_4 -> m8_18  [key=2, style=dotted, color=green];
m8_5 -> m8_6  [key=0, style=solid, color=green];
m8_5 -> m8_19  [key=2, style=dotted, color=green];
m8_6 -> m8_7  [key=0, style=solid, color=green];
m8_6 -> m8_20  [key=2, style=dotted, color=green];
m8_7 -> m8_8  [key=0, style=solid, color=green];
m8_7 -> m8_21  [key=2, style=dotted, color=green];
m8_7 -> m8_22  [key=2, style=dotted, color=green];
m8_7 -> m8_30  [key=1, style=dashed, color=green, label="lambda expression"];
m8_7 -> m8_33  [key=1, style=dashed, color=green, label="lambda expression"];
m8_8 -> m8_9  [key=0, style=solid, color=green];
m8_8 -> m8_21  [key=2, style=dotted, color=green];
m8_8 -> m8_22  [key=2, style=dotted, color=green];
m8_8 -> m8_36  [key=1, style=dashed, color=green, label="lambda expression"];
m8_8 -> m8_41  [key=1, style=dashed, color=green, label="lambda expression"];
m8_9 -> m8_10  [key=0, style=solid, color=green];
m8_9 -> m8_23  [key=2, style=dotted, color=green];
m8_9 -> m8_24  [key=2, style=dotted, color=green];
m8_9 -> m8_25  [key=2, style=dotted, color=green];
m8_9 -> m8_26  [key=2, style=dotted, color=green];
m8_9 -> m8_27  [key=2, style=dotted, color=green];
m8_9 -> m8_44  [key=1, style=dashed, color=green, label="lambda expression"];
m8_10 -> m8_11  [key=0, style=solid, color=green];
m8_10 -> m8_28  [key=2, style=dotted, color=green];
m8_11 -> m8_12  [key=0, style=solid, color=green];
m8_11 -> m8_21  [key=2, style=dotted, color=green];
m8_11 -> m8_22  [key=2, style=dotted, color=green];
m8_11 -> m8_48  [key=1, style=dashed, color=green, label="lambda expression"];
m8_12 -> m8_13  [key=0, style=solid, color=green];
m8_12 -> m8_21  [key=2, style=dotted, color=green];
m8_12 -> m8_29  [key=2, style=dotted, color=green];
m8_12 -> m8_22  [key=2, style=dotted, color=green];
m8_12 -> m8_52  [key=1, style=dashed, color=green, label="lambda expression"];
m8_13 -> m8_14  [key=0, style=solid, color=green];
m8_13 -> m8_21  [key=2, style=dotted, color=green];
m8_13 -> m8_22  [key=2, style=dotted, color=green];
m8_13 -> m8_56  [key=1, style=dashed, color=green, label="lambda expression"];
m8_14 -> m8_0  [key=0, style=bold, color=blue];
m8_172 -> m8_1  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_2  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_3  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_4  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_5  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_6  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_7  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_8  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_9  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_10  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_11  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_12  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_13  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_34  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_42  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_62  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_67  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_71  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_75  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_78  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_82  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_85  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_86  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_87  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_88  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_89  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_102  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_106  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_109  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_110  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_111  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_112  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_113  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_123  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_124  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_125  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_126  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_132  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_133  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_134  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_141  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_144  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_145  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_146  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_147  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_151  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_154  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_157  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_158  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_172 -> m8_170  [key=1, style=dashed, color=green, label="HangFire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m8_173 -> m8_141  [key=1, style=dashed, color=green, label=scheduler];
m8_174 -> m8_168  [key=1, style=dashed, color=green, label=scheduler];
m8_175 -> m8_168  [key=1, style=dashed, color=green, label=cts];
m9_0 -> m9_1  [key=0, style=solid];
m9_1 -> m9_0  [key=0, style=bold, color=blue];
m10_36 -> m10_34  [key=0, style=bold, color=blue];
m10_34 -> m10_35  [key=0, style=solid];
m10_35 -> m10_36  [key=0, style=solid];
m10_35 -> m10_11  [key=2, style=dotted];
m10_35 -> m10_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_202 -> m10_203  [key=0, style=solid];
m10_202 -> m10_11  [key=2, style=dotted];
m10_202 -> m10_204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_201 -> m10_202  [key=0, style=solid];
m10_203 -> m10_201  [key=0, style=bold, color=blue];
m10_175 -> m10_176  [key=0, style=solid];
m10_176 -> m10_177  [key=0, style=solid];
m10_176 -> m10_11  [key=2, style=dotted];
m10_176 -> m10_178  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_177 -> m10_175  [key=0, style=bold, color=blue];
m10_9 -> m10_10  [key=0, style=solid];
m10_9 -> m10_11  [key=2, style=dotted];
m10_9 -> m10_12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_8 -> m10_9  [key=0, style=solid];
m10_10 -> m10_8  [key=0, style=bold, color=blue];
m10_64 -> m10_62  [key=0, style=bold, color=blue];
m10_62 -> m10_63  [key=0, style=solid];
m10_63 -> m10_64  [key=0, style=solid];
m10_63 -> m10_11  [key=2, style=dotted];
m10_63 -> m10_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_267 -> m10_268  [key=0, style=solid];
m10_268 -> m10_269  [key=0, style=solid];
m10_268 -> m10_11  [key=2, style=dotted];
m10_268 -> m10_270  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_269 -> m10_267  [key=0, style=bold, color=blue];
m10_25 -> m10_325  [key=0, style=solid];
m10_25 -> m10_326  [key=1, style=dashed, color=darkseagreen4, label="System.Action<HangFire.Redis.RedisWriteOnlyTransaction>"];
m10_25 -> m10_9  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_35  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_63  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_94  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_114  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_130  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_163  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_176  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_188  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_202  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_216  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_229  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_243  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_255  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_268  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_281  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_294  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_25 -> m10_309  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<HangFire.Redis.RedisWriteOnlyTransaction> action"];
m10_325 -> m10_326  [key=0, style=solid];
m10_325 -> m10_329  [key=2, style=dotted];
m10_325 -> m10_330  [key=2, style=dotted];
m10_325 -> m10_327  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m10_326 -> m10_327  [key=0, style=solid];
m10_326 -> m10_331  [key=2, style=dotted];
m10_327 -> m10_328  [key=0, style=solid];
m10_327 -> m10_332  [key=2, style=dotted];
m10_328 -> m10_25  [key=0, style=bold, color=blue];
m10_333 -> m10_334  [key=0, style=solid];
m10_333 -> m10_335  [key=1, style=dashed, color=darkseagreen4, label="System.Action<IRedisClient>"];
m10_334 -> m10_335  [key=0, style=solid];
m10_334 -> m10_337  [key=2, style=dotted];
m10_335 -> m10_336  [key=0, style=solid];
m10_335 -> m10_331  [key=2, style=dotted];
m10_336 -> m10_333  [key=0, style=bold, color=blue];
m10_162 -> m10_163  [key=0, style=solid];
m10_163 -> m10_164  [key=0, style=solid];
m10_163 -> m10_11  [key=2, style=dotted];
m10_163 -> m10_165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_164 -> m10_162  [key=0, style=bold, color=blue];
m10_51 -> m10_52  [key=0, style=solid];
m10_53 -> m10_51  [key=0, style=bold, color=blue];
m10_55 -> m10_56  [key=0, style=solid];
m10_52 -> m10_53  [key=0, style=solid];
m10_52 -> m10_54  [key=2, style=dotted];
m10_293 -> m10_294  [key=0, style=solid];
m10_294 -> m10_295  [key=0, style=solid];
m10_294 -> m10_11  [key=2, style=dotted];
m10_294 -> m10_296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_295 -> m10_293  [key=0, style=bold, color=blue];
m10_229 -> m10_230  [key=0, style=solid];
m10_229 -> m10_11  [key=2, style=dotted];
m10_229 -> m10_231  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_228 -> m10_229  [key=0, style=solid];
m10_230 -> m10_228  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_3  [key=2, style=dotted];
m10_1 -> m10_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_2 -> m10_0  [key=0, style=bold, color=blue];
m10_217 -> m10_215  [key=0, style=bold, color=blue];
m10_215 -> m10_216  [key=0, style=solid];
m10_216 -> m10_217  [key=0, style=solid];
m10_216 -> m10_11  [key=2, style=dotted];
m10_216 -> m10_218  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_280 -> m10_281  [key=0, style=solid];
m10_281 -> m10_282  [key=0, style=solid];
m10_281 -> m10_11  [key=2, style=dotted];
m10_281 -> m10_283  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_282 -> m10_280  [key=0, style=bold, color=blue];
m10_93 -> m10_94  [key=0, style=solid];
m10_94 -> m10_95  [key=0, style=solid];
m10_94 -> m10_11  [key=2, style=dotted];
m10_94 -> m10_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_95 -> m10_93  [key=0, style=bold, color=blue];
m10_131 -> m10_129  [key=0, style=bold, color=blue];
m10_129 -> m10_130  [key=0, style=solid];
m10_130 -> m10_131  [key=0, style=solid];
m10_130 -> m10_11  [key=2, style=dotted];
m10_130 -> m10_132  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_114 -> m10_115  [key=0, style=solid];
m10_114 -> m10_11  [key=2, style=dotted];
m10_114 -> m10_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_113 -> m10_114  [key=0, style=solid];
m10_115 -> m10_113  [key=0, style=bold, color=blue];
m10_242 -> m10_243  [key=0, style=solid];
m10_243 -> m10_244  [key=0, style=solid];
m10_243 -> m10_11  [key=2, style=dotted];
m10_243 -> m10_245  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_244 -> m10_242  [key=0, style=bold, color=blue];
m10_321 -> m10_322  [key=0, style=solid];
m10_4 -> m10_5  [key=0, style=solid];
m10_5 -> m10_6  [key=0, style=solid];
m10_5 -> m10_7  [key=2, style=dotted];
m10_6 -> m10_4  [key=0, style=bold, color=blue];
m10_12 -> m10_13  [key=0, style=solid];
m10_12 -> m10_14  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_12 -> m10_15  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_12 -> m10_16  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_12 -> m10_17  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_12 -> m10_18  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_12 -> m10_19  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_13 -> m10_14  [key=0, style=solid];
m10_13 -> m10_24  [key=2, style=dotted];
m10_14 -> m10_15  [key=0, style=solid];
m10_14 -> m10_24  [key=2, style=dotted];
m10_15 -> m10_16  [key=0, style=solid];
m10_15 -> m10_24  [key=2, style=dotted];
m10_16 -> m10_17  [key=0, style=solid];
m10_16 -> m10_25  [key=2, style=dotted];
m10_16 -> m10_29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_17 -> m10_18  [key=0, style=solid];
m10_17 -> m10_26  [key=2, style=dotted];
m10_17 -> m10_20  [key=1, style=dashed, color=darkseagreen4, label=jobEntryTtl];
m10_18 -> m10_19  [key=0, style=solid];
m10_18 -> m10_26  [key=2, style=dotted];
m10_18 -> m10_21  [key=1, style=dashed, color=darkseagreen4, label=stateEntryTtl];
m10_19 -> m10_20  [key=0, style=solid];
m10_19 -> m10_26  [key=2, style=dotted];
m10_19 -> m10_22  [key=1, style=dashed, color=darkseagreen4, label=historyEntryTtl];
m10_29 -> m10_30  [key=0, style=solid];
m10_20 -> m10_21  [key=0, style=solid];
m10_20 -> m10_27  [key=2, style=dotted];
m10_20 -> m10_28  [key=2, style=dotted];
m10_21 -> m10_22  [key=0, style=solid];
m10_21 -> m10_27  [key=2, style=dotted];
m10_21 -> m10_28  [key=2, style=dotted];
m10_22 -> m10_23  [key=0, style=solid];
m10_22 -> m10_27  [key=2, style=dotted];
m10_22 -> m10_28  [key=2, style=dotted];
m10_23 -> m10_12  [key=0, style=bold, color=blue];
m10_30 -> m10_31  [key=0, style=solid];
m10_30 -> m10_32  [key=2, style=dotted];
m10_30 -> m10_33  [key=2, style=dotted];
m10_31 -> m10_29  [key=0, style=bold, color=blue];
m10_37 -> m10_38  [key=0, style=solid];
m10_37 -> m10_41  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_37 -> m10_42  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_38 -> m10_39  [key=0, style=solid];
m10_38 -> m10_45  [key=2, style=dotted];
m10_38 -> m10_40  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_38 -> m10_41  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_38 -> m10_59  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_41 -> m10_42  [key=0, style=solid];
m10_41 -> m10_25  [key=2, style=dotted];
m10_41 -> m10_58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_42 -> m10_43  [key=0, style=solid];
m10_42 -> m10_49  [key=2, style=dotted];
m10_39 -> m10_40  [key=0, style=solid];
m10_39 -> m10_46  [key=2, style=dotted];
m10_39 -> m10_47  [key=2, style=dotted];
m10_39 -> m10_48  [key=2, style=dotted];
m10_39 -> m10_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_40 -> m10_41  [key=0, style=solid];
m10_40 -> m10_46  [key=2, style=dotted];
m10_40 -> m10_48  [key=2, style=dotted];
m10_40 -> m10_55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_59 -> m10_60  [key=0, style=solid];
m10_59 -> m10_61  [key=2, style=dotted];
m10_58 -> m10_59  [key=0, style=solid];
m10_43 -> m10_44  [key=0, style=solid];
m10_43 -> m10_50  [key=2, style=dotted];
m10_44 -> m10_37  [key=0, style=bold, color=blue];
m10_56 -> m10_57  [key=0, style=solid];
m10_57 -> m10_55  [key=0, style=bold, color=blue];
m10_60 -> m10_58  [key=0, style=bold, color=blue];
m10_65 -> m10_66  [key=0, style=solid];
m10_65 -> m10_71  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_65 -> m10_72  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_66 -> m10_67  [key=0, style=solid];
m10_66 -> m10_78  [key=2, style=dotted];
m10_71 -> m10_72  [key=0, style=solid];
m10_71 -> m10_25  [key=2, style=dotted];
m10_71 -> m10_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_72 -> m10_73  [key=0, style=solid];
m10_72 -> m10_49  [key=2, style=dotted];
m10_72 -> m10_74  [key=1, style=dashed, color=darkseagreen4, label=stateHash];
m10_72 -> m10_75  [key=1, style=dashed, color=darkseagreen4, label=stateHash];
m10_72 -> m10_76  [key=1, style=dashed, color=darkseagreen4, label=stateHash];
m10_67 -> m10_68  [key=0, style=solid];
m10_67 -> m10_45  [key=2, style=dotted];
m10_67 -> m10_69  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_67 -> m10_70  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_67 -> m10_71  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_67 -> m10_91  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_68 -> m10_69  [key=0, style=solid];
m10_68 -> m10_46  [key=2, style=dotted];
m10_68 -> m10_47  [key=2, style=dotted];
m10_68 -> m10_48  [key=2, style=dotted];
m10_68 -> m10_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_69 -> m10_70  [key=0, style=solid];
m10_69 -> m10_46  [key=2, style=dotted];
m10_69 -> m10_48  [key=2, style=dotted];
m10_69 -> m10_84  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_70 -> m10_71  [key=0, style=solid];
m10_70 -> m10_46  [key=2, style=dotted];
m10_70 -> m10_48  [key=2, style=dotted];
m10_70 -> m10_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_91 -> m10_92  [key=0, style=solid];
m10_91 -> m10_61  [key=2, style=dotted];
m10_81 -> m10_82  [key=0, style=solid];
m10_84 -> m10_85  [key=0, style=solid];
m10_87 -> m10_88  [key=0, style=solid];
m10_90 -> m10_91  [key=0, style=solid];
m10_73 -> m10_74  [key=0, style=solid];
m10_73 -> m10_79  [key=2, style=dotted];
m10_73 -> m10_80  [key=2, style=dotted];
m10_74 -> m10_75  [key=0, style=solid];
m10_74 -> m10_50  [key=2, style=dotted];
m10_75 -> m10_76  [key=0, style=solid];
m10_75 -> m10_50  [key=2, style=dotted];
m10_76 -> m10_77  [key=0, style=solid];
m10_76 -> m10_50  [key=2, style=dotted];
m10_77 -> m10_65  [key=0, style=bold, color=blue];
m10_82 -> m10_83  [key=0, style=solid];
m10_82 -> m10_54  [key=2, style=dotted];
m10_83 -> m10_81  [key=0, style=bold, color=blue];
m10_85 -> m10_86  [key=0, style=solid];
m10_86 -> m10_84  [key=0, style=bold, color=blue];
m10_88 -> m10_89  [key=0, style=solid];
m10_89 -> m10_87  [key=0, style=bold, color=blue];
m10_92 -> m10_90  [key=0, style=bold, color=blue];
m10_96 -> m10_97  [key=0, style=solid];
m10_96 -> m10_100  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_96 -> m10_101  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_97 -> m10_98  [key=0, style=solid];
m10_97 -> m10_45  [key=2, style=dotted];
m10_97 -> m10_99  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_97 -> m10_100  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_97 -> m10_111  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_100 -> m10_101  [key=0, style=solid];
m10_100 -> m10_25  [key=2, style=dotted];
m10_100 -> m10_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_101 -> m10_102  [key=0, style=solid];
m10_101 -> m10_103  [key=2, style=dotted];
m10_101 -> m10_50  [key=2, style=dotted];
m10_98 -> m10_99  [key=0, style=solid];
m10_98 -> m10_46  [key=2, style=dotted];
m10_98 -> m10_48  [key=2, style=dotted];
m10_98 -> m10_104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_99 -> m10_100  [key=0, style=solid];
m10_99 -> m10_46  [key=2, style=dotted];
m10_99 -> m10_47  [key=2, style=dotted];
m10_99 -> m10_48  [key=2, style=dotted];
m10_99 -> m10_107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_111 -> m10_112  [key=0, style=solid];
m10_111 -> m10_61  [key=2, style=dotted];
m10_104 -> m10_105  [key=0, style=solid];
m10_107 -> m10_108  [key=0, style=solid];
m10_110 -> m10_111  [key=0, style=solid];
m10_102 -> m10_96  [key=0, style=bold, color=blue];
m10_105 -> m10_106  [key=0, style=solid];
m10_106 -> m10_104  [key=0, style=bold, color=blue];
m10_108 -> m10_109  [key=0, style=solid];
m10_108 -> m10_54  [key=2, style=dotted];
m10_109 -> m10_107  [key=0, style=bold, color=blue];
m10_112 -> m10_110  [key=0, style=bold, color=blue];
m10_116 -> m10_117  [key=0, style=solid];
m10_116 -> m10_118  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_116 -> m10_119  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_116 -> m10_120  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_116 -> m10_121  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_116 -> m10_122  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_116 -> m10_123  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_117 -> m10_118  [key=0, style=solid];
m10_117 -> m10_32  [key=2, style=dotted];
m10_117 -> m10_24  [key=2, style=dotted];
m10_118 -> m10_119  [key=0, style=solid];
m10_118 -> m10_32  [key=2, style=dotted];
m10_118 -> m10_24  [key=2, style=dotted];
m10_119 -> m10_120  [key=0, style=solid];
m10_119 -> m10_32  [key=2, style=dotted];
m10_119 -> m10_24  [key=2, style=dotted];
m10_120 -> m10_121  [key=0, style=solid];
m10_120 -> m10_25  [key=2, style=dotted];
m10_120 -> m10_125  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_121 -> m10_122  [key=0, style=solid];
m10_121 -> m10_26  [key=2, style=dotted];
m10_121 -> m10_28  [key=2, style=dotted];
m10_122 -> m10_123  [key=0, style=solid];
m10_122 -> m10_26  [key=2, style=dotted];
m10_122 -> m10_28  [key=2, style=dotted];
m10_123 -> m10_124  [key=0, style=solid];
m10_123 -> m10_26  [key=2, style=dotted];
m10_123 -> m10_28  [key=2, style=dotted];
m10_125 -> m10_126  [key=0, style=solid];
m10_124 -> m10_116  [key=0, style=bold, color=blue];
m10_126 -> m10_127  [key=0, style=solid];
m10_126 -> m10_128  [key=2, style=dotted];
m10_127 -> m10_125  [key=0, style=bold, color=blue];
m10_132 -> m10_133  [key=0, style=solid];
m10_132 -> m10_137  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_132 -> m10_138  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_133 -> m10_134  [key=0, style=solid];
m10_133 -> m10_45  [key=2, style=dotted];
m10_133 -> m10_135  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_133 -> m10_136  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_133 -> m10_137  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_133 -> m10_159  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_137 -> m10_138  [key=0, style=solid];
m10_137 -> m10_25  [key=2, style=dotted];
m10_137 -> m10_158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_138 -> m10_139  [key=0, style=solid];
m10_138 -> m10_146  [key=2, style=dotted];
m10_138 -> m10_140  [key=1, style=dashed, color=darkseagreen4, label=serializedEntry];
m10_134 -> m10_135  [key=0, style=solid];
m10_134 -> m10_46  [key=2, style=dotted];
m10_134 -> m10_48  [key=2, style=dotted];
m10_134 -> m10_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_135 -> m10_136  [key=0, style=solid];
m10_135 -> m10_46  [key=2, style=dotted];
m10_135 -> m10_48  [key=2, style=dotted];
m10_135 -> m10_152  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_136 -> m10_137  [key=0, style=solid];
m10_136 -> m10_46  [key=2, style=dotted];
m10_136 -> m10_47  [key=2, style=dotted];
m10_136 -> m10_48  [key=2, style=dotted];
m10_136 -> m10_155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_159 -> m10_160  [key=0, style=solid];
m10_159 -> m10_161  [key=2, style=dotted];
m10_149 -> m10_150  [key=0, style=solid];
m10_152 -> m10_153  [key=0, style=solid];
m10_155 -> m10_156  [key=0, style=solid];
m10_158 -> m10_159  [key=0, style=solid];
m10_139 -> m10_140  [key=0, style=solid];
m10_139 -> m10_147  [key=2, style=dotted];
m10_140 -> m10_141  [key=0, style=solid];
m10_140 -> m10_3  [key=2, style=dotted];
m10_140 -> m10_142  [key=1, style=dashed, color=darkseagreen4, label=entry];
m10_140 -> m10_143  [key=1, style=dashed, color=darkseagreen4, label=entry];
m10_140 -> m10_144  [key=1, style=dashed, color=darkseagreen4, label=entry];
m10_141 -> m10_142  [key=0, style=solid];
m10_141 -> m10_50  [key=2, style=dotted];
m10_142 -> m10_143  [key=0, style=solid];
m10_142 -> m10_50  [key=2, style=dotted];
m10_143 -> m10_144  [key=0, style=solid];
m10_143 -> m10_50  [key=2, style=dotted];
m10_144 -> m10_145  [key=0, style=solid];
m10_144 -> m10_148  [key=2, style=dotted];
m10_144 -> m10_28  [key=2, style=dotted];
m10_145 -> m10_132  [key=0, style=bold, color=blue];
m10_150 -> m10_151  [key=0, style=solid];
m10_151 -> m10_149  [key=0, style=bold, color=blue];
m10_153 -> m10_154  [key=0, style=solid];
m10_154 -> m10_152  [key=0, style=bold, color=blue];
m10_156 -> m10_157  [key=0, style=solid];
m10_156 -> m10_54  [key=2, style=dotted];
m10_157 -> m10_155  [key=0, style=bold, color=blue];
m10_160 -> m10_158  [key=0, style=bold, color=blue];
m10_165 -> m10_166  [key=0, style=solid];
m10_165 -> m10_167  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_165 -> m10_168  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_166 -> m10_167  [key=0, style=solid];
m10_166 -> m10_25  [key=2, style=dotted];
m10_166 -> m10_171  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_167 -> m10_168  [key=0, style=solid];
m10_167 -> m10_170  [key=2, style=dotted];
m10_167 -> m10_28  [key=2, style=dotted];
m10_168 -> m10_169  [key=0, style=solid];
m10_168 -> m10_146  [key=2, style=dotted];
m10_168 -> m10_50  [key=2, style=dotted];
m10_171 -> m10_172  [key=0, style=solid];
m10_169 -> m10_165  [key=0, style=bold, color=blue];
m10_172 -> m10_173  [key=0, style=solid];
m10_172 -> m10_174  [key=2, style=dotted];
m10_173 -> m10_171  [key=0, style=bold, color=blue];
m10_178 -> m10_179  [key=0, style=solid];
m10_178 -> m10_180  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_178 -> m10_181  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_179 -> m10_180  [key=0, style=solid];
m10_179 -> m10_183  [key=2, style=dotted];
m10_180 -> m10_181  [key=0, style=solid];
m10_180 -> m10_25  [key=2, style=dotted];
m10_180 -> m10_184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_181 -> m10_182  [key=0, style=solid];
m10_181 -> m10_146  [key=2, style=dotted];
m10_181 -> m10_50  [key=2, style=dotted];
m10_184 -> m10_185  [key=0, style=solid];
m10_182 -> m10_178  [key=0, style=bold, color=blue];
m10_185 -> m10_186  [key=0, style=solid];
m10_185 -> m10_174  [key=2, style=dotted];
m10_186 -> m10_184  [key=0, style=bold, color=blue];
m10_190 -> m10_191  [key=0, style=solid];
m10_190 -> m10_192  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_190 -> m10_193  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_190 -> m10_194  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_191 -> m10_192  [key=0, style=solid];
m10_191 -> m10_24  [key=2, style=dotted];
m10_192 -> m10_193  [key=0, style=solid];
m10_192 -> m10_25  [key=2, style=dotted];
m10_192 -> m10_197  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_193 -> m10_194  [key=0, style=solid];
m10_193 -> m10_196  [key=2, style=dotted];
m10_193 -> m10_50  [key=2, style=dotted];
m10_194 -> m10_195  [key=0, style=solid];
m10_194 -> m10_26  [key=2, style=dotted];
m10_194 -> m10_28  [key=2, style=dotted];
m10_197 -> m10_198  [key=0, style=solid];
m10_195 -> m10_190  [key=0, style=bold, color=blue];
m10_198 -> m10_199  [key=0, style=solid];
m10_198 -> m10_200  [key=2, style=dotted];
m10_199 -> m10_197  [key=0, style=bold, color=blue];
m10_204 -> m10_205  [key=0, style=solid];
m10_204 -> m10_206  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_204 -> m10_207  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_204 -> m10_208  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_205 -> m10_206  [key=0, style=solid];
m10_205 -> m10_24  [key=2, style=dotted];
m10_206 -> m10_207  [key=0, style=solid];
m10_206 -> m10_25  [key=2, style=dotted];
m10_206 -> m10_211  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_207 -> m10_208  [key=0, style=solid];
m10_207 -> m10_26  [key=2, style=dotted];
m10_207 -> m10_209  [key=1, style=dashed, color=darkseagreen4, label=entryTtl];
m10_208 -> m10_209  [key=0, style=solid];
m10_208 -> m10_196  [key=2, style=dotted];
m10_208 -> m10_50  [key=2, style=dotted];
m10_211 -> m10_212  [key=0, style=solid];
m10_209 -> m10_210  [key=0, style=solid];
m10_209 -> m10_27  [key=2, style=dotted];
m10_209 -> m10_28  [key=2, style=dotted];
m10_210 -> m10_204  [key=0, style=bold, color=blue];
m10_212 -> m10_213  [key=0, style=solid];
m10_212 -> m10_32  [key=2, style=dotted];
m10_212 -> m10_214  [key=2, style=dotted];
m10_213 -> m10_211  [key=0, style=bold, color=blue];
m10_218 -> m10_219  [key=0, style=solid];
m10_218 -> m10_220  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_218 -> m10_221  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_218 -> m10_222  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_219 -> m10_220  [key=0, style=solid];
m10_219 -> m10_24  [key=2, style=dotted];
m10_220 -> m10_221  [key=0, style=solid];
m10_220 -> m10_25  [key=2, style=dotted];
m10_220 -> m10_224  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_221 -> m10_222  [key=0, style=solid];
m10_221 -> m10_196  [key=2, style=dotted];
m10_221 -> m10_50  [key=2, style=dotted];
m10_222 -> m10_223  [key=0, style=solid];
m10_222 -> m10_26  [key=2, style=dotted];
m10_222 -> m10_28  [key=2, style=dotted];
m10_224 -> m10_225  [key=0, style=solid];
m10_223 -> m10_218  [key=0, style=bold, color=blue];
m10_225 -> m10_226  [key=0, style=solid];
m10_225 -> m10_227  [key=2, style=dotted];
m10_226 -> m10_224  [key=0, style=bold, color=blue];
m10_231 -> m10_232  [key=0, style=solid];
m10_231 -> m10_233  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_231 -> m10_234  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_231 -> m10_235  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_232 -> m10_233  [key=0, style=solid];
m10_232 -> m10_24  [key=2, style=dotted];
m10_233 -> m10_234  [key=0, style=solid];
m10_233 -> m10_25  [key=2, style=dotted];
m10_233 -> m10_238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_234 -> m10_235  [key=0, style=solid];
m10_234 -> m10_26  [key=2, style=dotted];
m10_234 -> m10_236  [key=1, style=dashed, color=darkseagreen4, label=entryTtl];
m10_235 -> m10_236  [key=0, style=solid];
m10_235 -> m10_196  [key=2, style=dotted];
m10_235 -> m10_50  [key=2, style=dotted];
m10_238 -> m10_239  [key=0, style=solid];
m10_236 -> m10_237  [key=0, style=solid];
m10_236 -> m10_27  [key=2, style=dotted];
m10_236 -> m10_28  [key=2, style=dotted];
m10_237 -> m10_231  [key=0, style=bold, color=blue];
m10_239 -> m10_240  [key=0, style=solid];
m10_239 -> m10_32  [key=2, style=dotted];
m10_239 -> m10_241  [key=2, style=dotted];
m10_240 -> m10_238  [key=0, style=bold, color=blue];
m10_245 -> m10_246  [key=0, style=solid];
m10_245 -> m10_247  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_246 -> m10_247  [key=0, style=solid];
m10_246 -> m10_25  [key=2, style=dotted];
m10_246 -> m10_250  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_247 -> m10_248  [key=0, style=solid];
m10_247 -> m10_249  [key=2, style=dotted];
m10_247 -> m10_28  [key=2, style=dotted];
m10_250 -> m10_251  [key=0, style=solid];
m10_248 -> m10_245  [key=0, style=bold, color=blue];
m10_251 -> m10_252  [key=0, style=solid];
m10_251 -> m10_253  [key=2, style=dotted];
m10_252 -> m10_250  [key=0, style=bold, color=blue];
m10_257 -> m10_258  [key=0, style=solid];
m10_257 -> m10_259  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_257 -> m10_260  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_258 -> m10_259  [key=0, style=solid];
m10_258 -> m10_25  [key=2, style=dotted];
m10_258 -> m10_263  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_259 -> m10_260  [key=0, style=solid];
m10_259 -> m10_249  [key=2, style=dotted];
m10_259 -> m10_28  [key=2, style=dotted];
m10_260 -> m10_261  [key=0, style=solid];
m10_260 -> m10_262  [key=2, style=dotted];
m10_260 -> m10_50  [key=2, style=dotted];
m10_263 -> m10_264  [key=0, style=solid];
m10_261 -> m10_257  [key=0, style=bold, color=blue];
m10_264 -> m10_265  [key=0, style=solid];
m10_264 -> m10_266  [key=2, style=dotted];
m10_265 -> m10_263  [key=0, style=bold, color=blue];
m10_270 -> m10_271  [key=0, style=solid];
m10_270 -> m10_272  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_270 -> m10_273  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_271 -> m10_272  [key=0, style=solid];
m10_271 -> m10_275  [key=2, style=dotted];
m10_272 -> m10_273  [key=0, style=solid];
m10_272 -> m10_25  [key=2, style=dotted];
m10_272 -> m10_276  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_273 -> m10_274  [key=0, style=solid];
m10_273 -> m10_249  [key=2, style=dotted];
m10_273 -> m10_80  [key=2, style=dotted];
m10_276 -> m10_277  [key=0, style=solid];
m10_274 -> m10_270  [key=0, style=bold, color=blue];
m10_277 -> m10_278  [key=0, style=solid];
m10_277 -> m10_279  [key=2, style=dotted];
m10_278 -> m10_276  [key=0, style=bold, color=blue];
m10_283 -> m10_284  [key=0, style=solid];
m10_283 -> m10_285  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_283 -> m10_286  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_284 -> m10_285  [key=0, style=solid];
m10_284 -> m10_288  [key=2, style=dotted];
m10_285 -> m10_286  [key=0, style=solid];
m10_285 -> m10_25  [key=2, style=dotted];
m10_285 -> m10_289  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_286 -> m10_287  [key=0, style=solid];
m10_286 -> m10_146  [key=2, style=dotted];
m10_286 -> m10_50  [key=2, style=dotted];
m10_289 -> m10_290  [key=0, style=solid];
m10_287 -> m10_283  [key=0, style=bold, color=blue];
m10_290 -> m10_291  [key=0, style=solid];
m10_290 -> m10_292  [key=2, style=dotted];
m10_291 -> m10_289  [key=0, style=bold, color=blue];
m10_296 -> m10_297  [key=0, style=solid];
m10_296 -> m10_298  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_296 -> m10_299  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_296 -> m10_300  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_296 -> m10_301  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_296 -> m10_302  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_297 -> m10_298  [key=0, style=solid];
m10_297 -> m10_288  [key=2, style=dotted];
m10_298 -> m10_299  [key=0, style=solid];
m10_298 -> m10_288  [key=2, style=dotted];
m10_299 -> m10_300  [key=0, style=solid];
m10_299 -> m10_288  [key=2, style=dotted];
m10_300 -> m10_301  [key=0, style=solid];
m10_300 -> m10_25  [key=2, style=dotted];
m10_300 -> m10_304  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_301 -> m10_302  [key=0, style=solid];
m10_301 -> m10_103  [key=2, style=dotted];
m10_301 -> m10_50  [key=2, style=dotted];
m10_302 -> m10_303  [key=0, style=solid];
m10_302 -> m10_146  [key=2, style=dotted];
m10_302 -> m10_50  [key=2, style=dotted];
m10_304 -> m10_305  [key=0, style=solid];
m10_303 -> m10_296  [key=0, style=bold, color=blue];
m10_305 -> m10_306  [key=0, style=solid];
m10_305 -> m10_307  [key=2, style=dotted];
m10_306 -> m10_304  [key=0, style=bold, color=blue];
m10_311 -> m10_312  [key=0, style=solid];
m10_311 -> m10_313  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_311 -> m10_314  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_311 -> m10_315  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_311 -> m10_316  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_311 -> m10_317  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_311 -> m10_318  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_311 -> m10_319  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m10_312 -> m10_313  [key=0, style=solid];
m10_312 -> m10_288  [key=2, style=dotted];
m10_313 -> m10_314  [key=0, style=solid];
m10_313 -> m10_288  [key=2, style=dotted];
m10_314 -> m10_315  [key=0, style=solid];
m10_314 -> m10_288  [key=2, style=dotted];
m10_315 -> m10_316  [key=0, style=solid];
m10_315 -> m10_288  [key=2, style=dotted];
m10_316 -> m10_317  [key=0, style=solid];
m10_316 -> m10_25  [key=2, style=dotted];
m10_316 -> m10_321  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_317 -> m10_318  [key=0, style=solid];
m10_317 -> m10_103  [key=2, style=dotted];
m10_317 -> m10_50  [key=2, style=dotted];
m10_318 -> m10_319  [key=0, style=solid];
m10_318 -> m10_146  [key=2, style=dotted];
m10_318 -> m10_50  [key=2, style=dotted];
m10_319 -> m10_320  [key=0, style=solid];
m10_319 -> m10_146  [key=2, style=dotted];
m10_319 -> m10_50  [key=2, style=dotted];
m10_320 -> m10_311  [key=0, style=bold, color=blue];
m10_322 -> m10_323  [key=0, style=solid];
m10_322 -> m10_324  [key=2, style=dotted];
m10_323 -> m10_321  [key=0, style=bold, color=blue];
m10_254 -> m10_255  [key=0, style=solid];
m10_255 -> m10_256  [key=0, style=solid];
m10_255 -> m10_11  [key=2, style=dotted];
m10_255 -> m10_257  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_256 -> m10_254  [key=0, style=bold, color=blue];
m10_189 -> m10_187  [key=0, style=bold, color=blue];
m10_187 -> m10_188  [key=0, style=solid];
m10_188 -> m10_189  [key=0, style=solid];
m10_188 -> m10_11  [key=2, style=dotted];
m10_188 -> m10_190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_308 -> m10_309  [key=0, style=solid];
m10_309 -> m10_310  [key=0, style=solid];
m10_309 -> m10_11  [key=2, style=dotted];
m10_309 -> m10_311  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m10_310 -> m10_308  [key=0, style=bold, color=blue];
m10_338 -> m10_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_35  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_63  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_94  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_114  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_130  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_163  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_176  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_188  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_202  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_216  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_229  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_243  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_255  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_268  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_281  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_294  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_338 -> m10_309  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisWriteOnlyTransactionFacts"];
m10_339 -> m10_59  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_340 -> m10_91  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_341 -> m10_111  [key=1, style=dashed, color=darkseagreen4, label=state];
m10_342 -> m10_159  [key=1, style=dashed, color=darkseagreen4, label=state];
m11_89 -> m11_90  [key=0, style=solid];
m11_90 -> m11_91  [key=0, style=solid];
m11_90 -> m11_92  [key=2, style=dotted];
m11_91 -> m11_89  [key=0, style=bold, color=blue];
m11_105 -> m11_106  [key=0, style=solid];
m11_105 -> m11_109  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_106 -> m11_26  [key=2, style=dotted];
m11_106 -> m11_107  [key=0, style=solid];
m11_106 -> m11_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_107 -> m11_105  [key=0, style=bold, color=blue];
m11_92 -> m11_90  [key=3, color=darkorchid, style=bold, label="Parameter variable double score"];
m11_92 -> m11_94  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_92 -> m11_89  [key=3, color=darkorchid, style=bold, label="Parameter variable string value"];
m11_92 -> m11_93  [key=0, style=solid];
m11_92 -> m11_97  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_94 -> m11_26  [key=2, style=dotted];
m11_94 -> m11_95  [key=0, style=solid];
m11_94 -> m11_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_93 -> m11_94  [key=0, style=solid];
m11_93 -> m11_93  [key=3, color=darkorchid, style=bold, label="Local variable string addSql"];
m11_93 -> m11_97  [key=1, style=dashed, color=darkseagreen4, label=addSql];
m11_95 -> m11_92  [key=0, style=bold, color=blue];
m11_71 -> m11_72  [key=0, style=solid];
m11_71 -> m11_75  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_72 -> m11_26  [key=2, style=dotted];
m11_72 -> m11_73  [key=0, style=solid];
m11_72 -> m11_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_73 -> m11_71  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_5  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m11_0 -> m11_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.PersistentJobQueueProviderCollection"];
m11_0 -> m11_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.PersistentJobQueueProviderCollection"];
m11_1 -> m11_0  [key=0, style=bold, color=blue];
m11_1 -> m11_3  [key=0, style=solid];
m11_1 -> m11_2  [key=0, style=solid];
m11_47 -> m11_49  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_47 -> m11_48  [key=0, style=solid];
m11_47 -> m11_52  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_49 -> m11_26  [key=2, style=dotted];
m11_49 -> m11_50  [key=0, style=solid];
m11_49 -> m11_51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_48 -> m11_49  [key=0, style=solid];
m11_48 -> m11_48  [key=3, color=darkorchid, style=bold, label="Local variable string addStateSql"];
m11_48 -> m11_52  [key=1, style=dashed, color=darkseagreen4, label=addStateSql];
m11_50 -> m11_47  [key=0, style=bold, color=blue];
m11_5 -> m11_6  [key=0, style=solid];
m11_6 -> m11_7  [key=0, style=solid];
m11_3 -> m11_5  [key=0, style=solid];
m11_3 -> m11_4  [key=0, style=solid];
m11_4 -> m11_7  [key=0, style=solid];
m11_4 -> m11_8  [key=2, style=dotted];
m11_2 -> m11_7  [key=0, style=solid];
m11_2 -> m11_8  [key=2, style=dotted];
m11_7 -> m11_0  [key=0, style=bold, color=blue];
m11_117 -> m11_119  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_117 -> m11_118  [key=0, style=solid];
m11_117 -> m11_122  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_119 -> m11_26  [key=2, style=dotted];
m11_119 -> m11_120  [key=0, style=solid];
m11_119 -> m11_121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_118 -> m11_119  [key=0, style=solid];
m11_118 -> m11_118  [key=3, color=darkorchid, style=bold, label="Local variable string trimSql"];
m11_118 -> m11_122  [key=1, style=dashed, color=darkseagreen4, label=trimSql];
m11_120 -> m11_117  [key=0, style=bold, color=blue];
m11_26 -> m11_124  [key=0, style=solid, color=green];
m11_26 -> m11_24  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_33  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_40  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_49  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_57  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_66  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_72  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_78  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_84  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_94  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_100  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_106  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_112  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_26 -> m11_119  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Action<SqlConnection> action"];
m11_124 -> m11_125  [key=0, style=solid, color=green];
m11_124 -> m11_126  [key=2, style=dotted, color=green];
m11_125 -> m11_26  [key=0, style=bold, color=blue];
m11_83 -> m11_84  [key=0, style=solid];
m11_83 -> m11_87  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_84 -> m11_26  [key=2, style=dotted];
m11_84 -> m11_85  [key=0, style=solid];
m11_84 -> m11_86  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_85 -> m11_83  [key=0, style=bold, color=blue];
m11_38 -> m11_40  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_38 -> m11_39  [key=0, style=solid];
m11_38 -> m11_43  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_40 -> m11_26  [key=2, style=dotted];
m11_40 -> m11_41  [key=0, style=solid];
m11_40 -> m11_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_39 -> m11_40  [key=0, style=solid];
m11_39 -> m11_39  [key=3, color=darkorchid, style=bold, label="Local variable string addAndSetStateSql"];
m11_39 -> m11_43  [key=1, style=dashed, color=darkseagreen4, label=addAndSetStateSql];
m11_41 -> m11_38  [key=0, style=bold, color=blue];
m11_77 -> m11_78  [key=0, style=solid];
m11_77 -> m11_81  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_78 -> m11_26  [key=2, style=dotted];
m11_78 -> m11_79  [key=0, style=solid];
m11_78 -> m11_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_79 -> m11_77  [key=0, style=bold, color=blue];
m11_99 -> m11_100  [key=0, style=solid];
m11_99 -> m11_103  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_100 -> m11_26  [key=2, style=dotted];
m11_100 -> m11_101  [key=0, style=solid];
m11_100 -> m11_102  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_101 -> m11_99  [key=0, style=bold, color=blue];
m11_23 -> m11_24  [key=0, style=solid];
m11_23 -> m11_28  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_24 -> m11_26  [key=2, style=dotted];
m11_24 -> m11_25  [key=0, style=solid];
m11_24 -> m11_27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_25 -> m11_23  [key=0, style=bold, color=blue];
m11_111 -> m11_112  [key=0, style=solid];
m11_111 -> m11_115  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_112 -> m11_26  [key=2, style=dotted];
m11_112 -> m11_113  [key=0, style=solid];
m11_112 -> m11_114  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_113 -> m11_111  [key=0, style=bold, color=blue];
m11_11 -> m11_12  [key=0, style=solid];
m11_13 -> m11_14  [key=0, style=solid];
m11_13 -> m11_20  [key=2, style=dotted];
m11_14 -> m11_15  [key=0, style=solid];
m11_14 -> m11_16  [key=0, style=solid];
m11_15 -> m11_14  [key=0, style=solid];
m11_15 -> m11_21  [key=2, style=dotted];
m11_12 -> m11_13  [key=0, style=solid];
m11_12 -> m11_18  [key=2, style=dotted];
m11_12 -> m11_19  [key=2, style=dotted];
m11_12 -> m11_16  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m11_16 -> m11_17  [key=0, style=solid];
m11_16 -> m11_22  [key=2, style=dotted];
m11_17 -> m11_11  [key=0, style=bold, color=blue];
m11_121 -> m11_122  [key=0, style=solid];
m11_27 -> m11_28  [key=0, style=solid];
m11_35 -> m11_36  [key=0, style=solid];
m11_42 -> m11_43  [key=0, style=solid];
m11_51 -> m11_52  [key=0, style=solid];
m11_62 -> m11_63  [key=0, style=solid];
m11_62 -> m11_64  [key=2, style=dotted];
m11_61 -> m11_62  [key=0, style=solid];
m11_68 -> m11_69  [key=0, style=solid];
m11_74 -> m11_75  [key=0, style=solid];
m11_80 -> m11_81  [key=0, style=solid];
m11_86 -> m11_87  [key=0, style=solid];
m11_96 -> m11_97  [key=0, style=solid];
m11_102 -> m11_103  [key=0, style=solid];
m11_108 -> m11_109  [key=0, style=solid];
m11_114 -> m11_115  [key=0, style=solid];
m11_28 -> m11_29  [key=0, style=solid];
m11_28 -> m11_30  [key=2, style=dotted];
m11_28 -> m11_31  [key=2, style=dotted];
m11_29 -> m11_27  [key=0, style=bold, color=blue];
m11_36 -> m11_37  [key=0, style=solid];
m11_36 -> m11_31  [key=2, style=dotted];
m11_37 -> m11_35  [key=0, style=bold, color=blue];
m11_43 -> m11_44  [key=0, style=solid];
m11_43 -> m11_45  [key=2, style=dotted];
m11_43 -> m11_46  [key=2, style=dotted];
m11_43 -> m11_31  [key=2, style=dotted];
m11_44 -> m11_42  [key=0, style=bold, color=blue];
m11_52 -> m11_53  [key=0, style=solid];
m11_52 -> m11_45  [key=2, style=dotted];
m11_52 -> m11_46  [key=2, style=dotted];
m11_52 -> m11_31  [key=2, style=dotted];
m11_53 -> m11_51  [key=0, style=bold, color=blue];
m11_63 -> m11_61  [key=0, style=bold, color=blue];
m11_69 -> m11_70  [key=0, style=solid];
m11_69 -> m11_31  [key=2, style=dotted];
m11_70 -> m11_68  [key=0, style=bold, color=blue];
m11_75 -> m11_76  [key=0, style=solid];
m11_75 -> m11_30  [key=2, style=dotted];
m11_75 -> m11_31  [key=2, style=dotted];
m11_76 -> m11_74  [key=0, style=bold, color=blue];
m11_81 -> m11_82  [key=0, style=solid];
m11_81 -> m11_31  [key=2, style=dotted];
m11_82 -> m11_80  [key=0, style=bold, color=blue];
m11_87 -> m11_88  [key=0, style=solid];
m11_87 -> m11_30  [key=2, style=dotted];
m11_87 -> m11_31  [key=2, style=dotted];
m11_88 -> m11_86  [key=0, style=bold, color=blue];
m11_97 -> m11_98  [key=0, style=solid];
m11_97 -> m11_31  [key=2, style=dotted];
m11_98 -> m11_96  [key=0, style=bold, color=blue];
m11_103 -> m11_104  [key=0, style=solid];
m11_103 -> m11_31  [key=2, style=dotted];
m11_104 -> m11_102  [key=0, style=bold, color=blue];
m11_109 -> m11_110  [key=0, style=solid];
m11_109 -> m11_31  [key=2, style=dotted];
m11_110 -> m11_108  [key=0, style=bold, color=blue];
m11_115 -> m11_116  [key=0, style=solid];
m11_115 -> m11_31  [key=2, style=dotted];
m11_116 -> m11_114  [key=0, style=bold, color=blue];
m11_122 -> m11_123  [key=0, style=solid];
m11_122 -> m11_31  [key=2, style=dotted];
m11_123 -> m11_121  [key=0, style=bold, color=blue];
m11_54 -> m11_55  [key=0, style=solid];
m11_54 -> m11_57  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_54 -> m11_62  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_55 -> m11_56  [key=0, style=solid];
m11_55 -> m11_59  [key=2, style=dotted];
m11_56 -> m11_57  [key=0, style=solid];
m11_56 -> m11_60  [key=2, style=dotted];
m11_56 -> m11_62  [key=1, style=dashed, color=darkseagreen4, label=persistentQueue];
m11_57 -> m11_26  [key=2, style=dotted];
m11_57 -> m11_58  [key=0, style=solid];
m11_57 -> m11_61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_58 -> m11_54  [key=0, style=bold, color=blue];
m11_65 -> m11_66  [key=0, style=solid];
m11_65 -> m11_69  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_66 -> m11_26  [key=2, style=dotted];
m11_66 -> m11_67  [key=0, style=solid];
m11_66 -> m11_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_67 -> m11_65  [key=0, style=bold, color=blue];
m11_32 -> m11_33  [key=0, style=solid];
m11_32 -> m11_36  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_33 -> m11_26  [key=2, style=dotted];
m11_33 -> m11_34  [key=0, style=solid];
m11_33 -> m11_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_34 -> m11_32  [key=0, style=bold, color=blue];
m11_127 -> m11_124  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_24  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_33  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_55  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_56  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_66  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_72  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_78  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_84  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_90  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_94  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_100  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_106  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_112  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_127 -> m11_119  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction"];
m11_137 -> m11_62  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_138 -> m11_62  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_139 -> m11_62  [key=1, style=dashed, color=darkseagreen4, label=persistentQueue];
m11_128 -> m11_28  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_129 -> m11_28  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m11_130 -> m11_36  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_131 -> m11_43  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_132 -> m11_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.IState"];
m11_133 -> m11_43  [key=1, style=dashed, color=darkseagreen4, label=addAndSetStateSql];
m11_134 -> m11_52  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_135 -> m11_52  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.IState"];
m11_136 -> m11_52  [key=1, style=dashed, color=darkseagreen4, label=addStateSql];
m11_140 -> m11_69  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_141 -> m11_75  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_142 -> m11_75  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m11_143 -> m11_81  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_144 -> m11_87  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_145 -> m11_87  [key=1, style=dashed, color=darkseagreen4, label="System.TimeSpan"];
m11_146 -> m11_97  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_147 -> m11_97  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_148 -> m11_97  [key=1, style=dashed, color=darkseagreen4, label=double];
m11_149 -> m11_97  [key=1, style=dashed, color=darkseagreen4, label=addSql];
m11_150 -> m11_103  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_151 -> m11_103  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_152 -> m11_109  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_153 -> m11_109  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_154 -> m11_115  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_155 -> m11_115  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_156 -> m11_122  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_157 -> m11_122  [key=1, style=dashed, color=darkseagreen4, label=int];
m11_158 -> m11_122  [key=1, style=dashed, color=darkseagreen4, label=int];
m11_159 -> m11_122  [key=1, style=dashed, color=darkseagreen4, label=trimSql];
m12_159 -> m12_160  [key=0, style=solid];
m12_160 -> m12_161  [key=0, style=solid];
m12_160 -> m12_164  [key=1, style=dashed, color=darkseagreen4, label=time];
m12_160 -> m12_168  [key=1, style=dashed, color=darkseagreen4, label=time];
m12_161 -> m12_162  [key=0, style=solid];
m12_161 -> m12_166  [key=2, style=dotted];
m12_164 -> m12_165  [key=0, style=solid];
m12_164 -> m12_95  [key=2, style=dotted];
m12_164 -> m12_167  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_162 -> m12_163  [key=0, style=solid];
m12_162 -> m12_93  [key=2, style=dotted];
m12_163 -> m12_164  [key=0, style=solid];
m12_163 -> m12_94  [key=2, style=dotted];
m12_165 -> m12_159  [key=0, style=bold, color=blue];
m12_257 -> m12_258  [key=0, style=solid];
m12_258 -> m12_259  [key=0, style=solid];
m12_258 -> m12_229  [key=2, style=dotted];
m12_258 -> m12_264  [key=1, style=dashed, color=darkseagreen4, label=nextExecution];
m12_258 -> m12_267  [key=1, style=dashed, color=darkseagreen4, label=nextExecution];
m12_258 -> m12_270  [key=1, style=dashed, color=darkseagreen4, label=nextExecution];
m12_259 -> m12_260  [key=0, style=solid];
m12_259 -> m12_166  [key=2, style=dotted];
m12_264 -> m12_265  [key=0, style=solid];
m12_264 -> m12_95  [key=2, style=dotted];
m12_264 -> m12_266  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_260 -> m12_261  [key=0, style=solid];
m12_260 -> m12_206  [key=2, style=dotted];
m12_261 -> m12_262  [key=0, style=solid];
m12_261 -> m12_206  [key=2, style=dotted];
m12_262 -> m12_263  [key=0, style=solid];
m12_262 -> m12_93  [key=2, style=dotted];
m12_263 -> m12_264  [key=0, style=solid];
m12_263 -> m12_94  [key=2, style=dotted];
m12_265 -> m12_257  [key=0, style=bold, color=blue];
m12_170 -> m12_171  [key=0, style=solid];
m12_171 -> m12_172  [key=0, style=solid];
m12_171 -> m12_21  [key=2, style=dotted];
m12_171 -> m12_28  [key=2, style=dotted];
m12_171 -> m12_22  [key=2, style=dotted];
m12_171 -> m12_175  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_172 -> m12_173  [key=0, style=solid];
m12_172 -> m12_93  [key=2, style=dotted];
m12_173 -> m12_174  [key=0, style=solid];
m12_173 -> m12_94  [key=2, style=dotted];
m12_174 -> m12_170  [key=0, style=bold, color=blue];
m12_111 -> m12_112  [key=0, style=solid];
m12_112 -> m12_113  [key=0, style=solid];
m12_112 -> m12_93  [key=2, style=dotted];
m12_113 -> m12_114  [key=0, style=solid];
m12_113 -> m12_94  [key=2, style=dotted];
m12_114 -> m12_115  [key=0, style=solid];
m12_114 -> m12_120  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m12_114 -> m12_116  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m12_114 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m12_114 -> m12_117  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m12_114 -> m12_135  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m12_115 -> m12_116  [key=0, style=solid];
m12_115 -> m12_95  [key=2, style=dotted];
m12_115 -> m12_119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_116 -> m12_117  [key=0, style=solid];
m12_116 -> m12_95  [key=2, style=dotted];
m12_116 -> m12_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_117 -> m12_118  [key=0, style=solid];
m12_117 -> m12_95  [key=2, style=dotted];
m12_117 -> m12_134  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_118 -> m12_111  [key=0, style=bold, color=blue];
m12_140 -> m12_141  [key=0, style=solid];
m12_141 -> m12_142  [key=0, style=solid];
m12_141 -> m12_21  [key=2, style=dotted];
m12_141 -> m12_22  [key=2, style=dotted];
m12_141 -> m12_147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_142 -> m12_143  [key=0, style=solid];
m12_142 -> m12_93  [key=2, style=dotted];
m12_143 -> m12_144  [key=0, style=solid];
m12_143 -> m12_94  [key=2, style=dotted];
m12_144 -> m12_145  [key=0, style=solid];
m12_144 -> m12_95  [key=2, style=dotted];
m12_144 -> m12_150  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_145 -> m12_146  [key=0, style=solid];
m12_145 -> m12_95  [key=2, style=dotted];
m12_145 -> m12_153  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_146 -> m12_140  [key=0, style=bold, color=blue];
m12_74 -> m12_75  [key=0, style=solid];
m12_75 -> m12_76  [key=0, style=solid];
m12_75 -> m12_34  [key=2, style=dotted];
m12_75 -> m12_78  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_76 -> m12_77  [key=0, style=solid];
m12_76 -> m12_69  [key=2, style=dotted];
m12_77 -> m12_74  [key=0, style=bold, color=blue];
m12_93 -> m12_272  [key=0, style=solid];
m12_272 -> m12_273  [key=0, style=solid];
m12_272 -> m12_73  [key=2, style=dotted];
m12_273 -> m12_93  [key=0, style=bold, color=blue];
m12_200 -> m12_201  [key=0, style=solid];
m12_201 -> m12_202  [key=0, style=solid];
m12_201 -> m12_208  [key=1, style=dashed, color=darkseagreen4, label="System.TimeZoneInfo"];
m12_202 -> m12_203  [key=0, style=solid];
m12_202 -> m12_206  [key=2, style=dotted];
m12_203 -> m12_204  [key=0, style=solid];
m12_203 -> m12_93  [key=2, style=dotted];
m12_204 -> m12_205  [key=0, style=solid];
m12_204 -> m12_94  [key=2, style=dotted];
m12_205 -> m12_200  [key=0, style=bold, color=blue];
m12_222 -> m12_223  [key=0, style=solid];
m12_223 -> m12_224  [key=0, style=solid];
m12_223 -> m12_229  [key=2, style=dotted];
m12_223 -> m12_227  [key=1, style=dashed, color=darkseagreen4, label=createdAt];
m12_223 -> m12_231  [key=1, style=dashed, color=darkseagreen4, label=createdAt];
m12_224 -> m12_225  [key=0, style=solid];
m12_224 -> m12_166  [key=2, style=dotted];
m12_227 -> m12_228  [key=0, style=solid];
m12_227 -> m12_95  [key=2, style=dotted];
m12_227 -> m12_230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_225 -> m12_226  [key=0, style=solid];
m12_225 -> m12_93  [key=2, style=dotted];
m12_226 -> m12_227  [key=0, style=solid];
m12_226 -> m12_94  [key=2, style=dotted];
m12_228 -> m12_222  [key=0, style=bold, color=blue];
m12_245 -> m12_246  [key=0, style=solid];
m12_246 -> m12_247  [key=0, style=solid];
m12_246 -> m12_206  [key=2, style=dotted];
m12_247 -> m12_248  [key=0, style=solid];
m12_247 -> m12_93  [key=2, style=dotted];
m12_248 -> m12_249  [key=0, style=solid];
m12_248 -> m12_94  [key=2, style=dotted];
m12_249 -> m12_250  [key=0, style=solid];
m12_249 -> m12_95  [key=2, style=dotted];
m12_249 -> m12_251  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_250 -> m12_245  [key=0, style=bold, color=blue];
m12_0 -> m12_1  [key=0, style=solid];
m12_1 -> m12_2  [key=0, style=solid];
m12_1 -> m12_18  [key=2, style=dotted];
m12_2 -> m12_3  [key=0, style=solid];
m12_2 -> m12_19  [key=2, style=dotted];
m12_3 -> m12_4  [key=0, style=solid];
m12_3 -> m12_20  [key=2, style=dotted];
m12_4 -> m12_5  [key=0, style=solid];
m12_4 -> m12_21  [key=2, style=dotted];
m12_4 -> m12_22  [key=2, style=dotted];
m12_4 -> m12_31  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_5 -> m12_6  [key=0, style=solid];
m12_5 -> m12_21  [key=2, style=dotted];
m12_5 -> m12_22  [key=2, style=dotted];
m12_5 -> m12_36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_6 -> m12_7  [key=0, style=solid];
m12_6 -> m12_21  [key=2, style=dotted];
m12_6 -> m12_22  [key=2, style=dotted];
m12_6 -> m12_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_7 -> m12_8  [key=0, style=solid];
m12_7 -> m12_9  [key=1, style=dashed, color=darkseagreen4, label=timeZone1];
m12_8 -> m12_9  [key=0, style=solid];
m12_9 -> m12_10  [key=0, style=solid];
m12_9 -> m12_23  [key=2, style=dotted];
m12_9 -> m12_24  [key=2, style=dotted];
m12_9 -> m12_25  [key=2, style=dotted];
m12_9 -> m12_26  [key=2, style=dotted];
m12_9 -> m12_45  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_10 -> m12_11  [key=0, style=solid];
m12_10 -> m12_27  [key=2, style=dotted];
m12_11 -> m12_12  [key=0, style=solid];
m12_11 -> m12_21  [key=2, style=dotted];
m12_11 -> m12_22  [key=2, style=dotted];
m12_11 -> m12_49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_12 -> m12_13  [key=0, style=solid];
m12_12 -> m12_21  [key=2, style=dotted];
m12_12 -> m12_28  [key=2, style=dotted];
m12_12 -> m12_22  [key=2, style=dotted];
m12_12 -> m12_53  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_13 -> m12_14  [key=0, style=solid];
m12_13 -> m12_21  [key=2, style=dotted];
m12_13 -> m12_22  [key=2, style=dotted];
m12_13 -> m12_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_14 -> m12_15  [key=0, style=solid];
m12_14 -> m12_29  [key=2, style=dotted];
m12_15 -> m12_16  [key=0, style=solid];
m12_15 -> m12_30  [key=2, style=dotted];
m12_16 -> m12_17  [key=0, style=solid];
m12_16 -> m12_21  [key=2, style=dotted];
m12_16 -> m12_22  [key=2, style=dotted];
m12_16 -> m12_61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_17 -> m12_0  [key=0, style=bold, color=blue];
m12_99 -> m12_100  [key=0, style=solid];
m12_100 -> m12_101  [key=0, style=solid];
m12_101 -> m12_102  [key=0, style=solid];
m12_101 -> m12_93  [key=2, style=dotted];
m12_102 -> m12_103  [key=0, style=solid];
m12_102 -> m12_94  [key=2, style=dotted];
m12_103 -> m12_104  [key=0, style=solid];
m12_103 -> m12_95  [key=2, style=dotted];
m12_103 -> m12_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_104 -> m12_99  [key=0, style=bold, color=blue];
m12_213 -> m12_214  [key=0, style=solid];
m12_214 -> m12_215  [key=0, style=solid];
m12_215 -> m12_216  [key=0, style=solid];
m12_215 -> m12_93  [key=2, style=dotted];
m12_216 -> m12_217  [key=0, style=solid];
m12_216 -> m12_94  [key=2, style=dotted];
m12_217 -> m12_218  [key=0, style=solid];
m12_217 -> m12_95  [key=2, style=dotted];
m12_217 -> m12_219  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_218 -> m12_213  [key=0, style=bold, color=blue];
m12_88 -> m12_89  [key=0, style=solid];
m12_89 -> m12_90  [key=0, style=solid];
m12_89 -> m12_93  [key=2, style=dotted];
m12_90 -> m12_91  [key=0, style=solid];
m12_90 -> m12_94  [key=2, style=dotted];
m12_91 -> m12_92  [key=0, style=solid];
m12_91 -> m12_95  [key=2, style=dotted];
m12_91 -> m12_96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_92 -> m12_88  [key=0, style=bold, color=blue];
m12_233 -> m12_234  [key=0, style=solid];
m12_234 -> m12_235  [key=0, style=solid];
m12_234 -> m12_166  [key=2, style=dotted];
m12_235 -> m12_236  [key=0, style=solid];
m12_235 -> m12_93  [key=2, style=dotted];
m12_236 -> m12_237  [key=0, style=solid];
m12_236 -> m12_94  [key=2, style=dotted];
m12_237 -> m12_238  [key=0, style=solid];
m12_237 -> m12_95  [key=2, style=dotted];
m12_237 -> m12_239  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_238 -> m12_233  [key=0, style=bold, color=blue];
m12_184 -> m12_185  [key=0, style=solid];
m12_185 -> m12_186  [key=0, style=solid];
m12_185 -> m12_192  [key=2, style=dotted];
m12_185 -> m12_195  [key=1, style=dashed, color=darkseagreen4, label=timeZoneId];
m12_185 -> m12_187  [key=1, style=dashed, color=darkseagreen4, label=timeZoneId];
m12_186 -> m12_187  [key=0, style=solid];
m12_186 -> m12_195  [key=1, style=dashed, color=darkseagreen4, label="System.TimeZoneInfo"];
m12_187 -> m12_188  [key=0, style=solid];
m12_187 -> m12_193  [key=2, style=dotted];
m12_188 -> m12_189  [key=0, style=solid];
m12_189 -> m12_190  [key=0, style=solid];
m12_189 -> m12_93  [key=2, style=dotted];
m12_190 -> m12_191  [key=0, style=solid];
m12_190 -> m12_94  [key=2, style=dotted];
m12_191 -> m12_184  [key=0, style=bold, color=blue];
m12_269 -> m12_270  [key=0, style=solid];
m12_31 -> m12_32  [key=0, style=solid];
m12_36 -> m12_37  [key=0, style=solid];
m12_39 -> m12_40  [key=0, style=solid];
m12_45 -> m12_46  [key=0, style=solid];
m12_49 -> m12_50  [key=0, style=solid];
m12_53 -> m12_54  [key=0, style=solid];
m12_57 -> m12_58  [key=0, style=solid];
m12_61 -> m12_62  [key=0, style=solid];
m12_32 -> m12_33  [key=0, style=solid];
m12_32 -> m12_34  [key=2, style=dotted];
m12_32 -> m12_35  [key=2, style=dotted];
m12_33 -> m12_31  [key=0, style=bold, color=blue];
m12_37 -> m12_38  [key=0, style=solid];
m12_38 -> m12_36  [key=0, style=bold, color=blue];
m12_40 -> m12_41  [key=0, style=solid];
m12_41 -> m12_39  [key=0, style=bold, color=blue];
m12_42 -> m12_43  [key=0, style=solid];
m12_43 -> m12_44  [key=0, style=solid];
m12_44 -> m12_42  [key=0, style=bold, color=blue];
m12_46 -> m12_47  [key=0, style=solid];
m12_46 -> m12_48  [key=2, style=dotted];
m12_47 -> m12_45  [key=0, style=bold, color=blue];
m12_50 -> m12_51  [key=0, style=solid];
m12_50 -> m12_52  [key=2, style=dotted];
m12_51 -> m12_49  [key=0, style=bold, color=blue];
m12_54 -> m12_55  [key=0, style=solid];
m12_54 -> m12_56  [key=2, style=dotted];
m12_55 -> m12_53  [key=0, style=bold, color=blue];
m12_58 -> m12_59  [key=0, style=solid];
m12_58 -> m12_60  [key=2, style=dotted];
m12_59 -> m12_57  [key=0, style=bold, color=blue];
m12_62 -> m12_63  [key=0, style=solid];
m12_62 -> m12_34  [key=2, style=dotted];
m12_62 -> m12_64  [key=2, style=dotted];
m12_63 -> m12_61  [key=0, style=bold, color=blue];
m12_70 -> m12_71  [key=0, style=solid];
m12_71 -> m12_72  [key=0, style=solid];
m12_71 -> m12_73  [key=2, style=dotted];
m12_72 -> m12_70  [key=0, style=bold, color=blue];
m12_78 -> m12_79  [key=0, style=solid];
m12_79 -> m12_80  [key=0, style=solid];
m12_79 -> m12_73  [key=2, style=dotted];
m12_80 -> m12_78  [key=0, style=bold, color=blue];
m12_85 -> m12_86  [key=0, style=solid];
m12_86 -> m12_87  [key=0, style=solid];
m12_86 -> m12_73  [key=2, style=dotted];
m12_87 -> m12_85  [key=0, style=bold, color=blue];
m12_96 -> m12_97  [key=0, style=solid];
m12_97 -> m12_98  [key=0, style=solid];
m12_97 -> m12_34  [key=2, style=dotted];
m12_97 -> m12_64  [key=2, style=dotted];
m12_98 -> m12_96  [key=0, style=bold, color=blue];
m12_105 -> m12_106  [key=0, style=solid];
m12_106 -> m12_107  [key=0, style=solid];
m12_106 -> m12_34  [key=2, style=dotted];
m12_106 -> m12_64  [key=2, style=dotted];
m12_106 -> m12_108  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_107 -> m12_105  [key=0, style=bold, color=blue];
m12_108 -> m12_109  [key=0, style=solid];
m12_109 -> m12_110  [key=0, style=solid];
m12_110 -> m12_108  [key=0, style=bold, color=blue];
m12_120 -> m12_121  [key=0, style=solid];
m12_120 -> m12_34  [key=2, style=dotted];
m12_120 -> m12_122  [key=2, style=dotted];
m12_120 -> m12_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_128 -> m12_129  [key=0, style=solid];
m12_128 -> m12_34  [key=2, style=dotted];
m12_128 -> m12_122  [key=2, style=dotted];
m12_128 -> m12_130  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_135 -> m12_136  [key=0, style=solid];
m12_135 -> m12_34  [key=2, style=dotted];
m12_135 -> m12_122  [key=2, style=dotted];
m12_135 -> m12_137  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_119 -> m12_120  [key=0, style=solid];
m12_127 -> m12_128  [key=0, style=solid];
m12_134 -> m12_135  [key=0, style=solid];
m12_121 -> m12_119  [key=0, style=bold, color=blue];
m12_123 -> m12_124  [key=0, style=solid];
m12_124 -> m12_125  [key=0, style=solid];
m12_124 -> m12_126  [key=2, style=dotted];
m12_125 -> m12_123  [key=0, style=bold, color=blue];
m12_129 -> m12_127  [key=0, style=bold, color=blue];
m12_130 -> m12_131  [key=0, style=solid];
m12_131 -> m12_132  [key=0, style=solid];
m12_131 -> m12_126  [key=2, style=dotted];
m12_131 -> m12_133  [key=2, style=dotted];
m12_132 -> m12_130  [key=0, style=bold, color=blue];
m12_136 -> m12_134  [key=0, style=bold, color=blue];
m12_137 -> m12_138  [key=0, style=solid];
m12_138 -> m12_139  [key=0, style=solid];
m12_138 -> m12_126  [key=2, style=dotted];
m12_138 -> m12_133  [key=2, style=dotted];
m12_139 -> m12_137  [key=0, style=bold, color=blue];
m12_147 -> m12_148  [key=0, style=solid];
m12_150 -> m12_151  [key=0, style=solid];
m12_153 -> m12_154  [key=0, style=solid];
m12_148 -> m12_149  [key=0, style=solid];
m12_148 -> m12_34  [key=2, style=dotted];
m12_148 -> m12_35  [key=2, style=dotted];
m12_149 -> m12_147  [key=0, style=bold, color=blue];
m12_151 -> m12_152  [key=0, style=solid];
m12_151 -> m12_34  [key=2, style=dotted];
m12_151 -> m12_64  [key=2, style=dotted];
m12_152 -> m12_150  [key=0, style=bold, color=blue];
m12_154 -> m12_155  [key=0, style=solid];
m12_154 -> m12_34  [key=2, style=dotted];
m12_154 -> m12_122  [key=2, style=dotted];
m12_154 -> m12_156  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_155 -> m12_153  [key=0, style=bold, color=blue];
m12_156 -> m12_157  [key=0, style=solid];
m12_157 -> m12_158  [key=0, style=solid];
m12_157 -> m12_126  [key=2, style=dotted];
m12_157 -> m12_133  [key=2, style=dotted];
m12_158 -> m12_156  [key=0, style=bold, color=blue];
m12_168 -> m12_169  [key=0, style=solid];
m12_168 -> m12_35  [key=2, style=dotted];
m12_167 -> m12_168  [key=0, style=solid];
m12_169 -> m12_167  [key=0, style=bold, color=blue];
m12_175 -> m12_176  [key=0, style=solid];
m12_176 -> m12_177  [key=0, style=solid];
m12_176 -> m12_34  [key=2, style=dotted];
m12_176 -> m12_56  [key=2, style=dotted];
m12_177 -> m12_175  [key=0, style=bold, color=blue];
m12_195 -> m12_196  [key=0, style=solid];
m12_195 -> m12_197  [key=0, style=solid];
m12_194 -> m12_195  [key=0, style=solid];
m12_196 -> m12_198  [key=0, style=solid];
m12_196 -> m12_199  [key=2, style=dotted];
m12_197 -> m12_198  [key=0, style=solid];
m12_198 -> m12_194  [key=0, style=bold, color=blue];
m12_208 -> m12_209  [key=0, style=solid];
m12_208 -> m12_210  [key=0, style=solid];
m12_208 -> m12_212  [key=2, style=dotted];
m12_207 -> m12_208  [key=0, style=solid];
m12_209 -> m12_211  [key=0, style=solid];
m12_209 -> m12_199  [key=2, style=dotted];
m12_210 -> m12_211  [key=0, style=solid];
m12_211 -> m12_207  [key=0, style=bold, color=blue];
m12_219 -> m12_220  [key=0, style=solid];
m12_220 -> m12_221  [key=0, style=solid];
m12_220 -> m12_34  [key=2, style=dotted];
m12_220 -> m12_64  [key=2, style=dotted];
m12_221 -> m12_219  [key=0, style=bold, color=blue];
m12_231 -> m12_232  [key=0, style=solid];
m12_231 -> m12_35  [key=2, style=dotted];
m12_230 -> m12_231  [key=0, style=solid];
m12_232 -> m12_230  [key=0, style=bold, color=blue];
m12_239 -> m12_240  [key=0, style=solid];
m12_240 -> m12_241  [key=0, style=solid];
m12_240 -> m12_34  [key=2, style=dotted];
m12_240 -> m12_122  [key=2, style=dotted];
m12_240 -> m12_242  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_241 -> m12_239  [key=0, style=bold, color=blue];
m12_242 -> m12_243  [key=0, style=solid];
m12_243 -> m12_244  [key=0, style=solid];
m12_243 -> m12_126  [key=2, style=dotted];
m12_244 -> m12_242  [key=0, style=bold, color=blue];
m12_251 -> m12_252  [key=0, style=solid];
m12_252 -> m12_253  [key=0, style=solid];
m12_252 -> m12_34  [key=2, style=dotted];
m12_252 -> m12_122  [key=2, style=dotted];
m12_252 -> m12_254  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_253 -> m12_251  [key=0, style=bold, color=blue];
m12_254 -> m12_255  [key=0, style=solid];
m12_255 -> m12_256  [key=0, style=solid];
m12_255 -> m12_126  [key=2, style=dotted];
m12_256 -> m12_254  [key=0, style=bold, color=blue];
m12_267 -> m12_268  [key=0, style=solid];
m12_267 -> m12_34  [key=2, style=dotted];
m12_267 -> m12_35  [key=2, style=dotted];
m12_267 -> m12_269  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_270 -> m12_271  [key=0, style=solid];
m12_266 -> m12_267  [key=0, style=solid];
m12_268 -> m12_266  [key=0, style=bold, color=blue];
m12_271 -> m12_269  [key=0, style=bold, color=blue];
m12_65 -> m12_66  [key=0, style=solid];
m12_66 -> m12_67  [key=0, style=solid];
m12_66 -> m12_34  [key=2, style=dotted];
m12_66 -> m12_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_67 -> m12_68  [key=0, style=solid];
m12_67 -> m12_69  [key=2, style=dotted];
m12_68 -> m12_65  [key=0, style=bold, color=blue];
m12_81 -> m12_82  [key=0, style=solid];
m12_82 -> m12_83  [key=0, style=solid];
m12_82 -> m12_34  [key=2, style=dotted];
m12_82 -> m12_85  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m12_83 -> m12_84  [key=0, style=solid];
m12_83 -> m12_69  [key=2, style=dotted];
m12_84 -> m12_81  [key=0, style=bold, color=blue];
m12_178 -> m12_179  [key=0, style=solid];
m12_179 -> m12_180  [key=0, style=solid];
m12_179 -> m12_183  [key=2, style=dotted];
m12_179 -> m12_26  [key=2, style=dotted];
m12_180 -> m12_181  [key=0, style=solid];
m12_180 -> m12_93  [key=2, style=dotted];
m12_181 -> m12_182  [key=0, style=solid];
m12_181 -> m12_94  [key=2, style=dotted];
m12_182 -> m12_178  [key=0, style=bold, color=blue];
m12_274 -> m12_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_15  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_66  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_71  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_75  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_79  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_82  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_86  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_89  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_90  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_91  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_100  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_101  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_102  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_103  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_112  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_113  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_115  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_120  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_124  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_116  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_131  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_117  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_135  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_138  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_141  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_142  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_143  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_144  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_145  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_154  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_157  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_161  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_162  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_163  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_164  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_171  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_172  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_173  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_180  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_181  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_186  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_197  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_188  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_189  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_190  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_201  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_210  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_202  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_203  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_204  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_214  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_215  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_216  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_217  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_224  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_225  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_226  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_227  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_234  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_235  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_236  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_237  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_246  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_247  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_248  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_249  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_259  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_260  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_261  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_262  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_263  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_264  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_274 -> m12_272  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m12_275 -> m12_120  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m12_275 -> m12_128  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m12_275 -> m12_135  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m12_276 -> m12_168  [key=1, style=dashed, color=darkseagreen4, label=time];
m12_277 -> m12_195  [key=1, style=dashed, color=darkseagreen4, label=timeZoneId];
m12_278 -> m12_231  [key=1, style=dashed, color=darkseagreen4, label=createdAt];
m12_279 -> m12_267  [key=1, style=dashed, color=darkseagreen4, label=nextExecution];
m12_279 -> m12_270  [key=1, style=dashed, color=darkseagreen4, label=nextExecution];
}
