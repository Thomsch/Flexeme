digraph  {
n215 [label="Hangfire.Core.Tests.Common.JobArgumentFacts", span=""];
n216 [label=T, span=""];
n217 [label=converter, span=""];
n0 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", span="16-16"];
n1 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", label="_activator = new Mock<JobActivator>()", span="18-18"];
n2 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", label="_activator.Setup(x => x.ActivateJob(It.IsAny<Type>()))\r\n				      .Returns(() => new JobArgumentFacts())", span="19-20"];
n5 [cluster="Mock<JobActivator>.cstr", label="Entry Mock<JobActivator>.cstr", span=""];
n3 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", label="_token = new Mock<IJobCancellationToken>()", span="22-22"];
n6 [cluster="Unk.Setup", label="Entry Unk.Setup", span=""];
n7 [cluster="Unk.Returns", label="Entry Unk.Returns", span=""];
n9 [cluster="lambda expression", label="Entry lambda expression", span="19-19"];
n14 [cluster="lambda expression", label="Entry lambda expression", span="20-20"];
n4 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", span="16-16"];
n8 [cluster="Mock<IJobCancellationToken>.cstr", label="Entry Mock<IJobCancellationToken>.cstr", span=""];
n10 [cluster="lambda expression", label="x.ActivateJob(It.IsAny<Type>())", span="19-19"];
n11 [cluster="lambda expression", label="Exit lambda expression", span="19-19"];
n12 [cluster="Unk.>", label="Entry Unk.>", span=""];
n13 [cluster="Unk.ActivateJob", label="Entry Unk.ActivateJob", span=""];
n15 [cluster="lambda expression", label="new JobArgumentFacts()", span="20-20"];
n16 [cluster="lambda expression", label="Exit lambda expression", span="20-20"];
n17 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)", span="26-26"];
n18 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)", label="Assert.Equal(BooleanValue, value)", span="26-26"];
n19 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)", span="26-26"];
n20 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n21 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", span="29-29"];
n22 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(BooleanValue)", span="31-31"];
n23 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", span="29-29"];
n24 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", span="292-292"];
n25 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", span="35-35"];
n26 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", label="Assert.Equal(ByteValue, value)", span="35-35"];
n27 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", span="35-35"];
n28 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", span="38-38"];
n29 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(ByteValue)", span="40-40"];
n30 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", span="38-38"];
n31 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", span="44-44"];
n32 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", label="Assert.Equal(SByteValue, value)", span="44-44"];
n33 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", span="44-44"];
n34 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", span="47-47"];
n35 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(SByteValue)", span="49-49"];
n36 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", span="47-47"];
n37 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)", span="53-53"];
n38 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)", label="Assert.Equal(CharValue, value)", span="53-53"];
n39 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)", span="53-53"];
n40 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", span="56-56"];
n41 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(CharValue)", span="58-58"];
n42 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", span="56-56"];
n43 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)", span="62-62"];
n44 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)", label="Assert.Equal(DecimalValue, value)", span="62-62"];
n45 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)", span="62-62"];
n46 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", span="65-65"];
n47 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(DecimalValue)", span="67-67"];
n48 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", span="65-65"];
n49 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", span="71-71"];
n50 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", label="Assert.Equal(DoubleValue, value)", span="71-71"];
n51 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", span="71-71"];
n52 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()", span="74-74"];
n53 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(DoubleValue)", span="76-76"];
n54 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()", span="74-74"];
n55 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", span="80-80"];
n56 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", label="Assert.Equal(SingleValue, value)", span="80-80"];
n57 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", span="80-80"];
n58 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()", span="83-83"];
n59 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(SingleValue)", span="85-85"];
n60 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()", span="83-83"];
n61 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", span="89-89"];
n62 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", label="Assert.Equal(Int32Value, value)", span="89-89"];
n63 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", span="89-89"];
n64 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", span="92-92"];
n65 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(Int32Value)", span="94-94"];
n66 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", span="92-92"];
n67 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", span="98-98"];
n68 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", label="Assert.Equal(UInt32Value, value)", span="98-98"];
n69 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", span="98-98"];
n70 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()", span="101-101"];
n71 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(UInt32Value)", span="103-103"];
n72 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()", span="101-101"];
n73 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)", span="107-107"];
n74 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)", label="Assert.Equal(Int64Value, value)", span="107-107"];
n75 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)", span="107-107"];
n76 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()", span="110-110"];
n77 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()", label="CreateAndPerform(Int64Value)", span="112-112"];
n78 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()", span="110-110"];
n79 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)", span="116-116"];
n80 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)", label="Assert.Equal(UInt64Value, value)", span="116-116"];
n81 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)", span="116-116"];
n82 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", span="119-119"];
n83 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(UInt64Value)", span="121-121"];
n84 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", span="119-119"];
n85 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", span="125-125"];
n86 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", label="Assert.Equal(Int16Value, value)", span="125-125"];
n87 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", span="125-125"];
n88 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", span="128-128"];
n89 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(Int16Value)", span="130-130"];
n90 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", span="128-128"];
n91 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", span="134-134"];
n92 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", label="Assert.Equal(UInt16Value, value)", span="134-134"];
n93 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", span="134-134"];
n94 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", span="137-137"];
n95 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(UInt16Value)", span="139-139"];
n96 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", span="137-137"];
n97 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", span="143-143"];
n98 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", label="Assert.Equal(StringValue, value)", span="143-143"];
n99 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", span="143-143"];
n100 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", span="146-146"];
n101 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(StringValue)", span="148-148"];
n102 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", span="146-146"];
n103 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", span="152-152"];
n104 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", label="Assert.Equal(TimeSpanValue, value)", span="152-152"];
n105 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", span="152-152"];
n106 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", span="155-155"];
n107 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(TimeSpanValue)", span="157-157"];
n108 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", span="155-155"];
n109 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", span="161-161"];
n110 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", label="Assert.Equal(ObjectValue, value)", span="161-161"];
n111 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", span="161-161"];
n112 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", span="164-164"];
n113 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", label="CreateAndPerform(ObjectValue)", span="166-166"];
n114 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", span="164-164"];
n115 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", span="170-170"];
n116 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", label="Assert.Equal(DateTimeOffsetValue, value)", span="170-170"];
n117 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", span="170-170"];
n118 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", span="173-173"];
n119 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", label="CreateAndPerform(DateTimeOffsetValue)", span="175-175"];
n120 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", span="173-173"];
n121 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", span="179-179"];
n122 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", label="Assert.Equal(CultureInfoValue, value)", span="179-179"];
n123 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", span="179-179"];
n124 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", span="182-182"];
n125 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", label="CreateAndPerform(CultureInfoValue)", span="184-184"];
n126 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", span="182-182"];
n127 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", span="188-188"];
n128 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", label="Assert.Equal(EnumValue, value)", span="188-188"];
n129 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", span="188-188"];
n130 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", span="191-191"];
n131 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", label="CreateAndPerform(EnumValue)", span="193-193"];
n132 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", span="191-191"];
n133 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", span="197-197"];
n134 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", label="Assert.Equal(GuidValue, value)", span="197-197"];
n135 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", span="197-197"];
n136 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", span="200-200"];
n137 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(GuidValue)", span="202-202"];
n138 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", span="200-200"];
n139 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", span="206-206"];
n140 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", label="Assert.Equal(UriValue, value)", span="206-206"];
n141 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", span="206-206"];
n142 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", span="209-209"];
n143 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(UriValue)", span="211-211"];
n144 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", span="209-209"];
n145 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", span="215-215"];
n146 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", label="Assert.Equal(NotNullNullableValue, value)", span="215-215"];
n147 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", span="215-215"];
n148 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", span="218-218"];
n149 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(NotNullNullableValue)", span="220-220"];
n150 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", span="218-218"];
n151 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", span="224-224"];
n152 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", label="Assert.Equal(NullNullableValue, value)", span="224-224"];
n153 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", span="224-224"];
n154 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", span="227-227"];
n155 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", label="CreateAndPerform(NullNullableValue)", span="229-229"];
n156 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", span="227-227"];
n157 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", span="233-233"];
n158 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", label="Assert.Equal(ArrayValue, value)", span="233-233"];
n159 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", span="233-233"];
n160 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", span="236-236"];
n161 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", label="CreateAndPerform(ArrayValue, true)", span="238-238"];
n162 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", span="236-236"];
n163 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", span="242-242"];
n164 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", label="Assert.Equal(ListValue, value)", span="242-242"];
n165 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", span="242-242"];
n166 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", span="245-245"];
n167 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", label="CreateAndPerform(ListValue, true)", span="247-247"];
n168 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", span="245-245"];
n169 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", span="255-255"];
n170 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", label="Assert.Equal(DictionaryValue, value)", span="255-255"];
n171 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", span="255-255"];
n172 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", span="258-258"];
n173 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", label="CreateAndPerform(DictionaryValue, true)", span="260-260"];
n174 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", span="258-258"];
n175 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", span="270-270"];
n176 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", label="Assert.Equal(CustomStructValue, value)", span="270-270"];
n177 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", span="270-270"];
n178 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", span="273-273"];
n179 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", label="CreateAndPerform(CustomStructValue, true)", span="275-275"];
n180 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", span="273-273"];
n181 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", span="284-284"];
n182 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", label="Assert.Equal(CustomClassValue.CreatedAt, value.CreatedAt)", span="284-284"];
n183 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", span="284-284"];
n184 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", span="287-287"];
n185 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", label="CreateAndPerform(CustomClassValue, true)", span="289-289"];
n186 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", span="287-287"];
n187 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label="var type = typeof(JobArgumentFacts)", span="294-294"];
n190 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label="!checkJsonOnly", span="299-299"];
n192 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label="serializationMethods.Add(new Tuple<string, Func<string>>(\r\n					''TypeDescriptor'',\r\n					() => converter.ConvertToInvariantString(argumentValue)))", span="302-304"];
n208 [cluster="lambda expression", label="converter.ConvertToInvariantString(argumentValue)", span="304-304"];
n193 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label="serializationMethods.Add(new Tuple<string, Func<string>>(\r\n				''JSON'',\r\n				() => JsonConvert.SerializeObject(argumentValue)))", span="307-309"];
n212 [cluster="lambda expression", label="JsonConvert.SerializeObject(argumentValue)", span="309-309"];
n188 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label="var methodInfo = type.GetMethod(''Method'', new[] { typeof(T) })", span="295-295"];
n195 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label="var job = new Job(type, methodInfo, new[] { method.Item2() })", span="313-313"];
n189 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label="var serializationMethods = new List<Tuple<string, Func<string>>>()", span="297-297"];
n198 [cluster="System.Type.GetMethod(string, System.Type[])", label="Entry System.Type.GetMethod(string, System.Type[])", span="0-0"];
n199 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n194 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label=serializationMethods, span="311-311"];
n191 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label="var converter = TypeDescriptor.GetConverter(typeof(T))", span="301-301"];
n200 [cluster="System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", label="Entry System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", span="0-0"];
n201 [cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0"];
n202 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n203 [cluster="Tuple<string, Func<string>>.cstr", label="Entry Tuple<string, Func<string>>.cstr", span=""];
n197 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", span="292-292"];
n196 [cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", label="job.Perform(_activator.Object, _token.Object)", span="314-314"];
n204 [cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="68-68"];
n205 [cluster="System.Func<TResult>.Invoke()", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
n206 [cluster="Unk.Perform", label="Entry Unk.Perform", span=""];
n207 [cluster="lambda expression", label="Entry lambda expression", span="304-304"];
n209 [cluster="lambda expression", label="Exit lambda expression", span="304-304"];
n210 [cluster="System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", label="Entry System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", span="0-0"];
n211 [cluster="lambda expression", label="Entry lambda expression", span="309-309"];
n213 [cluster="lambda expression", label="Exit lambda expression", span="309-309"];
n214 [cluster="Unk.SerializeObject", label="Entry Unk.SerializeObject", span=""];
d11 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", color=green, community=0, label="testRunner = null", prediction=0, span="42-42"];
d10 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", label="testRunner.OnFeatureEnd()", span="41-41"];
d12 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", label="Exit HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", span="39-39"];
d9 [cluster="HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", label="Entry HangFire.Tests.Server.SchedulePollerFeature.FeatureTearDown()", span="39-39"];
d13 [cluster="Unk.OnFeatureEnd", label="Entry Unk.OnFeatureEnd", span=""];
m0_29 [cluster="Unk.CollectScenarioErrors", file="SchedulePollerFacts.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m0_31 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''A job in the implicit \'Dequeued\' state moved to the \'Checked\' state'', new string[] {\r\n                        ''checkpoint-1-1''})", span="78-79"];
m0_25 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", span="49-49"];
m0_7 [cluster="System.DateTime.AddMinutes(double)", file="SchedulePollerFacts.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m0_10 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", span="25-25"];
m0_11 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerFacts.cs", label="Given(String.Format(''a job of the '{0}' type'', type))", span="27-27"];
m0_12 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerFacts.cs", label="And(''it's state is Scheduled'')", span="28-28"];
m0_13 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerFacts.cs", label="Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddMinutes(-1)))", span="30-33"];
m0_14 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.SchedulePollerSteps.GivenAScheduleJobOfType(string)", span="25-25"];
m0_32 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="81-81"];
m0_37 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", span="76-76"];
m0_15 [cluster="string.Format(string, object)", file="SchedulePollerFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_65 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="152-152"];
m0_72 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="168-168"];
m0_71 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="166-166"];
m0_67 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="158-158"];
m0_76 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="this.ScenarioCleanup()", span="176-176"];
m0_73 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="170-170"];
m0_68 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="160-160"];
m0_70 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.And(''it was fetched a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="164-164"];
m0_66 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job by the \'checked\' flag in the \'Fetched\' state should not be re-queue'' +\r\n                    ''d'', new string[] {\r\n                        ''checkpoint-2''})", span="154-156"];
m0_75 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.And(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="174-174"];
m0_74 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="172-172"];
m0_69 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="162-162"];
m0_77 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobByTheCheckedFlagInTheFetchedStateShouldNotBeRe_Queued()", span="152-152"];
m0_34 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m0_35 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", color=green, community=0, file="SchedulePollerFacts.cs", label="testRunner.Then(''it marks the job as \'checked\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=1, span="87-87"];
m0_36 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs", label="this.ScenarioCleanup()", span="89-89"];
m0_53 [cluster="Unk.And", file="SchedulePollerFacts.cs", label="Entry Unk.And", span=""];
m0_6 [cluster="Unk.And", file="SchedulePollerFacts.cs", label="Entry Unk.And", span=""];
m0_26 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.ScenarioCleanup()", span="66-66"];
m0_112 [cluster="Unk.But", file="SchedulePollerFacts.cs", label="Entry Unk.But", span=""];
m0_8 [cluster="HangFire.JobHelper.ToTimestamp(System.DateTime)", file="SchedulePollerFacts.cs", label="Entry HangFire.JobHelper.ToTimestamp(System.DateTime)", span="52-52"];
m0_78 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="184-184"];
m0_84 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="197-197"];
m0_83 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="195-195"];
m0_80 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="189-189"];
m0_88 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="this.ScenarioCleanup()", span="205-205"];
m0_85 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="199-199"];
m0_81 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="191-191"];
m0_82 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="193-193"];
m0_79 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out jobs in the \'Fetched\' state should be re-queued'', new string[] {\r\n                        ''checkpoint-2''})", span="186-187"];
m0_87 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.And(''the job does not have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="203-203"];
m0_86 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="201-201"];
m0_89 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobsInTheFetchedStateShouldBeRe_Queued()", span="184-184"];
m0_27 [cluster="System.TimeSpan.FromSeconds(double)", file="SchedulePollerFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m0_28 [cluster="HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", file="SchedulePollerFacts.cs", label="Entry HangFire.Server.SchedulePoller.EnqueueNextScheduledJob()", span="29-29"];
m0_22 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", span="49-49"];
m0_23 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerFacts.cs", label="var poller = new SchedulePoller(RedisFactory.BasicManager, TimeSpan.FromSeconds(15))", span="51-51"];
m0_24 [cluster="HangFire.Tests.SchedulePollerSteps.WhenThePollerRuns()", file="SchedulePollerFacts.cs", label="_pollerResult = poller.EnqueueNextScheduledJob()", span="53-53"];
m0_9 [cluster="Unk.AddItemToSortedSet", file="SchedulePollerFacts.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m0_33 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.AJobInTheImplicitDequeuedStateMovedToTheCheckedState()", file="SchedulePollerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="83-83"];
m0_41 [cluster="Unk.Then", file="SchedulePollerFacts.cs", label="Entry Unk.Then", span=""];
m0_90 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="214-214"];
m0_97 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs", label="testRunner.Then(''the job moved to the Enqueued state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="230-230"];
m0_96 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="228-228"];
m0_92 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="220-220"];
m0_99 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs", label="this.ScenarioCleanup()", span="234-234"];
m0_98 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="232-232"];
m0_93 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="222-222"];
m0_95 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="226-226"];
m0_91 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job\'s state is changed to the Enqueued when the job is being timed out after proc'' +\r\n                    ''eeding to the Processing state'', new string[] {\r\n                        ''checkpoint-3''})", span="216-218"];
m0_94 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs", label="testRunner.And(''it\'s state is Processing'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="224-224"];
m0_100 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobSStateIsChangedToTheEnqueuedWhenTheJobIsBeingTimedOutAfterProceedingToTheProcessingState()", span="214-214"];
m0_38 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SchedulePollerFacts.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m0_39 [cluster="Unk.Given", file="SchedulePollerFacts.cs", label="Entry Unk.Given", span=""];
m0_40 [cluster="Unk.When", file="SchedulePollerFacts.cs", label="Entry Unk.When", span=""];
m0_113 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", span="268-268"];
m0_119 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="280-280"];
m0_118 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="278-278"];
m0_115 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="272-272"];
m0_120 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs", label="this.ScenarioCleanup()", span="282-282"];
m0_117 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="276-276"];
m0_114 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Job is being enqueued on it\'s actual queue after timing out'', ((string[])(null)))", span="270-270"];
m0_116 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs", label="testRunner.And(''a dequeued job from the \'test\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="274-274"];
m0_121 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.JobIsBeingEnqueuedOnItSActualQueueAfterTimingOut()", span="268-268"];
m0_122 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="290-290"];
m0_128 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="testRunner.Then(''the job moved to the Failed state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="303-303"];
m0_127 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="301-301"];
m0_124 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="295-295"];
m0_130 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="this.ScenarioCleanup()", span="307-307"];
m0_129 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="305-305"];
m0_125 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="297-297"];
m0_126 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="299-299"];
m0_123 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When the server could not find the job\'s type, the job is moved to the Failed sta'' +\r\n                    ''te'', ((string[])(null)))", span="292-293"];
m0_131 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.WhenTheServerCouldNotFindTheJobSTypeTheJobIsMovedToTheFailedState()", span="290-290"];
m0_101 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="242-242"];
m0_108 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="257-257"];
m0_107 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="255-255"];
m0_103 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="247-247"];
m0_110 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs", label="this.ScenarioCleanup()", span="261-261"];
m0_109 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs", label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="259-259"];
m0_104 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="249-249"];
m0_106 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="253-253"];
m0_102 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed out job in the Succeeded state does not move to the Enqueued state'', new string[] {\r\n                        ''checkpoint-4''})", span="244-245"];
m0_105 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs", label="testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="251-251"];
m0_111 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedOutJobInTheSucceededStateDoesNotMoveToTheEnqueuedState()", span="242-242"];
m0_42 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs", label="HangFire.Tests.SchedulePollerSteps", span=""];
m0_48 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.Then(''the dequeued jobs list still contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="110-110"];
m0_47 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="108-108"];
m0_44 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="102-102"];
m0_51 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs", label="this.ScenarioCleanup()", span="116-116"];
m0_49 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.And(''the queue does not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="112-112"];
m0_45 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="104-104"];
m0_46 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.And(''it was checked a millisecond ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="106-106"];
m0_43 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Non-timed out job in the \'Checked\' state should not be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="99-100"];
m0_50 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.And(''the job has the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="114-114"];
m0_52 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.Non_TimedOutJobInTheCheckedStateShouldNotBeRequeued()", span="97-97"];
m0_54 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="124-124"];
m0_60 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.Then(''the queue contains the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="137-137"];
m0_59 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="135-135"];
m0_56 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="129-129"];
m0_63 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs", label="this.ScenarioCleanup()", span="143-143"];
m0_61 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.And(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="139-139"];
m0_57 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.Given(''a dequeued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="131-131"];
m0_58 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.And(''it was checked a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="133-133"];
m0_55 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Timed job in the \'Checked\' state should be requeued'', new string[] {\r\n                        ''checkpoint-1-2''})", span="126-127"];
m0_62 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs", label="testRunner.And(''the job does not have the \'checked\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="141-141"];
m0_64 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.TimedJobInTheCheckedStateShouldBeRequeued()", span="124-124"];
m0_21 [cluster="System.DateTime.AddHours(double)", file="SchedulePollerFacts.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m0_16 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", span="37-37"];
m0_17 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerFacts.cs", label="Given(''a job'')", span="39-39"];
m0_18 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerFacts.cs", label="And(''it's state is Scheduled'')", span="40-40"];
m0_19 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerFacts.cs", label="Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddHours(1)))", span="42-45"];
m0_20 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.SchedulePollerSteps.GivenAFutureJob()", span="37-37"];
m0_5 [cluster="Unk.Given", file="SchedulePollerFacts.cs", label="Entry Unk.Given", span=""];
m0_0 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", span="13-13"];
m0_1 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerFacts.cs", label="Given(''a job'')", span="15-15"];
m0_2 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerFacts.cs", label="And(''it's state is Scheduled'')", span="16-16"];
m0_3 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerFacts.cs", label="Redis.Client.AddItemToSortedSet(\r\n                ''hangfire:schedule'',\r\n                JobSteps.DefaultJobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow.AddMinutes(-1)))", span="18-21"];
m0_4 [cluster="HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.SchedulePollerSteps.GivenAScheduledJob()", span="13-13"];
m0_132 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="Entry HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="314-314"];
m0_139 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="testRunner.Then(''the job remains to be in the Succeeded state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="328-328"];
m0_138 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="testRunner.When(''the watcher runs'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="326-326"];
m0_134 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="this.ScenarioSetup(scenarioInfo)", span="318-318"];
m0_141 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="this.ScenarioCleanup()", span="332-332"];
m0_140 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="testRunner.But(''the dequeued jobs list does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="330-330"];
m0_135 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="testRunner.Given(''a dequeued job of the \'NonExisting\' type'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="320-320"];
m0_137 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="testRunner.And(''it was fetched a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="324-324"];
m0_133 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Succeeded job of non-existing type will not be moved to the failed state'', ((string[])(null)))", span="316-316"];
m0_136 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="testRunner.And(''it\'s state is Succeeded'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="322-322"];
m0_142 [cluster="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", file="SchedulePollerFacts.cs", label="Exit HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature.SucceededJobOfNon_ExistingTypeWillNotBeMovedToTheFailedState()", span="314-314"];
m0_143 [file="SchedulePollerFacts.cs", label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", span=""];
m2_20 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticCreate_ShouldCreateAJobInTheGivenState()", span="32-32"];
m2_191 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", span="192-192"];
m2_192 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="ServerHeartbeatFacts.cs", label="_client.Object.Requeue(JobId)", span="194-194"];
m2_193 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="ServerHeartbeatFacts.cs", label="_client.Verify(x => x.ChangeState(JobId, It.IsAny<EnqueuedState>(), null))", span="196-196"];
m2_194 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ChangesTheStateOfAJob_ToEnqueued()", span="192-192"];
m2_153 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", span="144-144"];
m2_154 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="ServerHeartbeatFacts.cs", label="_client.Object.ChangeState(''job-id'', _state.Object)", span="146-146"];
m2_155 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="ServerHeartbeatFacts.cs", label="_client.Verify(x => x.ChangeState(''job-id'', _state.Object, null))", span="148-148"];
m2_156 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_CallsItsOverload()", span="144-144"];
m2_5 [cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ServerHeartbeatFacts.cs", label="Exit HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", span="14-14"];
m2_32 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object))", span="42-44"];
m2_160 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", span="152-152"];
m2_161 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Delete(null, JobId))", span="154-155"];
m2_162 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Assert.Equal(''client'', exception.ParamName)", span="157-157"];
m2_163 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ThrowsAnException_WhenClientIsNull()", span="152-152"];
m2_128 [cluster="Hangfire.BackgroundJobClientExtensions.Schedule<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Schedule<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>, System.TimeSpan)", span="85-85"];
m2_6 [cluster="HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)", file="ServerHeartbeatFacts.cs", label="Entry HangFire.States.StateContext.StateContext(string, HangFire.Common.Job)", span="23-23"];
m2_7 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="ServerHeartbeatFacts.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="119-119"];
m2_8 [cluster="Mock<IStorageConnection>.cstr", file="ServerHeartbeatFacts.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m2_9 [cluster="HangFire.States.EnqueuedState.EnqueuedState(string)", file="ServerHeartbeatFacts.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState(string)", span="36-36"];
m2_19 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="207-207"];
m2_52 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="58-58"];
m2_53 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", color=green, community=0, file="ServerHeartbeatFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod()))", prediction=2, span="60-62"];
m2_54 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Assert.Equal(''client'', exception.ParamName)", span="64-64"];
m2_55 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ThrowsAnException_WhenClientIsNull()", span="58-58"];
m2_199 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", span="200-200"];
m2_200 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="ServerHeartbeatFacts.cs", label="_client.Object.Requeue(JobId, FailedState.StateName)", span="202-202"];
m2_201 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="ServerHeartbeatFacts.cs", label="_client.Verify(x => x.ChangeState(JobId, It.IsAny<EnqueuedState>(), FailedState.StateName))", span="204-204"];
m2_202 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_WithFromState_ChangesTheStateOfAJob_ToEnqueued_FromTheGivenState()", span="200-200"];
m2_74 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="76-76"];
m2_75 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod()))", span="78-80"];
m2_76 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Assert.Equal(''client'', exception.ParamName)", span="82-82"];
m2_77 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ThrowsAnException_WhenClientIsNull()", span="76-76"];
m2_190 [cluster="Hangfire.BackgroundJobClientExtensions.Requeue(Hangfire.IBackgroundJobClient, string, string)", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Requeue(Hangfire.IBackgroundJobClient, string, string)", span="227-227"];
m2_0 [cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ServerHeartbeatFacts.cs", label="Entry HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", span="14-14"];
m2_1 [cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ServerHeartbeatFacts.cs", label="_stateContext = new StateContext(''id'', Job.FromExpression(() => Sample()))", span="16-16"];
m2_2 [cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ServerHeartbeatFacts.cs", label="_connection = new Mock<IStorageConnection>()", span="17-17"];
m2_3 [cluster="HangFire.Core.Tests.QueueAttributeFacts.QueueAttributeFacts()", file="ServerHeartbeatFacts.cs", label="var enqueuedState = new EnqueuedState(''queue'')", span="18-18"];
m2_21 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", file="ServerHeartbeatFacts.cs", label="Entry HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", span="31-31"];
m2_22 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", file="ServerHeartbeatFacts.cs", label="var filter = new QueueAttribute(''override'')", span="33-33"];
m2_23 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_OverridesTheQueue_OfTheCandidateState()", file="ServerHeartbeatFacts.cs", label="filter.OnStateElection(_context)", span="34-34"];
m2_167 [cluster="Hangfire.BackgroundJobClientExtensions.Delete(Hangfire.IBackgroundJobClient, string)", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Delete(Hangfire.IBackgroundJobClient, string)", span="166-166"];
m2_195 [cluster="Unk.Requeue", file="ServerHeartbeatFacts.cs", label="Entry Unk.Requeue", span=""];
m2_33 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Assert.Equal(''client'', exception.ParamName)", span="46-46"];
m2_31 [cluster="HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_DoesNotDoAnything_IfStateIsNotEnqueuedState()", file="ServerHeartbeatFacts.cs", label="Exit HangFire.Core.Tests.QueueAttributeFacts.OnStateElection_DoesNotDoAnything_IfStateIsNotEnqueuedState()", span="40-40"];
m2_34 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="45-45"];
m2_27 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="34-34"];
m2_28 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="36-36"];
m2_29 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="36-36"];
m2_30 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="36-36"];
m2_103 [cluster="Hangfire.BackgroundJobClientExtensions.Schedule(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Schedule(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>, System.TimeSpan)", span="68-68"];
m2_10 [cluster="ElectStateContext.cstr", file="ServerHeartbeatFacts.cs", label="Entry ElectStateContext.cstr", span=""];
m2_63 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="68-68"];
m2_64 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerHeartbeatFacts.cs", label="_client.Object.Enqueue(() => StaticMethod())", span="70-70"];
m2_65 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerHeartbeatFacts.cs", label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="72-72"];
m2_66 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticEnqueue_ShouldCreateAJobInTheEnqueueState()", span="68-68"];
m2_107 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="104-104"];
m2_108 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs", label="_client.Object.Schedule(() => StaticMethod(), TimeSpan.FromDays(1))", span="106-106"];
m2_109 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs", label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="108-110"];
m2_110 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ShouldCreateAJobInTheScheduledState()", span="104-104"];
m2_95 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="94-94"];
m2_96 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1)))", span="96-98"];
m2_97 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Assert.Equal(''client'', exception.ParamName)", span="100-100"];
m2_98 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticSchedule_ThrowsAnException_WhenClientIsNull()", span="94-94"];
m2_81 [cluster="Hangfire.BackgroundJobClientExtensions.Enqueue<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Enqueue<T>(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action<T>>)", span="53-53"];
m2_41 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="211-211"];
m2_207 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceMethod()", span="211-211"];
m2_176 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", span="172-172"];
m2_177 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="ServerHeartbeatFacts.cs", label="_client.Object.Delete(JobId, FailedState.StateName)", span="174-174"];
m2_178 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="ServerHeartbeatFacts.cs", label="_client.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                FailedState.StateName))", span="176-179"];
m2_179 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_WithFromState_ChangesTheStateOfAJob_ToDeletedWithFromStateValue()", span="172-172"];
m2_206 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.StaticMethod()", span="207-207"];
m2_102 [cluster="System.TimeSpan.FromDays(double)", file="ServerHeartbeatFacts.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m2_67 [cluster="Unk.Enqueue", file="ServerHeartbeatFacts.cs", label="Entry Unk.Enqueue", span=""];
m2_24 [cluster="Unk.Verify", file="ServerHeartbeatFacts.cs", label="Entry Unk.Verify", span=""];
m2_25 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="34-34"];
m2_26 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="StaticMethod()", span="34-34"];
m2_152 [cluster="Unk.ChangeState", file="ServerHeartbeatFacts.cs", label="Entry Unk.ChangeState", span=""];
m2_132 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="124-124"];
m2_133 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs", label="_client.Object.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="126-127"];
m2_134 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs", label="_client.Verify(x => x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow)))", span="129-131"];
m2_135 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ShouldCreateAJobInTheScheduledState()", span="124-124"];
m2_168 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", span="161-161"];
m2_169 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="ServerHeartbeatFacts.cs", label="_client.Object.Delete(JobId)", span="163-163"];
m2_170 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="ServerHeartbeatFacts.cs", label="_client.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                null))", span="165-168"];
m2_171 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Delete_ChangesTheStateOfAJob_ToDeleted()", span="161-161"];
m2_14 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="25-26"];
m2_37 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="43-44"];
m2_85 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="86-86"];
m2_86 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerHeartbeatFacts.cs", label="_client.Object.Enqueue<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod())", span="88-88"];
m2_87 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerHeartbeatFacts.cs", label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="90-90"];
m2_88 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceEnqueue_ShouldCreateAJobInTheEnqueuedState()", span="86-86"];
m2_59 [cluster="Hangfire.BackgroundJobClientExtensions.Enqueue(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.BackgroundJobClientExtensions.Enqueue(Hangfire.IBackgroundJobClient, System.Linq.Expressions.Expression<System.Action>)", span="35-35"];
m2_129 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="118-118"];
m2_11 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="16-16"];
m2_12 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="25-26"];
m2_13 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="BackgroundJobClientExtensions.Create(\r\n                    null, () => StaticMethod(), _state.Object)", span="25-26"];
m2_35 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="43-44"];
m2_36 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="BackgroundJobClientExtensions.Create<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), _state.Object)", span="43-44"];
m2_56 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="61-62"];
m2_50 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.Create(It.IsNotNull<Job>(), _state.Object)", span="54-54"];
m2_72 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="72-72"];
m2_93 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="90-90"];
m2_116 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="108-110"];
m2_140 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.Create(\r\n                It.IsNotNull<Job>(),\r\n                It.Is<ScheduledState>(state => state.EnqueueAt > DateTime.UtcNow))", span="129-131"];
m2_174 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                null)", span="165-168"];
m2_181 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<DeletedState>(),\r\n                FailedState.StateName)", span="176-179"];
m2_197 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.ChangeState(JobId, It.IsAny<EnqueuedState>(), null)", span="196-196"];
m2_204 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.ChangeState(JobId, It.IsAny<EnqueuedState>(), FailedState.StateName)", span="204-204"];
m2_58 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="61-62"];
m2_57 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="BackgroundJobClientExtensions.Enqueue(\r\n                    null, () => StaticMethod())", span="61-62"];
m2_38 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="HangFire.Core.Tests.QueueAttributeFacts", span=""];
m2_46 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="52-52"];
m2_49 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="54-54"];
m2_51 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="54-54"];
m2_71 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="72-72"];
m2_73 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="72-72"];
m2_78 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="79-80"];
m2_89 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="88-88"];
m2_92 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="90-90"];
m2_94 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="90-90"];
m2_99 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="97-98"];
m2_115 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="108-110"];
m2_117 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="108-110"];
m2_118 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="110-110"];
m2_125 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="117-118"];
m2_136 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="127-127"];
m2_139 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="129-131"];
m2_141 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="129-131"];
m2_142 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="131-131"];
m2_149 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="138-138"];
m2_164 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="155-155"];
m2_173 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="165-168"];
m2_175 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="165-168"];
m2_180 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="176-179"];
m2_182 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="176-179"];
m2_187 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="186-186"];
m2_196 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="196-196"];
m2_198 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="196-196"];
m2_203 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="204-204"];
m2_205 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="204-204"];
m2_60 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="62-62"];
m2_150 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="BackgroundJobClientExtensions.ChangeState(null, ''job-id'', _state.Object)", span="138-138"];
m2_158 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.ChangeState(''job-id'', _state.Object, null)", span="148-148"];
m2_40 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label=context, span=""];
m2_39 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label=filter, span=""];
m2_48 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="52-52"];
m2_47 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.InstanceMethod()", span="52-52"];
m2_80 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="79-80"];
m2_79 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="BackgroundJobClientExtensions.Enqueue<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod())", span="79-80"];
m2_91 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="88-88"];
m2_90 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.InstanceMethod()", span="88-88"];
m2_101 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="97-98"];
m2_100 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="BackgroundJobClientExtensions.Schedule(\r\n                    null, () => StaticMethod(), TimeSpan.FromDays(1))", span="97-98"];
m2_120 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="110-110"];
m2_119 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="state.EnqueueAt > DateTime.UtcNow", span="110-110"];
m2_127 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="117-118"];
m2_126 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1))", span="117-118"];
m2_138 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="127-127"];
m2_137 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.InstanceMethod()", span="127-127"];
m2_144 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="131-131"];
m2_143 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="state.EnqueueAt > DateTime.UtcNow", span="131-131"];
m2_151 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="138-138"];
m2_166 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="155-155"];
m2_165 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="BackgroundJobClientExtensions.Delete(null, JobId)", span="155-155"];
m2_189 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="186-186"];
m2_188 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="BackgroundJobClientExtensions.Requeue(null, JobId, FailedState.StateName)", span="186-186"];
m2_62 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="62-62"];
m2_61 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="StaticMethod()", span="62-62"];
m2_16 [cluster="HangFire.Core.Tests.QueueAttributeFacts.Ctor_CorrectlySets_AllPropertyValues()", file="ServerHeartbeatFacts.cs", label="var filter = new QueueAttribute(''hello'')", span="26-26"];
m2_68 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="70-70"];
m2_112 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="106-106"];
m2_157 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="148-148"];
m2_159 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="148-148"];
m2_82 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="80-80"];
m2_104 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Entry lambda expression", span="98-98"];
m2_18 [cluster="HangFire.Core.Tests.QueueAttributeFacts.Ctor_CorrectlySets_AllPropertyValues()", file="ServerHeartbeatFacts.cs", label="Exit HangFire.Core.Tests.QueueAttributeFacts.Ctor_CorrectlySets_AllPropertyValues()", span="24-24"];
m2_17 [cluster="HangFire.Core.Tests.QueueAttributeFacts.Ctor_CorrectlySets_AllPropertyValues()", file="ServerHeartbeatFacts.cs", label="Assert.Equal(''hello'', filter.Queue)", span="27-27"];
m2_70 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="70-70"];
m2_69 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="StaticMethod()", span="70-70"];
m2_114 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="106-106"];
m2_113 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="StaticMethod()", span="106-106"];
m2_83 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.InstanceMethod()", span="80-80"];
m2_130 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="x.InstanceMethod()", span="118-118"];
m2_84 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="80-80"];
m2_106 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="98-98"];
m2_105 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="StaticMethod()", span="98-98"];
m2_131 [cluster="lambda expression", file="ServerHeartbeatFacts.cs", label="Exit lambda expression", span="118-118"];
m2_15 [cluster="Unk.Create", file="ServerHeartbeatFacts.cs", label="Entry Unk.Create", span=""];
m2_42 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="50-50"];
m2_43 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerHeartbeatFacts.cs", label="_client.Object.Create<BackgroundJobClientExtensionsFacts>(x => x.InstanceMethod(), _state.Object)", span="52-52"];
m2_44 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerHeartbeatFacts.cs", label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), _state.Object))", span="54-54"];
m2_45 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceCreate_ShouldCreateAJobInTheGivenState()", span="50-50"];
m2_172 [cluster="Unk.Delete", file="ServerHeartbeatFacts.cs", label="Entry Unk.Delete", span=""];
m2_145 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", span="135-135"];
m2_146 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.ChangeState(null, ''job-id'', _state.Object))", span="137-138"];
m2_147 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Assert.Equal(''client'', exception.ParamName)", span="140-140"];
m2_148 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.ChangeState_WithoutFromState_ThrowsAnException_WhenClientIsNull()", span="135-135"];
m2_121 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="114-114"];
m2_122 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Schedule<BackgroundJobClientExtensionsFacts>(\r\n                    null, x => x.InstanceMethod(), TimeSpan.FromDays(1)))", span="116-118"];
m2_123 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Assert.Equal(''client'', exception.ParamName)", span="120-120"];
m2_124 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.InstanceSchedule_ThrowsAnException_WhenClientIsNull()", span="114-114"];
m2_111 [cluster="Unk.Schedule", file="ServerHeartbeatFacts.cs", label="Entry Unk.Schedule", span=""];
m2_183 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Entry Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", span="183-183"];
m2_184 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => BackgroundJobClientExtensions.Requeue(null, JobId, FailedState.StateName))", span="185-186"];
m2_185 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Assert.Equal(''client'', exception.ParamName)", span="188-188"];
m2_186 [cluster="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", file="ServerHeartbeatFacts.cs", label="Exit Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts.Requeue_ThrowsAnException_WhenClientIsNull()", span="183-183"];
m2_208 [file="ServerHeartbeatFacts.cs", label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", span=""];
m3_8 [cluster="Mock<IJobPerformanceProcess>.cstr", file="WorkerManagerFacts.cs", label="Entry Mock<IJobPerformanceProcess>.cstr", span=""];
m3_117 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="231-231"];
m3_118 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs", label="serverId == null", span="233-233"];
m3_120 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs", label="context == null", span="234-234"];
m3_122 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="236-241"];
m3_123 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="243-249"];
m3_119 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''serverId'');", span="233-233"];
m3_121 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''context'');", span="234-234"];
m3_124 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="231-231"];
m3_10 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="WorkerManagerFacts.cs", label="_connection.Dispose()", span="48-48"];
m3_102 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="209-209"];
m3_103 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs", label="id == null", span="211-211"];
m3_105 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs", label="name == null", span="212-212"];
m3_107 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="214-217"];
m3_104 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''id'');", span="211-211"];
m3_106 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''name'');", span="212-212"];
m3_108 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="209-209"];
m3_45 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs", label="parameters == null", span="91-91"];
m3_125 [cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="WorkerManagerFacts.cs", label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m3_85 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="93-93"];
m3_86 [cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs", label="HangFire.Core.Tests.Server.WorkerManagerFacts", span=""];
m3_89 [cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs", label="var sqlState = _connection.Query<SqlState>(sql, new { jobId = jobId }).SingleOrDefault()", span="181-181"];
m3_87 [cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''jobId'');", span="173-173"];
m3_88 [cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs", label="string sql = @''\r\nselect s.Name, s.Reason, s.Data\r\nfrom HangFire.State s\r\ninner join HangFire.Job j on j.StateId = s.Id\r\nwhere j.Id = @jobId''", span="175-179"];
m3_90 [cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs", label="sqlState == null", span="182-182"];
m3_92 [cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs", label="return new StateData\r\n            {\r\n                Name = sqlState.Name,\r\n                Reason = sqlState.Reason,\r\n                Data = JobHelper.FromJson<Dictionary<string, string>>(sqlState.Data)\r\n            };", span="187-192"];
m3_91 [cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs", label="return null;", span="184-184"];
m3_93 [cluster="HangFire.SqlServer.SqlServerConnection.GetStateData(string)", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetStateData(string)", span="171-171"];
m3_47 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="93-96"];
m3_48 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", color=green, community=0, file="WorkerManagerFacts.cs", label="var invocationData = InvocationData.Serialize(job)", prediction=3, span="98-98"];
m3_49 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs", label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = createdAt,\r\n                    expireAt = createdAt.Add(expireIn)\r\n                }).Single().ToString()", span="100-108"];
m3_50 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", color=green, community=0, file="WorkerManagerFacts.cs", label="parameters.Count > 0", prediction=4, span="110-110"];
m3_51 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs", label="var parameterArray = new object[parameters.Count]", span="112-112"];
m3_70 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="WorkerManagerFacts.cs", label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="141-142"];
m3_21 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="_workerSupervisors[context.WorkerNumber - 1].Object", span="38-38"];
m3_74 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="WorkerManagerFacts.cs", label="invocationData.Arguments = jobData.Arguments", span="148-148"];
m3_75 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", color=green, community=0, file="WorkerManagerFacts.cs", label="Job job = null", prediction=5, span="150-150"];
m3_76 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="WorkerManagerFacts.cs", label="JobLoadException loadException = null", span="151-151"];
m3_77 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", color=green, community=0, file="WorkerManagerFacts.cs", label="job = invocationData.Deserialize()", prediction=6, span="155-155"];
m3_78 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)", file="WorkerManagerFacts.cs", label=JobLoadException, span="157-157"];
m3_17 [cluster="HangFire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="WorkerManagerFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="56-56"];
m3_18 [cluster="Unk.>", file="WorkerManagerFacts.cs", label="Entry Unk.>", span=""];
m3_19 [cluster="Unk.CreateWorkerSupervisor", file="WorkerManagerFacts.cs", label="Entry Unk.CreateWorkerSupervisor", span=""];
m3_11 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Dispose()", span="46-46"];
m3_12 [cluster="Unk.Dispose", file="WorkerManagerFacts.cs", label="Entry Unk.Dispose", span=""];
m3_0 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35"];
m3_1 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs", label="connection == null", span="39-39"];
m3_2 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''connection'');", span="39-39"];
m3_3 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs", label="queueProviders == null", span="40-40"];
m3_4 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''queueProviders'');", span="40-40"];
m3_5 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs", label="_connection = connection", span="42-42"];
m3_143 [cluster="System.TimeSpan.Negate()", file="WorkerManagerFacts.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m3_62 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="Entry HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", span="79-79"];
m3_66 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", span="79-79"];
m3_67 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="83-83"];
m3_68 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="x.Stop()", span="83-83"];
m3_69 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="83-83"];
m3_71 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="84-84"];
m3_73 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="84-84"];
m3_80 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="x.Dispose()", span="92-92"];
m3_72 [cluster="lambda expression", color=green, community=0, file="WorkerManagerFacts.cs", label="x.Stop()", prediction=7, span="84-84"];
m3_79 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="92-92"];
m3_81 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="92-92"];
m3_23 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="WorkerManagerFacts.cs", label="queues == null || queues.Length == 0", span="66-66"];
m3_24 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''queues'');", span="66-66"];
m3_13 [cluster="Unk.Setup", file="WorkerManagerFacts.cs", label="Entry Unk.Setup", span=""];
m3_14 [cluster="Unk.Returns", file="WorkerManagerFacts.cs", label="Entry Unk.Returns", span=""];
m3_15 [cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="51-51"];
m3_16 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="x.CreateWorkerSupervisor(It.IsNotNull<WorkerContext>())", span="37-37"];
m3_116 [cluster="System.ArgumentException.ArgumentException(string)", file="WorkerManagerFacts.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m3_35 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="52-53"];
m3_33 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenWorkerCountLessOrEqualToZero()", file="WorkerManagerFacts.cs", label="Exit HangFire.Core.Tests.Server.WorkerManagerFacts.Ctor_ThrowsAnException_WhenWorkerCountLessOrEqualToZero()", span="49-49"];
m3_30 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="64-64"];
m3_31 [cluster="Unk.Select", file="WorkerManagerFacts.cs", label="Entry Unk.Select", span=""];
m3_32 [cluster="Unk.Distinct", file="WorkerManagerFacts.cs", label="Entry Unk.Distinct", span=""];
m3_34 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="WorkerManagerFacts.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m3_20 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="38-38"];
m3_64 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", file="WorkerManagerFacts.cs", label="_workerSupervisors[0].Verify(x => x.Stop())", span="83-83"];
m3_61 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="75-75"];
m3_46 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''parameters'');", span="91-91"];
m3_94 [cluster="HangFire.Storage.StateData.StateData()", file="WorkerManagerFacts.cs", label="Entry HangFire.Storage.StateData.StateData()", span="21-21"];
m3_22 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="38-38"];
m3_27 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="new WorkerManager(null, WorkerCount)", span="45-45"];
m3_26 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="45-45"];
m3_28 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="45-45"];
m3_136 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="WorkerManagerFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="270-270"];
m3_137 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="WorkerManagerFacts.cs", label="timeOut.Duration() != timeOut", span="272-272"];
m3_138 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="WorkerManagerFacts.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="274-274"];
m3_139 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="WorkerManagerFacts.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="277-279"];
m3_140 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="270-270"];
m3_82 [cluster="Unk.SingleOrDefault", file="WorkerManagerFacts.cs", label="Entry Unk.SingleOrDefault", span=""];
m3_141 [cluster="System.TimeSpan.Duration()", file="WorkerManagerFacts.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m3_41 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerSupervisor_CreatesAWorkerSupervisorWithGivenParameters()", file="WorkerManagerFacts.cs", label="var worker = manager.CreateWorkerSupervisor(context)", span="64-64"];
m3_42 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.CreateWorkerSupervisor_CreatesAWorkerSupervisorWithGivenParameters()", file="WorkerManagerFacts.cs", label="Assert.NotNull(worker)", span="66-66"];
m3_53 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="WorkerManagerFacts.cs", label=parameters, span="114-114"];
m3_54 [cluster="Unk.Verify", file="WorkerManagerFacts.cs", label="Entry Unk.Verify", span=""];
m3_57 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="74-74"];
m3_52 [cluster="System.Threading.CancellationToken.CancellationToken(bool)", file="WorkerManagerFacts.cs", label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0"];
m3_56 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="x.Start()", span="74-74"];
m3_55 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="74-74"];
m3_58 [cluster="Unk.Start", file="WorkerManagerFacts.cs", label="Entry Unk.Start", span=""];
m3_9 [cluster="Mock<JobActivator>.cstr", file="WorkerManagerFacts.cs", label="Entry Mock<JobActivator>.cstr", span=""];
m3_38 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Entry lambda expression", span="69-69"];
m3_40 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="69-69"];
m3_37 [cluster="lambda expression", file="WorkerManagerFacts.cs", label="Exit lambda expression", span="52-53"];
m3_59 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="WorkerManagerFacts.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m3_60 [cluster="HangFire.Common.JobHelper.ToJson(object)", color=green, community=0, file="WorkerManagerFacts.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", prediction=8, span="23-23"];
m3_83 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="WorkerManagerFacts.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m3_84 [cluster="HangFire.Storage.JobData.JobData()", color=green, community=0, file="WorkerManagerFacts.cs", label="Entry HangFire.Storage.JobData.JobData()", prediction=9, span="21-21"];
m3_36 [cluster="Unk.GetJobQueue", file="WorkerManagerFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m3_95 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="195-195"];
m3_96 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs", label="id == null", span="197-197"];
m3_98 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs", label="name == null", span="198-198"];
m3_100 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="200-206"];
m3_97 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''id'');", span="197-197"];
m3_99 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''name'');", span="198-198"];
m3_101 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="195-195"];
m3_109 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="220-220"];
m3_110 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs", label="key == null", span="222-222"];
m3_112 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs", label="toScore < fromScore", span="223-223"];
m3_114 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="225-228"];
m3_111 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''key'');", span="222-222"];
m3_113 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="223-223"];
m3_115 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="220-220"];
m3_63 [cluster="HangFire.Core.Tests.Server.WorkerManagerFacts.Execute_CallsStopMethodOnAllWorkers()", color=green, community=0, file="WorkerManagerFacts.cs", label="_manager.Object.Execute(new CancellationToken(true))", prediction=4, span="81-81"];
m3_142 [cluster="System.ArgumentException.ArgumentException(string, string)", file="WorkerManagerFacts.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m3_65 [cluster="Unk.Execute", color=green, community=0, file="WorkerManagerFacts.cs", label="Entry Unk.Execute", prediction=4, span=""];
m3_126 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="WorkerManagerFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="252-252"];
m3_127 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="WorkerManagerFacts.cs", label="serverId == null", span="254-254"];
m3_129 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="WorkerManagerFacts.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="256-258"];
m3_128 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''serverId'');", span="254-254"];
m3_130 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="252-252"];
m3_6 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs", label="_queueProviders = queueProviders", span="43-43"];
m3_131 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="WorkerManagerFacts.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="261-261"];
m3_132 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="WorkerManagerFacts.cs", label="serverId == null", span="263-263"];
m3_134 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="WorkerManagerFacts.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="265-267"];
m3_133 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="WorkerManagerFacts.cs", label="throw new ArgumentNullException(''serverId'');", span="263-263"];
m3_135 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="261-261"];
m3_7 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="WorkerManagerFacts.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35"];
m3_144 [file="WorkerManagerFacts.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
n215 -> n2  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n22  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n29  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n35  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n41  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n47  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n53  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n59  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n65  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n71  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n77  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n83  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n89  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n95  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n101  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n107  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n113  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n119  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n125  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n131  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n137  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n143  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n149  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n155  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n161  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n167  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n173  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n179  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n185  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n215 -> n196  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Common.JobArgumentFacts", style=dashed];
n216 -> n208  [color=darkseagreen4, key=1, label=T, style=dashed];
n216 -> n212  [color=darkseagreen4, key=1, label=T, style=dashed];
n217 -> n208  [color=darkseagreen4, key=1, label=converter, style=dashed];
n2 -> n9  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n24 -> n190  [color=darkseagreen4, key=1, label=bool, style=dashed];
n24 -> n192  [color=darkseagreen4, key=1, label=T, style=dashed];
n24 -> n208  [color=darkseagreen4, key=1, label=T, style=dashed];
n24 -> n193  [color=darkseagreen4, key=1, label=T, style=dashed];
n24 -> n212  [color=darkseagreen4, key=1, label=T, style=dashed];
n189 -> n192  [color=darkseagreen4, key=1, label=serializationMethods, style=dashed];
n189 -> n193  [color=darkseagreen4, key=1, label=serializationMethods, style=dashed];
n189 -> n194  [color=darkseagreen4, key=1, label=serializationMethods, style=dashed];
n191 -> n208  [color=darkseagreen4, key=1, label=converter, style=dashed];
m0_42 -> m0_39  [color=darkseagreen4, key=1, label="HangFire.Tests.SchedulePollerSteps", style=dashed];
m0_143 -> m0_36  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_44  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_51  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_56  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_63  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_67  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_76  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_80  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_88  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_99  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_103  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_110  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_115  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_120  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_124  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_130  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_134  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m0_143 -> m0_141  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.Re_QueueingOfTimedOutJobsFeature", style=dashed];
m2_193 -> m2_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_155 -> m2_157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_32 -> m2_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_161 -> m2_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_7 -> m2_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_53 -> m2_56  [color=green, key=1, label="lambda expression", style=dashed];
m2_201 -> m2_203  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_75 -> m2_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1 -> m2_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_21 -> m2_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_22 -> m2_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_28 -> m2_30  [color=darkseagreen4, key=1, label=filter, style=dashed];
m2_28 -> m2_35  [color=darkseagreen4, key=1, label=filter, style=dashed];
m2_29 -> m2_35  [color=darkseagreen4, key=1, label=context, style=dashed];
m2_30 -> m2_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_64 -> m2_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_65 -> m2_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_108 -> m2_112  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_109 -> m2_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_96 -> m2_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_178 -> m2_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_133 -> m2_136  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_134 -> m2_139  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_170 -> m2_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_86 -> m2_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_87 -> m2_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_36 -> m2_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_116 -> m2_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_140 -> m2_142  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_57 -> m2_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_38 -> m2_23  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.QueueAttributeFacts", style=dashed];
m2_38 -> m2_24  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.QueueAttributeFacts", style=dashed];
m2_38 -> m2_29  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.QueueAttributeFacts", style=dashed];
m2_40 -> m2_35  [color=darkseagreen4, key=1, label=context, style=dashed];
m2_39 -> m2_35  [color=darkseagreen4, key=1, label=filter, style=dashed];
m2_79 -> m2_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_100 -> m2_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_126 -> m2_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_43 -> m2_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_44 -> m2_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_146 -> m2_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_122 -> m2_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_184 -> m2_187  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_208 -> m2_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_29  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_36  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_43  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_50  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_86  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_133  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_13  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_21  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_44  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_64  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_65  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_87  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_108  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_109  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_134  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_150  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_154  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_155  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_158  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_169  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_170  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_177  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_178  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_192  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_193  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_200  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m2_208 -> m2_201  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.BackgroundJobClientExtensionsFacts", style=dashed];
m3_117 -> m3_120  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m3_102 -> m3_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_86 -> m3_50  [color=green, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_86 -> m3_63  [color=green, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_86 -> m3_65  [color=green, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_86 -> m3_1  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_86 -> m3_2  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_86 -> m3_3  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_86 -> m3_4  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_86 -> m3_21  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_86 -> m3_31  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_86 -> m3_36  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_86 -> m3_40  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_86 -> m3_64  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerManagerFacts", style=dashed];
m3_49 -> m3_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_49 -> m3_57  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m3_50 -> m3_59  [color=green, key=1, label="lambda expression", style=dashed];
m3_51 -> m3_54  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m3_51 -> m3_56  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m3_70 -> m3_73  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m3_70 -> m3_80  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m3_76 -> m3_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_77 -> m3_83  [color=green, key=1, label="lambda expression", style=dashed];
m3_0 -> m3_3  [color=darkseagreen4, key=1, label="HangFire.SqlServer.PersistentJobQueueProviderCollection", style=dashed];
m3_4 -> m3_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_4 -> m3_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_24 -> m3_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_31 -> m3_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_64 -> m3_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_22 -> m3_27  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m3_137 -> m3_137  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m3_42 -> m3_45  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m3_42 -> m3_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m3_42 -> m3_53  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m3_54 -> m3_54  [color=darkseagreen4, key=1, label=parameterIndex, style=dashed];
m3_52 -> m3_54  [color=darkseagreen4, key=1, label=parameterIndex, style=dashed];
m3_95 -> m3_98  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_109 -> m3_112  [color=darkseagreen4, key=1, label=double, style=dashed];
m3_65 -> m3_71  [color=green, key=1, label="lambda expression", style=dashed];
m3_144 -> m3_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_144 -> m3_14  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_144 -> m3_18  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_144 -> m3_28  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m3_144 -> m3_56  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
}
