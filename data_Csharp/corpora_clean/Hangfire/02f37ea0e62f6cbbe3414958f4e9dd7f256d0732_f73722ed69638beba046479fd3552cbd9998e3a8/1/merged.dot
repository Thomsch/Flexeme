digraph  {
n27 [label="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts", span=""];
n0 [label="Entry HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.MsmqSqlServerStorageExtensionsFacts()", span="13-13", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.MsmqSqlServerStorageExtensionsFacts()"];
n1 [label="_storage = new SqlServerStorage(\r\n                String.Empty,\r\n                new SqlServerStorageOptions { PrepareSchemaIfNecessary = false })", span="15-17", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.MsmqSqlServerStorageExtensionsFacts()", color=red, community=0];
n2 [label="Exit HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.MsmqSqlServerStorageExtensionsFacts()", span="13-13", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.MsmqSqlServerStorageExtensionsFacts()"];
n3 [label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)"];
n4 [label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()"];
n5 [label="Entry HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()", span="21-21", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()"];
n6 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => MsmqSqlServerStorageExtensions.UseMsmqQueues(null, CleanMsmqQueueAttribute.PathPattern))", span="23-24", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()"];
n7 [label="Assert.Equal(''storage'', exception.ParamName)", span="26-26", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()"];
n9 [label="Entry Unk.>", span="", cluster="Unk.>"];
n11 [label="Entry lambda expression", span="24-24", cluster="lambda expression"];
n8 [label="Exit HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()", span="21-21", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()"];
n10 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n12 [label="MsmqSqlServerStorageExtensions.UseMsmqQueues(null, CleanMsmqQueueAttribute.PathPattern)", span="24-24", cluster="lambda expression"];
n13 [label="Exit lambda expression", span="24-24", cluster="lambda expression"];
n14 [label="Entry HangFire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(HangFire.SqlServer.SqlServerStorage, string)", span="23-23", cluster="HangFire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(HangFire.SqlServer.SqlServerStorage, string)"];
n15 [label="Entry HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()", span="30-30", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()"];
n16 [label="_storage.UseMsmqQueues(CleanMsmqQueueAttribute.PathPattern)", span="32-32", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()"];
n17 [label="var providerTypes = _storage.QueueProviders.Select(x => x.GetType())", span="34-34", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()"];
n20 [label="Entry HangFire.SqlServer.SqlServerStorage.UseMsmqQueues(string)", span="23-23", cluster="HangFire.SqlServer.SqlServerStorage.UseMsmqQueues(string)"];
n18 [label="Assert.Contains(typeof(MsmqJobQueueProvider), providerTypes)", span="35-35", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()"];
n21 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n23 [label="Entry lambda expression", span="34-34", cluster="lambda expression"];
n19 [label="Exit HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()", span="30-30", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()"];
n22 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
n24 [label="x.GetType()", span="34-34", cluster="lambda expression"];
n25 [label="Exit lambda expression", span="34-34", cluster="lambda expression"];
n26 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
d1 [label="_storage = new SqlServerStorage(\r\n                @''Server=.\sqlexpress;Database=TheDatabase;Trusted_Connection=True;'',\r\n                new SqlServerStorageOptions { PrepareSchemaIfNecessary = false })", span="15-17", cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.MsmqSqlServerStorageExtensionsFacts()", color=green, community=0];
m0_20 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorage.cs"];
m0_29 [label="Entry Unk.IncrementValue", span="", cluster="Unk.IncrementValue", file="SqlServerStorage.cs"];
m0_25 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="SqlServerStorage.cs"];
m0_23 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)", file="SqlServerStorage.cs"];
m0_24 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SqlServerStorage.cs"];
m0_10 [label="transaction.QueueCommand(x => x.ExpireEntryIn(hourlySucceededKey, TimeSpan.FromDays(1)))", span="24-24", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_18 [label="return state;", span="44-44", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerStorage.cs"];
m0_0 [label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22", cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="SqlServerStorage.cs"];
m0_17 [label="transaction.Commit()", span="41-41", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerStorage.cs"];
m0_7 [label="transaction.QueueCommand(x => x.IncrementValue(\r\n                        String.Format(''hangfire:stats:succeeded:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd''))))", span="17-18", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerStorage.cs"];
m0_5 [label="var transaction = redis.CreateTransaction()", span="13-13", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_6 [label="state.StateName == SucceededState.Name", span="15-15", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_8 [label="var hourlySucceededKey = String.Format(\r\n                        ''hangfire:stats:succeeded:{0}'',\r\n                        DateTime.UtcNow.ToString(''yyyy-MM-dd-HH''))", span="20-22", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_16 [label="transaction.QueueCommand(x => x.ExpireEntryIn(hourlyFailedKey, TimeSpan.FromDays(1)))", span="38-38", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerStorage.cs"];
m0_15 [label="transaction.QueueCommand(x => x.IncrementValue(hourlyFailedKey))", span="37-37", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_14 [label="var hourlyFailedKey = String.Format(\r\n                        ''hangfire:stats:failed:{0}'',\r\n                        DateTime.UtcNow.ToString(''yyyy-MM-dd-HH''))", span="34-36", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerStorage.cs"];
m0_11 [label="state.StateName == FailedState.Name", span="26-26", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_13 [label="transaction.QueueCommand(x => x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-ddTHH-mm''))))", span="31-32", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_1 [label="Exit Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22", cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="SqlServerStorage.cs"];
m0_3 [label="state == null", span="11-11", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_2 [label="throw new ArgumentNullException(''redis'');", span="10-10", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_4 [label="throw new ArgumentNullException(''state'');", span="11-11", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_9 [label="transaction.QueueCommand(x => x.IncrementValue(hourlySucceededKey))", span="23-23", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_12 [label="transaction.QueueCommand(x => x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd''))))", span="28-29", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_19 [label="Exit HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", span="8-8", cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs"];
m0_22 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="SqlServerStorage.cs"];
m0_37 [label="Entry Unk.ExpireEntryIn", span="", cluster="Unk.ExpireEntryIn", file="SqlServerStorage.cs"];
m0_21 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="SqlServerStorage.cs"];
m0_36 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="SqlServerStorage.cs"];
m0_38 [label="Entry lambda expression", span="28-29", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_26 [label="Entry lambda expression", span="17-18", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_47 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_45 [label="x.IncrementValue(hourlyFailedKey)", span="37-37", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_48 [label="x.ExpireEntryIn(hourlyFailedKey, TimeSpan.FromDays(1))", span="38-38", cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs"];
m0_49 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_27 [label="x.IncrementValue(\r\n                        String.Format(''hangfire:stats:succeeded:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd'')))", span="17-18", cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs"];
m0_28 [label="Exit lambda expression", span="17-18", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_31 [label="x.IncrementValue(hourlySucceededKey)", span="23-23", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_34 [label="x.ExpireEntryIn(hourlySucceededKey, TimeSpan.FromDays(1))", span="24-24", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_44 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_33 [label="Entry lambda expression", span="24-24", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_41 [label="Entry lambda expression", span="31-32", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_39 [label="x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd'')))", span="28-29", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_42 [label="x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-ddTHH-mm'')))", span="31-32", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_46 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_30 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_32 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_35 [label="Exit lambda expression", span="24-24", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_43 [label="Exit lambda expression", span="31-32", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_40 [label="Exit lambda expression", span="28-29", cluster="lambda expression", file="SqlServerStorage.cs"];
m0_51 [label=hourlyFailedKey, span="", file="SqlServerStorage.cs"];
m0_50 [label=hourlySucceededKey, span="", file="SqlServerStorage.cs"];
m1_2 [label="Entry HangFire.Server.IServerComponentRunner.Stop()", span="23-23", cluster="HangFire.Server.IServerComponentRunner.Stop()", file="StorageFacts.cs"];
m1_3 [label="Exit HangFire.Server.IServerComponentRunner.Stop()", span="23-23", cluster="HangFire.Server.IServerComponentRunner.Stop()", file="StorageFacts.cs"];
m1_0 [label="Entry HangFire.Server.IServerComponentRunner.Start()", span="22-22", cluster="HangFire.Server.IServerComponentRunner.Start()", file="StorageFacts.cs"];
m1_1 [label="Exit HangFire.Server.IServerComponentRunner.Start()", span="22-22", cluster="HangFire.Server.IServerComponentRunner.Start()", file="StorageFacts.cs"];
n27 -> n1  [key=1, style=dashed, color=red, label="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts"];
n27 -> n16  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts"];
n27 -> n17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts"];
n27 -> d1  [key=1, style=dashed, color=green, label="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts"];
n0 -> n1  [key=0, style=solid, color=red];
n0 -> d1  [key=0, style=solid, color=green];
n1 -> n2  [key=0, style=solid, color=red];
n1 -> n3  [key=2, style=dotted, color=red];
n1 -> n4  [key=2, style=dotted, color=red];
n2 -> n0  [key=0, style=bold, color=blue];
n5 -> n6  [key=0, style=solid];
n6 -> n7  [key=0, style=solid];
n6 -> n9  [key=2, style=dotted];
n6 -> n11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n7 -> n8  [key=0, style=solid];
n7 -> n10  [key=2, style=dotted];
n11 -> n12  [key=0, style=solid];
n8 -> n5  [key=0, style=bold, color=blue];
n12 -> n13  [key=0, style=solid];
n12 -> n14  [key=2, style=dotted];
n13 -> n11  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n16 -> n17  [key=0, style=solid];
n16 -> n20  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n21  [key=2, style=dotted];
n17 -> n23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n18 -> n19  [key=0, style=solid];
n18 -> n22  [key=2, style=dotted];
n23 -> n24  [key=0, style=solid];
n19 -> n15  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid];
n24 -> n26  [key=2, style=dotted];
n25 -> n23  [key=0, style=bold, color=blue];
d1 -> n2  [key=0, style=solid, color=green];
d1 -> n3  [key=2, style=dotted, color=green];
d1 -> n4  [key=2, style=dotted, color=green];
m0_10 -> m0_17  [key=0, style=solid, color=green];
m0_10 -> m0_22  [key=2, style=dotted];
m0_10 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_18 -> m0_19  [key=0, style=solid, color=green];
m0_0 -> m0_18  [key=1, style=dashed, color=green, label="HangFire.States.JobState"];
m0_0 -> m0_0  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.States.JobState OnStateChanged"];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.JobState"];
m0_0 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_0 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.JobState"];
m0_0 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.States.JobState"];
m0_17 -> m0_18  [key=0, style=solid, color=green];
m0_17 -> m0_25  [key=2, style=dotted, color=green];
m0_7 -> m0_8  [key=0, style=solid, color=green];
m0_7 -> m0_22  [key=2, style=dotted, color=green];
m0_7 -> m0_26  [key=1, style=dashed, color=green, label="lambda expression"];
m0_5 -> m0_7  [key=1, style=dashed, color=green, label=transaction];
m0_5 -> m0_16  [key=1, style=dashed, color=green, label=transaction];
m0_5 -> m0_17  [key=1, style=dashed, color=green, label=transaction];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_21  [key=2, style=dotted];
m0_5 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m0_5 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m0_5 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m0_5 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m0_5 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label=transaction];
m0_6 -> m0_7  [key=0, style=solid, color=green];
m0_6 -> m0_11  [key=0, style=solid];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_23  [key=2, style=dotted];
m0_8 -> m0_24  [key=2, style=dotted];
m0_8 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label=hourlySucceededKey];
m0_8 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label=hourlySucceededKey];
m0_8 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label=hourlySucceededKey];
m0_16 -> m0_17  [key=0, style=solid, color=green];
m0_16 -> m0_22  [key=2, style=dotted, color=green];
m0_16 -> m0_47  [key=1, style=dashed, color=green, label="lambda expression"];
m0_15 -> m0_16  [key=0, style=solid, color=green];
m0_15 -> m0_22  [key=2, style=dotted];
m0_15 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_14 -> m0_16  [key=1, style=dashed, color=green, label=hourlyFailedKey];
m0_14 -> m0_15  [key=0, style=solid, color=green];
m0_14 -> m0_23  [key=2, style=dotted, color=green];
m0_14 -> m0_24  [key=2, style=dotted, color=green];
m0_14 -> m0_45  [key=1, style=dashed, color=green, label=hourlyFailedKey];
m0_14 -> m0_48  [key=1, style=dashed, color=green, label=hourlyFailedKey];
m0_11 -> m0_17  [key=0, style=solid, color=green];
m0_11 -> m0_12  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid, color=green];
m0_13 -> m0_22  [key=2, style=dotted];
m0_13 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=0, style=solid];
m0_1 -> m0_0  [key=0, style=bold, color=blue];
m0_3 -> m0_5  [key=0, style=solid];
m0_3 -> m0_4  [key=0, style=solid];
m0_2 -> m0_19  [key=0, style=solid];
m0_2 -> m0_20  [key=2, style=dotted];
m0_4 -> m0_19  [key=0, style=solid];
m0_4 -> m0_20  [key=2, style=dotted];
m0_9 -> m0_22  [key=2, style=dotted];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_12 -> m0_22  [key=2, style=dotted];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_19 -> m0_0  [key=0, style=bold, color=blue];
m0_38 -> m0_39  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid, color=green];
m0_47 -> m0_48  [key=0, style=solid, color=green];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_29  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid, color=green];
m0_48 -> m0_36  [key=2, style=dotted, color=green];
m0_48 -> m0_37  [key=2, style=dotted, color=green];
m0_49 -> m0_47  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid, color=green];
m0_27 -> m0_23  [key=2, style=dotted, color=green];
m0_27 -> m0_24  [key=2, style=dotted, color=green];
m0_27 -> m0_29  [key=2, style=dotted, color=green];
m0_28 -> m0_26  [key=0, style=bold, color=blue];
m0_31 -> m0_29  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_34 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_37  [key=2, style=dotted];
m0_34 -> m0_35  [key=0, style=solid];
m0_44 -> m0_45  [key=0, style=solid];
m0_33 -> m0_34  [key=0, style=solid];
m0_41 -> m0_42  [key=0, style=solid];
m0_39 -> m0_23  [key=2, style=dotted];
m0_39 -> m0_24  [key=2, style=dotted];
m0_39 -> m0_29  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_42 -> m0_23  [key=2, style=dotted];
m0_42 -> m0_24  [key=2, style=dotted];
m0_42 -> m0_29  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_46 -> m0_44  [key=0, style=bold, color=blue];
m0_30 -> m0_31  [key=0, style=solid];
m0_32 -> m0_30  [key=0, style=bold, color=blue];
m0_35 -> m0_33  [key=0, style=bold, color=blue];
m0_43 -> m0_41  [key=0, style=bold, color=blue];
m0_40 -> m0_38  [key=0, style=bold, color=blue];
m0_51 -> m0_48  [key=1, style=dashed, color=green, label=hourlyFailedKey];
m0_51 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label=hourlyFailedKey];
m0_50 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label=hourlySucceededKey];
m0_50 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label=hourlySucceededKey];
m1_2 -> m1_3  [key=0, style=solid];
m1_3 -> m1_2  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_0  [key=0, style=bold, color=blue];
}
