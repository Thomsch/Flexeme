digraph  {
n27 [label="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts", span=""];
n0 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.MsmqSqlServerStorageExtensionsFacts()", label="Entry HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.MsmqSqlServerStorageExtensionsFacts()", span="13-13"];
n2 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.MsmqSqlServerStorageExtensionsFacts()", label="Exit HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.MsmqSqlServerStorageExtensionsFacts()", span="13-13"];
n3 [cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="37-37"];
n4 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
n5 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()", label="Entry HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()", span="21-21"];
n6 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => MsmqSqlServerStorageExtensions.UseMsmqQueues(null, CleanMsmqQueueAttribute.PathPattern))", span="23-24"];
n7 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()", label="Assert.Equal(''storage'', exception.ParamName)", span="26-26"];
n9 [cluster="Unk.>", label="Entry Unk.>", span=""];
n11 [cluster="lambda expression", label="Entry lambda expression", span="24-24"];
n8 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()", label="Exit HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_ThrowsAnException_WhenStorageIsNull()", span="21-21"];
n10 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
n12 [cluster="lambda expression", label="MsmqSqlServerStorageExtensions.UseMsmqQueues(null, CleanMsmqQueueAttribute.PathPattern)", span="24-24"];
n13 [cluster="lambda expression", label="Exit lambda expression", span="24-24"];
n14 [cluster="HangFire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(HangFire.SqlServer.SqlServerStorage, string)", label="Entry HangFire.SqlServer.Msmq.MsmqSqlServerStorageExtensions.UseMsmqQueues(HangFire.SqlServer.SqlServerStorage, string)", span="23-23"];
n15 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()", label="Entry HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()", span="30-30"];
n16 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()", label="_storage.UseMsmqQueues(CleanMsmqQueueAttribute.PathPattern)", span="32-32"];
n17 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()", label="var providerTypes = _storage.QueueProviders.Select(x => x.GetType())", span="34-34"];
n20 [cluster="HangFire.SqlServer.SqlServerStorage.UseMsmqQueues(string)", label="Entry HangFire.SqlServer.SqlServerStorage.UseMsmqQueues(string)", span="23-23"];
n18 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()", label="Assert.Contains(typeof(MsmqJobQueueProvider), providerTypes)", span="35-35"];
n21 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n23 [cluster="lambda expression", label="Entry lambda expression", span="34-34"];
n19 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()", label="Exit HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.UseMsmqQueues_AddsMsmqJobQueueProvider()", span="30-30"];
n22 [cluster="Unk.Contains", label="Entry Unk.Contains", span=""];
n24 [cluster="lambda expression", label="x.GetType()", span="34-34"];
n25 [cluster="lambda expression", label="Exit lambda expression", span="34-34"];
n26 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
d1 [cluster="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts.MsmqSqlServerStorageExtensionsFacts()", color=green, community=0, label="_storage = new SqlServerStorage(\r\n                @''Server=.\sqlexpress;Database=TheDatabase;Trusted_Connection=True;'',\r\n                new SqlServerStorageOptions { PrepareSchemaIfNecessary = false })", prediction=0, span="15-17"];
m0_20 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerStorage.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_29 [cluster="Unk.IncrementValue", file="SqlServerStorage.cs", label="Entry Unk.IncrementValue", span=""];
m0_25 [cluster="Unk.Commit", file="SqlServerStorage.cs", label="Entry Unk.Commit", span=""];
m0_23 [cluster="System.DateTime.ToString(string)", file="SqlServerStorage.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m0_24 [cluster="string.Format(string, object)", file="SqlServerStorage.cs", label="Entry string.Format(string, object)", span="0-0"];
m0_10 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(hourlySucceededKey, TimeSpan.FromDays(1)))", span="24-24"];
m0_18 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerStorage.cs", label="return state;", prediction=1, span="44-44"];
m0_0 [cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="SqlServerStorage.cs", label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22"];
m0_17 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerStorage.cs", label="transaction.Commit()", prediction=2, span="41-41"];
m0_7 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerStorage.cs", label="transaction.QueueCommand(x => x.IncrementValue(\r\n                        String.Format(''hangfire:stats:succeeded:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd''))))", prediction=2, span="17-18"];
m0_5 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="var transaction = redis.CreateTransaction()", span="13-13"];
m0_6 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="state.StateName == SucceededState.Name", span="15-15"];
m0_8 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="var hourlySucceededKey = String.Format(\r\n                        ''hangfire:stats:succeeded:{0}'',\r\n                        DateTime.UtcNow.ToString(''yyyy-MM-dd-HH''))", span="20-22"];
m0_16 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerStorage.cs", label="transaction.QueueCommand(x => x.ExpireEntryIn(hourlyFailedKey, TimeSpan.FromDays(1)))", prediction=2, span="38-38"];
m0_15 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="transaction.QueueCommand(x => x.IncrementValue(hourlyFailedKey))", span="37-37"];
m0_14 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", color=green, community=0, file="SqlServerStorage.cs", label="var hourlyFailedKey = String.Format(\r\n                        ''hangfire:stats:failed:{0}'',\r\n                        DateTime.UtcNow.ToString(''yyyy-MM-dd-HH''))", prediction=2, span="34-36"];
m0_11 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="state.StateName == FailedState.Name", span="26-26"];
m0_13 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="transaction.QueueCommand(x => x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-ddTHH-mm''))))", span="31-32"];
m0_1 [cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="SqlServerStorage.cs", label="Exit Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22"];
m0_3 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="state == null", span="11-11"];
m0_2 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''redis'');", span="10-10"];
m0_4 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="throw new ArgumentNullException(''state'');", span="11-11"];
m0_9 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="transaction.QueueCommand(x => x.IncrementValue(hourlySucceededKey))", span="23-23"];
m0_12 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="transaction.QueueCommand(x => x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd''))))", span="28-29"];
m0_19 [cluster="HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", file="SqlServerStorage.cs", label="Exit HangFire.HistoryStatisticsFilter.OnStateChanged(IRedisClient, string, HangFire.States.JobState)", span="8-8"];
m0_22 [cluster="Unk.QueueCommand", file="SqlServerStorage.cs", label="Entry Unk.QueueCommand", span=""];
m0_37 [cluster="Unk.ExpireEntryIn", file="SqlServerStorage.cs", label="Entry Unk.ExpireEntryIn", span=""];
m0_21 [cluster="Unk.CreateTransaction", file="SqlServerStorage.cs", label="Entry Unk.CreateTransaction", span=""];
m0_36 [cluster="System.TimeSpan.FromDays(double)", file="SqlServerStorage.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m0_38 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="28-29"];
m0_26 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="17-18"];
m0_47 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="38-38"];
m0_45 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.IncrementValue(hourlyFailedKey)", span="37-37"];
m0_48 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="x.ExpireEntryIn(hourlyFailedKey, TimeSpan.FromDays(1))", prediction=2, span="38-38"];
m0_49 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="38-38"];
m0_27 [cluster="lambda expression", color=green, community=0, file="SqlServerStorage.cs", label="x.IncrementValue(\r\n                        String.Format(''hangfire:stats:succeeded:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd'')))", prediction=7, span="17-18"];
m0_28 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="17-18"];
m0_31 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.IncrementValue(hourlySucceededKey)", span="23-23"];
m0_34 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.ExpireEntryIn(hourlySucceededKey, TimeSpan.FromDays(1))", span="24-24"];
m0_44 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="37-37"];
m0_33 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="24-24"];
m0_41 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="31-32"];
m0_39 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-dd'')))", span="28-29"];
m0_42 [cluster="lambda expression", file="SqlServerStorage.cs", label="x.IncrementValue(\r\n                        String.Format(''hangfire:stats:failed:{0}'', DateTime.UtcNow.ToString(''yyyy-MM-ddTHH-mm'')))", span="31-32"];
m0_46 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="37-37"];
m0_30 [cluster="lambda expression", file="SqlServerStorage.cs", label="Entry lambda expression", span="23-23"];
m0_32 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="23-23"];
m0_35 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="24-24"];
m0_43 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="31-32"];
m0_40 [cluster="lambda expression", file="SqlServerStorage.cs", label="Exit lambda expression", span="28-29"];
m0_51 [file="SqlServerStorage.cs", label=hourlyFailedKey, span=""];
m0_50 [file="SqlServerStorage.cs", label=hourlySucceededKey, span=""];
m1_2 [cluster="HangFire.Server.IServerComponentRunner.Stop()", file="StorageFacts.cs", label="Entry HangFire.Server.IServerComponentRunner.Stop()", span="23-23"];
m1_3 [cluster="HangFire.Server.IServerComponentRunner.Stop()", file="StorageFacts.cs", label="Exit HangFire.Server.IServerComponentRunner.Stop()", span="23-23"];
m1_0 [cluster="HangFire.Server.IServerComponentRunner.Start()", file="StorageFacts.cs", label="Entry HangFire.Server.IServerComponentRunner.Start()", span="22-22"];
m1_1 [cluster="HangFire.Server.IServerComponentRunner.Start()", file="StorageFacts.cs", label="Exit HangFire.Server.IServerComponentRunner.Start()", span="22-22"];
n27 -> n16  [color=darkseagreen4, key=1, label="HangFire.Msmq.Tests.MsmqSqlServerStorageExtensionsFacts", style=dashed];
n6 -> n11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n17 -> n23  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_10 -> m0_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_0 -> m0_18  [color=green, key=1, label="HangFire.States.JobState", style=dashed];
m0_0 -> m0_3  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m0_0 -> m0_6  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m0_0 -> m0_11  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m0_7 -> m0_26  [color=green, key=1, label="lambda expression", style=dashed];
m0_5 -> m0_7  [color=green, key=1, label=transaction, style=dashed];
m0_5 -> m0_16  [color=green, key=1, label=transaction, style=dashed];
m0_5 -> m0_17  [color=green, key=1, label=transaction, style=dashed];
m0_5 -> m0_9  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m0_5 -> m0_10  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m0_5 -> m0_12  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m0_5 -> m0_13  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m0_5 -> m0_15  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m0_8 -> m0_31  [color=darkseagreen4, key=1, label=hourlySucceededKey, style=dashed];
m0_8 -> m0_10  [color=darkseagreen4, key=1, label=hourlySucceededKey, style=dashed];
m0_8 -> m0_34  [color=darkseagreen4, key=1, label=hourlySucceededKey, style=dashed];
m0_16 -> m0_47  [color=green, key=1, label="lambda expression", style=dashed];
m0_15 -> m0_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_14 -> m0_16  [color=green, key=1, label=hourlyFailedKey, style=dashed];
m0_14 -> m0_45  [color=green, key=1, label=hourlyFailedKey, style=dashed];
m0_14 -> m0_48  [color=green, key=1, label=hourlyFailedKey, style=dashed];
m0_13 -> m0_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_9 -> m0_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_12 -> m0_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_51 -> m0_48  [color=green, key=1, label=hourlyFailedKey, style=dashed];
m0_51 -> m0_45  [color=darkseagreen4, key=1, label=hourlyFailedKey, style=dashed];
m0_50 -> m0_31  [color=darkseagreen4, key=1, label=hourlySucceededKey, style=dashed];
m0_50 -> m0_34  [color=darkseagreen4, key=1, label=hourlySucceededKey, style=dashed];
}
