digraph  {
n30 [label="HangFire.SqlServer.Components.ExpirationManager", span=""];
n0 [cluster="HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", label="Entry HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="26-26"];
n1 [cluster="HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", label="_storage = storage", span="28-28"];
n2 [cluster="HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", label="Exit HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="26-26"];
n3 [cluster="HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", label="Entry HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", span="31-31"];
n4 [cluster="HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", label="var connection = _storage.CreateAndOpenConnection()", span="33-33"];
n5 [cluster="HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", label=ProcessedTables, span="35-35"];
n8 [cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", label="Entry HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="81-81"];
n7 [cluster="HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", label="Exit HangFire.SqlServer.Components.ExpirationManager.RemoveExpiredRecords()", span="31-31"];
n9 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
n10 [cluster="Unk.Execute", label="Entry Unk.Execute", span=""];
n11 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", label="Entry HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", span="44-44"];
n12 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", label="Logger.Info(''Expiration manager has been started.'')", span="48-48"];
n13 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", label=true, span="50-50"];
n20 [cluster="Unk.Info", label="Entry Unk.Info", span=""];
n14 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", label="JobServer.RetryOnException(\r\n                        RemoveExpiredRecords,\r\n                        _stopped)", span="52-54"];
n16 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", label="Logger.Info(''Expiration manager has been stopped.'')", span="62-62"];
n15 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", label="_stopped.WaitOne(CheckInterval)", span="56-56"];
n21 [cluster="HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)", label="Entry HangFire.Server.JobServer.RetryOnException(System.Action, System.Threading.WaitHandle)", span="151-151"];
n22 [cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0"];
n17 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", label=Exception, span="64-64"];
n19 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", label="Exit HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", span="44-44"];
n18 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Work()", label="Logger.Fatal(''Unexpected exception caught.'', ex)", span="66-66"];
n23 [cluster="Unk.Fatal", label="Entry Unk.Fatal", span=""];
n24 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="Entry HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="70-70"];
n25 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="_stopped.Set()", span="72-72"];
n26 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="thread.Join()", span="73-73"];
n28 [cluster="System.Threading.EventWaitHandle.Set()", label="Entry System.Threading.EventWaitHandle.Set()", span="0-0"];
n27 [cluster="HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", label="Exit HangFire.SqlServer.Components.ExpirationManager.HangFire.Server.IThreadWrappable.Dispose(System.Threading.Thread)", span="70-70"];
n29 [cluster="System.Threading.Thread.Join()", label="Entry System.Threading.Thread.Join()", span="0-0"];
d1 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=green, community=0, label="_storage = new Mock<JobStorage>()", prediction=0, span="21-21"];
d92 [label="HangFire.Core.Tests.Server.SchedulePollerFacts", span=""];
d0 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19"];
d2 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", color=green, community=0, label="_connection = new Mock<IStorageConnection>()", prediction=1, span="22-22"];
d10 [cluster="Mock<JobStorage>.cstr", label="Entry Mock<JobStorage>.cstr", span=""];
d3 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_stateMachine = new Mock<IStateMachine>()", span="23-23"];
d11 [cluster="Mock<IStorageConnection>.cstr", label="Entry Mock<IStorageConnection>.cstr", span=""];
d34 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, TimeSpan.FromMilliseconds(-1)))", prediction=2, span="38-40"];
d33 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="36-36"];
d35 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", label="Assert.Equal(''storage'', exception.ParamName)", span="42-42"];
d20 [cluster="Unk.>", label="Entry Unk.>", span=""];
d38 [cluster="lambda expression", label="Entry lambda expression", span="39-40"];
d39 [cluster="lambda expression", color=green, community=0, label="new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, TimeSpan.FromMilliseconds(-1))", prediction=3, span="39-40"];
d40 [cluster="lambda expression", label="Exit lambda expression", span="39-40"];
d41 [cluster="SchedulePoller.cstr", label="Entry SchedulePoller.cstr", span=""];
d42 [cluster="System.TimeSpan.FromMilliseconds(double)", label="Entry System.TimeSpan.FromMilliseconds(double)", span="0-0"];
d4 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_token = new CancellationToken(true)", span="24-24"];
d5 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="26-26"];
d6 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_stateMachineFactory.Setup(x => x.Create(It.IsNotNull<IStorageConnection>()))\r\n                .Returns(_stateMachine.Object)", span="27-28"];
d7 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="30-30"];
d8 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns(JobId)", span="31-32"];
d44 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    _storage.Object, null, TimeSpan.FromMilliseconds(-1)))", span="48-50"];
d48 [cluster="lambda expression", label="new SchedulePoller(\r\n                    _storage.Object, null, TimeSpan.FromMilliseconds(-1))", span="49-50"];
d51 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="var scheduler = CreateScheduler()", span="58-58"];
d52 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="scheduler.Execute(_token)", span="60-60"];
d53 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="_storage.Verify(x => x.GetConnection())", span="62-62"];
d54 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="_connection.Verify(x => x.Dispose())", span="63-63"];
d67 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="var scheduler = CreateScheduler()", span="69-69"];
d68 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="scheduler.Execute(_token)", span="71-71"];
d69 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName }))", span="73-76"];
d76 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns((string)null)", span="82-83"];
d77 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="var scheduler = CreateScheduler()", span="84-84"];
d78 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="scheduler.Execute(_token)", span="86-86"];
d79 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="_stateMachine.Verify(\r\n                x => x.TryToChangeState(It.IsAny<string>(), It.IsAny<State>(), It.IsAny<string[]>()),\r\n                Times.Never)", span="88-90"];
d90 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", label="return new SchedulePoller(_storage.Object, _stateMachineFactory.Object, TimeSpan.Zero);", span="95-95"];
d9 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19"];
d12 [cluster="Mock<IStateMachine>.cstr", label="Entry Mock<IStateMachine>.cstr", span=""];
d36 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="36-36"];
d37 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d18 [cluster="lambda expression", label="x.Create(It.IsNotNull<IStorageConnection>())", span="27-27"];
d27 [cluster="lambda expression", label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="31-32"];
d72 [cluster="lambda expression", label="x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName })", span="73-76"];
d82 [cluster="lambda expression", label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="82-83"];
d88 [cluster="lambda expression", label="x.TryToChangeState(It.IsAny<string>(), It.IsAny<State>(), It.IsAny<string[]>())", span="89-89"];
d13 [cluster="System.Threading.CancellationToken.CancellationToken(bool)", label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0"];
d14 [cluster="Mock<IStateMachineFactory>.cstr", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
d15 [cluster="Unk.Setup", label="Entry Unk.Setup", span=""];
d16 [cluster="Unk.Returns", label="Entry Unk.Returns", span=""];
d17 [cluster="lambda expression", label="Entry lambda expression", span="27-27"];
d22 [cluster="lambda expression", label="Entry lambda expression", span="30-30"];
d26 [cluster="lambda expression", label="Entry lambda expression", span="31-32"];
d43 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="46-46"];
d45 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="52-52"];
d47 [cluster="lambda expression", label="Entry lambda expression", span="49-50"];
d49 [cluster="lambda expression", label="Exit lambda expression", span="49-50"];
d50 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="56-56"];
d56 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="93-93"];
d57 [cluster="HangFire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", label="Entry HangFire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", span="47-47"];
d58 [cluster="Unk.Verify", label="Entry Unk.Verify", span=""];
d59 [cluster="lambda expression", label="Entry lambda expression", span="62-62"];
d55 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="56-56"];
d62 [cluster="lambda expression", label="Entry lambda expression", span="63-63"];
d66 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="67-67"];
d70 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="67-67"];
d71 [cluster="lambda expression", label="Entry lambda expression", span="73-76"];
d75 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="Entry HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="80-80"];
d81 [cluster="lambda expression", label="Entry lambda expression", span="82-83"];
d80 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="80-80"];
d87 [cluster="lambda expression", label="Entry lambda expression", span="89-89"];
d91 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="93-93"];
d19 [cluster="lambda expression", label="Exit lambda expression", span="27-27"];
d21 [cluster="Unk.Create", label="Entry Unk.Create", span=""];
d28 [cluster="lambda expression", label="Exit lambda expression", span="31-32"];
d29 [cluster="Unk.GetFirstByLowestScoreFromSet", label="Entry Unk.GetFirstByLowestScoreFromSet", span=""];
d30 [cluster="lambda expression", label="Entry lambda expression", span="32-32"];
d73 [cluster="lambda expression", label="Exit lambda expression", span="73-76"];
d74 [cluster="Unk.TryToChangeState", label="Entry Unk.TryToChangeState", span=""];
d83 [cluster="lambda expression", label="Exit lambda expression", span="82-83"];
d84 [cluster="lambda expression", label="Entry lambda expression", span="83-83"];
d89 [cluster="lambda expression", label="Exit lambda expression", span="89-89"];
d24 [cluster="lambda expression", label="Exit lambda expression", span="30-30"];
d23 [cluster="lambda expression", label="x.GetConnection()", span="30-30"];
d46 [cluster="HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", label="Exit HangFire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="46-46"];
d61 [cluster="lambda expression", label="Exit lambda expression", span="62-62"];
d60 [cluster="lambda expression", label="x.GetConnection()", span="62-62"];
d64 [cluster="lambda expression", label="Exit lambda expression", span="63-63"];
d63 [cluster="lambda expression", label="x.Dispose()", span="63-63"];
d32 [cluster="lambda expression", label="Exit lambda expression", span="32-32"];
d31 [cluster="lambda expression", label="time > 0", span="32-32"];
d86 [cluster="lambda expression", label="Exit lambda expression", span="83-83"];
d85 [cluster="lambda expression", label="time > 0", span="83-83"];
d25 [cluster="Unk.GetConnection", label="Entry Unk.GetConnection", span=""];
d65 [cluster="Unk.Dispose", label="Entry Unk.Dispose", span=""];
m0_0 [cluster="HangFire.Storage.IAtomicWriteTransaction.Commit()", file="IAtomicWriteTransaction.cs", label="Entry HangFire.Storage.IAtomicWriteTransaction.Commit()", span="12-12"];
m0_1 [cluster="HangFire.Storage.IAtomicWriteTransaction.Commit()", file="IAtomicWriteTransaction.cs", label="Exit HangFire.Storage.IAtomicWriteTransaction.Commit()", span="12-12"];
m2_13 [cluster="Unk.Commit", file="RedisAtomicWriteTransaction.cs", label="Entry Unk.Commit", span=""];
m2_0 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", file="RedisAtomicWriteTransaction.cs", label="Entry HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", span="9-9"];
m2_1 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", file="RedisAtomicWriteTransaction.cs", label="_transaction = transaction", span="11-11"];
m2_2 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", file="RedisAtomicWriteTransaction.cs", label="var storage = new RedisStoredValues(_transaction)", span="13-13"];
m2_3 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", file="RedisAtomicWriteTransaction.cs", label="Values = storage", span="15-15"];
m2_4 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", file="RedisAtomicWriteTransaction.cs", label="Sets = storage", span="16-16"];
m2_5 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", file="RedisAtomicWriteTransaction.cs", label="Lists = storage", span="17-17"];
m2_6 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", file="RedisAtomicWriteTransaction.cs", label="Queues = storage", span="18-18"];
m2_7 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", file="RedisAtomicWriteTransaction.cs", label="Jobs = storage", span="19-19"];
m2_8 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", file="RedisAtomicWriteTransaction.cs", label="Exit HangFire.Redis.RedisAtomicWriteTransaction.RedisAtomicWriteTransaction(IRedisTransaction)", span="9-9"];
m2_14 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", file="RedisAtomicWriteTransaction.cs", label="Entry HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", span="33-33"];
m2_15 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", file="RedisAtomicWriteTransaction.cs", label="_transaction.Dispose()", span="35-35"];
m2_16 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", file="RedisAtomicWriteTransaction.cs", label="Exit HangFire.Redis.RedisAtomicWriteTransaction.Dispose()", span="33-33"];
m2_10 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Commit()", file="RedisAtomicWriteTransaction.cs", label="Entry HangFire.Redis.RedisAtomicWriteTransaction.Commit()", span="28-28"];
m2_11 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Commit()", file="RedisAtomicWriteTransaction.cs", label="return _transaction.Commit();", span="30-30"];
m2_12 [cluster="HangFire.Redis.RedisAtomicWriteTransaction.Commit()", file="RedisAtomicWriteTransaction.cs", label="Exit HangFire.Redis.RedisAtomicWriteTransaction.Commit()", span="28-28"];
m2_9 [cluster="HangFire.Redis.RedisStoredValues.RedisStoredValues(IRedisTransaction)", file="RedisAtomicWriteTransaction.cs", label="Entry HangFire.Redis.RedisStoredValues.RedisStoredValues(IRedisTransaction)", span="15-15"];
m2_18 [file="RedisAtomicWriteTransaction.cs", label="HangFire.Redis.RedisAtomicWriteTransaction", span=""];
m3_0 [cluster="Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", file="RedisStoredValues.cs", label="Entry Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", span="6-6"];
m3_1 [cluster="Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", file="RedisStoredValues.cs", label="Exit Hangfire.Storage.DistributedLockTimeoutException.DistributedLockTimeoutException(string)", span="6-6"];
m6_0 [cluster="HangFire.States.StateHandlerProviderCollection.GetHandlers()", file="SqlServerStorage.cs", label="Entry HangFire.States.StateHandlerProviderCollection.GetHandlers()", span="22-22"];
m6_1 [cluster="HangFire.States.StateHandlerProviderCollection.GetHandlers()", file="SqlServerStorage.cs", label="return null;", span="24-24"];
m6_2 [cluster="HangFire.States.StateHandlerProviderCollection.GetHandlers()", file="SqlServerStorage.cs", label="Exit HangFire.States.StateHandlerProviderCollection.GetHandlers()", span="22-22"];
m7_17 [cluster="HangFire.SqlServer.SqlStoredJobs.GetParameter(string, string)", file="SqlStoredJobs.cs", label="Entry HangFire.SqlServer.SqlStoredJobs.GetParameter(string, string)", span="49-49"];
m7_18 [cluster="HangFire.SqlServer.SqlStoredJobs.GetParameter(string, string)", file="SqlStoredJobs.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="51-54"];
m7_19 [cluster="HangFire.SqlServer.SqlStoredJobs.GetParameter(string, string)", file="SqlStoredJobs.cs", label="Exit HangFire.SqlServer.SqlStoredJobs.GetParameter(string, string)", span="49-49"];
m7_16 [cluster="Unk.Execute", file="SqlStoredJobs.cs", label="Entry Unk.Execute", span=""];
m7_13 [cluster="HangFire.SqlServer.SqlStoredJobs.SetParameter(string, string, string)", file="SqlStoredJobs.cs", label="Entry HangFire.SqlServer.SqlStoredJobs.SetParameter(string, string, string)", span="38-38"];
m7_14 [cluster="HangFire.SqlServer.SqlStoredJobs.SetParameter(string, string, string)", file="SqlStoredJobs.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="40-46"];
m7_15 [cluster="HangFire.SqlServer.SqlStoredJobs.SetParameter(string, string, string)", file="SqlStoredJobs.cs", label="Exit HangFire.SqlServer.SqlStoredJobs.SetParameter(string, string, string)", span="38-38"];
m7_3 [cluster="HangFire.SqlServer.SqlStoredJobs.GetStateAndInvocationData(string)", file="SqlStoredJobs.cs", label="Entry HangFire.SqlServer.SqlStoredJobs.GetStateAndInvocationData(string)", span="20-20"];
m7_4 [cluster="HangFire.SqlServer.SqlStoredJobs.GetStateAndInvocationData(string)", file="SqlStoredJobs.cs", label="var job = _connection.Query<Job>(\r\n                @''select InvocationData, State from HangFire.Job where id = @id'',\r\n                new { id = id })\r\n                .SingleOrDefault()", span="22-25"];
m7_5 [cluster="HangFire.SqlServer.SqlStoredJobs.GetStateAndInvocationData(string)", file="SqlStoredJobs.cs", label="job == null", span="27-27"];
m7_7 [cluster="HangFire.SqlServer.SqlStoredJobs.GetStateAndInvocationData(string)", file="SqlStoredJobs.cs", label="var data = JobHelper.FromJson<InvocationData>(job.InvocationData)", span="29-29"];
m7_8 [cluster="HangFire.SqlServer.SqlStoredJobs.GetStateAndInvocationData(string)", file="SqlStoredJobs.cs", label="return new StateAndInvocationData\r\n            {\r\n                InvocationData = data,\r\n                State = job.State,\r\n            };", span="31-35"];
m7_6 [cluster="HangFire.SqlServer.SqlStoredJobs.GetStateAndInvocationData(string)", file="SqlStoredJobs.cs", label="return null;", span="27-27"];
m7_9 [cluster="HangFire.SqlServer.SqlStoredJobs.GetStateAndInvocationData(string)", file="SqlStoredJobs.cs", label="Exit HangFire.SqlServer.SqlStoredJobs.GetStateAndInvocationData(string)", span="20-20"];
m7_0 [cluster="HangFire.SqlServer.SqlStoredJobs.SqlStoredJobs(SqlConnection)", file="SqlStoredJobs.cs", label="Entry HangFire.SqlServer.SqlStoredJobs.SqlStoredJobs(SqlConnection)", span="15-15"];
m7_1 [cluster="HangFire.SqlServer.SqlStoredJobs.SqlStoredJobs(SqlConnection)", file="SqlStoredJobs.cs", label="_connection = connection", span="17-17"];
m7_2 [cluster="HangFire.SqlServer.SqlStoredJobs.SqlStoredJobs(SqlConnection)", file="SqlStoredJobs.cs", label="Exit HangFire.SqlServer.SqlStoredJobs.SqlStoredJobs(SqlConnection)", span="15-15"];
m7_11 [cluster="Unk.SingleOrDefault", file="SqlStoredJobs.cs", label="Entry Unk.SingleOrDefault", span=""];
m7_12 [cluster="HangFire.Storage.StateAndInvocationData.StateAndInvocationData()", file="SqlStoredJobs.cs", label="Entry HangFire.Storage.StateAndInvocationData.StateAndInvocationData()", span="2-2"];
m7_20 [cluster="HangFire.SqlServer.SqlStoredJobs.Complete(HangFire.Server.JobPayload)", file="SqlStoredJobs.cs", label="Entry HangFire.SqlServer.SqlStoredJobs.Complete(HangFire.Server.JobPayload)", span="57-57"];
m7_21 [cluster="HangFire.SqlServer.SqlStoredJobs.Complete(HangFire.Server.JobPayload)", file="SqlStoredJobs.cs", label="_connection.Execute(''delete from HangFire.JobQueue where JobId = @id and Queue = @queueName'',\r\n                new { id = payload.Id, queueName = payload.Queue })", span="60-61"];
m7_22 [cluster="HangFire.SqlServer.SqlStoredJobs.Complete(HangFire.Server.JobPayload)", file="SqlStoredJobs.cs", label="Exit HangFire.SqlServer.SqlStoredJobs.Complete(HangFire.Server.JobPayload)", span="57-57"];
m7_23 [file="SqlStoredJobs.cs", label="HangFire.SqlServer.SqlStoredJobs", span=""];
m8_230 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(''my-key'', record.Key)", span="246-246"];
m8_90 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var job = GetTestJob(sql, jobId)", span="110-110"];
m8_390 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="442-442"];
m8_113 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="105-105"];
m8_372 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="426-426"];
m8_60 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="100-106"];
m8_61 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }", span="100-106"];
m8_62 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="100-106"];
m8_63 [cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="SqlWriteTransaction.cs", label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23"];
m8_153 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="206-206"];
m8_154 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="207-207"];
m8_155 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.Queue", span="207-207"];
m8_91 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(''State'', job.StateName)", span="111-111"];
m8_212 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="279-291"];
m8_213 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="293-300"];
m8_214 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="266-302"];
m8_419 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlWriteTransaction.cs", label=fetchedJobIds, span=""];
m8_420 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlWriteTransaction.cs", label=string, span=""];
m8_421 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="SqlWriteTransaction.cs", label=sql, span=""];
m8_391 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="443-443"];
m8_28 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="38-38"];
m8_29 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null)", span="38-38"];
m8_30 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="38-38"];
m8_142 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="140-140"];
m8_102 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="97-124"];
m8_377 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="426-426"];
m8_384 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="438-449"];
m8_385 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="440-444"];
m8_379 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="426-426"];
m8_383 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="436-436"];
m8_378 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="426-426"];
m8_380 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="181-181"];
m8_381 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", span="436-436"];
m8_386 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="446-446"];
m8_382 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="438-449"];
m8_387 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(2, recordCount)", span="448-448"];
m8_449 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="195-195"];
m8_237 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="141-141"];
m8_238 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="253-253"];
m8_239 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="255-269"];
m8_527 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="621-621"];
m8_528 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="623-638"];
m8_529 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords()", span="621-621"];
m8_267 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.GetJobQueueMonitoringApi().GetQueues()", span="361-361"];
m8_268 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="361-361"];
m8_269 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22"];
m8_368 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlWriteTransaction.cs", label=JobLoadException, span="493-493"];
m8_369 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlWriteTransaction.cs", label="return null;", span="495-495"];
m8_370 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484"];
m8_404 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.RemoveFromList(''my-key'', ''my-value'')", span="461-461"];
m8_48 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }", span="85-91"];
m8_152 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="new { Monitoring = monitoring, Queue = queue }", span="206-206"];
m8_331 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="SqlWriteTransaction.cs", label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="428-428"];
m8_332 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="SqlWriteTransaction.cs", label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="429-429"];
m8_333 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="SqlWriteTransaction.cs", label="return monitoringApi;", span="431-431"];
m8_250 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="255-269"];
m8_343 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlWriteTransaction.cs", label="return DeserializeJobs(\r\n                sortedSqlJobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="457-467"];
m8_305 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="392-392"];
m8_306 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397"];
m8_307 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="string sqlQuery =\r\n$@''select [Key], [Value] as [Count] from [{_storage.SchemaName}].AggregatedCounter with (nolock)\r\nwhere [Key] in @keys''", span="401-403"];
m8_406 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlWriteTransaction.cs", label="Hangfire.SqlServer.SqlServerMonitoringApi", span=""];
m8_431 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="505-505"];
m8_432 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                });\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="507-523"];
m8_433 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange()", span="505-505"];
m8_196 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="201-201"];
m8_197 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="203-217"];
m8_198 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="205-205"];
m8_49 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="85-91"];
m8_551 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlWriteTransaction.cs", label="var transaction = new SqlServerWriteOnlyTransaction(connection, _queueProviders)", span="653-653"];
m8_552 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlWriteTransaction.cs", label="action(transaction)", span="655-655"];
m8_553 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlWriteTransaction.cs", label="transaction.Commit()", span="656-656"];
m8_554 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>)", span="649-649"];
m8_345 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="390-401"];
m8_243 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="259-259"];
m8_244 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(''my-key'', record.Key)", span="261-261"];
m8_245 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(-1, record.Value)", span="262-262"];
m8_246 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.NotNull(record.ExpireAt)", span="263-263"];
m8_247 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var expireAt = (DateTime)record.ExpireAt", span="265-265"];
m8_248 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="267-267"];
m8_407 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlWriteTransaction.cs", label=int, span=""];
m8_408 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlWriteTransaction.cs", label=int, span=""];
m8_409 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="SqlWriteTransaction.cs", label=int, span=""];
m8_176 [cluster="Unk.Enqueue", file="SqlWriteTransaction.cs", label="Entry Unk.Enqueue", span=""];
m8_177 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="178-178"];
m8_179 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="178-178"];
m8_178 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlWriteTransaction.cs", label="return connection\r\n                .Query(''select * from HangFire.Job where id = @id'', new { id = jobId })\r\n                .Single();", span="180-182"];
m8_180 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="186-186"];
m8_31 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="69-70"];
m8_338 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="373-384"];
m8_355 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="392-396"];
m8_321 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="354-354"];
m8_255 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="stats.Enqueued = multi.ReadSingle<int>()", span="345-345"];
m8_256 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="stats.Failed = multi.ReadSingle<int>()", span="346-346"];
m8_257 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="stats.Processing = multi.ReadSingle<int>()", span="347-347"];
m8_119 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="128-128"];
m8_120 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="194-199"];
m8_121 [cluster="lambda expression", color=green, community=0, file="SqlWriteTransaction.cs", label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    InDeletedState = DeletedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", prediction=4, span="194-199"];
m8_122 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="194-199"];
m8_6 [cluster="Unk.Setup", file="SqlWriteTransaction.cs", label="Entry Unk.Setup", span=""];
m8_15 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470"];
m8_16 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51"];
m8_17 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlWriteTransaction.cs", label="var queueApi = GetQueueApi(queue)", span="53-53"];
m8_18 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlWriteTransaction.cs", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="54-54"];
m8_293 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="dates.Add(endDate)", span="388-388"];
m8_294 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="endDate = endDate.AddDays(-1)", span="389-389"];
m8_295 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="i++", span="386-386"];
m8_50 [cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="SqlWriteTransaction.cs", label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23"];
m8_7 [cluster="Unk.nameof", file="SqlWriteTransaction.cs", label="Entry Unk.nameof", span=""];
m8_280 [cluster="System.DateTime.AddHours(double)", file="SqlWriteTransaction.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m8_112 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.SerializeData()", span="105-105"];
m8_160 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="_queueProviders.Add(correctProvider.Object, new [] { ''default'' })", span="170-170"];
m8_405 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="457-462"];
m8_32 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="70-70"];
m8_33 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="69-70"];
m8_34 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73"];
m8_35 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="SqlWriteTransaction.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="75-76"];
m8_169 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="172-172"];
m8_500 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="597-597"];
m8_501 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="599-605"];
m8_502 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="597-597"];
m8_146 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="142-142"];
m8_344 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439"];
m8_346 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="451-451"];
m8_52 [cluster="System.DateTime.AddDays(double)", file="SqlWriteTransaction.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m8_224 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.Value", span="278-278"];
m8_225 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="278-278"];
m8_226 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="282-290"];
m8_356 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="459-467"];
m8_357 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    InEnqueuedState = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueuedAt = EnqueuedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase)\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="459-467"];
m8_358 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="459-467"];
m8_137 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.NotNull(jobState.CreatedAt)", span="155-155"];
m8_441 [cluster="Unk.ToArray", file="SqlWriteTransaction.cs", label="Entry Unk.ToArray", span=""];
m8_319 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="397-397"];
m8_320 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="356-367"];
m8_299 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(1, recordCount)", span="334-334"];
m8_124 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="137-137"];
m8_125 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var state = new Mock<IState>()", span="139-139"];
m8_130 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var job = GetTestJob(sql, jobId)", span="147-147"];
m8_126 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="140-140"];
m8_127 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="141-141"];
m8_128 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="142-143"];
m8_129 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x => x.AddJobState(jobId, state.Object))", span="145-145"];
m8_131 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Null(job.StateName)", span="148-148"];
m8_132 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Null(job.StateId)", span="149-149"];
m8_133 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="151-151"];
m8_389 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="440-444"];
m8_5 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="37-37"];
m8_371 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="424-432"];
m8_0 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="16-16"];
m8_3 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlWriteTransaction.cs", label="_queueProviders = new PersistentJobQueueProviderCollection(defaultProvider.Object)", span="22-22"];
m8_4 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", span="16-16"];
m8_1 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlWriteTransaction.cs", label="var defaultProvider = new Mock<IPersistentJobQueueProvider>()", span="18-18"];
m8_2 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SqlServerWriteOnlyTransactionFacts()", file="SqlWriteTransaction.cs", label="defaultProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                .Returns(new Mock<IPersistentJobQueue>().Object)", span="19-20"];
m8_555 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="50-50"];
m8_114 [cluster="Unk.SerializeData", file="SqlWriteTransaction.cs", label="Entry Unk.SerializeData", span=""];
m8_115 [cluster="lambda expression", color=green, community=0, file="SqlWriteTransaction.cs", label="Entry lambda expression", prediction=5, span="108-108"];
m8_116 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.SetJobState(jobId, state.Object)", span="108-108"];
m8_281 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="305-305"];
m8_229 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="244-244"];
m8_352 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="392-396"];
m8_10 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45"];
m8_11 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434"];
m8_12 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="47-48"];
m8_20 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="51-51"];
m8_21 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426"];
m8_22 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="30-30"];
m8_38 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="GetNumberOfJobsByStateName(connection, ProcessingState.StateName)", span="76-76"];
m8_39 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="75-76"];
m8_37 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="75-76"];
m8_40 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79"];
m8_41 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="SqlWriteTransaction.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                }));", span="81-91"];
m8_43 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="81-91"];
m8_56 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94"];
m8_55 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlWriteTransaction.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    InScheduledState = ScheduledState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    EnqueueAt = JobHelper.DeserializeNullableDateTime(stateData[''EnqueueAt'']) ?? DateTime.MinValue,\r\n                    ScheduledAt = JobHelper.DeserializeNullableDateTime(stateData[''ScheduledAt''])\r\n                }));", span="96-106"];
m8_42 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="79-79"];
m8_44 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    InProcessingState = ProcessingState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeNullableDateTime(stateData[''StartedAt'']),\r\n                })", span="81-91"];
m8_45 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="81-91"];
m8_57 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="96-106"];
m8_65 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlWriteTransaction.cs", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="111-112"];
m8_66 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109"];
m8_64 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="109-109"];
m8_67 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="111-112"];
m8_68 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="GetTimelineStats(connection, ''succeeded'')", span="112-112"];
m8_70 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382"];
m8_75 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="GetTimelineStats(connection, ''failed'')", span="118-118"];
m8_74 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="117-118"];
m8_69 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="111-112"];
m8_71 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115"];
m8_72 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlWriteTransaction.cs", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="117-118"];
m8_76 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="117-118"];
m8_83 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var result = new List<ServerDto>()", span="129-129"];
m8_84 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=servers, span="132-132"];
m8_82 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var servers = connection.Query<Entities.Server>(\r\n                    $@''select * from [{_storage.SchemaName}].Server with (nolock)'', commandTimeout: _storage.CommandTimeout)\r\n                    .ToList()", span="125-127"];
m8_89 [cluster="Unk.ToList", file="SqlWriteTransaction.cs", label="Entry Unk.ToList", span=""];
m8_93 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149"];
m8_96 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="151-165"];
m8_97 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", span="151-165"];
m8_85 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="134-134"];
m8_86 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt ?? DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="135-142"];
m8_87 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="return result;", span="145-145"];
m8_88 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="123-146"];
m8_105 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168"];
m8_108 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="170-184"];
m8_111 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="175-184"];
m8_92 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlWriteTransaction.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m8_94 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlWriteTransaction.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="151-165"];
m8_95 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="149-149"];
m8_98 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="151-165"];
m8_99 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="156-165"];
m8_100 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    InFailedState = FailedState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", span="156-165"];
m8_101 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="156-165"];
m8_106 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.Name", span="103-103"];
m8_107 [cluster="lambda expression", color=green, community=0, file="SqlWriteTransaction.cs", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", prediction=6, span="170-184"];
m8_109 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.Reason", span="104-104"];
m8_110 [cluster="lambda expression", color=green, community=0, file="SqlWriteTransaction.cs", label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    InSucceededState = SucceededState.StateName.Equals(sqlJob.StateName, StringComparison.OrdinalIgnoreCase),\r\n                    Result = stateData[''Result''],\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", prediction=7, span="175-184"];
m8_117 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="189-199"];
m8_123 [cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="SqlWriteTransaction.cs", label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7"];
m8_150 [cluster="Unk.GetQueues", file="SqlWriteTransaction.cs", label="Entry Unk.GetQueues", span=""];
m8_134 [cluster="Unk.Select", file="SqlWriteTransaction.cs", label="Entry Unk.Select", span=""];
m8_140 [cluster="Unk.GetEnqueuedAndFetchedCount", file="SqlWriteTransaction.cs", label="Entry Unk.GetEnqueuedAndFetchedCount", span=""];
m8_143 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="205-205"];
m8_149 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="206-206"];
m8_135 [cluster="Unk.SelectMany", file="SqlWriteTransaction.cs", label="Entry Unk.SelectMany", span=""];
m8_136 [cluster="Unk.OrderBy", file="SqlWriteTransaction.cs", label="Entry Unk.OrderBy", span=""];
m8_138 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="SqlWriteTransaction.cs", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
m8_139 [cluster="Unk.GetEnqueuedJobIds", file="SqlWriteTransaction.cs", label="Entry Unk.GetEnqueuedJobIds", span=""];
m8_141 [cluster="Unk.UseConnection", file="SqlWriteTransaction.cs", label="Entry Unk.UseConnection", span=""];
m8_144 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.GetJobQueueMonitoringApi()", span="205-205"];
m8_145 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="205-205"];
m8_147 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="206-206"];
m8_148 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.GetQueues()", span="206-206"];
m8_151 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="206-206"];
m8_156 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="207-207"];
m8_157 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="219-220"];
m8_161 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="220-220"];
m8_158 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray())", span="220-220"];
m8_159 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="219-220"];
m8_162 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="(long)x", span="220-220"];
m8_166 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlWriteTransaction.cs", label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="237-237"];
m8_163 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="220-220"];
m8_173 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="240-240"];
m8_167 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlWriteTransaction.cs", label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray()));", span="240-240"];
m8_168 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234"];
m8_170 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="240-240"];
m8_171 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="EnqueuedJobs(connection, enqueuedJobIds.Select(x => (long)x).ToArray())", span="240-240"];
m8_174 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="(long)x", span="240-240"];
m8_175 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="240-240"];
m8_183 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="FetchedJobs(connection, fetchedJobIds.Select(x => (long)x).ToArray())", span="249-249"];
m8_184 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="249-249"];
m8_190 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlWriteTransaction.cs", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="254-255"];
m8_186 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="249-249"];
m8_187 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="(long)x", span="249-249"];
m8_188 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="249-249"];
m8_189 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252"];
m8_191 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="252-252"];
m8_192 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="254-255"];
m8_199 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="260-261"];
m8_208 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="275-275"];
m8_200 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="GetHourlyTimelineStats(connection, ''failed'')", span="261-261"];
m8_201 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="260-261"];
m8_202 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264"];
m8_203 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlWriteTransaction.cs", label="return UseConnection(connection =>\r\n            {\r\n                string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }, commandTimeout: _storage.CommandTimeout))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="266-302"];
m8_204 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="264-264"];
m8_205 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="266-302"];
m8_206 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="string sql = $@''\r\nselect * from [{_storage.SchemaName}].Job with (nolock) where Id = @id\r\nselect * from [{_storage.SchemaName}].JobParameter with (nolock) where JobId = @id\r\nselect * from [{_storage.SchemaName}].State with (nolock) where JobId = @id order by Id desc''", span="268-271"];
m8_209 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="job == null", span="276-276"];
m8_210 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="return null;", span="276-276"];
m8_215 [cluster="Unk.QueryMultiple", file="SqlWriteTransaction.cs", label="Entry Unk.QueryMultiple", span=""];
m8_216 [cluster="Unk.SingleOrDefault", file="SqlWriteTransaction.cs", label="Entry Unk.SingleOrDefault", span=""];
m8_217 [cluster="Unk.ToDictionary", file="SqlWriteTransaction.cs", label="Entry Unk.ToDictionary", span=""];
m8_220 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="278-278"];
m8_218 [cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="SqlWriteTransaction.cs", label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22"];
m8_219 [cluster="Unk.DeserializeJob", file="SqlWriteTransaction.cs", label="Entry Unk.DeserializeJob", span=""];
m8_221 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.IncrementCounter(''my-key'')", span="227-227"];
m8_222 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.IncrementCounter(''my-key'')", span="228-228"];
m8_223 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="278-278"];
m8_227 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new SafeDictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            }", span="282-290"];
m8_228 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="282-290"];
m8_234 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="307-308"];
m8_231 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305"];
m8_232 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlWriteTransaction.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="307-308"];
m8_233 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="305-305"];
m8_235 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", span="308-308"];
m8_236 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="307-308"];
m8_241 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="314-314"];
m8_242 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="313-314"];
m8_251 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="SqlWriteTransaction.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m8_249 [cluster="string.Format(string, object)", file="SqlWriteTransaction.cs", label="Entry string.Format(string, object)", span="0-0"];
m8_252 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="340-358"];
m8_253 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var stats = new StatisticsDto()", span="342-342"];
m8_258 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="stats.Scheduled = multi.ReadSingle<int>()", span="348-348"];
m8_259 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="stats.Servers = multi.ReadSingle<int>()", span="350-350"];
m8_260 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="stats.Succeeded = multi.ReadSingleOrDefault<long?>() ?? 0", span="352-352"];
m8_263 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="return stats;", span="357-357"];
m8_261 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="stats.Deleted = multi.ReadSingleOrDefault<long?>() ?? 0", span="353-353"];
m8_262 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="stats.Recurring = multi.ReadSingle<int>()", span="355-355"];
m8_264 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="340-358"];
m8_265 [cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="SqlWriteTransaction.cs", label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18"];
m8_266 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="361-361"];
m8_270 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="var endDate = DateTime.UtcNow", span="369-369"];
m8_271 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="var dates = new List<DateTime>()", span="370-370"];
m8_272 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="var i = 0", span="371-371"];
m8_277 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd-HH'')}'', x => x)", span="377-377"];
m8_273 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="i < 24", span="371-371"];
m8_274 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="dates.Add(endDate)", span="373-373"];
m8_275 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="endDate = endDate.AddHours(-1)", span="374-374"];
m8_276 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="i++", span="371-371"];
m8_278 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="return GetTimelineStats(connection, keyMaps);", span="379-379"];
m8_279 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(DbConnection, string)", span="367-367"];
m8_284 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="377-377"];
m8_285 [cluster="System.DateTime.ToString(string)", file="SqlWriteTransaction.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m8_286 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="377-377"];
m8_289 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="var endDate = DateTime.UtcNow.Date", span="384-384"];
m8_287 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=x, span="377-377"];
m8_288 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="377-377"];
m8_290 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="var dates = new List<DateTime>()", span="385-385"];
m8_291 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="var i = 0", span="386-386"];
m8_292 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="i < 7", span="386-386"];
m8_296 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="var keyMaps = dates.ToDictionary(x => $''stats:{type}:{x.ToString(''yyyy-MM-dd'')}'', x => x)", span="392-392"];
m8_297 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="return GetTimelineStats(connection, keyMaps);", span="394-394"];
m8_298 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, string)", span="382-382"];
m8_301 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="$''stats:{type}:{x.ToString(''yyyy-MM-dd'')}''", span="392-392"];
m8_300 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="392-392"];
m8_302 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="392-392"];
m8_303 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="392-392"];
m8_304 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=x, span="392-392"];
m8_308 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="405-409"];
m8_309 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="keyMaps.Keys", span="411-411"];
m8_310 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="!valuesMap.ContainsKey(key)", span="413-413"];
m8_315 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="419-419"];
m8_311 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="valuesMap.Add(key, 0)", span="413-413"];
m8_312 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="var result = new Dictionary<DateTime, long>()", span="416-416"];
m8_313 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="var i = 0", span="417-417"];
m8_314 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="i < keyMaps.Count", span="417-417"];
m8_316 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="result.Add(keyMaps.ElementAt(i).Value, value)", span="420-420"];
m8_317 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="i++", span="417-417"];
m8_322 [cluster="Unk.Add", file="SqlWriteTransaction.cs", label="Entry Unk.Add", span=""];
m8_323 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlWriteTransaction.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m8_324 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="SqlWriteTransaction.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
m8_327 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="358-362"];
m8_325 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(3.2, record.Score, 3)", span="366-366"];
m8_326 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="356-367"];
m8_328 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="409-409"];
m8_329 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="(long)x.Count", span="409-409"];
m8_330 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="409-409"];
m8_334 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="426-426"];
m8_335 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m8_336 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="SqlWriteTransaction.cs", label="return _storage.UseConnection(action);", span="436-436"];
m8_339 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", span="439-439"];
m8_337 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<DbConnection, T>)", span="434-434"];
m8_340 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlWriteTransaction.cs", label="string enqueuedJobsSql = \r\n$@''select j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\nleft join [{_storage.SchemaName}].State s with (nolock) on s.Id = j.StateId\r\nwhere j.Id in @jobIds''", span="441-445"];
m8_341 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlWriteTransaction.cs", label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToDictionary(x => x.Id, x => x)", span="447-451"];
m8_342 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(DbConnection, long[])", file="SqlWriteTransaction.cs", label="var sortedSqlJobs = jobIds\r\n                .Select(jobId => jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId })\r\n                .ToList()", span="453-455"];
m8_347 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.Id", span="451-451"];
m8_348 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="451-451"];
m8_349 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="451-451"];
m8_350 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=x, span="451-451"];
m8_351 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="451-451"];
m8_353 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="jobs.ContainsKey(jobId) ? jobs[jobId] : new SqlJob { Id = jobId }", span="454-454"];
m8_354 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="454-454"];
m8_359 [cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="SqlWriteTransaction.cs", label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23"];
m8_360 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="SqlWriteTransaction.cs", label="var sqlQuery = _jobListLimit.HasValue\r\n                ? $@''select count(j.Id) from (select top (@limit) Id from [{_storage.SchemaName}].Job with (nolock) where StateName = @state) as j''\r\n                : $@''select count(Id) from [{_storage.SchemaName}].Job with (nolock) where StateName = @state''", span="472-474"];
m8_361 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="SqlWriteTransaction.cs", label="var count = connection.ExecuteScalar<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName, limit = _jobListLimit },\r\n                 commandTimeout: _storage.CommandTimeout)", span="476-479"];
m8_364 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="484-484"];
m8_362 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="SqlWriteTransaction.cs", label="return count;", span="481-481"];
m8_363 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(DbConnection, string)", span="470-470"];
m8_365 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlWriteTransaction.cs", label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="486-486"];
m8_366 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlWriteTransaction.cs", label="data.Arguments = arguments", span="487-487"];
m8_367 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlWriteTransaction.cs", label="return data.Deserialize();", span="491-491"];
m8_373 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlWriteTransaction.cs", label="string jobsSql = \r\n$@'';with cte as \r\n(\r\n  select j.Id, row_number() over (order by j.Id desc) as row_num\r\n  from [{_storage.SchemaName}].Job j with (nolock, forceseek)\r\n  where j.StateName = @stateName\r\n)\r\nselect j.*, s.Reason as StateReason, s.Data as StateData\r\nfrom [{_storage.SchemaName}].Job j with (nolock)\r\ninner join cte on cte.Id = j.Id \r\nleft join [{_storage.SchemaName}].State s with (nolock) on j.StateId = s.Id\r\nwhere cte.row_num between @start and @end\r\norder by j.Id desc''", span="506-518"];
m8_374 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlWriteTransaction.cs", label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count },\r\n                        commandTimeout: _storage.CommandTimeout)\r\n                        .ToList()", span="520-524"];
m8_375 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlWriteTransaction.cs", label="return DeserializeJobs(jobs, selector);", span="526-526"];
m8_376 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(DbConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="499-499"];
m8_388 [cluster="System.Collections.Generic.List<T>.List(int)", file="SqlWriteTransaction.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m8_392 [cluster="long.ToString()", file="SqlWriteTransaction.cs", label="Entry long.ToString()", span="0-0"];
m8_396 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlWriteTransaction.cs", label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds },\r\n                commandTimeout: _storage.CommandTimeout)\r\n                .ToList()", span="565-569"];
m8_397 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlWriteTransaction.cs", label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="571-571"];
m8_398 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlWriteTransaction.cs", label=jobs, span="574-574"];
m8_401 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", span="557-557"];
m8_399 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlWriteTransaction.cs", label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                    }))", span="576-582"];
m8_400 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(DbConnection, System.Collections.Generic.IEnumerable<long>)", file="SqlWriteTransaction.cs", label="return new JobList<FetchedJobDto>(result);", span="585-585"];
m8_402 [cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", file="SqlWriteTransaction.cs", label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span=""];
m8_403 [cluster="KeyValuePair<string, FetchedJobDto>.cstr", file="SqlWriteTransaction.cs", label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span=""];
m8_410 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=int, span=""];
m8_411 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=int, span=""];
m8_412 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=int, span=""];
m8_415 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=int, span=""];
m8_413 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=int, span=""];
m8_414 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=int, span=""];
m8_416 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=int, span=""];
m8_417 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=enqueuedJobIds, span=""];
m8_418 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=enqueuedJobIds, span=""];
m8_422 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=string, span=""];
m8_423 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=string, span=""];
m8_424 [cluster="lambda expression", file="SqlWriteTransaction.cs", label=jobs, span=""];
m8_427 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="492-496"];
m8_425 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(1, recordCount)", span="500-500"];
m8_426 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="490-501"];
m8_428 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="494-494"];
m8_429 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.RemoveFromList(''different-key'', ''my-value'')", span="495-495"];
m8_430 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="492-496"];
m8_434 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="507-523"];
m8_435 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="509-516"];
m8_436 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="518-518"];
m8_442 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="509-516"];
m8_437 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(2, records.Length)", span="520-520"];
m8_438 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(''1'', records[0].Value)", span="521-521"];
m8_439 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(''2'', records[1].Value)", span="522-522"];
m8_440 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="507-523"];
m8_443 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''0'')", span="511-511"];
m8_444 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''1'')", span="512-512"];
m8_445 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''2'')", span="513-513"];
m8_446 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''3'')", span="514-514"];
m8_447 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.TrimList(''my-key'', 1, 2)", span="515-515"];
m8_448 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="509-516"];
m8_453 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="529-542"];
m8_454 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="531-537"];
m8_455 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="539-539"];
m8_458 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="531-537"];
m8_456 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(2, recordCount)", span="541-541"];
m8_457 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="529-542"];
m8_459 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''0'')", span="533-533"];
m8_460 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''1'')", span="534-534"];
m8_461 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''2'')", span="535-535"];
m8_462 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.TrimList(''my-key'', 1, 100)", span="536-536"];
m8_463 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="531-537"];
m8_467 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="548-559"];
m8_468 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="550-554"];
m8_469 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="556-556"];
m8_472 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="550-554"];
m8_470 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(0, recordCount)", span="558-558"];
m8_471 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="548-559"];
m8_473 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''0'')", span="552-552"];
m8_474 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.TrimList(''my-key'', 1, 100)", span="553-553"];
m8_475 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="550-554"];
m8_479 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="565-576"];
m8_480 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="567-571"];
m8_481 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="573-573"];
m8_484 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="567-571"];
m8_482 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(0, recordCount)", span="575-575"];
m8_483 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="565-576"];
m8_485 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''0'')", span="569-569"];
m8_486 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.TrimList(''my-key'', 1, 0)", span="570-570"];
m8_487 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="567-571"];
m8_491 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="582-593"];
m8_492 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="584-588"];
m8_493 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="590-590"];
m8_496 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="584-588"];
m8_494 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(1, recordCount)", span="592-592"];
m8_495 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="582-593"];
m8_497 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.InsertToList(''my-key'', ''0'')", span="586-586"];
m8_498 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.TrimList(''another-key'', 1, 0)", span="587-587"];
m8_499 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="584-588"];
m8_503 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="599-605"];
m8_504 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())))", span="601-602"];
m8_508 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()))", span="602-602"];
m8_505 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(''key'', exception.ParamName)", span="604-604"];
m8_507 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="602-602"];
m8_506 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="599-605"];
m8_509 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="602-602"];
m8_510 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="602-602"];
m8_511 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="602-602"];
m8_512 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="602-602"];
m8_517 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="611-617"];
m8_518 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)))", span="613-614"];
m8_522 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null))", span="614-614"];
m8_519 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="616-616"];
m8_521 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="614-614"];
m8_520 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="611-617"];
m8_523 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="614-614"];
m8_524 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="614-614"];
m8_525 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.SetRangeInHash(''some-hash'', null)", span="614-614"];
m8_526 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="614-614"];
m8_530 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="623-638"];
m8_531 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="625-629"];
m8_532 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="631-634"];
m8_537 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="625-629"];
m8_533 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="636-636"];
m8_540 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="634-634"];
m8_543 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Entry lambda expression", span="634-634"];
m8_534 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="637-637"];
m8_535 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="623-638"];
m8_538 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="625-629"];
m8_539 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="625-629"];
m8_541 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="(string)x.Field", span="634-634"];
m8_542 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="634-634"];
m8_544 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="(string)x.Value", span="634-634"];
m8_545 [cluster="lambda expression", file="SqlWriteTransaction.cs", label="Exit lambda expression", span="634-634"];
m8_118 [cluster="Unk.SetJobState", color=green, community=0, file="SqlWriteTransaction.cs", label="Entry Unk.SetJobState", prediction=5, span=""];
m8_13 [cluster="Unk.>", file="SqlWriteTransaction.cs", label="Entry Unk.>", span=""];
m8_58 [cluster="System.TimeSpan.FromDays(double)", file="SqlWriteTransaction.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m8_193 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="127-127"];
m8_207 [cluster="System.DateTime.AddHours(double)", file="SqlWriteTransaction.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m8_254 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="148-148"];
m8_14 [cluster="Unk.GetJobQueue", file="SqlWriteTransaction.cs", label="Entry Unk.GetJobQueue", span=""];
m8_47 [cluster="Unk.Single", file="SqlWriteTransaction.cs", label="Entry Unk.Single", span=""];
m8_59 [cluster="Unk.ExpireJob", file="SqlWriteTransaction.cs", label="Entry Unk.ExpireJob", span=""];
m8_81 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="90-90"];
m8_172 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="119-119"];
m8_182 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue()", span="186-186"];
m8_194 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="201-201"];
m8_211 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="134-134"];
m8_240 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="253-253"];
m8_283 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="305-305"];
m8_282 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="307-318"];
m8_23 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35"];
m8_24 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="35-35"];
m8_25 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlWriteTransaction.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null))", span="37-38"];
m8_26 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlWriteTransaction.cs", label="Assert.Equal(''queueProviders'', exception.ParamName)", span="40-40"];
m8_27 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfProvidersCollectionIsNull()", span="35-35"];
m8_393 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="453-453"];
m8_394 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="455-467"];
m8_395 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="453-453"];
m8_103 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168"];
m8_51 [cluster="string.Equals(string, System.StringComparison)", file="SqlWriteTransaction.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m8_36 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="73-73"];
m8_104 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", color=green, community=0, file="SqlWriteTransaction.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", prediction=5, span="0-0"];
m8_19 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlWriteTransaction.cs", label="return counters.EnqueuedCount ?? 0;", span="56-56"];
m8_318 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(DbConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", file="SqlWriteTransaction.cs", label="return result;", span="423-423"];
m8_195 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="203-217"];
m8_46 [cluster="Unk.Query", file="SqlWriteTransaction.cs", label="Entry Unk.Query", span=""];
m8_464 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="546-546"];
m8_465 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="548-559"];
m8_466 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex()", span="546-546"];
m8_476 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="563-563"];
m8_477 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="565-576"];
m8_478 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="563-563"];
m8_8 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="45-45"];
m8_9 [cluster="PersistentJobQueueProviderCollection.cstr", file="SqlWriteTransaction.cs", label="Entry PersistentJobQueueProviderCollection.cstr", span=""];
m8_550 [cluster="System.Action<T>.Invoke(T)", file="SqlWriteTransaction.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m8_164 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="234-234"];
m8_73 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlWriteTransaction.cs", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="115-115"];
m8_54 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlWriteTransaction.cs", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="94-94"];
m8_77 [cluster="Unk.PersistJob", file="SqlWriteTransaction.cs", label="Entry Unk.PersistJob", span=""];
m8_78 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="90-90"];
m8_79 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="SqlWriteTransaction.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="92-95"];
m8_488 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="580-580"];
m8_489 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="582-593"];
m8_490 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey()", span="580-580"];
m8_165 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlWriteTransaction.cs", label="var queueApi = GetQueueApi(queue)", span="236-236"];
m8_513 [cluster="HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="207-207"];
m8_536 [cluster="Unk.ToDictionary", file="SqlWriteTransaction.cs", label="Entry Unk.ToDictionary", span=""];
m8_80 [cluster="Unk.>", file="SqlWriteTransaction.cs", label="Entry Unk.>", span=""];
m8_53 [cluster="Unk.True", file="SqlWriteTransaction.cs", label="Entry Unk.True", span=""];
m8_546 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="641-641"];
m8_547 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlWriteTransaction.cs", label="var connection = ConnectionUtils.CreateConnection()", span="643-643"];
m8_548 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlWriteTransaction.cs", label="action(connection)", span="645-645"];
m8_549 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="641-641"];
m8_514 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="609-609"];
m8_515 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="611-617"];
m8_516 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="609-609"];
m8_450 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlWriteTransaction.cs", label="Entry HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="527-527"];
m8_451 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlWriteTransaction.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="529-542"];
m8_452 [cluster="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", file="SqlWriteTransaction.cs", label="Exit HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex()", span="527-527"];
m8_556 [file="SqlWriteTransaction.cs", label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span=""];
m8_557 [file="SqlWriteTransaction.cs", label=arrangeSql, span=""];
m8_558 [file="SqlWriteTransaction.cs", label=jobId, span=""];
m8_559 [file="SqlWriteTransaction.cs", label=arrangeSql, span=""];
m8_560 [file="SqlWriteTransaction.cs", label=jobId, span=""];
m8_561 [file="SqlWriteTransaction.cs", label=arrangeSql, span=""];
m8_562 [file="SqlWriteTransaction.cs", label=jobId, span=""];
m8_563 [file="SqlWriteTransaction.cs", label=state, span=""];
m8_564 [file="SqlWriteTransaction.cs", label=arrangeSql, span=""];
m8_565 [file="SqlWriteTransaction.cs", label=jobId, span=""];
m8_566 [file="SqlWriteTransaction.cs", label=state, span=""];
m8_567 [file="SqlWriteTransaction.cs", label=SqlConnection, span=""];
m8_568 [file="SqlWriteTransaction.cs", label=SqlConnection, span=""];
m9_39 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="StatisticsHistoryFilterAttribute.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m9_107 [cluster="Unk.EnqueueItemOnList", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.EnqueueItemOnList", span=""];
m9_24 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", span="47-47"];
m9_22 [cluster="HangFire.States.JobState.RegisterDescriptor(string, HangFire.States.JobStateDescriptor)", file="StatisticsHistoryFilterAttribute.cs", label="Exit HangFire.States.JobState.RegisterDescriptor(string, HangFire.States.JobStateDescriptor)", span="41-41"];
m9_99 [cluster="Unk.SetRangeInHash", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.SetRangeInHash", span=""];
m9_43 [cluster="System.TimeSpan.FromMinutes(double)", file="StatisticsHistoryFilterAttribute.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m9_73 [cluster="Unk.Apply", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.Apply", span=""];
m9_45 [cluster="HangFire.IJobStateChangingFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.IJobStateChangingFilter.OnStateChanged(IRedisClient, HangFire.States.JobState)", span="8-8"];
m9_55 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                        String.Format(''hangfire:job:{0}:state'', state.JobId)))", span="99-100"];
m9_47 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", span="77-77"];
m9_48 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="var oldState = redis.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', state.JobId), ''State'')", span="82-83"];
m9_49 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="allowedStates.Length > 0 && !allowedStates.Contains(oldState)", span="85-85"];
m9_51 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="var transaction = redis.CreateTransaction()", span="90-90"];
m9_54 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="Descriptors[oldState].Unapply(transaction, state.JobId)", span="96-96"];
m9_56 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label=filters, span="102-102"];
m9_58 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="AppendHistory(transaction, state, true)", span="108-108"];
m9_59 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="state.Apply(transaction)", span="110-110"];
m9_60 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label=filters, span="112-112"];
m9_61 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="filter.OnStateApplied(transaction, state)", span="114-114"];
m9_50 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="return false;", span="87-87"];
m9_62 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="return transaction.Commit();", span="117-117"];
m9_52 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="!String.IsNullOrEmpty(oldState)", span="92-92"];
m9_53 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="Descriptors.ContainsKey(oldState)", span="94-94"];
m9_57 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="filter.OnStateUnapplied(transaction, oldState)", span="104-104"];
m9_63 [cluster="HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="Exit HangFire.States.JobState.ApplyState(IRedisClient, HangFire.States.JobState, System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>, params string[])", span="77-77"];
m9_106 [cluster="HangFire.JobHelper.ToJson(object)", file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.JobHelper.ToJson(object)", span="32-32"];
m9_95 [cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="55-55"];
m9_79 [cluster="Unk.RemoveEntry", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.RemoveEntry", span=""];
m9_71 [cluster="Unk.OnStateUnapplied", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.OnStateUnapplied", span=""];
m9_3 [cluster="HangFire.Filters.StatisticsHistoryFilterAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.Filters.StatisticsHistoryFilterAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", span="30-30"];
m9_4 [cluster="HangFire.Filters.StatisticsHistoryFilterAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="StatisticsHistoryFilterAttribute.cs", label="var transaction = context.Connection.CreateWriteTransaction()", span="32-32"];
m9_5 [cluster="HangFire.Filters.StatisticsHistoryFilterAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="StatisticsHistoryFilterAttribute.cs", label="context.CandidateState.StateName == SucceededState.Name", span="34-34"];
m9_12 [cluster="HangFire.States.JobState.JobState()", color=green, community=0, file="StatisticsHistoryFilterAttribute.cs", label="RegisterDescriptor(ProcessingState.Name, new ProcessingStateDescriptor())", prediction=10, span="36-36"];
m9_14 [cluster="HangFire.States.JobState.JobState()", color=green, community=0, file="StatisticsHistoryFilterAttribute.cs", label="RegisterDescriptor(SucceededState.Name, new SucceededStateDescriptor())", prediction=11, span="38-38"];
m9_19 [cluster="HangFire.States.ScheduledStateDescriptor.ScheduledStateDescriptor()", file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.States.ScheduledStateDescriptor.ScheduledStateDescriptor()", span="5-5"];
m9_13 [cluster="HangFire.States.JobState.JobState()", color=green, community=0, file="StatisticsHistoryFilterAttribute.cs", label="RegisterDescriptor(ScheduledState.Name, new ScheduledStateDescriptor())", prediction=12, span="37-37"];
m9_20 [cluster="HangFire.States.SucceededStateDescriptor.SucceededStateDescriptor()", file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.States.SucceededStateDescriptor.SucceededStateDescriptor()", span="5-5"];
m9_84 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", span="131-131"];
m9_90 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="properties.Add(''State'', state.StateName)", span="151-151"];
m9_91 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="properties.Add(''Reason'', state.Reason)", span="152-152"];
m9_92 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="properties.Add(''CreatedAt'', JobHelper.ToStringTimestamp(now))", span="153-153"];
m9_85 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="var properties = state.GetProperties()", span="134-134"];
m9_87 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label=appendToJob, span="137-137"];
m9_89 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}:state'', state.JobId),\r\n                    properties))", span="146-148"];
m9_86 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="var now = DateTime.UtcNow", span="135-135"];
m9_93 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(''hangfire:job:{0}:history'', state.JobId),\r\n                JobHelper.ToJson(properties)))", span="155-157"];
m9_88 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}'', state.JobId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''State'', state.StateName },\r\n                        }))", span="139-144"];
m9_94 [cluster="HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="Exit HangFire.States.JobState.AppendHistory(IRedisTransaction, HangFire.States.JobState, bool)", span="131-131"];
m9_21 [cluster="HangFire.States.JobState.RegisterDescriptor(string, HangFire.States.JobStateDescriptor)", color=green, community=0, file="StatisticsHistoryFilterAttribute.cs", label="Descriptors.Add(stateName, descriptor)", prediction=13, span="44-44"];
m9_27 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", color=green, community=0, file="StatisticsHistoryFilterAttribute.cs", label="state == null", prediction=14, span="51-51"];
m9_74 [cluster="Unk.OnStateApplied", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.OnStateApplied", span=""];
m9_25 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", color=green, community=0, file="StatisticsHistoryFilterAttribute.cs", label="redis == null", prediction=15, span="50-50"];
m9_28 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", color=green, community=0, file="StatisticsHistoryFilterAttribute.cs", label="throw new ArgumentNullException(''state'');", prediction=16, span="51-51"];
m9_41 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="StatisticsHistoryFilterAttribute.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m9_69 [cluster="Unk.Unapply", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.Unapply", span=""];
m9_0 [cluster="HangFire.Filters.StatisticsHistoryFilterAttribute.StatisticsHistoryFilterAttribute()", file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.Filters.StatisticsHistoryFilterAttribute.StatisticsHistoryFilterAttribute()", span="25-25"];
m9_1 [cluster="HangFire.Filters.StatisticsHistoryFilterAttribute.StatisticsHistoryFilterAttribute()", file="StatisticsHistoryFilterAttribute.cs", label="Order = 30", span="27-27"];
m9_2 [cluster="HangFire.Filters.StatisticsHistoryFilterAttribute.StatisticsHistoryFilterAttribute()", file="StatisticsHistoryFilterAttribute.cs", label="Exit HangFire.Filters.StatisticsHistoryFilterAttribute.StatisticsHistoryFilterAttribute()", span="25-25"];
m9_40 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="StatisticsHistoryFilterAttribute.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m9_76 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="Entry lambda expression", span="99-100"];
m9_97 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}'', state.JobId),\r\n                    new Dictionary<string, string>\r\n                        {\r\n                            { ''State'', state.StateName },\r\n                        })", span="139-144"];
m9_101 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}:state'', state.JobId),\r\n                    properties)", span="146-148"];
m9_104 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="x.EnqueueItemOnList(\r\n                String.Format(''hangfire:job:{0}:history'', state.JobId),\r\n                JobHelper.ToJson(properties))", span="155-157"];
m9_100 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="Entry lambda expression", span="146-148"];
m9_103 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="Entry lambda expression", span="155-157"];
m9_77 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="x.RemoveEntry(\r\n                        String.Format(''hangfire:job:{0}:state'', state.JobId))", span="99-100"];
m9_96 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="Entry lambda expression", span="139-144"];
m9_98 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="Exit lambda expression", span="139-144"];
m9_102 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="Exit lambda expression", span="146-148"];
m9_105 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="Exit lambda expression", span="155-157"];
m9_78 [cluster="lambda expression", file="StatisticsHistoryFilterAttribute.cs", label="Exit lambda expression", span="99-100"];
m9_65 [cluster="Unk.Contains", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.Contains", span=""];
m9_26 [cluster="HangFire.Storage.IWriteableStoredValues.ExpireIn(string, System.TimeSpan)", color=green, community=0, file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.Storage.IWriteableStoredValues.ExpireIn(string, System.TimeSpan)", prediction=17, span="9-9"];
m9_29 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", color=green, community=0, file="StatisticsHistoryFilterAttribute.cs", label="HangFire.Filters.StatisticsHistoryFilterAttribute", prediction=18, span=""];
m9_30 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", color=green, community=0, file="StatisticsHistoryFilterAttribute.cs", label="redis.AcquireLock(\r\n                String.Format(''hangfire:job:{0}:state-lock'', state.JobId), TimeSpan.FromMinutes(1))", prediction=14, span="56-57"];
m9_31 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", color=green, community=0, file="StatisticsHistoryFilterAttribute.cs", label=changingFilters, prediction=18, span="59-59"];
m9_35 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="AppendHistory(redis, oldState, false)", span="66-66"];
m9_34 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="oldState != state", span="64-64"];
m9_32 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="var oldState = state", span="61-61"];
m9_36 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="var appliedFilters = GlobalJobFilters.Filters\r\n                    .OfType<IJobStateAppliedFilter>().ToList()", span="70-71"];
m9_33 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="state = filter.OnStateChanged(redis, oldState)", span="62-62"];
m9_37 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="return ApplyState(redis, state, appliedFilters, allowedStates);", span="73-73"];
m9_38 [cluster="HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", file="StatisticsHistoryFilterAttribute.cs", label="Exit HangFire.States.JobState.Apply(IRedisClient, HangFire.States.JobState, params string[])", span="47-47"];
m9_46 [cluster="HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="Entry HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", span="121-121"];
m9_80 [cluster="HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="var transaction = redis.CreateTransaction()", span="124-124"];
m9_81 [cluster="HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="AppendHistory(transaction, state, appendToJob)", span="126-126"];
m9_82 [cluster="HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="transaction.Commit()", span="127-127"];
m9_83 [cluster="HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", file="StatisticsHistoryFilterAttribute.cs", label="Exit HangFire.States.JobState.AppendHistory(IRedisClient, HangFire.States.JobState, bool)", span="121-121"];
m9_64 [cluster="Unk.GetValueFromHash", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.GetValueFromHash", span=""];
m9_75 [cluster="Unk.Commit", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.Commit", span=""];
m9_67 [cluster="Unk.IsNullOrEmpty", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.IsNullOrEmpty", span=""];
m9_70 [cluster="Unk.QueueCommand", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.QueueCommand", span=""];
m9_23 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="StatisticsHistoryFilterAttribute.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m9_72 [cluster="Unk.AppendHistory", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.AppendHistory", span=""];
m9_44 [cluster="Unk.AcquireLock", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.AcquireLock", span=""];
m9_66 [cluster="Unk.CreateTransaction", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.CreateTransaction", span=""];
m9_68 [cluster="Unk.ContainsKey", file="StatisticsHistoryFilterAttribute.cs", label="Entry Unk.ContainsKey", span=""];
m9_110 [file="StatisticsHistoryFilterAttribute.cs", label="HangFire.States.JobState", span=""];
m9_111 [file="StatisticsHistoryFilterAttribute.cs", label=properties, span=""];
m9_109 [file="StatisticsHistoryFilterAttribute.cs", label="HangFire.States.JobState", span=""];
m10_12 [cluster="HangFire.Storage.IWriteableStoredValues.Increment(string)", file="SucceededState.cs", label="Entry HangFire.Storage.IWriteableStoredValues.Increment(string)", span="6-6"];
m10_7 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="SucceededState.cs", label="Entry HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", span="46-46"];
m10_9 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", color=green, community=0, file="SucceededState.cs", label="context.Transaction.Values.Increment(''stats:succeeded'')", prediction=21, span="50-50"];
m10_8 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="SucceededState.cs", label="context.Transaction.Jobs.Expire(context.JobId, JobExpirationTimeout)", span="49-49"];
m10_10 [cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", file="SucceededState.cs", label="Exit HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, System.Collections.Generic.IDictionary<string, string>)", span="46-46"];
m10_18 [cluster="HangFire.Storage.IWriteableStoredJobs.Persist(string)", file="SucceededState.cs", label="Entry HangFire.Storage.IWriteableStoredJobs.Persist(string)", span="8-8"];
m10_17 [cluster="HangFire.Storage.IWriteableStoredValues.Decrement(string)", file="SucceededState.cs", label="Entry HangFire.Storage.IWriteableStoredValues.Decrement(string)", span="7-7"];
m10_13 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SucceededState.cs", label="Entry HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", span="53-53"];
m10_14 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="SucceededState.cs", label="context.Transaction.Values.Decrement(''stats:succeeded'')", prediction=22, span="55-55"];
m10_15 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SucceededState.cs", label="context.Transaction.Jobs.Persist(context.JobId)", span="56-56"];
m10_16 [cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SucceededState.cs", label="Exit HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", span="53-53"];
m10_11 [cluster="HangFire.Storage.IWriteableStoredJobs.Expire(string, System.TimeSpan)", file="SucceededState.cs", label="Entry HangFire.Storage.IWriteableStoredJobs.Expire(string, System.TimeSpan)", span="7-7"];
n30 -> n14  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Components.ExpirationManager", style=dashed];
n30 -> n15  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Components.ExpirationManager", style=dashed];
n30 -> n25  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Components.ExpirationManager", style=dashed];
n24 -> n26  [color=darkseagreen4, key=1, label="System.Threading.Thread", style=dashed];
d92 -> d39  [color=green, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d6  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d7  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d8  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d48  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d52  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d53  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d54  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d68  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d69  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d76  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d78  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d79  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d92 -> d90  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
d34 -> d38  [color=green, key=1, label="lambda expression", style=dashed];
d6 -> d17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d7 -> d22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d8 -> d26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d44 -> d47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d53 -> d59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d54 -> d62  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d69 -> d71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d76 -> d81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d79 -> d87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d27 -> d30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d82 -> d84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_18 -> m2_11  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisAtomicWriteTransaction", style=dashed];
m2_18 -> m2_15  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisAtomicWriteTransaction", style=dashed];
m8_90 -> m8_92  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_372 -> m8_377  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_61 -> m8_65  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m8_61 -> m8_66  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m8_62 -> m8_64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_154 -> m8_156  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_212 -> m8_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_213 -> m8_215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_419 -> m8_183  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
m8_420 -> m8_422  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_420 -> m8_207  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_421 -> m8_254  [color=darkseagreen4, key=1, label=sql, style=dashed];
m8_29 -> m8_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_377 -> m8_384  [color=darkseagreen4, key=1, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
m8_377 -> m8_379  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>", style=dashed];
m8_385 -> m8_389  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_379 -> m8_384  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_379 -> m8_385  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_379 -> m8_381  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_378 -> m8_385  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_380 -> m8_385  [color=darkseagreen4, key=1, label=dto, style=dashed];
m8_382 -> m8_384  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_238 -> m8_240  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_239 -> m8_241  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_528 -> m8_530  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_369 -> m8_371  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_332 -> m8_334  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_343 -> m8_356  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_306 -> m8_309  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m8_306 -> m8_314  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m8_306 -> m8_316  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
m8_406 -> m8_104  [color=green, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_115  [color=green, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_118  [color=green, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_4  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_9  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_24  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_29  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_32  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_35  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_38  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_58  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_65  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_68  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_72  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_75  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_78  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_158  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_167  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_171  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_177  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_179  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_183  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_190  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_193  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_197  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_200  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_207  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_232  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_235  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_238  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_241  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_244  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_245  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_254  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_246  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_278  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_297  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_307  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_336  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_375  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_406 -> m8_395  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
m8_432 -> m8_434  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_197 -> m8_199  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_49 -> m8_552  [color=darkseagreen4, key=1, label="System.Action<HangFire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
m8_551 -> m8_553  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m8_345 -> m8_347  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_243 -> m8_246  [color=darkseagreen4, key=1, label=record, style=dashed];
m8_244 -> m8_254  [color=darkseagreen4, key=1, label=sql, style=dashed];
m8_245 -> m8_252  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_246 -> m8_266  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_247 -> m8_249  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m8_408 -> m8_410  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_409 -> m8_58  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_179 -> m8_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_178 -> m8_183  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
m8_121 -> m8_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_16 -> m8_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_295 -> m8_295  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_33 -> m8_38  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m8_33 -> m8_39  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m8_34 -> m8_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_35 -> m8_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_501 -> m8_503  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_357 -> m8_359  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_320 -> m8_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_124 -> m8_129  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_124 -> m8_150  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_124 -> m8_134  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_125 -> m8_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_125 -> m8_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_125 -> m8_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_125 -> m8_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_125 -> m8_127  [color=darkseagreen4, key=1, label=state, style=dashed];
m8_125 -> m8_128  [color=darkseagreen4, key=1, label=state, style=dashed];
m8_125 -> m8_129  [color=darkseagreen4, key=1, label=state, style=dashed];
m8_125 -> m8_150  [color=darkseagreen4, key=1, label=state, style=dashed];
m8_130 -> m8_157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_130 -> m8_132  [color=darkseagreen4, key=1, label=job, style=dashed];
m8_126 -> m8_131  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_126 -> m8_132  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_126 -> m8_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_127 -> m8_129  [color=darkseagreen4, key=1, label=tuple, style=dashed];
m8_127 -> m8_131  [color=darkseagreen4, key=1, label=tuple, style=dashed];
m8_127 -> m8_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_128 -> m8_158  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m8_128 -> m8_146  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_129 -> m8_131  [color=darkseagreen4, key=1, label=counters, style=dashed];
m8_129 -> m8_149  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_133 -> m8_135  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m8_133 -> m8_136  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m8_133 -> m8_137  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m8_133 -> m8_138  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m8_389 -> m8_391  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_0 -> m8_4  [color=darkseagreen4, key=1, label="int?", style=dashed];
m8_0 -> m8_2  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerStorage", style=dashed];
m8_2 -> m8_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_114 -> m8_118  [color=green, key=1, label=int, style=dashed];
m8_115 -> m8_117  [color=green, key=1, label="lambda expression", style=dashed];
m8_229 -> m8_231  [color=darkseagreen4, key=1, label=record, style=dashed];
m8_229 -> m8_232  [color=darkseagreen4, key=1, label=record, style=dashed];
m8_352 -> m8_354  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_38 -> m8_40  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_38 -> m8_56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_39 -> m8_43  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
m8_37 -> m8_39  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_37 -> m8_40  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_37 -> m8_43  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_41 -> m8_43  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_55 -> m8_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_44 -> m8_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_65 -> m8_67  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_65 -> m8_75  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_65 -> m8_68  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_66 -> m8_70  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
m8_64 -> m8_66  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_64 -> m8_67  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_64 -> m8_68  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_64 -> m8_70  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_67 -> m8_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_70 -> m8_297  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
m8_70 -> m8_301  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_72 -> m8_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_83 -> m8_89  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_83 -> m8_116  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_83 -> m8_87  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_84 -> m8_93  [color=darkseagreen4, key=1, label=anotherJobId, style=dashed];
m8_82 -> m8_84  [color=darkseagreen4, key=1, label=servers, style=dashed];
m8_82 -> m8_89  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_82 -> m8_93  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_82 -> m8_96  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_89 -> m8_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_93 -> m8_95  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
m8_96 -> m8_98  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m8_96 -> m8_99  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m8_96 -> m8_101  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m8_97 -> m8_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_85 -> m8_87  [color=darkseagreen4, key=1, label=state, style=dashed];
m8_85 -> m8_88  [color=darkseagreen4, key=1, label=state, style=dashed];
m8_85 -> m8_89  [color=darkseagreen4, key=1, label=state, style=dashed];
m8_85 -> m8_116  [color=darkseagreen4, key=1, label=state, style=dashed];
m8_86 -> m8_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_87 -> m8_108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_88 -> m8_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_94 -> m8_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_107 -> m8_37  [color=green, key=1, label="lambda expression", style=dashed];
m8_123 -> m8_129  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_156 -> m8_161  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_157 -> m8_159  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m8_157 -> m8_162  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m8_161 -> m8_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_158 -> m8_160  [color=darkseagreen4, key=1, label=correctProvider, style=dashed];
m8_158 -> m8_161  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_162 -> m8_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_166 -> m8_171  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m8_167 -> m8_170  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_171 -> m8_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_183 -> m8_186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_184 -> m8_190  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_190 -> m8_192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_199 -> m8_201  [color=darkseagreen4, key=1, label=record, style=dashed];
m8_199 -> m8_202  [color=darkseagreen4, key=1, label=record, style=dashed];
m8_202 -> m8_207  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_203 -> m8_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_215 -> m8_217  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_216 -> m8_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_220 -> m8_222  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_228 -> m8_234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_232 -> m8_234  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_242 -> m8_251  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_253 -> m8_263  [color=darkseagreen4, key=1, label=stats, style=dashed];
m8_259 -> m8_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_263 -> m8_265  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_270 -> m8_274  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m8_271 -> m8_274  [color=darkseagreen4, key=1, label=dates, style=dashed];
m8_272 -> m8_274  [color=darkseagreen4, key=1, label=record, style=dashed];
m8_272 -> m8_276  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_277 -> m8_286  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_276 -> m8_276  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_284 -> m8_286  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_289 -> m8_293  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m8_290 -> m8_293  [color=darkseagreen4, key=1, label=dates, style=dashed];
m8_291 -> m8_295  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_296 -> m8_298  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_296 -> m8_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_296 -> m8_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_297 -> m8_301  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_301 -> m8_303  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_308 -> m8_310  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m8_308 -> m8_64  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_308 -> m8_328  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_308 -> m8_311  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m8_309 -> m8_311  [color=darkseagreen4, key=1, label=key, style=dashed];
m8_312 -> m8_316  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_312 -> m8_318  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_313 -> m8_316  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_313 -> m8_317  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_317 -> m8_317  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_322 -> m8_324  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_323 -> m8_327  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_327 -> m8_329  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_334 -> m8_336  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_335 -> m8_339  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_341 -> m8_346  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_341 -> m8_349  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_342 -> m8_352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_347 -> m8_349  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_348 -> m8_352  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_360 -> m8_364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_365 -> m8_367  [color=darkseagreen4, key=1, label=data, style=dashed];
m8_373 -> m8_375  [color=darkseagreen4, key=1, label=record, style=dashed];
m8_396 -> m8_398  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m8_397 -> m8_401  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_397 -> m8_400  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_401 -> m8_403  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_401 -> m8_404  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_410 -> m8_412  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_410 -> m8_58  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_411 -> m8_415  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_415 -> m8_417  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_415 -> m8_118  [color=green, key=1, label=int, style=dashed];
m8_416 -> m8_118  [color=green, key=1, label=int, style=dashed];
m8_417 -> m8_158  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m8_418 -> m8_171  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
m8_422 -> m8_424  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_422 -> m8_283  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_423 -> m8_427  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_423 -> m8_301  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_427 -> m8_429  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_435 -> m8_442  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_436 -> m8_438  [color=darkseagreen4, key=1, label=records, style=dashed];
m8_436 -> m8_439  [color=darkseagreen4, key=1, label=records, style=dashed];
m8_442 -> m8_444  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_442 -> m8_445  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_442 -> m8_446  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_442 -> m8_447  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_454 -> m8_458  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_458 -> m8_460  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_458 -> m8_461  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_458 -> m8_462  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_468 -> m8_472  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_472 -> m8_474  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_480 -> m8_484  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_484 -> m8_486  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_492 -> m8_496  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_496 -> m8_498  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m8_503 -> m8_508  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_504 -> m8_507  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_508 -> m8_510  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_517 -> m8_522  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_518 -> m8_521  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_522 -> m8_524  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_531 -> m8_537  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_532 -> m8_540  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_532 -> m8_543  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_532 -> m8_534  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_118 -> m8_120  [color=green, key=1, label="lambda expression", style=dashed];
m8_58 -> m8_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_207 -> m8_211  [color=darkseagreen4, key=1, label=multi, style=dashed];
m8_211 -> m8_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_211 -> m8_223  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_282 -> m8_284  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_25 -> m8_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_104 -> m8_10  [color=green, key=1, label="lambda expression", style=dashed];
m8_195 -> m8_278  [color=darkseagreen4, key=1, label=DbConnection, style=dashed];
m8_195 -> m8_283  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_46 -> m8_375  [color=darkseagreen4, key=1, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
m8_465 -> m8_467  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_477 -> m8_479  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_9 -> m8_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_54 -> m8_58  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_78 -> m8_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_79 -> m8_84  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m8_489 -> m8_491  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_546 -> m8_548  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m8_515 -> m8_517  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_451 -> m8_453  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_556 -> m8_16  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_21  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_34  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_40  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_43  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_62  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_67  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_68  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_70  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_80  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_89  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_93  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_129  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_154  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_160  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_161  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_184  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_198  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_216  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_225  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_228  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_242  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_268  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_285  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_297  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_306  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_309  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_323  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_335  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_348  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_369  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_372  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_385  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_408  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_411  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_420  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_423  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_435  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_454  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_468  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_480  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_492  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_508  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_522  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_556 -> m8_531  [color=darkseagreen4, key=1, label="HangFire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m8_557 -> m8_38  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m8_557 -> m8_39  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m8_558 -> m8_56  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_559 -> m8_65  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m8_559 -> m8_66  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m8_560 -> m8_75  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_561 -> m8_84  [color=darkseagreen4, key=1, label=arrangeSql, style=dashed];
m8_562 -> m8_116  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_563 -> m8_116  [color=darkseagreen4, key=1, label=state, style=dashed];
m8_565 -> m8_150  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m8_566 -> m8_150  [color=darkseagreen4, key=1, label=state, style=dashed];
m8_567 -> m8_508  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m8_568 -> m8_522  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m9_24 -> m9_27  [color=green, key=1, label="HangFire.States.JobState", style=dashed];
m9_24 -> m9_30  [color=green, key=1, label=IRedisClient, style=dashed];
m9_24 -> m9_35  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
m9_24 -> m9_37  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
m9_55 -> m9_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_47 -> m9_49  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m9_47 -> m9_54  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_47 -> m9_55  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_47 -> m9_77  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_47 -> m9_56  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>", style=dashed];
m9_47 -> m9_58  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_47 -> m9_59  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_47 -> m9_60  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<HangFire.IJobStateAppliedFilter>", style=dashed];
m9_47 -> m9_61  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_48 -> m9_52  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m9_48 -> m9_53  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m9_48 -> m9_54  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m9_48 -> m9_57  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m9_51 -> m9_54  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_51 -> m9_55  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_51 -> m9_57  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_51 -> m9_58  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_51 -> m9_59  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_51 -> m9_61  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_51 -> m9_62  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_3 -> m9_5  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateChangingContext", style=dashed];
m9_3 -> m9_12  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateChangingContext", style=dashed];
m9_4 -> m9_19  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_84 -> m9_90  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_84 -> m9_91  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_84 -> m9_87  [color=darkseagreen4, key=1, label=bool, style=dashed];
m9_84 -> m9_88  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m9_84 -> m9_97  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_84 -> m9_89  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m9_84 -> m9_101  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_84 -> m9_93  [color=darkseagreen4, key=1, label=IRedisTransaction, style=dashed];
m9_84 -> m9_104  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_85 -> m9_90  [color=darkseagreen4, key=1, label=properties, style=dashed];
m9_85 -> m9_91  [color=darkseagreen4, key=1, label=properties, style=dashed];
m9_85 -> m9_92  [color=darkseagreen4, key=1, label=properties, style=dashed];
m9_85 -> m9_89  [color=darkseagreen4, key=1, label=properties, style=dashed];
m9_85 -> m9_101  [color=darkseagreen4, key=1, label=properties, style=dashed];
m9_85 -> m9_93  [color=darkseagreen4, key=1, label=properties, style=dashed];
m9_85 -> m9_104  [color=darkseagreen4, key=1, label=properties, style=dashed];
m9_89 -> m9_100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_86 -> m9_92  [color=darkseagreen4, key=1, label=now, style=dashed];
m9_93 -> m9_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_88 -> m9_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_29 -> m9_31  [color=green, key=1, label=changingFilters, style=dashed];
m9_32 -> m9_35  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m9_32 -> m9_34  [color=darkseagreen4, key=1, label=oldState, style=dashed];
m9_33 -> m9_37  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_46 -> m9_81  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_80 -> m9_82  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m9_110 -> m9_97  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_110 -> m9_101  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_110 -> m9_104  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m9_111 -> m9_101  [color=darkseagreen4, key=1, label=properties, style=dashed];
m9_111 -> m9_104  [color=darkseagreen4, key=1, label=properties, style=dashed];
m9_109 -> m9_77  [color=darkseagreen4, key=1, label="HangFire.States.JobState", style=dashed];
m10_7 -> m10_9  [color=green, key=1, label="HangFire.Common.States.StateApplyingContext", style=dashed];
m10_13 -> m10_15  [color=darkseagreen4, key=1, label="HangFire.Common.States.StateApplyingContext", style=dashed];
}
