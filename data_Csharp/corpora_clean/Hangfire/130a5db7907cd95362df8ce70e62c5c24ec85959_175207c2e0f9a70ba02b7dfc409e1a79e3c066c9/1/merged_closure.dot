digraph  {
n0 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", span="30-30"];
n1 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", label="job == null", span="32-32"];
n3 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", label="return new HtmlString(String.Format(''{0}.{1}'', job.Type.Name, job.Method.Name));", span="37-37"];
n2 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", label="return new HtmlString(''<em>Can not find the target method.</em>'');", span="34-34"];
n4 [cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", label="Exit HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", span="30-30"];
n5 [cluster="HtmlString.cstr", label="Entry HtmlString.cstr", span=""];
n6 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
n7 [cluster="HangFire.Web.HtmlHelper.Raw(string)", label="Entry HangFire.Web.HtmlHelper.Raw(string)", span="40-40"];
n8 [cluster="HangFire.Web.HtmlHelper.Raw(string)", label="return new HtmlString(value);", span="42-42"];
n9 [cluster="HangFire.Web.HtmlHelper.Raw(string)", label="Exit HangFire.Web.HtmlHelper.Raw(string)", span="40-40"];
n10 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="45-45"];
n11 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", label="Guid guid", span="47-47"];
n12 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", label="return new HtmlString(Guid.TryParse(jobId, out guid)\r\n                ? (shorten ? jobId.Substring(0, 8) : jobId)\r\n                : ''#'' + jobId);", span="48-50"];
n13 [cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", label="Exit HangFire.Web.HtmlHelper.JobId(string, bool)", span="45-45"];
n14 [cluster="System.Guid.TryParse(string, out System.Guid)", label="Entry System.Guid.TryParse(string, out System.Guid)", span="0-0"];
n15 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
n16 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="Entry HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", span="53-53"];
n17 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="duration == null", span="55-55"];
n20 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label=displaySign, span="58-58"];
n21 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="builder.Append(duration.Value.TotalMilliseconds < 0 ? ''-'' : ''+'')", span="60-60"];
n22 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="duration = duration.Value.Duration()", span="63-63"];
n18 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="return null;", span="55-55"];
n19 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="var builder = new StringBuilder()", span="57-57"];
n36 [cluster="System.Text.StringBuilder.StringBuilder()", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
n24 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="builder.AppendFormat(''{0}d '', duration.Value.Days)", span="67-67"];
n26 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="builder.AppendFormat(''{0}h '', duration.Value.Hours)", span="72-72"];
n28 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="builder.AppendFormat(''{0}m '', duration.Value.Minutes)", span="77-77"];
n31 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="builder.Length <= 1", span="85-85"];
n33 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="builder.Remove(builder.Length - 1, 1)", span="90-90"];
n34 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="return builder.ToString();", span="92-92"];
n37 [cluster="System.Text.StringBuilder.Append(string)", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
n23 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="duration.Value.Days > 0", span="65-65"];
n38 [cluster="System.TimeSpan.Duration()", label="Entry System.TimeSpan.Duration()", span="0-0"];
n25 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="duration.Value.Hours > 0", span="70-70"];
n27 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="duration.Value.Minutes > 0", span="75-75"];
n39 [cluster="System.Text.StringBuilder.AppendFormat(string, object)", label="Entry System.Text.StringBuilder.AppendFormat(string, object)", span="0-0"];
n40 [cluster="System.Text.StringBuilder.Remove(int, int)", label="Entry System.Text.StringBuilder.Remove(int, int)", span="0-0"];
n35 [cluster="HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", label="Exit HangFire.Web.HtmlHelper.ToHumanDuration(System.TimeSpan?, bool)", span="53-53"];
n41 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
n42 [cluster="HangFire.Web.HtmlHelper.FormatProperties(System.Collections.Generic.IDictionary<string, string>)", label="Entry HangFire.Web.HtmlHelper.FormatProperties(System.Collections.Generic.IDictionary<string, string>)", span="95-95"];
n43 [cluster="HangFire.Web.HtmlHelper.FormatProperties(System.Collections.Generic.IDictionary<string, string>)", label="return @String.Join('', '', properties.Select(x => String.Format(''{0}: \''{1}\'''', x.Key, x.Value)));", span="97-97"];
n44 [cluster="HangFire.Web.HtmlHelper.FormatProperties(System.Collections.Generic.IDictionary<string, string>)", label="Exit HangFire.Web.HtmlHelper.FormatProperties(System.Collections.Generic.IDictionary<string, string>)", span="95-95"];
n45 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n46 [cluster="Unk.Join", label="Entry Unk.Join", span=""];
n47 [cluster="lambda expression", label="Entry lambda expression", span="97-97"];
n48 [cluster="lambda expression", label="String.Format(''{0}: \''{1}\'''', x.Key, x.Value)", span="97-97"];
n49 [cluster="lambda expression", label="Exit lambda expression", span="97-97"];
n50 [cluster="HangFire.Web.HtmlHelper.QueueLabel(string)", label="Entry HangFire.Web.HtmlHelper.QueueLabel(string)", span="100-100"];
n51 [cluster="HangFire.Web.HtmlHelper.QueueLabel(string)", label="string label", span="102-102"];
n52 [cluster="HangFire.Web.HtmlHelper.QueueLabel(string)", label="queue != null", span="103-103"];
n53 [cluster="HangFire.Web.HtmlHelper.QueueLabel(string)", label="label = ''<span class=\''label label-queue label-primary\''>'' + queue + ''</span>''", span="105-105"];
n54 [cluster="HangFire.Web.HtmlHelper.QueueLabel(string)", label="label = ''<span class=\''label label-queue label-danger\''><i>Unknown</i></span>''", span="109-109"];
n55 [cluster="HangFire.Web.HtmlHelper.QueueLabel(string)", label="return new HtmlString(label);", span="112-112"];
n56 [cluster="HangFire.Web.HtmlHelper.QueueLabel(string)", label="Exit HangFire.Web.HtmlHelper.QueueLabel(string)", span="100-100"];
n57 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string)", label="Entry HangFire.Web.HtmlHelper.MarkupStackTrace(string)", span="115-115"];
n58 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string)", label="var writer = new StringWriter()", span="117-117"];
n59 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string)", label="MarkupStackTrace(stackTrace, writer)", span="119-119"];
n62 [cluster="System.IO.StringWriter.StringWriter()", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
n60 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string)", label="return new HtmlString(writer.ToString());", span="120-120"];
n63 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", label="Entry HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", span="145-145"];
n61 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string)", label="Exit HangFire.Web.HtmlHelper.MarkupStackTrace(string)", span="115-115"];
n64 [cluster="System.IO.StringWriter.ToString()", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
n65 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", label="Debug.Assert(text != null)", span="147-147"];
n66 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", label="Debug.Assert(writer != null)", span="148-148"];
n68 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", label="_reStackTrace.Matches(text)", span="152-152"];
n69 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", label="HtmlEncode(text.Substring(anchor, match.Index - anchor), writer)", span="154-154"];
n70 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", label="MarkupStackFrame(text, match, writer)", span="155-155"];
n72 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", label="HtmlEncode(text.Substring(anchor), writer)", span="159-159"];
n74 [cluster="System.Diagnostics.Debug.Assert(bool)", label="Entry System.Diagnostics.Debug.Assert(bool)", span="0-0"];
n67 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", label="int anchor = 0", span="150-150"];
n75 [cluster="System.Text.RegularExpressions.Regex.Matches(string)", label="Entry System.Text.RegularExpressions.Regex.Matches(string)", span="0-0"];
n71 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", label="anchor = match.Index + match.Length", span="156-156"];
n76 [cluster="HangFire.Web.HtmlHelper.HtmlEncode(string, System.IO.TextWriter)", label="Entry HangFire.Web.HtmlHelper.HtmlEncode(string, System.IO.TextWriter)", span="260-260"];
n77 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="Entry HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", span="162-162"];
n73 [cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", label="Exit HangFire.Web.HtmlHelper.MarkupStackTrace(string, System.IO.TextWriter)", span="145-145"];
n78 [cluster="string.Substring(int)", label="Entry string.Substring(int)", span="0-0"];
n79 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="Debug.Assert(text != null)", span="164-164"];
n80 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="Debug.Assert(match != null)", span="165-165"];
n81 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="Debug.Assert(writer != null)", span="166-166"];
n82 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="int anchor = match.Index", span="168-168"];
n83 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="GroupCollection groups = match.Groups", span="169-169"];
n85 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="HtmlEncode(text.Substring(anchor, type.Index - anchor), writer)", span="176-176"];
n87 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="writer.Write(''<span class='st-frame'>'')", span="178-178"];
n88 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="anchor = StackFrameSpan(text, anchor, ''st-type'', type, writer)", span="179-179"];
n89 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="anchor = StackFrameSpan(text, anchor, ''st-method'', groups[''method''], writer)", span="180-180"];
n91 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="HtmlEncode(text.Substring(anchor, parameters.Index - anchor), writer)", span="187-187"];
n92 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="writer.Write(''<span class='st-params'>('')", span="188-188"];
n97 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="Span(writer, ''st-param'', parameter.Trim())", span="195-195"];
n99 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="writer.Write('', '')", span="200-200"];
n101 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="Span(writer, ''st-param-type'', argType)", span="202-202"];
n102 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="writer.Write(' ')", span="203-203"];
n104 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="Span(writer, ''st-param-name'', argName)", span="205-205"];
n105 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="writer.Write('')</span>'')", span="208-208"];
n107 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="anchor = StackFrameSpan(text, anchor, ''st-file'', groups[''file''], writer)", span="215-215"];
n108 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="anchor = StackFrameSpan(text, anchor, ''st-line'', groups[''line''], writer)", span="216-216"];
n109 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="writer.Write(''</span>'')", span="218-218"];
n110 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="int end = match.Index + match.Length", span="224-224"];
n111 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="HtmlEncode(text.Substring(anchor, end - anchor), writer)", span="225-225"];
n84 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="Group type = groups[''type'']", span="175-175"];
n90 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="Group parameters = groups[''params'']", span="186-186"];
n86 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="anchor = type.Index", span="177-177"];
n113 [cluster="System.IO.TextWriter.Write(string)", label="Entry System.IO.TextWriter.Write(string)", span="0-0"];
n114 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, System.Text.RegularExpressions.Group, System.IO.TextWriter)", label="Entry HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, System.Text.RegularExpressions.Group, System.IO.TextWriter)", span="228-228"];
n94 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="parameters.Captures[0].Value.Split(',')", span="190-190"];
n106 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="anchor = parameters.Index + parameters.Length", span="209-209"];
n93 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="int position = 0", span="189-189"];
n98 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="position++ > 0", span="199-199"];
n95 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="int spaceIndex = parameter.LastIndexOf(' ')", span="192-192"];
n115 [cluster="string.Split(params char[])", label="Entry string.Split(params char[])", span="0-0"];
n100 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="string argType = parameter.Substring(0, spaceIndex).Trim()", span="201-201"];
n103 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="string argName = parameter.Substring(spaceIndex + 1).Trim()", span="204-204"];
n96 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="spaceIndex <= 0", span="193-193"];
n116 [cluster="string.LastIndexOf(char)", label="Entry string.LastIndexOf(char)", span="0-0"];
n117 [cluster="string.Trim()", label="Entry string.Trim()", span="0-0"];
n118 [cluster="HangFire.Web.HtmlHelper.Span(System.IO.TextWriter, string, string)", label="Entry HangFire.Web.HtmlHelper.Span(System.IO.TextWriter, string, string)", span="249-249"];
n119 [cluster="System.IO.TextWriter.Write(char)", label="Entry System.IO.TextWriter.Write(char)", span="0-0"];
n112 [cluster="HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", label="Exit HangFire.Web.HtmlHelper.MarkupStackFrame(string, System.Text.RegularExpressions.Match, System.IO.TextWriter)", span="162-162"];
n120 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, System.Text.RegularExpressions.Group, System.IO.TextWriter)", label="Debug.Assert(text != null)", span="230-230"];
n121 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, System.Text.RegularExpressions.Group, System.IO.TextWriter)", label="Debug.Assert(group != null)", span="231-231"];
n122 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, System.Text.RegularExpressions.Group, System.IO.TextWriter)", label="Debug.Assert(writer != null)", span="232-232"];
n123 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, System.Text.RegularExpressions.Group, System.IO.TextWriter)", label="return group.Success\r\n                 ? StackFrameSpan(text, anchor, klass, group.Value, group.Index, group.Length, writer)\r\n                 : anchor;", span="234-236"];
n124 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, System.Text.RegularExpressions.Group, System.IO.TextWriter)", label="Exit HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, System.Text.RegularExpressions.Group, System.IO.TextWriter)", span="228-228"];
n125 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, string, int, int, System.IO.TextWriter)", label="Entry HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, string, int, int, System.IO.TextWriter)", span="239-239"];
n126 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, string, int, int, System.IO.TextWriter)", label="Debug.Assert(text != null)", span="241-241"];
n127 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, string, int, int, System.IO.TextWriter)", label="Debug.Assert(writer != null)", span="242-242"];
n128 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, string, int, int, System.IO.TextWriter)", label="HtmlEncode(text.Substring(anchor, index - anchor), writer)", span="244-244"];
n129 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, string, int, int, System.IO.TextWriter)", label="Span(writer, klass, value)", span="245-245"];
n130 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, string, int, int, System.IO.TextWriter)", label="return index + length;", span="246-246"];
n131 [cluster="HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, string, int, int, System.IO.TextWriter)", label="Exit HangFire.Web.HtmlHelper.StackFrameSpan(string, int, string, string, int, int, System.IO.TextWriter)", span="239-239"];
n132 [cluster="HangFire.Web.HtmlHelper.Span(System.IO.TextWriter, string, string)", label="Debug.Assert(writer != null)", span="251-251"];
n133 [cluster="HangFire.Web.HtmlHelper.Span(System.IO.TextWriter, string, string)", label="writer.Write(''<span class=''')", span="253-253"];
n134 [cluster="HangFire.Web.HtmlHelper.Span(System.IO.TextWriter, string, string)", label="writer.Write(klass)", span="254-254"];
n135 [cluster="HangFire.Web.HtmlHelper.Span(System.IO.TextWriter, string, string)", label="writer.Write('''>'')", span="255-255"];
n136 [cluster="HangFire.Web.HtmlHelper.Span(System.IO.TextWriter, string, string)", label="HtmlEncode(value, writer)", span="256-256"];
n137 [cluster="HangFire.Web.HtmlHelper.Span(System.IO.TextWriter, string, string)", label="writer.Write(''</span>'')", span="257-257"];
n138 [cluster="HangFire.Web.HtmlHelper.Span(System.IO.TextWriter, string, string)", label="Exit HangFire.Web.HtmlHelper.Span(System.IO.TextWriter, string, string)", span="249-249"];
n139 [cluster="HangFire.Web.HtmlHelper.HtmlEncode(string, System.IO.TextWriter)", label="Debug.Assert(writer != null)", span="262-262"];
n140 [cluster="HangFire.Web.HtmlHelper.HtmlEncode(string, System.IO.TextWriter)", label="HttpUtility.HtmlEncode(text, writer)", span="263-263"];
n141 [cluster="HangFire.Web.HtmlHelper.HtmlEncode(string, System.IO.TextWriter)", label="Exit HangFire.Web.HtmlHelper.HtmlEncode(string, System.IO.TextWriter)", span="260-260"];
n142 [cluster="Unk.HtmlEncode", label="Entry Unk.HtmlEncode", span=""];
m1_8 [cluster="Unk.OnFeatureStart", file="SqlServerConnection.cs", label="Entry Unk.OnFeatureStart", span=""];
m1_25 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="var providers = queues\r\n                .Select(queue => _queueProviders.GetProvider(queue))\r\n                .Distinct()\r\n                .ToArray()", span="68-71"];
m1_150 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="277-277"];
m1_156 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="289-295"];
m1_152 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="279-279"];
m1_154 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''context'');", span="280-280"];
m1_155 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="282-287"];
m1_151 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="serverId == null", span="279-279"];
m1_153 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="context == null", span="280-280"];
m1_157 [cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="277-277"];
m1_26 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="providers.Length != 1", span="73-73"];
m1_27 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="throw new InvalidOperationException(String.Format(\r\n                    ''Multiple provider instances registered for queues: {0}. You should choose only one type of persistent queues per server instance.'',\r\n                    String.Join('', '', queues)));", span="75-77"];
m1_28 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="var persistentQueue = providers[0].GetJobQueue(_connection)", span="80-80"];
m1_29 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="return persistentQueue.Dequeue(queues, cancellationToken);", span="81-81"];
m1_102 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="209-209"];
m1_107 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="214-217"];
m1_104 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="211-211"];
m1_106 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="212-212"];
m1_105 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="name == null", span="212-212"];
m1_103 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="id == null", span="211-211"];
m1_108 [cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="209-209"];
m1_21 [cluster="string.Format(string, object)", file="SqlServerConnection.cs", label="Entry string.Format(string, object)", span="0-0"];
m1_9 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Dispose()", span="46-46"];
m1_10 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="_connection.Dispose()", span="48-48"];
m1_11 [cluster="HangFire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Dispose()", span="46-46"];
m1_12 [cluster="Unk.Dispose", file="SqlServerConnection.cs", label="Entry Unk.Dispose", span=""];
m1_124 [cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="242-242"];
m1_132 [cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="_connection.Execute(sql, new { key = key, field = keyValuePair.Key, value = keyValuePair.Value })", span="258-258"];
m1_126 [cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="244-244"];
m1_128 [cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''keyValuePairs'');", span="245-245"];
m1_131 [cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label=keyValuePairs, span="256-256"];
m1_129 [cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="string sql = @''\r\nmerge HangFire.Hash as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="247-252"];
m1_125 [cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="key == null", span="244-244"];
m1_127 [cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="keyValuePairs == null", span="245-245"];
m1_130 [cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="var transaction = new TransactionScope()", span="254-254"];
m1_133 [cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="transaction.Complete()", span="261-261"];
m1_134 [cluster="HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="242-242"];
m1_158 [cluster="HangFire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m1_85 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="SqlServerConnection.cs", label="testRunner.Then(''the server should not be removed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="190-190"];
m1_89 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="SqlServerConnection.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should remove only those servers that were timed out'', ((string[])(null)))", span="201-201"];
m1_92 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="SqlServerConnection.cs", label="testRunner.Given(''a server \'Active\' that was started a second ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="207-207"];
m1_87 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", span="176-176"];
m1_88 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", span="199-199"];
m1_90 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="SqlServerConnection.cs", label="this.ScenarioSetup(scenarioInfo)", span="203-203"];
m1_86 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="SqlServerConnection.cs", label="this.ScenarioCleanup()", span="192-192"];
m1_91 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="SqlServerConnection.cs", label="this.FeatureBackground()", span="205-205"];
m1_93 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveOnlyThoseServersThatWereTimedOut()", file="SqlServerConnection.cs", label="testRunner.And(''a server \'TimedOut\' that was started a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="209-209"];
m1_143 [cluster="Unk.ToDictionary", file="SqlServerConnection.cs", label="Entry Unk.ToDictionary", span=""];
m1_94 [cluster="HangFire.Storage.StateData.StateData()", file="SqlServerConnection.cs", label="Entry HangFire.Storage.StateData.StateData()", span="21-21"];
m1_95 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="195-195"];
m1_96 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="id == null", span="197-197"];
m1_97 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''id'');", span="197-197"];
m1_98 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="name == null", span="198-198"];
m1_45 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="parameters == null", span="91-91"];
m1_99 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''name'');", span="198-198"];
m1_17 [cluster="HangFire.Tests.ServerWatchdogFeature.TestInitialize()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.ServerWatchdogFeature.TestInitialize()", span="47-47"];
m1_18 [cluster="HangFire.Tests.ServerWatchdogFeature.ScenarioTearDown()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.ServerWatchdogFeature.ScenarioTearDown()", span="57-57"];
m1_19 [cluster="HangFire.Tests.ServerWatchdogFeature.ScenarioTearDown()", file="SqlServerConnection.cs", label="testRunner.OnScenarioEnd()", span="59-59"];
m1_5 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs", label="_connection = connection", span="42-42"];
m1_0 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35"];
m1_1 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs", label="connection == null", span="39-39"];
m1_2 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''connection'');", span="39-39"];
m1_3 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs", label="queueProviders == null", span="40-40"];
m1_4 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''queueProviders'');", span="40-40"];
m1_62 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="testRunner.Given(''a server that was started a second ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="138-138"];
m1_176 [cluster="System.TimeSpan.Negate()", file="SqlServerConnection.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m1_66 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="this.ScenarioCleanup()", span="146-146"];
m1_69 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", color=green, community=0, file="SqlServerConnection.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should remove the long-running server with no heartbeats'', ((string[])(null)))", prediction=0, span="155-155"];
m1_67 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithNoHeartbeats()", span="130-130"];
m1_70 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="this.ScenarioSetup(scenarioInfo)", span="157-157"];
m1_68 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", span="153-153"];
m1_71 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="this.FeatureBackground()", span="159-159"];
m1_73 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="testRunner.And(''there are no any heartbeats'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="163-163"];
m1_74 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="testRunner.When(''the watchdog gets the job done'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="165-165"];
m1_80 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="SqlServerConnection.cs", label="this.ScenarioSetup(scenarioInfo)", span="180-180"];
m1_75 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="testRunner.Then(''the server should be removed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="167-167"];
m1_76 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="this.ScenarioCleanup()", span="169-169"];
m1_72 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="testRunner.Given(''a server that was started a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="161-161"];
m1_77 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.ServerWatchdogFeature.ItShouldRemoveTheLong_RunningServerWithNoHeartbeats()", span="153-153"];
m1_79 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="SqlServerConnection.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should not remove the recently started server with timed out heartbeat'', ((string[])(null)))", span="178-178"];
m1_78 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", span="176-176"];
m1_81 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheRecentlyStartedServerWithTimedOutHeartbeat()", file="SqlServerConnection.cs", label="this.FeatureBackground()", span="182-182"];
m1_13 [cluster="Unk.OnFeatureEnd", file="SqlServerConnection.cs", label="Entry Unk.OnFeatureEnd", span=""];
m1_14 [cluster="HangFire.Tests.ServerWatchdogFeature.TestInitialize()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.ServerWatchdogFeature.TestInitialize()", span="47-47"];
m1_15 [cluster="HangFire.Tests.ServerWatchdogFeature.TestInitialize()", file="SqlServerConnection.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''Server watchdog''))", span="49-50"];
m1_58 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="84-84"];
m1_59 [cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", file="SqlServerConnection.cs", label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65"];
m1_60 [cluster="HangFire.Common.JobHelper.ToJson(object)", file="SqlServerConnection.cs", label="Entry HangFire.Common.JobHelper.ToJson(object)", span="24-24"];
m1_61 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m1_63 [cluster="Unk.Single", file="SqlServerConnection.cs", label="Entry Unk.Single", span=""];
m1_64 [cluster="Unk.ToString", file="SqlServerConnection.cs", label="Entry Unk.ToString", span=""];
m1_65 [cluster="Unk.Execute", file="SqlServerConnection.cs", label="Entry Unk.Execute", span=""];
m1_16 [cluster="HangFire.Tests.ServerWatchdogFeature.TestInitialize()", file="SqlServerConnection.cs", label="HangFire.Tests.ServerWatchdogFeature.FeatureSetup(null)", span="52-52"];
m1_123 [cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m1_35 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="SqlServerConnection.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It should not remove the active server'', ((string[])(null)))", span="86-86"];
m1_20 [cluster="SqlServerDistributedLock.cstr", file="SqlServerConnection.cs", label="Entry SqlServerDistributedLock.cstr", span=""];
m1_135 [cluster="TransactionScope.cstr", file="SqlServerConnection.cs", label="Entry TransactionScope.cstr", span=""];
m1_33 [cluster="Unk.Given", file="SqlServerConnection.cs", label="Entry Unk.Given", span=""];
m1_7 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35"];
m1_34 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="SqlServerConnection.cs", label="Entry HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", span="84-84"];
m1_136 [cluster="Unk.Complete", file="SqlServerConnection.cs", label="Entry Unk.Complete", span=""];
m1_46 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''parameters'');", span="91-91"];
m1_48 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="var invocationData = InvocationData.Serialize(job)", span="98-98"];
m1_49 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = createdAt,\r\n                    expireAt = createdAt.Add(expireIn)\r\n                }).Single().ToString()", span="100-108"];
m1_50 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="parameters.Count > 0", span="110-110"];
m1_51 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="var parameterArray = new object[parameters.Count]", span="112-112"];
m1_52 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="int parameterIndex = 0", span="113-113"];
m1_53 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label=parameters, span="114-114"];
m1_54 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="116-121"];
m1_55 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="124-126"];
m1_56 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="_connection.Execute(insertParameterSql, parameterArray)", span="128-128"];
m1_57 [cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerConnection.cs", label="return jobId;", span="131-131"];
m1_30 [cluster="HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="64-64"];
m1_31 [cluster="Unk.Select", file="SqlServerConnection.cs", label="Entry Unk.Select", span=""];
m1_32 [cluster="Unk.Distinct", file="SqlServerConnection.cs", label="Entry Unk.Distinct", span=""];
m1_22 [cluster="HangFire.Tests.ServerWatchdogFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerConnection.cs", label="Entry HangFire.Tests.ServerWatchdogFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m1_24 [cluster="HangFire.Tests.ServerWatchdogFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerConnection.cs", label="Exit HangFire.Tests.ServerWatchdogFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m1_23 [cluster="HangFire.Tests.ServerWatchdogFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SqlServerConnection.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="64-64"];
m1_82 [cluster="Unk.SingleOrDefault", file="SqlServerConnection.cs", label="Entry Unk.SingleOrDefault", span=""];
m1_83 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="SqlServerConnection.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m1_84 [cluster="HangFire.Storage.JobData.JobData()", file="SqlServerConnection.cs", label="Entry HangFire.Storage.JobData.JobData()", span="21-21"];
m1_169 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="316-316"];
m1_172 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="323-325"];
m1_170 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="timeOut.Duration() != timeOut", span="318-318"];
m1_171 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="320-320"];
m1_173 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="316-316"];
m1_109 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="220-220"];
m1_112 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="var result = _connection.Query<string>(\r\n                @''select Value from HangFire.[Set] where [Key] = @key'',\r\n                new { key })", span="224-226"];
m1_111 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="222-222"];
m1_110 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="key == null", span="222-222"];
m1_113 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="return new HashSet<string>(result);", span="228-228"];
m1_114 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="220-220"];
m1_41 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="SqlServerConnection.cs", label="testRunner.Then(''the server should not be removed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="98-98"];
m1_42 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="SqlServerConnection.cs", label="this.ScenarioCleanup()", span="100-100"];
m1_44 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SqlServerConnection.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m1_47 [cluster="Unk.Then", file="SqlServerConnection.cs", label="Entry Unk.Then", span=""];
m1_43 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="SqlServerConnection.cs", label="Exit HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", span="84-84"];
m1_37 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="SqlServerConnection.cs", label="this.FeatureBackground()", span="90-90"];
m1_147 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="272-272"];
m1_39 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="SqlServerConnection.cs", label="testRunner.And(''its last heartbeat was a second ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="94-94"];
m1_38 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="SqlServerConnection.cs", label="testRunner.Given(''a server that was started a day ago'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="92-92"];
m1_40 [cluster="HangFire.Tests.ServerWatchdogFeature.ItShouldNotRemoveTheActiveServer()", file="SqlServerConnection.cs", label="testRunner.When(''the watchdog gets the job done'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="96-96"];
m1_144 [cluster="lambda expression", file="SqlServerConnection.cs", label="Entry lambda expression", span="272-272"];
m1_146 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="272-272"];
m1_145 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Field", span="272-272"];
m1_148 [cluster="lambda expression", file="SqlServerConnection.cs", label="x.Value", span="272-272"];
m1_149 [cluster="lambda expression", file="SqlServerConnection.cs", label="Exit lambda expression", span="272-272"];
m1_100 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="HangFire.Tests.ServerWatchdogFeature", span=""];
m1_101 [cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="195-195"];
m1_116 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="231-231"];
m1_121 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="236-239"];
m1_118 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="233-233"];
m1_119 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="toScore < fromScore", span="234-234"];
m1_117 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="key == null", span="233-233"];
m1_120 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="234-234"];
m1_122 [cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="231-231"];
m1_175 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerConnection.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m1_6 [cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerConnection.cs", label="_queueProviders = queueProviders", span="43-43"];
m1_159 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="298-298"];
m1_162 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="302-304"];
m1_161 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="300-300"];
m1_160 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="serverId == null", span="300-300"];
m1_163 [cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="298-298"];
m1_36 [cluster="Unk.GetJobQueue", file="SqlServerConnection.cs", label="Entry Unk.GetJobQueue", span=""];
m1_137 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="265-265"];
m1_140 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="var result = _connection.Query<SqlHash>(\r\n                ''select Field, Value from HangFire.Hash where [Key] = @key'',\r\n                new { key })\r\n                .ToDictionary(x => x.Field, x => x.Value)", span="269-272"];
m1_139 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''key'');", span="267-267"];
m1_138 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="key == null", span="267-267"];
m1_141 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="return result.Count != 0 ? result : null;", span="274-274"];
m1_142 [cluster="HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="265-265"];
m1_115 [cluster="HashSet<string>.cstr", file="SqlServerConnection.cs", label="Entry HashSet<string>.cstr", span=""];
m1_164 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="307-307"];
m1_167 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="311-313"];
m1_166 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="throw new ArgumentNullException(''serverId'');", span="309-309"];
m1_165 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="serverId == null", span="309-309"];
m1_168 [cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerConnection.cs", label="Exit HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="307-307"];
m1_177 [file="SqlServerConnection.cs", label="HangFire.SqlServer.SqlServerConnection", span=""];
m2_398 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", file="SqlServerMonitoringApi.cs", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
m2_91 [cluster="System.Collections.Generic.List<T>.List()", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_115 [cluster="long.Parse(string)", file="SqlServerMonitoringApi.cs", label="Entry long.Parse(string)", span="0-0"];
m2_0 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35"];
m2_1 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerMonitoringApi.cs", label="_connectionString = connectionString", span="39-39"];
m2_2 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerMonitoringApi.cs", label="_queueProviders = queueProviders", span="40-40"];
m2_3 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(string, HangFire.SqlServer.PersistentJobQueueProviderCollection)", span="35-35"];
m2_48 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="518-518"];
m2_387 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="return DeserializeJobs(jobs, selector);", span="539-539"];
m2_386 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                        .ToList()", span="534-537"];
m2_385 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="string jobsSql = @''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from HangFire.Job j\r\n  left join HangFire.State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n''", span="525-532"];
m2_388 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="518-518"];
m2_399 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m2_234 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="314-314"];
m2_235 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", color=green, community=0, file="SqlServerMonitoringApi.cs", label="return UseConnection(connection =>\r\n            {\r\n                const string sql = @''\r\nselect StateName as [State], count(id) as [Count] From HangFire.Job \r\ngroup by StateName\r\nhaving StateName is not null;\r\nselect count(Id) from HangFire.Server;\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:succeeded';\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:deleted';\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n'';\r\n\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql))\r\n                {\r\n                    var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count);\r\n\r\n                    Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0;\r\n\r\n                    stats.Enqueued = getCountIfExists(EnqueuedState.StateName);\r\n                    stats.Failed = getCountIfExists(FailedState.StateName);\r\n                    stats.Processing = getCountIfExists(ProcessingState.StateName);\r\n                    stats.Scheduled = getCountIfExists(ScheduledState.StateName);\r\n\r\n                    stats.Servers = multi.Read<int>().Single();\r\n\r\n                    stats.Succeeded = multi.Read<int?>().SingleOrDefault() ?? 0;\r\n                    stats.Deleted = multi.Read<int?>().SingleOrDefault() ?? 0;\r\n\r\n                    stats.Recurring = multi.Read<int>().Single();\r\n                }\r\n\r\n                stats.Queues = _queueProviders\r\n                    .SelectMany(x => x.GetJobQueueMonitoringApi(connection).GetQueues())\r\n                    .Count();\r\n\r\n                return stats;\r\n            });", prediction=1, span="316-353"];
m2_236 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="314-314"];
m2_52 [cluster="HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23"];
m2_72 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="117-117"];
m2_73 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="119-120"];
m2_74 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="117-117"];
m2_361 [cluster="Unk.Open", file="SqlServerMonitoringApi.cs", label="Entry Unk.Open", span=""];
m2_7 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="447-447"];
m2_352 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="SqlServerMonitoringApi.cs", label="var connection = new SqlConnection(_connectionString)", span="450-450"];
m2_351 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="SqlServerMonitoringApi.cs", label="var transaction = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted })", span="449-449"];
m2_354 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="SqlServerMonitoringApi.cs", label="var result = action(connection)", span="454-454"];
m2_353 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="SqlServerMonitoringApi.cs", label="connection.Open()", span="452-452"];
m2_356 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="SqlServerMonitoringApi.cs", label="return result;", span="458-458"];
m2_355 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="SqlServerMonitoringApi.cs", label="transaction.Complete()", span="456-456"];
m2_357 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="447-447"];
m2_360 [cluster="SqlConnection.cstr", file="SqlServerMonitoringApi.cs", label="Entry SqlConnection.cstr", span=""];
m2_273 [cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22"];
m2_411 [cluster="Unk.ToString", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToString", span=""];
m2_194 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="263-263"];
m2_195 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection =>\r\n            {\r\n\r\n                const string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc'';\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="265-299"];
m2_196 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="263-263"];
m2_258 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
m2_104 [cluster="HangFire.Common.JobHelper.DeserializeNullableDateTime(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Common.JobHelper.DeserializeNullableDateTime(string)", span="67-67"];
m2_367 [cluster="Unk.DeserializeJobs", file="SqlServerMonitoringApi.cs", label="Entry Unk.DeserializeJobs", span=""];
m2_181 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="251-251"];
m2_182 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="253-254"];
m2_183 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="251-251"];
m2_36 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="77-77"];
m2_37 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="79-80"];
m2_38 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="77-77"];
m2_179 [cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="24-24"];
m2_255 [cluster="Unk.Read", file="SqlServerMonitoringApi.cs", label="Entry Unk.Read", span=""];
m2_384 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m2_105 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168"];
m2_106 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }));", span="170-182"];
m2_107 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="168-168"];
m2_94 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="150-150"];
m2_95 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="152-165"];
m2_96 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="150-150"];
m2_269 [cluster="Unk.ContainsKey", file="SqlServerMonitoringApi.cs", label="Entry Unk.ContainsKey", span=""];
m2_64 [cluster="HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23"];
m2_146 [cluster="Unk.EnqueuedJobs", file="SqlServerMonitoringApi.cs", label="Entry Unk.EnqueuedJobs", span=""];
m2_65 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="111-111"];
m2_66 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="113-114"];
m2_67 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="111-111"];
m2_383 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="31-31"];
m2_22 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="60-60"];
m2_23 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection =>\r\n            {\r\n                var queueApi = GetQueueApi(connection, queue);\r\n                var counters = queueApi.GetEnqueuedAndFetchedCount(queue);\r\n\r\n                return counters.FetchedCount ?? 0;\r\n            });", span="62-68"];
m2_24 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="60-60"];
m2_53 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m2_254 [cluster="HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18"];
m2_256 [cluster="System.Func<T, TResult>.Invoke(T)", file="SqlServerMonitoringApi.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m2_400 [cluster="int.ToString()", file="SqlServerMonitoringApi.cs", label="Entry int.ToString()", span="0-0"];
m2_30 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="71-71"];
m2_31 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, FailedState.StateName));", span="73-74"];
m2_32 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="71-71"];
m2_92 [cluster="HangFire.Storage.Monitoring.ServerDto.ServerDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21"];
m2_389 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="542-542"];
m2_394 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="553-554"];
m2_393 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="551-551"];
m2_390 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="546-546"];
m2_391 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label=jobs, span="548-548"];
m2_392 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="var stateData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="550-550"];
m2_395 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="return new JobList<TDto>(result);", span="557-557"];
m2_396 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>, System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="542-542"];
m2_358 [cluster="TransactionScope.cstr", file="SqlServerMonitoringApi.cs", label="Entry TransactionScope.cstr", span=""];
m2_141 [cluster="Unk.ToArray", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToArray", span=""];
m2_332 [cluster="System.DateTime.AddDays(double)", file="SqlServerMonitoringApi.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m2_210 [cluster="HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22"];
m2_350 [cluster="HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m2_125 [cluster="HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7"];
m2_308 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="378-378"];
m2_237 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="316-353"];
m2_238 [cluster="lambda expression", color=green, community=0, file="SqlServerMonitoringApi.cs", label="string sql = @''\r\nselect StateName as [State], count(id) as [Count] From HangFire.Job \r\ngroup by StateName\r\nhaving StateName is not null;\r\nselect count(Id) from HangFire.Server;\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:succeeded';\r\nselect sum([Value]) from HangFire.Counter where [Key] = N'stats:deleted';\r\nselect count(*) from HangFire.[Set] where [Key] = N'recurring-jobs';\r\n''", prediction=2, span="318-326"];
m2_239 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var stats = new StatisticsDto()", span="328-328"];
m2_240 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var multi = connection.QueryMultiple(sql)", span="329-329"];
m2_9 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetNumberOfJobsByStateName(connection, ScheduledState.StateName)", span="46-46"];
m2_16 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var queueApi = GetQueueApi(connection, queue)", span="53-53"];
m2_26 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var queueApi = GetQueueApi(connection, queue)", span="64-64"];
m2_34 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="74-74"];
m2_40 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetNumberOfJobsByStateName(connection, ProcessingState.StateName)", span="80-80"];
m2_46 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                })", span="85-94"];
m2_59 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                })", span="99-108"];
m2_69 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetTimelineStats(connection, ''succeeded'')", span="114-114"];
m2_76 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetTimelineStats(connection, ''failed'')", span="120-120"];
m2_98 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", span="152-165"];
m2_109 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="170-182"];
m2_120 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                })", span="187-196"];
m2_130 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var tuples = _queueProviders\r\n                    .Select(x => x.GetJobQueueMonitoringApi(connection))\r\n                    .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                    .OrderBy(x => x.Queue)\r\n                    .ToArray()", span="203-207"];
m2_135 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = tuple.Queue,\r\n                        Length = counters.EnqueuedCount ?? 0,\r\n                        Fetched = counters.FetchedCount,\r\n                        FirstJobs = EnqueuedJobs(connection, enqueuedJobIds)\r\n                    })", span="216-222"];
m2_165 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var queueApi = GetQueueApi(connection, queue)", span="233-233"];
m2_167 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return EnqueuedJobs(connection, enqueuedJobIds);", span="236-236"];
m2_175 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var queueApi = GetQueueApi(connection, queue)", span="244-244"];
m2_177 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return FetchedJobs(connection, fetchedJobIds);", span="247-247"];
m2_185 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetHourlyTimelineStats(connection, ''succeeded'')", span="254-254"];
m2_192 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetHourlyTimelineStats(connection, ''failed'')", span="260-260"];
m2_205 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="291-297"];
m2_226 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", span="305-305"];
m2_232 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="311-311"];
m2_251 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Queues = _queueProviders\r\n                    .SelectMany(x => x.GetJobQueueMonitoringApi(connection).GetQueues())\r\n                    .Count()", span="348-350"];
m2_253 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="316-353"];
m2_271 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.GetJobQueueMonitoringApi(connection).GetQueues()", span="349-349"];
m2_243 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Enqueued = getCountIfExists(EnqueuedState.StateName)", span="335-335"];
m2_244 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Failed = getCountIfExists(FailedState.StateName)", span="336-336"];
m2_245 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Processing = getCountIfExists(ProcessingState.StateName)", span="337-337"];
m2_246 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Scheduled = getCountIfExists(ScheduledState.StateName)", span="338-338"];
m2_247 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Servers = multi.Read<int>().Single()", span="340-340"];
m2_248 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Succeeded = multi.Read<int?>().SingleOrDefault() ?? 0", span="342-342"];
m2_249 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Deleted = multi.Read<int?>().SingleOrDefault() ?? 0", span="343-343"];
m2_250 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="stats.Recurring = multi.Read<int>().Single()", span="345-345"];
m2_252 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return stats;", span="352-352"];
m2_241 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var countByStates = multi.Read().ToDictionary(x => x.State, x => x.Count)", span="331-331"];
m2_8 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="45-46"];
m2_10 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="45-46"];
m2_15 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="51-57"];
m2_17 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="54-54"];
m2_25 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="62-68"];
m2_27 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="65-65"];
m2_33 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="73-74"];
m2_35 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="73-74"];
m2_39 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="79-80"];
m2_41 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="79-80"];
m2_45 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="85-94"];
m2_47 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="85-94"];
m2_49 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="89-94"];
m2_58 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="99-108"];
m2_60 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="99-108"];
m2_61 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="103-108"];
m2_68 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="113-114"];
m2_70 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="113-114"];
m2_75 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="119-120"];
m2_77 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="119-120"];
m2_82 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="125-147"];
m2_97 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="152-165"];
m2_99 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="152-165"];
m2_100 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="157-165"];
m2_108 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="170-182"];
m2_110 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="170-182"];
m2_111 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="175-182"];
m2_119 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="187-196"];
m2_121 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="187-196"];
m2_122 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="192-196"];
m2_129 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="201-226"];
m2_131 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="209-209"];
m2_147 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="204-204"];
m2_151 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="205-205"];
m2_155 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="205-205"];
m2_158 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="206-206"];
m2_132 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label=tuples, span="211-211"];
m2_133 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="213-213"];
m2_134 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="214-214"];
m2_164 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="231-237"];
m2_166 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="234-234"];
m2_168 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="231-237"];
m2_174 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="242-248"];
m2_176 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="245-245"];
m2_178 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="242-248"];
m2_184 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="253-254"];
m2_186 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="253-254"];
m2_191 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="259-260"];
m2_193 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="259-260"];
m2_197 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="265-299"];
m2_200 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="275-275"];
m2_203 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="278-278"];
m2_204 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            })\r\n                            .ToList()", span="279-289"];
m2_206 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="265-299"];
m2_225 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="304-305"];
m2_227 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="304-305"];
m2_231 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="310-311"];
m2_233 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="310-311"];
m2_270 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="349-349"];
m2_368 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="480-487"];
m2_199 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var multi = connection.QueryMultiple(sql, new { id = jobId })", span="273-273"];
m2_272 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="349-349"];
m2_242 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Func<string, int> getCountIfExists = name => countByStates.ContainsKey(name) ? countByStates[name] : 0", span="333-333"];
m2_260 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="331-331"];
m2_263 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="331-331"];
m2_267 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="countByStates.ContainsKey(name) ? countByStates[name] : 0", span="333-333"];
m2_19 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="51-57"];
m2_18 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return counters.EnqueuedCount ?? 0;", span="56-56"];
m2_29 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="62-68"];
m2_28 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return counters.FetchedCount ?? 0;", span="67-67"];
m2_51 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="89-94"];
m2_50 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }", span="89-94"];
m2_63 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="103-108"];
m2_62 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }", span="103-108"];
m2_337 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="String.Format(''stats:{0}:{1}'', type, x)", span="410-410"];
m2_83 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList()", span="127-129"];
m2_86 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="135-135"];
m2_219 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = JobHelper.FromJson<Dictionary<string, string>>(x.Data)\r\n                            }", span="282-288"];
m2_89 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="125-147"];
m2_102 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="157-165"];
m2_101 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", span="157-165"];
m2_113 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="175-182"];
m2_112 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", span="175-182"];
m2_124 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="192-196"];
m2_123 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="192-196"];
m2_137 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="201-226"];
m2_148 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.GetJobQueueMonitoringApi(connection)", span="204-204"];
m2_136 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return result;", span="225-225"];
m2_149 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="204-204"];
m2_153 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="205-205"];
m2_152 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.GetQueues()", span="205-205"];
m2_157 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="205-205"];
m2_156 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new { Monitoring = monitoring, Queue = queue }", span="205-205"];
m2_160 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="206-206"];
m2_159 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Queue", span="206-206"];
m2_87 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="136-143"];
m2_301 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="368-368"];
m2_198 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="string sql = @''\r\nselect * from HangFire.Job where Id = @id\r\nselect * from HangFire.JobParameter where JobId = @id\r\nselect * from HangFire.State where JobId = @id order by Id desc''", span="268-271"];
m2_201 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="job == null", span="276-276"];
m2_212 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="278-278"];
m2_215 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="278-278"];
m2_218 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="282-288"];
m2_202 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return null;", span="276-276"];
m2_370 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="480-487"];
m2_369 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="480-487"];
m2_262 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="331-331"];
m2_261 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.State", span="331-331"];
m2_265 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="331-331"];
m2_264 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Count", span="331-331"];
m2_266 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="333-333"];
m2_268 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="333-333"];
m2_336 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="410-410"];
m2_338 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="410-410"];
m2_340 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="420-420"];
m2_343 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="420-420"];
m2_84 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="var result = new List<ServerDto>()", span="131-131"];
m2_85 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label=servers, span="133-133"];
m2_220 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="282-288"];
m2_88 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="return result;", span="146-146"];
m2_300 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="368-368"];
m2_333 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="409-409"];
m2_302 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="368-368"];
m2_305 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="378-378"];
m2_214 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="278-278"];
m2_213 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Name", span="278-278"];
m2_217 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="278-278"];
m2_216 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Value", span="278-278"];
m2_342 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="420-420"];
m2_341 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(string)x.Key", span="420-420"];
m2_345 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="420-420"];
m2_344 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(long)x.Count", span="420-420"];
m2_335 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="409-409"];
m2_334 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.ToString(''yyyy-MM-dd'')", span="409-409"];
m2_307 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="378-378"];
m2_306 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(string)x.Key", span="378-378"];
m2_309 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="(long)x.Count", span="378-378"];
m2_310 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="378-378"];
m2_180 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="560-560"];
m2_406 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                        FetchedAt = job.FetchedAt\r\n                    }))", span="580-587"];
m2_404 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="576-576"];
m2_405 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label=jobs, span="578-578"];
m2_403 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="571-574"];
m2_402 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="string fetchedJobsSql = @''\r\nselect j.*, jq.FetchedAt, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is not null''", span="564-569"];
m2_407 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="return new JobList<FetchedJobDto>(result);", span="590-590"];
m2_408 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="560-560"];
m2_145 [cluster="HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18"];
m2_93 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m2_90 [cluster="Unk.ToList", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToList", span=""];
m2_54 [cluster="HangFire.Common.JobHelper.DeserializeDateTime(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Common.JobHelper.DeserializeDateTime(string)", span="56-56"];
m2_339 [cluster="Unk.Format", file="SqlServerMonitoringApi.cs", label="Entry Unk.Format", span=""];
m2_412 [cluster="HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21"];
m2_303 [cluster="System.DateTime.ToString(string)", file="SqlServerMonitoringApi.cs", label="Entry System.DateTime.ToString(string)", span="0-0"];
m2_171 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="240-240"];
m2_172 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection =>\r\n            {\r\n                var queueApi = GetQueueApi(connection, queue);\r\n                var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage);\r\n\r\n                return FetchedJobs(connection, fetchedJobIds);\r\n            });", span="242-248"];
m2_173 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="240-240"];
m2_142 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", file="SqlServerMonitoringApi.cs", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
m2_299 [cluster="Unk.ElementAt", file="SqlServerMonitoringApi.cs", label="Entry Unk.ElementAt", span=""];
m2_410 [cluster="KeyValuePair<string, FetchedJobDto>.cstr", file="SqlServerMonitoringApi.cs", label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span=""];
m2_296 [cluster="Unk.Query", file="SqlServerMonitoringApi.cs", label="Entry Unk.Query", span=""];
m2_42 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="83-83"];
m2_43 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }));", span="85-94"];
m2_44 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="83-83"];
m2_297 [cluster="Unk.Add", file="SqlServerMonitoringApi.cs", label="Entry Unk.Add", span=""];
m2_362 [cluster="Unk.Complete", file="SqlServerMonitoringApi.cs", label="Entry Unk.Complete", span=""];
m2_359 [cluster="TransactionOptions.cstr", file="SqlServerMonitoringApi.cs", label="Entry TransactionOptions.cstr", span=""];
m2_409 [cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", file="SqlServerMonitoringApi.cs", label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span=""];
m2_20 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)", span="437-437"];
m2_346 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var provider = _queueProviders.GetProvider(queueName)", span="441-441"];
m2_347 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var monitoringApi = provider.GetJobQueueMonitoringApi(connection)", span="442-442"];
m2_348 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="return monitoringApi;", span="444-444"];
m2_349 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetQueueApi(SqlConnection, string)", span="437-437"];
m2_295 [cluster="System.DateTime.AddHours(double)", file="SqlServerMonitoringApi.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m2_4 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="43-43"];
m2_5 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ScheduledState.StateName));", span="45-46"];
m2_6 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="43-43"];
m2_207 [cluster="Unk.QueryMultiple", file="SqlServerMonitoringApi.cs", label="Entry Unk.QueryMultiple", span=""];
m2_114 [cluster="HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23"];
m2_55 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="97-97"];
m2_56 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }));", span="99-108"];
m2_57 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="97-97"];
m2_228 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="308-308"];
m2_229 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, DeletedState.StateName));", span="310-311"];
m2_230 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="308-308"];
m2_161 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="229-229"];
m2_162 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection =>\r\n            {\r\n                var queueApi = GetQueueApi(connection, queue);\r\n                var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage);\r\n\r\n                return EnqueuedJobs(connection, enqueuedJobIds);\r\n            });", span="231-237"];
m2_163 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="229-229"];
m2_78 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="123-123"];
m2_79 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    @''select * from HangFire.Server'')\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="125-147"];
m2_80 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Servers()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Servers()", span="123-123"];
m2_139 [cluster="Unk.SelectMany", file="SqlServerMonitoringApi.cs", label="Entry Unk.SelectMany", span=""];
m2_209 [cluster="Unk.ToDictionary", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToDictionary", span=""];
m2_222 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="302-302"];
m2_223 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="304-305"];
m2_224 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="302-302"];
m2_376 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="503-503"];
m2_377 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="505-505"];
m2_378 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="data.Arguments = arguments", span="506-506"];
m2_379 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="return data.Deserialize();", span="510-510"];
m2_381 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="return null;", span="514-514"];
m2_380 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label=JobLoadException, span="512-512"];
m2_382 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="503-503"];
m2_371 [cluster="HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23"];
m2_103 [cluster="HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23"];
m2_81 [cluster="Unk.>", file="SqlServerMonitoringApi.cs", label="Entry Unk.>", span=""];
m2_21 [cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="25-25"];
m2_143 [cluster="Unk.GetEnqueuedJobIds", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetEnqueuedJobIds", span=""];
m2_140 [cluster="Unk.OrderBy", file="SqlServerMonitoringApi.cs", label="Entry Unk.OrderBy", span=""];
m2_144 [cluster="Unk.GetEnqueuedAndFetchedCount", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetEnqueuedAndFetchedCount", span=""];
m2_11 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="490-490"];
m2_372 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="string sqlQuery = @''\r\nselect count(Id) from HangFire.Job where StateName = @state''", span="492-493"];
m2_373 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var count = connection.Query<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName })\r\n                 .Single()", span="495-498"];
m2_374 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="return count;", span="500-500"];
m2_375 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="490-490"];
m2_154 [cluster="Unk.GetQueues", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetQueues", span=""];
m2_298 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m2_401 [cluster="HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22"];
m2_116 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="185-185"];
m2_117 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }));", span="187-196"];
m2_118 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="185-185"];
m2_12 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="49-49"];
m2_13 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection =>\r\n            {\r\n                var queueApi = GetQueueApi(connection, queue);\r\n                var counters = queueApi.GetEnqueuedAndFetchedCount(queue);\r\n\r\n                return counters.EnqueuedCount ?? 0;\r\n            });", span="51-57"];
m2_14 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="49-49"];
m2_188 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="257-257"];
m2_189 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="SqlServerMonitoringApi.cs", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''failed''));", span="259-260"];
m2_190 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="257-257"];
m2_170 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="462-462"];
m2_365 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="return DeserializeJobs(\r\n                jobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="478-487"];
m2_364 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="473-476"];
m2_363 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="string enqueuedJobsSql = @''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom HangFire.Job j\r\nleft join HangFire.State s on s.Id = j.StateId\r\nleft join HangFire.JobQueue jq on jq.JobId = j.Id\r\nwhere j.Id in @jobIds and jq.FetchedAt is null''", span="466-471"];
m2_366 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="462-462"];
m2_169 [cluster="HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="23-23"];
m2_259 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m2_138 [cluster="Unk.Select", file="SqlServerMonitoringApi.cs", label="Entry Unk.Select", span=""];
m2_150 [cluster="Unk.GetJobQueueMonitoringApi", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetJobQueueMonitoringApi", span=""];
m2_221 [cluster="HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21"];
m2_397 [cluster="System.Collections.Generic.List<T>.List(int)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m2_257 [cluster="Unk.Single", file="SqlServerMonitoringApi.cs", label="Entry Unk.Single", span=""];
m2_71 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="395-395"];
m2_311 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var endDate = DateTime.UtcNow.Date", span="399-399"];
m2_318 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var keys = stringDates.Select(x => String.Format(''stats:{0}:{1}'', type, x)).ToList()", span="410-410"];
m2_320 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="417-420"];
m2_324 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var result = new Dictionary<DateTime, long>()", span="427-427"];
m2_317 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var stringDates = dates.Select(x => x.ToString(''yyyy-MM-dd'')).ToList()", span="409-409"];
m2_315 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="dates.Add(endDate)", span="405-405"];
m2_330 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="return result;", span="434-434"];
m2_312 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var startDate = endDate.AddDays(-7)", span="400-400"];
m2_314 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="startDate <= endDate", span="403-403"];
m2_316 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="endDate = endDate.AddDays(-1)", span="406-406"];
m2_319 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="412-415"];
m2_321 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label=keys, span="422-422"];
m2_322 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="!valuesMap.ContainsKey(key)", span="424-424"];
m2_323 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="valuesMap.Add(key, 0)", span="424-424"];
m2_327 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="430-430"];
m2_325 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var i = 0", span="428-428"];
m2_328 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="result.Add(dates[i], value)", span="431-431"];
m2_313 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var dates = new List<DateTime>()", span="401-401"];
m2_326 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="i < stringDates.Count", span="428-428"];
m2_329 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="i++", span="428-428"];
m2_331 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="395-395"];
m2_126 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="199-199"];
m2_127 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="return UseConnection<IList<QueueWithTopEnqueuedJobsDto>>(connection =>\r\n            {\r\n                var tuples = _queueProviders\r\n                    .Select(x => x.GetJobQueueMonitoringApi(connection))\r\n                    .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                    .OrderBy(x => x.Queue)\r\n                    .ToArray();\r\n\r\n                var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length);\r\n\r\n                foreach (var tuple in tuples)\r\n                {\r\n                    var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5);\r\n                    var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue);\r\n\r\n                    result.Add(new QueueWithTopEnqueuedJobsDto\r\n                    {\r\n                        Name = tuple.Queue,\r\n                        Length = counters.EnqueuedCount ?? 0,\r\n                        Fetched = counters.FetchedCount,\r\n                        FirstJobs = EnqueuedJobs(connection, enqueuedJobIds)\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="201-226"];
m2_128 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.Queues()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.Queues()", span="199-199"];
m2_187 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="356-356"];
m2_281 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var keys = dates.Select(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))).ToList()", span="368-368"];
m2_278 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="dates.Add(endDate)", span="364-364"];
m2_274 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var endDate = DateTime.UtcNow", span="360-360"];
m2_283 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="375-378"];
m2_287 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var result = new Dictionary<DateTime, long>()", span="385-385"];
m2_275 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var dates = new List<DateTime>()", span="361-361"];
m2_277 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="i < 24", span="362-362"];
m2_282 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="string sqlQuery = @''\r\nselect [Key], count([Value]) as Count from [HangFire].[Counter]\r\ngroup by [Key]\r\nhaving [Key] in @keys''", span="370-373"];
m2_284 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label=keys, span="380-380"];
m2_279 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="endDate = endDate.AddHours(-1)", span="365-365"];
m2_293 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="return result;", span="392-392"];
m2_285 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="!valuesMap.ContainsKey(key)", span="382-382"];
m2_286 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="valuesMap.Add(key, 0)", span="382-382"];
m2_290 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var value = valuesMap[valuesMap.Keys.ElementAt(i)]", span="388-388"];
m2_288 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var i = 0", span="386-386"];
m2_291 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="result.Add(dates[i], value)", span="389-389"];
m2_276 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="var i = 0", span="362-362"];
m2_289 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="i < dates.Count", span="386-386"];
m2_280 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="i++", span="362-362"];
m2_292 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="i++", span="386-386"];
m2_294 [cluster="HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="356-356"];
m2_208 [cluster="Unk.SingleOrDefault", file="SqlServerMonitoringApi.cs", label="Entry Unk.SingleOrDefault", span=""];
m2_211 [cluster="Unk.DeserializeJob", file="SqlServerMonitoringApi.cs", label="Entry Unk.DeserializeJob", span=""];
m2_413 [file="SqlServerMonitoringApi.cs", label="HangFire.SqlServer.SqlServerMonitoringApi", span=""];
m2_414 [file="SqlServerMonitoringApi.cs", label=string, span=""];
m2_415 [file="SqlServerMonitoringApi.cs", label=string, span=""];
m2_416 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_417 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_418 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_419 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_420 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_421 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_422 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_423 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_424 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_425 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_427 [file="SqlServerMonitoringApi.cs", label=string, span=""];
m2_430 [file="SqlServerMonitoringApi.cs", label=string, span=""];
m2_435 [file="SqlServerMonitoringApi.cs", label=SqlConnection, span=""];
m2_428 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_429 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_431 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_432 [file="SqlServerMonitoringApi.cs", label=int, span=""];
m2_433 [file="SqlServerMonitoringApi.cs", label=string, span=""];
m2_434 [file="SqlServerMonitoringApi.cs", label=countByStates, span=""];
m2_437 [file="SqlServerMonitoringApi.cs", label=string, span=""];
m2_426 [file="SqlServerMonitoringApi.cs", label=SqlConnection, span=""];
m2_436 [file="SqlServerMonitoringApi.cs", label=string, span=""];
n0 -> n3  [color=darkseagreen4, key=1, label="HangFire.Common.Job", style=dashed];
n10 -> n12  [color=darkseagreen4, key=1, label=string, style=dashed];
n16 -> n20  [color=darkseagreen4, key=1, label=bool, style=dashed];
n16 -> n21  [color=darkseagreen4, key=1, label="System.TimeSpan?", style=dashed];
n22 -> n24  [color=darkseagreen4, key=1, label="System.TimeSpan?", style=dashed];
n22 -> n25  [color=darkseagreen4, key=1, label="System.TimeSpan?", style=dashed];
n22 -> n26  [color=darkseagreen4, key=1, label="System.TimeSpan?", style=dashed];
n22 -> n27  [color=darkseagreen4, key=1, label="System.TimeSpan?", style=dashed];
n22 -> n28  [color=darkseagreen4, key=1, label="System.TimeSpan?", style=dashed];
n19 -> n21  [color=darkseagreen4, key=1, label=builder, style=dashed];
n19 -> n24  [color=darkseagreen4, key=1, label=builder, style=dashed];
n19 -> n26  [color=darkseagreen4, key=1, label=builder, style=dashed];
n19 -> n28  [color=darkseagreen4, key=1, label=builder, style=dashed];
n19 -> n31  [color=darkseagreen4, key=1, label=builder, style=dashed];
n19 -> n33  [color=darkseagreen4, key=1, label=builder, style=dashed];
n19 -> n34  [color=darkseagreen4, key=1, label=builder, style=dashed];
n43 -> n47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n48 -> n48  [color=darkseagreen4, key=1, label="System.Collections.Generic.KeyValuePair<string, string>", style=dashed];
n50 -> n52  [color=darkseagreen4, key=1, label=string, style=dashed];
n57 -> n59  [color=darkseagreen4, key=1, label=string, style=dashed];
n58 -> n60  [color=darkseagreen4, key=1, label=writer, style=dashed];
n63 -> n66  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n63 -> n68  [color=darkseagreen4, key=1, label=string, style=dashed];
n63 -> n69  [color=darkseagreen4, key=1, label=string, style=dashed];
n63 -> n70  [color=darkseagreen4, key=1, label=string, style=dashed];
n63 -> n72  [color=darkseagreen4, key=1, label=string, style=dashed];
n68 -> n70  [color=darkseagreen4, key=1, label=match, style=dashed];
n67 -> n69  [color=darkseagreen4, key=1, label=anchor, style=dashed];
n67 -> n72  [color=darkseagreen4, key=1, label=anchor, style=dashed];
n71 -> n72  [color=darkseagreen4, key=1, label=anchor, style=dashed];
n76 -> n140  [color=darkseagreen4, key=1, label=string, style=dashed];
n77 -> n80  [color=darkseagreen4, key=1, label="System.Text.RegularExpressions.Match", style=dashed];
n77 -> n81  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n77 -> n85  [color=darkseagreen4, key=1, label=string, style=dashed];
n77 -> n87  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n77 -> n91  [color=darkseagreen4, key=1, label=string, style=dashed];
n77 -> n92  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n77 -> n97  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n77 -> n99  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n77 -> n101  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n77 -> n102  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n77 -> n104  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n77 -> n105  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n77 -> n109  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n77 -> n111  [color=darkseagreen4, key=1, label=string, style=dashed];
n82 -> n85  [color=darkseagreen4, key=1, label=anchor, style=dashed];
n89 -> n91  [color=darkseagreen4, key=1, label=anchor, style=dashed];
n108 -> n111  [color=darkseagreen4, key=1, label=anchor, style=dashed];
n90 -> n94  [color=darkseagreen4, key=1, label=parameters, style=dashed];
n114 -> n121  [color=darkseagreen4, key=1, label="System.Text.RegularExpressions.Group", style=dashed];
n114 -> n122  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n114 -> n123  [color=darkseagreen4, key=1, label=string, style=dashed];
n94 -> n97  [color=darkseagreen4, key=1, label=parameter, style=dashed];
n93 -> n98  [color=darkseagreen4, key=1, label=position, style=dashed];
n98 -> n98  [color=darkseagreen4, key=1, label=position, style=dashed];
n118 -> n133  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n118 -> n134  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n118 -> n135  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n118 -> n136  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n118 -> n137  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n125 -> n127  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
n125 -> n128  [color=darkseagreen4, key=1, label=string, style=dashed];
n125 -> n129  [color=darkseagreen4, key=1, label=string, style=dashed];
n125 -> n130  [color=darkseagreen4, key=1, label=int, style=dashed];
m1_25 -> m1_38  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_150 -> m1_153  [color=darkseagreen4, key=1, label="HangFire.Server.ServerContext", style=dashed];
m1_102 -> m1_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_124 -> m1_127  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m1_124 -> m1_131  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m1_130 -> m1_133  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_89 -> m1_92  [color=darkseagreen4, key=1, label=sqlState, style=dashed];
m1_95 -> m1_100  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_95 -> m1_98  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="HangFire.SqlServer.PersistentJobQueueProviderCollection", style=dashed];
m1_66 -> m1_70  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_70 -> m1_73  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m1_70 -> m1_74  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m1_70 -> m1_80  [color=darkseagreen4, key=1, label=jobData, style=dashed];
m1_73 -> m1_77  [color=darkseagreen4, key=1, label=invocationData, style=dashed];
m1_49 -> m1_57  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_51 -> m1_56  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m1_22 -> m1_27  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_22 -> m1_29  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_170 -> m1_170  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_42 -> m1_45  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_42 -> m1_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_42 -> m1_53  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_100 -> m1_36  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_37  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_42  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_50  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_56  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_60  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_61  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_66  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_70  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_71  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_76  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_80  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_81  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_86  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_90  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_91  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_100 -> m1_97  [color=darkseagreen4, key=1, label="HangFire.Tests.ServerWatchdogFeature", style=dashed];
m1_116 -> m1_119  [color=darkseagreen4, key=1, label=double, style=dashed];
m1_140 -> m1_144  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_140 -> m1_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_177 -> m1_70  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_177 -> m1_10  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_177 -> m1_14  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_177 -> m1_18  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_177 -> m1_39  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_177 -> m1_56  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m1_177 -> m1_100  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerConnection", style=dashed];
m2_48 -> m2_387  [color=darkseagreen4, key=1, label="System.Func<HangFire.SqlServer.Entities.SqlJob, HangFire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
m2_235 -> m2_237  [color=green, key=1, label="lambda expression", style=dashed];
m2_73 -> m2_75  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_351 -> m2_355  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m2_354 -> m2_356  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_195 -> m2_197  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_182 -> m2_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_37 -> m2_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_106 -> m2_108  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_95 -> m2_97  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_66 -> m2_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_23 -> m2_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_31 -> m2_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_389 -> m2_391  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<HangFire.SqlServer.Entities.SqlJob>", style=dashed];
m2_390 -> m2_394  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_390 -> m2_395  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_391 -> m2_394  [color=darkseagreen4, key=1, label=job, style=dashed];
m2_237 -> m2_271  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m2_239 -> m2_252  [color=darkseagreen4, key=1, label=stats, style=dashed];
m2_46 -> m2_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_59 -> m2_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_98 -> m2_100  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_109 -> m2_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_120 -> m2_122  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_130 -> m2_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_130 -> m2_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_130 -> m2_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_130 -> m2_158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_130 -> m2_132  [color=darkseagreen4, key=1, label=tuples, style=dashed];
m2_251 -> m2_270  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_241 -> m2_260  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_241 -> m2_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_241 -> m2_267  [color=darkseagreen4, key=1, label=countByStates, style=dashed];
m2_129 -> m2_148  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m2_131 -> m2_136  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_164 -> m2_167  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m2_174 -> m2_177  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m2_203 -> m2_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_203 -> m2_215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_204 -> m2_218  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_242 -> m2_267  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_83 -> m2_85  [color=darkseagreen4, key=1, label=servers, style=dashed];
m2_84 -> m2_88  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_404 -> m2_407  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_403 -> m2_405  [color=darkseagreen4, key=1, label=jobs, style=dashed];
m2_172 -> m2_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_43 -> m2_45  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_5 -> m2_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_56 -> m2_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_229 -> m2_231  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_162 -> m2_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_79 -> m2_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_223 -> m2_225  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_377 -> m2_379  [color=darkseagreen4, key=1, label=data, style=dashed];
m2_117 -> m2_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_13 -> m2_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_189 -> m2_191  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_365 -> m2_368  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_71 -> m2_337  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_311 -> m2_314  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m2_311 -> m2_315  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m2_318 -> m2_336  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_318 -> m2_321  [color=darkseagreen4, key=1, label=keys, style=dashed];
m2_320 -> m2_340  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_320 -> m2_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_320 -> m2_322  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m2_320 -> m2_323  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m2_324 -> m2_328  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_324 -> m2_330  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_317 -> m2_333  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_317 -> m2_326  [color=darkseagreen4, key=1, label=stringDates, style=dashed];
m2_312 -> m2_314  [color=darkseagreen4, key=1, label=startDate, style=dashed];
m2_321 -> m2_323  [color=darkseagreen4, key=1, label=key, style=dashed];
m2_325 -> m2_328  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_325 -> m2_329  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_313 -> m2_315  [color=darkseagreen4, key=1, label=dates, style=dashed];
m2_313 -> m2_328  [color=darkseagreen4, key=1, label=dates, style=dashed];
m2_329 -> m2_329  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_127 -> m2_129  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_187 -> m2_301  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_281 -> m2_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_281 -> m2_284  [color=darkseagreen4, key=1, label=keys, style=dashed];
m2_274 -> m2_278  [color=darkseagreen4, key=1, label=endDate, style=dashed];
m2_283 -> m2_305  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_283 -> m2_308  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_283 -> m2_285  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m2_283 -> m2_286  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
m2_287 -> m2_291  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_287 -> m2_293  [color=darkseagreen4, key=1, label=result, style=dashed];
m2_275 -> m2_278  [color=darkseagreen4, key=1, label=dates, style=dashed];
m2_275 -> m2_289  [color=darkseagreen4, key=1, label=dates, style=dashed];
m2_275 -> m2_291  [color=darkseagreen4, key=1, label=dates, style=dashed];
m2_284 -> m2_286  [color=darkseagreen4, key=1, label=key, style=dashed];
m2_288 -> m2_291  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_288 -> m2_292  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_276 -> m2_280  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_280 -> m2_280  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_292 -> m2_292  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_413 -> m2_5  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_9  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_31  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_34  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_37  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_40  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_66  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_69  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_73  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_76  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_167  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_177  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_182  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_185  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_189  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_192  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_223  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_226  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_229  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_232  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_413 -> m2_387  [color=darkseagreen4, key=1, label="HangFire.SqlServer.SqlServerMonitoringApi", style=dashed];
m2_435 -> m2_271  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m2_434 -> m2_267  [color=darkseagreen4, key=1, label=countByStates, style=dashed];
m2_437 -> m2_337  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_426 -> m2_148  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m2_436 -> m2_301  [color=darkseagreen4, key=1, label=string, style=dashed];
}
