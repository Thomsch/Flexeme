digraph  {
n383 [label="Hangfire.SqlServer.SqlServerMonitoringApi", span=""];
n384 [label=int, span=""];
n385 [label=int, span=""];
n386 [label=int, span=""];
n387 [label=int, span=""];
n388 [label=int, span=""];
n389 [label=int, span=""];
n390 [label=int, span=""];
n391 [label=int, span=""];
n392 [label=int, span=""];
n393 [label=int, span=""];
n394 [label=enqueuedJobIds, span=""];
n395 [label=enqueuedJobIds, span=""];
n396 [label=fetchedJobIds, span=""];
n397 [label=string, span=""];
n398 [label=sql, span=""];
n399 [label=string, span=""];
n400 [label=string, span=""];
n0 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="36-36", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n1 [label="storage == null", span="38-38", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n3 [label="_storage = storage", span="40-40", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n4 [label="_jobListLimit = jobListLimit", span="41-41", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n2 [label="throw new ArgumentNullException(''storage'');", span="38-38", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n5 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="36-36", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)"];
n6 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n7 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="44-44", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()"];
n8 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ScheduledState.StateName));", span="46-47", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()"];
n9 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="44-44", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()"];
n10 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="423-423", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)"];
n11 [label="Entry lambda expression", span="46-47", cluster="lambda expression"];
n12 [label="GetNumberOfJobsByStateName(connection, ScheduledState.StateName)", span="47-47", cluster="lambda expression"];
n13 [label="Exit lambda expression", span="46-47", cluster="lambda expression"];
n14 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="455-455", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)"];
n15 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="50-50", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n16 [label="var queueApi = GetQueueApi(queue)", span="52-52", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n17 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="53-53", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n20 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="415-415", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)"];
n18 [label="return counters.EnqueuedCount ?? 0;", span="55-55", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n21 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="25-25", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)"];
n19 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="50-50", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)"];
n22 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="58-58", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n23 [label="var queueApi = GetQueueApi(queue)", span="60-60", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n24 [label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="61-61", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n25 [label="return counters.FetchedCount ?? 0;", span="63-63", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n26 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="58-58", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)"];
n27 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="66-66", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()"];
n28 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, FailedState.StateName));", span="68-69", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()"];
n29 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="66-66", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()"];
n30 [label="Entry lambda expression", span="68-69", cluster="lambda expression"];
n31 [label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="69-69", cluster="lambda expression"];
n32 [label="Exit lambda expression", span="68-69", cluster="lambda expression"];
n33 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="72-72", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()"];
n34 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="74-75", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()"];
n35 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="72-72", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()"];
n36 [label="Entry lambda expression", span="74-75", cluster="lambda expression"];
n37 [label="GetNumberOfJobsByStateName(connection, ProcessingState.StateName)", span="75-75", cluster="lambda expression"];
n38 [label="Exit lambda expression", span="74-75", cluster="lambda expression"];
n39 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="78-78", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)"];
n40 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }));", span="80-89", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)"];
n43 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                })", span="80-89", cluster="lambda expression"];
n41 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="78-78", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)"];
n42 [label="Entry lambda expression", span="80-89", cluster="lambda expression"];
n44 [label="Exit lambda expression", span="80-89", cluster="lambda expression"];
n45 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="484-484", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n46 [label="Entry lambda expression", span="84-89", cluster="lambda expression"];
n47 [label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }", span="84-89", cluster="lambda expression"];
n48 [label="Exit lambda expression", span="84-89", cluster="lambda expression"];
n49 [label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()"];
n50 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)"];
n51 [label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73", cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)"];
n52 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="92-92", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)"];
n53 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }));", span="94-103", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)"];
n56 [label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                })", span="94-103", cluster="lambda expression"];
n54 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="92-92", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)"];
n55 [label="Entry lambda expression", span="94-103", cluster="lambda expression"];
n57 [label="Exit lambda expression", span="94-103", cluster="lambda expression"];
n58 [label="Entry lambda expression", span="98-103", cluster="lambda expression"];
n59 [label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }", span="98-103", cluster="lambda expression"];
n60 [label="Exit lambda expression", span="98-103", cluster="lambda expression"];
n61 [label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()"];
n62 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="106-106", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()"];
n63 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="108-109", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()"];
n64 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="106-106", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()"];
n65 [label="Entry lambda expression", span="108-109", cluster="lambda expression"];
n66 [label="GetTimelineStats(connection, ''succeeded'')", span="109-109", cluster="lambda expression"];
n67 [label="Exit lambda expression", span="108-109", cluster="lambda expression"];
n68 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n69 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="112-112", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()"];
n70 [label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="114-115", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()"];
n71 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="112-112", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()"];
n72 [label="Entry lambda expression", span="114-115", cluster="lambda expression"];
n73 [label="GetTimelineStats(connection, ''failed'')", span="115-115", cluster="lambda expression"];
n74 [label="Exit lambda expression", span="114-115", cluster="lambda expression"];
n75 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="118-118", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()"];
n76 [label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    string.Format(@''select * from [{0}].Server'', _storage.GetSchemaName()))\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="120-142", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()"];
n77 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="118-118", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()"];
n78 [label="Entry Unk.>", span="", cluster="Unk.>"];
n79 [label="Entry lambda expression", span="120-142", cluster="lambda expression"];
n80 [label="var servers = connection.Query<Entities.Server>(\r\n                    string.Format(@''select * from [{0}].Server'', _storage.GetSchemaName()))\r\n                    .ToList()", span="122-124", cluster="lambda expression"];
n81 [label="var result = new List<ServerDto>()", span="126-126", cluster="lambda expression"];
n87 [label="Entry Hangfire.SqlServer.SqlServerStorage.GetSchemaName()", span="238-238", cluster="Hangfire.SqlServer.SqlServerStorage.GetSchemaName()"];
n88 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)"];
n89 [label="Entry Unk.ToList", span="", cluster="Unk.ToList"];
n82 [label=servers, span="128-128", cluster="lambda expression"];
n90 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n84 [label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="131-138", cluster="lambda expression"];
n85 [label="return result;", span="141-141", cluster="lambda expression"];
n83 [label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="130-130", cluster="lambda expression"];
n91 [label="Entry Hangfire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.ServerDto.ServerDto()"];
n92 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
n86 [label="Exit lambda expression", span="120-142", cluster="lambda expression"];
n93 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="145-145", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)"];
n94 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="147-160", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)"];
n97 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", span="147-160", cluster="lambda expression"];
n95 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="145-145", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)"];
n96 [label="Entry lambda expression", span="147-160", cluster="lambda expression"];
n98 [label="Exit lambda expression", span="147-160", cluster="lambda expression"];
n99 [label="Entry lambda expression", span="152-160", cluster="lambda expression"];
n100 [label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", span="152-160", cluster="lambda expression"];
n101 [label="Exit lambda expression", span="152-160", cluster="lambda expression"];
n102 [label="Entry Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()"];
n103 [label="Entry Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", span="84-84", cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)"];
n104 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="163-163", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)"];
n105 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }));", span="165-178", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)"];
n108 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="165-178", cluster="lambda expression"];
n106 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="163-163", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)"];
n107 [label="Entry lambda expression", span="165-178", cluster="lambda expression"];
n109 [label="Exit lambda expression", span="165-178", cluster="lambda expression"];
n110 [label="Entry lambda expression", span="170-178", cluster="lambda expression"];
n111 [label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", span="170-178", cluster="lambda expression"];
n112 [label="Exit lambda expression", span="170-178", cluster="lambda expression"];
n113 [label="Entry Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()"];
n114 [label="Entry long.Parse(string)", span="0-0", cluster="long.Parse(string)"];
n115 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="181-181", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)"];
n116 [label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }));", span="183-192", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)"];
n119 [label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                })", span="183-192", cluster="lambda expression"];
n117 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="181-181", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)"];
n118 [label="Entry lambda expression", span="183-192", cluster="lambda expression"];
n120 [label="Exit lambda expression", span="183-192", cluster="lambda expression"];
n121 [label="Entry lambda expression", span="188-192", cluster="lambda expression"];
n122 [label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="188-192", cluster="lambda expression"];
n123 [label="Exit lambda expression", span="188-192", cluster="lambda expression"];
n124 [label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7", cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()"];
n125 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="195-195", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n126 [label="var tuples = _storage.QueueProviders\r\n                .Select(x => x.GetJobQueueMonitoringApi())\r\n                .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                .OrderBy(x => x.Queue)\r\n                .ToArray()", span="197-201", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n127 [label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="203-203", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n135 [label="Entry Unk.Select", span="", cluster="Unk.Select"];
n136 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany"];
n137 [label="Entry Unk.OrderBy", span="", cluster="Unk.OrderBy"];
n138 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray"];
n143 [label="Entry lambda expression", span="198-198", cluster="lambda expression"];
n147 [label="Entry lambda expression", span="199-199", cluster="lambda expression"];
n151 [label="Entry lambda expression", span="199-199", cluster="lambda expression"];
n154 [label="Entry lambda expression", span="200-200", cluster="lambda expression"];
n128 [label=tuples, span="205-205", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n139 [label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span="", cluster="List<QueueWithTopEnqueuedJobsDto>.cstr"];
n132 [label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                {\r\n                    Name = tuple.Queue,\r\n                    Length = counters.EnqueuedCount ?? 0,\r\n                    Fetched = counters.FetchedCount,\r\n                    FirstJobs = firstJobs\r\n                })", span="212-218", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n133 [label="return result;", span="221-221", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n129 [label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="207-207", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n130 [label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="208-208", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n140 [label="Entry Unk.GetEnqueuedJobIds", span="", cluster="Unk.GetEnqueuedJobIds"];
n131 [label="var firstJobs = UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds))", span="210-210", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n158 [label="EnqueuedJobs(connection, enqueuedJobIds)", span="210-210", cluster="lambda expression"];
n141 [label="Entry Unk.GetEnqueuedAndFetchedCount", span="", cluster="Unk.GetEnqueuedAndFetchedCount"];
n157 [label="Entry lambda expression", span="210-210", cluster="lambda expression"];
n142 [label="Entry Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18", cluster="Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()"];
n134 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="195-195", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()"];
n144 [label="x.GetJobQueueMonitoringApi()", span="198-198", cluster="lambda expression"];
n145 [label="Exit lambda expression", span="198-198", cluster="lambda expression"];
n146 [label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", span="21-21", cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()"];
n148 [label="x.GetQueues()", span="199-199", cluster="lambda expression"];
n149 [label="Exit lambda expression", span="199-199", cluster="lambda expression"];
n150 [label="Entry Unk.GetQueues", span="", cluster="Unk.GetQueues"];
n152 [label="new { Monitoring = monitoring, Queue = queue }", span="199-199", cluster="lambda expression"];
n153 [label="Exit lambda expression", span="199-199", cluster="lambda expression"];
n155 [label="x.Queue", span="200-200", cluster="lambda expression"];
n156 [label="Exit lambda expression", span="200-200", cluster="lambda expression"];
n159 [label="Exit lambda expression", span="210-210", cluster="lambda expression"];
n160 [label="Entry Unk.EnqueuedJobs", span="", cluster="Unk.EnqueuedJobs"];
n161 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="224-224", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n162 [label="var queueApi = GetQueueApi(queue)", span="226-226", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n163 [label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="227-227", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n164 [label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds));", span="229-229", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n166 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="23-23", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)"];
n168 [label="EnqueuedJobs(connection, enqueuedJobIds)", span="229-229", cluster="lambda expression"];
n165 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="224-224", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)"];
n167 [label="Entry lambda expression", span="229-229", cluster="lambda expression"];
n169 [label="Exit lambda expression", span="229-229", cluster="lambda expression"];
n170 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="428-428", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n171 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="232-232", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n172 [label="var queueApi = GetQueueApi(queue)", span="234-234", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n173 [label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="235-235", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n174 [label="return UseConnection(connection => FetchedJobs(connection, fetchedJobIds));", span="237-237", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n176 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="24-24", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)"];
n178 [label="FetchedJobs(connection, fetchedJobIds)", span="237-237", cluster="lambda expression"];
n175 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="232-232", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)"];
n177 [label="Entry lambda expression", span="237-237", cluster="lambda expression"];
n179 [label="Exit lambda expression", span="237-237", cluster="lambda expression"];
n180 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="530-530", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n181 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="240-240", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()"];
n182 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="242-243", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()"];
n183 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="240-240", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()"];
n184 [label="Entry lambda expression", span="242-243", cluster="lambda expression"];
n185 [label="GetHourlyTimelineStats(connection, ''succeeded'')", span="243-243", cluster="lambda expression"];
n186 [label="Exit lambda expression", span="242-243", cluster="lambda expression"];
n187 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="354-354", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n188 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="246-246", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()"];
n189 [label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''failed''));", span="248-249", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()"];
n190 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="246-246", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()"];
n191 [label="Entry lambda expression", span="248-249", cluster="lambda expression"];
n192 [label="GetHourlyTimelineStats(connection, ''failed'')", span="249-249", cluster="lambda expression"];
n193 [label="Exit lambda expression", span="248-249", cluster="lambda expression"];
n194 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)"];
n195 [label="return UseConnection(connection =>\r\n            {\r\n\r\n                string sql = string.Format(@''\r\nselect * from [{0}].Job where Id = @id\r\nselect * from [{0}].JobParameter where JobId = @id\r\nselect * from [{0}].State where JobId = @id order by Id desc'', _storage.GetSchemaName());\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="254-291", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)"];
n199 [label="var multi = connection.QueryMultiple(sql, new { id = jobId })", span="262-262", cluster="lambda expression"];
n196 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="252-252", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)"];
n197 [label="Entry lambda expression", span="254-291", cluster="lambda expression"];
n198 [label="string sql = string.Format(@''\r\nselect * from [{0}].Job where Id = @id\r\nselect * from [{0}].JobParameter where JobId = @id\r\nselect * from [{0}].State where JobId = @id order by Id desc'', _storage.GetSchemaName())", span="257-260", cluster="lambda expression"];
n200 [label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="264-264", cluster="lambda expression"];
n207 [label="Entry Unk.QueryMultiple", span="", cluster="Unk.QueryMultiple"];
n203 [label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="267-267", cluster="lambda expression"];
n204 [label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="268-280", cluster="lambda expression"];
n201 [label="job == null", span="265-265", cluster="lambda expression"];
n208 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault"];
n205 [label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="282-289", cluster="lambda expression"];
n202 [label="return null;", span="265-265", cluster="lambda expression"];
n209 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary"];
n212 [label="Entry lambda expression", span="267-267", cluster="lambda expression"];
n215 [label="Entry lambda expression", span="267-267", cluster="lambda expression"];
n218 [label="Entry lambda expression", span="271-279", cluster="lambda expression"];
n206 [label="Exit lambda expression", span="254-291", cluster="lambda expression"];
n210 [label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22", cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()"];
n211 [label="Entry Unk.DeserializeJob", span="", cluster="Unk.DeserializeJob"];
n213 [label="x.Name", span="267-267", cluster="lambda expression"];
n214 [label="Exit lambda expression", span="267-267", cluster="lambda expression"];
n216 [label="x.Value", span="267-267", cluster="lambda expression"];
n217 [label="Exit lambda expression", span="267-267", cluster="lambda expression"];
n219 [label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            }", span="271-279", cluster="lambda expression"];
n220 [label="Exit lambda expression", span="271-279", cluster="lambda expression"];
n221 [label="Entry Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()"];
n222 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)"];
n223 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="294-294", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()"];
n224 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="296-297", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()"];
n225 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="294-294", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()"];
n226 [label="Entry lambda expression", span="296-297", cluster="lambda expression"];
n227 [label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", span="297-297", cluster="lambda expression"];
n228 [label="Exit lambda expression", span="296-297", cluster="lambda expression"];
n229 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="300-300", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()"];
n230 [label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, DeletedState.StateName));", span="302-303", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()"];
n231 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="300-300", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()"];
n232 [label="Entry lambda expression", span="302-303", cluster="lambda expression"];
n233 [label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="303-303", cluster="lambda expression"];
n234 [label="Exit lambda expression", span="302-303", cluster="lambda expression"];
n235 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="306-306", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n236 [label="string sql = string.Format(@''\r\nselect count(Id) from [{0}].Job where StateName = N'Enqueued';\r\nselect count(Id) from [{0}].Job where StateName = N'Failed';\r\nselect count(Id) from [{0}].Job where StateName = N'Processing';\r\nselect count(Id) from [{0}].Job where StateName = N'Scheduled';\r\nselect count(Id) from [{0}].Server;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter where [Key] = N'stats:succeeded'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter where [Key] = N'stats:succeeded'\r\n) as s;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter where [Key] = N'stats:deleted'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter where [Key] = N'stats:deleted'\r\n) as s;\r\nselect count(*) from [{0}].[Set] where [Key] = N'recurring-jobs';\r\n'', _storage.GetSchemaName())", span="308-325", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n237 [label="var statistics = UseConnection(connection =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql))\r\n                {\r\n                    stats.Enqueued = multi.Read<int>().Single();\r\n                    stats.Failed = multi.Read<int>().Single();\r\n                    stats.Processing = multi.Read<int>().Single();\r\n                    stats.Scheduled = multi.Read<int>().Single();\r\n\r\n                    stats.Servers = multi.Read<int>().Single();\r\n\r\n                    stats.Succeeded = multi.Read<long?>().SingleOrDefault() ?? 0;\r\n                    stats.Deleted = multi.Read<long?>().SingleOrDefault() ?? 0;\r\n\r\n                    stats.Recurring = multi.Read<int>().Single();\r\n                }\r\n                return stats;\r\n            })", span="327-345", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n245 [label="var multi = connection.QueryMultiple(sql)", span="330-330", cluster="lambda expression"];
n238 [label="statistics.Queues = _storage.QueueProviders\r\n                .SelectMany(x => x.GetJobQueueMonitoringApi().GetQueues())\r\n                .Count()", span="347-349", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n243 [label="Entry lambda expression", span="327-345", cluster="lambda expression"];
n239 [label="return statistics;", span="351-351", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n241 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)"];
n242 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()"];
n258 [label="Entry lambda expression", span="348-348", cluster="lambda expression"];
n240 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="306-306", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()"];
n244 [label="var stats = new StatisticsDto()", span="329-329", cluster="lambda expression"];
n256 [label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18", cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()"];
n246 [label="stats.Enqueued = multi.Read<int>().Single()", span="332-332", cluster="lambda expression"];
n247 [label="stats.Failed = multi.Read<int>().Single()", span="333-333", cluster="lambda expression"];
n248 [label="stats.Processing = multi.Read<int>().Single()", span="334-334", cluster="lambda expression"];
n249 [label="stats.Scheduled = multi.Read<int>().Single()", span="335-335", cluster="lambda expression"];
n250 [label="stats.Servers = multi.Read<int>().Single()", span="337-337", cluster="lambda expression"];
n251 [label="stats.Succeeded = multi.Read<long?>().SingleOrDefault() ?? 0", span="339-339", cluster="lambda expression"];
n252 [label="stats.Deleted = multi.Read<long?>().SingleOrDefault() ?? 0", span="340-340", cluster="lambda expression"];
n253 [label="stats.Recurring = multi.Read<int>().Single()", span="342-342", cluster="lambda expression"];
n254 [label="return stats;", span="344-344", cluster="lambda expression"];
n257 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
n255 [label="Exit lambda expression", span="327-345", cluster="lambda expression"];
n259 [label="x.GetJobQueueMonitoringApi().GetQueues()", span="348-348", cluster="lambda expression"];
n260 [label="Exit lambda expression", span="348-348", cluster="lambda expression"];
n261 [label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22", cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()"];
n262 [label="var endDate = DateTime.UtcNow", span="358-358", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n269 [label="var keyMaps = dates.ToDictionary(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH'')), x => x)", span="366-366", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n275 [label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="366-366", cluster="lambda expression"];
n270 [label="return GetTimelineStats(connection, keyMaps);", span="368-368", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n263 [label="var dates = new List<DateTime>()", span="359-359", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n266 [label="dates.Add(endDate)", span="362-362", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n267 [label="endDate = endDate.AddHours(-1)", span="363-363", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n264 [label="var i = 0", span="360-360", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n265 [label="i < 24", span="360-360", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n268 [label="i++", span="360-360", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n272 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)"];
n274 [label="Entry lambda expression", span="366-366", cluster="lambda expression"];
n279 [label="Entry lambda expression", span="366-366", cluster="lambda expression"];
n271 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="354-354", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)"];
n273 [label="Entry Unk.GetTimelineStats", span="", cluster="Unk.GetTimelineStats"];
n276 [label="Exit lambda expression", span="366-366", cluster="lambda expression"];
n277 [label="Entry System.DateTime.ToString(string)", span="0-0", cluster="System.DateTime.ToString(string)"];
n278 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)"];
n280 [label=x, span="366-366", cluster="lambda expression"];
n281 [label="Exit lambda expression", span="366-366", cluster="lambda expression"];
n282 [label="var endDate = DateTime.UtcNow.Date", span="375-375", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n289 [label="var keyMaps = dates.ToDictionary(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd'')), x => x)", span="383-383", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n294 [label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd''))", span="383-383", cluster="lambda expression"];
n290 [label="return GetTimelineStats(connection, keyMaps);", span="385-385", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n283 [label="var dates = new List<DateTime>()", span="376-376", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n286 [label="dates.Add(endDate)", span="379-379", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n287 [label="endDate = endDate.AddDays(-1)", span="380-380", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n284 [label="var i = 0", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n285 [label="i < 7", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n288 [label="i++", span="377-377", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n292 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)"];
n293 [label="Entry lambda expression", span="383-383", cluster="lambda expression"];
n296 [label="Entry lambda expression", span="383-383", cluster="lambda expression"];
n291 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="371-371", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)"];
n295 [label="Exit lambda expression", span="383-383", cluster="lambda expression"];
n297 [label=x, span="383-383", cluster="lambda expression"];
n298 [label="Exit lambda expression", span="383-383", cluster="lambda expression"];
n299 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="388-388", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n300 [label="string sqlQuery = string.Format(@''\r\nselect [Key], [Value] as [Count] from [{0}].AggregatedCounter\r\nwhere [Key] in @keys'', _storage.GetSchemaName())", span="391-393", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n301 [label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="395-398", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n302 [label="keyMaps.Keys", span="400-400", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n307 [label="i < keyMaps.Count", span="406-406", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n308 [label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="408-408", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n309 [label="result.Add(keyMaps.ElementAt(i).Value, value)", span="409-409", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n313 [label="Entry Unk.Query", span="", cluster="Unk.Query"];
n318 [label="Entry lambda expression", span="398-398", cluster="lambda expression"];
n321 [label="Entry lambda expression", span="398-398", cluster="lambda expression"];
n303 [label="!valuesMap.ContainsKey(key)", span="402-402", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n304 [label="valuesMap.Add(key, 0)", span="402-402", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n305 [label="var result = new Dictionary<DateTime, long>()", span="405-405", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n314 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey"];
n315 [label="Entry Unk.Add", span="", cluster="Unk.Add"];
n306 [label="var i = 0", span="406-406", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n316 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
n311 [label="return result;", span="412-412", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n310 [label="i++", span="406-406", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n317 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)"];
n312 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="388-388", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)"];
n319 [label="(string)x.Key", span="398-398", cluster="lambda expression"];
n320 [label="Exit lambda expression", span="398-398", cluster="lambda expression"];
n322 [label="(long)x.Count", span="398-398", cluster="lambda expression"];
n323 [label="Exit lambda expression", span="398-398", cluster="lambda expression"];
n324 [label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="417-417", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)"];
n325 [label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="418-418", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)"];
n328 [label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53", cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)"];
n326 [label="return monitoringApi;", span="420-420", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)"];
n327 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="415-415", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)"];
n329 [label="return _storage.UseTransaction(action, IsolationLevel.ReadUncommitted);", span="425-425", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)"];
n330 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="423-423", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)"];
n331 [label="Entry Unk.UseTransaction", span="", cluster="Unk.UseTransaction"];
n332 [label="string enqueuedJobsSql = string.Format(@''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{0}].Job j\r\nleft join [{0}].State s on s.Id = j.StateId\r\nwhere j.Id in @jobIds'', _storage.GetSchemaName())", span="432-436", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n333 [label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="438-441", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n334 [label="return DeserializeJobs(\r\n                jobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="443-452", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n335 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="428-428", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n336 [label="Entry Unk.DeserializeJobs", span="", cluster="Unk.DeserializeJobs"];
n337 [label="Entry lambda expression", span="445-452", cluster="lambda expression"];
n338 [label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="445-452", cluster="lambda expression"];
n339 [label="Exit lambda expression", span="445-452", cluster="lambda expression"];
n340 [label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23", cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()"];
n341 [label="var sqlQuery = _jobListLimit.HasValue\r\n                ? string.Format(@''select count(j.Id) from (select top (@limit) Id from [{0}].Job where StateName = @state) as j'', _storage.GetSchemaName())\r\n                : string.Format(@''select count(Id) from [{0}].Job where StateName = @state'', _storage.GetSchemaName())", span="457-459", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)"];
n342 [label="var count = connection.Query<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName, limit = _jobListLimit })\r\n                 .Single()", span="461-464", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)"];
n343 [label="return count;", span="466-466", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)"];
n344 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="455-455", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)"];
n345 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="469-469", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n346 [label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="471-471", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n347 [label="data.Arguments = arguments", span="472-472", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n352 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)"];
n348 [label="return data.Deserialize();", span="476-476", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n349 [label=JobLoadException, span="478-478", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n350 [label="return null;", span="480-480", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n351 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="469-469", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)"];
n353 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="44-44", cluster="Hangfire.Storage.InvocationData.Deserialize()"];
n354 [label="string jobsSql = string.Format(@''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from [{0}].Job j with (forceseek)\r\n  left join [{0}].State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n'', _storage.GetSchemaName())", span="491-498", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n355 [label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                        .ToList()", span="500-503", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n356 [label="return DeserializeJobs(jobs, selector);", span="505-505", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n357 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="484-484", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n358 [label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="508-508", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n359 [label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="512-512", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n360 [label=jobs, span="514-514", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n363 [label="var dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="521-521", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n367 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)"];
n364 [label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="523-524", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n365 [label="return new JobList<TDto>(result);", span="527-527", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n361 [label="var deserializedData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="516-516", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n362 [label="var stateData = deserializedData != null\r\n                    ? new Dictionary<string, string>(deserializedData, StringComparer.OrdinalIgnoreCase)\r\n                    : null", span="517-519", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n368 [label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0", cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)"];
n369 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)"];
n370 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()"];
n366 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="508-508", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)"];
n371 [label="Entry Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22", cluster="Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)"];
n372 [label="string fetchedJobsSql = string.Format(@''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{0}].Job j\r\nleft join [{0}].State s on s.Id = j.StateId\r\nwhere j.Id in @jobIds'', _storage.GetSchemaName())", span="534-538", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n373 [label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="540-543", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n374 [label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="545-545", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n375 [label=jobs, span="547-547", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n379 [label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span="", cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr"];
n376 [label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                    }))", span="549-555", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n377 [label="return new JobList<FetchedJobDto>(result);", span="558-558", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
n380 [label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span="", cluster="KeyValuePair<string, FetchedJobDto>.cstr"];
n381 [label="Entry Unk.ToString", span="", cluster="Unk.ToString"];
n382 [label="Entry Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21", cluster="Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()"];
n378 [label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="530-530", cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)"];
m0_12 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="RedisConnectionFacts.cs"];
m0_13 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetStateData(''random-id'');\r\n                Assert.Null(result);\r\n            })", span="20-24", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="RedisConnectionFacts.cs"];
m0_14 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="RedisConnectionFacts.cs"];
m0_33 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="RedisConnectionFacts.cs"];
m0_3 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="RedisConnectionFacts.cs"];
m0_97 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="RedisConnectionFacts.cs"];
m0_11 [label="Entry HangFire.Redis.RedisConnection.GetStateData(string)", span="204-204", cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="RedisConnectionFacts.cs"];
m0_35 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RedisConnectionFacts.cs"];
m0_115 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", span="147-147", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", file="RedisConnectionFacts.cs"];
m0_116 [label="UseConnections((redis, connection) =>\r\n            {\r\n                // Arrange\r\n                redis.SetRangeInHash(''hangfire:some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n\r\n                // Assert\r\n                Assert.NotNull(result);\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="149-165", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", file="RedisConnectionFacts.cs"];
m0_117 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", span="147-147", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", file="RedisConnectionFacts.cs"];
m0_132 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="RedisConnectionFacts.cs"];
m0_0 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="RedisConnectionFacts.cs"];
m0_1 [label="UseConnection(\r\n                connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null)))", span="12-14", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="RedisConnectionFacts.cs"];
m0_2 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="RedisConnectionFacts.cs"];
m0_65 [label="Entry Unk.AddItemToSortedSet", span="", cluster="Unk.AddItemToSortedSet", file="RedisConnectionFacts.cs"];
m0_133 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", span="177-177", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs"];
m0_134 [label="var connection = new RedisConnection(RedisUtils.CreateClient())", span="179-179", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs"];
m0_135 [label="action(connection)", span="181-181", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs"];
m0_136 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", span="177-177", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs"];
m0_137 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="RedisConnectionFacts.cs"];
m0_77 [label="Entry HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="255-255", cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RedisConnectionFacts.cs"];
m0_34 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="RedisConnectionFacts.cs"];
m0_32 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisConnectionFacts.cs"];
m0_36 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="51-51", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs"];
m0_37 [label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null)))", span="53-54", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs"];
m0_38 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="51-51", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs"];
m0_19 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="RedisConnectionFacts.cs"];
m0_98 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="130-130", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs"];
m0_99 [label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null)))", span="132-133", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs"];
m0_100 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="130-130", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs"];
m0_67 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="89-89", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs"];
m0_68 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="91-97", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs"];
m0_69 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="89-89", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs"];
m0_108 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", span="137-137", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", file="RedisConnectionFacts.cs"];
m0_109 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n                Assert.Null(result);\r\n            })", span="139-143", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", file="RedisConnectionFacts.cs"];
m0_110 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", span="137-137", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", file="RedisConnectionFacts.cs"];
m0_23 [label="Entry Unk.UseConnections", span="", cluster="Unk.UseConnections", file="RedisConnectionFacts.cs"];
m0_118 [label="Entry lambda expression", span="149-165", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_4 [label="Entry lambda expression", span="13-14", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_5 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null))", span="13-14", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_9 [label="connection.GetStateData(null)", span="14-14", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_6 [label="Exit lambda expression", span="13-14", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_8 [label="Entry lambda expression", span="14-14", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_10 [label="Exit lambda expression", span="14-14", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_15 [label="Entry lambda expression", span="20-24", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_16 [label="var result = connection.GetStateData(''random-id'')", span="22-22", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_17 [label="Assert.Null(result)", span="23-23", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_18 [label="Exit lambda expression", span="20-24", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_24 [label="Entry lambda expression", span="30-47", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_25 [label="redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    })", span="32-39", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_26 [label="var result = connection.GetStateData(''my-job'')", span="41-41", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_27 [label="Assert.NotNull(result)", span="43-43", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_28 [label="Assert.Equal(''Name'', result.Name)", span="44-44", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_29 [label="Assert.Equal(''Reason'', result.Reason)", span="45-45", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_30 [label="Assert.Equal(''Value'', result.Data[''Key''])", span="46-46", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_31 [label="Exit lambda expression", span="30-47", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_39 [label="Entry lambda expression", span="53-54", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_40 [label="Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null))", span="54-54", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_43 [label="connection.GetAllItemsFromSet(null)", span="54-54", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_41 [label="Exit lambda expression", span="53-54", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_42 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_44 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_49 [label="Entry lambda expression", span="60-66", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_50 [label="var result = connection.GetAllItemsFromSet(''some-set'')", span="62-62", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_51 [label="Assert.NotNull(result)", span="64-64", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_52 [label="Assert.Equal(0, result.Count)", span="65-65", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_53 [label="Exit lambda expression", span="60-66", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_57 [label="Entry lambda expression", span="72-85", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_58 [label="redis.AddItemToSortedSet(''hangfire:some-set'', ''1'')", span="75-75", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_59 [label="redis.AddItemToSortedSet(''hangfire:some-set'', ''2'')", span="76-76", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_60 [label="var result = connection.GetAllItemsFromSet(''some-set'')", span="79-79", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_61 [label="Assert.Equal(2, result.Count)", span="82-82", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_62 [label="Assert.Contains(''1'', result)", span="83-83", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_63 [label="Assert.Contains(''2'', result)", span="84-84", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_64 [label="Exit lambda expression", span="72-85", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_70 [label="Entry lambda expression", span="91-97", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_71 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()))", span="93-94", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_75 [label="connection.SetRangeInHash(null, new Dictionary<string, string>())", span="94-94", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_72 [label="Assert.Equal(''key'', exception.ParamName)", span="96-96", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_74 [label="Entry lambda expression", span="94-94", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_73 [label="Exit lambda expression", span="91-97", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_76 [label="Exit lambda expression", span="94-94", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_81 [label="Entry lambda expression", span="103-109", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_82 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null))", span="105-106", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_86 [label="connection.SetRangeInHash(''some-hash'', null)", span="106-106", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_83 [label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="108-108", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_85 [label="Entry lambda expression", span="106-106", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_84 [label="Exit lambda expression", span="103-109", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_87 [label="Exit lambda expression", span="106-106", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_91 [label="Entry lambda expression", span="115-126", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_92 [label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="117-121", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_93 [label="var hash = redis.GetAllEntriesFromHash(''hangfire:some-hash'')", span="123-123", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_94 [label="Assert.Equal(''Value1'', hash[''Key1''])", span="124-124", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_95 [label="Assert.Equal(''Value2'', hash[''Key2''])", span="125-125", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_96 [label="Exit lambda expression", span="115-126", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_101 [label="Entry lambda expression", span="132-133", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_102 [label="Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null))", span="133-133", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_105 [label="connection.GetAllEntriesFromHash(null)", span="133-133", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_103 [label="Exit lambda expression", span="132-133", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_104 [label="Entry lambda expression", span="133-133", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_106 [label="Exit lambda expression", span="133-133", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_111 [label="Entry lambda expression", span="139-143", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_112 [label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="141-141", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_113 [label="Assert.Null(result)", span="142-142", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_114 [label="Exit lambda expression", span="139-143", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_119 [label="redis.SetRangeInHash(''hangfire:some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="152-156", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_120 [label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="159-159", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_121 [label="Assert.NotNull(result)", span="162-162", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_122 [label="Assert.Equal(''Value1'', result[''Key1''])", span="163-163", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_123 [label="Assert.Equal(''Value2'', result[''Key2''])", span="164-164", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_124 [label="Exit lambda expression", span="149-165", cluster="lambda expression", file="RedisConnectionFacts.cs"];
m0_20 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="RedisConnectionFacts.cs"];
m0_21 [label="UseConnections((redis, connection) =>\r\n            {\r\n                redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    });\r\n\r\n                var result = connection.GetStateData(''my-job'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(''Name'', result.Name);\r\n                Assert.Equal(''Reason'', result.Reason);\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="30-47", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="RedisConnectionFacts.cs"];
m0_22 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="RedisConnectionFacts.cs"];
m0_66 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="RedisConnectionFacts.cs"];
m0_107 [label="Entry HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", span="263-263", cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", file="RedisConnectionFacts.cs"];
m0_130 [label="Entry HangFire.Redis.Tests.RedisUtils.CreateClient()", span="15-15", cluster="HangFire.Redis.Tests.RedisUtils.CreateClient()", file="RedisConnectionFacts.cs"];
m0_54 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="70-70", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="RedisConnectionFacts.cs"];
m0_55 [label="UseConnections((redis, connection) =>\r\n            {\r\n                // Arrange\r\n                redis.AddItemToSortedSet(''hangfire:some-set'', ''1'');\r\n                redis.AddItemToSortedSet(''hangfire:some-set'', ''2'');\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Contains(''1'', result);\r\n                Assert.Contains(''2'', result);\r\n            })", span="72-85", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="RedisConnectionFacts.cs"];
m0_56 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="70-70", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="RedisConnectionFacts.cs"];
m0_131 [label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="32-32", cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnectionFacts.cs"];
m0_46 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", span="58-58", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", file="RedisConnectionFacts.cs"];
m0_47 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(0, result.Count);\r\n            })", span="60-66", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", file="RedisConnectionFacts.cs"];
m0_48 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", span="58-58", cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", file="RedisConnectionFacts.cs"];
m0_78 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="101-101", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="RedisConnectionFacts.cs"];
m0_79 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="103-109", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="RedisConnectionFacts.cs"];
m0_80 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="101-101", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="RedisConnectionFacts.cs"];
m0_125 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", span="168-168", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs"];
m0_126 [label="var redis = RedisUtils.CreateClient()", span="170-170", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs"];
m0_128 [label="action(redis, connection)", span="173-173", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs"];
m0_127 [label="var connection = new RedisConnection(redis)", span="171-171", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs"];
m0_129 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", span="168-168", cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs"];
m0_45 [label="Entry HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", span="240-240", cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", file="RedisConnectionFacts.cs"];
m0_88 [label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", span="113-113", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", file="RedisConnectionFacts.cs"];
m0_89 [label="UseConnections((redis, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                var hash = redis.GetAllEntriesFromHash(''hangfire:some-hash'');\r\n                Assert.Equal(''Value1'', hash[''Key1'']);\r\n                Assert.Equal(''Value2'', hash[''Key2'']);\r\n            })", span="115-126", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", file="RedisConnectionFacts.cs"];
m0_90 [label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", span="113-113", cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", file="RedisConnectionFacts.cs"];
m0_138 [label="HangFire.Redis.Tests.RedisConnectionFacts", span="", file="RedisConnectionFacts.cs"];
m0_139 [label="HangFire.Redis.RedisConnection", span="", file="RedisConnectionFacts.cs"];
m0_140 [label="HangFire.Redis.RedisConnection", span="", file="RedisConnectionFacts.cs"];
m0_141 [label="HangFire.Redis.RedisConnection", span="", file="RedisConnectionFacts.cs"];
m0_142 [label="HangFire.Redis.RedisConnection", span="", file="RedisConnectionFacts.cs"];
m0_143 [label="HangFire.Redis.RedisConnection", span="", file="RedisConnectionFacts.cs"];
m1_73 [label="Entry System.Diagnostics.Stopwatch.StartNew()", span="0-0", cluster="System.Diagnostics.Stopwatch.StartNew()", file="RedisMonitoringApi.cs"];
m1_77 [label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="26-26", cluster="Hangfire.States.FailedState.FailedState(System.Exception)", file="RedisMonitoringApi.cs"];
m1_50 [label="Entry Hangfire.Server.Worker.ToString()", span="123-123", cluster="Hangfire.Server.Worker.ToString()", file="RedisMonitoringApi.cs"];
m1_51 [label="return ''Worker #'' + _context.WorkerNumber;", span="125-125", cluster="Hangfire.Server.Worker.ToString()", file="RedisMonitoringApi.cs"];
m1_52 [label="Exit Hangfire.Server.Worker.ToString()", span="123-123", cluster="Hangfire.Server.Worker.ToString()", file="RedisMonitoringApi.cs"];
m1_36 [label="Entry Hangfire.JobStorage.GetConnection()", span="56-56", cluster="Hangfire.JobStorage.GetConnection()", file="RedisMonitoringApi.cs"];
m1_45 [label="Entry Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", span="32-32", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs"];
m1_48 [label="Entry Hangfire.Logging.ILog.DebugException(string, System.Exception)", span="130-130", cluster="Hangfire.Logging.ILog.DebugException(string, System.Exception)", file="RedisMonitoringApi.cs"];
m1_39 [label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22", cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="RedisMonitoringApi.cs"];
m1_40 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", file="RedisMonitoringApi.cs"];
m1_0 [label="Entry Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", span="35-35", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs"];
m1_3 [label="process == null", span="41-41", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_1 [label="context == null", span="40-40", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs"];
m1_4 [label="throw new ArgumentNullException(''process'');", span="41-41", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_5 [label="stateMachineFactory == null", span="42-42", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_6 [label="throw new ArgumentNullException(''stateMachineFactory'');", span="42-42", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_7 [label="_context = context", span="44-44", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs"];
m1_8 [label="_process = process", span="45-45", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs"];
m1_9 [label="_stateMachineFactory = stateMachineFactory", span="46-46", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs"];
m1_2 [label="throw new ArgumentNullException(''context'');", span="40-40", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs"];
m1_10 [label="Exit Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", span="35-35", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs"];
m1_75 [label="Entry System.Diagnostics.Stopwatch.Stop()", span="0-0", cluster="System.Diagnostics.Stopwatch.Stop()", file="RedisMonitoringApi.cs"];
m1_76 [label="Entry Hangfire.States.SucceededState.SucceededState(object, long, long)", span="28-28", cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="RedisMonitoringApi.cs"];
m1_70 [label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42", cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)", file="RedisMonitoringApi.cs"];
m1_38 [label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0", cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="RedisMonitoringApi.cs"];
m1_44 [label="Entry Hangfire.Storage.IFetchedJob.RemoveFromQueue()", span="24-24", cluster="Hangfire.Storage.IFetchedJob.RemoveFromQueue()", file="RedisMonitoringApi.cs"];
m1_49 [label="Entry Hangfire.Storage.IFetchedJob.Requeue()", span="25-25", cluster="Hangfire.Storage.IFetchedJob.Requeue()", file="RedisMonitoringApi.cs"];
m1_46 [label="Entry Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", span="128-128", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs"];
m1_57 [label="var performContext = new PerformContext(\r\n                    _context, connection, jobId, jobData.Job, jobData.CreatedAt, token)", span="144-145", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_53 [label="var jobData = connection.GetJobData(jobId)", span="132-132", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs"];
m1_56 [label="jobData.EnsureLoaded()", span="142-142", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_58 [label="var latency = (DateTime.UtcNow - jobData.CreatedAt).TotalMilliseconds", span="147-147", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_60 [label="var result = _process.Run(performContext, jobData.Job)", span="150-150", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_54 [label="jobData == null", span="133-133", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_55 [label="return null;", span="139-139", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_59 [label="var duration = Stopwatch.StartNew()", span="148-148", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_62 [label="return new SucceededState(result, (long) latency, duration.ElapsedMilliseconds);", span="153-153", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs"];
m1_61 [label="duration.Stop()", span="151-151", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_66 [label="return new FailedState(ex.InnerException)\r\n                {\r\n                    Reason = ex.Message\r\n                };", span="161-164", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_65 [label=JobPerformanceException, span="159-159", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs"];
m1_67 [label=Exception, span="166-166", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_68 [label="return new FailedState(ex)\r\n                {\r\n                    Reason = ''Internal Hangfire Server exception occurred. Please, report it to Hangfire developers.''\r\n                };", span="168-171", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_64 [label="throw;", span="157-157", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs"];
m1_63 [label=OperationCanceledException, span="155-155", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs"];
m1_69 [label="Exit Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", span="128-128", cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs"];
m1_72 [label="Entry Hangfire.Server.PerformContext.PerformContext(Hangfire.Server.WorkerContext, Hangfire.Storage.IStorageConnection, string, Hangfire.Common.Job, System.DateTime, Hangfire.IJobCancellationToken)", span="35-35", cluster="Hangfire.Server.PerformContext.PerformContext(Hangfire.Server.WorkerContext, Hangfire.Storage.IStorageConnection, string, Hangfire.Common.Job, System.DateTime, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs"];
m1_74 [label="Entry Hangfire.Server.IJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", span="20-20", cluster="Hangfire.Server.IJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", file="RedisMonitoringApi.cs"];
m1_47 [label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="31-31", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisMonitoringApi.cs"];
m1_43 [label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", span="26-26", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RedisMonitoringApi.cs"];
m1_37 [label="Entry Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="36-36", cluster="Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisMonitoringApi.cs"];
m1_12 [label="Entry Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="49-49", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs"];
m1_15 [label="context.CancellationToken.ThrowIfCancellationRequested()", span="54-54", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_14 [label="var fetchedJob = connection.FetchNextJob(_context.Queues, context.CancellationToken)", span="52-52", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs"];
m1_16 [label="var stateMachine = _stateMachineFactory.Create(connection)", span="58-58", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs"];
m1_21 [label="context.CancellationToken.ThrowIfCancellationRequested()", span="75-75", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_20 [label="!stateMachine.ChangeState(\r\n                            fetchedJob.JobId,\r\n                            processingState,\r\n                            new[] { EnqueuedState.StateName, ProcessingState.StateName },\r\n                            linkedCts.Token)", span="67-71", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_22 [label="fetchedJob.RemoveFromQueue()", span="78-78", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_24 [label="var jobCancellationToken = new ServerJobCancellationToken(\r\n                        fetchedJob.JobId, connection, _context, context)", span="88-89", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_13 [label="var connection = context.Storage.GetConnection()", span="51-51", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs"];
m1_25 [label="var state = PerformJob(fetchedJob.JobId, connection, jobCancellationToken)", span="91-91", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_26 [label="state != null", span="93-93", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_27 [label="stateMachine.ChangeState(fetchedJob.JobId, state, new[] { ProcessingState.StateName })", span="96-96", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs"];
m1_18 [label="var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(\r\n                        context.CancellationToken,\r\n                        timeoutCts.Token)", span="61-63", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs"];
m1_19 [label="var processingState = new ProcessingState(context.ServerId, _context.WorkerNumber)", span="65-65", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs"];
m1_23 [label="return;", span="79-79", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_28 [label="fetchedJob.RemoveFromQueue()", span="104-104", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_29 [label=JobAbortedException, span="109-109", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_31 [label=Exception, span="113-113", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_30 [label="fetchedJob.RemoveFromQueue()", span="111-111", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_33 [label="fetchedJob.Requeue()", span="117-117", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_32 [label="Logger.DebugException(''An exception occurred while processing a job. It will be re-queued.'', ex)", span="115-115", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs"];
m1_34 [label="throw;", span="118-118", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs"];
m1_17 [label="var timeoutCts = new CancellationTokenSource(JobInitializationWaitTimeout)", span="60-60", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs"];
m1_35 [label="Exit Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="49-49", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs"];
m1_71 [label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29", cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="RedisMonitoringApi.cs"];
m1_42 [label="Entry Hangfire.States.ProcessingState.ProcessingState(string, int)", span="27-27", cluster="Hangfire.States.ProcessingState.ProcessingState(string, int)", file="RedisMonitoringApi.cs"];
m1_41 [label="Entry System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", span="0-0", cluster="System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", file="RedisMonitoringApi.cs"];
m1_78 [label="Hangfire.Server.Worker", span="", file="RedisMonitoringApi.cs"];
m2_51 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="RedisStorage.cs"];
m2_52 [label="Entry HangFire.Redis.RedisStorage.GetRedisKey(string)", span="107-107", cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="RedisStorage.cs"];
m2_53 [label="key == null", span="109-109", cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="RedisStorage.cs"];
m2_55 [label="return Prefix + key;", span="111-111", cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="RedisStorage.cs"];
m2_54 [label="throw new ArgumentNullException(''key'');", span="109-109", cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="RedisStorage.cs"];
m2_56 [label="Exit HangFire.Redis.RedisStorage.GetRedisKey(string)", span="107-107", cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="RedisStorage.cs"];
m2_42 [label="Entry HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", span="96-96", cluster="HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", file="RedisStorage.cs"];
m2_43 [label="logger.Info(''Using the following options for Redis job storage:'')", span="98-98", cluster="HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", file="RedisStorage.cs"];
m2_44 [label="logger.InfoFormat(''    Connection pool size: {0}.'', Options.ConnectionPoolSize)", span="99-99", cluster="HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", file="RedisStorage.cs"];
m2_45 [label="Exit HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", span="96-96", cluster="HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", file="RedisStorage.cs"];
m2_46 [label="Entry Unk.Info", span="", cluster="Unk.Info", file="RedisStorage.cs"];
m2_40 [label="Entry HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", span="21-21", cluster="HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", file="RedisStorage.cs"];
m2_32 [label="Entry HangFire.Redis.RedisStorage.GetStateHandlers()", span="88-88", cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs"];
m2_33 [label="yield return new FailedStateHandler();", span="90-90", cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs"];
m2_34 [label="yield return new ProcessingStateHandler();", span="91-91", cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs"];
m2_35 [label="yield return new SucceededStateHandler();", span="92-92", cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs"];
m2_36 [label="yield return new DeletedStateHandler();", span="93-93", cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs"];
m2_37 [label="Exit HangFire.Redis.RedisStorage.GetStateHandlers()", span="88-88", cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs"];
m2_41 [label="Entry HangFire.Redis.DeletedStateHandler.DeletedStateHandler()", span="21-21", cluster="HangFire.Redis.DeletedStateHandler.DeletedStateHandler()", file="RedisStorage.cs"];
m2_2 [label="Entry HangFire.Redis.RedisStorage.RedisStorage(string)", span="38-38", cluster="HangFire.Redis.RedisStorage.RedisStorage(string)", file="RedisStorage.cs"];
m2_3 [label="Exit HangFire.Redis.RedisStorage.RedisStorage(string)", span="38-38", cluster="HangFire.Redis.RedisStorage.RedisStorage(string)", file="RedisStorage.cs"];
m2_47 [label="Entry Unk.InfoFormat", span="", cluster="Unk.InfoFormat", file="RedisStorage.cs"];
m2_38 [label="Entry HangFire.Redis.FailedStateHandler.FailedStateHandler()", span="23-23", cluster="HangFire.Redis.FailedStateHandler.FailedStateHandler()", file="RedisStorage.cs"];
m2_27 [label="Entry RedisConnection.cstr", span="", cluster="RedisConnection.cstr", file="RedisStorage.cs"];
m2_31 [label="Entry HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage)", span="31-31", cluster="HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage)", file="RedisStorage.cs"];
m2_23 [label="Entry Unk.GetClient", span="", cluster="Unk.GetClient", file="RedisStorage.cs"];
m2_39 [label="Entry HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", span="23-23", cluster="HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", file="RedisStorage.cs"];
m2_22 [label="Entry RedisMonitoringApi.cstr", span="", cluster="RedisMonitoringApi.cstr", file="RedisStorage.cs"];
m2_48 [label="Entry HangFire.Redis.RedisStorage.ToString()", span="102-102", cluster="HangFire.Redis.RedisStorage.ToString()", file="RedisStorage.cs"];
m2_49 [label="return String.Format(''redis://{0}/{1}'', HostAndPort, Db);", span="104-104", cluster="HangFire.Redis.RedisStorage.ToString()", file="RedisStorage.cs"];
m2_50 [label="Exit HangFire.Redis.RedisStorage.ToString()", span="102-102", cluster="HangFire.Redis.RedisStorage.ToString()", file="RedisStorage.cs"];
m2_0 [label="Entry HangFire.Redis.RedisStorage.RedisStorage()", span="33-33", cluster="HangFire.Redis.RedisStorage.RedisStorage()", file="RedisStorage.cs"];
m2_1 [label="Exit HangFire.Redis.RedisStorage.RedisStorage()", span="33-33", cluster="HangFire.Redis.RedisStorage.RedisStorage()", file="RedisStorage.cs"];
m2_6 [label="Entry HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", span="48-48", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs"];
m2_7 [label="hostAndPort == null", span="50-50", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs"];
m2_9 [label="options == null", span="51-51", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs"];
m2_11 [label="HostAndPort = hostAndPort", span="53-53", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs"];
m2_12 [label="Db = db", span="54-54", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs"];
m2_13 [label="Options = options", span="55-55", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs"];
m2_8 [label="throw new ArgumentNullException(''hostAndPort'');", span="50-50", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs"];
m2_10 [label="throw new ArgumentNullException(''options'');", span="51-51", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs"];
m2_14 [label="_pooledManager = new PooledRedisClientManager(\r\n                new []{ HostAndPort },\r\n                new string[0],\r\n                new RedisClientManagerConfig\r\n                {\r\n                    DefaultDb = Db,\r\n                    MaxWritePoolSize = Options.ConnectionPoolSize\r\n                })", span="57-64", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs"];
m2_15 [label="Exit HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", span="48-48", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs"];
m2_24 [label="Entry HangFire.Redis.RedisStorage.GetConnection()", span="78-78", cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs"];
m2_25 [label="return new RedisConnection(_pooledManager.GetClient());", span="80-80", cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs"];
m2_26 [label="Exit HangFire.Redis.RedisStorage.GetConnection()", span="78-78", cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs"];
m2_18 [label="Entry RedisClientManagerConfig.cstr", span="", cluster="RedisClientManagerConfig.cstr", file="RedisStorage.cs"];
m2_19 [label="Entry HangFire.Redis.RedisStorage.GetMonitoringApi()", span="73-73", cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="RedisStorage.cs"];
m2_20 [label="return new RedisMonitoringApi(_pooledManager.GetClient());", span="75-75", cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", color=red, community=0, file="RedisStorage.cs"];
m2_21 [label="Exit HangFire.Redis.RedisStorage.GetMonitoringApi()", span="73-73", cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="RedisStorage.cs"];
m2_4 [label="Entry HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="43-43", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="RedisStorage.cs"];
m2_5 [label="Exit HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="43-43", cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="RedisStorage.cs"];
m2_28 [label="Entry HangFire.Redis.RedisStorage.GetComponents()", span="83-83", cluster="HangFire.Redis.RedisStorage.GetComponents()", file="RedisStorage.cs"];
m2_29 [label="yield return new FetchedJobsWatcher(this);", span="85-85", cluster="HangFire.Redis.RedisStorage.GetComponents()", file="RedisStorage.cs"];
m2_30 [label="Exit HangFire.Redis.RedisStorage.GetComponents()", span="83-83", cluster="HangFire.Redis.RedisStorage.GetComponents()", file="RedisStorage.cs"];
m2_17 [label="Entry PooledRedisClientManager.cstr", span="", cluster="PooledRedisClientManager.cstr", file="RedisStorage.cs"];
m2_57 [label="HangFire.Redis.RedisStorage", span="", file="RedisStorage.cs"];
n383 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n23  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n28  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n31  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n34  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n37  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n40  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n43  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n56  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n63  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n66  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n70  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n76  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n80  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n97  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n105  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n108  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n116  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n119  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n126  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n131  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n158  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n162  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n164  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n168  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n172  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n174  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n178  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n182  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n185  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n189  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n192  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n195  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n198  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n205  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n224  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n227  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n230  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n233  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n236  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n237  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n238  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n270  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n290  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n300  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n324  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n329  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n332  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n334  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n341  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n342  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n354  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n356  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n372  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n383 -> n376  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerMonitoringApi"];
n384 -> n43  [key=1, style=dashed, color=darkseagreen4, label=int];
n385 -> n43  [key=1, style=dashed, color=darkseagreen4, label=int];
n386 -> n56  [key=1, style=dashed, color=darkseagreen4, label=int];
n387 -> n56  [key=1, style=dashed, color=darkseagreen4, label=int];
n388 -> n97  [key=1, style=dashed, color=darkseagreen4, label=int];
n389 -> n97  [key=1, style=dashed, color=darkseagreen4, label=int];
n390 -> n108  [key=1, style=dashed, color=darkseagreen4, label=int];
n391 -> n108  [key=1, style=dashed, color=darkseagreen4, label=int];
n392 -> n119  [key=1, style=dashed, color=darkseagreen4, label=int];
n393 -> n119  [key=1, style=dashed, color=darkseagreen4, label=int];
n394 -> n158  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
n395 -> n168  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
n396 -> n178  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobIds];
n397 -> n199  [key=1, style=dashed, color=darkseagreen4, label=string];
n398 -> n245  [key=1, style=dashed, color=darkseagreen4, label=sql];
n399 -> n275  [key=1, style=dashed, color=darkseagreen4, label=string];
n400 -> n294  [key=1, style=dashed, color=darkseagreen4, label=string];
n0 -> n1  [key=0, style=solid];
n0 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.SqlServerStorage"];
n0 -> n4  [key=1, style=dashed, color=darkseagreen4, label="int?"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n4 -> n5  [key=0, style=solid];
n2 -> n5  [key=0, style=solid];
n2 -> n6  [key=2, style=dotted];
n5 -> n0  [key=0, style=bold, color=blue];
n7 -> n8  [key=0, style=solid];
n7 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn long ScheduledCount"];
n8 -> n9  [key=0, style=solid];
n8 -> n10  [key=2, style=dotted];
n8 -> n11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n9 -> n7  [key=0, style=bold, color=blue];
n10 -> n329  [key=0, style=solid];
n10 -> n8  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n28  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n34  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n40  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n53  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n63  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n70  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n94  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n105  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n116  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n131  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n164  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n174  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n182  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n189  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n195  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n224  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n230  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n10 -> n237  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Func<SqlConnection, T> action"];
n11 -> n12  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n14  [key=2, style=dotted];
n13 -> n11  [key=0, style=bold, color=blue];
n14 -> n341  [key=0, style=solid];
n14 -> n342  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n14 -> n8  [key=3, color=darkorchid, style=bold, label="Parameter variable SqlConnection connection"];
n14 -> n28  [key=3, color=darkorchid, style=bold, label="Parameter variable SqlConnection connection"];
n14 -> n34  [key=3, color=darkorchid, style=bold, label="Parameter variable SqlConnection connection"];
n14 -> n224  [key=3, color=darkorchid, style=bold, label="Parameter variable SqlConnection connection"];
n14 -> n230  [key=3, color=darkorchid, style=bold, label="Parameter variable SqlConnection connection"];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=1, style=dashed, color=darkseagreen4, label=string];
n16 -> n17  [key=0, style=solid];
n16 -> n20  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n21  [key=2, style=dotted];
n17 -> n17  [key=3, color=darkorchid, style=bold, label="Local variable int queueIndex"];
n20 -> n324  [key=0, style=solid];
n20 -> n15  [key=3, color=darkorchid, style=bold, label="Parameter variable string queueName"];
n20 -> n22  [key=3, color=darkorchid, style=bold, label="Parameter variable string queueName"];
n20 -> n161  [key=3, color=darkorchid, style=bold, label="Parameter variable string queueName"];
n20 -> n171  [key=3, color=darkorchid, style=bold, label="Parameter variable string queueName"];
n20 -> n325  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.SqlServer.IPersistentJobQueueMonitoringApi GetQueueApi"];
n18 -> n19  [key=0, style=solid];
n19 -> n15  [key=0, style=bold, color=blue];
n22 -> n23  [key=0, style=solid];
n22 -> n24  [key=1, style=dashed, color=darkseagreen4, label=string];
n23 -> n24  [key=0, style=solid];
n23 -> n20  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n24 -> n21  [key=2, style=dotted];
n25 -> n26  [key=0, style=solid];
n26 -> n22  [key=0, style=bold, color=blue];
n27 -> n28  [key=0, style=solid];
n27 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn long FailedCount"];
n28 -> n29  [key=0, style=solid];
n28 -> n10  [key=2, style=dotted];
n28 -> n30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n28 -> n40  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.Filters.CreatedContext InvokeClientFilter"];
n29 -> n27  [key=0, style=bold, color=blue];
n30 -> n31  [key=0, style=solid];
n31 -> n32  [key=0, style=solid];
n31 -> n14  [key=2, style=dotted];
n32 -> n30  [key=0, style=bold, color=blue];
n33 -> n34  [key=0, style=solid];
n33 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn long ProcessingCount"];
n34 -> n35  [key=0, style=solid];
n34 -> n10  [key=2, style=dotted];
n34 -> n36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n35 -> n33  [key=0, style=bold, color=blue];
n36 -> n37  [key=0, style=solid];
n37 -> n38  [key=0, style=solid];
n37 -> n14  [key=2, style=dotted];
n38 -> n36  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n39 -> n43  [key=1, style=dashed, color=darkseagreen4, label=int];
n39 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.ProcessingJobDto> ProcessingJobs"];
n40 -> n41  [key=0, style=solid];
n40 -> n10  [key=2, style=dotted];
n40 -> n42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n40 -> n40  [key=3, color=darkorchid, style=bold, label="Local variable bool wasError"];
n43 -> n44  [key=0, style=solid];
n43 -> n45  [key=2, style=dotted];
n43 -> n46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n41 -> n39  [key=0, style=bold, color=blue];
n42 -> n43  [key=0, style=solid];
n44 -> n42  [key=0, style=bold, color=blue];
n45 -> n354  [key=0, style=solid];
n45 -> n355  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n45 -> n356  [key=1, style=dashed, color=darkseagreen4, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
n46 -> n47  [key=0, style=solid];
n47 -> n48  [key=0, style=solid];
n47 -> n49  [key=2, style=dotted];
n47 -> n50  [key=2, style=dotted];
n47 -> n51  [key=2, style=dotted];
n48 -> n46  [key=0, style=bold, color=blue];
n52 -> n53  [key=0, style=solid];
n52 -> n56  [key=1, style=dashed, color=darkseagreen4, label=int];
n52 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.ScheduledJobDto> ScheduledJobs"];
n53 -> n54  [key=0, style=solid];
n53 -> n10  [key=2, style=dotted];
n53 -> n55  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n56 -> n57  [key=0, style=solid];
n56 -> n45  [key=2, style=dotted];
n56 -> n58  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n54 -> n52  [key=0, style=bold, color=blue];
n55 -> n56  [key=0, style=solid];
n57 -> n55  [key=0, style=bold, color=blue];
n58 -> n59  [key=0, style=solid];
n59 -> n60  [key=0, style=solid];
n59 -> n61  [key=2, style=dotted];
n59 -> n51  [key=2, style=dotted];
n60 -> n58  [key=0, style=bold, color=blue];
n62 -> n63  [key=0, style=solid];
n62 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> SucceededByDatesCount"];
n63 -> n64  [key=0, style=solid];
n63 -> n10  [key=2, style=dotted];
n63 -> n65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n64 -> n62  [key=0, style=bold, color=blue];
n65 -> n66  [key=0, style=solid];
n66 -> n67  [key=0, style=solid];
n66 -> n68  [key=2, style=dotted];
n67 -> n65  [key=0, style=bold, color=blue];
n68 -> n282  [key=0, style=solid];
n68 -> n289  [key=1, style=dashed, color=darkseagreen4, label=string];
n68 -> n294  [key=1, style=dashed, color=darkseagreen4, label=string];
n68 -> n290  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n69 -> n70  [key=0, style=solid];
n69 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> FailedByDatesCount"];
n69 -> n75  [key=3, color=darkorchid, style=bold, label="method methodReturn string CreateExpiredJob"];
n70 -> n71  [key=0, style=solid];
n70 -> n10  [key=2, style=dotted];
n70 -> n72  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n71 -> n69  [key=0, style=bold, color=blue];
n72 -> n73  [key=0, style=solid];
n73 -> n74  [key=0, style=solid];
n73 -> n68  [key=2, style=dotted];
n74 -> n72  [key=0, style=bold, color=blue];
n75 -> n76  [key=0, style=solid];
n76 -> n77  [key=0, style=solid];
n76 -> n78  [key=2, style=dotted];
n76 -> n79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n76 -> n76  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IList<Hangfire.Storage.Monitoring.ServerDto> "];
n77 -> n75  [key=0, style=bold, color=blue];
n79 -> n80  [key=0, style=solid];
n80 -> n81  [key=0, style=solid];
n80 -> n87  [key=2, style=dotted];
n80 -> n88  [key=2, style=dotted];
n80 -> n78  [key=2, style=dotted];
n80 -> n89  [key=2, style=dotted];
n80 -> n82  [key=1, style=dashed, color=darkseagreen4, label=servers];
n81 -> n82  [key=0, style=solid];
n81 -> n90  [key=2, style=dotted];
n81 -> n84  [key=1, style=dashed, color=darkseagreen4, label=result];
n81 -> n85  [key=1, style=dashed, color=darkseagreen4, label=result];
n82 -> n83  [key=0, style=solid];
n82 -> n85  [key=0, style=solid];
n82 -> n84  [key=1, style=dashed, color=darkseagreen4, label=server];
n84 -> n82  [key=0, style=solid];
n84 -> n91  [key=2, style=dotted];
n84 -> n92  [key=2, style=dotted];
n85 -> n86  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n83 -> n78  [key=2, style=dotted];
n86 -> n79  [key=0, style=bold, color=blue];
n93 -> n94  [key=0, style=solid];
n93 -> n97  [key=1, style=dashed, color=darkseagreen4, label=int];
n93 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.FailedJobDto> FailedJobs"];
n94 -> n95  [key=0, style=solid];
n94 -> n10  [key=2, style=dotted];
n94 -> n96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n94 -> n94  [key=3, color=darkorchid, style=bold, label="Local variable string createdAt"];
n97 -> n98  [key=0, style=solid];
n97 -> n45  [key=2, style=dotted];
n97 -> n99  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n95 -> n93  [key=0, style=bold, color=blue];
n96 -> n97  [key=0, style=solid];
n98 -> n96  [key=0, style=bold, color=blue];
n99 -> n100  [key=0, style=solid];
n100 -> n101  [key=0, style=solid];
n100 -> n102  [key=2, style=dotted];
n100 -> n103  [key=2, style=dotted];
n101 -> n99  [key=0, style=bold, color=blue];
n104 -> n105  [key=0, style=solid];
n104 -> n108  [key=1, style=dashed, color=darkseagreen4, label=int];
n104 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.SucceededJobDto> SucceededJobs"];
n105 -> n106  [key=0, style=solid];
n105 -> n10  [key=2, style=dotted];
n105 -> n107  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n108 -> n109  [key=0, style=solid];
n108 -> n45  [key=2, style=dotted];
n108 -> n110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n106 -> n104  [key=0, style=bold, color=blue];
n107 -> n108  [key=0, style=solid];
n109 -> n107  [key=0, style=bold, color=blue];
n110 -> n111  [key=0, style=solid];
n111 -> n112  [key=0, style=solid];
n111 -> n113  [key=2, style=dotted];
n111 -> n50  [key=2, style=dotted];
n111 -> n114  [key=2, style=dotted];
n111 -> n103  [key=2, style=dotted];
n112 -> n110  [key=0, style=bold, color=blue];
n115 -> n116  [key=0, style=solid];
n115 -> n119  [key=1, style=dashed, color=darkseagreen4, label=int];
n115 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.DeletedJobDto> DeletedJobs"];
n115 -> n94  [key=3, color=darkorchid, style=bold, label="Local variable HangFire.Common.Job job"];
n116 -> n117  [key=0, style=solid];
n116 -> n10  [key=2, style=dotted];
n116 -> n118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n119 -> n120  [key=0, style=solid];
n119 -> n45  [key=2, style=dotted];
n119 -> n121  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n117 -> n115  [key=0, style=bold, color=blue];
n118 -> n119  [key=0, style=solid];
n120 -> n118  [key=0, style=bold, color=blue];
n121 -> n122  [key=0, style=solid];
n122 -> n123  [key=0, style=solid];
n122 -> n124  [key=2, style=dotted];
n122 -> n103  [key=2, style=dotted];
n123 -> n121  [key=0, style=bold, color=blue];
n125 -> n126  [key=0, style=solid];
n125 -> n127  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IList<Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto> Queues"];
n126 -> n127  [key=0, style=solid];
n126 -> n135  [key=2, style=dotted];
n126 -> n136  [key=2, style=dotted];
n126 -> n137  [key=2, style=dotted];
n126 -> n138  [key=2, style=dotted];
n126 -> n143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n126 -> n147  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n126 -> n151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n126 -> n154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n126 -> n128  [key=1, style=dashed, color=darkseagreen4, label=tuples];
n127 -> n128  [key=0, style=solid];
n127 -> n139  [key=2, style=dotted];
n127 -> n132  [key=1, style=dashed, color=darkseagreen4, label=result];
n127 -> n133  [key=1, style=dashed, color=darkseagreen4, label=result];
n143 -> n144  [key=0, style=solid];
n147 -> n148  [key=0, style=solid];
n151 -> n152  [key=0, style=solid];
n154 -> n155  [key=0, style=solid];
n128 -> n129  [key=0, style=solid];
n128 -> n133  [key=0, style=solid];
n128 -> n130  [key=1, style=dashed, color=darkseagreen4, label=tuple];
n128 -> n132  [key=1, style=dashed, color=darkseagreen4, label=tuple];
n132 -> n128  [key=0, style=solid];
n132 -> n142  [key=2, style=dotted];
n132 -> n92  [key=2, style=dotted];
n133 -> n134  [key=0, style=solid];
n129 -> n130  [key=0, style=solid];
n129 -> n140  [key=2, style=dotted];
n129 -> n131  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
n129 -> n158  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
n130 -> n131  [key=0, style=solid];
n130 -> n141  [key=2, style=dotted];
n130 -> n132  [key=1, style=dashed, color=darkseagreen4, label=counters];
n131 -> n132  [key=0, style=solid];
n131 -> n10  [key=2, style=dotted];
n131 -> n157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n158 -> n159  [key=0, style=solid];
n158 -> n160  [key=2, style=dotted];
n157 -> n158  [key=0, style=solid];
n134 -> n125  [key=0, style=bold, color=blue];
n144 -> n145  [key=0, style=solid];
n144 -> n146  [key=2, style=dotted];
n145 -> n143  [key=0, style=bold, color=blue];
n148 -> n149  [key=0, style=solid];
n148 -> n150  [key=2, style=dotted];
n149 -> n147  [key=0, style=bold, color=blue];
n152 -> n153  [key=0, style=solid];
n153 -> n151  [key=0, style=bold, color=blue];
n155 -> n156  [key=0, style=solid];
n156 -> n154  [key=0, style=bold, color=blue];
n159 -> n157  [key=0, style=bold, color=blue];
n161 -> n162  [key=0, style=solid];
n161 -> n163  [key=1, style=dashed, color=darkseagreen4, label=string];
n161 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.EnqueuedJobDto> EnqueuedJobs"];
n162 -> n163  [key=0, style=solid];
n162 -> n20  [key=2, style=dotted];
n163 -> n164  [key=0, style=solid];
n163 -> n166  [key=2, style=dotted];
n163 -> n168  [key=1, style=dashed, color=darkseagreen4, label=enqueuedJobIds];
n164 -> n165  [key=0, style=solid];
n164 -> n10  [key=2, style=dotted];
n164 -> n167  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n168 -> n169  [key=0, style=solid];
n168 -> n170  [key=2, style=dotted];
n165 -> n161  [key=0, style=bold, color=blue];
n167 -> n168  [key=0, style=solid];
n169 -> n167  [key=0, style=bold, color=blue];
n170 -> n332  [key=0, style=solid];
n170 -> n333  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n171 -> n172  [key=0, style=solid];
n171 -> n173  [key=1, style=dashed, color=darkseagreen4, label=string];
n171 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobList<Hangfire.Storage.Monitoring.FetchedJobDto> FetchedJobs"];
n172 -> n173  [key=0, style=solid];
n172 -> n20  [key=2, style=dotted];
n173 -> n174  [key=0, style=solid];
n173 -> n176  [key=2, style=dotted];
n173 -> n178  [key=1, style=dashed, color=darkseagreen4, label=fetchedJobIds];
n174 -> n175  [key=0, style=solid];
n174 -> n10  [key=2, style=dotted];
n174 -> n177  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n178 -> n179  [key=0, style=solid];
n178 -> n180  [key=2, style=dotted];
n175 -> n171  [key=0, style=bold, color=blue];
n177 -> n178  [key=0, style=solid];
n179 -> n177  [key=0, style=bold, color=blue];
n180 -> n372  [key=0, style=solid];
n180 -> n373  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n181 -> n182  [key=0, style=solid];
n181 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> HourlySucceededJobs"];
n182 -> n183  [key=0, style=solid];
n182 -> n10  [key=2, style=dotted];
n182 -> n184  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n183 -> n181  [key=0, style=bold, color=blue];
n184 -> n185  [key=0, style=solid];
n185 -> n186  [key=0, style=solid];
n185 -> n187  [key=2, style=dotted];
n186 -> n184  [key=0, style=bold, color=blue];
n187 -> n262  [key=0, style=solid];
n187 -> n269  [key=1, style=dashed, color=darkseagreen4, label=string];
n187 -> n275  [key=1, style=dashed, color=darkseagreen4, label=string];
n187 -> n270  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n188 -> n189  [key=0, style=solid];
n188 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IDictionary<System.DateTime, long> HourlyFailedJobs"];
n189 -> n190  [key=0, style=solid];
n189 -> n10  [key=2, style=dotted];
n189 -> n191  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n190 -> n188  [key=0, style=bold, color=blue];
n191 -> n192  [key=0, style=solid];
n192 -> n193  [key=0, style=solid];
n192 -> n187  [key=2, style=dotted];
n193 -> n191  [key=0, style=bold, color=blue];
n194 -> n195  [key=0, style=solid];
n194 -> n199  [key=1, style=dashed, color=darkseagreen4, label=string];
n194 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobDetailsDto JobDetails"];
n195 -> n196  [key=0, style=solid];
n195 -> n10  [key=2, style=dotted];
n195 -> n197  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n195 -> n195  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.JobDetailsDto "];
n199 -> n200  [key=0, style=solid];
n199 -> n207  [key=2, style=dotted];
n199 -> n203  [key=1, style=dashed, color=darkseagreen4, label=multi];
n199 -> n204  [key=1, style=dashed, color=darkseagreen4, label=multi];
n196 -> n194  [key=0, style=bold, color=blue];
n197 -> n198  [key=0, style=solid];
n197 -> n199  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n198 -> n199  [key=0, style=solid];
n198 -> n87  [key=2, style=dotted];
n198 -> n88  [key=2, style=dotted];
n200 -> n201  [key=0, style=solid];
n200 -> n78  [key=2, style=dotted];
n200 -> n208  [key=2, style=dotted];
n200 -> n205  [key=1, style=dashed, color=darkseagreen4, label=job];
n203 -> n204  [key=0, style=solid];
n203 -> n78  [key=2, style=dotted];
n203 -> n209  [key=2, style=dotted];
n203 -> n212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n203 -> n215  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n203 -> n205  [key=1, style=dashed, color=darkseagreen4, label=parameters];
n204 -> n205  [key=0, style=solid];
n204 -> n78  [key=2, style=dotted];
n204 -> n89  [key=2, style=dotted];
n204 -> n135  [key=2, style=dotted];
n204 -> n218  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n201 -> n202  [key=0, style=solid];
n201 -> n203  [key=0, style=solid];
n205 -> n206  [key=0, style=solid];
n205 -> n210  [key=2, style=dotted];
n205 -> n211  [key=2, style=dotted];
n202 -> n206  [key=0, style=solid];
n212 -> n213  [key=0, style=solid];
n215 -> n216  [key=0, style=solid];
n218 -> n219  [key=0, style=solid];
n206 -> n197  [key=0, style=bold, color=blue];
n213 -> n214  [key=0, style=solid];
n214 -> n212  [key=0, style=bold, color=blue];
n216 -> n217  [key=0, style=solid];
n217 -> n215  [key=0, style=bold, color=blue];
n219 -> n220  [key=0, style=solid];
n219 -> n221  [key=2, style=dotted];
n219 -> n222  [key=2, style=dotted];
n219 -> n78  [key=2, style=dotted];
n220 -> n218  [key=0, style=bold, color=blue];
n223 -> n224  [key=0, style=solid];
n223 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn long SucceededListCount"];
n224 -> n225  [key=0, style=solid];
n224 -> n10  [key=2, style=dotted];
n224 -> n226  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n225 -> n223  [key=0, style=bold, color=blue];
n226 -> n227  [key=0, style=solid];
n227 -> n228  [key=0, style=solid];
n227 -> n14  [key=2, style=dotted];
n228 -> n226  [key=0, style=bold, color=blue];
n229 -> n230  [key=0, style=solid];
n229 -> n10  [key=3, color=darkorchid, style=bold, label="method methodReturn long DeletedListCount"];
n230 -> n231  [key=0, style=solid];
n230 -> n10  [key=2, style=dotted];
n230 -> n232  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n231 -> n229  [key=0, style=bold, color=blue];
n232 -> n233  [key=0, style=solid];
n233 -> n234  [key=0, style=solid];
n233 -> n14  [key=2, style=dotted];
n234 -> n232  [key=0, style=bold, color=blue];
n235 -> n236  [key=0, style=solid];
n235 -> n237  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.StatisticsDto GetStatistics"];
n236 -> n237  [key=0, style=solid];
n236 -> n87  [key=2, style=dotted];
n236 -> n88  [key=2, style=dotted];
n236 -> n245  [key=1, style=dashed, color=darkseagreen4, label=sql];
n237 -> n238  [key=0, style=solid];
n237 -> n10  [key=2, style=dotted];
n237 -> n243  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n237 -> n239  [key=1, style=dashed, color=darkseagreen4, label=statistics];
n237 -> n237  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Storage.Monitoring.StatisticsDto "];
n245 -> n246  [key=0, style=solid];
n245 -> n207  [key=2, style=dotted];
n245 -> n247  [key=1, style=dashed, color=darkseagreen4, label=multi];
n245 -> n248  [key=1, style=dashed, color=darkseagreen4, label=multi];
n245 -> n249  [key=1, style=dashed, color=darkseagreen4, label=multi];
n245 -> n250  [key=1, style=dashed, color=darkseagreen4, label=multi];
n245 -> n251  [key=1, style=dashed, color=darkseagreen4, label=multi];
n245 -> n252  [key=1, style=dashed, color=darkseagreen4, label=multi];
n245 -> n253  [key=1, style=dashed, color=darkseagreen4, label=multi];
n238 -> n239  [key=0, style=solid];
n238 -> n241  [key=2, style=dotted];
n238 -> n242  [key=2, style=dotted];
n238 -> n258  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n243 -> n244  [key=0, style=solid];
n243 -> n245  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n239 -> n240  [key=0, style=solid];
n258 -> n259  [key=0, style=solid];
n240 -> n235  [key=0, style=bold, color=blue];
n244 -> n245  [key=0, style=solid];
n244 -> n256  [key=2, style=dotted];
n244 -> n246  [key=1, style=dashed, color=darkseagreen4, label=stats];
n244 -> n247  [key=1, style=dashed, color=darkseagreen4, label=stats];
n244 -> n248  [key=1, style=dashed, color=darkseagreen4, label=stats];
n244 -> n249  [key=1, style=dashed, color=darkseagreen4, label=stats];
n244 -> n250  [key=1, style=dashed, color=darkseagreen4, label=stats];
n244 -> n251  [key=1, style=dashed, color=darkseagreen4, label=stats];
n244 -> n252  [key=1, style=dashed, color=darkseagreen4, label=stats];
n244 -> n253  [key=1, style=dashed, color=darkseagreen4, label=stats];
n244 -> n254  [key=1, style=dashed, color=darkseagreen4, label=stats];
n246 -> n247  [key=0, style=solid];
n246 -> n78  [key=2, style=dotted];
n246 -> n257  [key=2, style=dotted];
n247 -> n248  [key=0, style=solid];
n247 -> n78  [key=2, style=dotted];
n247 -> n257  [key=2, style=dotted];
n248 -> n249  [key=0, style=solid];
n248 -> n78  [key=2, style=dotted];
n248 -> n257  [key=2, style=dotted];
n249 -> n250  [key=0, style=solid];
n249 -> n78  [key=2, style=dotted];
n249 -> n257  [key=2, style=dotted];
n250 -> n251  [key=0, style=solid];
n250 -> n78  [key=2, style=dotted];
n250 -> n257  [key=2, style=dotted];
n251 -> n252  [key=0, style=solid];
n251 -> n78  [key=2, style=dotted];
n251 -> n208  [key=2, style=dotted];
n252 -> n253  [key=0, style=solid];
n252 -> n78  [key=2, style=dotted];
n252 -> n208  [key=2, style=dotted];
n253 -> n254  [key=0, style=solid];
n253 -> n78  [key=2, style=dotted];
n253 -> n257  [key=2, style=dotted];
n254 -> n255  [key=0, style=solid];
n255 -> n243  [key=0, style=bold, color=blue];
n259 -> n260  [key=0, style=solid];
n259 -> n146  [key=2, style=dotted];
n259 -> n261  [key=2, style=dotted];
n260 -> n258  [key=0, style=bold, color=blue];
n262 -> n263  [key=0, style=solid];
n262 -> n266  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n262 -> n267  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n269 -> n270  [key=0, style=solid];
n269 -> n209  [key=2, style=dotted];
n269 -> n274  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n269 -> n279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n275 -> n276  [key=0, style=solid];
n275 -> n277  [key=2, style=dotted];
n275 -> n278  [key=2, style=dotted];
n270 -> n271  [key=0, style=solid];
n270 -> n273  [key=2, style=dotted];
n263 -> n264  [key=0, style=solid];
n263 -> n90  [key=2, style=dotted];
n263 -> n266  [key=1, style=dashed, color=darkseagreen4, label=dates];
n263 -> n269  [key=1, style=dashed, color=darkseagreen4, label=dates];
n266 -> n267  [key=0, style=solid];
n266 -> n92  [key=2, style=dotted];
n267 -> n268  [key=0, style=solid];
n267 -> n272  [key=2, style=dotted];
n267 -> n267  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n264 -> n265  [key=0, style=solid];
n264 -> n268  [key=1, style=dashed, color=darkseagreen4, label=i];
n264 -> n264  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
n265 -> n266  [key=0, style=solid];
n265 -> n269  [key=0, style=solid];
n268 -> n265  [key=0, style=solid];
n268 -> n268  [key=1, style=dashed, color=darkseagreen4, label=i];
n274 -> n275  [key=0, style=solid];
n279 -> n280  [key=0, style=solid];
n271 -> n187  [key=0, style=bold, color=blue];
n276 -> n274  [key=0, style=bold, color=blue];
n280 -> n281  [key=0, style=solid];
n281 -> n279  [key=0, style=bold, color=blue];
n282 -> n283  [key=0, style=solid];
n282 -> n286  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n282 -> n287  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n289 -> n290  [key=0, style=solid];
n289 -> n209  [key=2, style=dotted];
n289 -> n293  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n289 -> n296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n294 -> n295  [key=0, style=solid];
n294 -> n277  [key=2, style=dotted];
n294 -> n278  [key=2, style=dotted];
n290 -> n291  [key=0, style=solid];
n290 -> n273  [key=2, style=dotted];
n283 -> n284  [key=0, style=solid];
n283 -> n90  [key=2, style=dotted];
n283 -> n286  [key=1, style=dashed, color=darkseagreen4, label=dates];
n283 -> n289  [key=1, style=dashed, color=darkseagreen4, label=dates];
n286 -> n287  [key=0, style=solid];
n286 -> n92  [key=2, style=dotted];
n287 -> n288  [key=0, style=solid];
n287 -> n292  [key=2, style=dotted];
n287 -> n287  [key=1, style=dashed, color=darkseagreen4, label=endDate];
n284 -> n285  [key=0, style=solid];
n284 -> n288  [key=1, style=dashed, color=darkseagreen4, label=i];
n284 -> n264  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
n285 -> n286  [key=0, style=solid];
n285 -> n289  [key=0, style=solid];
n288 -> n285  [key=0, style=solid];
n288 -> n288  [key=1, style=dashed, color=darkseagreen4, label=i];
n293 -> n294  [key=0, style=solid];
n296 -> n297  [key=0, style=solid];
n291 -> n68  [key=0, style=bold, color=blue];
n295 -> n293  [key=0, style=bold, color=blue];
n297 -> n298  [key=0, style=solid];
n298 -> n296  [key=0, style=bold, color=blue];
n299 -> n300  [key=0, style=solid];
n299 -> n301  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
n299 -> n302  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
n299 -> n307  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
n299 -> n308  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
n299 -> n309  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IDictionary<string, System.DateTime>"];
n299 -> n305  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.Dictionary<System.DateTime, long> GetTimelineStats"];
n300 -> n301  [key=0, style=solid];
n300 -> n87  [key=2, style=dotted];
n300 -> n88  [key=2, style=dotted];
n301 -> n302  [key=0, style=solid];
n301 -> n313  [key=2, style=dotted];
n301 -> n209  [key=2, style=dotted];
n301 -> n318  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n301 -> n321  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n301 -> n303  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n301 -> n304  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n301 -> n308  [key=1, style=dashed, color=darkseagreen4, label=valuesMap];
n302 -> n303  [key=0, style=solid];
n302 -> n305  [key=0, style=solid];
n302 -> n304  [key=1, style=dashed, color=darkseagreen4, label=key];
n307 -> n308  [key=0, style=solid];
n307 -> n311  [key=0, style=solid];
n307 -> n264  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
n308 -> n309  [key=0, style=solid];
n308 -> n317  [key=2, style=dotted];
n309 -> n310  [key=0, style=solid];
n309 -> n317  [key=2, style=dotted];
n309 -> n315  [key=2, style=dotted];
n318 -> n319  [key=0, style=solid];
n321 -> n322  [key=0, style=solid];
n303 -> n304  [key=0, style=solid];
n303 -> n302  [key=0, style=solid];
n303 -> n314  [key=2, style=dotted];
n304 -> n302  [key=0, style=solid];
n304 -> n315  [key=2, style=dotted];
n305 -> n306  [key=0, style=solid];
n305 -> n316  [key=2, style=dotted];
n305 -> n309  [key=1, style=dashed, color=darkseagreen4, label=result];
n305 -> n311  [key=1, style=dashed, color=darkseagreen4, label=result];
n306 -> n307  [key=0, style=solid];
n306 -> n308  [key=1, style=dashed, color=darkseagreen4, label=i];
n306 -> n309  [key=1, style=dashed, color=darkseagreen4, label=i];
n306 -> n310  [key=1, style=dashed, color=darkseagreen4, label=i];
n311 -> n312  [key=0, style=solid];
n310 -> n307  [key=0, style=solid];
n310 -> n310  [key=1, style=dashed, color=darkseagreen4, label=i];
n312 -> n299  [key=0, style=bold, color=blue];
n319 -> n320  [key=0, style=solid];
n320 -> n318  [key=0, style=bold, color=blue];
n322 -> n323  [key=0, style=solid];
n323 -> n321  [key=0, style=bold, color=blue];
n324 -> n325  [key=0, style=solid];
n324 -> n328  [key=2, style=dotted];
n325 -> n326  [key=0, style=solid];
n325 -> n146  [key=2, style=dotted];
n326 -> n327  [key=0, style=solid];
n327 -> n20  [key=0, style=bold, color=blue];
n329 -> n330  [key=0, style=solid];
n329 -> n331  [key=2, style=dotted];
n330 -> n10  [key=0, style=bold, color=blue];
n332 -> n333  [key=0, style=solid];
n332 -> n87  [key=2, style=dotted];
n332 -> n88  [key=2, style=dotted];
n333 -> n334  [key=0, style=solid];
n333 -> n78  [key=2, style=dotted];
n333 -> n89  [key=2, style=dotted];
n334 -> n335  [key=0, style=solid];
n334 -> n336  [key=2, style=dotted];
n334 -> n337  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n335 -> n170  [key=0, style=bold, color=blue];
n337 -> n338  [key=0, style=solid];
n338 -> n339  [key=0, style=solid];
n338 -> n340  [key=2, style=dotted];
n338 -> n103  [key=2, style=dotted];
n339 -> n337  [key=0, style=bold, color=blue];
n341 -> n342  [key=0, style=solid];
n341 -> n87  [key=2, style=dotted];
n341 -> n88  [key=2, style=dotted];
n342 -> n343  [key=0, style=solid];
n342 -> n78  [key=2, style=dotted];
n342 -> n257  [key=2, style=dotted];
n343 -> n344  [key=0, style=solid];
n344 -> n14  [key=0, style=bold, color=blue];
n345 -> n346  [key=0, style=solid];
n345 -> n347  [key=1, style=dashed, color=darkseagreen4, label=string];
n345 -> n195  [key=3, color=darkorchid, style=bold, label="method methodReturn Hangfire.Common.Job DeserializeJob"];
n346 -> n347  [key=0, style=solid];
n346 -> n352  [key=2, style=dotted];
n346 -> n348  [key=1, style=dashed, color=darkseagreen4, label=data];
n347 -> n348  [key=0, style=solid];
n348 -> n351  [key=0, style=solid];
n348 -> n353  [key=2, style=dotted];
n349 -> n350  [key=0, style=solid];
n350 -> n351  [key=0, style=solid];
n351 -> n345  [key=0, style=bold, color=blue];
n354 -> n355  [key=0, style=solid];
n354 -> n87  [key=2, style=dotted];
n354 -> n88  [key=2, style=dotted];
n355 -> n356  [key=0, style=solid];
n355 -> n78  [key=2, style=dotted];
n355 -> n89  [key=2, style=dotted];
n356 -> n357  [key=0, style=solid];
n356 -> n336  [key=2, style=dotted];
n357 -> n45  [key=0, style=bold, color=blue];
n358 -> n359  [key=0, style=solid];
n358 -> n360  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>"];
n358 -> n363  [key=1, style=dashed, color=darkseagreen4, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>"];
n359 -> n360  [key=0, style=solid];
n359 -> n367  [key=2, style=dotted];
n359 -> n364  [key=1, style=dashed, color=darkseagreen4, label=result];
n359 -> n365  [key=1, style=dashed, color=darkseagreen4, label=result];
n360 -> n361  [key=0, style=solid];
n360 -> n365  [key=0, style=solid];
n360 -> n363  [key=1, style=dashed, color=darkseagreen4, label=job];
n360 -> n364  [key=1, style=dashed, color=darkseagreen4, label=job];
n363 -> n364  [key=0, style=solid];
n363 -> n345  [key=2, style=dotted];
n363 -> n368  [key=2, style=dotted];
n364 -> n360  [key=0, style=solid];
n364 -> n369  [key=2, style=dotted];
n364 -> n370  [key=2, style=dotted];
n364 -> n92  [key=2, style=dotted];
n365 -> n366  [key=0, style=solid];
n365 -> n371  [key=2, style=dotted];
n361 -> n362  [key=0, style=solid];
n361 -> n352  [key=2, style=dotted];
n362 -> n363  [key=0, style=solid];
n362 -> n222  [key=2, style=dotted];
n366 -> n358  [key=0, style=bold, color=blue];
n372 -> n373  [key=0, style=solid];
n372 -> n87  [key=2, style=dotted];
n372 -> n88  [key=2, style=dotted];
n373 -> n374  [key=0, style=solid];
n373 -> n78  [key=2, style=dotted];
n373 -> n89  [key=2, style=dotted];
n373 -> n375  [key=1, style=dashed, color=darkseagreen4, label=jobs];
n374 -> n375  [key=0, style=solid];
n374 -> n379  [key=2, style=dotted];
n374 -> n376  [key=1, style=dashed, color=darkseagreen4, label=result];
n374 -> n377  [key=1, style=dashed, color=darkseagreen4, label=result];
n375 -> n376  [key=0, style=solid];
n375 -> n377  [key=0, style=solid];
n376 -> n375  [key=0, style=solid];
n376 -> n380  [key=2, style=dotted];
n376 -> n381  [key=2, style=dotted];
n376 -> n382  [key=2, style=dotted];
n376 -> n211  [key=2, style=dotted];
n376 -> n92  [key=2, style=dotted];
n377 -> n378  [key=0, style=solid];
n377 -> n371  [key=2, style=dotted];
n378 -> n180  [key=0, style=bold, color=blue];
m0_12 -> m0_13  [key=0, style=solid];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_3  [key=2, style=dotted];
m0_13 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_115 -> m0_116  [key=0, style=solid];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_23  [key=2, style=dotted];
m0_116 -> m0_118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_117 -> m0_115  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_135  [key=1, style=dashed, color=darkseagreen4, label="System.Action<HangFire.Redis.RedisConnection>"];
m0_134 -> m0_135  [key=0, style=solid];
m0_134 -> m0_131  [key=2, style=dotted];
m0_134 -> m0_130  [key=2, style=dotted];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_137  [key=2, style=dotted];
m0_136 -> m0_133  [key=0, style=bold, color=blue];
m0_36 -> m0_37  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_3  [key=2, style=dotted];
m0_37 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_38 -> m0_36  [key=0, style=bold, color=blue];
m0_98 -> m0_99  [key=0, style=solid];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_3  [key=2, style=dotted];
m0_99 -> m0_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_100 -> m0_98  [key=0, style=bold, color=blue];
m0_67 -> m0_68  [key=0, style=solid];
m0_68 -> m0_69  [key=0, style=solid];
m0_68 -> m0_3  [key=2, style=dotted];
m0_68 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_69 -> m0_67  [key=0, style=bold, color=blue];
m0_108 -> m0_109  [key=0, style=solid];
m0_109 -> m0_110  [key=0, style=solid];
m0_109 -> m0_3  [key=2, style=dotted];
m0_109 -> m0_111  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_110 -> m0_108  [key=0, style=bold, color=blue];
m0_118 -> m0_119  [key=0, style=solid];
m0_118 -> m0_120  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> n78  [key=2, style=dotted];
m0_5 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_11  [key=2, style=dotted];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_11  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_19  [key=2, style=dotted];
m0_18 -> m0_15  [key=0, style=bold, color=blue];
m0_24 -> m0_25  [key=0, style=solid];
m0_24 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_32  [key=2, style=dotted];
m0_25 -> m0_33  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_11  [key=2, style=dotted];
m0_26 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_26 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_26 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_34  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_35  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_35  [key=2, style=dotted];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_35  [key=2, style=dotted];
m0_31 -> m0_24  [key=0, style=bold, color=blue];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> n78  [key=2, style=dotted];
m0_40 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_45  [key=2, style=dotted];
m0_41 -> m0_39  [key=0, style=bold, color=blue];
m0_42 -> m0_43  [key=0, style=solid];
m0_44 -> m0_42  [key=0, style=bold, color=blue];
m0_49 -> m0_50  [key=0, style=solid];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_45  [key=2, style=dotted];
m0_50 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_34  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_35  [key=2, style=dotted];
m0_53 -> m0_49  [key=0, style=bold, color=blue];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_57 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_65  [key=2, style=dotted];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_65  [key=2, style=dotted];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_45  [key=2, style=dotted];
m0_60 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_60 -> m0_63  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_35  [key=2, style=dotted];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_66  [key=2, style=dotted];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_66  [key=2, style=dotted];
m0_64 -> m0_57  [key=0, style=bold, color=blue];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> n78  [key=2, style=dotted];
m0_71 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_32  [key=2, style=dotted];
m0_75 -> m0_77  [key=2, style=dotted];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_35  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_73 -> m0_70  [key=0, style=bold, color=blue];
m0_76 -> m0_74  [key=0, style=bold, color=blue];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> n78  [key=2, style=dotted];
m0_82 -> m0_85  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_77  [key=2, style=dotted];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_35  [key=2, style=dotted];
m0_85 -> m0_86  [key=0, style=solid];
m0_84 -> m0_81  [key=0, style=bold, color=blue];
m0_87 -> m0_85  [key=0, style=bold, color=blue];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label=IRedisClient];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_32  [key=2, style=dotted];
m0_92 -> m0_77  [key=2, style=dotted];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_97  [key=2, style=dotted];
m0_93 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label=hash];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_35  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_35  [key=2, style=dotted];
m0_96 -> m0_91  [key=0, style=bold, color=blue];
m0_101 -> m0_102  [key=0, style=solid];
m0_101 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> n78  [key=2, style=dotted];
m0_102 -> m0_104  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_107  [key=2, style=dotted];
m0_103 -> m0_101  [key=0, style=bold, color=blue];
m0_104 -> m0_105  [key=0, style=solid];
m0_106 -> m0_104  [key=0, style=bold, color=blue];
m0_111 -> m0_112  [key=0, style=solid];
m0_112 -> m0_113  [key=0, style=solid];
m0_112 -> m0_107  [key=2, style=dotted];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_19  [key=2, style=dotted];
m0_114 -> m0_111  [key=0, style=bold, color=blue];
m0_119 -> m0_120  [key=0, style=solid];
m0_119 -> m0_32  [key=2, style=dotted];
m0_119 -> m0_33  [key=2, style=dotted];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_107  [key=2, style=dotted];
m0_120 -> m0_122  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_120 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label=result];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_34  [key=2, style=dotted];
m0_122 -> m0_123  [key=0, style=solid];
m0_122 -> m0_35  [key=2, style=dotted];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_35  [key=2, style=dotted];
m0_124 -> m0_118  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_23  [key=2, style=dotted];
m0_21 -> m0_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_54 -> m0_55  [key=0, style=solid];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_23  [key=2, style=dotted];
m0_55 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_56 -> m0_54  [key=0, style=bold, color=blue];
m0_46 -> m0_47  [key=0, style=solid];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_3  [key=2, style=dotted];
m0_47 -> m0_49  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_48 -> m0_46  [key=0, style=bold, color=blue];
m0_78 -> m0_79  [key=0, style=solid];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_3  [key=2, style=dotted];
m0_79 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_80 -> m0_78  [key=0, style=bold, color=blue];
m0_125 -> m0_126  [key=0, style=solid];
m0_125 -> m0_128  [key=1, style=dashed, color=darkseagreen4, label="System.Action<IRedisClient, HangFire.Redis.RedisConnection>"];
m0_126 -> m0_127  [key=0, style=solid];
m0_126 -> m0_130  [key=2, style=dotted];
m0_126 -> m0_128  [key=1, style=dashed, color=darkseagreen4, label=redis];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_132  [key=2, style=dotted];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_131  [key=2, style=dotted];
m0_129 -> m0_125  [key=0, style=bold, color=blue];
m0_88 -> m0_89  [key=0, style=solid];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_23  [key=2, style=dotted];
m0_89 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_90 -> m0_88  [key=0, style=bold, color=blue];
m0_138 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_138 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_138 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_138 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_138 -> m0_47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_138 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_138 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_138 -> m0_79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_138 -> m0_89  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_138 -> m0_99  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_138 -> m0_109  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_138 -> m0_116  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.Tests.RedisConnectionFacts"];
m0_139 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_140 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_141 -> m0_75  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_142 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m0_143 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisConnection"];
m1_50 -> m1_51  [key=0, style=solid];
m1_51 -> m1_52  [key=0, style=solid];
m1_52 -> m1_50  [key=0, style=bold, color=blue];
m1_0 -> m1_3  [key=1, style=dashed, color=green, label="Hangfire.Server.IJobPerformanceProcess"];
m1_0 -> m1_5  [key=1, style=dashed, color=green, label="Hangfire.States.IStateMachineFactory"];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.WorkerContext"];
m1_0 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.IJobPerformanceProcess"];
m1_0 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.States.IStateMachineFactory"];
m1_3 -> m1_4  [key=0, style=solid, color=green];
m1_3 -> m1_5  [key=0, style=solid, color=green];
m1_1 -> m1_3  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid];
m1_4 -> m1_10  [key=0, style=solid, color=green];
m1_4 -> n6  [key=2, style=dotted, color=green];
m1_5 -> m1_6  [key=0, style=solid, color=green];
m1_5 -> m1_7  [key=0, style=solid, color=green];
m1_6 -> m1_10  [key=0, style=solid, color=green];
m1_6 -> n6  [key=2, style=dotted, color=green];
m1_7 -> m1_8  [key=0, style=solid];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_2 -> m1_10  [key=0, style=solid];
m1_2 -> n6  [key=2, style=dotted];
m1_10 -> m1_0  [key=0, style=bold, color=blue];
m1_46 -> m1_57  [key=1, style=dashed, color=green, label=string];
m1_46 -> m1_53  [key=0, style=solid];
m1_57 -> m1_58  [key=0, style=solid, color=green];
m1_57 -> m1_72  [key=2, style=dotted, color=green];
m1_57 -> m1_60  [key=1, style=dashed, color=green, label=performContext];
m1_53 -> m1_57  [key=1, style=dashed, color=green, label=jobData];
m1_53 -> m1_54  [key=0, style=solid, color=green];
m1_53 -> m1_56  [key=1, style=dashed, color=green, label=jobData];
m1_53 -> m1_58  [key=1, style=dashed, color=green, label=jobData];
m1_53 -> m1_60  [key=1, style=dashed, color=green, label=jobData];
m1_53 -> m1_70  [key=2, style=dotted];
m1_56 -> m1_57  [key=0, style=solid, color=green];
m1_56 -> m1_71  [key=2, style=dotted, color=green];
m1_58 -> m1_59  [key=0, style=solid, color=green];
m1_58 -> m1_62  [key=1, style=dashed, color=green, label=latency];
m1_60 -> m1_61  [key=0, style=solid, color=green];
m1_60 -> m1_74  [key=2, style=dotted, color=green];
m1_60 -> m1_62  [key=1, style=dashed, color=green, label=result];
m1_54 -> m1_55  [key=0, style=solid, color=green];
m1_54 -> m1_56  [key=0, style=solid, color=green];
m1_55 -> m1_69  [key=0, style=solid, color=green];
m1_59 -> m1_60  [key=0, style=solid, color=green];
m1_59 -> m1_73  [key=2, style=dotted, color=green];
m1_59 -> m1_61  [key=1, style=dashed, color=green, label=duration];
m1_59 -> m1_62  [key=1, style=dashed, color=green, label=duration];
m1_62 -> m1_69  [key=0, style=solid];
m1_62 -> m1_76  [key=2, style=dotted];
m1_61 -> m1_62  [key=0, style=solid, color=green];
m1_61 -> m1_75  [key=2, style=dotted, color=green];
m1_66 -> m1_69  [key=0, style=solid, color=green];
m1_66 -> m1_77  [key=2, style=dotted, color=green];
m1_65 -> m1_66  [key=0, style=solid, color=green];
m1_67 -> m1_68  [key=0, style=solid, color=green];
m1_68 -> m1_69  [key=0, style=solid, color=green];
m1_68 -> m1_77  [key=2, style=dotted, color=green];
m1_64 -> m1_69  [key=0, style=solid];
m1_63 -> m1_64  [key=0, style=solid];
m1_69 -> m1_46  [key=0, style=bold, color=blue];
m1_12 -> m1_15  [key=1, style=dashed, color=green, label="Hangfire.Server.BackgroundProcessContext"];
m1_12 -> m1_21  [key=1, style=dashed, color=green, label="Hangfire.Server.BackgroundProcessContext"];
m1_12 -> m1_24  [key=1, style=dashed, color=green, label="Hangfire.Server.BackgroundProcessContext"];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m1_12 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m1_12 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.BackgroundProcessContext"];
m1_15 -> m1_16  [key=0, style=solid, color=green];
m1_15 -> m1_38  [key=2, style=dotted, color=green];
m1_14 -> m1_15  [key=0, style=solid, color=green];
m1_14 -> m1_24  [key=1, style=dashed, color=green, label=fetchedJob];
m1_14 -> m1_25  [key=1, style=dashed, color=green, label=fetchedJob];
m1_14 -> m1_20  [key=1, style=dashed, color=green, label=fetchedJob];
m1_14 -> m1_22  [key=1, style=dashed, color=green, label=fetchedJob];
m1_14 -> m1_28  [key=1, style=dashed, color=green, label=fetchedJob];
m1_14 -> m1_30  [key=1, style=dashed, color=green, label=fetchedJob];
m1_14 -> m1_33  [key=1, style=dashed, color=green, label=fetchedJob];
m1_14 -> m1_37  [key=2, style=dotted];
m1_14 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=fetchedJob];
m1_16 -> m1_20  [key=1, style=dashed, color=green, label=stateMachine];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_39  [key=2, style=dotted];
m1_16 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label=stateMachine];
m1_21 -> m1_22  [key=0, style=solid, color=green];
m1_21 -> m1_38  [key=2, style=dotted, color=green];
m1_20 -> m1_21  [key=0, style=solid, color=green];
m1_20 -> m1_24  [key=0, style=solid, color=green];
m1_20 -> m1_43  [key=2, style=dotted, color=green];
m1_22 -> m1_23  [key=0, style=solid, color=green];
m1_22 -> m1_44  [key=2, style=dotted, color=green];
m1_24 -> m1_25  [key=0, style=solid, color=green];
m1_24 -> m1_45  [key=2, style=dotted, color=green];
m1_13 -> m1_24  [key=1, style=dashed, color=green, label=connection];
m1_13 -> m1_25  [key=1, style=dashed, color=green, label=connection];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label=connection];
m1_13 -> m1_36  [key=2, style=dotted];
m1_25 -> m1_26  [key=0, style=solid, color=green];
m1_25 -> m1_46  [key=2, style=dotted, color=green];
m1_25 -> m1_27  [key=1, style=dashed, color=green, label=state];
m1_26 -> m1_28  [key=0, style=solid, color=green];
m1_26 -> m1_27  [key=0, style=solid, color=green];
m1_27 -> m1_28  [key=0, style=solid, color=green];
m1_27 -> m1_47  [key=2, style=dotted];
m1_18 -> m1_20  [key=1, style=dashed, color=green, label=linkedCts];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_41  [key=2, style=dotted];
m1_19 -> m1_20  [key=0, style=solid, color=green];
m1_19 -> m1_42  [key=2, style=dotted];
m1_23 -> m1_35  [key=0, style=solid, color=green];
m1_28 -> m1_29  [key=0, style=solid, color=green];
m1_28 -> m1_31  [key=0, style=solid, color=green];
m1_28 -> m1_35  [key=0, style=solid, color=green];
m1_28 -> m1_44  [key=2, style=dotted, color=green];
m1_29 -> m1_30  [key=0, style=solid, color=green];
m1_31 -> m1_32  [key=0, style=solid, color=green];
m1_30 -> m1_35  [key=0, style=solid, color=green];
m1_30 -> m1_44  [key=2, style=dotted, color=green];
m1_33 -> m1_34  [key=0, style=solid, color=green];
m1_33 -> m1_49  [key=2, style=dotted, color=green];
m1_32 -> m1_33  [key=0, style=solid, color=green];
m1_32 -> m1_48  [key=2, style=dotted];
m1_34 -> m1_35  [key=0, style=solid, color=green];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_40  [key=2, style=dotted];
m1_35 -> m1_12  [key=0, style=bold, color=blue];
m1_78 -> m1_24  [key=1, style=dashed, color=green, label="Hangfire.Server.Worker"];
m1_78 -> m1_25  [key=1, style=dashed, color=green, label="Hangfire.Server.Worker"];
m1_78 -> m1_57  [key=1, style=dashed, color=green, label="Hangfire.Server.Worker"];
m1_78 -> m1_60  [key=1, style=dashed, color=green, label="Hangfire.Server.Worker"];
m1_78 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m1_78 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m1_78 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m1_78 -> m1_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m1_78 -> m1_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m1_78 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m1_78 -> m1_51  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Server.Worker"];
m2_52 -> m2_53  [key=0, style=solid];
m2_52 -> m2_55  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_55  [key=0, style=solid];
m2_55 -> m2_56  [key=0, style=solid];
m2_54 -> m2_56  [key=0, style=solid];
m2_54 -> n6  [key=2, style=dotted];
m2_56 -> m2_52  [key=0, style=bold, color=blue];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label=ILog];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_46  [key=2, style=dotted];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_47  [key=2, style=dotted];
m2_45 -> m2_42  [key=0, style=bold, color=blue];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_34  [key=0, style=bold, color=crimson];
m2_32 -> m2_35  [key=0, style=bold, color=crimson];
m2_32 -> m2_36  [key=0, style=bold, color=crimson];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_38  [key=2, style=dotted];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_39  [key=2, style=dotted];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_40  [key=2, style=dotted];
m2_36 -> m2_37  [key=0, style=solid];
m2_36 -> m2_41  [key=2, style=dotted];
m2_37 -> m2_32  [key=0, style=bold, color=blue];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_2  [key=0, style=bold, color=blue];
m2_48 -> m2_49  [key=0, style=solid];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_51  [key=2, style=dotted];
m2_50 -> m2_48  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageOptions"];
m2_6 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_6 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_6 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorageOptions"];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_9  [key=0, style=solid];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_11  [key=0, style=solid];
m2_11 -> m2_12  [key=0, style=solid];
m2_12 -> m2_13  [key=0, style=solid];
m2_13 -> m2_14  [key=0, style=solid];
m2_8 -> m2_15  [key=0, style=solid];
m2_8 -> n6  [key=2, style=dotted];
m2_10 -> m2_15  [key=0, style=solid];
m2_10 -> n6  [key=2, style=dotted];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_17  [key=2, style=dotted];
m2_14 -> m2_18  [key=2, style=dotted];
m2_15 -> m2_6  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_27  [key=2, style=dotted];
m2_25 -> m2_23  [key=2, style=dotted];
m2_26 -> m2_24  [key=0, style=bold, color=blue];
m2_19 -> m2_20  [key=0, style=solid, color=red];
m2_20 -> m2_21  [key=0, style=solid, color=red];
m2_20 -> m2_22  [key=2, style=dotted, color=red];
m2_20 -> m2_23  [key=2, style=dotted, color=red];
m2_21 -> m2_19  [key=0, style=bold, color=blue];
m2_4 -> m2_5  [key=0, style=solid];
m2_5 -> m2_4  [key=0, style=bold, color=blue];
m2_28 -> m2_29  [key=0, style=solid];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_31  [key=2, style=dotted];
m2_30 -> m2_28  [key=0, style=bold, color=blue];
m2_57 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m2_57 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m2_57 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m2_57 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m2_57 -> m2_20  [key=1, style=dashed, color=red, label="HangFire.Redis.RedisStorage"];
m2_57 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m2_57 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m2_57 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
m2_57 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Redis.RedisStorage"];
}
