digraph  {
n383 [label="Hangfire.SqlServer.SqlServerMonitoringApi", span=""];
n384 [label=int, span=""];
n385 [label=int, span=""];
n386 [label=int, span=""];
n387 [label=int, span=""];
n388 [label=int, span=""];
n389 [label=int, span=""];
n390 [label=int, span=""];
n391 [label=int, span=""];
n392 [label=int, span=""];
n393 [label=int, span=""];
n394 [label=enqueuedJobIds, span=""];
n395 [label=enqueuedJobIds, span=""];
n396 [label=fetchedJobIds, span=""];
n397 [label=string, span=""];
n398 [label=sql, span=""];
n399 [label=string, span=""];
n400 [label=string, span=""];
n0 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="36-36"];
n1 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="storage == null", span="38-38"];
n3 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="_storage = storage", span="40-40"];
n4 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="_jobListLimit = jobListLimit", span="41-41"];
n2 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="throw new ArgumentNullException(''storage'');", span="38-38"];
n5 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(Hangfire.SqlServer.SqlServerStorage, int?)", span="36-36"];
n6 [cluster="System.ArgumentNullException.ArgumentNullException(string)", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
n7 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="44-44"];
n8 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ScheduledState.StateName));", span="46-47"];
n9 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledCount()", span="44-44"];
n10 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="423-423"];
n11 [cluster="lambda expression", label="Entry lambda expression", span="46-47"];
n12 [cluster="lambda expression", label="GetNumberOfJobsByStateName(connection, ScheduledState.StateName)", span="47-47"];
n13 [cluster="lambda expression", label="Exit lambda expression", span="46-47"];
n14 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="455-455"];
n15 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="50-50"];
n16 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="var queueApi = GetQueueApi(queue)", span="52-52"];
n17 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="53-53"];
n20 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="415-415"];
n18 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="return counters.EnqueuedCount ?? 0;", span="55-55"];
n21 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedAndFetchedCount(string)", span="25-25"];
n19 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedCount(string)", span="50-50"];
n22 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="58-58"];
n23 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="var queueApi = GetQueueApi(queue)", span="60-60"];
n24 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="var counters = queueApi.GetEnqueuedAndFetchedCount(queue)", span="61-61"];
n25 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="return counters.FetchedCount ?? 0;", span="63-63"];
n26 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedCount(string)", span="58-58"];
n27 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="66-66"];
n28 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, FailedState.StateName));", span="68-69"];
n29 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedCount()", span="66-66"];
n30 [cluster="lambda expression", label="Entry lambda expression", span="68-69"];
n31 [cluster="lambda expression", label="GetNumberOfJobsByStateName(connection, FailedState.StateName)", span="69-69"];
n32 [cluster="lambda expression", label="Exit lambda expression", span="68-69"];
n33 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="72-72"];
n34 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, ProcessingState.StateName));", span="74-75"];
n35 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingCount()", span="72-72"];
n36 [cluster="lambda expression", label="Entry lambda expression", span="74-75"];
n37 [cluster="lambda expression", label="GetNumberOfJobsByStateName(connection, ProcessingState.StateName)", span="75-75"];
n38 [cluster="lambda expression", label="Exit lambda expression", span="74-75"];
n39 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="78-78"];
n40 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }));", span="80-89"];
n43 [cluster="lambda expression", label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ProcessingState.StateName,\r\n                (sqlJob, job, stateData) => new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                })", span="80-89"];
n41 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ProcessingJobs(int, int)", span="78-78"];
n42 [cluster="lambda expression", label="Entry lambda expression", span="80-89"];
n44 [cluster="lambda expression", label="Exit lambda expression", span="80-89"];
n45 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="484-484"];
n46 [cluster="lambda expression", label="Entry lambda expression", span="84-89"];
n47 [cluster="lambda expression", label="new ProcessingJobDto\r\n                {\r\n                    Job = job,\r\n                    ServerId = stateData.ContainsKey(''ServerId'') ? stateData[''ServerId''] : stateData[''ServerName''],\r\n                    StartedAt = JobHelper.DeserializeDateTime(stateData[''StartedAt'']),\r\n                }", span="84-89"];
n48 [cluster="lambda expression", label="Exit lambda expression", span="84-89"];
n49 [cluster="Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", label="Entry Hangfire.Storage.Monitoring.ProcessingJobDto.ProcessingJobDto()", span="23-23"];
n50 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
n51 [cluster="Hangfire.Common.JobHelper.DeserializeDateTime(string)", label="Entry Hangfire.Common.JobHelper.DeserializeDateTime(string)", span="73-73"];
n52 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="92-92"];
n53 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }));", span="94-103"];
n56 [cluster="lambda expression", label="GetJobs(\r\n                connection,\r\n                from, count,\r\n                ScheduledState.StateName,\r\n                (sqlJob, job, stateData) => new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                })", span="94-103"];
n54 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.ScheduledJobs(int, int)", span="92-92"];
n55 [cluster="lambda expression", label="Entry lambda expression", span="94-103"];
n57 [cluster="lambda expression", label="Exit lambda expression", span="94-103"];
n58 [cluster="lambda expression", label="Entry lambda expression", span="98-103"];
n59 [cluster="lambda expression", label="new ScheduledJobDto\r\n                {\r\n                    Job = job,\r\n                    EnqueueAt = JobHelper.DeserializeDateTime(stateData[''EnqueueAt'']),\r\n                    ScheduledAt = JobHelper.DeserializeDateTime(stateData[''ScheduledAt''])\r\n                }", span="98-103"];
n60 [cluster="lambda expression", label="Exit lambda expression", span="98-103"];
n61 [cluster="Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", label="Entry Hangfire.Storage.Monitoring.ScheduledJobDto.ScheduledJobDto()", span="23-23"];
n62 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="106-106"];
n63 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''succeeded''));", span="108-109"];
n64 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededByDatesCount()", span="106-106"];
n65 [cluster="lambda expression", label="Entry lambda expression", span="108-109"];
n66 [cluster="lambda expression", label="GetTimelineStats(connection, ''succeeded'')", span="109-109"];
n67 [cluster="lambda expression", label="Exit lambda expression", span="108-109"];
n68 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="371-371"];
n69 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="112-112"];
n70 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", label="return UseConnection(connection => \r\n                GetTimelineStats(connection, ''failed''));", span="114-115"];
n71 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedByDatesCount()", span="112-112"];
n72 [cluster="lambda expression", label="Entry lambda expression", span="114-115"];
n73 [cluster="lambda expression", label="GetTimelineStats(connection, ''failed'')", span="115-115"];
n74 [cluster="lambda expression", label="Exit lambda expression", span="114-115"];
n75 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="118-118"];
n76 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", label="return UseConnection<IList<ServerDto>>(connection =>\r\n            {\r\n                var servers = connection.Query<Entities.Server>(\r\n                    string.Format(@''select * from [{0}].Server'', _storage.GetSchemaName()))\r\n                    .ToList();\r\n\r\n                var result = new List<ServerDto>();\r\n\r\n                foreach (var server in servers)\r\n                {\r\n                    var data = JobHelper.FromJson<ServerData>(server.Data);\r\n                    result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    });\r\n                }\r\n\r\n                return result;\r\n            });", span="120-142"];
n77 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Servers()", span="118-118"];
n78 [cluster="Unk.>", label="Entry Unk.>", span=""];
n79 [cluster="lambda expression", label="Entry lambda expression", span="120-142"];
n80 [cluster="lambda expression", label="var servers = connection.Query<Entities.Server>(\r\n                    string.Format(@''select * from [{0}].Server'', _storage.GetSchemaName()))\r\n                    .ToList()", span="122-124"];
n81 [cluster="lambda expression", label="var result = new List<ServerDto>()", span="126-126"];
n87 [cluster="Hangfire.SqlServer.SqlServerStorage.GetSchemaName()", label="Entry Hangfire.SqlServer.SqlServerStorage.GetSchemaName()", span="238-238"];
n88 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
n89 [cluster="Unk.ToList", label="Entry Unk.ToList", span=""];
n82 [cluster="lambda expression", label=servers, span="128-128"];
n90 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n84 [cluster="lambda expression", label="result.Add(new ServerDto\r\n                    {\r\n                        Name = server.Id,\r\n                        Heartbeat = server.LastHeartbeat,\r\n                        Queues = data.Queues,\r\n                        StartedAt = data.StartedAt.HasValue ? data.StartedAt.Value : DateTime.MinValue,\r\n                        WorkersCount = data.WorkerCount\r\n                    })", span="131-138"];
n85 [cluster="lambda expression", label="return result;", span="141-141"];
n83 [cluster="lambda expression", label="var data = JobHelper.FromJson<ServerData>(server.Data)", span="130-130"];
n91 [cluster="Hangfire.Storage.Monitoring.ServerDto.ServerDto()", label="Entry Hangfire.Storage.Monitoring.ServerDto.ServerDto()", span="21-21"];
n92 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n86 [cluster="lambda expression", label="Exit lambda expression", span="120-142"];
n93 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="145-145"];
n94 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }));", span="147-160"];
n97 [cluster="lambda expression", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                FailedState.StateName,\r\n                (sqlJob, job, stateData) => new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                })", span="147-160"];
n95 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FailedJobs(int, int)", span="145-145"];
n96 [cluster="lambda expression", label="Entry lambda expression", span="147-160"];
n98 [cluster="lambda expression", label="Exit lambda expression", span="147-160"];
n99 [cluster="lambda expression", label="Entry lambda expression", span="152-160"];
n100 [cluster="lambda expression", label="new FailedJobDto\r\n                {\r\n                    Job = job,\r\n                    Reason = sqlJob.StateReason,\r\n                    ExceptionDetails = stateData[''ExceptionDetails''],\r\n                    ExceptionMessage = stateData[''ExceptionMessage''],\r\n                    ExceptionType = stateData[''ExceptionType''],\r\n                    FailedAt = JobHelper.DeserializeNullableDateTime(stateData[''FailedAt''])\r\n                }", span="152-160"];
n101 [cluster="lambda expression", label="Exit lambda expression", span="152-160"];
n102 [cluster="Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", label="Entry Hangfire.Storage.Monitoring.FailedJobDto.FailedJobDto()", span="23-23"];
n103 [cluster="Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", label="Entry Hangfire.Common.JobHelper.DeserializeNullableDateTime(string)", span="84-84"];
n104 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="163-163"];
n105 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }));", span="165-178"];
n108 [cluster="lambda expression", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                SucceededState.StateName,\r\n                (sqlJob, job, stateData) => new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                })", span="165-178"];
n106 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededJobs(int, int)", span="163-163"];
n107 [cluster="lambda expression", label="Entry lambda expression", span="165-178"];
n109 [cluster="lambda expression", label="Exit lambda expression", span="165-178"];
n110 [cluster="lambda expression", label="Entry lambda expression", span="170-178"];
n111 [cluster="lambda expression", label="new SucceededJobDto\r\n                {\r\n                    Job = job,\r\n                    Result = stateData.ContainsKey(''Result'') ? stateData[''Result''] : null,\r\n                    TotalDuration = stateData.ContainsKey(''PerformanceDuration'') && stateData.ContainsKey(''Latency'')\r\n                        ? (long?)long.Parse(stateData[''PerformanceDuration'']) + (long?)long.Parse(stateData[''Latency''])\r\n                        : null,\r\n                    SucceededAt = JobHelper.DeserializeNullableDateTime(stateData[''SucceededAt''])\r\n                }", span="170-178"];
n112 [cluster="lambda expression", label="Exit lambda expression", span="170-178"];
n113 [cluster="Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", label="Entry Hangfire.Storage.Monitoring.SucceededJobDto.SucceededJobDto()", span="23-23"];
n114 [cluster="long.Parse(string)", label="Entry long.Parse(string)", span="0-0"];
n115 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="181-181"];
n116 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", label="return UseConnection(connection => GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }));", span="183-192"];
n119 [cluster="lambda expression", label="GetJobs(\r\n                connection,\r\n                from,\r\n                count,\r\n                DeletedState.StateName,\r\n                (sqlJob, job, stateData) => new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                })", span="183-192"];
n117 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedJobs(int, int)", span="181-181"];
n118 [cluster="lambda expression", label="Entry lambda expression", span="183-192"];
n120 [cluster="lambda expression", label="Exit lambda expression", span="183-192"];
n121 [cluster="lambda expression", label="Entry lambda expression", span="188-192"];
n122 [cluster="lambda expression", label="new DeletedJobDto\r\n                {\r\n                    Job = job,\r\n                    DeletedAt = JobHelper.DeserializeNullableDateTime(stateData[''DeletedAt''])\r\n                }", span="188-192"];
n123 [cluster="lambda expression", label="Exit lambda expression", span="188-192"];
n124 [cluster="Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", label="Entry Hangfire.Storage.Monitoring.DeletedJobDto.DeletedJobDto()", span="7-7"];
n125 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="195-195"];
n126 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="var tuples = _storage.QueueProviders\r\n                .Select(x => x.GetJobQueueMonitoringApi())\r\n                .SelectMany(x => x.GetQueues(), (monitoring, queue) => new { Monitoring = monitoring, Queue = queue })\r\n                .OrderBy(x => x.Queue)\r\n                .ToArray()", span="197-201"];
n127 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="var result = new List<QueueWithTopEnqueuedJobsDto>(tuples.Length)", span="203-203"];
n135 [cluster="Unk.Select", label="Entry Unk.Select", span=""];
n136 [cluster="Unk.SelectMany", label="Entry Unk.SelectMany", span=""];
n137 [cluster="Unk.OrderBy", label="Entry Unk.OrderBy", span=""];
n138 [cluster="Unk.ToArray", label="Entry Unk.ToArray", span=""];
n143 [cluster="lambda expression", label="Entry lambda expression", span="198-198"];
n147 [cluster="lambda expression", label="Entry lambda expression", span="199-199"];
n151 [cluster="lambda expression", label="Entry lambda expression", span="199-199"];
n154 [cluster="lambda expression", label="Entry lambda expression", span="200-200"];
n128 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label=tuples, span="205-205"];
n139 [cluster="List<QueueWithTopEnqueuedJobsDto>.cstr", label="Entry List<QueueWithTopEnqueuedJobsDto>.cstr", span=""];
n132 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="result.Add(new QueueWithTopEnqueuedJobsDto\r\n                {\r\n                    Name = tuple.Queue,\r\n                    Length = counters.EnqueuedCount ?? 0,\r\n                    Fetched = counters.FetchedCount,\r\n                    FirstJobs = firstJobs\r\n                })", span="212-218"];
n133 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="return result;", span="221-221"];
n129 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="var enqueuedJobIds = tuple.Monitoring.GetEnqueuedJobIds(tuple.Queue, 0, 5)", span="207-207"];
n130 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="var counters = tuple.Monitoring.GetEnqueuedAndFetchedCount(tuple.Queue)", span="208-208"];
n140 [cluster="Unk.GetEnqueuedJobIds", label="Entry Unk.GetEnqueuedJobIds", span=""];
n131 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="var firstJobs = UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds))", span="210-210"];
n158 [cluster="lambda expression", label="EnqueuedJobs(connection, enqueuedJobIds)", span="210-210"];
n141 [cluster="Unk.GetEnqueuedAndFetchedCount", label="Entry Unk.GetEnqueuedAndFetchedCount", span=""];
n157 [cluster="lambda expression", label="Entry lambda expression", span="210-210"];
n142 [cluster="Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", label="Entry Hangfire.Storage.Monitoring.QueueWithTopEnqueuedJobsDto.QueueWithTopEnqueuedJobsDto()", span="18-18"];
n134 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.Queues()", span="195-195"];
n144 [cluster="lambda expression", label="x.GetJobQueueMonitoringApi()", span="198-198"];
n145 [cluster="lambda expression", label="Exit lambda expression", span="198-198"];
n146 [cluster="Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", label="Entry Hangfire.SqlServer.IPersistentJobQueueProvider.GetJobQueueMonitoringApi()", span="21-21"];
n148 [cluster="lambda expression", label="x.GetQueues()", span="199-199"];
n149 [cluster="lambda expression", label="Exit lambda expression", span="199-199"];
n150 [cluster="Unk.GetQueues", label="Entry Unk.GetQueues", span=""];
n152 [cluster="lambda expression", label="new { Monitoring = monitoring, Queue = queue }", span="199-199"];
n153 [cluster="lambda expression", label="Exit lambda expression", span="199-199"];
n155 [cluster="lambda expression", label="x.Queue", span="200-200"];
n156 [cluster="lambda expression", label="Exit lambda expression", span="200-200"];
n159 [cluster="lambda expression", label="Exit lambda expression", span="210-210"];
n160 [cluster="Unk.EnqueuedJobs", label="Entry Unk.EnqueuedJobs", span=""];
n161 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="224-224"];
n162 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="var queueApi = GetQueueApi(queue)", span="226-226"];
n163 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="var enqueuedJobIds = queueApi.GetEnqueuedJobIds(queue, from, perPage)", span="227-227"];
n164 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="return UseConnection(connection => EnqueuedJobs(connection, enqueuedJobIds));", span="229-229"];
n166 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetEnqueuedJobIds(string, int, int)", span="23-23"];
n168 [cluster="lambda expression", label="EnqueuedJobs(connection, enqueuedJobIds)", span="229-229"];
n165 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(string, int, int)", span="224-224"];
n167 [cluster="lambda expression", label="Entry lambda expression", span="229-229"];
n169 [cluster="lambda expression", label="Exit lambda expression", span="229-229"];
n170 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="428-428"];
n171 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="232-232"];
n172 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="var queueApi = GetQueueApi(queue)", span="234-234"];
n173 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="var fetchedJobIds = queueApi.GetFetchedJobIds(queue, from, perPage)", span="235-235"];
n174 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="return UseConnection(connection => FetchedJobs(connection, fetchedJobIds));", span="237-237"];
n176 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetFetchedJobIds(string, int, int)", span="24-24"];
n178 [cluster="lambda expression", label="FetchedJobs(connection, fetchedJobIds)", span="237-237"];
n175 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(string, int, int)", span="232-232"];
n177 [cluster="lambda expression", label="Entry lambda expression", span="237-237"];
n179 [cluster="lambda expression", label="Exit lambda expression", span="237-237"];
n180 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="530-530"];
n181 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="240-240"];
n182 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''succeeded''));", span="242-243"];
n183 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlySucceededJobs()", span="240-240"];
n184 [cluster="lambda expression", label="Entry lambda expression", span="242-243"];
n185 [cluster="lambda expression", label="GetHourlyTimelineStats(connection, ''succeeded'')", span="243-243"];
n186 [cluster="lambda expression", label="Exit lambda expression", span="242-243"];
n187 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="354-354"];
n188 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="246-246"];
n189 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", label="return UseConnection(connection => \r\n                GetHourlyTimelineStats(connection, ''failed''));", span="248-249"];
n190 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.HourlyFailedJobs()", span="246-246"];
n191 [cluster="lambda expression", label="Entry lambda expression", span="248-249"];
n192 [cluster="lambda expression", label="GetHourlyTimelineStats(connection, ''failed'')", span="249-249"];
n193 [cluster="lambda expression", label="Exit lambda expression", span="248-249"];
n194 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="252-252"];
n195 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", label="return UseConnection(connection =>\r\n            {\r\n\r\n                string sql = string.Format(@''\r\nselect * from [{0}].Job where Id = @id\r\nselect * from [{0}].JobParameter where JobId = @id\r\nselect * from [{0}].State where JobId = @id order by Id desc'', _storage.GetSchemaName());\r\n\r\n                using (var multi = connection.QueryMultiple(sql, new { id = jobId }))\r\n                {\r\n                    var job = multi.Read<SqlJob>().SingleOrDefault();\r\n                    if (job == null) return null;\r\n\r\n                    var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value);\r\n                    var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList();\r\n\r\n                    return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };\r\n                }\r\n            });", span="254-291"];
n199 [cluster="lambda expression", label="var multi = connection.QueryMultiple(sql, new { id = jobId })", span="262-262"];
n196 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.JobDetails(string)", span="252-252"];
n197 [cluster="lambda expression", label="Entry lambda expression", span="254-291"];
n198 [cluster="lambda expression", label="string sql = string.Format(@''\r\nselect * from [{0}].Job where Id = @id\r\nselect * from [{0}].JobParameter where JobId = @id\r\nselect * from [{0}].State where JobId = @id order by Id desc'', _storage.GetSchemaName())", span="257-260"];
n200 [cluster="lambda expression", label="var job = multi.Read<SqlJob>().SingleOrDefault()", span="264-264"];
n207 [cluster="Unk.QueryMultiple", label="Entry Unk.QueryMultiple", span=""];
n203 [cluster="lambda expression", label="var parameters = multi.Read<JobParameter>().ToDictionary(x => x.Name, x => x.Value)", span="267-267"];
n204 [cluster="lambda expression", label="var history =\r\n                        multi.Read<SqlState>()\r\n                            .ToList()\r\n                            .Select(x => new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            })\r\n                            .ToList()", span="268-280"];
n201 [cluster="lambda expression", label="job == null", span="265-265"];
n208 [cluster="Unk.SingleOrDefault", label="Entry Unk.SingleOrDefault", span=""];
n205 [cluster="lambda expression", label="return new JobDetailsDto\r\n                    {\r\n                        CreatedAt = job.CreatedAt,\r\n                        ExpireAt = job.ExpireAt,\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        History = history,\r\n                        Properties = parameters\r\n                    };", span="282-289"];
n202 [cluster="lambda expression", label="return null;", span="265-265"];
n209 [cluster="Unk.ToDictionary", label="Entry Unk.ToDictionary", span=""];
n212 [cluster="lambda expression", label="Entry lambda expression", span="267-267"];
n215 [cluster="lambda expression", label="Entry lambda expression", span="267-267"];
n218 [cluster="lambda expression", label="Entry lambda expression", span="271-279"];
n206 [cluster="lambda expression", label="Exit lambda expression", span="254-291"];
n210 [cluster="Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", label="Entry Hangfire.Storage.Monitoring.JobDetailsDto.JobDetailsDto()", span="22-22"];
n211 [cluster="Unk.DeserializeJob", label="Entry Unk.DeserializeJob", span=""];
n213 [cluster="lambda expression", label="x.Name", span="267-267"];
n214 [cluster="lambda expression", label="Exit lambda expression", span="267-267"];
n216 [cluster="lambda expression", label="x.Value", span="267-267"];
n217 [cluster="lambda expression", label="Exit lambda expression", span="267-267"];
n219 [cluster="lambda expression", label="new StateHistoryDto\r\n                            {\r\n                                StateName = x.Name,\r\n                                CreatedAt = x.CreatedAt,\r\n                                Reason = x.Reason,\r\n                                Data = new Dictionary<string, string>(\r\n                                    JobHelper.FromJson<Dictionary<string, string>>(x.Data),\r\n                                    StringComparer.OrdinalIgnoreCase),\r\n                            }", span="271-279"];
n220 [cluster="lambda expression", label="Exit lambda expression", span="271-279"];
n221 [cluster="Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", label="Entry Hangfire.Storage.Monitoring.StateHistoryDto.StateHistoryDto()", span="21-21"];
n222 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
n223 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="294-294"];
n224 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, SucceededState.StateName));", span="296-297"];
n225 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.SucceededListCount()", span="294-294"];
n226 [cluster="lambda expression", label="Entry lambda expression", span="296-297"];
n227 [cluster="lambda expression", label="GetNumberOfJobsByStateName(connection, SucceededState.StateName)", span="297-297"];
n228 [cluster="lambda expression", label="Exit lambda expression", span="296-297"];
n229 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="300-300"];
n230 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", label="return UseConnection(connection => \r\n                GetNumberOfJobsByStateName(connection, DeletedState.StateName));", span="302-303"];
n231 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeletedListCount()", span="300-300"];
n232 [cluster="lambda expression", label="Entry lambda expression", span="302-303"];
n233 [cluster="lambda expression", label="GetNumberOfJobsByStateName(connection, DeletedState.StateName)", span="303-303"];
n234 [cluster="lambda expression", label="Exit lambda expression", span="302-303"];
n235 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="306-306"];
n236 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="string sql = string.Format(@''\r\nselect count(Id) from [{0}].Job where StateName = N'Enqueued';\r\nselect count(Id) from [{0}].Job where StateName = N'Failed';\r\nselect count(Id) from [{0}].Job where StateName = N'Processing';\r\nselect count(Id) from [{0}].Job where StateName = N'Scheduled';\r\nselect count(Id) from [{0}].Server;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter where [Key] = N'stats:succeeded'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter where [Key] = N'stats:succeeded'\r\n) as s;\r\nselect sum(s.[Value]) from (\r\n    select sum([Value]) as [Value] from [{0}].Counter where [Key] = N'stats:deleted'\r\n    union all\r\n    select [Value] from [{0}].AggregatedCounter where [Key] = N'stats:deleted'\r\n) as s;\r\nselect count(*) from [{0}].[Set] where [Key] = N'recurring-jobs';\r\n'', _storage.GetSchemaName())", span="308-325"];
n237 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="var statistics = UseConnection(connection =>\r\n            {\r\n                var stats = new StatisticsDto();\r\n                using (var multi = connection.QueryMultiple(sql))\r\n                {\r\n                    stats.Enqueued = multi.Read<int>().Single();\r\n                    stats.Failed = multi.Read<int>().Single();\r\n                    stats.Processing = multi.Read<int>().Single();\r\n                    stats.Scheduled = multi.Read<int>().Single();\r\n\r\n                    stats.Servers = multi.Read<int>().Single();\r\n\r\n                    stats.Succeeded = multi.Read<long?>().SingleOrDefault() ?? 0;\r\n                    stats.Deleted = multi.Read<long?>().SingleOrDefault() ?? 0;\r\n\r\n                    stats.Recurring = multi.Read<int>().Single();\r\n                }\r\n                return stats;\r\n            })", span="327-345"];
n245 [cluster="lambda expression", label="var multi = connection.QueryMultiple(sql)", span="330-330"];
n238 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="statistics.Queues = _storage.QueueProviders\r\n                .SelectMany(x => x.GetJobQueueMonitoringApi().GetQueues())\r\n                .Count()", span="347-349"];
n243 [cluster="lambda expression", label="Entry lambda expression", span="327-345"];
n239 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="return statistics;", span="351-351"];
n241 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
n242 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
n258 [cluster="lambda expression", label="Entry lambda expression", span="348-348"];
n240 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetStatistics()", span="306-306"];
n244 [cluster="lambda expression", label="var stats = new StatisticsDto()", span="329-329"];
n256 [cluster="Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", label="Entry Hangfire.Storage.Monitoring.StatisticsDto.StatisticsDto()", span="18-18"];
n246 [cluster="lambda expression", label="stats.Enqueued = multi.Read<int>().Single()", span="332-332"];
n247 [cluster="lambda expression", label="stats.Failed = multi.Read<int>().Single()", span="333-333"];
n248 [cluster="lambda expression", label="stats.Processing = multi.Read<int>().Single()", span="334-334"];
n249 [cluster="lambda expression", label="stats.Scheduled = multi.Read<int>().Single()", span="335-335"];
n250 [cluster="lambda expression", label="stats.Servers = multi.Read<int>().Single()", span="337-337"];
n251 [cluster="lambda expression", label="stats.Succeeded = multi.Read<long?>().SingleOrDefault() ?? 0", span="339-339"];
n252 [cluster="lambda expression", label="stats.Deleted = multi.Read<long?>().SingleOrDefault() ?? 0", span="340-340"];
n253 [cluster="lambda expression", label="stats.Recurring = multi.Read<int>().Single()", span="342-342"];
n254 [cluster="lambda expression", label="return stats;", span="344-344"];
n257 [cluster="Unk.Single", label="Entry Unk.Single", span=""];
n255 [cluster="lambda expression", label="Exit lambda expression", span="327-345"];
n259 [cluster="lambda expression", label="x.GetJobQueueMonitoringApi().GetQueues()", span="348-348"];
n260 [cluster="lambda expression", label="Exit lambda expression", span="348-348"];
n261 [cluster="Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", label="Entry Hangfire.SqlServer.IPersistentJobQueueMonitoringApi.GetQueues()", span="22-22"];
n262 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", label="var endDate = DateTime.UtcNow", span="358-358"];
n269 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", label="var keyMaps = dates.ToDictionary(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH'')), x => x)", span="366-366"];
n275 [cluster="lambda expression", label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd-HH''))", span="366-366"];
n270 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", label="return GetTimelineStats(connection, keyMaps);", span="368-368"];
n263 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", label="var dates = new List<DateTime>()", span="359-359"];
n266 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", label="dates.Add(endDate)", span="362-362"];
n267 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", label="endDate = endDate.AddHours(-1)", span="363-363"];
n264 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", label="var i = 0", span="360-360"];
n265 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", label="i < 24", span="360-360"];
n268 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", label="i++", span="360-360"];
n272 [cluster="System.DateTime.AddHours(double)", label="Entry System.DateTime.AddHours(double)", span="0-0"];
n274 [cluster="lambda expression", label="Entry lambda expression", span="366-366"];
n279 [cluster="lambda expression", label="Entry lambda expression", span="366-366"];
n271 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetHourlyTimelineStats(SqlConnection, string)", span="354-354"];
n273 [cluster="Unk.GetTimelineStats", label="Entry Unk.GetTimelineStats", span=""];
n276 [cluster="lambda expression", label="Exit lambda expression", span="366-366"];
n277 [cluster="System.DateTime.ToString(string)", label="Entry System.DateTime.ToString(string)", span="0-0"];
n278 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
n280 [cluster="lambda expression", label=x, span="366-366"];
n281 [cluster="lambda expression", label="Exit lambda expression", span="366-366"];
n282 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", label="var endDate = DateTime.UtcNow.Date", span="375-375"];
n289 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", label="var keyMaps = dates.ToDictionary(x => String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd'')), x => x)", span="383-383"];
n294 [cluster="lambda expression", label="String.Format(''stats:{0}:{1}'', type, x.ToString(''yyyy-MM-dd''))", span="383-383"];
n290 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", label="return GetTimelineStats(connection, keyMaps);", span="385-385"];
n283 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", label="var dates = new List<DateTime>()", span="376-376"];
n286 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", label="dates.Add(endDate)", span="379-379"];
n287 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", label="endDate = endDate.AddDays(-1)", span="380-380"];
n284 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", label="var i = 0", span="377-377"];
n285 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", label="i < 7", span="377-377"];
n288 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", label="i++", span="377-377"];
n292 [cluster="System.DateTime.AddDays(double)", label="Entry System.DateTime.AddDays(double)", span="0-0"];
n293 [cluster="lambda expression", label="Entry lambda expression", span="383-383"];
n296 [cluster="lambda expression", label="Entry lambda expression", span="383-383"];
n291 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, string)", span="371-371"];
n295 [cluster="lambda expression", label="Exit lambda expression", span="383-383"];
n297 [cluster="lambda expression", label=x, span="383-383"];
n298 [cluster="lambda expression", label="Exit lambda expression", span="383-383"];
n299 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="388-388"];
n300 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="string sqlQuery = string.Format(@''\r\nselect [Key], [Value] as [Count] from [{0}].AggregatedCounter\r\nwhere [Key] in @keys'', _storage.GetSchemaName())", span="391-393"];
n301 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="var valuesMap = connection.Query(\r\n                sqlQuery,\r\n                new { keys = keyMaps.Keys })\r\n                .ToDictionary(x => (string)x.Key, x => (long)x.Count)", span="395-398"];
n302 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="keyMaps.Keys", span="400-400"];
n307 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="i < keyMaps.Count", span="406-406"];
n308 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="var value = valuesMap[keyMaps.ElementAt(i).Key]", span="408-408"];
n309 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="result.Add(keyMaps.ElementAt(i).Value, value)", span="409-409"];
n313 [cluster="Unk.Query", label="Entry Unk.Query", span=""];
n318 [cluster="lambda expression", label="Entry lambda expression", span="398-398"];
n321 [cluster="lambda expression", label="Entry lambda expression", span="398-398"];
n303 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="!valuesMap.ContainsKey(key)", span="402-402"];
n304 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="valuesMap.Add(key, 0)", span="402-402"];
n305 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="var result = new Dictionary<DateTime, long>()", span="405-405"];
n314 [cluster="Unk.ContainsKey", label="Entry Unk.ContainsKey", span=""];
n315 [cluster="Unk.Add", label="Entry Unk.Add", span=""];
n306 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="var i = 0", span="406-406"];
n316 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
n311 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="return result;", span="412-412"];
n310 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="i++", span="406-406"];
n317 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
n312 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetTimelineStats(SqlConnection, System.Collections.Generic.IDictionary<string, System.DateTime>)", span="388-388"];
n319 [cluster="lambda expression", label="(string)x.Key", span="398-398"];
n320 [cluster="lambda expression", label="Exit lambda expression", span="398-398"];
n322 [cluster="lambda expression", label="(long)x.Count", span="398-398"];
n323 [cluster="lambda expression", label="Exit lambda expression", span="398-398"];
n324 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="var provider = _storage.QueueProviders.GetProvider(queueName)", span="417-417"];
n325 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="var monitoringApi = provider.GetJobQueueMonitoringApi()", span="418-418"];
n328 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
n326 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="return monitoringApi;", span="420-420"];
n327 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetQueueApi(string)", span="415-415"];
n329 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", label="return _storage.UseTransaction(action, IsolationLevel.ReadUncommitted);", span="425-425"];
n330 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.UseConnection<T>(System.Func<SqlConnection, T>)", span="423-423"];
n331 [cluster="Unk.UseTransaction", label="Entry Unk.UseTransaction", span=""];
n332 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="string enqueuedJobsSql = string.Format(@''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{0}].Job j\r\nleft join [{0}].State s on s.Id = j.StateId\r\nwhere j.Id in @jobIds'', _storage.GetSchemaName())", span="432-436"];
n333 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="var jobs = connection.Query<SqlJob>(\r\n                enqueuedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="438-441"];
n334 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="return DeserializeJobs(\r\n                jobs,\r\n                (sqlJob, job, stateData) => new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                });", span="443-452"];
n335 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.EnqueuedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="428-428"];
n336 [cluster="Unk.DeserializeJobs", label="Entry Unk.DeserializeJobs", span=""];
n337 [cluster="lambda expression", label="Entry lambda expression", span="445-452"];
n338 [cluster="lambda expression", label="new EnqueuedJobDto\r\n                {\r\n                    Job = job,\r\n                    State = sqlJob.StateName,\r\n                    EnqueuedAt = sqlJob.StateName == EnqueuedState.StateName\r\n                        ? JobHelper.DeserializeNullableDateTime(stateData[''EnqueuedAt''])\r\n                        : null\r\n                }", span="445-452"];
n339 [cluster="lambda expression", label="Exit lambda expression", span="445-452"];
n340 [cluster="Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", label="Entry Hangfire.Storage.Monitoring.EnqueuedJobDto.EnqueuedJobDto()", span="23-23"];
n341 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", label="var sqlQuery = _jobListLimit.HasValue\r\n                ? string.Format(@''select count(j.Id) from (select top (@limit) Id from [{0}].Job where StateName = @state) as j'', _storage.GetSchemaName())\r\n                : string.Format(@''select count(Id) from [{0}].Job where StateName = @state'', _storage.GetSchemaName())", span="457-459"];
n342 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", label="var count = connection.Query<int>(\r\n                 sqlQuery,\r\n                 new { state = stateName, limit = _jobListLimit })\r\n                 .Single()", span="461-464"];
n343 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", label="return count;", span="466-466"];
n344 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetNumberOfJobsByStateName(SqlConnection, string)", span="455-455"];
n345 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="469-469"];
n346 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="var data = JobHelper.FromJson<InvocationData>(invocationData)", span="471-471"];
n347 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="data.Arguments = arguments", span="472-472"];
n352 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
n348 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="return data.Deserialize();", span="476-476"];
n349 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label=JobLoadException, span="478-478"];
n350 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="return null;", span="480-480"];
n351 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJob(string, string)", span="469-469"];
n353 [cluster="Hangfire.Storage.InvocationData.Deserialize()", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="44-44"];
n354 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="string jobsSql = string.Format(@''\r\nselect * from (\r\n  select j.*, s.Reason as StateReason, s.Data as StateData, row_number() over (order by j.Id desc) as row_num\r\n  from [{0}].Job j with (forceseek)\r\n  left join [{0}].State s on j.StateId = s.Id\r\n  where j.StateName = @stateName\r\n) as j where j.row_num between @start and @end\r\n'', _storage.GetSchemaName())", span="491-498"];
n355 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var jobs = connection.Query<SqlJob>(\r\n                        jobsSql,\r\n                        new { stateName = stateName, start = @from + 1, end = @from + count })\r\n                        .ToList()", span="500-503"];
n356 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="return DeserializeJobs(jobs, selector);", span="505-505"];
n357 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.GetJobs<TDto>(SqlConnection, int, int, string, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="484-484"];
n358 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Entry Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="508-508"];
n359 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var result = new List<KeyValuePair<string, TDto>>(jobs.Count)", span="512-512"];
n360 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label=jobs, span="514-514"];
n363 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var dto = selector(job, DeserializeJob(job.InvocationData, job.Arguments), stateData)", span="521-521"];
n367 [cluster="System.Collections.Generic.List<T>.List(int)", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
n364 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="result.Add(new KeyValuePair<string, TDto>(\r\n                    job.Id.ToString(), dto))", span="523-524"];
n365 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="return new JobList<TDto>(result);", span="527-527"];
n361 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var deserializedData = JobHelper.FromJson<Dictionary<string, string>>(job.StateData)", span="516-516"];
n362 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="var stateData = deserializedData != null\r\n                    ? new Dictionary<string, string>(deserializedData, StringComparer.OrdinalIgnoreCase)\r\n                    : null", span="517-519"];
n368 [cluster="System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", label="Entry System.Func<T1, T2, T3, TResult>.Invoke(T1, T2, T3)", span="0-0"];
n369 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
n370 [cluster="int.ToString()", label="Entry int.ToString()", span="0-0"];
n366 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.DeserializeJobs<TDto>(System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>, System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>)", span="508-508"];
n371 [cluster="Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", label="Entry Hangfire.Storage.Monitoring.JobList<TDto>.JobList(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, TDto>>)", span="22-22"];
n372 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="string fetchedJobsSql = string.Format(@''\r\nselect j.*, s.Reason as StateReason, s.Data as StateData \r\nfrom [{0}].Job j\r\nleft join [{0}].State s on s.Id = j.StateId\r\nwhere j.Id in @jobIds'', _storage.GetSchemaName())", span="534-538"];
n373 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="var jobs = connection.Query<SqlJob>(\r\n                fetchedJobsSql,\r\n                new { jobIds = jobIds })\r\n                .ToList()", span="540-543"];
n374 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="var result = new List<KeyValuePair<string, FetchedJobDto>>(jobs.Count)", span="545-545"];
n375 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label=jobs, span="547-547"];
n379 [cluster="List<KeyValuePair<string, FetchedJobDto>>.cstr", label="Entry List<KeyValuePair<string, FetchedJobDto>>.cstr", span=""];
n376 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="result.Add(new KeyValuePair<string, FetchedJobDto>(\r\n                    job.Id.ToString(),\r\n                    new FetchedJobDto\r\n                    {\r\n                        Job = DeserializeJob(job.InvocationData, job.Arguments),\r\n                        State = job.StateName,\r\n                    }))", span="549-555"];
n377 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="return new JobList<FetchedJobDto>(result);", span="558-558"];
n380 [cluster="KeyValuePair<string, FetchedJobDto>.cstr", label="Entry KeyValuePair<string, FetchedJobDto>.cstr", span=""];
n381 [cluster="Unk.ToString", label="Entry Unk.ToString", span=""];
n382 [cluster="Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", label="Entry Hangfire.Storage.Monitoring.FetchedJobDto.FetchedJobDto()", span="21-21"];
n378 [cluster="Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", label="Exit Hangfire.SqlServer.SqlServerMonitoringApi.FetchedJobs(SqlConnection, System.Collections.Generic.IEnumerable<int>)", span="530-530"];
m0_12 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18"];
m0_13 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="RedisConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetStateData(''random-id'');\r\n                Assert.Null(result);\r\n            })", span="20-24"];
m0_14 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsNull_WhenJobDoesNotExist()", span="18-18"];
m0_33 [cluster="Unk.SetRangeInHash", file="RedisConnectionFacts.cs", label="Entry Unk.SetRangeInHash", span=""];
m0_3 [cluster="Unk.UseConnection", file="RedisConnectionFacts.cs", label="Entry Unk.UseConnection", span=""];
m0_97 [cluster="Unk.GetAllEntriesFromHash", file="RedisConnectionFacts.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m0_11 [cluster="HangFire.Redis.RedisConnection.GetStateData(string)", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.RedisConnection.GetStateData(string)", span="204-204"];
m0_35 [cluster="Unk.Equal", file="RedisConnectionFacts.cs", label="Entry Unk.Equal", span=""];
m0_115 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", span="147-147"];
m0_116 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", file="RedisConnectionFacts.cs", label="UseConnections((redis, connection) =>\r\n            {\r\n                // Arrange\r\n                redis.SetRangeInHash(''hangfire:some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n\r\n                // Assert\r\n                Assert.NotNull(result);\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="149-165"];
m0_117 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsAllEntries()", span="147-147"];
m0_132 [cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="RedisConnectionFacts.cs", label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0"];
m0_0 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10"];
m0_1 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="RedisConnectionFacts.cs", label="UseConnection(\r\n                connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null)))", span="12-14"];
m0_2 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="10-10"];
m0_65 [cluster="Unk.AddItemToSortedSet", file="RedisConnectionFacts.cs", label="Entry Unk.AddItemToSortedSet", span=""];
m0_133 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", span="177-177"];
m0_134 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs", label="var connection = new RedisConnection(RedisUtils.CreateClient())", span="179-179"];
m0_135 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs", label="action(connection)", span="181-181"];
m0_136 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.UseConnection(System.Action<HangFire.Redis.RedisConnection>)", span="177-177"];
m0_137 [cluster="System.Action<T>.Invoke(T)", file="RedisConnectionFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m0_77 [cluster="HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.RedisConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="255-255"];
m0_34 [cluster="Unk.NotNull", file="RedisConnectionFacts.cs", label="Entry Unk.NotNull", span=""];
m0_32 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RedisConnectionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_36 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="51-51"];
m0_37 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null)))", span="53-54"];
m0_38 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="51-51"];
m0_19 [cluster="Unk.Null", file="RedisConnectionFacts.cs", label="Entry Unk.Null", span=""];
m0_98 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="130-130"];
m0_99 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs", label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null)))", span="132-133"];
m0_100 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="130-130"];
m0_67 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="89-89"];
m0_68 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="91-97"];
m0_69 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="89-89"];
m0_108 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", span="137-137"];
m0_109 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", file="RedisConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n                Assert.Null(result);\r\n            })", span="139-143"];
m0_110 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllEntriesFromHash_ReturnsNullValue_WhenHashDoesNotExist()", span="137-137"];
m0_23 [cluster="Unk.UseConnections", file="RedisConnectionFacts.cs", label="Entry Unk.UseConnections", span=""];
m0_118 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="149-165"];
m0_4 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="13-14"];
m0_5 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null))", span="13-14"];
m0_9 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="connection.GetStateData(null)", span="14-14"];
m0_6 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="13-14"];
m0_8 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="14-14"];
m0_10 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="14-14"];
m0_15 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="20-24"];
m0_16 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="var result = connection.GetStateData(''random-id'')", span="22-22"];
m0_17 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Null(result)", span="23-23"];
m0_18 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="20-24"];
m0_24 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="30-47"];
m0_25 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    })", span="32-39"];
m0_26 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="var result = connection.GetStateData(''my-job'')", span="41-41"];
m0_27 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.NotNull(result)", span="43-43"];
m0_28 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Equal(''Name'', result.Name)", span="44-44"];
m0_29 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Equal(''Reason'', result.Reason)", span="45-45"];
m0_30 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Equal(''Value'', result.Data[''Key''])", span="46-46"];
m0_31 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="30-47"];
m0_39 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="53-54"];
m0_40 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null))", span="54-54"];
m0_43 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="connection.GetAllItemsFromSet(null)", span="54-54"];
m0_41 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="53-54"];
m0_42 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="54-54"];
m0_44 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="54-54"];
m0_49 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="60-66"];
m0_50 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="62-62"];
m0_51 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.NotNull(result)", span="64-64"];
m0_52 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Equal(0, result.Count)", span="65-65"];
m0_53 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="60-66"];
m0_57 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="72-85"];
m0_58 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="redis.AddItemToSortedSet(''hangfire:some-set'', ''1'')", span="75-75"];
m0_59 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="redis.AddItemToSortedSet(''hangfire:some-set'', ''2'')", span="76-76"];
m0_60 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="var result = connection.GetAllItemsFromSet(''some-set'')", span="79-79"];
m0_61 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Equal(2, result.Count)", span="82-82"];
m0_62 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Contains(''1'', result)", span="83-83"];
m0_63 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Contains(''2'', result)", span="84-84"];
m0_64 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="72-85"];
m0_70 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="91-97"];
m0_71 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()))", span="93-94"];
m0_75 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="connection.SetRangeInHash(null, new Dictionary<string, string>())", span="94-94"];
m0_72 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="96-96"];
m0_74 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="94-94"];
m0_73 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="91-97"];
m0_76 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="94-94"];
m0_81 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="103-109"];
m0_82 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null))", span="105-106"];
m0_86 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="connection.SetRangeInHash(''some-hash'', null)", span="106-106"];
m0_83 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="108-108"];
m0_85 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="106-106"];
m0_84 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="103-109"];
m0_87 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="106-106"];
m0_91 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="115-126"];
m0_92 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="117-121"];
m0_93 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="var hash = redis.GetAllEntriesFromHash(''hangfire:some-hash'')", span="123-123"];
m0_94 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Equal(''Value1'', hash[''Key1''])", span="124-124"];
m0_95 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Equal(''Value2'', hash[''Key2''])", span="125-125"];
m0_96 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="115-126"];
m0_101 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="132-133"];
m0_102 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null))", span="133-133"];
m0_105 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="connection.GetAllEntriesFromHash(null)", span="133-133"];
m0_103 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="132-133"];
m0_104 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="133-133"];
m0_106 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="133-133"];
m0_111 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Entry lambda expression", span="139-143"];
m0_112 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="141-141"];
m0_113 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Null(result)", span="142-142"];
m0_114 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="139-143"];
m0_119 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="redis.SetRangeInHash(''hangfire:some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="152-156"];
m0_120 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="159-159"];
m0_121 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.NotNull(result)", span="162-162"];
m0_122 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="163-163"];
m0_123 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="164-164"];
m0_124 [cluster="lambda expression", file="RedisConnectionFacts.cs", label="Exit lambda expression", span="149-165"];
m0_20 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28"];
m0_21 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="RedisConnectionFacts.cs", label="UseConnections((redis, connection) =>\r\n            {\r\n                redis.SetRangeInHash(\r\n                    ''hangfire:job:my-job:state'',\r\n                    new Dictionary<string, string>\r\n                    {\r\n                        { ''State'', ''Name'' },\r\n                        { ''Reason'', ''Reason'' },\r\n                        { ''Key'', ''Value'' }\r\n                    });\r\n\r\n                var result = connection.GetStateData(''my-job'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(''Name'', result.Name);\r\n                Assert.Equal(''Reason'', result.Reason);\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="30-47"];
m0_22 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetStateData_ReturnsCorrectResult()", span="28-28"];
m0_66 [cluster="Unk.Contains", file="RedisConnectionFacts.cs", label="Entry Unk.Contains", span=""];
m0_107 [cluster="HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.RedisConnection.GetAllEntriesFromHash(string)", span="263-263"];
m0_130 [cluster="HangFire.Redis.Tests.RedisUtils.CreateClient()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisUtils.CreateClient()", span="15-15"];
m0_54 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="70-70"];
m0_55 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="RedisConnectionFacts.cs", label="UseConnections((redis, connection) =>\r\n            {\r\n                // Arrange\r\n                redis.AddItemToSortedSet(''hangfire:some-set'', ''1'');\r\n                redis.AddItemToSortedSet(''hangfire:some-set'', ''2'');\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Contains(''1'', result);\r\n                Assert.Contains(''2'', result);\r\n            })", span="72-85"];
m0_56 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="70-70"];
m0_131 [cluster="HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.RedisConnection.RedisConnection(IRedisClient)", span="32-32"];
m0_46 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", span="58-58"];
m0_47 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", file="RedisConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(0, result.Count);\r\n            })", span="60-66"];
m0_48 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenSetDoesNotExist()", span="58-58"];
m0_78 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="101-101"];
m0_79 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="RedisConnectionFacts.cs", label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="103-109"];
m0_80 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="101-101"];
m0_125 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", span="168-168"];
m0_126 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs", label="var redis = RedisUtils.CreateClient()", span="170-170"];
m0_128 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs", label="action(redis, connection)", span="173-173"];
m0_127 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs", label="var connection = new RedisConnection(redis)", span="171-171"];
m0_129 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.UseConnections(System.Action<IRedisClient, HangFire.Redis.RedisConnection>)", span="168-168"];
m0_45 [cluster="HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.RedisConnection.GetAllItemsFromSet(string)", span="240-240"];
m0_88 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", file="RedisConnectionFacts.cs", label="Entry HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", span="113-113"];
m0_89 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", file="RedisConnectionFacts.cs", label="UseConnections((redis, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                var hash = redis.GetAllEntriesFromHash(''hangfire:some-hash'');\r\n                Assert.Equal(''Value1'', hash[''Key1'']);\r\n                Assert.Equal(''Value2'', hash[''Key2'']);\r\n            })", span="115-126"];
m0_90 [cluster="HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", file="RedisConnectionFacts.cs", label="Exit HangFire.Redis.Tests.RedisConnectionFacts.SetRangeInHash_SetsAllGivenKeyPairs()", span="113-113"];
m0_138 [file="RedisConnectionFacts.cs", label="HangFire.Redis.Tests.RedisConnectionFacts", span=""];
m0_139 [file="RedisConnectionFacts.cs", label="HangFire.Redis.RedisConnection", span=""];
m0_140 [file="RedisConnectionFacts.cs", label="HangFire.Redis.RedisConnection", span=""];
m0_141 [file="RedisConnectionFacts.cs", label="HangFire.Redis.RedisConnection", span=""];
m0_142 [file="RedisConnectionFacts.cs", label="HangFire.Redis.RedisConnection", span=""];
m0_143 [file="RedisConnectionFacts.cs", label="HangFire.Redis.RedisConnection", span=""];
m1_73 [cluster="System.Diagnostics.Stopwatch.StartNew()", file="RedisMonitoringApi.cs", label="Entry System.Diagnostics.Stopwatch.StartNew()", span="0-0"];
m1_77 [cluster="Hangfire.States.FailedState.FailedState(System.Exception)", file="RedisMonitoringApi.cs", label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="26-26"];
m1_50 [cluster="Hangfire.Server.Worker.ToString()", file="RedisMonitoringApi.cs", label="Entry Hangfire.Server.Worker.ToString()", span="123-123"];
m1_51 [cluster="Hangfire.Server.Worker.ToString()", file="RedisMonitoringApi.cs", label="return ''Worker #'' + _context.WorkerNumber;", span="125-125"];
m1_52 [cluster="Hangfire.Server.Worker.ToString()", file="RedisMonitoringApi.cs", label="Exit Hangfire.Server.Worker.ToString()", span="123-123"];
m1_36 [cluster="Hangfire.JobStorage.GetConnection()", file="RedisMonitoringApi.cs", label="Entry Hangfire.JobStorage.GetConnection()", span="56-56"];
m1_45 [cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs", label="Entry Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, Hangfire.Server.BackgroundProcessContext)", span="32-32"];
m1_48 [cluster="Hangfire.Logging.ILog.DebugException(string, System.Exception)", file="RedisMonitoringApi.cs", label="Entry Hangfire.Logging.ILog.DebugException(string, System.Exception)", span="130-130"];
m1_39 [cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="RedisMonitoringApi.cs", label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22"];
m1_40 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", file="RedisMonitoringApi.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", span="0-0"];
m1_0 [cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs", label="Entry Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", span="35-35"];
m1_3 [cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", color=green, community=0, file="RedisMonitoringApi.cs", label="process == null", prediction=0, span="41-41"];
m1_1 [cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs", label="context == null", span="40-40"];
m1_4 [cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", color=green, community=0, file="RedisMonitoringApi.cs", label="throw new ArgumentNullException(''process'');", prediction=1, span="41-41"];
m1_5 [cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", color=green, community=0, file="RedisMonitoringApi.cs", label="stateMachineFactory == null", prediction=0, span="42-42"];
m1_6 [cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", color=green, community=0, file="RedisMonitoringApi.cs", label="throw new ArgumentNullException(''stateMachineFactory'');", prediction=3, span="42-42"];
m1_7 [cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs", label="_context = context", span="44-44"];
m1_8 [cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs", label="_process = process", span="45-45"];
m1_9 [cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs", label="_stateMachineFactory = stateMachineFactory", span="46-46"];
m1_2 [cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs", label="throw new ArgumentNullException(''context'');", span="40-40"];
m1_10 [cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", file="RedisMonitoringApi.cs", label="Exit Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext, Hangfire.Server.IJobPerformanceProcess, Hangfire.States.IStateMachineFactory)", span="35-35"];
m1_75 [cluster="System.Diagnostics.Stopwatch.Stop()", file="RedisMonitoringApi.cs", label="Entry System.Diagnostics.Stopwatch.Stop()", span="0-0"];
m1_76 [cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="RedisMonitoringApi.cs", label="Entry Hangfire.States.SucceededState.SucceededState(object, long, long)", span="28-28"];
m1_70 [cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)", file="RedisMonitoringApi.cs", label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42"];
m1_38 [cluster="System.Threading.CancellationToken.ThrowIfCancellationRequested()", file="RedisMonitoringApi.cs", label="Entry System.Threading.CancellationToken.ThrowIfCancellationRequested()", span="0-0"];
m1_44 [cluster="Hangfire.Storage.IFetchedJob.RemoveFromQueue()", file="RedisMonitoringApi.cs", label="Entry Hangfire.Storage.IFetchedJob.RemoveFromQueue()", span="24-24"];
m1_49 [cluster="Hangfire.Storage.IFetchedJob.Requeue()", file="RedisMonitoringApi.cs", label="Entry Hangfire.Storage.IFetchedJob.Requeue()", span="25-25"];
m1_46 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs", label="Entry Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", span="128-128"];
m1_57 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs", label="var performContext = new PerformContext(\r\n                    _context, connection, jobId, jobData.Job, jobData.CreatedAt, token)", prediction=4, span="144-145"];
m1_53 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs", label="var jobData = connection.GetJobData(jobId)", span="132-132"];
m1_56 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs", label="jobData.EnsureLoaded()", prediction=5, span="142-142"];
m1_58 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs", label="var latency = (DateTime.UtcNow - jobData.CreatedAt).TotalMilliseconds", prediction=6, span="147-147"];
m1_60 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs", label="var result = _process.Run(performContext, jobData.Job)", prediction=7, span="150-150"];
m1_54 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs", label="jobData == null", prediction=8, span="133-133"];
m1_55 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs", label="return null;", prediction=9, span="139-139"];
m1_59 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs", label="var duration = Stopwatch.StartNew()", prediction=10, span="148-148"];
m1_62 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs", label="return new SucceededState(result, (long) latency, duration.ElapsedMilliseconds);", span="153-153"];
m1_61 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs", label="duration.Stop()", prediction=10, span="151-151"];
m1_66 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs", label="return new FailedState(ex.InnerException)\r\n                {\r\n                    Reason = ex.Message\r\n                };", prediction=12, span="161-164"];
m1_65 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs", label=JobPerformanceException, span="159-159"];
m1_67 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs", label=Exception, prediction=13, span="166-166"];
m1_68 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", color=green, community=0, file="RedisMonitoringApi.cs", label="return new FailedState(ex)\r\n                {\r\n                    Reason = ''Internal Hangfire Server exception occurred. Please, report it to Hangfire developers.''\r\n                };", prediction=14, span="168-171"];
m1_64 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs", label="throw;", span="157-157"];
m1_63 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs", label=OperationCanceledException, span="155-155"];
m1_69 [cluster="Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs", label="Exit Hangfire.Server.Worker.PerformJob(string, Hangfire.Storage.IStorageConnection, Hangfire.IJobCancellationToken)", span="128-128"];
m1_72 [cluster="Hangfire.Server.PerformContext.PerformContext(Hangfire.Server.WorkerContext, Hangfire.Storage.IStorageConnection, string, Hangfire.Common.Job, System.DateTime, Hangfire.IJobCancellationToken)", file="RedisMonitoringApi.cs", label="Entry Hangfire.Server.PerformContext.PerformContext(Hangfire.Server.WorkerContext, Hangfire.Storage.IStorageConnection, string, Hangfire.Common.Job, System.DateTime, Hangfire.IJobCancellationToken)", span="35-35"];
m1_74 [cluster="Hangfire.Server.IJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", file="RedisMonitoringApi.cs", label="Entry Hangfire.Server.IJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", span="20-20"];
m1_47 [cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="RedisMonitoringApi.cs", label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="31-31"];
m1_43 [cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", file="RedisMonitoringApi.cs", label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[], System.Threading.CancellationToken)", span="26-26"];
m1_37 [cluster="Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="RedisMonitoringApi.cs", label="Entry Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="36-36"];
m1_12 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs", label="Entry Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="49-49"];
m1_15 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="context.CancellationToken.ThrowIfCancellationRequested()", prediction=15, span="54-54"];
m1_14 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs", label="var fetchedJob = connection.FetchNextJob(_context.Queues, context.CancellationToken)", span="52-52"];
m1_16 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs", label="var stateMachine = _stateMachineFactory.Create(connection)", span="58-58"];
m1_21 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="context.CancellationToken.ThrowIfCancellationRequested()", prediction=15, span="75-75"];
m1_20 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="!stateMachine.ChangeState(\r\n                            fetchedJob.JobId,\r\n                            processingState,\r\n                            new[] { EnqueuedState.StateName, ProcessingState.StateName },\r\n                            linkedCts.Token)", prediction=17, span="67-71"];
m1_22 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="fetchedJob.RemoveFromQueue()", prediction=17, span="78-78"];
m1_24 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="var jobCancellationToken = new ServerJobCancellationToken(\r\n                        fetchedJob.JobId, connection, _context, context)", prediction=19, span="88-89"];
m1_13 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs", label="var connection = context.Storage.GetConnection()", span="51-51"];
m1_25 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="var state = PerformJob(fetchedJob.JobId, connection, jobCancellationToken)", prediction=20, span="91-91"];
m1_26 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="state != null", prediction=21, span="93-93"];
m1_27 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs", label="stateMachine.ChangeState(fetchedJob.JobId, state, new[] { ProcessingState.StateName })", span="96-96"];
m1_18 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs", label="var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(\r\n                        context.CancellationToken,\r\n                        timeoutCts.Token)", span="61-63"];
m1_19 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs", label="var processingState = new ProcessingState(context.ServerId, _context.WorkerNumber)", span="65-65"];
m1_23 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="return;", prediction=22, span="79-79"];
m1_28 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="fetchedJob.RemoveFromQueue()", prediction=17, span="104-104"];
m1_29 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label=JobAbortedException, prediction=24, span="109-109"];
m1_31 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label=Exception, prediction=25, span="113-113"];
m1_30 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="fetchedJob.RemoveFromQueue()", prediction=17, span="111-111"];
m1_33 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="fetchedJob.Requeue()", prediction=17, span="117-117"];
m1_32 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs", label="Logger.DebugException(''An exception occurred while processing a job. It will be re-queued.'', ex)", span="115-115"];
m1_34 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", color=green, community=0, file="RedisMonitoringApi.cs", label="throw;", prediction=28, span="118-118"];
m1_17 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs", label="var timeoutCts = new CancellationTokenSource(JobInitializationWaitTimeout)", span="60-60"];
m1_35 [cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="RedisMonitoringApi.cs", label="Exit Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="49-49"];
m1_71 [cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="RedisMonitoringApi.cs", label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29"];
m1_42 [cluster="Hangfire.States.ProcessingState.ProcessingState(string, int)", file="RedisMonitoringApi.cs", label="Entry Hangfire.States.ProcessingState.ProcessingState(string, int)", span="27-27"];
m1_41 [cluster="System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", file="RedisMonitoringApi.cs", label="Entry System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)", span="0-0"];
m1_78 [file="RedisMonitoringApi.cs", label="Hangfire.Server.Worker", span=""];
m2_51 [cluster="string.Format(string, object, object)", file="RedisStorage.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m2_52 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.GetRedisKey(string)", span="107-107"];
m2_53 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="RedisStorage.cs", label="key == null", span="109-109"];
m2_55 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="RedisStorage.cs", label="return Prefix + key;", span="111-111"];
m2_54 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="RedisStorage.cs", label="throw new ArgumentNullException(''key'');", span="109-109"];
m2_56 [cluster="HangFire.Redis.RedisStorage.GetRedisKey(string)", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.GetRedisKey(string)", span="107-107"];
m2_42 [cluster="HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", span="96-96"];
m2_43 [cluster="HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", file="RedisStorage.cs", label="logger.Info(''Using the following options for Redis job storage:'')", span="98-98"];
m2_44 [cluster="HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", file="RedisStorage.cs", label="logger.InfoFormat(''    Connection pool size: {0}.'', Options.ConnectionPoolSize)", span="99-99"];
m2_45 [cluster="HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.WriteOptionsToLog(ILog)", span="96-96"];
m2_46 [cluster="Unk.Info", file="RedisStorage.cs", label="Entry Unk.Info", span=""];
m2_40 [cluster="HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", file="RedisStorage.cs", label="Entry HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", span="21-21"];
m2_32 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.GetStateHandlers()", span="88-88"];
m2_33 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs", label="yield return new FailedStateHandler();", span="90-90"];
m2_34 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs", label="yield return new ProcessingStateHandler();", span="91-91"];
m2_35 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs", label="yield return new SucceededStateHandler();", span="92-92"];
m2_36 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs", label="yield return new DeletedStateHandler();", span="93-93"];
m2_37 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.GetStateHandlers()", span="88-88"];
m2_41 [cluster="HangFire.Redis.DeletedStateHandler.DeletedStateHandler()", file="RedisStorage.cs", label="Entry HangFire.Redis.DeletedStateHandler.DeletedStateHandler()", span="21-21"];
m2_2 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string)", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage(string)", span="38-38"];
m2_3 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string)", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage(string)", span="38-38"];
m2_47 [cluster="Unk.InfoFormat", file="RedisStorage.cs", label="Entry Unk.InfoFormat", span=""];
m2_38 [cluster="HangFire.Redis.FailedStateHandler.FailedStateHandler()", file="RedisStorage.cs", label="Entry HangFire.Redis.FailedStateHandler.FailedStateHandler()", span="23-23"];
m2_27 [cluster="RedisConnection.cstr", file="RedisStorage.cs", label="Entry RedisConnection.cstr", span=""];
m2_31 [cluster="HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage)", file="RedisStorage.cs", label="Entry HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage)", span="31-31"];
m2_23 [cluster="Unk.GetClient", file="RedisStorage.cs", label="Entry Unk.GetClient", span=""];
m2_39 [cluster="HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", file="RedisStorage.cs", label="Entry HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", span="23-23"];
m2_22 [cluster="RedisMonitoringApi.cstr", file="RedisStorage.cs", label="Entry RedisMonitoringApi.cstr", span=""];
m2_48 [cluster="HangFire.Redis.RedisStorage.ToString()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.ToString()", span="102-102"];
m2_49 [cluster="HangFire.Redis.RedisStorage.ToString()", file="RedisStorage.cs", label="return String.Format(''redis://{0}/{1}'', HostAndPort, Db);", span="104-104"];
m2_50 [cluster="HangFire.Redis.RedisStorage.ToString()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.ToString()", span="102-102"];
m2_0 [cluster="HangFire.Redis.RedisStorage.RedisStorage()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage()", span="33-33"];
m2_1 [cluster="HangFire.Redis.RedisStorage.RedisStorage()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage()", span="33-33"];
m2_6 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", span="48-48"];
m2_7 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="hostAndPort == null", span="50-50"];
m2_9 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="options == null", span="51-51"];
m2_11 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="HostAndPort = hostAndPort", span="53-53"];
m2_12 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="Db = db", span="54-54"];
m2_13 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="Options = options", span="55-55"];
m2_8 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="throw new ArgumentNullException(''hostAndPort'');", span="50-50"];
m2_10 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="throw new ArgumentNullException(''options'');", span="51-51"];
m2_14 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="_pooledManager = new PooledRedisClientManager(\r\n                new []{ HostAndPort },\r\n                new string[0],\r\n                new RedisClientManagerConfig\r\n                {\r\n                    DefaultDb = Db,\r\n                    MaxWritePoolSize = Options.ConnectionPoolSize\r\n                })", span="57-64"];
m2_15 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", span="48-48"];
m2_24 [cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.GetConnection()", span="78-78"];
m2_25 [cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs", label="return new RedisConnection(_pooledManager.GetClient());", span="80-80"];
m2_26 [cluster="HangFire.Redis.RedisStorage.GetConnection()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.GetConnection()", span="78-78"];
m2_18 [cluster="RedisClientManagerConfig.cstr", file="RedisStorage.cs", label="Entry RedisClientManagerConfig.cstr", span=""];
m2_19 [cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.GetMonitoringApi()", span="73-73"];
m2_21 [cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.GetMonitoringApi()", span="73-73"];
m2_4 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="43-43"];
m2_5 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="43-43"];
m2_28 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="RedisStorage.cs", label="Entry HangFire.Redis.RedisStorage.GetComponents()", span="83-83"];
m2_29 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="RedisStorage.cs", label="yield return new FetchedJobsWatcher(this);", span="85-85"];
m2_30 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="RedisStorage.cs", label="Exit HangFire.Redis.RedisStorage.GetComponents()", span="83-83"];
m2_17 [cluster="PooledRedisClientManager.cstr", file="RedisStorage.cs", label="Entry PooledRedisClientManager.cstr", span=""];
m2_57 [file="RedisStorage.cs", label="HangFire.Redis.RedisStorage", span=""];
n383 -> n8  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n12  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n28  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n31  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n34  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n37  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n63  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n66  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n70  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n73  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n158  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n164  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n168  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n174  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n178  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n182  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n185  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n189  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n192  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n224  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n227  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n230  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n233  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n270  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n290  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n329  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n383 -> n356  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerMonitoringApi", style=dashed];
n394 -> n158  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
n395 -> n168  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
n396 -> n178  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
n399 -> n275  [color=darkseagreen4, key=1, label=string, style=dashed];
n400 -> n294  [color=darkseagreen4, key=1, label=string, style=dashed];
n8 -> n11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n28 -> n30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n34 -> n36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n40 -> n42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n43 -> n46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n45 -> n356  [color=darkseagreen4, key=1, label="System.Func<Hangfire.SqlServer.Entities.SqlJob, Hangfire.Common.Job, System.Collections.Generic.Dictionary<string, string>, TDto>", style=dashed];
n53 -> n55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n56 -> n58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n63 -> n65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n68 -> n294  [color=darkseagreen4, key=1, label=string, style=dashed];
n68 -> n290  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n70 -> n72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n76 -> n79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n80 -> n82  [color=darkseagreen4, key=1, label=servers, style=dashed];
n81 -> n85  [color=darkseagreen4, key=1, label=result, style=dashed];
n94 -> n96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n97 -> n99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n105 -> n107  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n108 -> n110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n116 -> n118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n119 -> n121  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n126 -> n143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n126 -> n147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n126 -> n151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n126 -> n154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n126 -> n128  [color=darkseagreen4, key=1, label=tuples, style=dashed];
n127 -> n133  [color=darkseagreen4, key=1, label=result, style=dashed];
n129 -> n158  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
n131 -> n157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n163 -> n168  [color=darkseagreen4, key=1, label=enqueuedJobIds, style=dashed];
n164 -> n167  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n173 -> n178  [color=darkseagreen4, key=1, label=fetchedJobIds, style=dashed];
n174 -> n177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n182 -> n184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n187 -> n275  [color=darkseagreen4, key=1, label=string, style=dashed];
n187 -> n270  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
n189 -> n191  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n195 -> n197  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n203 -> n212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n203 -> n215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n204 -> n218  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n224 -> n226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n230 -> n232  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n237 -> n243  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n237 -> n239  [color=darkseagreen4, key=1, label=statistics, style=dashed];
n238 -> n258  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n244 -> n254  [color=darkseagreen4, key=1, label=stats, style=dashed];
n262 -> n266  [color=darkseagreen4, key=1, label=endDate, style=dashed];
n269 -> n274  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n269 -> n279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n263 -> n266  [color=darkseagreen4, key=1, label=dates, style=dashed];
n264 -> n268  [color=darkseagreen4, key=1, label=i, style=dashed];
n268 -> n268  [color=darkseagreen4, key=1, label=i, style=dashed];
n282 -> n286  [color=darkseagreen4, key=1, label=endDate, style=dashed];
n289 -> n293  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n289 -> n296  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n283 -> n286  [color=darkseagreen4, key=1, label=dates, style=dashed];
n284 -> n288  [color=darkseagreen4, key=1, label=i, style=dashed];
n288 -> n288  [color=darkseagreen4, key=1, label=i, style=dashed];
n299 -> n302  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
n299 -> n307  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
n299 -> n309  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, System.DateTime>", style=dashed];
n301 -> n318  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n301 -> n321  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n301 -> n303  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
n301 -> n304  [color=darkseagreen4, key=1, label=valuesMap, style=dashed];
n302 -> n304  [color=darkseagreen4, key=1, label=key, style=dashed];
n305 -> n309  [color=darkseagreen4, key=1, label=result, style=dashed];
n305 -> n311  [color=darkseagreen4, key=1, label=result, style=dashed];
n306 -> n309  [color=darkseagreen4, key=1, label=i, style=dashed];
n306 -> n310  [color=darkseagreen4, key=1, label=i, style=dashed];
n310 -> n310  [color=darkseagreen4, key=1, label=i, style=dashed];
n334 -> n337  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n346 -> n348  [color=darkseagreen4, key=1, label=data, style=dashed];
n358 -> n360  [color=darkseagreen4, key=1, label="System.Collections.Generic.ICollection<Hangfire.SqlServer.Entities.SqlJob>", style=dashed];
n359 -> n364  [color=darkseagreen4, key=1, label=result, style=dashed];
n359 -> n365  [color=darkseagreen4, key=1, label=result, style=dashed];
n360 -> n364  [color=darkseagreen4, key=1, label=job, style=dashed];
n373 -> n375  [color=darkseagreen4, key=1, label=jobs, style=dashed];
n374 -> n377  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_13 -> m0_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_116 -> m0_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_1 -> m0_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_133 -> m0_135  [color=darkseagreen4, key=1, label="System.Action<HangFire.Redis.RedisConnection>", style=dashed];
m0_37 -> m0_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_99 -> m0_101  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_68 -> m0_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_109 -> m0_111  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_4 -> m0_9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m0_5 -> m0_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_26 -> m0_28  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_26 -> m0_29  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_26 -> m0_30  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_39 -> m0_43  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m0_40 -> m0_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_50 -> m0_52  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_57 -> m0_59  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
m0_60 -> m0_62  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_60 -> m0_63  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_70 -> m0_75  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m0_71 -> m0_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_81 -> m0_86  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m0_82 -> m0_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_93 -> m0_95  [color=darkseagreen4, key=1, label=hash, style=dashed];
m0_101 -> m0_105  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m0_102 -> m0_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_120 -> m0_122  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_120 -> m0_123  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_21 -> m0_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_55 -> m0_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_47 -> m0_49  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_79 -> m0_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_125 -> m0_128  [color=darkseagreen4, key=1, label="System.Action<IRedisClient, HangFire.Redis.RedisConnection>", style=dashed];
m0_126 -> m0_128  [color=darkseagreen4, key=1, label=redis, style=dashed];
m0_89 -> m0_91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_138 -> m0_1  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m0_138 -> m0_37  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m0_138 -> m0_99  [color=darkseagreen4, key=1, label="HangFire.Redis.Tests.RedisConnectionFacts", style=dashed];
m0_139 -> m0_9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m0_140 -> m0_43  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m0_141 -> m0_75  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m0_142 -> m0_86  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m0_143 -> m0_105  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisConnection", style=dashed];
m1_0 -> m1_3  [color=green, key=1, label="Hangfire.Server.IJobPerformanceProcess", style=dashed];
m1_0 -> m1_5  [color=green, key=1, label="Hangfire.States.IStateMachineFactory", style=dashed];
m1_53 -> m1_56  [color=green, key=1, label=jobData, style=dashed];
m1_58 -> m1_62  [color=green, key=1, label=latency, style=dashed];
m1_60 -> m1_62  [color=green, key=1, label=result, style=dashed];
m1_59 -> m1_61  [color=green, key=1, label=duration, style=dashed];
m1_59 -> m1_62  [color=green, key=1, label=duration, style=dashed];
m1_12 -> m1_15  [color=green, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m1_12 -> m1_21  [color=green, key=1, label="Hangfire.Server.BackgroundProcessContext", style=dashed];
m1_14 -> m1_20  [color=green, key=1, label=fetchedJob, style=dashed];
m1_14 -> m1_22  [color=green, key=1, label=fetchedJob, style=dashed];
m1_14 -> m1_28  [color=green, key=1, label=fetchedJob, style=dashed];
m1_14 -> m1_30  [color=green, key=1, label=fetchedJob, style=dashed];
m1_14 -> m1_33  [color=green, key=1, label=fetchedJob, style=dashed];
m1_14 -> m1_27  [color=darkseagreen4, key=1, label=fetchedJob, style=dashed];
m1_16 -> m1_20  [color=green, key=1, label=stateMachine, style=dashed];
m1_16 -> m1_27  [color=darkseagreen4, key=1, label=stateMachine, style=dashed];
m1_25 -> m1_27  [color=green, key=1, label=state, style=dashed];
m1_18 -> m1_20  [color=green, key=1, label=linkedCts, style=dashed];
m1_78 -> m1_51  [color=darkseagreen4, key=1, label="Hangfire.Server.Worker", style=dashed];
m2_52 -> m2_55  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_42 -> m2_44  [color=darkseagreen4, key=1, label=ILog, style=dashed];
m2_6 -> m2_9  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorageOptions", style=dashed];
m2_57 -> m2_25  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m2_57 -> m2_29  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m2_57 -> m2_44  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m2_57 -> m2_49  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
}
