digraph  {
m0_5 [cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="FailedStateHandler.cs", label="Entry HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17"];
m0_6 [cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="FailedStateHandler.cs", label="context.Transaction.RemoveFromSet(''failed'', context.JobId)", prediction=0, span="19-19"];
m0_7 [cluster="HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="FailedStateHandler.cs", label="Exit HangFire.Redis.States.FailedStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17"];
m0_8 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="FailedStateHandler.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="27-27"];
m0_3 [cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="FailedStateHandler.cs", label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="35-35"];
m0_4 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="FailedStateHandler.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="26-26"];
m0_0 [cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="FailedStateHandler.cs", label="Entry HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9"];
m0_1 [cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="FailedStateHandler.cs", label="context.Transaction.AddToSet(\r\n                ''failed'',\r\n                context.JobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow))", prediction=1, span="11-14"];
m0_2 [cluster="HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="FailedStateHandler.cs", label="Exit HangFire.Redis.States.FailedStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9"];
m1_2 [cluster="HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="IStateChangedFilter.cs", label="Entry HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", span="33-33"];
m1_3 [cluster="HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", file="IStateChangedFilter.cs", label="Exit HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext)", span="33-33"];
m1_0 [cluster="HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="IStateChangedFilter.cs", label="Entry HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", span="27-27"];
m1_1 [cluster="HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", file="IStateChangedFilter.cs", label="Exit HangFire.Common.States.IStateChangedFilter.OnStateApplied(HangFire.Common.States.StateApplyingContext)", span="27-27"];
m2_0 [cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", file="JobState.cs", label="Entry HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="26-26"];
m2_1 [cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", file="JobState.cs", label="return new Dictionary<string, string>();", span="28-28"];
m2_2 [cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", file="JobState.cs", label="Exit HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="26-26"];
m2_3 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobState.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_9 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs", label="Entry Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="78-78"];
m3_10 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs", label="logger.InfoFormat(''Using the following options for Hangfire Server:'')", span="80-80"];
m3_11 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs", label="logger.InfoFormat(''    Worker count: {0}.'', WorkerCount)", span="81-81"];
m3_12 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs", label="logger.InfoFormat(''    Listening queues: {0}.'', String.Join('', '', Queues.Select(x => ''''' + x + ''''')))", span="82-82"];
m3_13 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs", label="logger.InfoFormat(''    Shutdown timeout: {0}.'', ShutdownTimeout)", span="83-83"];
m3_14 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs", label="logger.InfoFormat(''    Schedule polling interval: {0}.'', SchedulePollingInterval)", span="84-84"];
m3_15 [cluster="Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", file="JobStateHandler.cs", label="Exit Hangfire.BackgroundJobServerOptions.WriteToLog(Hangfire.Logging.ILog)", span="78-78"];
m3_7 [cluster="System.Math.Min(int, int)", file="JobStateHandler.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m3_16 [cluster="Hangfire.Logging.ILog.InfoFormat(string, params object[])", file="JobStateHandler.cs", label="Entry Hangfire.Logging.ILog.InfoFormat(string, params object[])", span="217-217"];
m3_8 [cluster="System.TimeSpan.FromSeconds(double)", file="JobStateHandler.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m3_18 [cluster="Unk.Join", file="JobStateHandler.cs", label="Entry Unk.Join", span=""];
m3_0 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs", label="Entry Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="32-32"];
m3_1 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs", label="WorkerCount = Math.Min(Environment.ProcessorCount * 5, MaxDefaultWorkerCount)", span="34-34"];
m3_2 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs", label="ServerName = Environment.MachineName", span="35-35"];
m3_3 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs", label="Queues = new[] { EnqueuedState.DefaultQueue }", span="36-36"];
m3_4 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs", label="ShutdownTimeout = TimeSpan.FromSeconds(15)", span="37-37"];
m3_5 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs", label="SchedulePollingInterval = TimeSpan.FromSeconds(15)", span="38-38"];
m3_6 [cluster="Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", file="JobStateHandler.cs", label="Exit Hangfire.BackgroundJobServerOptions.BackgroundJobServerOptions()", span="32-32"];
m3_19 [cluster="lambda expression", file="JobStateHandler.cs", label="Entry lambda expression", span="82-82"];
m3_20 [cluster="lambda expression", file="JobStateHandler.cs", label="''''' + x + '''''", span="82-82"];
m3_21 [cluster="lambda expression", file="JobStateHandler.cs", label="Exit lambda expression", span="82-82"];
m3_17 [cluster="Unk.Select", file="JobStateHandler.cs", label="Entry Unk.Select", span=""];
m3_22 [file="JobStateHandler.cs", label="Hangfire.BackgroundJobServerOptions", span=""];
m4_5 [cluster="HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="ProcessingStateHandler.cs", label="Entry HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17"];
m4_6 [cluster="HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="ProcessingStateHandler.cs", label="context.Transaction.RemoveFromSet(''processing'', context.JobId)", prediction=2, span="19-19"];
m4_7 [cluster="HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="ProcessingStateHandler.cs", label="Exit HangFire.Redis.States.ProcessingStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="17-17"];
m4_8 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="ProcessingStateHandler.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="27-27"];
m4_3 [cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="ProcessingStateHandler.cs", label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="35-35"];
m4_4 [cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="ProcessingStateHandler.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="26-26"];
m4_0 [cluster="HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="ProcessingStateHandler.cs", label="Entry HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9"];
m4_1 [cluster="HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="ProcessingStateHandler.cs", label="context.Transaction.AddToSet(\r\n                ''processing'',\r\n                context.JobId,\r\n                JobHelper.ToTimestamp(DateTime.UtcNow))", prediction=3, span="11-14"];
m4_2 [cluster="HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="ProcessingStateHandler.cs", label="Exit HangFire.Redis.States.ProcessingStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="9-9"];
m5_14 [cluster="lambda expression", file="ScheduledState.cs", label="Entry lambda expression", span="22-22"];
m5_31 [cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()", file="ScheduledState.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetConnection()", span="59-59"];
m5_5 [cluster="HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", file="ScheduledState.cs", label="Exit HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", span="35-35"];
m5_13 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="ScheduledState.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="19-19"];
m5_32 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="ScheduledState.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", span="48-48"];
m5_33 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", color=green, community=0, file="ScheduledState.cs", label="var storage = CreateStorage()", prediction=4, span="50-50"];
m5_34 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="ScheduledState.cs", label="var components = storage.GetComponents()", span="52-52"];
m5_35 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="ScheduledState.cs", label="var componentTypes = components.Select(x => x.GetType()).ToArray()", span="54-54"];
m5_36 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="ScheduledState.cs", label="Assert.Contains(typeof(ExpirationManager), componentTypes)", span="55-55"];
m5_37 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", file="ScheduledState.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.GetComponents_ReturnsAllNeededComponents()", span="48-48"];
m5_45 [cluster="object.GetType()", file="ScheduledState.cs", label="Entry object.GetType()", span="0-0"];
m5_8 [cluster="lambda expression", file="ScheduledState.cs", label="Exit lambda expression", span="13-13"];
m5_10 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="ScheduledState.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="19-19"];
m5_12 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="ScheduledState.cs", label="Assert.Equal(''options'', exception.ParamName)", span="24-24"];
m5_4 [cluster="HangFire.States.ScheduledState.GetData(HangFire.Common.JobMethod)", file="ScheduledState.cs", label="return new Dictionary<string, string>\r\n                {\r\n                    { ''ScheduledAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''EnqueueAt'', JobHelper.ToStringTimestamp(EnqueueAt) }\r\n                };", span="37-41"];
m5_23 [cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", file="ScheduledState.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", span="58-58"];
m5_46 [cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", file="ScheduledState.cs", label="return new SqlServerStorage(\r\n                ConnectionUtils.GetConnectionString(),\r\n                new SqlServerStorageOptions { PrepareSchemaIfNecessary = false });", span="60-62"];
m5_47 [cluster="HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", file="ScheduledState.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.CreateStorage()", span="58-58"];
m5_40 [cluster="Unk.ToArray", file="ScheduledState.cs", label="Entry Unk.ToArray", span=""];
m5_25 [cluster="Unk.NotNull", file="ScheduledState.cs", label="Entry Unk.NotNull", span=""];
m5_6 [cluster="lambda expression", file="ScheduledState.cs", label="Entry lambda expression", span="13-13"];
m5_24 [cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", file="ScheduledState.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="54-54"];
m5_15 [cluster="lambda expression", file="ScheduledState.cs", label="new SqlServerStorage(''hello'', null)", span="22-22"];
m5_42 [cluster="lambda expression", file="ScheduledState.cs", label="Entry lambda expression", span="54-54"];
m5_44 [cluster="lambda expression", file="ScheduledState.cs", label="Exit lambda expression", span="54-54"];
m5_43 [cluster="lambda expression", file="ScheduledState.cs", label="x.GetType()", span="54-54"];
m5_16 [cluster="HangFire.States.ScheduledState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", file="ScheduledState.cs", label="Entry HangFire.States.ScheduledState.Handler.Unapply(HangFire.Common.States.StateApplyingContext)", span="54-54"];
m5_7 [cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ScheduledState.cs", label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46"];
m5_26 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="ScheduledState.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", span="38-38"];
m5_27 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="ScheduledState.cs", label="var storage = CreateStorage()", span="40-40"];
m5_28 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="ScheduledState.cs", label="var connection = storage.GetConnection()", span="41-41"];
m5_29 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="ScheduledState.cs", label="Assert.NotNull(connection)", span="43-43"];
m5_30 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", file="ScheduledState.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.GetConnection_ReturnsNonNullInstance()", span="38-38"];
m5_41 [cluster="Unk.Contains", file="ScheduledState.cs", label="Entry Unk.Contains", span=""];
m5_39 [cluster="Unk.Select", file="ScheduledState.cs", label="Entry Unk.Select", span=""];
m5_18 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="ScheduledState.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="28-28"];
m5_3 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="ScheduledState.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="10-10"];
m5_38 [cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()", file="ScheduledState.cs", label="Entry HangFire.SqlServer.SqlServerStorage.GetComponents()", span="64-64"];
m5_0 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="ScheduledState.cs", label="Entry HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", span="10-10"];
m5_1 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="ScheduledState.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerStorage(null))", span="12-13"];
m5_2 [cluster="HangFire.SqlServer.Tests.StorageFacts.Ctor_ThrowsAnException_WhenConnectionStringIsNull()", file="ScheduledState.cs", label="Assert.Equal(''connectionString'', exception.ParamName)", span="15-15"];
m5_19 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="ScheduledState.cs", label="var storage = CreateStorage()", span="30-30"];
m5_48 [cluster="HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="ScheduledState.cs", label="Entry HangFire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26"];
m5_49 [cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="ScheduledState.cs", label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24"];
m5_20 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="ScheduledState.cs", label="HangFire.States.ScheduledState", span=""];
m5_21 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="ScheduledState.cs", label="Assert.NotNull(api)", span="33-33"];
m5_22 [cluster="HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="ScheduledState.cs", label="Exit HangFire.SqlServer.Tests.StorageFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="28-28"];
m6_19 [cluster="HangFire.Redis.RedisStorage.GetConnection()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.RedisStorage.GetConnection()", span="73-73"];
m6_20 [cluster="HangFire.Redis.RedisStorage.GetConnection()", file="SqlServerMonitoringApi.cs", label="return new RedisConnection(_pooledManager.GetClient());", span="75-75"];
m6_21 [cluster="HangFire.Redis.RedisStorage.GetConnection()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Redis.RedisStorage.GetConnection()", span="73-73"];
m6_13 [cluster="RedisClientManagerConfig.cstr", file="SqlServerMonitoringApi.cs", label="Entry RedisClientManagerConfig.cstr", span=""];
m6_14 [cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.RedisStorage.GetMonitoringApi()", span="68-68"];
m6_15 [cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="SqlServerMonitoringApi.cs", label="return new RedisMonitoringApi(_pooledManager.GetClient());", span="70-70"];
m6_16 [cluster="HangFire.Redis.RedisStorage.GetMonitoringApi()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Redis.RedisStorage.GetMonitoringApi()", span="68-68"];
m6_18 [cluster="Unk.GetClient", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetClient", span=""];
m6_4 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="41-41"];
m6_5 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage(string, int)", span="41-41"];
m6_23 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.RedisStorage.GetComponents()", span="78-78"];
m6_24 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="SqlServerMonitoringApi.cs", label="yield return new FetchedJobsWatcher(this, new StateMachineFactory(this));", span="80-80"];
m6_25 [cluster="HangFire.Redis.RedisStorage.GetComponents()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Redis.RedisStorage.GetComponents()", span="78-78"];
m6_27 [cluster="HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.States.StateMachineFactory.StateMachineFactory(HangFire.JobStorage)", span="16-16"];
m6_28 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.RedisStorage.GetStateHandlers()", span="83-83"];
m6_29 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="SqlServerMonitoringApi.cs", label="yield return new FailedStateHandler();", span="85-85"];
m6_30 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="SqlServerMonitoringApi.cs", label="yield return new ProcessingStateHandler();", span="86-86"];
m6_31 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="SqlServerMonitoringApi.cs", label="yield return new SucceededStateHandler();", span="87-87"];
m6_32 [cluster="HangFire.Redis.RedisStorage.GetStateHandlers()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Redis.RedisStorage.GetStateHandlers()", span="83-83"];
m6_34 [cluster="HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.ProcessingStateHandler.ProcessingStateHandler()", span="23-23"];
m6_2 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage(string)", span="36-36"];
m6_3 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage(string)", span="36-36"];
m6_12 [cluster="PooledRedisClientManager.cstr", file="SqlServerMonitoringApi.cs", label="Entry PooledRedisClientManager.cstr", span=""];
m6_39 [cluster="string.Format(string, object, object)", file="SqlServerMonitoringApi.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m6_17 [cluster="RedisMonitoringApi.cstr", file="SqlServerMonitoringApi.cs", label="Entry RedisMonitoringApi.cstr", span=""];
m6_33 [cluster="HangFire.Redis.FailedStateHandler.FailedStateHandler()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.FailedStateHandler.FailedStateHandler()", span="23-23"];
m6_36 [cluster="HangFire.Redis.RedisStorage.ToString()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.RedisStorage.ToString()", span="90-90"];
m6_37 [cluster="HangFire.Redis.RedisStorage.ToString()", file="SqlServerMonitoringApi.cs", label="return String.Format(''redis://{0}/{1}'', HostAndPort, Db);", span="92-92"];
m6_38 [cluster="HangFire.Redis.RedisStorage.ToString()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Redis.RedisStorage.ToString()", span="90-90"];
m6_0 [cluster="HangFire.Redis.RedisStorage.RedisStorage()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage()", span="31-31"];
m6_1 [cluster="HangFire.Redis.RedisStorage.RedisStorage()", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage()", span="31-31"];
m6_6 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", span="46-46"];
m6_7 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs", label="HostAndPort = hostAndPort", span="48-48"];
m6_8 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs", label="Db = db", span="49-49"];
m6_9 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs", label="Options = options", span="50-50"];
m6_10 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs", label="_pooledManager = new PooledRedisClientManager(\r\n                new []{ HostAndPort },\r\n                new string[0],\r\n                new RedisClientManagerConfig\r\n                {\r\n                    DefaultDb = Db,\r\n                    MaxWritePoolSize = Options.ConnectionPoolSize\r\n                })", span="52-59"];
m6_11 [cluster="HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", file="SqlServerMonitoringApi.cs", label="Exit HangFire.Redis.RedisStorage.RedisStorage(string, int, HangFire.Redis.RedisStorageOptions)", span="46-46"];
m6_22 [cluster="RedisConnection.cstr", file="SqlServerMonitoringApi.cs", label="Entry RedisConnection.cstr", span=""];
m6_35 [cluster="HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.SucceededStateHandler.SucceededStateHandler()", span="21-21"];
m6_26 [cluster="HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage, HangFire.States.IStateMachineFactory)", file="SqlServerMonitoringApi.cs", label="Entry HangFire.Redis.FetchedJobsWatcher.FetchedJobsWatcher(HangFire.JobStorage, HangFire.States.IStateMachineFactory)", span="33-33"];
m6_40 [file="SqlServerMonitoringApi.cs", label="HangFire.Redis.RedisStorage", span=""];
m7_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="StateApplyingContext.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m7_0 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", file="StateApplyingContext.cs", label="Entry HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", span="23-23"];
m7_7 [cluster="HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", file="StateApplyingContext.cs", label="Exit HangFire.Common.States.StateApplyingContext.StateApplyingContext(HangFire.Common.States.StateContext, HangFire.Storage.IWriteOnlyTransaction, HangFire.Common.States.JobState)", span="23-23"];
m7_9 [file="StateApplyingContext.cs", label="HangFire.Common.States.StateApplyingContext", span=""];
m8_3 [cluster="System.NotSupportedException.NotSupportedException()", file="StateMachine.cs", label="Entry System.NotSupportedException.NotSupportedException()", span="0-0"];
m8_0 [cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", file="StateMachine.cs", label="Entry HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", span="8-8"];
m8_1 [cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", file="StateMachine.cs", label="throw new NotSupportedException();", span="10-10"];
m8_2 [cluster="HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", file="StateMachine.cs", label="Exit HangFire.Tests.CustomTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", span="8-8"];
m9_239 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448"];
m9_240 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs", label="var serializedHistory = Redis.Client.GetAllItemsFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="450-451"];
m9_243 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs", label="i < table.RowCount", span="454-454"];
m9_244 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs", label="Assert.Equal(table.Rows[i][''State''], history[i][''State''])", span="456-456"];
m9_241 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs", label="var history = serializedHistory.Select(JobHelper.FromJson<Dictionary<string, string>>).ToList()", span="452-452"];
m9_242 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs", label="var i = 0", span="454-454"];
m9_245 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs", label="i++", span="454-454"];
m9_246 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryForFollowingStatesWereAdded(Table)", span="448-448"];
m9_135 [cluster="HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", file="StateSteps.cs", label="Entry HangFire.Common.States.JobState.GetData(HangFire.Common.JobMethod)", span="26-26"];
m9_153 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307"];
m9_154 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:processing'', JobSteps.DefaultJobId)", span="309-309"];
m9_155 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs", label="var timestamp = JobHelper.FromTimestamp((long)score)", span="310-310"];
m9_156 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs", label="Assert.True(timestamp > DateTime.UtcNow.AddSeconds(-1))", span="312-312"];
m9_157 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs", label="Assert.True(timestamp < DateTime.UtcNow.AddSeconds(1))", span="313-313"];
m9_158 [cluster="HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenProcessingTimestampIsSetToUtcNow()", span="307-307"];
m9_137 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282"];
m9_138 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StateSteps.cs", label="Assert.Equal(1, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="284-284"];
m9_139 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StateSteps.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:failed'', JobSteps.DefaultJobId))", span="285-285"];
m9_140 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeAddedToTheFailedSet()", span="282-282"];
m9_90 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198"];
m9_91 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StateSteps.cs", label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="201-202"];
m9_92 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StateSteps.cs", label="stateMachine.ChangeState(JobSteps.DefaultJobId, _stateMocks[state].Object, allowedState)", span="203-203"];
m9_93 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToTheStateAllowedTransitions(string, string)", span="198-198"];
m9_152 [cluster="Unk.False", file="StateSteps.cs", label="Entry Unk.False", span=""];
m9_19 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76"];
m9_20 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="StateSteps.cs", label="_state = new EnqueuedState\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="78-81"];
m9_21 [cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueuedState()", span="76-76"];
m9_162 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317"];
m9_163 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="319-319"];
m9_164 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs", label="var score = Redis.Client.GetItemScoreInSortedSet(''hangfire:schedule'', JobSteps.DefaultJobId)", span="320-320"];
m9_165 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs", label="var timestamp = JobHelper.FromTimestamp((long) score)", span="321-321"];
m9_166 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs", label="Assert.True(timestamp >= DateTime.UtcNow.Date.AddDays(1))", span="323-323"];
m9_167 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs", label="Assert.True(timestamp < DateTime.UtcNow.Date.AddDays(2))", span="324-324"];
m9_168 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleContainsTheJobThatWillBeEnqueuedTomorrow()", span="317-317"];
m9_64 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122"];
m9_65 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StateSteps.cs", label="Given(String.Format(''a '{0}' state'', state))", span="124-124"];
m9_66 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StateSteps.cs", label="_filters.Add(\r\n                new TestStateChangingFilter(name, _stateChangingResults, _stateMocks[state].Object))", span="126-127"];
m9_67 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilterThatChangesTheStateToThe(string, string)", span="122-122"];
m9_89 [cluster="Unk.ChangeState", file="StateSteps.cs", label="Entry Unk.ChangeState", span=""];
m9_202 [cluster="Unk.Unapply", file="StateSteps.cs", label="Entry Unk.Unapply", span=""];
m9_102 [cluster="Unk.ForEach", file="StateSteps.cs", label="Entry Unk.ForEach", span=""];
m9_48 [cluster="Unk.Given", file="StateSteps.cs", label="Entry Unk.Given", span=""];
m9_169 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328"];
m9_170 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="StateSteps.cs", label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:schedule'', JobSteps.DefaultJobId))", span="330-330"];
m9_171 [cluster="HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheScheduleDoesNotContainTheJob()", span="328-328"];
m9_136 [cluster="HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", file="StateSteps.cs", label="Entry HangFire.Tests.TableAssert.ContainsFollowingItems(Table, System.Collections.Generic.IDictionary<string, string>)", span="8-8"];
m9_228 [cluster="Unk.ContainsKey", file="StateSteps.cs", label="Entry Unk.ContainsKey", span=""];
m9_212 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401"];
m9_213 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="403-404"];
m9_214 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs", label="Assert.NotNull(entry)", span="405-405"];
m9_215 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="407-407"];
m9_216 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs", label="Assert.NotNull(history)", span="408-408"];
m9_218 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs", label="Assert.True(history.ContainsKey(property.Key))", span="412-412"];
m9_219 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs", label="Assert.Equal(property.Value, history[property.Key])", span="413-413"];
m9_217 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs", label=_stateProperties, span="410-410"];
m9_220 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryRecordShouldContainProperties()", span="401-401"];
m9_121 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249"];
m9_122 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StateSteps.cs", label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="251-256"];
m9_123 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StateSteps.cs", label="keys.ForEach(x =>\r\n            {\r\n                var ttl = Redis.Client.GetTimeToLive(x);\r\n                Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl));\r\n            })", span="258-264"];
m9_124 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldPersistTheJob()", span="249-249"];
m9_120 [cluster="Unk.PopItemFromList", file="StateSteps.cs", label="Entry Unk.PopItemFromList", span=""];
m9_68 [cluster="TestStateChangingFilter.cstr", file="StateSteps.cs", label="Entry TestStateChangingFilter.cstr", span=""];
m9_13 [cluster="HangFire.States.ProcessingState.ProcessingState(string)", file="StateSteps.cs", label="Entry HangFire.States.ProcessingState.ProcessingState(string)", span="28-28"];
m9_29 [cluster="Mock<JobState>.cstr", file="StateSteps.cs", label="Entry Mock<JobState>.cstr", span=""];
m9_221 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="StateSteps.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m9_22 [cluster="HangFire.States.EnqueuedState.EnqueuedState()", file="StateSteps.cs", label="Entry HangFire.States.EnqueuedState.EnqueuedState()", span="25-25"];
m9_94 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207"];
m9_95 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="StateSteps.cs", label="Assert.Equal(name, _state.StateName)", span="209-209"];
m9_96 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateNameIsEqualTo(string)", span="207-207"];
m9_59 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116"];
m9_60 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="StateSteps.cs", label="_filters.Add(new TestStateChangingFilter(name, _stateChangingResults))", span="118-118"];
m9_61 [cluster="HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateChangingFilter(string)", span="116-116"];
m9_10 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58"];
m9_11 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="StateSteps.cs", label="_state = new ProcessingState(''TestServer'')\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="60-63"];
m9_12 [cluster="HangFire.Tests.States.StateSteps.GivenTheProcessingState()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheProcessingState()", span="58-58"];
m9_18 [cluster="System.DateTime.AddDays(double)", file="StateSteps.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m9_195 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386"];
m9_196 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", color=green, community=0, file="StateSteps.cs", label="_oldStateDescriptorMock.Verify(\r\n                x => x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId)))", prediction=5, span="388-389"];
m9_197 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasUnapplied()", span="386-386"];
m9_227 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418"];
m9_222 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="418-418"];
m9_223 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="420-421"];
m9_224 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs", label=_stateProperties, span="423-423"];
m9_225 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs", label="Assert.True(stateEntry.ContainsKey(property.Key))", span="425-425"];
m9_226 [cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs", label="Assert.Equal(property.Value, stateEntry[property.Key])", span="426-426"];
m9_229 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431"];
m9_230 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="Assert.Equal(table.RowCount, _stateChangingResults.Count)", span="433-433"];
m9_232 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="i < table.RowCount", span="435-435"];
m9_233 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="Assert.Equal(table.Rows[i][''Filter''], _stateChangingResults[i])", span="437-437"];
m9_231 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="var i = 0", span="435-435"];
m9_234 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="i++", span="435-435"];
m9_235 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereExecutedInTheFollowingOrder(Table)", span="431-431"];
m9_209 [cluster="lambda expression", file="StateSteps.cs", label="Entry lambda expression", span="396-396"];
m9_34 [cluster="lambda expression", file="StateSteps.cs", label="Entry lambda expression", span="88-88"];
m9_37 [cluster="lambda expression", file="StateSteps.cs", label="Entry lambda expression", span="89-89"];
m9_35 [cluster="lambda expression", file="StateSteps.cs", label="x.StateName", span="88-88"];
m9_36 [cluster="lambda expression", file="StateSteps.cs", label="Exit lambda expression", span="88-88"];
m9_38 [cluster="lambda expression", file="StateSteps.cs", label="x.GetData(It.IsAny<JobMethod>())", span="89-89"];
m9_39 [cluster="lambda expression", file="StateSteps.cs", label="Exit lambda expression", span="89-89"];
m9_50 [cluster="lambda expression", file="StateSteps.cs", label="Entry lambda expression", span="100-100"];
m9_53 [cluster="lambda expression", file="StateSteps.cs", label="Entry lambda expression", span="100-100"];
m9_56 [cluster="lambda expression", file="StateSteps.cs", label="Entry lambda expression", span="101-101"];
m9_51 [cluster="lambda expression", file="StateSteps.cs", label="x[''Name'']", span="100-100"];
m9_52 [cluster="lambda expression", file="StateSteps.cs", label="Exit lambda expression", span="100-100"];
m9_54 [cluster="lambda expression", file="StateSteps.cs", label="x[''Value'']", span="100-100"];
m9_55 [cluster="lambda expression", file="StateSteps.cs", label="Exit lambda expression", span="100-100"];
m9_57 [cluster="lambda expression", file="StateSteps.cs", label="x.GetData(It.IsAny<JobMethod>())", span="101-101"];
m9_58 [cluster="lambda expression", file="StateSteps.cs", label="Exit lambda expression", span="101-101"];
m9_103 [cluster="lambda expression", file="StateSteps.cs", label="Entry lambda expression", span="222-229"];
m9_104 [cluster="lambda expression", file="StateSteps.cs", label="var ttl = Redis.Client.GetTimeToLive(x)", span="224-224"];
m9_105 [cluster="lambda expression", file="StateSteps.cs", label="Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl))", span="225-228"];
m9_106 [cluster="lambda expression", file="StateSteps.cs", label="Exit lambda expression", span="222-229"];
m9_125 [cluster="lambda expression", file="StateSteps.cs", label="Entry lambda expression", span="258-264"];
m9_126 [cluster="lambda expression", file="StateSteps.cs", label="var ttl = Redis.Client.GetTimeToLive(x)", span="260-260"];
m9_127 [cluster="lambda expression", file="StateSteps.cs", label="Assert.True(\r\n                    ttl.Seconds == -1,\r\n                    String.Format(''TTL for the '{0}' key is '{1}''', x, ttl))", span="261-263"];
m9_128 [cluster="lambda expression", file="StateSteps.cs", label="Exit lambda expression", span="258-264"];
m9_199 [cluster="lambda expression", file="StateSteps.cs", label="Entry lambda expression", span="389-389"];
m9_200 [cluster="lambda expression", color=green, community=0, file="StateSteps.cs", label="x.Unapply(It.Is<StateApplyingContext>(y => y.JobId == JobSteps.DefaultJobId))", prediction=6, span="389-389"];
m9_201 [cluster="lambda expression", file="StateSteps.cs", label="Exit lambda expression", span="389-389"];
m9_203 [cluster="lambda expression", file="StateSteps.cs", label="Entry lambda expression", span="389-389"];
m9_204 [cluster="lambda expression", color=green, community=0, file="StateSteps.cs", label="y.JobId == JobSteps.DefaultJobId", prediction=7, span="389-389"];
m9_205 [cluster="lambda expression", file="StateSteps.cs", label="Exit lambda expression", span="389-389"];
m9_211 [cluster="lambda expression", file="StateSteps.cs", label="Exit lambda expression", span="396-396"];
m9_175 [cluster="Unk.SetContainsItem", file="StateSteps.cs", label="Entry Unk.SetContainsItem", span=""];
m9_62 [cluster="HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", file="StateSteps.cs", label="Entry HangFire.Tests.TestStateChangingFilter.TestStateChangingFilter(string, System.Collections.Generic.IList<string>, HangFire.Common.States.JobState)", span="14-14"];
m9_249 [cluster="Unk.ToList", file="StateSteps.cs", label="Entry Unk.ToList", span=""];
m9_108 [cluster="Unk.Format", file="StateSteps.cs", label="Entry Unk.Format", span=""];
m9_149 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301"];
m9_150 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="StateSteps.cs", label="Assert.False(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="303-303"];
m9_151 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetDoesNotContainTheJob()", span="301-301"];
m9_31 [cluster="Unk.Returns", file="StateSteps.cs", label="Entry Unk.Returns", span=""];
m9_33 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="StateSteps.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m9_77 [cluster="HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", file="StateSteps.cs", label="Entry HangFire.States.StateMachine.StateMachine(HangFire.Storage.IStorageConnection, System.Collections.Generic.IEnumerable<HangFire.Common.States.JobStateHandler>, System.Collections.Generic.IEnumerable<object>)", span="41-41"];
m9_80 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", span="181-181"];
m9_81 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="StateSteps.cs", label="When(String.Format(\r\n                ''I change the state of the '{0}' job to the '{1}''',\r\n                JobSteps.DefaultJobId,\r\n                state))", span="183-186"];
m9_82 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string)", span="181-181"];
m9_107 [cluster="Unk.GetTimeToLive", file="StateSteps.cs", label="Entry Unk.GetTimeToLive", span=""];
m9_63 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="StateSteps.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m9_69 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131"];
m9_70 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="StateSteps.cs", label="_filters.Add(new TestStateChangedFilter(name, _stateAppliedResults))", span="133-133"];
m9_71 [cluster="HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateAppliedFilter(string)", span="131-131"];
m9_42 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96"];
m9_43 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs", label="Given(String.Format(''a '{0}' state'', state))", span="98-98"];
m9_44 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs", label="_stateProperties = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="100-100"];
m9_45 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs", label="_stateMocks[state].Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(_stateProperties)", span="101-102"];
m9_46 [cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="96-96"];
m9_97 [cluster="Unk.Equal", file="StateSteps.cs", label="Entry Unk.Equal", span=""];
m9_206 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393"];
m9_208 [cluster="HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheOldStateWasNotUnapplied()", span="393-393"];
m9_193 [cluster="Unk.RemoveStartFromList", file="StateSteps.cs", label="Entry Unk.RemoveStartFromList", span=""];
m9_176 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340"];
m9_177 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StateSteps.cs", label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="342-342"];
m9_178 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StateSteps.cs", label="Assert.Equal(state, job[''State''])", span="343-343"];
m9_179 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", span="340-340"];
m9_110 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233"];
m9_111 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="StateSteps.cs", label="Assert.Equal(\r\n                changeType == ''increase'' ? ''1'' : ''0'',\r\n                Redis.Client.GetValue(String.Format(''hangfire:stats:succeeded'')))", span="235-237"];
m9_112 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldIncreaseTheSucceededCounter(string)", span="233-233"];
m9_72 [cluster="HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", file="StateSteps.cs", label="Entry HangFire.Tests.TestStateChangedFilter.TestStateChangedFilter(string, System.Collections.Generic.IList<string>)", span="14-14"];
m9_236 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442"];
m9_237 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="StateSteps.cs", label="Assert.Equal(0, _stateChangingResults.Count)", span="444-444"];
m9_238 [cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="442-442"];
m9_8 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="StateSteps.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m9_23 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85"];
m9_24 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs", label="var mock = new Mock<JobState>()", span="87-87"];
m9_25 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs", label="mock.Setup(x => x.StateName).Returns(state)", span="88-88"];
m9_27 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs", label="_stateMocks.Add(state, mock)", span="92-92"];
m9_26 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs", label="mock.Setup(x => x.GetData(It.IsAny<JobMethod>()))\r\n                .Returns(new Dictionary<string, string>())", span="89-90"];
m9_28 [cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="85-85"];
m9_194 [cluster="Unk.NotNull", file="StateSteps.cs", label="Entry Unk.NotNull", span=""];
m9_30 [cluster="Unk.Setup", file="StateSteps.cs", label="Entry Unk.Setup", span=""];
m9_14 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67"];
m9_15 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="StateSteps.cs", label="_state = new ScheduledState(DateTime.UtcNow.AddDays(1))\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="69-72"];
m9_16 [cluster="HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheScheduledStateWithTheDateSetToTomorrow()", span="67-67"];
m9_172 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334"];
m9_173 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StateSteps.cs", label="Assert.True(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="336-336"];
m9_174 [cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="334-334"];
m9_17 [cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="StateSteps.cs", label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="27-27"];
m9_146 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295"];
m9_147 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="StateSteps.cs", label="Assert.True(Redis.Client.SortedSetContainsItem(''hangfire:processing'', JobSteps.DefaultJobId))", span="297-297"];
m9_148 [cluster="HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheProcessingSetContainsTheJob()", span="295-295"];
m9_141 [cluster="Unk.GetSortedSetCount", file="StateSteps.cs", label="Entry Unk.GetSortedSetCount", span=""];
m9_198 [cluster="Unk.Verify", file="StateSteps.cs", label="Entry Unk.Verify", span=""];
m9_115 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241"];
m9_116 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StateSteps.cs", label="Assert.Equal(1, Redis.Client.GetListCount(''hangfire:succeeded''))", span="243-243"];
m9_117 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StateSteps.cs", label="Assert.Equal(JobSteps.DefaultJobId, Redis.Client.PopItemFromList(\r\n                ''hangfire:succeeded''))", span="244-245"];
m9_118 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldBeAddedToTheSucceededList()", span="241-241"];
m9_143 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289"];
m9_144 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="StateSteps.cs", label="Assert.Equal(0, Redis.Client.GetSortedSetCount(''hangfire:failed''))", span="291-291"];
m9_145 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheFailedSet()", span="289-289"];
m9_184 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347"];
m9_181 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", span="347-347"];
m9_182 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StateSteps.cs", label="var stateEntry = Redis.Client.GetAllEntriesFromHash(\r\n                String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId))", span="349-350"];
m9_183 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobsStateEntryContainsTheFollowingItems(Table)", file="StateSteps.cs", label="TableAssert.ContainsFollowingItems(table, stateEntry)", span="351-351"];
m9_9 [cluster="HangFire.States.FailedState.FailedState(System.Exception)", file="StateSteps.cs", label="Entry HangFire.States.FailedState.FailedState(System.Exception)", span="28-28"];
m9_142 [cluster="Unk.SortedSetContainsItem", file="StateSteps.cs", label="Entry Unk.SortedSetContainsItem", span=""];
m9_83 [cluster="string.Format(string, object, object)", file="StateSteps.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m9_161 [cluster="System.DateTime.AddSeconds(double)", file="StateSteps.cs", label="Entry System.DateTime.AddSeconds(double)", span="0-0"];
m9_113 [cluster="string.Format(string, params object[])", file="StateSteps.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m9_98 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213"];
m9_99 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StateSteps.cs", label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="215-220"];
m9_100 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StateSteps.cs", label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.True(\r\n                        ttl.TotalSeconds > 0,\r\n                        String.Format(\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl));\r\n                })", span="222-229"];
m9_101 [cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="213-213"];
m9_49 [cluster="Unk.ToDictionary", file="StateSteps.cs", label="Entry Unk.ToDictionary", span=""];
m9_180 [cluster="Unk.GetAllEntriesFromHash", file="StateSteps.cs", label="Entry Unk.GetAllEntriesFromHash", span=""];
m9_4 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48"];
m9_5 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StateSteps.cs", label="_failedException = new InvalidOperationException(''Hello'')", span="50-50"];
m9_6 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StateSteps.cs", label="_state = new FailedState(_failedException)\r\n            {\r\n                Reason = ''SomeReason''\r\n            }", span="51-54"];
m9_7 [cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="48-48"];
m9_160 [cluster="HangFire.Common.JobHelper.FromTimestamp(long)", file="StateSteps.cs", label="Entry HangFire.Common.JobHelper.FromTimestamp(long)", span="41-41"];
m9_47 [cluster="string.Format(string, object)", file="StateSteps.cs", label="Entry string.Format(string, object)", span="0-0"];
m9_192 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355"];
m9_186 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", span="355-355"];
m9_187 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs", label="var entry = Redis.Client.RemoveStartFromList(\r\n                String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId))", span="357-358"];
m9_191 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs", label="TableAssert.ContainsFollowingItems(table, history)", span="364-364"];
m9_188 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs", label="Assert.NotNull(entry)", span="359-359"];
m9_189 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs", label="var history = JobHelper.FromJson<Dictionary<string, string>>(entry)", span="361-361"];
m9_190 [cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs", label="Assert.NotNull(history)", span="362-362"];
m9_40 [cluster="Unk.>", file="StateSteps.cs", label="Entry Unk.>", span=""];
m9_159 [cluster="Unk.GetItemScoreInSortedSet", file="StateSteps.cs", label="Entry Unk.GetItemScoreInSortedSet", span=""];
m9_78 [cluster="HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", file="StateSteps.cs", label="Entry HangFire.Redis.RedisConnection.RedisConnection(HangFire.JobStorage, IRedisClient)", span="15-15"];
m9_119 [cluster="Unk.GetListCount", file="StateSteps.cs", label="Entry Unk.GetListCount", span=""];
m9_41 [cluster="Unk.GetData", file="StateSteps.cs", label="Entry Unk.GetData", span=""];
m9_3 [cluster="HangFire.States.SucceededState.SucceededState()", file="StateSteps.cs", label="Entry HangFire.States.SucceededState.SucceededState()", span="23-23"];
m9_0 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42"];
m9_1 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StateSteps.cs", label="_state = new SucceededState { Reason = ''SomeReason'' }", span="44-44"];
m9_2 [cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="42-42"];
m9_32 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="StateSteps.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m9_84 [cluster="Unk.When", file="StateSteps.cs", label="Entry Unk.When", span=""];
m9_129 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268"];
m9_130 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="StateSteps.cs", label="Assert.Equal(0, Redis.Client.GetListCount(''hangfire:succeeded''))", span="270-270"];
m9_131 [cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="268-268"];
m9_132 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274"];
m9_133 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="StateSteps.cs", label="TableAssert.ContainsFollowingItems(\r\n                table,\r\n                _state.GetData(_defaultData))", span="276-278"];
m9_134 [cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="274-274"];
m9_247 [cluster="Unk.GetAllItemsFromList", file="StateSteps.cs", label="Entry Unk.GetAllItemsFromList", span=""];
m9_85 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190"];
m9_86 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StateSteps.cs", label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="192-193"];
m9_87 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StateSteps.cs", label="stateMachine.ChangeState(jobId, _stateMocks[state].Object)", span="194-194"];
m9_88 [cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="190-190"];
m9_248 [cluster="Unk.Select", file="StateSteps.cs", label="Entry Unk.Select", span=""];
m9_79 [cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", file="StateSteps.cs", label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.Common.States.JobState, params string[])", span="113-113"];
m9_73 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173"];
m9_74 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StateSteps.cs", label="var stateMachine = new StateMachine(\r\n                new RedisConnection(Redis.Storage, Redis.Client), _handlers, _filters)", span="175-176"];
m9_75 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StateSteps.cs", label="stateMachine.ChangeState(JobSteps.DefaultJobId, _state)", span="177-177"];
m9_76 [cluster="HangFire.Tests.States.StateSteps.WhenIApplyTheState()", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.WhenIApplyTheState()", span="173-173"];
m9_114 [cluster="Unk.GetValue", file="StateSteps.cs", label="Entry Unk.GetValue", span=""];
m9_109 [cluster="Unk.True", file="StateSteps.cs", label="Entry Unk.True", span=""];
m9_185 [cluster="Unk.ContainsFollowingItems", file="StateSteps.cs", label="Entry Unk.ContainsFollowingItems", span=""];
m9_250 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="Entry HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461"];
m9_251 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="Assert.Equal(table.RowCount, _stateAppliedResults.Count)", span="463-463"];
m9_253 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="i < table.RowCount", span="465-465"];
m9_254 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="Assert.Equal(table.Rows[i][''Method''], _stateAppliedResults[i])", span="467-467"];
m9_252 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="var i = 0", span="465-465"];
m9_255 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="i++", span="465-465"];
m9_256 [cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs", label="Exit HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", span="461-461"];
m9_257 [file="StateSteps.cs", label="HangFire.Tests.States.StateSteps", span=""];
m10_25 [cluster="Unk.OnScenarioStart", file="SucceededState.cs", label="Entry Unk.OnScenarioStart", span=""];
m10_29 [cluster="Unk.CollectScenarioErrors", file="SucceededState.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m10_21 [cluster="Unk.OnScenarioEnd", file="SucceededState.cs", label="Entry Unk.OnScenarioEnd", span=""];
m10_55 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
m10_56 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns null when it tries to dequeue a job from an empty queue'', ((string[])(null)))", span="121-121"];
m10_57 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs", label="this.ScenarioSetup(scenarioInfo)", span="123-123"];
m10_58 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs", label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="125-125"];
m10_59 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="127-127"];
m10_60 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="129-129"];
m10_61 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs", label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="131-131"];
m10_62 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs", label="this.ScenarioCleanup()", span="133-133"];
m10_63 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsNullWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="119-119"];
m10_0 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m10_1 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SucceededState.cs", label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32"];
m10_2 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SucceededState.cs", label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34"];
m10_3 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SucceededState.cs", label="testRunner.OnFeatureStart(featureInfo)", span="35-35"];
m10_4 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30"];
m10_76 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
m10_77 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher listens only specified queue'', ((string[])(null)))", span="169-169"];
m10_78 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs", label="this.ScenarioSetup(scenarioInfo)", span="171-171"];
m10_79 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs", label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="173-173"];
m10_80 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs", label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="175-175"];
m10_81 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="177-177"];
m10_82 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs", label="testRunner.Then(''the fetcher does not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="179-179"];
m10_83 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs", label="this.ScenarioCleanup()", span="181-181"];
m10_84 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherListensOnlySpecifiedQueue()", span="167-167"];
m10_41 [cluster="Unk.And", file="SucceededState.cs", label="Entry Unk.And", span=""];
m10_54 [cluster="Unk.But", file="SucceededState.cs", label="Entry Unk.But", span=""];
m10_5 [cluster="Unk.GetTestRunner", file="SucceededState.cs", label="Entry Unk.GetTestRunner", span=""];
m10_9 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39"];
m10_10 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", color=green, community=0, file="SucceededState.cs", label="testRunner.OnFeatureEnd()", prediction=8, span="41-41"];
m10_12 [cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39"];
m10_22 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m10_23 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SucceededState.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63"];
m10_24 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61"];
m10_85 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
m10_86 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher sets the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="190-190"];
m10_87 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs", label="this.ScenarioSetup(scenarioInfo)", span="192-192"];
m10_88 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="194-194"];
m10_89 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="196-196"];
m10_90 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="198-198"];
m10_91 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs", label="testRunner.Then(''the job has the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="200-200"];
m10_92 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs", label="this.ScenarioCleanup()", span="202-202"];
m10_93 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherSetsTheFetchedFlagWhenItDequeuesAJob()", span="188-188"];
m10_13 [cluster="Unk.OnFeatureEnd", file="SucceededState.cs", label="Entry Unk.OnFeatureEnd", span=""];
m10_7 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="SucceededState.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m10_64 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
m10_65 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher dequeues jobs in the FIFO order'', ((string[])(null)))", span="142-142"];
m10_66 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="this.ScenarioSetup(scenarioInfo)", span="144-144"];
m10_67 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="146-146"];
m10_68 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="148-148"];
m10_69 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="150-150"];
m10_70 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="152-152"];
m10_71 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="testRunner.Then(''the fetcher returns the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="154-154"];
m10_72 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156"];
m10_73 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="testRunner.Then(''the fetcher returns the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158"];
m10_74 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="this.ScenarioCleanup()", span="160-160"];
m10_75 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherDequeuesJobsInTheFIFOOrder()", span="140-140"];
m10_42 [cluster="Unk.When", file="SucceededState.cs", label="Entry Unk.When", span=""];
m10_14 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46"];
m10_15 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", color=green, community=0, file="SucceededState.cs", label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", prediction=9, span="48-49"];
m10_16 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="SucceededState.cs", label="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(null)", span="51-51"];
m10_17 [cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46"];
m10_39 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="SucceededState.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m10_43 [cluster="Unk.Then", file="SucceededState.cs", label="Entry Unk.Then", span=""];
m10_40 [cluster="Unk.Given", file="SucceededState.cs", label="Entry Unk.Given", span=""];
m10_6 [cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="SucceededState.cs", label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span=""];
m10_26 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m10_27 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="SucceededState.cs", label="testRunner.CollectScenarioErrors()", span="68-68"];
m10_28 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66"];
m10_44 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
m10_45 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher removes the dequeued job from the queue and adds it to the dequeued list'', ((string[])(null)))", span="98-98"];
m10_46 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs", label="this.ScenarioSetup(scenarioInfo)", span="100-100"];
m10_47 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102"];
m10_48 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104"];
m10_49 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106"];
m10_50 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs", label="testRunner.Then(''the queue does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108"];
m10_51 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs", label="testRunner.But(''the dequeued jobs list contains it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="110-110"];
m10_52 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs", label="this.ScenarioCleanup()", span="112-112"];
m10_53 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96"];
m10_8 [cluster="Unk.OnFeatureStart", file="SucceededState.cs", label="Entry Unk.OnFeatureStart", span=""];
m10_30 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m10_31 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns the job payload when it dequeues a job'', ((string[])(null)))", span="77-77"];
m10_32 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs", label="this.ScenarioSetup(scenarioInfo)", span="79-79"];
m10_33 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs", label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81"];
m10_34 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs", label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83"];
m10_35 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs", label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85"];
m10_36 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs", label="testRunner.Then(''the fetcher returns the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87"];
m10_37 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs", label="this.ScenarioCleanup()", span="89-89"];
m10_38 [cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75"];
m10_18 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="SucceededState.cs", label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
m10_19 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="SucceededState.cs", label="testRunner.OnScenarioEnd()", span="58-58"];
m10_20 [cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="SucceededState.cs", label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56"];
m10_94 [file="SucceededState.cs", label="HangFire.Tests.Server.JobFetcherFeature", span=""];
m11_9 [cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="SucceededStateHandler.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="31-31"];
m11_5 [cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="SucceededStateHandler.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="32-32"];
m11_6 [cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SucceededStateHandler.cs", label="Entry HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="13-13"];
m11_7 [cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="SucceededStateHandler.cs", label="context.Transaction.RemoveFromList(''succeeded'', context.JobId)", prediction=10, span="15-15"];
m11_8 [cluster="HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", file="SucceededStateHandler.cs", label="Exit HangFire.Redis.States.SucceededStateHandler.Unapply(HangFire.Common.States.StateApplyingContext)", span="13-13"];
m11_0 [cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="SucceededStateHandler.cs", label="Entry HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="7-7"];
m11_1 [cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", color=green, community=0, file="SucceededStateHandler.cs", label="context.Transaction.InsertToList(''succeeded'', context.JobId)", prediction=11, span="9-9"];
m11_3 [cluster="HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", file="SucceededStateHandler.cs", label="Exit HangFire.Redis.States.SucceededStateHandler.Apply(HangFire.Common.States.StateApplyingContext)", span="7-7"];
m11_4 [cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="SucceededStateHandler.cs", label="Entry HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="30-30"];
m12_34 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="SucceededStateHandlerFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m12_25 [cluster="System.Collections.Generic.List<T>.List()", file="SucceededStateHandlerFacts.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m12_27 [cluster="HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", file="SucceededStateHandlerFacts.cs", label="Entry HangFire.Storage.IStorageConnection.GetAllItemsFromSet(string)", span="55-55"];
m12_0 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="Entry HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", span="9-9"];
m12_1 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="RecurringJobs = new List<RecurringJobDto>()", span="11-11"];
m12_2 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="var connection = JobStorage.Current.GetConnection()", span="13-13"];
m12_3 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="var ids = connection.GetAllItemsFromSet(''recurring-jobs'')", span="15-15"];
m12_5 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="var hash = connection.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', id))", span="19-19"];
m12_4 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label=ids, span="17-17"];
m12_7 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="RecurringJobs.Add(new RecurringJobDto { Id = id, Removed = true })", span="23-23"];
m12_8 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="var dto = new RecurringJobDto { Id = id }", span="27-27"];
m12_6 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="hash == null", span="21-21"];
m12_9 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="dto.Cron = hash[''Cron'']", span="28-28"];
m12_10 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(hash[''Job''])", span="32-32"];
m12_15 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="dto.NextExecution = JobHelper.DeserializeDateTime(hash[''NextExecution''])", span="42-42"];
m12_16 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="hash.ContainsKey(''LastJobId'')", span="45-45"];
m12_17 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="dto.LastJobId = hash[''LastJobId'']", span="47-47"];
m12_21 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="hash.ContainsKey(''LastExecution'')", span="56-56"];
m12_11 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="dto.Job = invocationData.Deserialize()", span="33-33"];
m12_13 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="dto.LoadException = ex", span="37-37"];
m12_20 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="dto.LastJobState = stateData.Name", span="52-52"];
m12_23 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="RecurringJobs.Add(dto)", span="61-61"];
m12_12 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label=JobLoadException, span="35-35"];
m12_19 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="stateData != null", span="50-50"];
m12_24 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", file="SucceededStateHandlerFacts.cs", label="Exit HangFire.Web.Pages.RecurringJobsPage.RecurringJobsPage()", span="9-9"];
m12_31 [cluster="System.Collections.Generic.List<T>.Add(T)", file="SucceededStateHandlerFacts.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m12_32 [cluster="HangFire.Common.JobHelper.FromJson<T>(string)", file="SucceededStateHandlerFacts.cs", label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="31-31"];
m12_33 [cluster="HangFire.Storage.InvocationData.Deserialize()", file="SucceededStateHandlerFacts.cs", label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38"];
m12_35 [cluster="HangFire.Common.JobHelper.DeserializeDateTime(string)", file="SucceededStateHandlerFacts.cs", label="Entry HangFire.Common.JobHelper.DeserializeDateTime(string)", span="56-56"];
m12_29 [cluster="HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", file="SucceededStateHandlerFacts.cs", label="Entry HangFire.Storage.IStorageConnection.GetAllEntriesFromHash(string)", span="64-64"];
m12_36 [cluster="HangFire.Storage.IStorageConnection.GetStateData(string)", file="SucceededStateHandlerFacts.cs", label="Entry HangFire.Storage.IStorageConnection.GetStateData(string)", span="45-45"];
m12_30 [cluster="HangFire.Web.Pages.RecurringJobsPage.RecurringJobDto.RecurringJobDto()", file="SucceededStateHandlerFacts.cs", label="Entry HangFire.Web.Pages.RecurringJobsPage.RecurringJobDto.RecurringJobDto()", span="68-68"];
m12_28 [cluster="string.Format(string, object)", file="SucceededStateHandlerFacts.cs", label="Entry string.Format(string, object)", span="0-0"];
m12_26 [cluster="HangFire.JobStorage.GetConnection()", file="SucceededStateHandlerFacts.cs", label="Entry HangFire.JobStorage.GetConnection()", span="56-56"];
m12_37 [file="SucceededStateHandlerFacts.cs", label="HangFire.Web.Pages.RecurringJobsPage", span=""];
m3_9 -> m3_11  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_9 -> m3_12  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_9 -> m3_13  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_9 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.Logging.ILog", style=dashed];
m3_12 -> m3_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_22 -> m3_11  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_22 -> m3_12  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_22 -> m3_13  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m3_22 -> m3_14  [color=darkseagreen4, key=1, label="Hangfire.BackgroundJobServerOptions", style=dashed];
m5_35 -> m5_42  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_1 -> m5_6  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_20 -> m5_4  [color=darkseagreen4, key=1, label="HangFire.States.ScheduledState", style=dashed];
m6_40 -> m6_15  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m6_40 -> m6_20  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m6_40 -> m6_24  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m6_40 -> m6_37  [color=darkseagreen4, key=1, label="HangFire.Redis.RedisStorage", style=dashed];
m9_239 -> m9_243  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_239 -> m9_244  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_241 -> m9_244  [color=darkseagreen4, key=1, label=history, style=dashed];
m9_242 -> m9_244  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_242 -> m9_245  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_245 -> m9_245  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_155 -> m9_157  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m9_90 -> m9_92  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_165 -> m9_167  [color=darkseagreen4, key=1, label=timestamp, style=dashed];
m9_64 -> m9_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_215 -> m9_218  [color=darkseagreen4, key=1, label=history, style=dashed];
m9_215 -> m9_219  [color=darkseagreen4, key=1, label=history, style=dashed];
m9_218 -> m9_218  [color=darkseagreen4, key=1, label=property, style=dashed];
m9_219 -> m9_219  [color=darkseagreen4, key=1, label=property, style=dashed];
m9_123 -> m9_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_196 -> m9_199  [color=green, key=1, label="lambda expression", style=dashed];
m9_223 -> m9_225  [color=darkseagreen4, key=1, label=stateEntry, style=dashed];
m9_223 -> m9_226  [color=darkseagreen4, key=1, label=stateEntry, style=dashed];
m9_225 -> m9_225  [color=darkseagreen4, key=1, label=property, style=dashed];
m9_226 -> m9_226  [color=darkseagreen4, key=1, label=property, style=dashed];
m9_229 -> m9_232  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_229 -> m9_233  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_231 -> m9_233  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_231 -> m9_234  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_234 -> m9_234  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_103 -> m9_105  [color=darkseagreen4, key=1, label="?", style=dashed];
m9_125 -> m9_127  [color=darkseagreen4, key=1, label="?", style=dashed];
m9_200 -> m9_203  [color=green, key=1, label="lambda expression", style=dashed];
m9_42 -> m9_45  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_44 -> m9_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_44 -> m9_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_45 -> m9_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_176 -> m9_178  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_23 -> m9_25  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_23 -> m9_27  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_24 -> m9_26  [color=darkseagreen4, key=1, label=mock, style=dashed];
m9_24 -> m9_27  [color=darkseagreen4, key=1, label=mock, style=dashed];
m9_25 -> m9_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_26 -> m9_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_181 -> m9_183  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_100 -> m9_103  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_186 -> m9_191  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_189 -> m9_191  [color=darkseagreen4, key=1, label=history, style=dashed];
m9_85 -> m9_87  [color=darkseagreen4, key=1, label=string, style=dashed];
m9_250 -> m9_253  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_250 -> m9_254  [color=darkseagreen4, key=1, label=Table, style=dashed];
m9_252 -> m9_254  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_252 -> m9_255  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_255 -> m9_255  [color=darkseagreen4, key=1, label=i, style=dashed];
m9_257 -> m9_27  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_45  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_60  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_66  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_70  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_75  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_87  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_92  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_95  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_133  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_196  [color=green, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_217  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_224  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_230  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_233  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_237  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_251  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m9_257 -> m9_254  [color=darkseagreen4, key=1, label="HangFire.Tests.States.StateSteps", style=dashed];
m10_94 -> m10_32  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m10_94 -> m10_37  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m10_94 -> m10_46  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m10_94 -> m10_52  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m10_94 -> m10_57  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m10_94 -> m10_62  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m10_94 -> m10_66  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m10_94 -> m10_74  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m10_94 -> m10_78  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m10_94 -> m10_83  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m10_94 -> m10_87  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m10_94 -> m10_92  [color=darkseagreen4, key=1, label="HangFire.Tests.Server.JobFetcherFeature", style=dashed];
m12_5 -> m12_16  [color=darkseagreen4, key=1, label=hash, style=dashed];
m12_5 -> m12_21  [color=darkseagreen4, key=1, label=hash, style=dashed];
m12_8 -> m12_23  [color=darkseagreen4, key=1, label=dto, style=dashed];
m12_37 -> m12_23  [color=darkseagreen4, key=1, label="HangFire.Web.Pages.RecurringJobsPage", style=dashed];
}
