digraph  {
m0_4 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.RabbitMqChannel(System.Collections.Generic.IEnumerable<string>)", span="10-10", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.RabbitMqChannel(System.Collections.Generic.IEnumerable<string>)", file="CleanRabbitMqQueueAttribute.cs"];
m0_5 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.CreateQueue()", span="18-18", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.CreateQueue()", file="CleanRabbitMqQueueAttribute.cs"];
m0_6 [label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", span="20-20", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="CleanRabbitMqQueueAttribute.cs"];
m0_7 [label="Monitor.Enter(GlobalLock)", span="22-22", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs"];
m0_8 [label=_queues, span="23-23", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs"];
m0_10 [label="_rabbitMq.Channel.QueuePurge(queue)", span="26-26", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs"];
m0_9 [label="_rabbitMq.Channel.QueueDeclare(queue, true, false, false, null)", span="25-25", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs"];
m0_11 [label="_rabbitMq.Dispose()", span="28-28", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs"];
m0_12 [label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", span="20-20", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="CleanRabbitMqQueueAttribute.cs"];
m0_17 [label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", span="31-31", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", file="CleanRabbitMqQueueAttribute.cs"];
m0_18 [label="Monitor.Exit(GlobalLock)", span="33-33", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs"];
m0_19 [label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", span="31-31", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", file="CleanRabbitMqQueueAttribute.cs"];
m0_20 [label="Entry System.Threading.Monitor.Exit(object)", span="0-0", cluster="System.Threading.Monitor.Exit(object)", file="CleanRabbitMqQueueAttribute.cs"];
m0_15 [label="Entry Unk.QueuePurge", span="", cluster="Unk.QueuePurge", file="CleanRabbitMqQueueAttribute.cs"];
m0_14 [label="Entry Unk.QueueDeclare", span="", cluster="Unk.QueueDeclare", file="CleanRabbitMqQueueAttribute.cs"];
m0_21 [label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", span="36-36", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="CleanRabbitMqQueueAttribute.cs"];
m0_22 [label="return new RabbitMqChannel(queue).CreateQueue();", span="38-38", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs"];
m0_23 [label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", span="36-36", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="CleanRabbitMqQueueAttribute.cs"];
m0_16 [label="Entry HangFire.RabbitMQ.RabbitMqJobQueue.Dispose()", span="82-82", cluster="HangFire.RabbitMQ.RabbitMqJobQueue.Dispose()", file="CleanRabbitMqQueueAttribute.cs"];
m0_0 [label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", span="14-14", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="CleanRabbitMqQueueAttribute.cs"];
m0_1 [label="_queues = queues", span="16-16", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs"];
m0_2 [label="_rabbitMq = new RabbitMqChannel(_queues).CreateQueue()", span="17-17", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs"];
m0_3 [label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", span="14-14", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="CleanRabbitMqQueueAttribute.cs"];
m0_13 [label="Entry System.Threading.Monitor.Enter(object)", span="0-0", cluster="System.Threading.Monitor.Enter(object)", file="CleanRabbitMqQueueAttribute.cs"];
m0_24 [label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", span="", file="CleanRabbitMqQueueAttribute.cs"];
m3_12 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="RabbitMqJobQueue.cs"];
m3_13 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="RabbitMqJobQueue.cs"];
m3_0 [label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="30-30", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RabbitMqJobQueue.cs"];
m3_1 [label="TransactionIsolationLevel = null", span="32-32", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs"];
m3_2 [label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="33-33", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs"];
m3_3 [label="UseInvisibilityTimeout = false", span="34-34", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs"];
m3_4 [label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", span="35-35", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs"];
m3_5 [label="JobExpirationCheckInterval = TimeSpan.FromMinutes(30)", span="36-36", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs"];
m3_6 [label="CountersAggregateInterval = TimeSpan.FromMinutes(5)", span="37-37", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs"];
m3_7 [label="PrepareSchemaIfNecessary = true", span="38-38", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs"];
m3_8 [label="DashboardJobListLimit = 10000", span="39-39", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs"];
m3_9 [label="_schemaName = Constants.DefaultSchema", span="40-40", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs"];
m3_10 [label="TransactionTimeout = TimeSpan.FromMinutes(1)", span="41-41", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs"];
m3_11 [label="Exit Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="30-30", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RabbitMqJobQueue.cs"];
m3_14 [label="Hangfire.SqlServer.SqlServerStorageOptions", span="", file="RabbitMqJobQueue.cs"];
m4_31 [label="Entry HangFire.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="40-40", cluster="HangFire.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="RabbitMqJobQueueFacts.cs"];
m4_56 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", span="92-92", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", file="RabbitMqJobQueueFacts.cs"];
m4_57 [label="RabbitMqUtils.EnqueueJobId(''my-queue'', ''job-id9'')", span="95-95", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_58 [label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", span="97-97", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_59 [label="var fetchedJob = queue.Dequeue(new[] {''my-queue''}, _token)", span="100-100", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_60 [label="Assert.NotNull(fetchedJob)", span="103-103", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_61 [label="var exception = Assert.Throws<TimeoutException>(\r\n                    () => RabbitMqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1)))", span="105-106", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_62 [label="Assert.Equal(exception.Message, ''my-queue'')", span="108-108", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_63 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", span="92-92", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", file="RabbitMqJobQueueFacts.cs"];
m4_32 [label="Entry HangFire.Storage.IFetchedJob.RemoveFromQueue()", span="24-24", cluster="HangFire.Storage.IFetchedJob.RemoveFromQueue()", file="RabbitMqJobQueueFacts.cs"];
m4_69 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqUtils.DequeueJobId(string, System.TimeSpan)", span="22-22", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqUtils.DequeueJobId(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs"];
m4_9 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RabbitMqJobQueueFacts.cs"];
m4_3 [label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken()", file="RabbitMqJobQueueFacts.cs"];
m4_41 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="68-68", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="RabbitMqJobQueueFacts.cs"];
m4_42 [label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", span="70-70", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_43 [label="var token = new CancellationToken(true)", span="72-72", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_44 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(new[] {''my-queue''}, token))", span="74-75", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_45 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="68-68", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="RabbitMqJobQueueFacts.cs"];
m4_14 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", span="26-26", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="RabbitMqJobQueueFacts.cs"];
m4_15 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RabbitMqJobQueue(new[]{''my-queue''}, null))", span="28-29", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_16 [label="Assert.Equal(''factory'', exception.ParamName)", span="31-31", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_17 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", span="26-26", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="RabbitMqJobQueueFacts.cs"];
m4_33 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", span="54-54", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", file="RabbitMqJobQueueFacts.cs"];
m4_34 [label="RabbitMqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="56-56", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_35 [label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", span="58-58", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_36 [label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="60-60", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_37 [label="fetchedJob.RemoveFromQueue()", span="61-61", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_38 [label="Assert.Equal(''job-id'', fetchedJob.JobId)", span="63-63", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_39 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", span="54-54", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", file="RabbitMqJobQueueFacts.cs"];
m4_21 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", span="35-35", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", file="RabbitMqJobQueueFacts.cs"];
m4_22 [label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", span="38-38", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_23 [label="queue.Enqueue(''my-queue'', ''job-id'')", span="41-41", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_24 [label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="44-44", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_25 [label="fetchedJob.RemoveFromQueue()", span="45-45", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_26 [label="var body = fetchedJob.JobId", span="47-47", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_27 [label="Assert.Equal(''job-id'', body)", span="49-49", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_28 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", span="35-35", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", file="RabbitMqJobQueueFacts.cs"];
m4_8 [label="Entry Unk.>", span="", cluster="Unk.>", file="RabbitMqJobQueueFacts.cs"];
m4_68 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="RabbitMqJobQueueFacts.cs"];
m4_90 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", span="152-152", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", file="RabbitMqJobQueueFacts.cs"];
m4_91 [label="RabbitMqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="155-155", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_92 [label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", span="157-157", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_93 [label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="160-160", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_95 [label="var newFetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", span="164-164", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_94 [label="fetchedJob.Dispose()", span="161-161", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_96 [label="Assert.Equal(''job-id'', newFetchedJob.JobId)", span="166-166", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_97 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", span="152-152", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", file="RabbitMqJobQueueFacts.cs"];
m4_30 [label="Entry HangFire.RabbitMQ.RabbitMqJobQueue.Enqueue(string, string)", span="73-73", cluster="HangFire.RabbitMQ.RabbitMqJobQueue.Enqueue(string, string)", file="RabbitMqJobQueueFacts.cs"];
m4_64 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="RabbitMqJobQueueFacts.cs"];
m4_50 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="80-80", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="RabbitMqJobQueueFacts.cs"];
m4_51 [label="RabbitMqUtils.EnqueueJobId(''queue-2'', ''job-id'')", span="82-82", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_52 [label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''queue-1'', ''queue-2'')", span="83-83", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_53 [label="var fetchedJob = queue.Dequeue(new[] {''queue-1'', ''queue-2''}, _token)", span="85-85", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_54 [label="Assert.Equal(''job-id'', fetchedJob.JobId)", span="87-87", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_55 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="80-80", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="RabbitMqJobQueueFacts.cs"];
m4_0 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RabbitMqJobQueueFacts()", span="11-11", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RabbitMqJobQueueFacts()", file="RabbitMqJobQueueFacts.cs"];
m4_1 [label="_token = new CancellationToken()", span="13-13", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RabbitMqJobQueueFacts()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_2 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RabbitMqJobQueueFacts()", span="11-11", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RabbitMqJobQueueFacts()", file="RabbitMqJobQueueFacts.cs"];
m4_70 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", span="113-113", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", file="RabbitMqJobQueueFacts.cs"];
m4_71 [label="RabbitMqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="116-116", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_72 [label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", span="117-117", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_73 [label="var fetchedJob = queue.Dequeue(new[] {''my-queue''}, _token)", span="120-120", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_74 [label="fetchedJob.RemoveFromQueue()", span="122-122", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_75 [label="var exception = Assert.Throws<TimeoutException>(\r\n                    () => RabbitMqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1)))", span="126-127", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_76 [label="Assert.Equal(exception.Message, ''my-queue'')", span="129-129", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_77 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", span="113-113", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", file="RabbitMqJobQueueFacts.cs"];
m4_40 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqUtils.EnqueueJobId(string, string)", span="9-9", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqUtils.EnqueueJobId(string, string)", file="RabbitMqJobQueueFacts.cs"];
m4_78 [label="Entry lambda expression", span="127-127", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m4_10 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m4_11 [label="new RabbitMqJobQueue(null, null)", span="20-20", cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_12 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m4_18 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m4_19 [label="new RabbitMqJobQueue(new[]{''my-queue''}, null)", span="29-29", cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_20 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m4_48 [label="queue.Dequeue(new[] {''my-queue''}, token)", span="75-75", cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_47 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m4_49 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m4_65 [label="Entry lambda expression", span="106-106", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m4_66 [label="RabbitMqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1))", span="106-106", cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_67 [label="Exit lambda expression", span="106-106", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m4_79 [label="RabbitMqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1))", span="127-127", cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_80 [label="Exit lambda expression", span="127-127", cluster="lambda expression", file="RabbitMqJobQueueFacts.cs"];
m4_29 [label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", span="36-36", cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="RabbitMqJobQueueFacts.cs"];
m4_46 [label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken(bool)", file="RabbitMqJobQueueFacts.cs"];
m4_13 [label="Entry HangFire.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", span="22-22", cluster="HangFire.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="RabbitMqJobQueueFacts.cs"];
m4_81 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="134-134", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="RabbitMqJobQueueFacts.cs"];
m4_82 [label="RabbitMqUtils.EnqueueJobId(''my-queue'', ''job-id'')", span="137-137", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_83 [label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", span="139-139", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_84 [label="var fetchedJob = queue.Dequeue(new[] {''my-queue''}, _token)", span="142-142", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_85 [label="fetchedJob.Dispose()", span="143-143", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_86 [label="var jobId = RabbitMqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5))", span="146-146", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_87 [label="Assert.Equal(''job-id'', jobId)", span="147-147", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_88 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="134-134", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="RabbitMqJobQueueFacts.cs"];
m4_89 [label="Entry System.IDisposable.Dispose()", span="0-0", cluster="System.IDisposable.Dispose()", file="RabbitMqJobQueueFacts.cs"];
m4_4 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="17-17", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueFacts.cs"];
m4_5 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RabbitMqJobQueue(null, null))", span="19-20", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_6 [label="Assert.Equal(''queues'', exception.ParamName)", span="22-22", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", color=green, community=0, file="RabbitMqJobQueueFacts.cs"];
m4_7 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="17-17", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueFacts.cs"];
m4_98 [label="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts", span="", file="RabbitMqJobQueueFacts.cs"];
m4_99 [label=queue, span="", file="RabbitMqJobQueueFacts.cs"];
m4_100 [label=token, span="", file="RabbitMqJobQueueFacts.cs"];
m5_2 [label="Entry HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", span="13-13", cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="RabbitMqJobQueueProvider.cs"];
m5_3 [label="WorkerNumber = workerNumber", span="16-16", cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", color=green, community=0, file="RabbitMqJobQueueProvider.cs"];
m5_4 [label="Exit HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", span="13-13", cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="RabbitMqJobQueueProvider.cs"];
m5_5 [label="HangFire.Server.WorkerContext", span="", file="RabbitMqJobQueueProvider.cs"];
m6_7 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="RabbitMqJobQueueProviderFacts.cs"];
m6_6 [label="Entry HangFire.RabbitMQ.RabbitMqJobQueueProvider.GetJobQueue(IDbConnection)", span="27-27", cluster="HangFire.RabbitMQ.RabbitMqJobQueueProvider.GetJobQueue(IDbConnection)", file="RabbitMqJobQueueProviderFacts.cs"];
m6_13 [label="Entry HangFire.RabbitMQ.RabbitMqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="32-32", cluster="HangFire.RabbitMQ.RabbitMqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="RabbitMqJobQueueProviderFacts.cs"];
m6_17 [label="Entry HangFire.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, System.Action<ConnectionFactory>)", span="15-15", cluster="HangFire.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, System.Action<ConnectionFactory>)", file="RabbitMqJobQueueProviderFacts.cs"];
m6_8 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="23-23", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs"];
m6_9 [label="var provider = CreateProvider()", span="25-25", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs"];
m6_10 [label="var monitoring = provider.GetJobQueueMonitoringApi(null)", span="27-27", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs"];
m6_11 [label="Assert.NotNull(monitoring)", span="29-29", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs"];
m6_12 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="23-23", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs"];
m6_5 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", span="32-32", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="RabbitMqJobQueueProviderFacts.cs"];
m6_14 [label="Action<ConnectionFactory> configuration =\r\n                con =>\r\n                {\r\n                    con.HostName = HostName;\r\n                }", span="34-38", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs"];
m6_15 [label="return new RabbitMqJobQueueProvider(Queue, configuration);", span="40-40", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs"];
m6_16 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", span="32-32", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="RabbitMqJobQueueProviderFacts.cs"];
m6_0 [label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="13-13", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs"];
m6_1 [label="var provider = CreateProvider()", span="15-15", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs"];
m6_2 [label="var jobQueue = provider.GetJobQueue(null)", span="17-17", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs"];
m6_3 [label="Assert.NotNull(jobQueue)", span="19-19", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs"];
m6_4 [label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="13-13", cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs"];
m6_18 [label="Entry lambda expression", span="35-38", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m6_19 [label="con.HostName = HostName", span="37-37", cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs"];
m6_20 [label="Exit lambda expression", span="35-38", cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs"];
m7_0 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="17-17", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RabbitMqMonitoringApi.cs"];
m7_1 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerJobQueue(null, new SqlServerStorageOptions()))", span="19-20", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_2 [label="Assert.Equal(''storage'', exception.ParamName)", span="22-22", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_3 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="17-17", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RabbitMqMonitoringApi.cs"];
m7_220 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="RabbitMqMonitoringApi.cs"];
m7_23 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="RabbitMqMonitoringApi.cs"];
m7_101 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", span="148-148", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_103 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotEmpty(payload.JobId);\r\n            })", span="157-177", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_102 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, dateadd(minute, -60, getutcdate()))\r\ninsert into HangFire.JobQueue (JobId, Queue, FetchedAt)\r\nvalues (scope_identity(), @queue, @fetchedAt)''", span="150-154", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_104 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", span="148-148", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_5 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="RabbitMqMonitoringApi.cs"];
m7_207 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="361-361", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="RabbitMqMonitoringApi.cs"];
m7_209 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotNull(payload);\r\n\r\n                var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.NotNull(fetchedAt);\r\n                Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1));\r\n            })", span="370-391", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="RabbitMqMonitoringApi.cs"];
m7_208 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="363-367", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="RabbitMqMonitoringApi.cs"];
m7_210 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="361-361", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="RabbitMqMonitoringApi.cs"];
m7_10 [label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="30-30", cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RabbitMqMonitoringApi.cs"];
m7_172 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="306-306", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="RabbitMqMonitoringApi.cs"];
m7_173 [label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource();\r\n                cts.Cancel();\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", span="308-316", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="RabbitMqMonitoringApi.cs"];
m7_174 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="306-306", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="RabbitMqMonitoringApi.cs"];
m7_56 [label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0", cluster="System.Threading.CancellationTokenSource.Cancel()", file="RabbitMqMonitoringApi.cs"];
m7_232 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="428-428", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs"];
m7_234 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.Null(otherJobFetchedAt);\r\n            })", span="437-459", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs"];
m7_233 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="430-434", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs"];
m7_235 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="428-428", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs"];
m7_184 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="320-320", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs"];
m7_185 [label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource(200);\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", span="322-329", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs"];
m7_186 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="320-320", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs"];
m7_136 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", span="240-240", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs"];
m7_138 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    });\r\n\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                var critical = (SqlServerTransactionJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(critical.JobId);\r\n                Assert.Equal(''critical'', critical.Queue);\r\n\r\n                var @default = (SqlServerTransactionJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(@default.JobId);\r\n                Assert.Equal(''default'', @default.Queue);\r\n            })", span="248-273", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs"];
m7_137 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="242-246", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs"];
m7_139 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", span="240-240", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs"];
m7_285 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", file="RabbitMqMonitoringApi.cs"];
m7_4 [label="Entry Unk.>", span="", cluster="Unk.>", file="RabbitMqMonitoringApi.cs"];
m7_9 [label="Entry Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="40-40", cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="RabbitMqMonitoringApi.cs"];
m7_11 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="26-26", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="RabbitMqMonitoringApi.cs"];
m7_12 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerJobQueue(new SqlServerStorage(ConnectionUtils.GetConnectionString()), null))", span="28-29", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_13 [label="Assert.Equal(''options'', exception.ParamName)", span="31-31", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_14 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="26-26", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="RabbitMqMonitoringApi.cs"];
m7_35 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="49-49", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="RabbitMqMonitoringApi.cs"];
m7_36 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", span="51-59", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_37 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="49-49", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="RabbitMqMonitoringApi.cs"];
m7_68 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(int)", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(int)", file="RabbitMqMonitoringApi.cs"];
m7_222 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="395-395", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_224 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotEmpty(payload.JobId);\r\n            })", span="404-424", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_223 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue, FetchedAt)\r\nvalues (scope_identity(), @queue, @fetchedAt)''", span="397-401", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_225 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="395-395", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_286 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="RabbitMqMonitoringApi.cs"];
m7_20 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", span="35-35", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="RabbitMqMonitoringApi.cs"];
m7_21 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => queue.Dequeue(null, CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", span="37-45", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_22 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", span="35-35", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="RabbitMqMonitoringApi.cs"];
m7_83 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="RabbitMqMonitoringApi.cs"];
m7_255 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", span="487-487", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs"];
m7_257 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    });\r\n\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                var critical = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(critical.JobId);\r\n                Assert.Equal(''critical'', critical.Queue);\r\n\r\n                var @default = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(@default.JobId);\r\n                Assert.Equal(''default'', @default.Queue);\r\n            })", span="495-520", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs"];
m7_256 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="489-493", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs"];
m7_258 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", span="487-487", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs"];
m7_280 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="RabbitMqMonitoringApi.cs"];
m7_18 [label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="43-43", cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="RabbitMqMonitoringApi.cs"];
m7_161 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="292-292", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="RabbitMqMonitoringApi.cs"];
m7_162 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", span="294-302", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="RabbitMqMonitoringApi.cs"];
m7_163 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="292-292", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="RabbitMqMonitoringApi.cs"];
m7_281 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="RabbitMqMonitoringApi.cs"];
m7_111 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="RabbitMqMonitoringApi.cs"];
m7_98 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="RabbitMqMonitoringApi.cs"];
m7_150 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsNull()", span="278-278", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="RabbitMqMonitoringApi.cs"];
m7_151 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => queue.Dequeue(null, CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", span="280-288", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="RabbitMqMonitoringApi.cs"];
m7_152 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsNull()", span="278-278", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="RabbitMqMonitoringApi.cs"];
m7_243 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="463-463", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs"];
m7_245 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' });\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()));\r\n            })", span="471-483", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs"];
m7_244 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="465-469", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs"];
m7_246 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="463-463", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs"];
m7_195 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", span="333-333", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_197 [label="UseConnection(connection =>\r\n            {\r\n                var id = (int)connection.Query(\r\n                    arrangeSql,\r\n                    new { jobId = 1, queue = ''default'' }).Single().Id;\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                // Act\r\n                var payload = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.Equal(id, payload.Id);\r\n                Assert.Equal(''1'', payload.JobId);\r\n                Assert.Equal(''default'', payload.Queue);\r\n            })", span="341-357", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_196 [label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@jobId, @queue);\r\nselect scope_identity() as Id;''", span="335-338", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_198 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", span="333-333", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_85 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", span="118-118", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", file="RabbitMqMonitoringApi.cs"];
m7_87 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotNull(payload);\r\n\r\n                var jobInQueue = connection.Query(''select * from HangFire.JobQueue'').SingleOrDefault();\r\n                Assert.Null(jobInQueue);\r\n            })", span="127-144", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", file="RabbitMqMonitoringApi.cs"];
m7_86 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="120-124", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", file="RabbitMqMonitoringApi.cs"];
m7_88 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", span="118-118", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", file="RabbitMqMonitoringApi.cs"];
m7_269 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", span="524-524", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="RabbitMqMonitoringApi.cs"];
m7_270 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                queue.Enqueue(connection, ''default'', ''1'');\r\n\r\n                var record = connection.Query(''select * from HangFire.JobQueue'').Single();\r\n                Assert.Equal(''1'', record.JobId.ToString());\r\n                Assert.Equal(''default'', record.Queue);\r\n                Assert.Null(record.FetchedAt);\r\n            })", span="526-536", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="RabbitMqMonitoringApi.cs"];
m7_271 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", span="524-524", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="RabbitMqMonitoringApi.cs"];
m7_292 [label="Entry SqlServerStorage.cstr", span="", cluster="SqlServerStorage.cstr", file="RabbitMqMonitoringApi.cs"];
m7_100 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="RabbitMqMonitoringApi.cs"];
m7_55 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="RabbitMqMonitoringApi.cs"];
m7_113 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="181-181", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs"];
m7_115 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.Null(otherJobFetchedAt);\r\n            })", span="190-212", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs"];
m7_114 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="183-187", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs"];
m7_116 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="181-181", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs"];
m7_272 [label="Entry lambda expression", span="526-536", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_6 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_7 [label="new SqlServerJobQueue(null, new SqlServerStorageOptions())", span="20-20", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_8 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_15 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_16 [label="new SqlServerJobQueue(new SqlServerStorage(ConnectionUtils.GetConnectionString()), null)", span="29-29", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_17 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_24 [label="Entry lambda expression", span="37-45", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_25 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="39-39", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_26 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => queue.Dequeue(null, CreateTimingOutCancellationToken()))", span="41-42", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_31 [label="queue.Dequeue(null, CreateTimingOutCancellationToken())", span="42-42", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_27 [label="Assert.Equal(''queues'', exception.ParamName)", span="44-44", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_30 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_32 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_28 [label="Exit lambda expression", span="37-45", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_38 [label="Entry lambda expression", span="51-59", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_39 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="53-53", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_40 [label="var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()))", span="55-56", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_44 [label="queue.Dequeue(new string[0], CreateTimingOutCancellationToken())", span="56-56", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_41 [label="Assert.Equal(''queues'', exception.ParamName)", span="58-58", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_43 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_45 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_42 [label="Exit lambda expression", span="51-59", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_49 [label="Entry lambda expression", span="65-73", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_50 [label="var cts = new CancellationTokenSource()", span="67-67", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_51 [label="cts.Cancel()", span="68-68", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_53 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="71-72", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_58 [label="queue.Dequeue(DefaultQueues, cts.Token)", span="72-72", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_52 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="69-69", cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_54 [label="Exit lambda expression", span="65-73", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_57 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_59 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_66 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="84-85", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_121 [label="var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single()", span="207-209", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_131 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()))", span="232-235", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_155 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => queue.Dequeue(null, CreateTimingOutCancellationToken()))", span="284-285", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_166 [label="var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()))", span="298-299", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_179 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="314-315", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_190 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="327-328", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_216 [label="var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single()", span="385-387", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_240 [label="var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single()", span="454-456", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_250 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()))", span="479-482", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_80 [label="Assert.Equal(''1'', payload.JobId)", span="112-112", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_81 [label="Assert.Equal(''default'', payload.Queue)", span="113-113", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_145 [label="Assert.Equal(''critical'', critical.Queue)", span="265-265", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_148 [label="Assert.Equal(''default'', @default.Queue)", span="272-272", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_156 [label="Assert.Equal(''queues'', exception.ParamName)", span="287-287", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_167 [label="Assert.Equal(''queues'', exception.ParamName)", span="301-301", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_203 [label="Assert.Equal(id, payload.Id)", span="354-354", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_204 [label="Assert.Equal(''1'', payload.JobId)", span="355-355", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_205 [label="Assert.Equal(''default'', payload.Queue)", span="356-356", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_264 [label="Assert.Equal(''critical'', critical.Queue)", span="512-512", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_267 [label="Assert.Equal(''default'', @default.Queue)", span="519-519", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_276 [label="Assert.Equal(''1'', record.JobId.ToString())", span="533-533", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_277 [label="Assert.Equal(''default'', record.Queue)", span="534-534", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_65 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="82-82", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_78 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="104-104", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_91 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="132-132", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_107 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="168-168", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_119 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="199-199", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_129 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="226-226", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_142 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="258-258", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_154 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="282-282", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_165 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="296-296", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_178 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="312-312", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_189 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="325-325", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_201 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="346-346", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_213 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="375-375", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_228 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="415-415", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_238 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="446-446", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_248 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="473-473", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_261 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="505-505", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_273 [label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="528-528", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_79 [label="var payload = (SqlServerTransactionJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="107-109", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_92 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="135-137", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_108 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="171-173", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_120 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="202-204", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_134 [label="queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken())", span="233-235", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_143 [label="var critical = (SqlServerTransactionJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="260-262", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_146 [label="var @default = (SqlServerTransactionJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="267-269", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_159 [label="queue.Dequeue(null, CreateTimingOutCancellationToken())", span="285-285", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_170 [label="queue.Dequeue(new string[0], CreateTimingOutCancellationToken())", span="299-299", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_202 [label="var payload = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="349-351", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_214 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="378-380", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_229 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="418-420", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_239 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="449-451", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_253 [label="queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken())", span="480-482", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_262 [label="var critical = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="507-509", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_265 [label="var @default = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="514-516", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_70 [label="queue.Dequeue(DefaultQueues, cts.Token)", span="85-85", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_182 [label="queue.Dequeue(DefaultQueues, cts.Token)", span="315-315", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_193 [label="queue.Dequeue(DefaultQueues, cts.Token)", span="328-328", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_176 [label="var cts = new CancellationTokenSource()", span="310-310", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_177 [label="cts.Cancel()", span="311-311", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_64 [label="var cts = new CancellationTokenSource(200)", span="81-81", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_67 [label="Exit lambda expression", span="79-86", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_69 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_117 [label="Entry lambda expression", span="190-212", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_122 [label="Assert.Null(otherJobFetchedAt)", span="211-211", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_130 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' })", span="228-230", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_132 [label="Exit lambda expression", span="224-236", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_133 [label="Entry lambda expression", span="233-235", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_158 [label="Entry lambda expression", span="285-285", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_169 [label="Entry lambda expression", span="299-299", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_180 [label="Exit lambda expression", span="308-316", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_181 [label="Entry lambda expression", span="315-315", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_188 [label="var cts = new CancellationTokenSource(200)", span="324-324", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_191 [label="Exit lambda expression", span="322-329", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_192 [label="Entry lambda expression", span="328-328", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_211 [label="Entry lambda expression", span="370-391", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_215 [label="Assert.NotNull(payload)", span="383-383", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_217 [label="Assert.NotNull(fetchedAt)", span="389-389", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_218 [label="Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1))", span="390-390", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_236 [label="Entry lambda expression", span="437-459", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_241 [label="Assert.Null(otherJobFetchedAt)", span="458-458", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_249 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' })", span="475-477", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_251 [label="Exit lambda expression", span="471-483", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_252 [label="Entry lambda expression", span="480-482", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_82 [label="Exit lambda expression", span="98-114", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_144 [label="Assert.NotNull(critical.JobId)", span="264-264", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_147 [label="Assert.NotNull(@default.JobId)", span="271-271", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_149 [label="Exit lambda expression", span="248-273", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_157 [label="Exit lambda expression", span="280-288", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_168 [label="Exit lambda expression", span="294-302", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_200 [label="var id = (int)connection.Query(\r\n                    arrangeSql,\r\n                    new { jobId = 1, queue = ''default'' }).Single().Id", span="343-345", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_206 [label="Exit lambda expression", span="341-357", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_263 [label="Assert.NotNull(critical.JobId)", span="511-511", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_266 [label="Assert.NotNull(@default.JobId)", span="518-518", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_268 [label="Exit lambda expression", span="495-520", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_275 [label="var record = connection.Query(''select * from HangFire.JobQueue'').Single()", span="532-532", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_278 [label="Assert.Null(record.FetchedAt)", span="535-535", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_63 [label="Entry lambda expression", span="79-86", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_76 [label="Entry lambda expression", span="98-114", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_89 [label="Entry lambda expression", span="127-144", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_105 [label="Entry lambda expression", span="157-177", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_128 [label="Entry lambda expression", span="224-236", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_140 [label="Entry lambda expression", span="248-273", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_153 [label="Entry lambda expression", span="280-288", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_164 [label="Entry lambda expression", span="294-302", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_175 [label="Entry lambda expression", span="308-316", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_187 [label="Entry lambda expression", span="322-329", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_199 [label="Entry lambda expression", span="341-357", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_226 [label="Entry lambda expression", span="404-424", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_247 [label="Entry lambda expression", span="471-483", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_259 [label="Entry lambda expression", span="495-520", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_77 [label="var id = (int)connection.Query(\r\n                    arrangeSql,\r\n                    new { jobId = 1, queue = ''default'' }).Single().Id", span="101-103", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_90 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' })", span="129-131", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_106 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    })", span="159-167", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_118 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    })", span="192-198", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_141 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    })", span="250-256", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_212 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' })", span="372-374", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_227 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    })", span="406-414", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_237 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    })", span="439-445", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_260 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    })", span="497-503", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_274 [label="queue.Enqueue(connection, ''default'', ''1'')", span="530-530", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_93 [label="Assert.NotNull(payload)", span="140-140", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_109 [label="Assert.NotEmpty(payload.JobId)", span="176-176", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_135 [label="Exit lambda expression", span="233-235", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_160 [label="Exit lambda expression", span="285-285", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_171 [label="Exit lambda expression", span="299-299", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_230 [label="Assert.NotEmpty(payload.JobId)", span="423-423", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_254 [label="Exit lambda expression", span="480-482", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_71 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_183 [label="Exit lambda expression", span="315-315", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_194 [label="Exit lambda expression", span="328-328", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_123 [label="Exit lambda expression", span="190-212", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_219 [label="Exit lambda expression", span="370-391", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_242 [label="Exit lambda expression", span="437-459", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_279 [label="Exit lambda expression", span="526-536", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_96 [label="Exit lambda expression", span="127-144", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_94 [label="var jobInQueue = connection.Query(''select * from HangFire.JobQueue'').SingleOrDefault()", span="142-142", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_110 [label="Exit lambda expression", span="157-177", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_95 [label="Assert.Null(jobInQueue)", span="143-143", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_231 [label="Exit lambda expression", span="404-424", cluster="lambda expression", file="RabbitMqMonitoringApi.cs"];
m7_33 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", span="539-539", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="RabbitMqMonitoringApi.cs"];
m7_282 [label="var source = new CancellationTokenSource(TimeSpan.FromSeconds(10))", span="541-541", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="RabbitMqMonitoringApi.cs"];
m7_283 [label="return source.Token;", span="542-542", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="RabbitMqMonitoringApi.cs"];
m7_284 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", span="539-539", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="RabbitMqMonitoringApi.cs"];
m7_60 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="77-77", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs"];
m7_61 [label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource(200);\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", span="79-86", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs"];
m7_62 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="77-77", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs"];
m7_124 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="216-216", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs"];
m7_126 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' });\r\n                \r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()));\r\n            })", span="224-236", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs"];
m7_125 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="218-222", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs"];
m7_127 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="216-216", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs"];
m7_112 [label="Entry Unk.NotEmpty", span="", cluster="Unk.NotEmpty", file="RabbitMqMonitoringApi.cs"];
m7_84 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="RabbitMqMonitoringApi.cs"];
m7_19 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="RabbitMqMonitoringApi.cs"];
m7_221 [label="Entry Unk.True", span="", cluster="Unk.True", file="RabbitMqMonitoringApi.cs"];
m7_97 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="RabbitMqMonitoringApi.cs"];
m7_29 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", span="547-547", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", file="RabbitMqMonitoringApi.cs"];
m7_290 [label="return new SqlServerJobQueue(storage, new SqlServerStorageOptions { UseInvisibilityTimeout = invisibilityTimeout });", span="550-550", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", file="RabbitMqMonitoringApi.cs"];
m7_289 [label="var storage = new SqlServerStorage(connection)", span="549-549", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", file="RabbitMqMonitoringApi.cs"];
m7_291 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", span="547-547", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", file="RabbitMqMonitoringApi.cs"];
m7_72 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", span="90-90", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_74 [label="UseConnection(connection =>\r\n            {\r\n                // ReSharper disable once UnusedVariable\r\n                var id = (int)connection.Query(\r\n                    arrangeSql,\r\n                    new { jobId = 1, queue = ''default'' }).Single().Id;\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                // Act\r\n                var payload = (SqlServerTransactionJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.Equal(''1'', payload.JobId);\r\n                Assert.Equal(''default'', payload.Queue);\r\n            })", span="98-114", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_73 [label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@jobId, @queue);\r\nselect scope_identity() as Id;''", span="92-95", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_75 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", span="90-90", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs"];
m7_99 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="RabbitMqMonitoringApi.cs"];
m7_34 [label="Entry Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="50-50", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="RabbitMqMonitoringApi.cs"];
m7_46 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="63-63", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="RabbitMqMonitoringApi.cs"];
m7_47 [label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource();\r\n                cts.Cancel();\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", span="65-73", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", color=green, community=0, file="RabbitMqMonitoringApi.cs"];
m7_48 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="63-63", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="RabbitMqMonitoringApi.cs"];
m7_299 [label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts", span="", file="RabbitMqMonitoringApi.cs"];
m7_300 [label=queue, span="", file="RabbitMqMonitoringApi.cs"];
m7_301 [label=queue, span="", file="RabbitMqMonitoringApi.cs"];
m7_302 [label=cts, span="", file="RabbitMqMonitoringApi.cs"];
m7_303 [label=queue, span="", file="RabbitMqMonitoringApi.cs"];
m7_311 [label=queue, span="", file="RabbitMqMonitoringApi.cs"];
m7_313 [label=queue, span="", file="RabbitMqMonitoringApi.cs"];
m7_314 [label=queue, span="", file="RabbitMqMonitoringApi.cs"];
m7_324 [label=queue, span="", file="RabbitMqMonitoringApi.cs"];
m7_304 [label=cts, span="", file="RabbitMqMonitoringApi.cs"];
m7_305 [label=queue, span="", file="RabbitMqMonitoringApi.cs"];
m7_315 [label=cts, span="", file="RabbitMqMonitoringApi.cs"];
m7_316 [label=queue, span="", file="RabbitMqMonitoringApi.cs"];
m7_317 [label=cts, span="", file="RabbitMqMonitoringApi.cs"];
m7_318 [label=queue, span="", file="RabbitMqMonitoringApi.cs"];
m7_310 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m7_323 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m7_319 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m7_306 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m7_307 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m7_308 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m7_309 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m7_312 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m7_320 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m7_321 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m7_322 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m7_325 [label=arrangeSql, span="", file="RabbitMqMonitoringApi.cs"];
m9_0 [label="Entry HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", span="8-8", cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", file="RabbitMqSqlServerStorageExtensions.cs"];
m9_1 [label="storage == null", span="10-10", cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs"];
m9_2 [label="throw new ArgumentNullException(''storage'');", span="10-10", cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs"];
m9_3 [label="queues == null", span="11-11", cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs"];
m9_4 [label="throw new ArgumentNullException(''queues'');", span="11-11", cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs"];
m9_5 [label="configureAction == null", span="12-12", cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs"];
m9_6 [label="throw new ArgumentNullException(''configureAction'');", span="12-12", cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs"];
m9_7 [label="var provider = new RabbitMqJobQueueProvider(queues, configureAction)", span="14-14", cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs"];
m9_8 [label="storage.QueueProviders.Add(provider, queues)", span="16-16", cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs"];
m9_9 [label="return storage;", span="18-18", cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs"];
m9_10 [label="Exit HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", span="8-8", cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", file="RabbitMqSqlServerStorageExtensions.cs"];
m9_12 [label="Entry HangFire.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, System.Action<ConnectionFactory>)", span="15-15", cluster="HangFire.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, System.Action<ConnectionFactory>)", file="RabbitMqSqlServerStorageExtensions.cs"];
m9_11 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="RabbitMqSqlServerStorageExtensions.cs"];
m9_13 [label="Entry HangFire.SqlServer.PersistentJobQueueProviderCollection.Add(HangFire.SqlServer.IPersistentJobQueueProvider, System.Collections.Generic.IEnumerable<string>)", span="40-40", cluster="HangFire.SqlServer.PersistentJobQueueProviderCollection.Add(HangFire.SqlServer.IPersistentJobQueueProvider, System.Collections.Generic.IEnumerable<string>)", file="RabbitMqSqlServerStorageExtensions.cs"];
m0_6 -> m0_7  [key=0, style=solid, color=green];
m0_7 -> m0_8  [key=0, style=solid, color=green];
m0_7 -> m0_13  [key=2, style=dotted, color=green];
m0_8 -> m0_9  [key=0, style=solid, color=green];
m0_8 -> m0_11  [key=0, style=solid, color=green];
m0_8 -> m0_10  [key=1, style=dashed, color=green, label=queue];
m0_10 -> m0_8  [key=0, style=solid, color=green];
m0_10 -> m0_15  [key=2, style=dotted, color=green];
m0_9 -> m0_10  [key=0, style=solid, color=green];
m0_9 -> m0_14  [key=2, style=dotted, color=green];
m0_11 -> m0_12  [key=0, style=solid, color=green];
m0_11 -> m0_16  [key=2, style=dotted, color=green];
m0_12 -> m0_6  [key=0, style=bold, color=blue];
m0_17 -> m0_18  [key=0, style=solid, color=green];
m0_18 -> m0_19  [key=0, style=solid, color=green];
m0_18 -> m0_20  [key=2, style=dotted, color=green];
m0_19 -> m0_17  [key=0, style=bold, color=blue];
m0_21 -> m0_22  [key=0, style=solid, color=green];
m0_22 -> m0_23  [key=0, style=solid, color=green];
m0_22 -> m0_4  [key=2, style=dotted, color=green];
m0_22 -> m0_5  [key=2, style=dotted, color=green];
m0_23 -> m0_21  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid, color=green];
m0_1 -> m0_2  [key=0, style=solid, color=green];
m0_2 -> m0_3  [key=0, style=solid, color=green];
m0_2 -> m0_4  [key=2, style=dotted, color=green];
m0_2 -> m0_5  [key=2, style=dotted, color=green];
m0_3 -> m0_0  [key=0, style=bold, color=blue];
m0_24 -> m0_1  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m0_24 -> m0_2  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m0_24 -> m0_8  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m0_24 -> m0_9  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m0_24 -> m0_11  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m0_24 -> m0_10  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute"];
m3_0 -> m3_1  [key=0, style=solid, color=green];
m3_1 -> m3_2  [key=0, style=solid, color=green];
m3_2 -> m3_3  [key=0, style=solid, color=green];
m3_2 -> m3_12  [key=2, style=dotted, color=green];
m3_3 -> m3_4  [key=0, style=solid, color=green];
m3_4 -> m3_5  [key=0, style=solid, color=green];
m3_4 -> m3_13  [key=2, style=dotted, color=green];
m3_5 -> m3_6  [key=0, style=solid, color=green];
m3_5 -> m3_13  [key=2, style=dotted, color=green];
m3_6 -> m3_7  [key=0, style=solid, color=green];
m3_6 -> m3_13  [key=2, style=dotted, color=green];
m3_7 -> m3_8  [key=0, style=solid, color=green];
m3_8 -> m3_9  [key=0, style=solid, color=green];
m3_9 -> m3_10  [key=0, style=solid, color=green];
m3_10 -> m3_11  [key=0, style=solid, color=green];
m3_10 -> m3_13  [key=2, style=dotted, color=green];
m3_11 -> m3_0  [key=0, style=bold, color=blue];
m3_14 -> m3_1  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m3_14 -> m3_2  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m3_14 -> m3_3  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m3_14 -> m3_4  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m3_14 -> m3_5  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m3_14 -> m3_6  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m3_14 -> m3_7  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m3_14 -> m3_8  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m3_14 -> m3_9  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m3_14 -> m3_10  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.SqlServerStorageOptions"];
m4_56 -> m4_57  [key=0, style=solid, color=green];
m4_57 -> m4_58  [key=0, style=solid, color=green];
m4_57 -> m4_40  [key=2, style=dotted, color=green];
m4_58 -> m4_59  [key=0, style=solid, color=green];
m4_58 -> m4_29  [key=2, style=dotted, color=green];
m4_59 -> m4_60  [key=0, style=solid, color=green];
m4_59 -> m4_31  [key=2, style=dotted, color=green];
m4_60 -> m4_61  [key=0, style=solid, color=green];
m4_60 -> m4_64  [key=2, style=dotted, color=green];
m4_61 -> m4_62  [key=0, style=solid, color=green];
m4_61 -> m4_8  [key=2, style=dotted, color=green];
m4_61 -> m4_65  [key=1, style=dashed, color=green, label="lambda expression"];
m4_62 -> m4_63  [key=0, style=solid, color=green];
m4_62 -> m4_9  [key=2, style=dotted, color=green];
m4_63 -> m4_56  [key=0, style=bold, color=blue];
m4_41 -> m4_42  [key=0, style=solid, color=green];
m4_42 -> m4_43  [key=0, style=solid, color=green];
m4_42 -> m4_29  [key=2, style=dotted, color=green];
m4_42 -> m4_44  [key=1, style=dashed, color=green, label=queue];
m4_42 -> m4_48  [key=1, style=dashed, color=green, label=queue];
m4_43 -> m4_44  [key=0, style=solid, color=green];
m4_43 -> m4_46  [key=2, style=dotted, color=green];
m4_43 -> m4_48  [key=1, style=dashed, color=green, label=token];
m4_44 -> m4_45  [key=0, style=solid, color=green];
m4_44 -> m4_8  [key=2, style=dotted, color=green];
m4_44 -> m4_47  [key=1, style=dashed, color=green, label="lambda expression"];
m4_45 -> m4_41  [key=0, style=bold, color=blue];
m4_14 -> m4_15  [key=0, style=solid, color=green];
m4_15 -> m4_16  [key=0, style=solid, color=green];
m4_15 -> m4_8  [key=2, style=dotted, color=green];
m4_15 -> m4_18  [key=1, style=dashed, color=green, label="lambda expression"];
m4_16 -> m4_17  [key=0, style=solid, color=green];
m4_16 -> m4_9  [key=2, style=dotted, color=green];
m4_17 -> m4_14  [key=0, style=bold, color=blue];
m4_33 -> m4_34  [key=0, style=solid, color=green];
m4_34 -> m4_35  [key=0, style=solid, color=green];
m4_34 -> m4_40  [key=2, style=dotted, color=green];
m4_35 -> m4_36  [key=0, style=solid, color=green];
m4_35 -> m4_29  [key=2, style=dotted, color=green];
m4_36 -> m4_37  [key=0, style=solid, color=green];
m4_36 -> m4_31  [key=2, style=dotted, color=green];
m4_36 -> m4_38  [key=1, style=dashed, color=green, label=fetchedJob];
m4_37 -> m4_38  [key=0, style=solid, color=green];
m4_37 -> m4_32  [key=2, style=dotted, color=green];
m4_38 -> m4_39  [key=0, style=solid, color=green];
m4_38 -> m4_9  [key=2, style=dotted, color=green];
m4_39 -> m4_33  [key=0, style=bold, color=blue];
m4_21 -> m4_22  [key=0, style=solid, color=green];
m4_22 -> m4_23  [key=0, style=solid, color=green];
m4_22 -> m4_29  [key=2, style=dotted, color=green];
m4_22 -> m4_24  [key=1, style=dashed, color=green, label=queue];
m4_23 -> m4_24  [key=0, style=solid, color=green];
m4_23 -> m4_30  [key=2, style=dotted, color=green];
m4_24 -> m4_25  [key=0, style=solid, color=green];
m4_24 -> m4_31  [key=2, style=dotted, color=green];
m4_24 -> m4_26  [key=1, style=dashed, color=green, label=fetchedJob];
m4_25 -> m4_26  [key=0, style=solid, color=green];
m4_25 -> m4_32  [key=2, style=dotted, color=green];
m4_26 -> m4_27  [key=0, style=solid, color=green];
m4_27 -> m4_28  [key=0, style=solid, color=green];
m4_27 -> m4_9  [key=2, style=dotted, color=green];
m4_28 -> m4_21  [key=0, style=bold, color=blue];
m4_90 -> m4_91  [key=0, style=solid, color=green];
m4_91 -> m4_92  [key=0, style=solid, color=green];
m4_91 -> m4_40  [key=2, style=dotted, color=green];
m4_92 -> m4_93  [key=0, style=solid, color=green];
m4_92 -> m4_29  [key=2, style=dotted, color=green];
m4_92 -> m4_95  [key=1, style=dashed, color=green, label=queue];
m4_93 -> m4_94  [key=0, style=solid, color=green];
m4_93 -> m4_31  [key=2, style=dotted, color=green];
m4_95 -> m4_96  [key=0, style=solid, color=green];
m4_95 -> m4_31  [key=2, style=dotted, color=green];
m4_94 -> m4_95  [key=0, style=solid, color=green];
m4_94 -> m4_89  [key=2, style=dotted, color=green];
m4_96 -> m4_97  [key=0, style=solid, color=green];
m4_96 -> m4_9  [key=2, style=dotted, color=green];
m4_97 -> m4_90  [key=0, style=bold, color=blue];
m4_50 -> m4_51  [key=0, style=solid, color=green];
m4_51 -> m4_52  [key=0, style=solid, color=green];
m4_51 -> m4_40  [key=2, style=dotted, color=green];
m4_52 -> m4_53  [key=0, style=solid, color=green];
m4_52 -> m4_29  [key=2, style=dotted, color=green];
m4_53 -> m4_54  [key=0, style=solid, color=green];
m4_53 -> m4_31  [key=2, style=dotted, color=green];
m4_54 -> m4_55  [key=0, style=solid, color=green];
m4_54 -> m4_9  [key=2, style=dotted, color=green];
m4_55 -> m4_50  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid, color=green];
m4_1 -> m4_2  [key=0, style=solid, color=green];
m4_1 -> m4_3  [key=2, style=dotted, color=green];
m4_2 -> m4_0  [key=0, style=bold, color=blue];
m4_70 -> m4_71  [key=0, style=solid, color=green];
m4_71 -> m4_72  [key=0, style=solid, color=green];
m4_71 -> m4_40  [key=2, style=dotted, color=green];
m4_72 -> m4_73  [key=0, style=solid, color=green];
m4_72 -> m4_29  [key=2, style=dotted, color=green];
m4_73 -> m4_74  [key=0, style=solid, color=green];
m4_73 -> m4_31  [key=2, style=dotted, color=green];
m4_74 -> m4_75  [key=0, style=solid, color=green];
m4_74 -> m4_32  [key=2, style=dotted, color=green];
m4_75 -> m4_76  [key=0, style=solid, color=green];
m4_75 -> m4_8  [key=2, style=dotted, color=green];
m4_75 -> m4_78  [key=1, style=dashed, color=green, label="lambda expression"];
m4_76 -> m4_77  [key=0, style=solid, color=green];
m4_76 -> m4_9  [key=2, style=dotted, color=green];
m4_77 -> m4_70  [key=0, style=bold, color=blue];
m4_78 -> m4_79  [key=0, style=solid, color=green];
m4_10 -> m4_11  [key=0, style=solid, color=green];
m4_11 -> m4_12  [key=0, style=solid, color=green];
m4_11 -> m4_13  [key=2, style=dotted, color=green];
m4_12 -> m4_10  [key=0, style=bold, color=blue];
m4_18 -> m4_19  [key=0, style=solid, color=green];
m4_19 -> m4_20  [key=0, style=solid, color=green];
m4_19 -> m4_13  [key=2, style=dotted, color=green];
m4_20 -> m4_18  [key=0, style=bold, color=blue];
m4_48 -> m4_49  [key=0, style=solid, color=green];
m4_48 -> m4_31  [key=2, style=dotted, color=green];
m4_47 -> m4_48  [key=0, style=solid, color=green];
m4_49 -> m4_47  [key=0, style=bold, color=blue];
m4_65 -> m4_66  [key=0, style=solid, color=green];
m4_66 -> m4_67  [key=0, style=solid, color=green];
m4_66 -> m4_68  [key=2, style=dotted, color=green];
m4_66 -> m4_69  [key=2, style=dotted, color=green];
m4_67 -> m4_65  [key=0, style=bold, color=blue];
m4_79 -> m4_80  [key=0, style=solid, color=green];
m4_79 -> m4_68  [key=2, style=dotted, color=green];
m4_79 -> m4_69  [key=2, style=dotted, color=green];
m4_80 -> m4_78  [key=0, style=bold, color=blue];
m4_81 -> m4_82  [key=0, style=solid, color=green];
m4_82 -> m4_83  [key=0, style=solid, color=green];
m4_82 -> m4_40  [key=2, style=dotted, color=green];
m4_83 -> m4_84  [key=0, style=solid, color=green];
m4_83 -> m4_29  [key=2, style=dotted, color=green];
m4_84 -> m4_85  [key=0, style=solid, color=green];
m4_84 -> m4_31  [key=2, style=dotted, color=green];
m4_85 -> m4_86  [key=0, style=solid, color=green];
m4_85 -> m4_89  [key=2, style=dotted, color=green];
m4_86 -> m4_87  [key=0, style=solid, color=green];
m4_86 -> m4_68  [key=2, style=dotted, color=green];
m4_86 -> m4_69  [key=2, style=dotted, color=green];
m4_87 -> m4_88  [key=0, style=solid, color=green];
m4_87 -> m4_9  [key=2, style=dotted, color=green];
m4_88 -> m4_81  [key=0, style=bold, color=blue];
m4_4 -> m4_5  [key=0, style=solid, color=green];
m4_5 -> m4_6  [key=0, style=solid, color=green];
m4_5 -> m4_8  [key=2, style=dotted, color=green];
m4_5 -> m4_10  [key=1, style=dashed, color=green, label="lambda expression"];
m4_6 -> m4_7  [key=0, style=solid, color=green];
m4_6 -> m4_9  [key=2, style=dotted, color=green];
m4_7 -> m4_4  [key=0, style=bold, color=blue];
m4_98 -> m4_1  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts"];
m4_98 -> m4_24  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts"];
m4_98 -> m4_36  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts"];
m4_98 -> m4_53  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts"];
m4_98 -> m4_59  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts"];
m4_98 -> m4_73  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts"];
m4_98 -> m4_84  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts"];
m4_98 -> m4_93  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts"];
m4_98 -> m4_95  [key=1, style=dashed, color=green, label="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts"];
m4_99 -> m4_48  [key=1, style=dashed, color=green, label=queue];
m4_100 -> m4_48  [key=1, style=dashed, color=green, label=token];
m5_2 -> m5_3  [key=0, style=solid, color=green];
m5_3 -> m5_4  [key=0, style=solid, color=green];
m5_4 -> m5_2  [key=0, style=bold, color=blue];
m5_5 -> m5_3  [key=1, style=dashed, color=green, label="HangFire.Server.WorkerContext"];
m6_8 -> m6_9  [key=0, style=solid, color=green];
m6_9 -> m6_10  [key=0, style=solid, color=green];
m6_9 -> m6_5  [key=2, style=dotted, color=green];
m6_10 -> m6_11  [key=0, style=solid, color=green];
m6_10 -> m6_13  [key=2, style=dotted, color=green];
m6_11 -> m6_12  [key=0, style=solid, color=green];
m6_11 -> m6_7  [key=2, style=dotted, color=green];
m6_12 -> m6_8  [key=0, style=bold, color=blue];
m6_5 -> m6_14  [key=0, style=solid, color=green];
m6_14 -> m6_14  [key=3, color=green, style=bold, label="Local variable System.Action<ConnectionFactory> configuration"];
m6_14 -> m6_15  [key=0, style=solid, color=green];
m6_14 -> m6_19  [key=1, style=dashed, color=green, label=ConnectionFactory];
m6_15 -> m6_16  [key=0, style=solid, color=green];
m6_15 -> m6_17  [key=2, style=dotted, color=green];
m6_16 -> m6_5  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid, color=green];
m6_1 -> m6_2  [key=0, style=solid, color=green];
m6_1 -> m6_5  [key=2, style=dotted, color=green];
m6_2 -> m6_3  [key=0, style=solid, color=green];
m6_2 -> m6_6  [key=2, style=dotted, color=green];
m6_3 -> m6_4  [key=0, style=solid, color=green];
m6_3 -> m6_7  [key=2, style=dotted, color=green];
m6_4 -> m6_0  [key=0, style=bold, color=blue];
m6_18 -> m6_19  [key=0, style=solid, color=green];
m6_19 -> m6_19  [key=1, style=dashed, color=green, label=ConnectionFactory];
m6_19 -> m6_20  [key=0, style=solid, color=green];
m6_20 -> m6_18  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid, color=green];
m7_1 -> m7_2  [key=0, style=solid, color=green];
m7_1 -> m7_4  [key=2, style=dotted, color=green];
m7_1 -> m7_6  [key=1, style=dashed, color=green, label="lambda expression"];
m7_2 -> m7_3  [key=0, style=solid, color=green];
m7_2 -> m7_5  [key=2, style=dotted, color=green];
m7_3 -> m7_0  [key=0, style=bold, color=blue];
m7_101 -> m7_102  [key=0, style=solid];
m7_103 -> m7_23  [key=2, style=dotted];
m7_103 -> m7_104  [key=0, style=solid];
m7_103 -> m7_105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_102 -> m7_103  [key=0, style=solid];
m7_102 -> m7_106  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_104 -> m7_101  [key=0, style=bold, color=blue];
m7_207 -> m7_208  [key=0, style=solid];
m7_209 -> m7_23  [key=2, style=dotted];
m7_209 -> m7_210  [key=0, style=solid];
m7_209 -> m7_211  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_208 -> m7_209  [key=0, style=solid];
m7_208 -> m7_212  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_210 -> m7_207  [key=0, style=bold, color=blue];
m7_172 -> m7_173  [key=0, style=solid];
m7_173 -> m7_23  [key=2, style=dotted];
m7_173 -> m7_174  [key=0, style=solid];
m7_173 -> m7_175  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_174 -> m7_172  [key=0, style=bold, color=blue];
m7_232 -> m7_233  [key=0, style=solid];
m7_234 -> m7_23  [key=2, style=dotted];
m7_234 -> m7_235  [key=0, style=solid];
m7_234 -> m7_236  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_233 -> m7_234  [key=0, style=solid];
m7_233 -> m7_237  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_235 -> m7_232  [key=0, style=bold, color=blue];
m7_184 -> m7_185  [key=0, style=solid];
m7_185 -> m7_23  [key=2, style=dotted];
m7_185 -> m7_186  [key=0, style=solid];
m7_185 -> m7_187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_186 -> m7_184  [key=0, style=bold, color=blue];
m7_136 -> m7_137  [key=0, style=solid];
m7_138 -> m7_23  [key=2, style=dotted];
m7_138 -> m7_139  [key=0, style=solid];
m7_138 -> m7_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_137 -> m7_138  [key=0, style=solid];
m7_137 -> m7_141  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_139 -> m7_136  [key=0, style=bold, color=blue];
m7_11 -> m7_12  [key=0, style=solid, color=green];
m7_12 -> m7_13  [key=0, style=solid, color=green];
m7_12 -> m7_4  [key=2, style=dotted, color=green];
m7_12 -> m7_15  [key=1, style=dashed, color=green, label="lambda expression"];
m7_13 -> m7_14  [key=0, style=solid, color=green];
m7_13 -> m7_5  [key=2, style=dotted, color=green];
m7_14 -> m7_11  [key=0, style=bold, color=blue];
m7_35 -> m7_36  [key=0, style=solid, color=green];
m7_36 -> m7_37  [key=0, style=solid, color=green];
m7_36 -> m7_23  [key=2, style=dotted, color=green];
m7_36 -> m7_38  [key=1, style=dashed, color=green, label="lambda expression"];
m7_37 -> m7_35  [key=0, style=bold, color=blue];
m7_222 -> m7_223  [key=0, style=solid];
m7_224 -> m7_23  [key=2, style=dotted];
m7_224 -> m7_225  [key=0, style=solid];
m7_224 -> m7_226  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_223 -> m7_224  [key=0, style=solid];
m7_223 -> m7_227  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_225 -> m7_222  [key=0, style=bold, color=blue];
m7_20 -> m7_21  [key=0, style=solid, color=green];
m7_21 -> m7_22  [key=0, style=solid, color=green];
m7_21 -> m7_23  [key=2, style=dotted, color=green];
m7_21 -> m7_24  [key=1, style=dashed, color=green, label="lambda expression"];
m7_22 -> m7_20  [key=0, style=bold, color=blue];
m7_255 -> m7_256  [key=0, style=solid];
m7_257 -> m7_23  [key=2, style=dotted];
m7_257 -> m7_258  [key=0, style=solid];
m7_257 -> m7_259  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_256 -> m7_257  [key=0, style=solid];
m7_256 -> m7_260  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_258 -> m7_255  [key=0, style=bold, color=blue];
m7_161 -> m7_162  [key=0, style=solid];
m7_162 -> m7_23  [key=2, style=dotted];
m7_162 -> m7_163  [key=0, style=solid];
m7_162 -> m7_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_163 -> m7_161  [key=0, style=bold, color=blue];
m7_150 -> m7_151  [key=0, style=solid];
m7_151 -> m7_23  [key=2, style=dotted];
m7_151 -> m7_152  [key=0, style=solid];
m7_151 -> m7_153  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_152 -> m7_150  [key=0, style=bold, color=blue];
m7_243 -> m7_244  [key=0, style=solid];
m7_245 -> m7_23  [key=2, style=dotted];
m7_245 -> m7_246  [key=0, style=solid];
m7_245 -> m7_247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_244 -> m7_245  [key=0, style=solid];
m7_244 -> m7_249  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_246 -> m7_243  [key=0, style=bold, color=blue];
m7_195 -> m7_196  [key=0, style=solid];
m7_197 -> m7_23  [key=2, style=dotted];
m7_197 -> m7_198  [key=0, style=solid];
m7_197 -> m7_199  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_196 -> m7_197  [key=0, style=solid];
m7_196 -> m7_200  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_198 -> m7_195  [key=0, style=bold, color=blue];
m7_85 -> m7_86  [key=0, style=solid];
m7_87 -> m7_23  [key=2, style=dotted];
m7_87 -> m7_88  [key=0, style=solid];
m7_87 -> m7_89  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_86 -> m7_87  [key=0, style=solid];
m7_86 -> m7_90  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_88 -> m7_85  [key=0, style=bold, color=blue];
m7_269 -> m7_270  [key=0, style=solid];
m7_270 -> m7_23  [key=2, style=dotted];
m7_270 -> m7_271  [key=0, style=solid];
m7_270 -> m7_272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_271 -> m7_269  [key=0, style=bold, color=blue];
m7_113 -> m7_114  [key=0, style=solid];
m7_115 -> m7_23  [key=2, style=dotted];
m7_115 -> m7_116  [key=0, style=solid];
m7_115 -> m7_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_114 -> m7_115  [key=0, style=solid];
m7_114 -> m7_118  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_116 -> m7_113  [key=0, style=bold, color=blue];
m7_272 -> m7_273  [key=0, style=solid];
m7_272 -> m7_275  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_272 -> m7_274  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_6 -> m7_7  [key=0, style=solid, color=green];
m7_7 -> m7_8  [key=0, style=solid, color=green];
m7_7 -> m7_9  [key=2, style=dotted, color=green];
m7_7 -> m7_10  [key=2, style=dotted, color=green];
m7_8 -> m7_6  [key=0, style=bold, color=blue];
m7_15 -> m7_16  [key=0, style=solid, color=green];
m7_16 -> m7_17  [key=0, style=solid, color=green];
m7_16 -> m7_9  [key=2, style=dotted, color=green];
m7_16 -> m7_18  [key=2, style=dotted, color=green];
m7_16 -> m7_19  [key=2, style=dotted, color=green];
m7_17 -> m7_15  [key=0, style=bold, color=blue];
m7_24 -> m7_25  [key=0, style=solid, color=green];
m7_25 -> m7_26  [key=0, style=solid, color=green];
m7_25 -> m7_29  [key=2, style=dotted, color=green];
m7_25 -> m7_31  [key=1, style=dashed, color=green, label=queue];
m7_26 -> m7_27  [key=0, style=solid, color=green];
m7_26 -> m7_4  [key=2, style=dotted, color=green];
m7_26 -> m7_30  [key=1, style=dashed, color=green, label="lambda expression"];
m7_31 -> m7_32  [key=0, style=solid, color=green];
m7_31 -> m7_33  [key=2, style=dotted, color=green];
m7_31 -> m7_34  [key=2, style=dotted, color=green];
m7_27 -> m7_28  [key=0, style=solid, color=green];
m7_27 -> m7_5  [key=2, style=dotted, color=green];
m7_30 -> m7_31  [key=0, style=solid, color=green];
m7_32 -> m7_30  [key=0, style=bold, color=blue];
m7_28 -> m7_24  [key=0, style=bold, color=blue];
m7_38 -> m7_39  [key=0, style=solid, color=green];
m7_39 -> m7_40  [key=0, style=solid, color=green];
m7_39 -> m7_29  [key=2, style=dotted, color=green];
m7_39 -> m7_44  [key=1, style=dashed, color=green, label=queue];
m7_40 -> m7_41  [key=0, style=solid, color=green];
m7_40 -> m7_4  [key=2, style=dotted, color=green];
m7_40 -> m7_43  [key=1, style=dashed, color=green, label="lambda expression"];
m7_44 -> m7_45  [key=0, style=solid, color=green];
m7_44 -> m7_33  [key=2, style=dotted, color=green];
m7_44 -> m7_34  [key=2, style=dotted, color=green];
m7_41 -> m7_42  [key=0, style=solid, color=green];
m7_41 -> m7_5  [key=2, style=dotted, color=green];
m7_43 -> m7_44  [key=0, style=solid, color=green];
m7_45 -> m7_43  [key=0, style=bold, color=blue];
m7_42 -> m7_38  [key=0, style=bold, color=blue];
m7_49 -> m7_50  [key=0, style=solid, color=green];
m7_49 -> m7_52  [key=1, style=dashed, color=green, label=SqlConnection];
m7_50 -> m7_51  [key=0, style=solid, color=green];
m7_50 -> m7_55  [key=2, style=dotted, color=green];
m7_50 -> m7_53  [key=1, style=dashed, color=green, label=cts];
m7_50 -> m7_58  [key=1, style=dashed, color=green, label=cts];
m7_51 -> m7_52  [key=0, style=solid, color=green];
m7_51 -> m7_56  [key=2, style=dotted, color=green];
m7_53 -> m7_54  [key=0, style=solid, color=green];
m7_53 -> m7_4  [key=2, style=dotted, color=green];
m7_53 -> m7_57  [key=1, style=dashed, color=green, label="lambda expression"];
m7_58 -> m7_59  [key=0, style=solid, color=green];
m7_58 -> m7_34  [key=2, style=dotted, color=green];
m7_52 -> m7_53  [key=0, style=solid, color=green];
m7_52 -> m7_29  [key=2, style=dotted, color=green];
m7_52 -> m7_58  [key=1, style=dashed, color=green, label=queue];
m7_54 -> m7_49  [key=0, style=bold, color=blue];
m7_57 -> m7_58  [key=0, style=solid, color=green];
m7_59 -> m7_57  [key=0, style=bold, color=blue];
m7_66 -> m7_4  [key=2, style=dotted];
m7_66 -> m7_67  [key=0, style=solid];
m7_66 -> m7_69  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_121 -> m7_4  [key=2, style=dotted];
m7_121 -> m7_122  [key=0, style=solid];
m7_121 -> m7_84  [key=2, style=dotted];
m7_131 -> m7_4  [key=2, style=dotted];
m7_131 -> m7_132  [key=0, style=solid];
m7_131 -> m7_133  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_155 -> m7_4  [key=2, style=dotted];
m7_155 -> m7_156  [key=0, style=solid];
m7_155 -> m7_158  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_166 -> m7_4  [key=2, style=dotted];
m7_166 -> m7_167  [key=0, style=solid];
m7_166 -> m7_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_179 -> m7_4  [key=2, style=dotted];
m7_179 -> m7_180  [key=0, style=solid];
m7_179 -> m7_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_190 -> m7_4  [key=2, style=dotted];
m7_190 -> m7_191  [key=0, style=solid];
m7_190 -> m7_192  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_216 -> m7_4  [key=2, style=dotted];
m7_216 -> m7_217  [key=0, style=solid];
m7_216 -> m7_84  [key=2, style=dotted];
m7_216 -> m7_218  [key=1, style=dashed, color=darkseagreen4, label=fetchedAt];
m7_240 -> m7_4  [key=2, style=dotted];
m7_240 -> m7_241  [key=0, style=solid];
m7_240 -> m7_84  [key=2, style=dotted];
m7_250 -> m7_4  [key=2, style=dotted];
m7_250 -> m7_251  [key=0, style=solid];
m7_250 -> m7_252  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_80 -> m7_5  [key=2, style=dotted];
m7_80 -> m7_81  [key=0, style=solid];
m7_81 -> m7_5  [key=2, style=dotted];
m7_81 -> m7_82  [key=0, style=solid];
m7_145 -> m7_5  [key=2, style=dotted];
m7_145 -> m7_146  [key=0, style=solid];
m7_148 -> m7_5  [key=2, style=dotted];
m7_148 -> m7_149  [key=0, style=solid];
m7_156 -> m7_5  [key=2, style=dotted];
m7_156 -> m7_157  [key=0, style=solid];
m7_167 -> m7_5  [key=2, style=dotted];
m7_167 -> m7_168  [key=0, style=solid];
m7_203 -> m7_5  [key=2, style=dotted];
m7_203 -> m7_204  [key=0, style=solid];
m7_204 -> m7_5  [key=2, style=dotted];
m7_204 -> m7_205  [key=0, style=solid];
m7_205 -> m7_5  [key=2, style=dotted];
m7_205 -> m7_206  [key=0, style=solid];
m7_264 -> m7_5  [key=2, style=dotted];
m7_264 -> m7_265  [key=0, style=solid];
m7_267 -> m7_5  [key=2, style=dotted];
m7_267 -> m7_268  [key=0, style=solid];
m7_276 -> m7_5  [key=2, style=dotted];
m7_276 -> m7_277  [key=0, style=solid];
m7_276 -> m7_281  [key=2, style=dotted];
m7_277 -> m7_5  [key=2, style=dotted];
m7_277 -> m7_278  [key=0, style=solid];
m7_65 -> m7_29  [key=2, style=dotted];
m7_65 -> m7_66  [key=0, style=solid];
m7_65 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_78 -> m7_29  [key=2, style=dotted];
m7_78 -> m7_79  [key=0, style=solid];
m7_91 -> m7_29  [key=2, style=dotted];
m7_91 -> m7_92  [key=0, style=solid];
m7_107 -> m7_29  [key=2, style=dotted];
m7_107 -> m7_108  [key=0, style=solid];
m7_119 -> m7_29  [key=2, style=dotted];
m7_119 -> m7_120  [key=0, style=solid];
m7_129 -> m7_29  [key=2, style=dotted];
m7_129 -> m7_131  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_129 -> m7_130  [key=0, style=solid];
m7_129 -> m7_134  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_142 -> m7_29  [key=2, style=dotted];
m7_142 -> m7_143  [key=0, style=solid];
m7_142 -> m7_146  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_154 -> m7_29  [key=2, style=dotted];
m7_154 -> m7_155  [key=0, style=solid];
m7_154 -> m7_159  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_165 -> m7_29  [key=2, style=dotted];
m7_165 -> m7_166  [key=0, style=solid];
m7_165 -> m7_170  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_178 -> m7_29  [key=2, style=dotted];
m7_178 -> m7_179  [key=0, style=solid];
m7_178 -> m7_182  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_189 -> m7_29  [key=2, style=dotted];
m7_189 -> m7_190  [key=0, style=solid];
m7_189 -> m7_193  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_201 -> m7_29  [key=2, style=dotted];
m7_201 -> m7_202  [key=0, style=solid];
m7_213 -> m7_29  [key=2, style=dotted];
m7_213 -> m7_214  [key=0, style=solid];
m7_228 -> m7_29  [key=2, style=dotted];
m7_228 -> m7_229  [key=0, style=solid];
m7_238 -> m7_29  [key=2, style=dotted];
m7_238 -> m7_239  [key=0, style=solid];
m7_248 -> m7_29  [key=2, style=dotted];
m7_248 -> m7_250  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_248 -> m7_249  [key=0, style=solid];
m7_248 -> m7_253  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_261 -> m7_29  [key=2, style=dotted];
m7_261 -> m7_262  [key=0, style=solid];
m7_261 -> m7_265  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_273 -> m7_29  [key=2, style=dotted];
m7_273 -> m7_274  [key=0, style=solid];
m7_79 -> m7_33  [key=2, style=dotted];
m7_79 -> m7_34  [key=2, style=dotted];
m7_79 -> m7_80  [key=0, style=solid];
m7_79 -> m7_81  [key=1, style=dashed, color=darkseagreen4, label=payload];
m7_92 -> m7_33  [key=2, style=dotted];
m7_92 -> m7_34  [key=2, style=dotted];
m7_92 -> m7_93  [key=0, style=solid];
m7_108 -> m7_33  [key=2, style=dotted];
m7_108 -> m7_34  [key=2, style=dotted];
m7_108 -> m7_109  [key=0, style=solid];
m7_120 -> m7_33  [key=2, style=dotted];
m7_120 -> m7_34  [key=2, style=dotted];
m7_120 -> m7_121  [key=0, style=solid];
m7_134 -> m7_33  [key=2, style=dotted];
m7_134 -> m7_34  [key=2, style=dotted];
m7_134 -> m7_135  [key=0, style=solid];
m7_143 -> m7_33  [key=2, style=dotted];
m7_143 -> m7_34  [key=2, style=dotted];
m7_143 -> m7_145  [key=1, style=dashed, color=darkseagreen4, label=critical];
m7_143 -> m7_144  [key=0, style=solid];
m7_146 -> m7_33  [key=2, style=dotted];
m7_146 -> m7_34  [key=2, style=dotted];
m7_146 -> m7_148  [key=1, style=dashed, color=darkseagreen4, label="@default"];
m7_146 -> m7_147  [key=0, style=solid];
m7_159 -> m7_33  [key=2, style=dotted];
m7_159 -> m7_34  [key=2, style=dotted];
m7_159 -> m7_160  [key=0, style=solid];
m7_170 -> m7_33  [key=2, style=dotted];
m7_170 -> m7_34  [key=2, style=dotted];
m7_170 -> m7_171  [key=0, style=solid];
m7_202 -> m7_33  [key=2, style=dotted];
m7_202 -> m7_34  [key=2, style=dotted];
m7_202 -> m7_203  [key=0, style=solid];
m7_202 -> m7_204  [key=1, style=dashed, color=darkseagreen4, label=payload];
m7_202 -> m7_205  [key=1, style=dashed, color=darkseagreen4, label=payload];
m7_214 -> m7_33  [key=2, style=dotted];
m7_214 -> m7_34  [key=2, style=dotted];
m7_214 -> m7_216  [key=1, style=dashed, color=darkseagreen4, label=payload];
m7_214 -> m7_215  [key=0, style=solid];
m7_229 -> m7_33  [key=2, style=dotted];
m7_229 -> m7_34  [key=2, style=dotted];
m7_229 -> m7_230  [key=0, style=solid];
m7_239 -> m7_33  [key=2, style=dotted];
m7_239 -> m7_34  [key=2, style=dotted];
m7_239 -> m7_240  [key=0, style=solid];
m7_253 -> m7_33  [key=2, style=dotted];
m7_253 -> m7_34  [key=2, style=dotted];
m7_253 -> m7_254  [key=0, style=solid];
m7_262 -> m7_33  [key=2, style=dotted];
m7_262 -> m7_34  [key=2, style=dotted];
m7_262 -> m7_264  [key=1, style=dashed, color=darkseagreen4, label=critical];
m7_262 -> m7_263  [key=0, style=solid];
m7_265 -> m7_33  [key=2, style=dotted];
m7_265 -> m7_34  [key=2, style=dotted];
m7_265 -> m7_267  [key=1, style=dashed, color=darkseagreen4, label="@default"];
m7_265 -> m7_266  [key=0, style=solid];
m7_70 -> m7_34  [key=2, style=dotted];
m7_70 -> m7_71  [key=0, style=solid];
m7_182 -> m7_34  [key=2, style=dotted];
m7_182 -> m7_183  [key=0, style=solid];
m7_193 -> m7_34  [key=2, style=dotted];
m7_193 -> m7_194  [key=0, style=solid];
m7_176 -> m7_55  [key=2, style=dotted];
m7_176 -> m7_179  [key=1, style=dashed, color=darkseagreen4, label=cts];
m7_176 -> m7_182  [key=1, style=dashed, color=darkseagreen4, label=cts];
m7_176 -> m7_177  [key=0, style=solid];
m7_177 -> m7_56  [key=2, style=dotted];
m7_177 -> m7_178  [key=0, style=solid];
m7_64 -> m7_66  [key=1, style=dashed, color=darkseagreen4, label=cts];
m7_64 -> m7_65  [key=0, style=solid];
m7_64 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label=cts];
m7_64 -> m7_68  [key=2, style=dotted];
m7_67 -> m7_63  [key=0, style=bold, color=blue];
m7_69 -> m7_70  [key=0, style=solid];
m7_117 -> m7_121  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_117 -> m7_119  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_117 -> m7_118  [key=0, style=solid];
m7_122 -> m7_123  [key=0, style=solid];
m7_122 -> m7_100  [key=2, style=dotted];
m7_130 -> m7_131  [key=0, style=solid];
m7_130 -> m7_97  [key=2, style=dotted];
m7_132 -> m7_128  [key=0, style=bold, color=blue];
m7_133 -> m7_134  [key=0, style=solid];
m7_158 -> m7_159  [key=0, style=solid];
m7_169 -> m7_170  [key=0, style=solid];
m7_180 -> m7_175  [key=0, style=bold, color=blue];
m7_181 -> m7_182  [key=0, style=solid];
m7_188 -> m7_190  [key=1, style=dashed, color=darkseagreen4, label=cts];
m7_188 -> m7_189  [key=0, style=solid];
m7_188 -> m7_193  [key=1, style=dashed, color=darkseagreen4, label=cts];
m7_188 -> m7_68  [key=2, style=dotted];
m7_191 -> m7_187  [key=0, style=bold, color=blue];
m7_192 -> m7_193  [key=0, style=solid];
m7_211 -> m7_216  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_211 -> m7_213  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_211 -> m7_212  [key=0, style=solid];
m7_215 -> m7_216  [key=0, style=solid];
m7_215 -> m7_98  [key=2, style=dotted];
m7_217 -> m7_218  [key=0, style=solid];
m7_217 -> m7_98  [key=2, style=dotted];
m7_218 -> m7_219  [key=0, style=solid];
m7_218 -> m7_220  [key=2, style=dotted];
m7_218 -> m7_221  [key=2, style=dotted];
m7_236 -> m7_240  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_236 -> m7_238  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_236 -> m7_237  [key=0, style=solid];
m7_241 -> m7_242  [key=0, style=solid];
m7_241 -> m7_100  [key=2, style=dotted];
m7_249 -> m7_250  [key=0, style=solid];
m7_249 -> m7_97  [key=2, style=dotted];
m7_251 -> m7_247  [key=0, style=bold, color=blue];
m7_252 -> m7_253  [key=0, style=solid];
m7_82 -> m7_76  [key=0, style=bold, color=blue];
m7_144 -> m7_145  [key=0, style=solid];
m7_144 -> m7_98  [key=2, style=dotted];
m7_147 -> m7_148  [key=0, style=solid];
m7_147 -> m7_98  [key=2, style=dotted];
m7_149 -> m7_140  [key=0, style=bold, color=blue];
m7_157 -> m7_153  [key=0, style=bold, color=blue];
m7_168 -> m7_164  [key=0, style=bold, color=blue];
m7_200 -> m7_203  [key=1, style=dashed, color=darkseagreen4, label=id];
m7_200 -> m7_201  [key=0, style=solid];
m7_200 -> m7_84  [key=2, style=dotted];
m7_200 -> m7_83  [key=2, style=dotted];
m7_206 -> m7_199  [key=0, style=bold, color=blue];
m7_263 -> m7_264  [key=0, style=solid];
m7_263 -> m7_98  [key=2, style=dotted];
m7_266 -> m7_267  [key=0, style=solid];
m7_266 -> m7_98  [key=2, style=dotted];
m7_268 -> m7_259  [key=0, style=bold, color=blue];
m7_275 -> m7_276  [key=0, style=solid];
m7_275 -> m7_277  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_275 -> m7_84  [key=2, style=dotted];
m7_275 -> m7_83  [key=2, style=dotted];
m7_275 -> m7_278  [key=1, style=dashed, color=darkseagreen4, label=record];
m7_278 -> m7_279  [key=0, style=solid];
m7_278 -> m7_100  [key=2, style=dotted];
m7_63 -> m7_65  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_63 -> m7_64  [key=0, style=solid];
m7_76 -> m7_78  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_76 -> m7_77  [key=0, style=solid];
m7_89 -> m7_91  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_89 -> m7_90  [key=0, style=solid];
m7_89 -> m7_94  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_105 -> m7_107  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_105 -> m7_106  [key=0, style=solid];
m7_128 -> m7_129  [key=0, style=solid];
m7_128 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_140 -> m7_142  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_140 -> m7_141  [key=0, style=solid];
m7_153 -> m7_154  [key=0, style=solid];
m7_164 -> m7_165  [key=0, style=solid];
m7_175 -> m7_178  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_175 -> m7_176  [key=0, style=solid];
m7_187 -> m7_189  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_187 -> m7_188  [key=0, style=solid];
m7_199 -> m7_201  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_199 -> m7_200  [key=0, style=solid];
m7_226 -> m7_228  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_226 -> m7_227  [key=0, style=solid];
m7_247 -> m7_248  [key=0, style=solid];
m7_247 -> m7_249  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_259 -> m7_261  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
m7_259 -> m7_260  [key=0, style=solid];
m7_77 -> m7_78  [key=0, style=solid];
m7_77 -> m7_84  [key=2, style=dotted];
m7_77 -> m7_83  [key=2, style=dotted];
m7_90 -> m7_91  [key=0, style=solid];
m7_90 -> m7_97  [key=2, style=dotted];
m7_106 -> m7_107  [key=0, style=solid];
m7_106 -> m7_111  [key=2, style=dotted];
m7_106 -> m7_97  [key=2, style=dotted];
m7_118 -> m7_119  [key=0, style=solid];
m7_118 -> m7_97  [key=2, style=dotted];
m7_141 -> m7_142  [key=0, style=solid];
m7_141 -> m7_97  [key=2, style=dotted];
m7_212 -> m7_213  [key=0, style=solid];
m7_212 -> m7_97  [key=2, style=dotted];
m7_227 -> m7_228  [key=0, style=solid];
m7_227 -> m7_111  [key=2, style=dotted];
m7_227 -> m7_97  [key=2, style=dotted];
m7_237 -> m7_238  [key=0, style=solid];
m7_237 -> m7_97  [key=2, style=dotted];
m7_260 -> m7_261  [key=0, style=solid];
m7_260 -> m7_97  [key=2, style=dotted];
m7_274 -> m7_275  [key=0, style=solid];
m7_274 -> m7_280  [key=2, style=dotted];
m7_93 -> m7_94  [key=0, style=solid];
m7_93 -> m7_98  [key=2, style=dotted];
m7_109 -> m7_110  [key=0, style=solid];
m7_109 -> m7_112  [key=2, style=dotted];
m7_135 -> m7_133  [key=0, style=bold, color=blue];
m7_160 -> m7_158  [key=0, style=bold, color=blue];
m7_171 -> m7_169  [key=0, style=bold, color=blue];
m7_230 -> m7_231  [key=0, style=solid];
m7_230 -> m7_112  [key=2, style=dotted];
m7_254 -> m7_252  [key=0, style=bold, color=blue];
m7_71 -> m7_69  [key=0, style=bold, color=blue];
m7_183 -> m7_181  [key=0, style=bold, color=blue];
m7_194 -> m7_192  [key=0, style=bold, color=blue];
m7_123 -> m7_117  [key=0, style=bold, color=blue];
m7_219 -> m7_211  [key=0, style=bold, color=blue];
m7_242 -> m7_236  [key=0, style=bold, color=blue];
m7_279 -> m7_272  [key=0, style=bold, color=blue];
m7_96 -> m7_89  [key=0, style=bold, color=blue];
m7_94 -> m7_83  [key=2, style=dotted];
m7_94 -> m7_95  [key=0, style=solid];
m7_94 -> m7_99  [key=2, style=dotted];
m7_110 -> m7_105  [key=0, style=bold, color=blue];
m7_95 -> m7_100  [key=2, style=dotted];
m7_95 -> m7_96  [key=0, style=solid];
m7_231 -> m7_226  [key=0, style=bold, color=blue];
m7_33 -> m7_282  [key=0, style=solid];
m7_282 -> m7_283  [key=0, style=solid];
m7_282 -> m7_285  [key=2, style=dotted];
m7_282 -> m7_286  [key=2, style=dotted];
m7_283 -> m7_284  [key=0, style=solid];
m7_284 -> m7_33  [key=0, style=bold, color=blue];
m7_60 -> m7_61  [key=0, style=solid];
m7_61 -> m7_23  [key=2, style=dotted];
m7_61 -> m7_62  [key=0, style=solid];
m7_61 -> m7_63  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_62 -> m7_60  [key=0, style=bold, color=blue];
m7_124 -> m7_125  [key=0, style=solid];
m7_126 -> m7_23  [key=2, style=dotted];
m7_126 -> m7_127  [key=0, style=solid];
m7_126 -> m7_128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_125 -> m7_126  [key=0, style=solid];
m7_125 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_127 -> m7_124  [key=0, style=bold, color=blue];
m7_29 -> m7_289  [key=0, style=solid];
m7_29 -> m7_290  [key=1, style=dashed, color=darkseagreen4, label=bool];
m7_290 -> m7_9  [key=2, style=dotted];
m7_290 -> m7_10  [key=2, style=dotted];
m7_290 -> m7_291  [key=0, style=solid];
m7_289 -> m7_290  [key=0, style=solid];
m7_289 -> m7_292  [key=2, style=dotted];
m7_291 -> m7_29  [key=0, style=bold, color=blue];
m7_72 -> m7_73  [key=0, style=solid];
m7_74 -> m7_23  [key=2, style=dotted];
m7_74 -> m7_75  [key=0, style=solid];
m7_74 -> m7_76  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m7_73 -> m7_74  [key=0, style=solid];
m7_73 -> m7_77  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_75 -> m7_72  [key=0, style=bold, color=blue];
m7_46 -> m7_47  [key=0, style=solid, color=green];
m7_47 -> m7_48  [key=0, style=solid, color=green];
m7_47 -> m7_23  [key=2, style=dotted, color=green];
m7_47 -> m7_49  [key=1, style=dashed, color=green, label="lambda expression"];
m7_48 -> m7_46  [key=0, style=bold, color=blue];
m7_299 -> m7_21  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_36  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_47  [key=1, style=dashed, color=green, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_61  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_74  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_103  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_115  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_126  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_138  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_151  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_162  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_173  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_185  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_197  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_209  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_224  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_234  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_245  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_257  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_299 -> m7_270  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts"];
m7_300 -> m7_31  [key=1, style=dashed, color=green, label=queue];
m7_301 -> m7_44  [key=1, style=dashed, color=green, label=queue];
m7_302 -> m7_58  [key=1, style=dashed, color=green, label=cts];
m7_303 -> m7_58  [key=1, style=dashed, color=green, label=queue];
m7_311 -> m7_134  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_313 -> m7_159  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_314 -> m7_170  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_324 -> m7_253  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_304 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label=cts];
m7_305 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_315 -> m7_182  [key=1, style=dashed, color=darkseagreen4, label=cts];
m7_316 -> m7_182  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_317 -> m7_193  [key=1, style=dashed, color=darkseagreen4, label=cts];
m7_318 -> m7_193  [key=1, style=dashed, color=darkseagreen4, label=queue];
m7_310 -> m7_130  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_323 -> m7_249  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_319 -> m7_200  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_306 -> m7_77  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_307 -> m7_90  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_308 -> m7_106  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_309 -> m7_118  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_312 -> m7_141  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_320 -> m7_212  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_321 -> m7_227  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_322 -> m7_237  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m7_325 -> m7_260  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
m9_0 -> m9_1  [key=0, style=solid, color=green];
m9_0 -> m9_3  [key=1, style=dashed, color=green, label="params string[]"];
m9_0 -> m9_5  [key=1, style=dashed, color=green, label="System.Action<ConnectionFactory>"];
m9_0 -> m9_7  [key=1, style=dashed, color=green, label="System.Action<ConnectionFactory>"];
m9_0 -> m9_8  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerStorage"];
m9_0 -> m9_9  [key=1, style=dashed, color=green, label="HangFire.SqlServer.SqlServerStorage"];
m9_0 -> m9_0  [key=3, color=darkorchid, style=bold, label="method methodReturn HangFire.SqlServer.SqlServerStorage UseRabbitMq"];
m9_1 -> m9_2  [key=0, style=solid, color=green];
m9_1 -> m9_3  [key=0, style=solid, color=green];
m9_2 -> m9_10  [key=0, style=solid, color=green];
m9_2 -> m9_11  [key=2, style=dotted, color=green];
m9_3 -> m9_4  [key=0, style=solid, color=green];
m9_3 -> m9_5  [key=0, style=solid, color=green];
m9_4 -> m9_10  [key=0, style=solid, color=green];
m9_4 -> m9_11  [key=2, style=dotted, color=green];
m9_5 -> m9_6  [key=0, style=solid, color=green];
m9_5 -> m9_7  [key=0, style=solid, color=green];
m9_6 -> m9_10  [key=0, style=solid, color=green];
m9_6 -> m9_11  [key=2, style=dotted, color=green];
m9_7 -> m9_8  [key=0, style=solid, color=green];
m9_7 -> m9_12  [key=2, style=dotted, color=green];
m9_8 -> m9_9  [key=0, style=solid, color=green];
m9_8 -> m9_13  [key=2, style=dotted, color=green];
m9_9 -> m9_10  [key=0, style=solid, color=green];
m9_10 -> m9_0  [key=0, style=bold, color=blue];
}
