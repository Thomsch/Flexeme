digraph  {
m0_4 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.RabbitMqChannel(System.Collections.Generic.IEnumerable<string>)", file="CleanRabbitMqQueueAttribute.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.RabbitMqChannel(System.Collections.Generic.IEnumerable<string>)", span="10-10"];
m0_5 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.CreateQueue()", file="CleanRabbitMqQueueAttribute.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqChannel.CreateQueue()", span="18-18"];
m0_6 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="CleanRabbitMqQueueAttribute.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", span="20-20"];
m0_7 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs", label="Monitor.Enter(GlobalLock)", prediction=0, span="22-22"];
m0_8 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs", label=_queues, prediction=1, span="23-23"];
m0_10 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs", label="_rabbitMq.Channel.QueuePurge(queue)", prediction=1, span="26-26"];
m0_9 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs", label="_rabbitMq.Channel.QueueDeclare(queue, true, false, false, null)", prediction=1, span="25-25"];
m0_11 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs", label="_rabbitMq.Dispose()", prediction=1, span="28-28"];
m0_12 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", file="CleanRabbitMqQueueAttribute.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.Before(System.Reflection.MethodInfo)", span="20-20"];
m0_17 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", file="CleanRabbitMqQueueAttribute.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", span="31-31"];
m0_18 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs", label="Monitor.Exit(GlobalLock)", prediction=5, span="33-33"];
m0_19 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", file="CleanRabbitMqQueueAttribute.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.After(System.Reflection.MethodInfo)", span="31-31"];
m0_20 [cluster="System.Threading.Monitor.Exit(object)", file="CleanRabbitMqQueueAttribute.cs", label="Entry System.Threading.Monitor.Exit(object)", span="0-0"];
m0_15 [cluster="Unk.QueuePurge", file="CleanRabbitMqQueueAttribute.cs", label="Entry Unk.QueuePurge", span=""];
m0_14 [cluster="Unk.QueueDeclare", file="CleanRabbitMqQueueAttribute.cs", label="Entry Unk.QueueDeclare", span=""];
m0_21 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="CleanRabbitMqQueueAttribute.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", span="36-36"];
m0_22 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs", label="return new RabbitMqChannel(queue).CreateQueue();", prediction=6, span="38-38"];
m0_23 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="CleanRabbitMqQueueAttribute.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", span="36-36"];
m0_16 [cluster="HangFire.RabbitMQ.RabbitMqJobQueue.Dispose()", file="CleanRabbitMqQueueAttribute.cs", label="Entry HangFire.RabbitMQ.RabbitMqJobQueue.Dispose()", span="82-82"];
m0_0 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="CleanRabbitMqQueueAttribute.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", span="14-14"];
m0_1 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs", label="_queues = queues", prediction=7, span="16-16"];
m0_2 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", color=green, community=0, file="CleanRabbitMqQueueAttribute.cs", label="_rabbitMq = new RabbitMqChannel(_queues).CreateQueue()", prediction=8, span="17-17"];
m0_3 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", file="CleanRabbitMqQueueAttribute.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.CleanRabbitMqQueueAttribute(params string[])", span="14-14"];
m0_13 [cluster="System.Threading.Monitor.Enter(object)", file="CleanRabbitMqQueueAttribute.cs", label="Entry System.Threading.Monitor.Enter(object)", span="0-0"];
m0_24 [file="CleanRabbitMqQueueAttribute.cs", label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", span=""];
m3_12 [cluster="System.TimeSpan.FromSeconds(double)", file="RabbitMqJobQueue.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m3_13 [cluster="System.TimeSpan.FromMinutes(double)", file="RabbitMqJobQueue.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m3_0 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RabbitMqJobQueue.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="30-30"];
m3_1 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs", label="TransactionIsolationLevel = null", prediction=9, span="32-32"];
m3_2 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs", label="QueuePollInterval = TimeSpan.FromSeconds(15)", prediction=10, span="33-33"];
m3_3 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs", label="UseInvisibilityTimeout = false", prediction=11, span="34-34"];
m3_4 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs", label="InvisibilityTimeout = TimeSpan.FromMinutes(30)", prediction=12, span="35-35"];
m3_5 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs", label="JobExpirationCheckInterval = TimeSpan.FromMinutes(30)", prediction=13, span="36-36"];
m3_6 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs", label="CountersAggregateInterval = TimeSpan.FromMinutes(5)", prediction=14, span="37-37"];
m3_7 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs", label="PrepareSchemaIfNecessary = true", prediction=15, span="38-38"];
m3_8 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs", label="DashboardJobListLimit = 10000", prediction=16, span="39-39"];
m3_9 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs", label="_schemaName = Constants.DefaultSchema", prediction=17, span="40-40"];
m3_10 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", color=green, community=0, file="RabbitMqJobQueue.cs", label="TransactionTimeout = TimeSpan.FromMinutes(1)", prediction=18, span="41-41"];
m3_11 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RabbitMqJobQueue.cs", label="Exit Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="30-30"];
m3_14 [file="RabbitMqJobQueue.cs", label="Hangfire.SqlServer.SqlServerStorageOptions", span=""];
m4_31 [cluster="HangFire.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.RabbitMQ.RabbitMqJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="40-40"];
m4_56 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", span="92-92"];
m4_57 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="RabbitMqUtils.EnqueueJobId(''my-queue'', ''job-id9'')", prediction=19, span="95-95"];
m4_58 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", prediction=20, span="97-97"];
m4_59 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var fetchedJob = queue.Dequeue(new[] {''my-queue''}, _token)", prediction=21, span="100-100"];
m4_60 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Assert.NotNull(fetchedJob)", prediction=22, span="103-103"];
m4_61 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var exception = Assert.Throws<TimeoutException>(\r\n                    () => RabbitMqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1)))", prediction=23, span="105-106"];
m4_62 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Assert.Equal(exception.Message, ''my-queue'')", prediction=24, span="108-108"];
m4_63 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_MakesJobInvisibleForOtherFetchers()", span="92-92"];
m4_32 [cluster="HangFire.Storage.IFetchedJob.RemoveFromQueue()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.Storage.IFetchedJob.RemoveFromQueue()", span="24-24"];
m4_69 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqUtils.DequeueJobId(string, System.TimeSpan)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqUtils.DequeueJobId(string, System.TimeSpan)", span="22-22"];
m4_9 [cluster="Unk.Equal", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.Equal", span=""];
m4_3 [cluster="System.Threading.CancellationToken.CancellationToken()", file="RabbitMqJobQueueFacts.cs", label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0"];
m4_41 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="68-68"];
m4_42 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", prediction=25, span="70-70"];
m4_43 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var token = new CancellationToken(true)", prediction=25, span="72-72"];
m4_44 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(new[] {''my-queue''}, token))", prediction=25, span="74-75"];
m4_45 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ThrowsCanceledException_WhenTokenHasBeenCancelled()", span="68-68"];
m4_14 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", span="26-26"];
m4_15 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RabbitMqJobQueue(new[]{''my-queue''}, null))", prediction=28, span="28-29"];
m4_16 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Assert.Equal(''factory'', exception.ParamName)", prediction=29, span="31-31"];
m4_17 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenFactoryIsNull()", span="26-26"];
m4_33 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", span="54-54"];
m4_34 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="RabbitMqUtils.EnqueueJobId(''my-queue'', ''job-id'')", prediction=30, span="56-56"];
m4_35 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", prediction=31, span="58-58"];
m4_36 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", prediction=32, span="60-60"];
m4_37 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="fetchedJob.RemoveFromQueue()", prediction=33, span="61-61"];
m4_38 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Assert.Equal(''job-id'', fetchedJob.JobId)", prediction=32, span="63-63"];
m4_39 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_WithJobId()", span="54-54"];
m4_21 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", span="35-35"];
m4_22 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", prediction=35, span="38-38"];
m4_23 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="queue.Enqueue(''my-queue'', ''job-id'')", prediction=36, span="41-41"];
m4_24 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", prediction=37, span="44-44"];
m4_25 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="fetchedJob.RemoveFromQueue()", prediction=38, span="45-45"];
m4_26 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var body = fetchedJob.JobId", prediction=39, span="47-47"];
m4_27 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Assert.Equal(''job-id'', body)", prediction=40, span="49-49"];
m4_28 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Enqueue_SendsTheJobId()", span="35-35"];
m4_8 [cluster="Unk.>", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.>", span=""];
m4_68 [cluster="System.TimeSpan.FromSeconds(double)", file="RabbitMqJobQueueFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m4_90 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", span="152-152"];
m4_91 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="RabbitMqUtils.EnqueueJobId(''my-queue'', ''job-id'')", prediction=41, span="155-155"];
m4_92 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", prediction=42, span="157-157"];
m4_93 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var fetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", prediction=43, span="160-160"];
m4_95 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var newFetchedJob = queue.Dequeue(new[] { ''my-queue'' }, _token)", prediction=44, span="164-164"];
m4_94 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="fetchedJob.Dispose()", prediction=45, span="161-161"];
m4_96 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Assert.Equal(''job-id'', newFetchedJob.JobId)", prediction=46, span="166-166"];
m4_97 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_CanBeDequeuedAgain()", span="152-152"];
m4_30 [cluster="HangFire.RabbitMQ.RabbitMqJobQueue.Enqueue(string, string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.RabbitMQ.RabbitMqJobQueue.Enqueue(string, string)", span="73-73"];
m4_64 [cluster="Unk.NotNull", file="RabbitMqJobQueueFacts.cs", label="Entry Unk.NotNull", span=""];
m4_50 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="80-80"];
m4_51 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="RabbitMqUtils.EnqueueJobId(''queue-2'', ''job-id'')", prediction=47, span="82-82"];
m4_52 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''queue-1'', ''queue-2'')", prediction=48, span="83-83"];
m4_53 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var fetchedJob = queue.Dequeue(new[] {''queue-1'', ''queue-2''}, _token)", prediction=49, span="85-85"];
m4_54 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Assert.Equal(''job-id'', fetchedJob.JobId)", prediction=50, span="87-87"];
m4_55 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Dequeue_ReturnsFetchedJob_FromOtherQueues_IfFirstAreEmpty()", span="80-80"];
m4_0 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RabbitMqJobQueueFacts()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RabbitMqJobQueueFacts()", span="11-11"];
m4_1 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RabbitMqJobQueueFacts()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="_token = new CancellationToken()", prediction=51, span="13-13"];
m4_2 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RabbitMqJobQueueFacts()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RabbitMqJobQueueFacts()", span="11-11"];
m4_70 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", span="113-113"];
m4_71 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="RabbitMqUtils.EnqueueJobId(''my-queue'', ''job-id'')", prediction=52, span="116-116"];
m4_72 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", prediction=53, span="117-117"];
m4_73 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var fetchedJob = queue.Dequeue(new[] {''my-queue''}, _token)", prediction=54, span="120-120"];
m4_74 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="fetchedJob.RemoveFromQueue()", prediction=55, span="122-122"];
m4_75 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var exception = Assert.Throws<TimeoutException>(\r\n                    () => RabbitMqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1)))", prediction=56, span="126-127"];
m4_76 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Assert.Equal(exception.Message, ''my-queue'')", prediction=57, span="129-129"];
m4_77 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.RemoveFromQueue_OnFetchedJob_RemovesTheJobCompletely()", span="113-113"];
m4_40 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqUtils.EnqueueJobId(string, string)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqUtils.EnqueueJobId(string, string)", span="9-9"];
m4_78 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="127-127"];
m4_10 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="20-20"];
m4_11 [cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="new RabbitMqJobQueue(null, null)", prediction=58, span="20-20"];
m4_12 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="20-20"];
m4_18 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="29-29"];
m4_19 [cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="new RabbitMqJobQueue(new[]{''my-queue''}, null)", prediction=59, span="29-29"];
m4_20 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="29-29"];
m4_48 [cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="queue.Dequeue(new[] {''my-queue''}, token)", prediction=25, span="75-75"];
m4_47 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="75-75"];
m4_49 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="75-75"];
m4_65 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Entry lambda expression", span="106-106"];
m4_66 [cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="RabbitMqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1))", prediction=61, span="106-106"];
m4_67 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="106-106"];
m4_79 [cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="RabbitMqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(1))", prediction=62, span="127-127"];
m4_80 [cluster="lambda expression", file="RabbitMqJobQueueFacts.cs", label="Exit lambda expression", span="127-127"];
m4_29 [cluster="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute.GetMessageQueue(params string[])", span="36-36"];
m4_46 [cluster="System.Threading.CancellationToken.CancellationToken(bool)", file="RabbitMqJobQueueFacts.cs", label="Entry System.Threading.CancellationToken.CancellationToken(bool)", span="0-0"];
m4_13 [cluster="HangFire.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.RabbitMQ.RabbitMqJobQueue.RabbitMqJobQueue(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", span="22-22"];
m4_81 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="134-134"];
m4_82 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="RabbitMqUtils.EnqueueJobId(''my-queue'', ''job-id'')", prediction=63, span="137-137"];
m4_83 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var queue = CleanRabbitMqQueueAttribute.GetMessageQueue(''my-queue'')", prediction=64, span="139-139"];
m4_84 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var fetchedJob = queue.Dequeue(new[] {''my-queue''}, _token)", prediction=65, span="142-142"];
m4_85 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="fetchedJob.Dispose()", prediction=66, span="143-143"];
m4_86 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var jobId = RabbitMqUtils.DequeueJobId(''my-queue'', TimeSpan.FromSeconds(5))", prediction=67, span="146-146"];
m4_87 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Assert.Equal(''job-id'', jobId)", prediction=68, span="147-147"];
m4_88 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.DisposeWithoutRemoval_OnFetchedJob_ReturnsTheJobToTheQueue()", span="134-134"];
m4_89 [cluster="System.IDisposable.Dispose()", file="RabbitMqJobQueueFacts.cs", label="Entry System.IDisposable.Dispose()", span="0-0"];
m4_4 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="17-17"];
m4_5 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new RabbitMqJobQueue(null, null))", prediction=69, span="19-20"];
m4_6 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", color=green, community=0, file="RabbitMqJobQueueFacts.cs", label="Assert.Equal(''queues'', exception.ParamName)", prediction=70, span="22-22"];
m4_7 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="RabbitMqJobQueueFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="17-17"];
m4_98 [file="RabbitMqJobQueueFacts.cs", label="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueFacts", span=""];
m4_99 [file="RabbitMqJobQueueFacts.cs", label=queue, span=""];
m4_100 [file="RabbitMqJobQueueFacts.cs", label=token, span=""];
m5_2 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="RabbitMqJobQueueProvider.cs", label="Entry HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", span="13-13"];
m5_3 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", color=green, community=0, file="RabbitMqJobQueueProvider.cs", label="WorkerNumber = workerNumber", prediction=71, span="16-16"];
m5_4 [cluster="HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", file="RabbitMqJobQueueProvider.cs", label="Exit HangFire.Server.WorkerContext.WorkerContext(HangFire.Server.ServerContext, int)", span="13-13"];
m5_5 [file="RabbitMqJobQueueProvider.cs", label="HangFire.Server.WorkerContext", span=""];
m6_7 [cluster="Unk.NotNull", file="RabbitMqJobQueueProviderFacts.cs", label="Entry Unk.NotNull", span=""];
m6_6 [cluster="HangFire.RabbitMQ.RabbitMqJobQueueProvider.GetJobQueue(IDbConnection)", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.RabbitMQ.RabbitMqJobQueueProvider.GetJobQueue(IDbConnection)", span="27-27"];
m6_13 [cluster="HangFire.RabbitMQ.RabbitMqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.RabbitMQ.RabbitMqJobQueueProvider.GetJobQueueMonitoringApi(IDbConnection)", span="32-32"];
m6_17 [cluster="HangFire.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, System.Action<ConnectionFactory>)", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, System.Action<ConnectionFactory>)", span="15-15"];
m6_8 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="23-23"];
m6_9 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs", label="var provider = CreateProvider()", prediction=72, span="25-25"];
m6_10 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs", label="var monitoring = provider.GetJobQueueMonitoringApi(null)", prediction=73, span="27-27"];
m6_11 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs", label="Assert.NotNull(monitoring)", prediction=74, span="29-29"];
m6_12 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="23-23"];
m6_5 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", span="32-32"];
m6_14 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs", label="Action<ConnectionFactory> configuration =\r\n                con =>\r\n                {\r\n                    con.HostName = HostName;\r\n                }", prediction=75, span="34-38"];
m6_15 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs", label="return new RabbitMqJobQueueProvider(Queue, configuration);", prediction=76, span="40-40"];
m6_16 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", span="32-32"];
m6_0 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="Entry HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="13-13"];
m6_1 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs", label="var provider = CreateProvider()", prediction=77, span="15-15"];
m6_2 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs", label="var jobQueue = provider.GetJobQueue(null)", prediction=78, span="17-17"];
m6_3 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs", label="Assert.NotNull(jobQueue)", prediction=79, span="19-19"];
m6_4 [cluster="HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="RabbitMqJobQueueProviderFacts.cs", label="Exit HangFire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="13-13"];
m6_18 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Entry lambda expression", span="35-38"];
m6_19 [cluster="lambda expression", color=green, community=0, file="RabbitMqJobQueueProviderFacts.cs", label="con.HostName = HostName", prediction=80, span="37-37"];
m6_20 [cluster="lambda expression", file="RabbitMqJobQueueProviderFacts.cs", label="Exit lambda expression", span="35-38"];
m7_0 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="17-17"];
m7_1 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerJobQueue(null, new SqlServerStorageOptions()))", prediction=81, span="19-20"];
m7_2 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''storage'', exception.ParamName)", prediction=82, span="22-22"];
m7_3 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="17-17"];
m7_220 [cluster="System.DateTime.AddMinutes(double)", file="RabbitMqMonitoringApi.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m7_23 [cluster="Unk.UseConnection", file="RabbitMqMonitoringApi.cs", label="Entry Unk.UseConnection", span=""];
m7_101 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", span="148-148"];
m7_103 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotEmpty(payload.JobId);\r\n            })", span="157-177"];
m7_102 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, dateadd(minute, -60, getutcdate()))\r\ninsert into HangFire.JobQueue (JobId, Queue, FetchedAt)\r\nvalues (scope_identity(), @queue, @fetchedAt)''", span="150-154"];
m7_104 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchTimedOutJobs_FromTheSpecifiedQueue()", span="148-148"];
m7_5 [cluster="Unk.Equal", file="RabbitMqMonitoringApi.cs", label="Entry Unk.Equal", span=""];
m7_207 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="361-361"];
m7_209 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotNull(payload);\r\n\r\n                var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.NotNull(fetchedAt);\r\n                Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1));\r\n            })", span="370-391"];
m7_208 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="363-367"];
m7_210 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="361-361"];
m7_10 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="30-30"];
m7_172 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="306-306"];
m7_173 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource();\r\n                cts.Cancel();\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", span="308-316"];
m7_174 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="306-306"];
m7_56 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="RabbitMqMonitoringApi.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m7_232 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="428-428"];
m7_234 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.Null(otherJobFetchedAt);\r\n            })", span="437-459"];
m7_233 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="430-434"];
m7_235 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="428-428"];
m7_184 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="320-320"];
m7_185 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource(200);\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", span="322-329"];
m7_186 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="320-320"];
m7_136 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", span="240-240"];
m7_138 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    });\r\n\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                var critical = (SqlServerTransactionJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(critical.JobId);\r\n                Assert.Equal(''critical'', critical.Queue);\r\n\r\n                var @default = (SqlServerTransactionJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(@default.JobId);\r\n                Assert.Equal(''default'', @default.Queue);\r\n            })", span="248-273"];
m7_137 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="242-246"];
m7_139 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", span="240-240"];
m7_285 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", file="RabbitMqMonitoringApi.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", span="0-0"];
m7_4 [cluster="Unk.>", file="RabbitMqMonitoringApi.cs", label="Entry Unk.>", span=""];
m7_9 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="40-40"];
m7_11 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="26-26"];
m7_12 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerJobQueue(new SqlServerStorage(ConnectionUtils.GetConnectionString()), null))", prediction=83, span="28-29"];
m7_13 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''options'', exception.ParamName)", prediction=84, span="31-31"];
m7_14 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="26-26"];
m7_35 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="49-49"];
m7_36 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", prediction=85, span="51-59"];
m7_37 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="49-49"];
m7_68 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(int)", file="RabbitMqMonitoringApi.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(int)", span="0-0"];
m7_222 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="395-395"];
m7_224 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotEmpty(payload.JobId);\r\n            })", span="404-424"];
m7_223 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue, FetchedAt)\r\nvalues (scope_identity(), @queue, @fetchedAt)''", span="397-401"];
m7_225 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="395-395"];
m7_286 [cluster="System.TimeSpan.FromSeconds(double)", file="RabbitMqMonitoringApi.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m7_20 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", span="35-35"];
m7_21 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => queue.Dequeue(null, CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", prediction=86, span="37-45"];
m7_22 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsNull()", span="35-35"];
m7_83 [cluster="Unk.Query", file="RabbitMqMonitoringApi.cs", label="Entry Unk.Query", span=""];
m7_255 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", span="487-487"];
m7_257 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    });\r\n\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                var critical = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(critical.JobId);\r\n                Assert.Equal(''critical'', critical.Queue);\r\n\r\n                var @default = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(@default.JobId);\r\n                Assert.Equal(''default'', @default.Queue);\r\n            })", span="495-520"];
m7_256 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="489-493"];
m7_258 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_FromMultipleQueues()", span="487-487"];
m7_280 [cluster="Unk.Enqueue", file="RabbitMqMonitoringApi.cs", label="Entry Unk.Enqueue", span=""];
m7_18 [cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="43-43"];
m7_161 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="292-292"];
m7_162 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", span="294-302"];
m7_163 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="292-292"];
m7_281 [cluster="Unk.ToString", file="RabbitMqMonitoringApi.cs", label="Entry Unk.ToString", span=""];
m7_111 [cluster="System.DateTime.AddDays(double)", file="RabbitMqMonitoringApi.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m7_98 [cluster="Unk.NotNull", file="RabbitMqMonitoringApi.cs", label="Entry Unk.NotNull", span=""];
m7_150 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsNull()", span="278-278"];
m7_151 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => queue.Dequeue(null, CreateTimingOutCancellationToken()));\r\n\r\n                Assert.Equal(''queues'', exception.ParamName);\r\n            })", span="280-288"];
m7_152 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsNull()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldThrowAnException_WhenQueuesCollectionIsNull()", span="278-278"];
m7_243 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="463-463"];
m7_245 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' });\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()));\r\n            })", span="471-483"];
m7_244 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="465-469"];
m7_246 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="463-463"];
m7_195 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", span="333-333"];
m7_197 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var id = (int)connection.Query(\r\n                    arrangeSql,\r\n                    new { jobId = 1, queue = ''default'' }).Single().Id;\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: true);\r\n\r\n                // Act\r\n                var payload = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.Equal(id, payload.Id);\r\n                Assert.Equal(''1'', payload.JobId);\r\n                Assert.Equal(''default'', payload.Queue);\r\n            })", span="341-357"];
m7_196 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@jobId, @queue);\r\nselect scope_identity() as Id;''", span="335-338"];
m7_198 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_InvisibilityTimeout_ShouldFetchAJob_FromTheSpecifiedQueue()", span="333-333"];
m7_85 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", span="118-118"];
m7_87 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotNull(payload);\r\n\r\n                var jobInQueue = connection.Query(''select * from HangFire.JobQueue'').SingleOrDefault();\r\n                Assert.Null(jobInQueue);\r\n            })", span="127-144"];
m7_86 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="120-124"];
m7_88 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldDeleteAJob()", span="118-118"];
m7_269 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", span="524-524"];
m7_270 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                queue.Enqueue(connection, ''default'', ''1'');\r\n\r\n                var record = connection.Query(''select * from HangFire.JobQueue'').Single();\r\n                Assert.Equal(''1'', record.JobId.ToString());\r\n                Assert.Equal(''default'', record.Queue);\r\n                Assert.Null(record.FetchedAt);\r\n            })", span="526-536"];
m7_271 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", span="524-524"];
m7_292 [cluster="SqlServerStorage.cstr", file="RabbitMqMonitoringApi.cs", label="Entry SqlServerStorage.cstr", span=""];
m7_100 [cluster="Unk.Null", file="RabbitMqMonitoringApi.cs", label="Entry Unk.Null", span=""];
m7_55 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="RabbitMqMonitoringApi.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m7_113 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="181-181"];
m7_115 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    });\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.Null(otherJobFetchedAt);\r\n            })", span="190-212"];
m7_114 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="183-187"];
m7_116 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="181-181"];
m7_272 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="526-536"];
m7_6 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="20-20"];
m7_7 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="new SqlServerJobQueue(null, new SqlServerStorageOptions())", prediction=87, span="20-20"];
m7_8 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="20-20"];
m7_15 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="29-29"];
m7_16 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="new SqlServerJobQueue(new SqlServerStorage(ConnectionUtils.GetConnectionString()), null)", prediction=88, span="29-29"];
m7_17 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="29-29"];
m7_24 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="37-45"];
m7_25 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", prediction=89, span="39-39"];
m7_26 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => queue.Dequeue(null, CreateTimingOutCancellationToken()))", prediction=90, span="41-42"];
m7_31 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="queue.Dequeue(null, CreateTimingOutCancellationToken())", prediction=89, span="42-42"];
m7_27 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''queues'', exception.ParamName)", prediction=92, span="44-44"];
m7_30 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="42-42"];
m7_32 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="42-42"];
m7_28 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="37-45"];
m7_38 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="51-59"];
m7_39 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", prediction=93, span="53-53"];
m7_40 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()))", prediction=94, span="55-56"];
m7_44 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="queue.Dequeue(new string[0], CreateTimingOutCancellationToken())", prediction=93, span="56-56"];
m7_41 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''queues'', exception.ParamName)", prediction=96, span="58-58"];
m7_43 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="56-56"];
m7_45 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="56-56"];
m7_42 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="51-59"];
m7_49 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="65-73"];
m7_50 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="var cts = new CancellationTokenSource()", prediction=97, span="67-67"];
m7_51 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="cts.Cancel()", prediction=98, span="68-68"];
m7_53 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", prediction=97, span="71-72"];
m7_58 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="queue.Dequeue(DefaultQueues, cts.Token)", prediction=97, span="72-72"];
m7_52 [cluster="lambda expression", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", prediction=97, span="69-69"];
m7_54 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="65-73"];
m7_57 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="72-72"];
m7_59 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="72-72"];
m7_66 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="84-85"];
m7_121 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single()", span="207-209"];
m7_131 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()))", span="232-235"];
m7_155 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => queue.Dequeue(null, CreateTimingOutCancellationToken()))", span="284-285"];
m7_166 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()))", span="298-299"];
m7_179 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="314-315"];
m7_190 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="327-328"];
m7_216 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single()", span="385-387"];
m7_240 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single()", span="454-456"];
m7_250 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()))", span="479-482"];
m7_80 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''1'', payload.JobId)", span="112-112"];
m7_81 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''default'', payload.Queue)", span="113-113"];
m7_145 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''critical'', critical.Queue)", span="265-265"];
m7_148 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''default'', @default.Queue)", span="272-272"];
m7_156 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''queues'', exception.ParamName)", span="287-287"];
m7_167 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''queues'', exception.ParamName)", span="301-301"];
m7_203 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(id, payload.Id)", span="354-354"];
m7_204 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''1'', payload.JobId)", span="355-355"];
m7_205 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''default'', payload.Queue)", span="356-356"];
m7_264 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''critical'', critical.Queue)", span="512-512"];
m7_267 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''default'', @default.Queue)", span="519-519"];
m7_276 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''1'', record.JobId.ToString())", span="533-533"];
m7_277 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Equal(''default'', record.Queue)", span="534-534"];
m7_65 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="82-82"];
m7_78 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="104-104"];
m7_91 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="132-132"];
m7_107 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="168-168"];
m7_119 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="199-199"];
m7_129 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="226-226"];
m7_142 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="258-258"];
m7_154 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="282-282"];
m7_165 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="296-296"];
m7_178 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="312-312"];
m7_189 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="325-325"];
m7_201 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="346-346"];
m7_213 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="375-375"];
m7_228 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="415-415"];
m7_238 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="446-446"];
m7_248 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="473-473"];
m7_261 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: true)", span="505-505"];
m7_273 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var queue = CreateJobQueue(connection, invisibilityTimeout: false)", span="528-528"];
m7_79 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var payload = (SqlServerTransactionJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="107-109"];
m7_92 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="135-137"];
m7_108 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="171-173"];
m7_120 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="202-204"];
m7_134 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken())", span="233-235"];
m7_143 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var critical = (SqlServerTransactionJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="260-262"];
m7_146 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var @default = (SqlServerTransactionJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="267-269"];
m7_159 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="queue.Dequeue(null, CreateTimingOutCancellationToken())", span="285-285"];
m7_170 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="queue.Dequeue(new string[0], CreateTimingOutCancellationToken())", span="299-299"];
m7_202 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var payload = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="349-351"];
m7_214 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="378-380"];
m7_229 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="418-420"];
m7_239 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="449-451"];
m7_253 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken())", span="480-482"];
m7_262 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var critical = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="507-509"];
m7_265 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var @default = (SqlServerTimeoutJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="514-516"];
m7_70 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="queue.Dequeue(DefaultQueues, cts.Token)", span="85-85"];
m7_182 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="queue.Dequeue(DefaultQueues, cts.Token)", span="315-315"];
m7_193 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="queue.Dequeue(DefaultQueues, cts.Token)", span="328-328"];
m7_176 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var cts = new CancellationTokenSource()", span="310-310"];
m7_177 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="cts.Cancel()", span="311-311"];
m7_64 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var cts = new CancellationTokenSource(200)", span="81-81"];
m7_67 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="79-86"];
m7_69 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="85-85"];
m7_117 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="190-212"];
m7_122 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Null(otherJobFetchedAt)", span="211-211"];
m7_130 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' })", span="228-230"];
m7_132 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="224-236"];
m7_133 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="233-235"];
m7_158 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="285-285"];
m7_169 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="299-299"];
m7_180 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="308-316"];
m7_181 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="315-315"];
m7_188 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var cts = new CancellationTokenSource(200)", span="324-324"];
m7_191 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="322-329"];
m7_192 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="328-328"];
m7_211 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="370-391"];
m7_215 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.NotNull(payload)", span="383-383"];
m7_217 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.NotNull(fetchedAt)", span="389-389"];
m7_218 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1))", span="390-390"];
m7_236 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="437-459"];
m7_241 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Null(otherJobFetchedAt)", span="458-458"];
m7_249 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' })", span="475-477"];
m7_251 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="471-483"];
m7_252 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="480-482"];
m7_82 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="98-114"];
m7_144 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.NotNull(critical.JobId)", span="264-264"];
m7_147 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.NotNull(@default.JobId)", span="271-271"];
m7_149 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="248-273"];
m7_157 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="280-288"];
m7_168 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="294-302"];
m7_200 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var id = (int)connection.Query(\r\n                    arrangeSql,\r\n                    new { jobId = 1, queue = ''default'' }).Single().Id", span="343-345"];
m7_206 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="341-357"];
m7_263 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.NotNull(critical.JobId)", span="511-511"];
m7_266 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.NotNull(@default.JobId)", span="518-518"];
m7_268 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="495-520"];
m7_275 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var record = connection.Query(''select * from HangFire.JobQueue'').Single()", span="532-532"];
m7_278 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Null(record.FetchedAt)", span="535-535"];
m7_63 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="79-86"];
m7_76 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="98-114"];
m7_89 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="127-144"];
m7_105 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="157-177"];
m7_128 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="224-236"];
m7_140 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="248-273"];
m7_153 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="280-288"];
m7_164 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="294-302"];
m7_175 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="308-316"];
m7_187 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="322-329"];
m7_199 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="341-357"];
m7_226 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="404-424"];
m7_247 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="471-483"];
m7_259 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Entry lambda expression", span="495-520"];
m7_77 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var id = (int)connection.Query(\r\n                    arrangeSql,\r\n                    new { jobId = 1, queue = ''default'' }).Single().Id", span="101-103"];
m7_90 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' })", span="129-131"];
m7_106 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    })", span="159-167"];
m7_118 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    })", span="192-198"];
m7_141 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    })", span="250-256"];
m7_212 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' })", span="372-374"];
m7_227 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    })", span="406-414"];
m7_237 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    })", span="439-445"];
m7_260 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    })", span="497-503"];
m7_274 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="queue.Enqueue(connection, ''default'', ''1'')", span="530-530"];
m7_93 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.NotNull(payload)", span="140-140"];
m7_109 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.NotEmpty(payload.JobId)", span="176-176"];
m7_135 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="233-235"];
m7_160 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="285-285"];
m7_171 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="299-299"];
m7_230 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.NotEmpty(payload.JobId)", span="423-423"];
m7_254 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="480-482"];
m7_71 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="85-85"];
m7_183 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="315-315"];
m7_194 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="328-328"];
m7_123 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="190-212"];
m7_219 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="370-391"];
m7_242 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="437-459"];
m7_279 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="526-536"];
m7_96 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="127-144"];
m7_94 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="var jobInQueue = connection.Query(''select * from HangFire.JobQueue'').SingleOrDefault()", span="142-142"];
m7_110 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="157-177"];
m7_95 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Assert.Null(jobInQueue)", span="143-143"];
m7_231 [cluster="lambda expression", file="RabbitMqMonitoringApi.cs", label="Exit lambda expression", span="404-424"];
m7_33 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", span="539-539"];
m7_282 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="RabbitMqMonitoringApi.cs", label="var source = new CancellationTokenSource(TimeSpan.FromSeconds(10))", span="541-541"];
m7_283 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="RabbitMqMonitoringApi.cs", label="return source.Token;", span="542-542"];
m7_284 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", span="539-539"];
m7_60 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="77-77"];
m7_61 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource(200);\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", span="79-86"];
m7_62 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="77-77"];
m7_124 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="216-216"];
m7_126 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' });\r\n                \r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()));\r\n            })", span="224-236"];
m7_125 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="218-222"];
m7_127 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="216-216"];
m7_112 [cluster="Unk.NotEmpty", file="RabbitMqMonitoringApi.cs", label="Entry Unk.NotEmpty", span=""];
m7_84 [cluster="Unk.Single", file="RabbitMqMonitoringApi.cs", label="Entry Unk.Single", span=""];
m7_19 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.GetConnectionString()", span="26-26"];
m7_221 [cluster="Unk.True", file="RabbitMqMonitoringApi.cs", label="Entry Unk.True", span=""];
m7_97 [cluster="Unk.Execute", file="RabbitMqMonitoringApi.cs", label="Entry Unk.Execute", span=""];
m7_29 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", span="547-547"];
m7_290 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", file="RabbitMqMonitoringApi.cs", label="return new SqlServerJobQueue(storage, new SqlServerStorageOptions { UseInvisibilityTimeout = invisibilityTimeout });", span="550-550"];
m7_289 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", file="RabbitMqMonitoringApi.cs", label="var storage = new SqlServerStorage(connection)", span="549-549"];
m7_291 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(SqlConnection, bool)", span="547-547"];
m7_72 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", span="90-90"];
m7_74 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                // ReSharper disable once UnusedVariable\r\n                var id = (int)connection.Query(\r\n                    arrangeSql,\r\n                    new { jobId = 1, queue = ''default'' }).Single().Id;\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                // Act\r\n                var payload = (SqlServerTransactionJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.Equal(''1'', payload.JobId);\r\n                Assert.Equal(''default'', payload.Queue);\r\n            })", span="98-114"];
m7_73 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@jobId, @queue);\r\nselect scope_identity() as Id;''", span="92-95"];
m7_75 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", span="90-90"];
m7_99 [cluster="Unk.SingleOrDefault", file="RabbitMqMonitoringApi.cs", label="Entry Unk.SingleOrDefault", span=""];
m7_34 [cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="50-50"];
m7_46 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="RabbitMqMonitoringApi.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="63-63"];
m7_47 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", color=green, community=0, file="RabbitMqMonitoringApi.cs", label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource();\r\n                cts.Cancel();\r\n                var queue = CreateJobQueue(connection, invisibilityTimeout: false);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", prediction=102, span="65-73"];
m7_48 [cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="RabbitMqMonitoringApi.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="63-63"];
m7_299 [file="RabbitMqMonitoringApi.cs", label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts", span=""];
m7_300 [file="RabbitMqMonitoringApi.cs", label=queue, span=""];
m7_301 [file="RabbitMqMonitoringApi.cs", label=queue, span=""];
m7_302 [file="RabbitMqMonitoringApi.cs", label=cts, span=""];
m7_303 [file="RabbitMqMonitoringApi.cs", label=queue, span=""];
m7_311 [file="RabbitMqMonitoringApi.cs", label=queue, span=""];
m7_313 [file="RabbitMqMonitoringApi.cs", label=queue, span=""];
m7_314 [file="RabbitMqMonitoringApi.cs", label=queue, span=""];
m7_324 [file="RabbitMqMonitoringApi.cs", label=queue, span=""];
m7_304 [file="RabbitMqMonitoringApi.cs", label=cts, span=""];
m7_305 [file="RabbitMqMonitoringApi.cs", label=queue, span=""];
m7_315 [file="RabbitMqMonitoringApi.cs", label=cts, span=""];
m7_316 [file="RabbitMqMonitoringApi.cs", label=queue, span=""];
m7_317 [file="RabbitMqMonitoringApi.cs", label=cts, span=""];
m7_318 [file="RabbitMqMonitoringApi.cs", label=queue, span=""];
m7_310 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m7_323 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m7_319 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m7_306 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m7_307 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m7_308 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m7_309 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m7_312 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m7_320 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m7_321 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m7_322 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m7_325 [file="RabbitMqMonitoringApi.cs", label=arrangeSql, span=""];
m9_0 [cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", file="RabbitMqSqlServerStorageExtensions.cs", label="Entry HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", span="8-8"];
m9_1 [cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs", label="storage == null", prediction=103, span="10-10"];
m9_2 [cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs", label="throw new ArgumentNullException(''storage'');", prediction=104, span="10-10"];
m9_3 [cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs", label="queues == null", prediction=105, span="11-11"];
m9_4 [cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs", label="throw new ArgumentNullException(''queues'');", prediction=106, span="11-11"];
m9_5 [cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs", label="configureAction == null", prediction=105, span="12-12"];
m9_6 [cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs", label="throw new ArgumentNullException(''configureAction'');", prediction=108, span="12-12"];
m9_7 [cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs", label="var provider = new RabbitMqJobQueueProvider(queues, configureAction)", prediction=109, span="14-14"];
m9_8 [cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs", label="storage.QueueProviders.Add(provider, queues)", prediction=105, span="16-16"];
m9_9 [cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", color=green, community=0, file="RabbitMqSqlServerStorageExtensions.cs", label="return storage;", prediction=105, span="18-18"];
m9_10 [cluster="HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", file="RabbitMqSqlServerStorageExtensions.cs", label="Exit HangFire.RabbitMQ.RabbitMqSqlServerStorageExtensions.UseRabbitMq(HangFire.SqlServer.SqlServerStorage, System.Action<ConnectionFactory>, params string[])", span="8-8"];
m9_12 [cluster="HangFire.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, System.Action<ConnectionFactory>)", file="RabbitMqSqlServerStorageExtensions.cs", label="Entry HangFire.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, System.Action<ConnectionFactory>)", span="15-15"];
m9_11 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="RabbitMqSqlServerStorageExtensions.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m9_13 [cluster="HangFire.SqlServer.PersistentJobQueueProviderCollection.Add(HangFire.SqlServer.IPersistentJobQueueProvider, System.Collections.Generic.IEnumerable<string>)", file="RabbitMqSqlServerStorageExtensions.cs", label="Entry HangFire.SqlServer.PersistentJobQueueProviderCollection.Add(HangFire.SqlServer.IPersistentJobQueueProvider, System.Collections.Generic.IEnumerable<string>)", span="40-40"];
m0_8 -> m0_10  [color=green, key=1, label=queue, style=dashed];
m0_24 -> m0_8  [color=green, key=1, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", style=dashed];
m0_24 -> m0_9  [color=green, key=1, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", style=dashed];
m0_24 -> m0_11  [color=green, key=1, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", style=dashed];
m0_24 -> m0_10  [color=green, key=1, label="HangFire.SqlServer.RabbitMq.Tests.CleanRabbitMqQueueAttribute", style=dashed];
m4_61 -> m4_65  [color=green, key=1, label="lambda expression", style=dashed];
m4_42 -> m4_44  [color=green, key=1, label=queue, style=dashed];
m4_42 -> m4_48  [color=green, key=1, label=queue, style=dashed];
m4_43 -> m4_48  [color=green, key=1, label=token, style=dashed];
m4_44 -> m4_47  [color=green, key=1, label="lambda expression", style=dashed];
m4_15 -> m4_18  [color=green, key=1, label="lambda expression", style=dashed];
m4_36 -> m4_38  [color=green, key=1, label=fetchedJob, style=dashed];
m4_75 -> m4_78  [color=green, key=1, label="lambda expression", style=dashed];
m4_5 -> m4_10  [color=green, key=1, label="lambda expression", style=dashed];
m4_99 -> m4_48  [color=green, key=1, label=queue, style=dashed];
m4_100 -> m4_48  [color=green, key=1, label=token, style=dashed];
m7_1 -> m7_6  [color=green, key=1, label="lambda expression", style=dashed];
m7_103 -> m7_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_209 -> m7_211  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_173 -> m7_175  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_234 -> m7_236  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_185 -> m7_187  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_138 -> m7_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_12 -> m7_15  [color=green, key=1, label="lambda expression", style=dashed];
m7_36 -> m7_38  [color=green, key=1, label="lambda expression", style=dashed];
m7_224 -> m7_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_21 -> m7_24  [color=green, key=1, label="lambda expression", style=dashed];
m7_257 -> m7_259  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_162 -> m7_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_151 -> m7_153  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_245 -> m7_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_197 -> m7_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_87 -> m7_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_270 -> m7_272  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_115 -> m7_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_272 -> m7_274  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m7_25 -> m7_31  [color=green, key=1, label=queue, style=dashed];
m7_26 -> m7_30  [color=green, key=1, label="lambda expression", style=dashed];
m7_39 -> m7_44  [color=green, key=1, label=queue, style=dashed];
m7_40 -> m7_43  [color=green, key=1, label="lambda expression", style=dashed];
m7_50 -> m7_53  [color=green, key=1, label=cts, style=dashed];
m7_50 -> m7_58  [color=green, key=1, label=cts, style=dashed];
m7_53 -> m7_57  [color=green, key=1, label="lambda expression", style=dashed];
m7_52 -> m7_58  [color=green, key=1, label=queue, style=dashed];
m7_66 -> m7_69  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_131 -> m7_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_155 -> m7_158  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_166 -> m7_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_179 -> m7_181  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_190 -> m7_192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_216 -> m7_218  [color=darkseagreen4, key=1, label=fetchedAt, style=dashed];
m7_250 -> m7_252  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_65 -> m7_70  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_129 -> m7_131  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_129 -> m7_134  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_154 -> m7_159  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_165 -> m7_170  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_178 -> m7_182  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_189 -> m7_193  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_248 -> m7_250  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_248 -> m7_253  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_79 -> m7_81  [color=darkseagreen4, key=1, label=payload, style=dashed];
m7_143 -> m7_145  [color=darkseagreen4, key=1, label=critical, style=dashed];
m7_146 -> m7_148  [color=darkseagreen4, key=1, label="@default", style=dashed];
m7_202 -> m7_204  [color=darkseagreen4, key=1, label=payload, style=dashed];
m7_202 -> m7_205  [color=darkseagreen4, key=1, label=payload, style=dashed];
m7_262 -> m7_264  [color=darkseagreen4, key=1, label=critical, style=dashed];
m7_265 -> m7_267  [color=darkseagreen4, key=1, label="@default", style=dashed];
m7_176 -> m7_179  [color=darkseagreen4, key=1, label=cts, style=dashed];
m7_176 -> m7_182  [color=darkseagreen4, key=1, label=cts, style=dashed];
m7_64 -> m7_66  [color=darkseagreen4, key=1, label=cts, style=dashed];
m7_64 -> m7_70  [color=darkseagreen4, key=1, label=cts, style=dashed];
m7_188 -> m7_190  [color=darkseagreen4, key=1, label=cts, style=dashed];
m7_188 -> m7_193  [color=darkseagreen4, key=1, label=cts, style=dashed];
m7_200 -> m7_203  [color=darkseagreen4, key=1, label=id, style=dashed];
m7_275 -> m7_277  [color=darkseagreen4, key=1, label=record, style=dashed];
m7_275 -> m7_278  [color=darkseagreen4, key=1, label=record, style=dashed];
m7_61 -> m7_63  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_126 -> m7_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_74 -> m7_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_47 -> m7_49  [color=green, key=1, label="lambda expression", style=dashed];
m7_300 -> m7_31  [color=green, key=1, label=queue, style=dashed];
m7_301 -> m7_44  [color=green, key=1, label=queue, style=dashed];
m7_302 -> m7_58  [color=green, key=1, label=cts, style=dashed];
m7_303 -> m7_58  [color=green, key=1, label=queue, style=dashed];
m7_311 -> m7_134  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_313 -> m7_159  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_314 -> m7_170  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_324 -> m7_253  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_304 -> m7_70  [color=darkseagreen4, key=1, label=cts, style=dashed];
m7_305 -> m7_70  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_315 -> m7_182  [color=darkseagreen4, key=1, label=cts, style=dashed];
m7_316 -> m7_182  [color=darkseagreen4, key=1, label=queue, style=dashed];
m7_317 -> m7_193  [color=darkseagreen4, key=1, label=cts, style=dashed];
m7_318 -> m7_193  [color=darkseagreen4, key=1, label=queue, style=dashed];
m9_0 -> m9_3  [color=green, key=1, label="params string[]", style=dashed];
m9_0 -> m9_5  [color=green, key=1, label="System.Action<ConnectionFactory>", style=dashed];
m9_0 -> m9_8  [color=green, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
m9_0 -> m9_9  [color=green, key=1, label="HangFire.SqlServer.SqlServerStorage", style=dashed];
}
