digraph  {
n215 [label="Hangfire.Core.Tests.Common.JobArgumentFacts", span=""];
n216 [label=T, span=""];
n217 [label=converter, span=""];
n0 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", span="16-16", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()"];
n1 [label="_activator = new Mock<JobActivator>()", span="18-18", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()"];
n2 [label="_activator.Setup(x => x.ActivateJob(It.IsAny<Type>()))\r\n				      .Returns(() => new JobArgumentFacts())", span="19-20", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()"];
n5 [label="Entry Mock<JobActivator>.cstr", span="", cluster="Mock<JobActivator>.cstr"];
n3 [label="_token = new Mock<IJobCancellationToken>()", span="22-22", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()"];
n6 [label="Entry Unk.Setup", span="", cluster="Unk.Setup"];
n7 [label="Entry Unk.Returns", span="", cluster="Unk.Returns"];
n9 [label="Entry lambda expression", span="19-19", cluster="lambda expression"];
n14 [label="Entry lambda expression", span="20-20", cluster="lambda expression"];
n4 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()", span="16-16", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.JobArgumentFacts()"];
n8 [label="Entry Mock<IJobCancellationToken>.cstr", span="", cluster="Mock<IJobCancellationToken>.cstr"];
n10 [label="x.ActivateJob(It.IsAny<Type>())", span="19-19", cluster="lambda expression"];
n11 [label="Exit lambda expression", span="19-19", cluster="lambda expression"];
n12 [label="Entry Unk.>", span="", cluster="Unk.>"];
n13 [label="Entry Unk.ActivateJob", span="", cluster="Unk.ActivateJob"];
n15 [label="new JobArgumentFacts()", span="20-20", cluster="lambda expression"];
n16 [label="Exit lambda expression", span="20-20", cluster="lambda expression"];
n17 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)", span="26-26", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)"];
n18 [label="Assert.Equal(BooleanValue, value)", span="26-26", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)"];
n19 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)", span="26-26", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(bool)"];
n20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
n21 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", span="29-29", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()"];
n22 [label="CreateAndPerform(BooleanValue)", span="31-31", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()"];
n23 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()", span="29-29", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.BooleanArguments_AreBeingCorrectlyDeserialized()"];
n24 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", span="292-292", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n25 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", span="35-35", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)"];
n26 [label="Assert.Equal(ByteValue, value)", span="35-35", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)"];
n27 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)", span="35-35", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(byte)"];
n28 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", span="38-38", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()"];
n29 [label="CreateAndPerform(ByteValue)", span="40-40", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()"];
n30 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()", span="38-38", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ByteValues_AreBeingCorrectlyDeserialized()"];
n31 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", span="44-44", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)"];
n32 [label="Assert.Equal(SByteValue, value)", span="44-44", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)"];
n33 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)", span="44-44", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(sbyte)"];
n34 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", span="47-47", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()"];
n35 [label="CreateAndPerform(SByteValue)", span="49-49", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()"];
n36 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()", span="47-47", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SByteValues_AreBeingCorrectlyDeserialized()"];
n37 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)", span="53-53", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)"];
n38 [label="Assert.Equal(CharValue, value)", span="53-53", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)"];
n39 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)", span="53-53", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(char)"];
n40 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", span="56-56", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()"];
n41 [label="CreateAndPerform(CharValue)", span="58-58", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()"];
n42 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()", span="56-56", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CharValues_AreBeingCorrectlyDeserialized()"];
n43 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)", span="62-62", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)"];
n44 [label="Assert.Equal(DecimalValue, value)", span="62-62", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)"];
n45 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)", span="62-62", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(decimal)"];
n46 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", span="65-65", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()"];
n47 [label="CreateAndPerform(DecimalValue)", span="67-67", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()"];
n48 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()", span="65-65", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DecimalValues_AreBeingCorrectlyDeserialized()"];
n49 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", span="71-71", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)"];
n50 [label="Assert.Equal(DoubleValue, value)", span="71-71", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)"];
n51 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)", span="71-71", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(double)"];
n52 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()", span="74-74", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()"];
n53 [label="CreateAndPerform(DoubleValue)", span="76-76", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()"];
n54 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()", span="74-74", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DoubleValues_AreBeingCorrectlyDeserialized()"];
n55 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", span="80-80", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)"];
n56 [label="Assert.Equal(SingleValue, value)", span="80-80", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)"];
n57 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)", span="80-80", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(float)"];
n58 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()", span="83-83", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()"];
n59 [label="CreateAndPerform(SingleValue)", span="85-85", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()"];
n60 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()", span="83-83", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.SingleValues_AreBeingCorrectlyDeserialized()"];
n61 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", span="89-89", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)"];
n62 [label="Assert.Equal(Int32Value, value)", span="89-89", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)"];
n63 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)", span="89-89", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int)"];
n64 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", span="92-92", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()"];
n65 [label="CreateAndPerform(Int32Value)", span="94-94", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()"];
n66 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()", span="92-92", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int32Values_AreBeingCorrectlyDeserialized()"];
n67 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", span="98-98", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)"];
n68 [label="Assert.Equal(UInt32Value, value)", span="98-98", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)"];
n69 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)", span="98-98", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(uint)"];
n70 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()", span="101-101", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()"];
n71 [label="CreateAndPerform(UInt32Value)", span="103-103", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()"];
n72 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()", span="101-101", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt32Values_AreBeingCorrectlyDeserialized()"];
n73 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)", span="107-107", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)"];
n74 [label="Assert.Equal(Int64Value, value)", span="107-107", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)"];
n75 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)", span="107-107", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long)"];
n76 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()", span="110-110", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()"];
n77 [label="CreateAndPerform(Int64Value)", span="112-112", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()"];
n78 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()", span="110-110", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int64Values_AreBeingCorrectyDeserialized()"];
n79 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)", span="116-116", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)"];
n80 [label="Assert.Equal(UInt64Value, value)", span="116-116", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)"];
n81 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)", span="116-116", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ulong)"];
n82 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", span="119-119", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()"];
n83 [label="CreateAndPerform(UInt64Value)", span="121-121", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()"];
n84 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()", span="119-119", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt64Values_AreBeingCorrectlyDeserialized()"];
n85 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", span="125-125", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)"];
n86 [label="Assert.Equal(Int16Value, value)", span="125-125", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)"];
n87 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)", span="125-125", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(short)"];
n88 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", span="128-128", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()"];
n89 [label="CreateAndPerform(Int16Value)", span="130-130", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()"];
n90 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()", span="128-128", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Int16Values_AreBeingCorrectlyDeserialized()"];
n91 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", span="134-134", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)"];
n92 [label="Assert.Equal(UInt16Value, value)", span="134-134", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)"];
n93 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)", span="134-134", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(ushort)"];
n94 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", span="137-137", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()"];
n95 [label="CreateAndPerform(UInt16Value)", span="139-139", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()"];
n96 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()", span="137-137", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UInt16Values_AreBeingCorrectlyDeserialized()"];
n97 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", span="143-143", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)"];
n98 [label="Assert.Equal(StringValue, value)", span="143-143", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)"];
n99 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)", span="143-143", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string)"];
n100 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", span="146-146", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()"];
n101 [label="CreateAndPerform(StringValue)", span="148-148", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()"];
n102 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()", span="146-146", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.StringValues_AreBeingCorrectlyDeserialized()"];
n103 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", span="152-152", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)"];
n104 [label="Assert.Equal(TimeSpanValue, value)", span="152-152", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)"];
n105 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)", span="152-152", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.TimeSpan)"];
n106 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", span="155-155", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()"];
n107 [label="CreateAndPerform(TimeSpanValue)", span="157-157", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()"];
n108 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()", span="155-155", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.TimeSpanValues_AreBeingCorrectlyDeserialized()"];
n109 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", span="161-161", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)"];
n110 [label="Assert.Equal(ObjectValue, value)", span="161-161", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)"];
n111 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)", span="161-161", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(object)"];
n112 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", span="164-164", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()"];
n113 [label="CreateAndPerform(ObjectValue)", span="166-166", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()"];
n114 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()", span="164-164", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ObjectValues_AreBeingDeserializedAsStrings()"];
n115 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", span="170-170", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)"];
n116 [label="Assert.Equal(DateTimeOffsetValue, value)", span="170-170", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)"];
n117 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)", span="170-170", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DateTimeOffset)"];
n118 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", span="173-173", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()"];
n119 [label="CreateAndPerform(DateTimeOffsetValue)", span="175-175", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()"];
n120 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()", span="173-173", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DateTimeOffsetValues_AreBeingDeserializedCorrectly()"];
n121 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", span="179-179", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)"];
n122 [label="Assert.Equal(CultureInfoValue, value)", span="179-179", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)"];
n123 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)", span="179-179", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Globalization.CultureInfo)"];
n124 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", span="182-182", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()"];
n125 [label="CreateAndPerform(CultureInfoValue)", span="184-184", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()"];
n126 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()", span="182-182", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CultureInfoValues_AreBeingDeserializedCorrectly()"];
n127 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", span="188-188", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)"];
n128 [label="Assert.Equal(EnumValue, value)", span="188-188", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)"];
n129 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)", span="188-188", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.DayOfWeek)"];
n130 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", span="191-191", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()"];
n131 [label="CreateAndPerform(EnumValue)", span="193-193", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()"];
n132 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()", span="191-191", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.EnumValues_AreBeingDeserializedCorrectly()"];
n133 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", span="197-197", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)"];
n134 [label="Assert.Equal(GuidValue, value)", span="197-197", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)"];
n135 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)", span="197-197", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Guid)"];
n136 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", span="200-200", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()"];
n137 [label="CreateAndPerform(GuidValue)", span="202-202", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()"];
n138 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()", span="200-200", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.GuidValues_AreBeingCorrectlyDeserialized()"];
n139 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", span="206-206", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)"];
n140 [label="Assert.Equal(UriValue, value)", span="206-206", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)"];
n141 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)", span="206-206", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Uri)"];
n142 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", span="209-209", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()"];
n143 [label="CreateAndPerform(UriValue)", span="211-211", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()"];
n144 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()", span="209-209", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.UriValues_AreBeingCorrectlyDeserialized()"];
n145 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", span="215-215", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)"];
n146 [label="Assert.Equal(NotNullNullableValue, value)", span="215-215", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)"];
n147 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)", span="215-215", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(long?)"];
n148 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", span="218-218", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()"];
n149 [label="CreateAndPerform(NotNullNullableValue)", span="220-220", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()"];
n150 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()", span="218-218", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NotNullNullableValues_AreBeingCorrectlyDeserialized()"];
n151 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", span="224-224", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)"];
n152 [label="Assert.Equal(NullNullableValue, value)", span="224-224", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)"];
n153 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)", span="224-224", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(int?)"];
n154 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", span="227-227", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()"];
n155 [label="CreateAndPerform(NullNullableValue)", span="229-229", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()"];
n156 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()", span="227-227", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.NullNullableValues_AreBeingCorrectlyDeserialized()"];
n157 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", span="233-233", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])"];
n158 [label="Assert.Equal(ArrayValue, value)", span="233-233", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])"];
n159 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])", span="233-233", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(string[])"];
n160 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", span="236-236", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()"];
n161 [label="CreateAndPerform(ArrayValue, true)", span="238-238", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()"];
n162 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()", span="236-236", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ArrayValues_AreBeingCorrectlyDeserialized_FromJson()"];
n163 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", span="242-242", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)"];
n164 [label="Assert.Equal(ListValue, value)", span="242-242", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)"];
n165 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)", span="242-242", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.List<System.DateTime>)"];
n166 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", span="245-245", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()"];
n167 [label="CreateAndPerform(ListValue, true)", span="247-247", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()"];
n168 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()", span="245-245", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.ListValues_AreBeingCorrectlyDeserialized_FromJson()"];
n169 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", span="255-255", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)"];
n170 [label="Assert.Equal(DictionaryValue, value)", span="255-255", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)"];
n171 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)", span="255-255", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(System.Collections.Generic.Dictionary<System.TimeSpan, string>)"];
n172 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", span="258-258", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()"];
n173 [label="CreateAndPerform(DictionaryValue, true)", span="260-260", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()"];
n174 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()", span="258-258", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.DictionaryValues_AreBeingCorrectlyDeserialized_FromJson()"];
n175 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", span="270-270", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)"];
n176 [label="Assert.Equal(CustomStructValue, value)", span="270-270", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)"];
n177 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)", span="270-270", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyStruct)"];
n178 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", span="273-273", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()"];
n179 [label="CreateAndPerform(CustomStructValue, true)", span="275-275", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()"];
n180 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()", span="273-273", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomStructValues_AreBeingCorrectlyDeserialized_FromJson()"];
n181 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", span="284-284", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)"];
n182 [label="Assert.Equal(CustomClassValue.CreatedAt, value.CreatedAt)", span="284-284", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)"];
n183 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)", span="284-284", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.Method(Hangfire.Core.Tests.Common.JobArgumentFacts.MyClass)"];
n184 [label="Entry Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", span="287-287", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()"];
n185 [label="CreateAndPerform(CustomClassValue, true)", span="289-289", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()"];
n186 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()", span="287-287", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CustomClassValues_AreBeingCorrectlyDeserialized_FromJson()"];
n187 [label="var type = typeof(JobArgumentFacts)", span="294-294", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n190 [label="!checkJsonOnly", span="299-299", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n192 [label="serializationMethods.Add(new Tuple<string, Func<string>>(\r\n					''TypeDescriptor'',\r\n					() => converter.ConvertToInvariantString(argumentValue)))", span="302-304", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n208 [label="converter.ConvertToInvariantString(argumentValue)", span="304-304", cluster="lambda expression"];
n193 [label="serializationMethods.Add(new Tuple<string, Func<string>>(\r\n				''JSON'',\r\n				() => JsonConvert.SerializeObject(argumentValue)))", span="307-309", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n212 [label="JsonConvert.SerializeObject(argumentValue)", span="309-309", cluster="lambda expression"];
n188 [label="var methodInfo = type.GetMethod(''Method'', new[] { typeof(T) })", span="295-295", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n195 [label="var job = new Job(type, methodInfo, new[] { method.Item2() })", span="313-313", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n189 [label="var serializationMethods = new List<Tuple<string, Func<string>>>()", span="297-297", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n198 [label="Entry System.Type.GetMethod(string, System.Type[])", span="0-0", cluster="System.Type.GetMethod(string, System.Type[])"];
n199 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n194 [label=serializationMethods, span="311-311", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n191 [label="var converter = TypeDescriptor.GetConverter(typeof(T))", span="301-301", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n200 [label="Entry System.ComponentModel.TypeDescriptor.GetConverter(System.Type)", span="0-0", cluster="System.ComponentModel.TypeDescriptor.GetConverter(System.Type)"];
n201 [label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0", cluster="System.Tuple<T1, T2>.Tuple(T1, T2)"];
n202 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)"];
n203 [label="Entry Tuple<string, Func<string>>.cstr", span="", cluster="Tuple<string, Func<string>>.cstr"];
n197 [label="Exit Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)", span="292-292", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n196 [label="job.Perform(_activator.Object, _token.Object)", span="314-314", cluster="Hangfire.Core.Tests.Common.JobArgumentFacts.CreateAndPerform<T>(T, bool)"];
n204 [label="Entry Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])", span="68-68", cluster="Hangfire.Common.Job.Job(System.Type, System.Reflection.MethodInfo, string[])"];
n205 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()"];
n206 [label="Entry Unk.Perform", span="", cluster="Unk.Perform"];
n207 [label="Entry lambda expression", span="304-304", cluster="lambda expression"];
n209 [label="Exit lambda expression", span="304-304", cluster="lambda expression"];
n210 [label="Entry System.ComponentModel.TypeConverter.ConvertToInvariantString(object)", span="0-0", cluster="System.ComponentModel.TypeConverter.ConvertToInvariantString(object)"];
n211 [label="Entry lambda expression", span="309-309", cluster="lambda expression"];
n213 [label="Exit lambda expression", span="309-309", cluster="lambda expression"];
n214 [label="Entry Unk.SerializeObject", span="", cluster="Unk.SerializeObject"];
m0_71 [label="Entry RecurringJobScheduler.cstr", span="", cluster="RecurringJobScheduler.cstr", file="RecurringJobSchedulerFacts.cs"];
m0_63 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="61-61", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_64 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(null, _client.Object, _instantFactory.Object, _throttler.Object))", span="63-65", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_65 [label="Assert.Equal(''storage'', exception.ParamName)", span="67-67", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_66 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="61-61", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_115 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="RecurringJobSchedulerFacts.cs"];
m0_17 [label="Entry Mock<IBackgroundJobClient>.cstr", span="", cluster="Mock<IBackgroundJobClient>.cstr", file="RecurringJobSchedulerFacts.cs"];
m0_19 [label="Entry Mock<IThrottler>.cstr", span="", cluster="Mock<IThrottler>.cstr", file="RecurringJobSchedulerFacts.cs"];
m0_152 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", span="160-160", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m0_153 [label="var time = DateTime.UtcNow", span="162-162", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m0_154 [label="_recurringJob[''LastExecution''] = JobHelper.SerializeDateTime(time)", span="163-163", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", color=green, community=0, file="RecurringJobSchedulerFacts.cs"];
m0_157 [label="_instant.Verify(x => x.GetMatches(time))", span="168-168", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m0_155 [label="var scheduler = CreateScheduler()", span="164-164", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m0_156 [label="scheduler.Execute(_token)", span="166-166", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m0_158 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", span="160-160", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_TakesIntoConsideration_LastExecutionTime_ConvertedToLocalTimezone()", file="RecurringJobSchedulerFacts.cs"];
m0_58 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="RecurringJobSchedulerFacts.cs"];
m0_163 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="172-172", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m0_164 [label="_connection.Setup(x => x.GetAllItemsFromSet(It.IsAny<string>()))\r\n                .Returns(new HashSet<string> { ''non-existing-job'' })", span="174-175", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m0_165 [label="var scheduler = CreateScheduler()", span="176-176", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m0_166 [label="Assert.DoesNotThrow(() => scheduler.Execute(_token))", span="178-178", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m0_167 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", span="172-172", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotFail_WhenRecurringJobDoesNotExist()", file="RecurringJobSchedulerFacts.cs"];
m0_57 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RecurringJobSchedulerFacts.cs"];
m0_104 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", span="111-111", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m0_105 [label="var scheduler = CreateScheduler()", span="114-114", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m0_106 [label="scheduler.Execute(_token)", span="117-117", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m0_107 [label="var jobKey = String.Format(''recurring-job:{0}'', RecurringJobId)", span="120-120", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m0_108 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == ''job-id'')))", span="122-125", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m0_109 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastExecution'') && rj[''LastExecution''] \r\n                        == JobHelper.SerializeDateTime(_instant.Object.UtcTime))))", span="127-131", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m0_110 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence))))", span="133-137", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m0_111 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", span="111-111", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_UpdatesRecurringJobParameters_OnCompletion()", file="RecurringJobSchedulerFacts.cs"];
m0_133 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", span="141-141", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_134 [label="_instant.Setup(x => x.GetMatches(It.IsAny<DateTime?>())).Returns(Enumerable.Empty<DateTime>)", span="143-143", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_135 [label="var scheduler = CreateScheduler()", span="144-144", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_136 [label="scheduler.Execute(_token)", span="146-146", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_137 [label="_client.Verify(\r\n                x => x.Create(It.IsAny<Job>(), It.IsAny<EnqueuedState>()),\r\n                Times.Never)", span="148-150", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_138 [label="_connection.Verify(x => x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence))))", span="152-156", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_139 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", span="141-141", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_DoesNotEnqueueRecurringJob_AndDoesNotUpdateIt_ButNextExecution_WhenItIsNotATimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_18 [label="Entry Mock<IScheduleInstantFactory>.cstr", span="", cluster="Mock<IScheduleInstantFactory>.cstr", file="RecurringJobSchedulerFacts.cs"];
m0_168 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="RecurringJobSchedulerFacts.cs"];
m0_79 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", span="81-81", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_80 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(_storage.Object, _client.Object, null, _throttler.Object))", span="83-85", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_81 [label="Assert.Equal(''instantFactory'', exception.ParamName)", span="87-87", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_82 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", span="81-81", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenInstantFactoryIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_98 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="194-194", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="RecurringJobSchedulerFacts.cs"];
m0_184 [label="return new RecurringJobScheduler(\r\n                _storage.Object, \r\n                _client.Object, \r\n                _instantFactory.Object,\r\n                _throttler.Object);", span="196-200", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="RecurringJobSchedulerFacts.cs"];
m0_185 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", span="194-194", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.CreateScheduler()", file="RecurringJobSchedulerFacts.cs"];
m0_33 [label="Entry Unk.>", span="", cluster="Unk.>", file="RecurringJobSchedulerFacts.cs"];
m0_99 [label="Entry Hangfire.Server.RecurringJobScheduler.Execute(System.Threading.CancellationToken)", span="56-56", cluster="Hangfire.Server.RecurringJobScheduler.Execute(System.Threading.CancellationToken)", file="RecurringJobSchedulerFacts.cs"];
m0_72 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", span="71-71", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_73 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(_storage.Object, null, _instantFactory.Object, _throttler.Object))", span="73-75", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_74 [label="Assert.Equal(''client'', exception.ParamName)", span="77-77", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_75 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", span="71-71", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenClientIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_26 [label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="67-67", cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="RecurringJobSchedulerFacts.cs"];
m0_0 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="27-27", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_1 [label="_storage = new Mock<JobStorage>()", span="29-29", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_2 [label="_client = new Mock<IBackgroundJobClient>()", span="30-30", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_3 [label="_instantFactory = new Mock<IScheduleInstantFactory>()", span="31-31", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_4 [label="_throttler = new Mock<IThrottler>()", span="32-32", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_5 [label="_token = new CancellationTokenSource().Token", span="33-33", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_6 [label="_instant = new Mock<IScheduleInstant>()", span="36-36", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_7 [label="_instant.Setup(x => x.GetMatches(It.IsAny<DateTime?>())).Returns(new[] { _instant.Object.UtcTime })", span="37-37", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_8 [label="_instantFactory.Setup(x => x.GetInstant(It.IsNotNull<CrontabSchedule>()))\r\n                .Returns(() => _instant.Object)", span="39-40", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_9 [label="_recurringJob = new Dictionary<string, string>\r\n            {\r\n                { ''Cron'', ''* * * * *'' },\r\n                { ''Job'', JobHelper.ToJson(InvocationData.Serialize(Job.FromExpression(() => Console.WriteLine()))) }\r\n            }", span="42-46", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_10 [label="_connection = new Mock<IStorageConnection>()", span="48-48", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_11 [label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="49-49", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_12 [label="_connection.Setup(x => x.GetAllItemsFromSet(''recurring-jobs''))\r\n                .Returns(new HashSet<string> { RecurringJobId })", span="51-52", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_13 [label="_connection.Setup(x => x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', RecurringJobId)))\r\n                .Returns(_recurringJob)", span="54-55", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_14 [label="_client.Setup(x => x.Create(It.IsAny<Job>(), It.IsAny<IState>())).Returns(''job-id'')", span="57-57", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_15 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", span="27-27", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.RecurringJobSchedulerFacts()", file="RecurringJobSchedulerFacts.cs"];
m0_21 [label="Entry Mock<IScheduleInstant>.cstr", span="", cluster="Mock<IScheduleInstant>.cstr", file="RecurringJobSchedulerFacts.cs"];
m0_34 [label="Entry Unk.GetMatches", span="", cluster="Unk.GetMatches", file="RecurringJobSchedulerFacts.cs"];
m0_49 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="RecurringJobSchedulerFacts.cs"];
m0_16 [label="Entry Mock<JobStorage>.cstr", span="", cluster="Mock<JobStorage>.cstr", file="RecurringJobSchedulerFacts.cs"];
m0_126 [label="Entry Unk.SerializeDateTime", span="", cluster="Unk.SerializeDateTime", file="RecurringJobSchedulerFacts.cs"];
m0_24 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="RecurringJobSchedulerFacts.cs"];
m0_159 [label="Entry Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", span="68-68", cluster="Hangfire.Common.JobHelper.SerializeDateTime(System.DateTime)", file="RecurringJobSchedulerFacts.cs"];
m0_22 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="RecurringJobSchedulerFacts.cs"];
m0_93 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", span="101-101", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_94 [label="var scheduler = CreateScheduler()", span="103-103", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_95 [label="scheduler.Execute(_token)", span="105-105", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_96 [label="_client.Verify(x => x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>()))", span="107-107", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_97 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", span="101-101", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_EnqueuesAJob_WhenItIsTimeToRunIt()", file="RecurringJobSchedulerFacts.cs"];
m0_20 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="RecurringJobSchedulerFacts.cs"];
m0_27 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)", file="RecurringJobSchedulerFacts.cs"];
m0_38 [label="Entry Unk.GetInstant", span="", cluster="Unk.GetInstant", file="RecurringJobSchedulerFacts.cs"];
m0_181 [label="Entry lambda expression", span="191-191", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_30 [label="Entry lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_35 [label="Entry lambda expression", span="39-39", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_39 [label="Entry lambda expression", span="40-40", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_42 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_46 [label="Entry lambda expression", span="49-49", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_50 [label="Entry lambda expression", span="51-51", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_54 [label="Entry lambda expression", span="54-54", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_59 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_31 [label="x.GetMatches(It.IsAny<DateTime?>())", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_32 [label="Exit lambda expression", span="37-37", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_36 [label="x.GetInstant(It.IsNotNull<CrontabSchedule>())", span="39-39", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_37 [label="Exit lambda expression", span="39-39", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_40 [label="_instant.Object", span="40-40", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_41 [label="Exit lambda expression", span="40-40", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_43 [label="Console.WriteLine()", span="45-45", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_44 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_47 [label="x.GetConnection()", span="49-49", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_48 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_51 [label="x.GetAllItemsFromSet(''recurring-jobs'')", span="51-51", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_52 [label="Exit lambda expression", span="51-51", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_55 [label="x.GetAllEntriesFromHash(String.Format(''recurring-job:{0}'', RecurringJobId))", span="54-54", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_56 [label="Exit lambda expression", span="54-54", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_60 [label="x.Create(It.IsAny<Job>(), It.IsAny<IState>())", span="57-57", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_61 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_68 [label="Entry lambda expression", span="65-65", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_69 [label="new RecurringJobScheduler(null, _client.Object, _instantFactory.Object, _throttler.Object)", span="65-65", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_70 [label="Exit lambda expression", span="65-65", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_76 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_77 [label="new RecurringJobScheduler(_storage.Object, null, _instantFactory.Object, _throttler.Object)", span="75-75", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_78 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_83 [label="Entry lambda expression", span="85-85", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_84 [label="new RecurringJobScheduler(_storage.Object, _client.Object, null, _throttler.Object)", span="85-85", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_85 [label="Exit lambda expression", span="85-85", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_90 [label="Entry lambda expression", span="95-95", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_91 [label="new RecurringJobScheduler(_storage.Object, _client.Object, _instantFactory.Object, null)", span="95-95", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_92 [label="Exit lambda expression", span="95-95", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_101 [label="Entry lambda expression", span="107-107", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_102 [label="x.Create(It.IsNotNull<Job>(), It.IsAny<EnqueuedState>())", span="107-107", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_103 [label="Exit lambda expression", span="107-107", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_113 [label="x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == ''job-id''))", span="122-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_121 [label="x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''LastExecution'') && rj[''LastExecution''] \r\n                        == JobHelper.SerializeDateTime(_instant.Object.UtcTime)))", span="127-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_128 [label="x.SetRangeInHash(\r\n                jobKey,\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)))", span="133-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_112 [label="Entry lambda expression", span="122-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_120 [label="Entry lambda expression", span="127-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_127 [label="Entry lambda expression", span="133-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_114 [label="Exit lambda expression", span="122-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_116 [label="Entry lambda expression", span="124-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_117 [label="rj.ContainsKey(''LastJobId'') && rj[''LastJobId''] == ''job-id''", span="125-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_118 [label="Exit lambda expression", span="124-125", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_122 [label="Exit lambda expression", span="127-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_123 [label="Entry lambda expression", span="129-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_124 [label="rj.ContainsKey(''LastExecution'') && rj[''LastExecution''] \r\n                        == JobHelper.SerializeDateTime(_instant.Object.UtcTime)", span="130-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_125 [label="Exit lambda expression", span="129-131", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_129 [label="Exit lambda expression", span="133-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_130 [label="Entry lambda expression", span="135-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_131 [label="rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)", span="136-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_132 [label="Exit lambda expression", span="135-137", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_140 [label="Entry lambda expression", span="143-143", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_143 [label="Entry lambda expression", span="149-149", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_146 [label="Entry lambda expression", span="152-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_141 [label="x.GetMatches(It.IsAny<DateTime?>())", span="143-143", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_142 [label="Exit lambda expression", span="143-143", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_144 [label="x.Create(It.IsAny<Job>(), It.IsAny<EnqueuedState>())", span="149-149", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_145 [label="Exit lambda expression", span="149-149", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_147 [label="x.SetRangeInHash(\r\n                String.Format(''recurring-job:{0}'', RecurringJobId),\r\n                It.Is<Dictionary<string, string>>(rj =>\r\n                    rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)))", span="152-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_148 [label="Exit lambda expression", span="152-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_149 [label="Entry lambda expression", span="154-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_150 [label="rj.ContainsKey(''NextExecution'') && rj[''NextExecution'']\r\n                        == JobHelper.SerializeDateTime(_instant.Object.NextOccurrence)", span="155-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_151 [label="Exit lambda expression", span="154-156", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_161 [label="x.GetMatches(time)", span="168-168", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_160 [label="Entry lambda expression", span="168-168", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_162 [label="Exit lambda expression", span="168-168", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_169 [label="Entry lambda expression", span="174-174", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_173 [label="scheduler.Execute(_token)", span="178-178", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_172 [label="Entry lambda expression", span="178-178", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_170 [label="x.GetAllItemsFromSet(It.IsAny<string>())", span="174-174", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_171 [label="Exit lambda expression", span="174-174", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_174 [label="Exit lambda expression", span="178-178", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_182 [label="scheduler.Execute(_token)", span="191-191", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_183 [label="Exit lambda expression", span="191-191", cluster="lambda expression", file="RecurringJobSchedulerFacts.cs"];
m0_100 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="RecurringJobSchedulerFacts.cs"];
m0_53 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="RecurringJobSchedulerFacts.cs"];
m0_62 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="RecurringJobSchedulerFacts.cs"];
m0_180 [label="Entry Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", span="26-26", cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", file="RecurringJobSchedulerFacts.cs"];
m0_23 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="RecurringJobSchedulerFacts.cs"];
m0_86 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", span="91-91", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_87 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n// ReSharper disable once AssignNullToNotNullAttribute\r\n                () => new RecurringJobScheduler(_storage.Object, _client.Object, _instantFactory.Object, null))", span="93-95", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_88 [label="Assert.Equal(''throttler'', exception.ParamName)", span="97-97", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_89 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", span="91-91", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Ctor_ThrowsAnException_WhenThrottlerIsNull()", file="RecurringJobSchedulerFacts.cs"];
m0_175 [label="Entry Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", span="182-182", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="RecurringJobSchedulerFacts.cs"];
m0_176 [label="_recurringJob[''Job''] =\r\n                JobHelper.ToJson(new InvocationData(''SomeType'', ''SomeMethod'', ''Parameters'', ''arguments''))", span="185-186", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="RecurringJobSchedulerFacts.cs"];
m0_177 [label="var scheduler = CreateScheduler()", span="188-188", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="RecurringJobSchedulerFacts.cs"];
m0_178 [label="Assert.DoesNotThrow(() => scheduler.Execute(_token))", span="191-191", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="RecurringJobSchedulerFacts.cs"];
m0_179 [label="Exit Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", span="182-182", cluster="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts.Execute_HandlesJobLoadException()", file="RecurringJobSchedulerFacts.cs"];
m0_28 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="RecurringJobSchedulerFacts.cs"];
m0_45 [label="Entry System.Console.WriteLine()", span="0-0", cluster="System.Console.WriteLine()", file="RecurringJobSchedulerFacts.cs"];
m0_25 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="RecurringJobSchedulerFacts.cs"];
m0_119 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="RecurringJobSchedulerFacts.cs"];
m0_29 [label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0", cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="RecurringJobSchedulerFacts.cs"];
m0_186 [label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts", span="", file="RecurringJobSchedulerFacts.cs"];
m0_187 [label=jobKey, span="", file="RecurringJobSchedulerFacts.cs"];
m0_188 [label=time, span="", file="RecurringJobSchedulerFacts.cs"];
m0_189 [label=scheduler, span="", file="RecurringJobSchedulerFacts.cs"];
m0_190 [label=scheduler, span="", file="RecurringJobSchedulerFacts.cs"];
n215 -> n1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n22  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n29  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n35  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n41  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n47  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n53  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n59  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n65  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n71  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n83  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n89  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n95  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n101  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n107  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n113  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n119  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n125  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n131  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n137  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n143  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n149  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n155  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n161  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n167  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n173  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n179  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n185  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n215 -> n196  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Common.JobArgumentFacts"];
n216 -> n208  [key=1, style=dashed, color=darkseagreen4, label=T];
n216 -> n212  [key=1, style=dashed, color=darkseagreen4, label=T];
n217 -> n208  [key=1, style=dashed, color=darkseagreen4, label=converter];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n5  [key=2, style=dotted];
n2 -> n3  [key=0, style=solid];
n2 -> n6  [key=2, style=dotted];
n2 -> n7  [key=2, style=dotted];
n2 -> n9  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n3 -> n4  [key=0, style=solid];
n3 -> n8  [key=2, style=dotted];
n9 -> n10  [key=0, style=solid];
n14 -> n15  [key=0, style=solid];
n4 -> n0  [key=0, style=bold, color=blue];
n10 -> n11  [key=0, style=solid];
n10 -> n12  [key=2, style=dotted];
n10 -> n13  [key=2, style=dotted];
n11 -> n9  [key=0, style=bold, color=blue];
n15 -> n16  [key=0, style=solid];
n15 -> n0  [key=2, style=dotted];
n16 -> n14  [key=0, style=bold, color=blue];
n17 -> n18  [key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n18 -> n20  [key=2, style=dotted];
n19 -> n17  [key=0, style=bold, color=blue];
n21 -> n22  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n24  [key=2, style=dotted];
n23 -> n21  [key=0, style=bold, color=blue];
n24 -> n187  [key=0, style=solid];
n24 -> n190  [key=1, style=dashed, color=darkseagreen4, label=bool];
n24 -> n192  [key=1, style=dashed, color=darkseagreen4, label=T];
n24 -> n208  [key=1, style=dashed, color=darkseagreen4, label=T];
n24 -> n193  [key=1, style=dashed, color=darkseagreen4, label=T];
n24 -> n212  [key=1, style=dashed, color=darkseagreen4, label=T];
n25 -> n26  [key=0, style=solid];
n26 -> n27  [key=0, style=solid];
n26 -> n20  [key=2, style=dotted];
n27 -> n25  [key=0, style=bold, color=blue];
n28 -> n29  [key=0, style=solid];
n29 -> n30  [key=0, style=solid];
n29 -> n24  [key=2, style=dotted];
n30 -> n28  [key=0, style=bold, color=blue];
n31 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n20  [key=2, style=dotted];
n33 -> n31  [key=0, style=bold, color=blue];
n34 -> n35  [key=0, style=solid];
n35 -> n36  [key=0, style=solid];
n35 -> n24  [key=2, style=dotted];
n36 -> n34  [key=0, style=bold, color=blue];
n37 -> n38  [key=0, style=solid];
n38 -> n39  [key=0, style=solid];
n38 -> n20  [key=2, style=dotted];
n39 -> n37  [key=0, style=bold, color=blue];
n40 -> n41  [key=0, style=solid];
n41 -> n42  [key=0, style=solid];
n41 -> n24  [key=2, style=dotted];
n42 -> n40  [key=0, style=bold, color=blue];
n43 -> n44  [key=0, style=solid];
n44 -> n45  [key=0, style=solid];
n44 -> n20  [key=2, style=dotted];
n45 -> n43  [key=0, style=bold, color=blue];
n46 -> n47  [key=0, style=solid];
n47 -> n48  [key=0, style=solid];
n47 -> n24  [key=2, style=dotted];
n48 -> n46  [key=0, style=bold, color=blue];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n50 -> n20  [key=2, style=dotted];
n51 -> n49  [key=0, style=bold, color=blue];
n52 -> n53  [key=0, style=solid];
n53 -> n54  [key=0, style=solid];
n53 -> n24  [key=2, style=dotted];
n54 -> n52  [key=0, style=bold, color=blue];
n55 -> n56  [key=0, style=solid];
n56 -> n57  [key=0, style=solid];
n56 -> n20  [key=2, style=dotted];
n57 -> n55  [key=0, style=bold, color=blue];
n58 -> n59  [key=0, style=solid];
n59 -> n60  [key=0, style=solid];
n59 -> n24  [key=2, style=dotted];
n60 -> n58  [key=0, style=bold, color=blue];
n61 -> n62  [key=0, style=solid];
n62 -> n63  [key=0, style=solid];
n62 -> n20  [key=2, style=dotted];
n63 -> n61  [key=0, style=bold, color=blue];
n64 -> n65  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n65 -> n24  [key=2, style=dotted];
n66 -> n64  [key=0, style=bold, color=blue];
n67 -> n68  [key=0, style=solid];
n68 -> n69  [key=0, style=solid];
n68 -> n20  [key=2, style=dotted];
n69 -> n67  [key=0, style=bold, color=blue];
n70 -> n71  [key=0, style=solid];
n71 -> n72  [key=0, style=solid];
n71 -> n24  [key=2, style=dotted];
n72 -> n70  [key=0, style=bold, color=blue];
n73 -> n74  [key=0, style=solid];
n74 -> n75  [key=0, style=solid];
n74 -> n20  [key=2, style=dotted];
n75 -> n73  [key=0, style=bold, color=blue];
n76 -> n77  [key=0, style=solid];
n77 -> n78  [key=0, style=solid];
n77 -> n24  [key=2, style=dotted];
n78 -> n76  [key=0, style=bold, color=blue];
n79 -> n80  [key=0, style=solid];
n80 -> n81  [key=0, style=solid];
n80 -> n20  [key=2, style=dotted];
n81 -> n79  [key=0, style=bold, color=blue];
n82 -> n83  [key=0, style=solid];
n83 -> n84  [key=0, style=solid];
n83 -> n24  [key=2, style=dotted];
n84 -> n82  [key=0, style=bold, color=blue];
n85 -> n86  [key=0, style=solid];
n86 -> n87  [key=0, style=solid];
n86 -> n20  [key=2, style=dotted];
n87 -> n85  [key=0, style=bold, color=blue];
n88 -> n89  [key=0, style=solid];
n89 -> n90  [key=0, style=solid];
n89 -> n24  [key=2, style=dotted];
n90 -> n88  [key=0, style=bold, color=blue];
n91 -> n92  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n92 -> n20  [key=2, style=dotted];
n93 -> n91  [key=0, style=bold, color=blue];
n94 -> n95  [key=0, style=solid];
n95 -> n96  [key=0, style=solid];
n95 -> n24  [key=2, style=dotted];
n96 -> n94  [key=0, style=bold, color=blue];
n97 -> n98  [key=0, style=solid];
n98 -> n99  [key=0, style=solid];
n98 -> n20  [key=2, style=dotted];
n99 -> n97  [key=0, style=bold, color=blue];
n100 -> n101  [key=0, style=solid];
n101 -> n102  [key=0, style=solid];
n101 -> n24  [key=2, style=dotted];
n102 -> n100  [key=0, style=bold, color=blue];
n103 -> n104  [key=0, style=solid];
n104 -> n105  [key=0, style=solid];
n104 -> n20  [key=2, style=dotted];
n105 -> n103  [key=0, style=bold, color=blue];
n106 -> n107  [key=0, style=solid];
n107 -> n108  [key=0, style=solid];
n107 -> n24  [key=2, style=dotted];
n108 -> n106  [key=0, style=bold, color=blue];
n109 -> n110  [key=0, style=solid];
n110 -> n111  [key=0, style=solid];
n110 -> n20  [key=2, style=dotted];
n111 -> n109  [key=0, style=bold, color=blue];
n112 -> n113  [key=0, style=solid];
n113 -> n114  [key=0, style=solid];
n113 -> n24  [key=2, style=dotted];
n114 -> n112  [key=0, style=bold, color=blue];
n115 -> n116  [key=0, style=solid];
n116 -> n117  [key=0, style=solid];
n116 -> n20  [key=2, style=dotted];
n117 -> n115  [key=0, style=bold, color=blue];
n118 -> n119  [key=0, style=solid];
n119 -> n120  [key=0, style=solid];
n119 -> n24  [key=2, style=dotted];
n120 -> n118  [key=0, style=bold, color=blue];
n121 -> n122  [key=0, style=solid];
n122 -> n123  [key=0, style=solid];
n122 -> n20  [key=2, style=dotted];
n123 -> n121  [key=0, style=bold, color=blue];
n124 -> n125  [key=0, style=solid];
n125 -> n126  [key=0, style=solid];
n125 -> n24  [key=2, style=dotted];
n126 -> n124  [key=0, style=bold, color=blue];
n127 -> n128  [key=0, style=solid];
n128 -> n129  [key=0, style=solid];
n128 -> n20  [key=2, style=dotted];
n129 -> n127  [key=0, style=bold, color=blue];
n130 -> n131  [key=0, style=solid];
n131 -> n132  [key=0, style=solid];
n131 -> n24  [key=2, style=dotted];
n132 -> n130  [key=0, style=bold, color=blue];
n133 -> n134  [key=0, style=solid];
n134 -> n135  [key=0, style=solid];
n134 -> n20  [key=2, style=dotted];
n135 -> n133  [key=0, style=bold, color=blue];
n136 -> n137  [key=0, style=solid];
n137 -> n138  [key=0, style=solid];
n137 -> n24  [key=2, style=dotted];
n138 -> n136  [key=0, style=bold, color=blue];
n139 -> n140  [key=0, style=solid];
n140 -> n141  [key=0, style=solid];
n140 -> n20  [key=2, style=dotted];
n141 -> n139  [key=0, style=bold, color=blue];
n142 -> n143  [key=0, style=solid];
n143 -> n144  [key=0, style=solid];
n143 -> n24  [key=2, style=dotted];
n144 -> n142  [key=0, style=bold, color=blue];
n145 -> n146  [key=0, style=solid];
n146 -> n147  [key=0, style=solid];
n146 -> n20  [key=2, style=dotted];
n147 -> n145  [key=0, style=bold, color=blue];
n148 -> n149  [key=0, style=solid];
n149 -> n150  [key=0, style=solid];
n149 -> n24  [key=2, style=dotted];
n150 -> n148  [key=0, style=bold, color=blue];
n151 -> n152  [key=0, style=solid];
n152 -> n153  [key=0, style=solid];
n152 -> n20  [key=2, style=dotted];
n153 -> n151  [key=0, style=bold, color=blue];
n154 -> n155  [key=0, style=solid];
n155 -> n156  [key=0, style=solid];
n155 -> n24  [key=2, style=dotted];
n156 -> n154  [key=0, style=bold, color=blue];
n157 -> n158  [key=0, style=solid];
n158 -> n159  [key=0, style=solid];
n158 -> n20  [key=2, style=dotted];
n159 -> n157  [key=0, style=bold, color=blue];
n160 -> n161  [key=0, style=solid];
n161 -> n162  [key=0, style=solid];
n161 -> n24  [key=2, style=dotted];
n162 -> n160  [key=0, style=bold, color=blue];
n163 -> n164  [key=0, style=solid];
n164 -> n165  [key=0, style=solid];
n164 -> n20  [key=2, style=dotted];
n165 -> n163  [key=0, style=bold, color=blue];
n166 -> n167  [key=0, style=solid];
n167 -> n168  [key=0, style=solid];
n167 -> n24  [key=2, style=dotted];
n168 -> n166  [key=0, style=bold, color=blue];
n169 -> n170  [key=0, style=solid];
n170 -> n171  [key=0, style=solid];
n170 -> n20  [key=2, style=dotted];
n171 -> n169  [key=0, style=bold, color=blue];
n172 -> n173  [key=0, style=solid];
n173 -> n174  [key=0, style=solid];
n173 -> n24  [key=2, style=dotted];
n174 -> n172  [key=0, style=bold, color=blue];
n175 -> n176  [key=0, style=solid];
n176 -> n177  [key=0, style=solid];
n176 -> n20  [key=2, style=dotted];
n177 -> n175  [key=0, style=bold, color=blue];
n178 -> n179  [key=0, style=solid];
n179 -> n180  [key=0, style=solid];
n179 -> n24  [key=2, style=dotted];
n180 -> n178  [key=0, style=bold, color=blue];
n181 -> n182  [key=0, style=solid];
n182 -> n183  [key=0, style=solid];
n182 -> n20  [key=2, style=dotted];
n183 -> n181  [key=0, style=bold, color=blue];
n184 -> n185  [key=0, style=solid];
n185 -> n186  [key=0, style=solid];
n185 -> n24  [key=2, style=dotted];
n186 -> n184  [key=0, style=bold, color=blue];
n187 -> n188  [key=0, style=solid];
n187 -> n195  [key=1, style=dashed, color=darkseagreen4, label=type];
n190 -> n191  [key=0, style=solid];
n190 -> n193  [key=0, style=solid];
n192 -> n193  [key=0, style=solid];
n192 -> n201  [key=2, style=dotted];
n192 -> n202  [key=2, style=dotted];
n208 -> n209  [key=0, style=solid];
n208 -> n210  [key=2, style=dotted];
n193 -> n194  [key=0, style=solid];
n193 -> n203  [key=2, style=dotted];
n193 -> n202  [key=2, style=dotted];
n212 -> n213  [key=0, style=solid];
n212 -> n214  [key=2, style=dotted];
n188 -> n189  [key=0, style=solid];
n188 -> n198  [key=2, style=dotted];
n188 -> n195  [key=1, style=dashed, color=darkseagreen4, label=methodInfo];
n195 -> n196  [key=0, style=solid];
n195 -> n204  [key=2, style=dotted];
n195 -> n205  [key=2, style=dotted];
n189 -> n190  [key=0, style=solid];
n189 -> n199  [key=2, style=dotted];
n189 -> n192  [key=1, style=dashed, color=darkseagreen4, label=serializationMethods];
n189 -> n193  [key=1, style=dashed, color=darkseagreen4, label=serializationMethods];
n189 -> n194  [key=1, style=dashed, color=darkseagreen4, label=serializationMethods];
n194 -> n195  [key=0, style=solid];
n194 -> n197  [key=0, style=solid];
n191 -> n192  [key=0, style=solid];
n191 -> n200  [key=2, style=dotted];
n191 -> n208  [key=1, style=dashed, color=darkseagreen4, label=converter];
n197 -> n24  [key=0, style=bold, color=blue];
n196 -> n194  [key=0, style=solid];
n196 -> n206  [key=2, style=dotted];
n207 -> n208  [key=0, style=solid];
n209 -> n207  [key=0, style=bold, color=blue];
n211 -> n212  [key=0, style=solid];
n213 -> n211  [key=0, style=bold, color=blue];
m0_63 -> m0_64  [key=0, style=solid];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_33  [key=2, style=dotted];
m0_64 -> m0_68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> n20  [key=2, style=dotted];
m0_66 -> m0_63  [key=0, style=bold, color=blue];
m0_152 -> m0_153  [key=0, style=solid];
m0_153 -> m0_154  [key=0, style=solid, color=green];
m0_153 -> m0_157  [key=1, style=dashed, color=darkseagreen4, label=time];
m0_153 -> m0_161  [key=1, style=dashed, color=darkseagreen4, label=time];
m0_154 -> m0_155  [key=0, style=solid, color=green];
m0_154 -> m0_159  [key=2, style=dotted, color=green];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_100  [key=2, style=dotted];
m0_157 -> m0_160  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_155 -> m0_156  [key=0, style=solid];
m0_155 -> m0_98  [key=2, style=dotted];
m0_156 -> m0_157  [key=0, style=solid];
m0_156 -> m0_99  [key=2, style=dotted];
m0_158 -> m0_152  [key=0, style=bold, color=blue];
m0_163 -> m0_164  [key=0, style=solid];
m0_164 -> m0_165  [key=0, style=solid];
m0_164 -> m0_22  [key=2, style=dotted];
m0_164 -> m0_29  [key=2, style=dotted];
m0_164 -> m0_23  [key=2, style=dotted];
m0_164 -> m0_169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_165 -> m0_166  [key=0, style=solid];
m0_165 -> m0_98  [key=2, style=dotted];
m0_165 -> m0_173  [key=1, style=dashed, color=darkseagreen4, label=scheduler];
m0_166 -> m0_167  [key=0, style=solid];
m0_166 -> m0_168  [key=2, style=dotted];
m0_166 -> m0_172  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_167 -> m0_163  [key=0, style=bold, color=blue];
m0_104 -> m0_105  [key=0, style=solid];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_98  [key=2, style=dotted];
m0_106 -> m0_107  [key=0, style=solid];
m0_106 -> m0_99  [key=2, style=dotted];
m0_107 -> m0_108  [key=0, style=solid];
m0_107 -> m0_57  [key=2, style=dotted];
m0_107 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m0_107 -> m0_109  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m0_107 -> m0_121  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m0_107 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m0_107 -> m0_128  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m0_108 -> m0_109  [key=0, style=solid];
m0_108 -> m0_100  [key=2, style=dotted];
m0_108 -> m0_112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_109 -> m0_110  [key=0, style=solid];
m0_109 -> m0_100  [key=2, style=dotted];
m0_109 -> m0_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_100  [key=2, style=dotted];
m0_110 -> m0_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_111 -> m0_104  [key=0, style=bold, color=blue];
m0_133 -> m0_134  [key=0, style=solid];
m0_134 -> m0_135  [key=0, style=solid];
m0_134 -> m0_22  [key=2, style=dotted];
m0_134 -> m0_23  [key=2, style=dotted];
m0_134 -> m0_140  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_135 -> m0_136  [key=0, style=solid];
m0_135 -> m0_98  [key=2, style=dotted];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_99  [key=2, style=dotted];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_100  [key=2, style=dotted];
m0_137 -> m0_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_100  [key=2, style=dotted];
m0_138 -> m0_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_139 -> m0_133  [key=0, style=bold, color=blue];
m0_79 -> m0_80  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_33  [key=2, style=dotted];
m0_80 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> n20  [key=2, style=dotted];
m0_82 -> m0_79  [key=0, style=bold, color=blue];
m0_98 -> m0_184  [key=0, style=solid];
m0_184 -> m0_185  [key=0, style=solid];
m0_184 -> m0_71  [key=2, style=dotted];
m0_185 -> m0_98  [key=0, style=bold, color=blue];
m0_72 -> m0_73  [key=0, style=solid];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_33  [key=2, style=dotted];
m0_73 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> n20  [key=2, style=dotted];
m0_75 -> m0_72  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_16  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_17  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_18  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_19  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_20  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_21  [key=2, style=dotted];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_22  [key=2, style=dotted];
m0_7 -> m0_23  [key=2, style=dotted];
m0_7 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_22  [key=2, style=dotted];
m0_8 -> m0_23  [key=2, style=dotted];
m0_8 -> m0_35  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_8 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_24  [key=2, style=dotted];
m0_9 -> m0_25  [key=2, style=dotted];
m0_9 -> m0_26  [key=2, style=dotted];
m0_9 -> m0_27  [key=2, style=dotted];
m0_9 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_28  [key=2, style=dotted];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_22  [key=2, style=dotted];
m0_11 -> m0_23  [key=2, style=dotted];
m0_11 -> m0_46  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_22  [key=2, style=dotted];
m0_12 -> m0_29  [key=2, style=dotted];
m0_12 -> m0_23  [key=2, style=dotted];
m0_12 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_22  [key=2, style=dotted];
m0_13 -> m0_23  [key=2, style=dotted];
m0_13 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_14 -> m0_15  [key=0, style=solid];
m0_14 -> m0_22  [key=2, style=dotted];
m0_14 -> m0_23  [key=2, style=dotted];
m0_14 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_15 -> m0_0  [key=0, style=bold, color=blue];
m0_93 -> m0_94  [key=0, style=solid];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_98  [key=2, style=dotted];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_99  [key=2, style=dotted];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_100  [key=2, style=dotted];
m0_96 -> m0_101  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_97 -> m0_93  [key=0, style=bold, color=blue];
m0_181 -> m0_182  [key=0, style=solid];
m0_30 -> m0_31  [key=0, style=solid];
m0_35 -> m0_36  [key=0, style=solid];
m0_39 -> m0_40  [key=0, style=solid];
m0_42 -> m0_43  [key=0, style=solid];
m0_46 -> m0_47  [key=0, style=solid];
m0_50 -> m0_51  [key=0, style=solid];
m0_54 -> m0_55  [key=0, style=solid];
m0_59 -> m0_60  [key=0, style=solid];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_33  [key=2, style=dotted];
m0_31 -> m0_34  [key=2, style=dotted];
m0_32 -> m0_30  [key=0, style=bold, color=blue];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_33  [key=2, style=dotted];
m0_36 -> m0_38  [key=2, style=dotted];
m0_37 -> m0_35  [key=0, style=bold, color=blue];
m0_40 -> m0_41  [key=0, style=solid];
m0_41 -> m0_39  [key=0, style=bold, color=blue];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_45  [key=2, style=dotted];
m0_44 -> m0_42  [key=0, style=bold, color=blue];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_49  [key=2, style=dotted];
m0_48 -> m0_46  [key=0, style=bold, color=blue];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_53  [key=2, style=dotted];
m0_52 -> m0_50  [key=0, style=bold, color=blue];
m0_55 -> m0_56  [key=0, style=solid];
m0_55 -> m0_57  [key=2, style=dotted];
m0_55 -> m0_58  [key=2, style=dotted];
m0_56 -> m0_54  [key=0, style=bold, color=blue];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_33  [key=2, style=dotted];
m0_60 -> m0_62  [key=2, style=dotted];
m0_61 -> m0_59  [key=0, style=bold, color=blue];
m0_68 -> m0_69  [key=0, style=solid];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_71  [key=2, style=dotted];
m0_70 -> m0_68  [key=0, style=bold, color=blue];
m0_76 -> m0_77  [key=0, style=solid];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_71  [key=2, style=dotted];
m0_78 -> m0_76  [key=0, style=bold, color=blue];
m0_83 -> m0_84  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_71  [key=2, style=dotted];
m0_85 -> m0_83  [key=0, style=bold, color=blue];
m0_90 -> m0_91  [key=0, style=solid];
m0_91 -> m0_92  [key=0, style=solid];
m0_91 -> m0_71  [key=2, style=dotted];
m0_92 -> m0_90  [key=0, style=bold, color=blue];
m0_101 -> m0_102  [key=0, style=solid];
m0_102 -> m0_103  [key=0, style=solid];
m0_102 -> m0_33  [key=2, style=dotted];
m0_102 -> m0_62  [key=2, style=dotted];
m0_103 -> m0_101  [key=0, style=bold, color=blue];
m0_113 -> m0_114  [key=0, style=solid];
m0_113 -> m0_33  [key=2, style=dotted];
m0_113 -> m0_115  [key=2, style=dotted];
m0_113 -> m0_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_33  [key=2, style=dotted];
m0_121 -> m0_115  [key=2, style=dotted];
m0_121 -> m0_123  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_33  [key=2, style=dotted];
m0_128 -> m0_115  [key=2, style=dotted];
m0_128 -> m0_130  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_112 -> m0_113  [key=0, style=solid];
m0_120 -> m0_121  [key=0, style=solid];
m0_127 -> m0_128  [key=0, style=solid];
m0_114 -> m0_112  [key=0, style=bold, color=blue];
m0_116 -> m0_117  [key=0, style=solid];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_119  [key=2, style=dotted];
m0_118 -> m0_116  [key=0, style=bold, color=blue];
m0_122 -> m0_120  [key=0, style=bold, color=blue];
m0_123 -> m0_124  [key=0, style=solid];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_119  [key=2, style=dotted];
m0_124 -> m0_126  [key=2, style=dotted];
m0_125 -> m0_123  [key=0, style=bold, color=blue];
m0_129 -> m0_127  [key=0, style=bold, color=blue];
m0_130 -> m0_131  [key=0, style=solid];
m0_131 -> m0_132  [key=0, style=solid];
m0_131 -> m0_119  [key=2, style=dotted];
m0_131 -> m0_126  [key=2, style=dotted];
m0_132 -> m0_130  [key=0, style=bold, color=blue];
m0_140 -> m0_141  [key=0, style=solid];
m0_143 -> m0_144  [key=0, style=solid];
m0_146 -> m0_147  [key=0, style=solid];
m0_141 -> m0_142  [key=0, style=solid];
m0_141 -> m0_33  [key=2, style=dotted];
m0_141 -> m0_34  [key=2, style=dotted];
m0_142 -> m0_140  [key=0, style=bold, color=blue];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_33  [key=2, style=dotted];
m0_144 -> m0_62  [key=2, style=dotted];
m0_145 -> m0_143  [key=0, style=bold, color=blue];
m0_147 -> m0_148  [key=0, style=solid];
m0_147 -> m0_57  [key=2, style=dotted];
m0_147 -> m0_33  [key=2, style=dotted];
m0_147 -> m0_115  [key=2, style=dotted];
m0_147 -> m0_149  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_148 -> m0_146  [key=0, style=bold, color=blue];
m0_149 -> m0_150  [key=0, style=solid];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_119  [key=2, style=dotted];
m0_150 -> m0_126  [key=2, style=dotted];
m0_151 -> m0_149  [key=0, style=bold, color=blue];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_34  [key=2, style=dotted];
m0_160 -> m0_161  [key=0, style=solid];
m0_162 -> m0_160  [key=0, style=bold, color=blue];
m0_169 -> m0_170  [key=0, style=solid];
m0_173 -> m0_174  [key=0, style=solid];
m0_173 -> m0_99  [key=2, style=dotted];
m0_172 -> m0_173  [key=0, style=solid];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_33  [key=2, style=dotted];
m0_170 -> m0_53  [key=2, style=dotted];
m0_171 -> m0_169  [key=0, style=bold, color=blue];
m0_174 -> m0_172  [key=0, style=bold, color=blue];
m0_182 -> m0_183  [key=0, style=solid];
m0_182 -> m0_99  [key=2, style=dotted];
m0_183 -> m0_181  [key=0, style=bold, color=blue];
m0_86 -> m0_87  [key=0, style=solid];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_33  [key=2, style=dotted];
m0_87 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> n20  [key=2, style=dotted];
m0_89 -> m0_86  [key=0, style=bold, color=blue];
m0_175 -> m0_176  [key=0, style=solid];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_180  [key=2, style=dotted];
m0_176 -> m0_27  [key=2, style=dotted];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_98  [key=2, style=dotted];
m0_177 -> m0_182  [key=1, style=dashed, color=darkseagreen4, label=scheduler];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_168  [key=2, style=dotted];
m0_178 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_179 -> m0_175  [key=0, style=bold, color=blue];
m0_186 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_3  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_64  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_73  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_84  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_94  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_105  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_106  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_108  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_109  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_121  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_124  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_110  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_128  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_134  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_135  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_136  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_137  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_138  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_147  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_150  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_154  [key=1, style=dashed, color=green, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_156  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_157  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_164  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_165  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_166  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_173  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_176  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_177  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_178  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_182  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_186 -> m0_184  [key=1, style=dashed, color=darkseagreen4, label="Hangfire.Core.Tests.Server.RecurringJobSchedulerFacts"];
m0_187 -> m0_113  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m0_187 -> m0_121  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m0_187 -> m0_128  [key=1, style=dashed, color=darkseagreen4, label=jobKey];
m0_188 -> m0_161  [key=1, style=dashed, color=darkseagreen4, label=time];
m0_189 -> m0_173  [key=1, style=dashed, color=darkseagreen4, label=scheduler];
m0_190 -> m0_182  [key=1, style=dashed, color=darkseagreen4, label=scheduler];
}
