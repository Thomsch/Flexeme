digraph  {
d95 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)", color=green, community=0, label="return JobHelper.FromJson<List<Continuation>>(connection.GetJobParameter(\r\n                jobId, ''Continuations'')) ?? new List<Continuation>();", prediction=0, span="221-222"];
d36 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)", label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)", span="219-219"];
d96 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)", label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuations(Hangfire.Storage.IStorageConnection, string)", span="219-219"];
d97 [cluster="Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)", label="Entry Hangfire.Storage.IStorageConnection.GetJobParameter(string, string)", span="39-39"];
d98 [cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39"];
d99 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
d24 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="var continuations = GetContinuations(connection, parentId)", span="85-85"];
d46 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="var continuations = GetContinuations(context.Connection, context.JobId)", span="121-121"];
d21 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="var connection = context.Connection", span="76-76"];
d22 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="var parentId = awaitingState.ParentId", span="77-77"];
d23 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="connection.AcquireDistributedJobLock(parentId, AddJobLockTimeout)", span="83-83"];
d25 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="continuations.Add(new Continuation { JobId = context.JobId, Options = awaitingState.Options })", span="86-86"];
d30 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="SetContinuations(connection, parentId, continuations)", span="103-103"];
d15 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", span="117-117"];
d47 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="var nextStates = new Dictionary<string, IState>()", span="122-122"];
d48 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label=continuations, span="126-126"];
d13 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", span="74-74"];
d26 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="var jobData = connection.GetJobData(parentId)", span="88-88"];
d29 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="var currentState = connection.GetStateData(parentId)", span="98-98"];
d28 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="throw new InvalidOperationException(\r\n                        String.Format(''Can not add a continuation: parent background job '{0}' does not exist.'', parentId));", span="94-95"];
d35 [cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)", label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)", span="26-26"];
d37 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.Continuation.Continuation()", label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.Continuation.Continuation()", span="229-229"];
d38 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
d31 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="currentState != null && _knownFinalStates.Contains(currentState.Name)", span="105-105"];
d43 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.Continuations.ContinuationsSupportAttribute.Continuation>)", label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.Continuations.ContinuationsSupportAttribute.Continuation>)", span="213-213"];
d11 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="ExecuteContinuationsIfExist(context)", span="61-61"];
d62 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", span="117-117"];
d50 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="var currentState = GetContinuaionState(context, continuation.JobId, ContinuationStateFetchTimeout)", span="130-130"];
d53 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="continuation.Options.HasFlag(JobContinuationOptions.OnlyOnSucceededState) &&\r\n                    context.CandidateState.Name != SucceededState.StateName", span="140-141"];
d61 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="context.StateMachine.ChangeState(tuple.Key, tuple.Value, new[] { AwaitingState.StateName })", span="168-168"];
d63 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
d54 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="nextStates.Add(continuation.JobId, new DeletedState { Reason = ''Missed continuation'' })", span="143-143"];
d59 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="nextStates.Add(continuation.JobId, nextState)", span="163-163"];
d60 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label=nextStates, span="166-166"];
d49 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="String.IsNullOrWhiteSpace(continuation.JobId)", span="128-128"];
d51 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="currentState == null", span="131-131"];
d52 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="currentState.Name != AwaitingState.StateName", span="138-138"];
d9 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="AddContinuation(context, awaitingState)", span="56-56"];
d34 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", span="74-74"];
d32 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="var startImmediately = !awaitingState.Options.HasFlag(JobContinuationOptions.OnlyOnSucceededState) ||\r\n                        currentState.Name == SucceededState.StateName", span="107-108"];
d33 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="context.CandidateState = startImmediately\r\n                        ? awaitingState.NextState\r\n                        : new DeletedState { Reason = ''Missed continuation'' }", span="110-112"];
d27 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.AddContinuation(Hangfire.States.ElectStateContext, Hangfire.Continuations.AwaitingState)", label="jobData == null", span="89-89"];
d39 [cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)", label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42"];
d42 [cluster="Hangfire.Storage.IStorageConnection.GetStateData(string)", label="Entry Hangfire.Storage.IStorageConnection.GetStateData(string)", span="45-45"];
d40 [cluster="System.InvalidOperationException.InvalidOperationException(string)", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
d41 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
d102 [label="Hangfire.Continuations.ContinuationsSupportAttribute", span=""];
d14 [cluster="System.Collections.Generic.HashSet<T>.Contains(T)", label="Entry System.Collections.Generic.HashSet<T>.Contains(T)", span="0-0"];
d92 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.Continuations.ContinuationsSupportAttribute.Continuation>)", label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.Continuations.ContinuationsSupportAttribute.Continuation>)", span="213-213"];
d91 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.SetContinuations(Hangfire.Storage.IStorageConnection, string, System.Collections.Generic.List<Hangfire.Continuations.ContinuationsSupportAttribute.Continuation>)", label="connection.SetJobParameter(jobId, ''Continuations'', JobHelper.ToJson(continuations))", span="216-216"];
d6 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", span="50-50"];
d10 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="_knownFinalStates.Contains(context.CandidateState.Name)", span="58-58"];
d12 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", span="50-50"];
d65 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", span="172-172"];
d56 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="nextState = JsonConvert.DeserializeObject<IState>(\r\n                        currentState.Data[''NextState''],\r\n                        new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Objects })", span="151-153"];
d55 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="IState nextState", span="147-147"];
d44 [cluster="System.Enum.HasFlag(System.Enum)", label="Entry System.Enum.HasFlag(System.Enum)", span="0-0"];
d70 [cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="31-31"];
d45 [cluster="Hangfire.States.DeletedState.DeletedState()", label="Entry Hangfire.States.DeletedState.DeletedState()", span="27-27"];
d66 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
d58 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label="nextState = new FailedState(ex)\r\n                    {\r\n                        Reason = ''Can not start the continuation due to de-serialization error.''\r\n                    }", span="157-160"];
d64 [cluster="string.IsNullOrWhiteSpace(string)", label="Entry string.IsNullOrWhiteSpace(string)", span="0-0"];
d7 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="var awaitingState = context.CandidateState as AwaitingState", span="52-52"];
d8 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.OnStateElection(Hangfire.States.ElectStateContext)", label="awaitingState != null", span="53-53"];
d75 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="var continuationData = context.Connection.GetJobData(continuationJobId)", span="181-181"];
d78 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="currentState = context.Connection.GetStateData(continuationJobId)", span="192-192"];
d3 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)", label="_knownFinalStates = knownFinalStates", span="43-43"];
d4 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)", label="Order = 1000", span="47-47"];
d93 [cluster="Hangfire.Common.JobHelper.ToJson(object)", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
d94 [cluster="Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)", label="Entry Hangfire.Storage.IStorageConnection.SetJobParameter(string, string, string)", span="38-38"];
d85 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", span="172-172"];
d71 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="StateData currentState = null", span="174-174"];
d77 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="Logger.Warn(String.Format(\r\n                        ''Can not start continuation '{0}' for background job '{1}': continuation does not exist.'',\r\n                        continuationJobId,\r\n                        context.JobId))", span="184-187"];
d80 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="DateTime.UtcNow >= started.Add(timeout)", span="198-198"];
d81 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="throw new TimeoutException(String.Format(\r\n                        ''Can not start continuation '{0}' for background job '{1}': timeout expired while trying to fetch continuation state.'',\r\n                        continuationJobId,\r\n                        context.JobId));", span="200-203"];
d57 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ExecuteContinuationsIfExist(Hangfire.States.ElectStateContext)", label=Exception, span="155-155"];
d67 [cluster="JsonSerializerSettings.cstr", label="Entry JsonSerializerSettings.cstr", span=""];
d68 [cluster="Unk.>", label="Entry Unk.>", span=""];
d69 [cluster="Hangfire.States.FailedState.FailedState(System.Exception)", label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="26-26"];
d74 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label=true, span="179-179"];
d76 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="continuationData == null", span="182-182"];
d79 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="currentState != null", span="193-193"];
d84 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="return currentState;", span="210-210"];
d2 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)", label="Entry Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)", span="41-41"];
d5 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)", label="Exit Hangfire.Continuations.ContinuationsSupportAttribute.ContinuationsSupportAttribute(System.Collections.Generic.HashSet<string>)", span="41-41"];
d72 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="var started = DateTime.UtcNow", span="176-176"];
d86 [cluster="string.Format(string, object, object)", label="Entry string.Format(string, object, object)", span="0-0"];
d87 [cluster="Hangfire.Logging.ILog.Warn(string)", label="Entry Hangfire.Logging.ILog.Warn(string)", span="261-261"];
d82 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="Thread.Sleep(firstAttempt ? 0 : 1)", span="206-206"];
d88 [cluster="System.DateTime.Add(System.TimeSpan)", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
d89 [cluster="System.TimeoutException.TimeoutException(string)", label="Entry System.TimeoutException.TimeoutException(string)", span="0-0"];
d73 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="var firstAttempt = true", span="177-177"];
d83 [cluster="Hangfire.Continuations.ContinuationsSupportAttribute.GetContinuaionState(Hangfire.States.ElectStateContext, string, System.TimeSpan)", label="firstAttempt = false", span="207-207"];
d90 [cluster="System.Threading.Thread.Sleep(int)", label="Entry System.Threading.Thread.Sleep(int)", span="0-0"];
m0_452 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", span="556-556"];
m0_453 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="558-570"];
m0_454 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue(bool)", span="556-556"];
m0_769 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", span="959-959"];
m0_771 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", span="965-982"];
m0_770 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="961-963"];
m0_772 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey(bool)", span="959-959"];
m0_535 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", span="678-678"];
m0_536 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="680-691"];
m0_537 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt(bool)", span="678-678"];
m0_440 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", span="537-537"];
m0_441 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="539-550"];
m0_442 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsAnotherRecord_WhenBothKeyAndValueAreExist(bool)", span="537-537"];
m0_803 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="345-345"];
m0_635 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", span="800-800"];
m0_636 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching);\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''), useBatching);\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="802-817"];
m0_637 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords(bool)", span="800-800"];
m0_839 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", span="1044-1044"];
m0_841 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistHash(''hash-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''hash-1'']);\r\n                Assert.NotNull(records[''hash-2'']);\r\n            })", span="1050-1066"];
m0_840 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="1046-1048"];
m0_842 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ClearsExpirationTime_OnAGivenHash(bool)", span="1044-1044"];
m0_270 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="167-167"];
m0_377 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="198-198"];
m0_43 [cluster="Unk.ToString", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToString", span=""];
m0_177 [cluster="Unk.AddJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.AddJobState", span=""];
m0_908 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", span="1128-1128"];
m0_910 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", span="1134-1150"];
m0_909 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="1130-1132"];
m0_911 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash(bool)", span="1128-1128"];
m0_478 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", span="595-595"];
m0_479 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="597-608"];
m0_480 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey(bool)", span="595-595"];
m0_731 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="319-319"];
m0_547 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", span="697-697"];
m0_548 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="699-710"];
m0_549 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecords_OnlyOfAGivenKey(bool)", span="697-697"];
m0_678 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", span="851-851"];
m0_679 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var items = new List<string> { ''1'', ''2'', ''3'' };\r\n\r\n                Commit(sql, x => x.AddRangeToSet(''my-set'', items), useBatching);\r\n\r\n                var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''');\r\n                Assert.Equal(items, records);\r\n            })", span="853-861"];
m0_680 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_AddsAllItems_ToAGivenSet(bool)", span="851-851"];
m0_27 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", span="39-39"];
m0_29 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromHours(24)), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddHours(25));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", prediction=1, span="46-58"];
m0_28 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="41-44"];
m0_30 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData(bool)", span="39-39"];
m0_713 [cluster="Unk.Execute", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Execute", span=""];
m0_825 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", span="1030-1030"];
m0_826 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1032-1038"];
m0_827 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistHash_ThrowsAnException_WhenKeyIsNull(bool)", span="1030-1030"];
m0_236 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="247-247"];
m0_237 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="return connection\r\n                .Query(''select * from HangFire.Job where Id = @id'', new { id = jobId })\r\n                .Single();", span="249-251"];
m0_238 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="247-247"];
m0_838 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="358-358"];
m0_402 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="214-214"];
m0_45 [cluster="Unk.GetTestJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetTestJob", span=""];
m0_7 [cluster="Unk.SingleOrDefault", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SingleOrDefault", span=""];
m0_907 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="380-380"];
m0_252 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="159-159"];
m0_873 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="369-369"];
m0_768 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="332-332"];
m0_941 [cluster="SqlServerWriteOnlyTransaction.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry SqlServerWriteOnlyTransaction.cstr", span=""];
m0_509 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", span="638-638"];
m0_510 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="640-653"];
m0_511 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesRecordsToEnd_IfKeepAndingAt_GreaterThanMaxElementIndex(bool)", span="638-638"];
m0_339 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="193-193"];
m0_326 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", span="373-373"];
m0_327 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(0.0, record.Score, 2);\r\n            })", span="375-384"];
m0_328 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_IfThereIsNo_SuchKeyAndValue(bool)", span="373-373"];
m0_378 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", span="445-445"];
m0_379 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                }, useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="447-458"];
m0_380 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist(bool)", span="445-445"];
m0_690 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", span="867-867"];
m0_691 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null), useBatching));\r\n            })", span="869-873"];
m0_692 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull(bool)", span="867-867"];
m0_211 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", span="230-230"];
m0_215 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="_queueProviders.Add(correctProvider.Object, new[] { ''default'' })", span="237-237"];
m0_216 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToQueue(''default'', ''1''), useBatching);\r\n\r\n                correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''));\r\n            })", span="239-244"];
m0_213 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="233-233"];
m0_214 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="correctProvider.Setup(x => x.GetJobQueue())\r\n                .Returns(correctJobQueue.Object)", span="234-235"];
m0_212 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="232-232"];
m0_217 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToQueue_CallsEnqueue_OnTargetPersistentQueue(bool)", span="230-230"];
m0_572 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="258-258"];
m0_500 [cluster="Unk.ToArray", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToArray", span=""];
m0_850 [cluster="System.DateTime.AddDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddDays(double)", span="0-0"];
m0_44 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", span="1161-1161"];
m0_934 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="storage.Setup(x => x.QueueProviders).Returns(_queueProviders)", span="1167-1167"];
m0_933 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var storage = new Mock<SqlServerStorage>(connection, new SqlServerStorageOptions { CommandBatchMaxTimeout = useBatching ? TimeSpan.FromMinutes(1) : (TimeSpan?)null })", span="1166-1166"];
m0_936 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(transaction)", span="1171-1171"];
m0_935 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var transaction = new SqlServerWriteOnlyTransaction(storage.Object, () => null)", span="1169-1169"];
m0_937 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="transaction.Commit()", span="1172-1172"];
m0_938 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>, bool)", span="1161-1161"];
m0_0 [cluster="HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", span="11-11"];
m0_3 [cluster="HangFire.SqlServer.SqlStoredSets.GetFirstByLowestScore(string, long, long)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry HangFire.SqlServer.SqlStoredSets.GetFirstByLowestScore(string, long, long)", span="16-16"];
m0_1 [cluster="HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", file="SqlServerWriteOnlyTransactionFacts.cs", label="_connection = connection", span="13-13"];
m0_2 [cluster="HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.SqlServer.SqlStoredSets.SqlStoredSets(SqlConnection)", span="11-11"];
m0_4 [cluster="HangFire.SqlServer.SqlStoredSets.GetFirstByLowestScore(string, long, long)", file="SqlServerWriteOnlyTransactionFacts.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="18-21"];
m0_5 [cluster="HangFire.SqlServer.SqlStoredSets.GetFirstByLowestScore(string, long, long)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit HangFire.SqlServer.SqlStoredSets.GetFirstByLowestScore(string, long, long)", span="16-16"];
m0_605 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", span="767-767"];
m0_606 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                }), useBatching);\r\n\r\n                var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(null, result[''Key1'']);\r\n            })", span="769-782"];
m0_607 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_CanSetANullValue(bool)", span="767-767"];
m0_178 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", span="196-196"];
m0_180 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns((string)null);\r\n                state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null);\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(null, jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(null, jobState.Data);\r\n            })", span="203-224"];
m0_179 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="198-201"];
m0_181 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_CanBeCalledWithNullReasonAndData(bool)", span="196-196"];
m0_523 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", span="659-659"];
m0_524 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="661-672"];
m0_525 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_WhenStartingFromValue_GreaterThanMaxElementIndex(bool)", span="659-659"];
m0_703 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", span="879-879"];
m0_705 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", span="884-896"];
m0_704 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="881-882"];
m0_706 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey(bool)", span="879-879"];
m0_20 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="31-31"];
m0_32 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="46-58"];
m0_35 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromHours(24)), useBatching)", prediction=2, span="51-51"];
m0_33 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="48-48"];
m0_34 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="49-49"];
m0_36 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="53-53"];
m0_49 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="51-51"];
m0_50 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireJob(jobId, TimeSpan.FromHours(24))", prediction=2, span="51-51"];
m0_51 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="51-51"];
m0_37 [cluster="lambda expression", color=green, community=0, file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < job.ExpireAt && job.ExpireAt < DateTime.UtcNow.AddHours(25))", prediction=4, span="54-54"];
m0_38 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="56-56"];
m0_61 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistJob(jobId), useBatching)", span="76-76"];
m0_62 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="78-78"];
m0_64 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="81-81"];
m0_83 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching)", span="107-107"];
m0_84 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="109-109"];
m0_87 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJob = GetTestJob(sql, anotherJobId)", span="113-113"];
m0_123 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching)", span="145-145"];
m0_124 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="147-147"];
m0_154 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching)", span="178-178"];
m0_155 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="180-180"];
m0_188 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching)", span="212-212"];
m0_189 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var job = GetTestJob(sql, jobId)", span="214-214"];
m0_224 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToQueue(''default'', ''1''), useBatching)", span="241-241"];
m0_243 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key''), useBatching)", span="261-261"];
m0_257 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching)", span="278-278"];
m0_275 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                }, useBatching)", span="300-304"];
m0_287 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key''), useBatching)", span="319-319"];
m0_301 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching)", span="336-336"];
m0_318 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                }, useBatching)", span="358-362"];
m0_330 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''), useBatching)", span="377-377"];
m0_344 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                }, useBatching)", span="394-398"];
m0_356 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                }, useBatching)", span="413-417"];
m0_368 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2), useBatching)", span="432-432"];
m0_382 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                }, useBatching)", span="449-453"];
m0_394 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                }, useBatching)", span="468-472"];
m0_407 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                }, useBatching)", span="487-491"];
m0_419 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                }, useBatching)", span="506-510"];
m0_431 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''), useBatching)", span="525-525"];
m0_444 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                }, useBatching)", span="541-545"];
m0_456 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                }, useBatching)", span="560-565"];
m0_470 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                }, useBatching)", span="580-584"];
m0_482 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                }, useBatching)", span="599-603"];
m0_494 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                }, useBatching)", span="618-625"];
m0_513 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching)", span="642-648"];
m0_527 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                }, useBatching)", span="663-667"];
m0_539 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                }, useBatching)", span="682-686"];
m0_551 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                }, useBatching)", span="701-705"];
m0_563 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching))", span="720-721"];
m0_567 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching)", span="721-721"];
m0_577 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching))", span="734-735"];
m0_581 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching)", span="735-735"];
m0_590 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching)", span="748-752"];
m0_609 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                }), useBatching)", span="771-774"];
m0_626 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null), useBatching))", span="792-793"];
m0_629 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveHash(null), useBatching)", span="793-793"];
m0_639 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching)", span="805-809"];
m0_640 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveHash(''some-hash''), useBatching)", span="812-812"];
m0_654 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching))", span="827-828"];
m0_658 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching)", span="828-828"];
m0_669 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching))", span="841-842"];
m0_673 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching)", span="842-842"];
m0_683 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.AddRangeToSet(''my-set'', items), useBatching)", span="857-857"];
m0_694 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null), useBatching))", span="871-872"];
m0_697 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveSet(null), useBatching)", span="872-872"];
m0_709 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.RemoveSet(''set-1''), useBatching)", span="892-892"];
m0_721 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching))", span="906-907"];
m0_725 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching)", span="907-907"];
m0_738 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)), useBatching)", span="932-932"];
m0_758 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching))", span="949-950"];
m0_762 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching)", span="950-950"];
m0_775 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)), useBatching)", span="975-975"];
m0_794 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching))", span="992-993"];
m0_798 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching)", span="993-993"];
m0_810 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)), useBatching)", span="1017-1017"];
m0_829 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistHash(null), useBatching))", span="1034-1035"];
m0_833 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistHash(null), useBatching)", span="1035-1035"];
m0_845 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistHash(''hash-1''), useBatching)", span="1060-1060"];
m0_864 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null), useBatching))", span="1076-1077"];
m0_868 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistSet(null), useBatching)", span="1077-1077"];
m0_880 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistSet(''set-1''), useBatching)", span="1102-1102"];
m0_898 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null), useBatching))", span="1118-1119"];
m0_902 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistList(null), useBatching)", span="1119-1119"];
m0_914 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Commit(sql, x => x.PersistList(''list-1''), useBatching)", span="1144-1144"];
m0_40 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="46-58"];
m0_39 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.ExpireAt)", span="57-57"];
m0_263 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="288-288"];
m0_264 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="289-289"];
m0_307 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddHours(23) < expireAt)", span="346-346"];
m0_308 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(expireAt < DateTime.UtcNow.AddHours(25))", span="347-347"];
m0_740 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1''])", span="936-936"];
m0_741 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61))", span="937-937"];
m0_777 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1''])", span="979-979"];
m0_778 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61))", span="980-980"];
m0_812 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1''])", span="1021-1021"];
m0_813 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61))", span="1022-1022"];
m0_58 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="71-83"];
m0_59 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="73-73"];
m0_60 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="74-74"];
m0_68 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="76-76"];
m0_63 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.ExpireAt)", span="79-79"];
m0_65 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(anotherJob.ExpireAt)", span="82-82"];
m0_76 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="96-123"];
m0_77 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="98-98"];
m0_79 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="101-101"];
m0_82 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="104-105"];
m0_109 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="107-107"];
m0_85 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', job.StateName)", span="110-110"];
m0_86 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(job.StateId)", span="111-111"];
m0_78 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="99-99"];
m0_88 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateName)", span="114-114"];
m0_89 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(anotherJob.StateId)", span="115-115"];
m0_117 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="136-155"];
m0_118 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="138-138"];
m0_119 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="140-140"];
m0_122 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null)", span="143-143"];
m0_141 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="145-145"];
m0_125 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', job.StateName)", span="148-148"];
m0_126 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(job.StateId)", span="149-149"];
m0_148 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="168-190"];
m0_149 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="170-170"];
m0_150 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="172-172"];
m0_153 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="175-176"];
m0_174 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="178-178"];
m0_156 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateName)", span="181-181"];
m0_157 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateId)", span="182-182"];
m0_182 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="203-224"];
m0_183 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="205-205"];
m0_184 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var state = new Mock<IState>()", span="207-207"];
m0_187 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null)", span="210-210"];
m0_208 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="212-212"];
m0_190 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateName)", span="215-215"];
m0_191 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(job.StateId)", span="216-216"];
m0_223 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="239-244"];
m0_225 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="correctJobQueue.Verify(x => x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1''))", span="243-243"];
m0_228 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="241-241"];
m0_242 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="259-268"];
m0_244 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="263-263"];
m0_249 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="261-261"];
m0_256 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="276-290"];
m0_258 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="280-280"];
m0_266 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="278-278"];
m0_274 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="298-309"];
m0_276 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="306-306"];
m0_279 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="300-304"];
m0_286 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="317-326"];
m0_288 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="321-321"];
m0_293 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="319-319"];
m0_300 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="334-348"];
m0_302 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="338-338"];
m0_310 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="336-336"];
m0_317 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="356-367"];
m0_319 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="364-364"];
m0_322 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="358-362"];
m0_329 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="375-384"];
m0_331 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="379-379"];
m0_336 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="377-377"];
m0_343 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="392-403"];
m0_345 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="400-400"];
m0_348 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="394-398"];
m0_355 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="411-422"];
m0_357 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="419-419"];
m0_360 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="413-417"];
m0_367 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="430-439"];
m0_369 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="434-434"];
m0_374 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="432-432"];
m0_381 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="447-458"];
m0_383 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="455-455"];
m0_386 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="449-453"];
m0_393 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="466-477"];
m0_395 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="474-474"];
m0_398 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="468-472"];
m0_406 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="485-496"];
m0_408 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="493-493"];
m0_411 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="487-491"];
m0_418 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="504-515"];
m0_420 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="512-512"];
m0_423 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="506-510"];
m0_430 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="523-531"];
m0_432 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.List'').Single()", span="527-527"];
m0_436 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="525-525"];
m0_443 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="539-550"];
m0_445 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="547-547"];
m0_448 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="541-545"];
m0_455 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="558-570"];
m0_457 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="567-567"];
m0_460 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="560-565"];
m0_469 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="578-589"];
m0_471 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="586-586"];
m0_474 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="580-584"];
m0_481 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="597-608"];
m0_483 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="605-605"];
m0_486 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="599-603"];
m0_493 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="616-632"];
m0_495 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.List'').ToArray()", span="627-627"];
m0_501 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="618-625"];
m0_512 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="640-653"];
m0_514 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="650-650"];
m0_517 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="642-648"];
m0_526 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="661-672"];
m0_528 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="669-669"];
m0_531 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="663-667"];
m0_538 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="680-691"];
m0_540 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="688-688"];
m0_543 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="682-686"];
m0_550 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="699-710"];
m0_552 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single()", span="707-707"];
m0_555 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="701-705"];
m0_562 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="718-724"];
m0_564 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="723-723"];
m0_566 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="721-721"];
m0_568 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="721-721"];
m0_569 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="721-721"];
m0_576 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="732-738"];
m0_578 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="737-737"];
m0_580 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="735-735"];
m0_582 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="735-735"];
m0_583 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="735-735"];
m0_589 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="746-761"];
m0_591 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="754-757"];
m0_596 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="748-752"];
m0_608 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="769-782"];
m0_610 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var result = sql.Query(\r\n                        ''select * from HangFire.Hash where [Key] = @key'',\r\n                        new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="776-779"];
m0_613 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="771-774"];
m0_625 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="790-794"];
m0_627 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="790-794"];
m0_628 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="793-793"];
m0_630 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="793-793"];
m0_631 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="793-793"];
m0_638 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="802-817"];
m0_644 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="805-809"];
m0_641 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single()", span="815-815"];
m0_647 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="812-812"];
m0_653 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="825-831"];
m0_655 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="830-830"];
m0_657 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="828-828"];
m0_659 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="828-828"];
m0_660 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="828-828"];
m0_668 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="839-845"];
m0_670 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''items'', exception.ParamName)", span="844-844"];
m0_672 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="842-842"];
m0_674 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="842-842"];
m0_675 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="842-842"];
m0_681 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="853-861"];
m0_682 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var items = new List<string> { ''1'', ''2'', ''3'' }", span="855-855"];
m0_684 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query<string>(@''select [Value] from HangFire.[Set] where [Key] = N'my-set''')", span="859-859"];
m0_687 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="857-857"];
m0_693 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="869-873"];
m0_695 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="869-873"];
m0_696 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="872-872"];
m0_698 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="872-872"];
m0_699 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="872-872"];
m0_707 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="884-896"];
m0_708 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="886-890"];
m0_710 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="894-894"];
m0_714 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="892-892"];
m0_720 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="904-910"];
m0_722 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="909-909"];
m0_724 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="907-907"];
m0_726 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="907-907"];
m0_727 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="907-907"];
m0_736 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="922-939"];
m0_737 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                })", span="925-929"];
m0_739 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="935-935"];
m0_745 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="932-932"];
m0_757 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="947-953"];
m0_759 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="952-952"];
m0_761 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="950-950"];
m0_763 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="950-950"];
m0_764 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="950-950"];
m0_773 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="965-982"];
m0_774 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                })", span="968-972"];
m0_776 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="978-978"];
m0_781 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="975-975"];
m0_793 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="990-996"];
m0_795 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="995-995"];
m0_797 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="993-993"];
m0_799 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="993-993"];
m0_800 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="993-993"];
m0_808 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1007-1024"];
m0_809 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                })", span="1010-1014"];
m0_811 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1020-1020"];
m0_816 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1017-1017"];
m0_828 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1032-1038"];
m0_830 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1037-1037"];
m0_832 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1035-1035"];
m0_834 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1035-1035"];
m0_835 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1035-1035"];
m0_843 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1050-1066"];
m0_844 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1053-1057"];
m0_846 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1063-1063"];
m0_851 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1060-1060"];
m0_863 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1074-1080"];
m0_865 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1079-1079"];
m0_867 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1077-1077"];
m0_869 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1077-1077"];
m0_870 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1077-1077"];
m0_878 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1092-1108"];
m0_879 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1095-1099"];
m0_881 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1105-1105"];
m0_885 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1102-1102"];
m0_897 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1116-1122"];
m0_899 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''key'', exception.ParamName)", span="1121-1121"];
m0_901 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1119-1119"];
m0_903 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1119-1119"];
m0_904 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1119-1119"];
m0_912 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1134-1150"];
m0_913 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                })", span="1137-1141"];
m0_915 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt)", span="1147-1147"];
m0_919 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1144-1144"];
m0_943 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1167-1167"];
m0_90 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="117-117"];
m0_127 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="151-151"];
m0_158 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="184-184"];
m0_192 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var jobState = sql.Query(''select * from HangFire.State'').Single()", span="218-218"];
m0_91 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="118-118"];
m0_159 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="185-185"];
m0_193 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((string)jobId, jobState.JobId.ToString())", span="219-219"];
m0_262 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime) record.ExpireAt", span="286-286"];
m0_265 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="276-290"];
m0_306 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="var expireAt = (DateTime)record.ExpireAt", span="344-344"];
m0_309 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="334-348"];
m0_742 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-2''])", span="938-938"];
m0_779 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-2''])", span="981-981"];
m0_814 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-2''])", span="1023-1023"];
m0_10 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="21-21"];
m0_66 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="71-83"];
m0_69 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistJob(jobId)", span="76-76"];
m0_70 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="76-76"];
m0_96 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="96-123"];
m0_110 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetJobState(jobId, state.Object)", span="107-107"];
m0_80 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="102-102"];
m0_81 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="103-103"];
m0_105 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="104-104"];
m0_111 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="107-107"];
m0_131 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="136-155"];
m0_142 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetJobState(jobId, state.Object)", span="145-145"];
m0_120 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="141-141"];
m0_121 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns((string)null)", span="142-142"];
m0_138 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="143-143"];
m0_143 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="145-145"];
m0_164 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="168-190"];
m0_175 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddJobState(jobId, state.Object)", span="178-178"];
m0_151 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="173-173"];
m0_152 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns(''Reason'')", span="174-174"];
m0_171 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="175-175"];
m0_176 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="178-178"];
m0_198 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="203-224"];
m0_209 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddJobState(jobId, state.Object)", span="212-212"];
m0_185 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Name).Returns(''State'')", span="208-208"];
m0_186 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="state.Setup(x => x.Reason).Returns((string)null)", span="209-209"];
m0_205 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="210-210"];
m0_210 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="212-212"];
m0_220 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="234-234"];
m0_226 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="239-244"];
m0_232 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="243-243"];
m0_230 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="241-241"];
m0_229 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToQueue(''default'', ''1'')", span="241-241"];
m0_248 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="259-268"];
m0_245 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="265-265"];
m0_246 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="266-266"];
m0_247 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="267-267"];
m0_251 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="261-261"];
m0_250 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="261-261"];
m0_259 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="282-282"];
m0_260 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, record.Value)", span="283-283"];
m0_261 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="284-284"];
m0_268 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="278-278"];
m0_267 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'', TimeSpan.FromDays(1))", span="278-278"];
m0_278 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="298-309"];
m0_277 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="308-308"];
m0_282 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="300-304"];
m0_280 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="302-302"];
m0_281 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.IncrementCounter(''my-key'')", span="303-303"];
m0_292 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="317-326"];
m0_289 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="323-323"];
m0_290 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="324-324"];
m0_291 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="325-325"];
m0_295 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="319-319"];
m0_294 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="319-319"];
m0_303 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="340-340"];
m0_304 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(-1, record.Value)", span="341-341"];
m0_305 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(record.ExpireAt)", span="342-342"];
m0_312 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="336-336"];
m0_311 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="336-336"];
m0_321 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="356-367"];
m0_320 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="366-366"];
m0_325 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="358-362"];
m0_323 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="360-360"];
m0_324 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.DecrementCounter(''my-key'')", span="361-361"];
m0_335 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="375-384"];
m0_332 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="381-381"];
m0_333 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="382-382"];
m0_334 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0.0, record.Score, 2)", span="383-383"];
m0_338 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="377-377"];
m0_337 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="377-377"];
m0_347 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="392-403"];
m0_346 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="402-402"];
m0_351 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="394-398"];
m0_349 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="396-396"];
m0_350 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''another-value'')", span="397-397"];
m0_359 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="411-422"];
m0_358 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="421-421"];
m0_363 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="413-417"];
m0_361 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="415-415"];
m0_362 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="416-416"];
m0_373 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="430-439"];
m0_370 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="436-436"];
m0_371 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="437-437"];
m0_372 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="438-438"];
m0_376 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="432-432"];
m0_375 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="432-432"];
m0_385 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="447-458"];
m0_384 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(3.2, record.Score, 3)", span="457-457"];
m0_389 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="449-453"];
m0_387 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="451-451"];
m0_388 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'', 3.2)", span="452-452"];
m0_397 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="466-477"];
m0_396 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="476-476"];
m0_401 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="468-472"];
m0_399 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="470-470"];
m0_400 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''my-value'')", span="471-471"];
m0_410 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="485-496"];
m0_409 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="495-495"];
m0_414 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="487-491"];
m0_412 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="489-489"];
m0_413 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''my-key'', ''different-value'')", span="490-490"];
m0_422 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="504-515"];
m0_421 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="514-514"];
m0_426 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="506-510"];
m0_424 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddToSet(''my-key'', ''my-value'')", span="508-508"];
m0_425 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromSet(''different-key'', ''my-value'')", span="509-509"];
m0_435 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="523-531"];
m0_433 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-key'', record.Key)", span="529-529"];
m0_434 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''my-value'', record.Value)", span="530-530"];
m0_438 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="525-525"];
m0_437 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="525-525"];
m0_447 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="539-550"];
m0_446 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="549-549"];
m0_451 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="541-545"];
m0_449 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="543-543"];
m0_450 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="544-544"];
m0_459 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="558-570"];
m0_458 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="569-569"];
m0_464 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="560-565"];
m0_461 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="562-562"];
m0_462 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="563-563"];
m0_463 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''my-value'')", span="564-564"];
m0_473 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="578-589"];
m0_472 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="588-588"];
m0_477 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="580-584"];
m0_475 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="582-582"];
m0_476 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''my-key'', ''different-value'')", span="583-583"];
m0_485 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="597-608"];
m0_484 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="607-607"];
m0_489 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="599-603"];
m0_487 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''my-value'')", span="601-601"];
m0_488 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveFromList(''different-key'', ''my-value'')", span="602-602"];
m0_499 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="616-632"];
m0_496 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, records.Length)", span="629-629"];
m0_497 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''1'', records[0].Value)", span="630-630"];
m0_498 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''2'', records[1].Value)", span="631-631"];
m0_507 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="618-625"];
m0_502 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="620-620"];
m0_503 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="621-621"];
m0_504 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="622-622"];
m0_505 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''3'')", span="623-623"];
m0_506 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 2)", span="624-624"];
m0_516 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="640-653"];
m0_515 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(2, recordCount)", span="652-652"];
m0_522 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="642-648"];
m0_518 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="644-644"];
m0_519 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''1'')", span="645-645"];
m0_520 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''2'')", span="646-646"];
m0_521 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="647-647"];
m0_530 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="661-672"];
m0_529 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="671-671"];
m0_534 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="663-667"];
m0_532 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="665-665"];
m0_533 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 100)", span="666-666"];
m0_542 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="680-691"];
m0_541 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, recordCount)", span="690-690"];
m0_546 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="682-686"];
m0_544 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="684-684"];
m0_545 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''my-key'', 1, 0)", span="685-685"];
m0_554 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="699-710"];
m0_553 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(1, recordCount)", span="709-709"];
m0_558 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="701-705"];
m0_556 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.InsertToList(''my-key'', ''0'')", span="703-703"];
m0_557 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.TrimList(''another-key'', 1, 0)", span="704-704"];
m0_565 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="718-724"];
m0_233 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Enqueue(It.IsNotNull<IDbConnection>(), ''default'', ''1'')", span="243-243"];
m0_571 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="721-721"];
m0_570 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(null, new Dictionary<string, string>())", span="721-721"];
m0_579 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="732-738"];
m0_585 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="735-735"];
m0_584 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', null)", span="735-735"];
m0_594 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="746-761"];
m0_592 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value1'', result[''Key1''])", span="759-759"];
m0_599 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="757-757"];
m0_602 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="757-757"];
m0_593 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Value2'', result[''Key2''])", span="760-760"];
m0_598 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="748-752"];
m0_597 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="748-752"];
m0_612 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="769-782"];
m0_611 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, result[''Key1''])", span="781-781"];
m0_616 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="779-779"];
m0_619 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="779-779"];
m0_615 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="771-774"];
m0_614 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', null }\r\n                })", span="771-774"];
m0_633 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="793-793"];
m0_632 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveHash(null)", span="793-793"];
m0_643 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="802-817"];
m0_646 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="805-809"];
m0_645 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="805-809"];
m0_642 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(0, count)", span="816-816"];
m0_649 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="812-812"];
m0_648 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveHash(''some-hash'')", span="812-812"];
m0_656 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="825-831"];
m0_662 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="828-828"];
m0_661 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(null, new List<string>())", span="828-828"];
m0_671 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="839-845"];
m0_677 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="842-842"];
m0_676 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(''my-set'', null)", span="842-842"];
m0_686 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="853-861"];
m0_688 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.AddRangeToSet(''my-set'', items)", span="857-857"];
m0_685 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(items, records)", span="860-860"];
m0_689 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="857-857"];
m0_701 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="872-872"];
m0_700 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveSet(null)", span="872-872"];
m0_712 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="884-896"];
m0_711 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''set-2'', record.Key)", span="895-895"];
m0_716 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="892-892"];
m0_715 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.RemoveSet(''set-1'')", span="892-892"];
m0_723 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="904-910"];
m0_729 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="907-907"];
m0_728 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireHash(null, TimeSpan.FromMinutes(5))", span="907-907"];
m0_743 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="922-939"];
m0_748 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="935-935"];
m0_751 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="935-935"];
m0_747 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="932-932"];
m0_746 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60))", span="932-932"];
m0_760 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="947-953"];
m0_766 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="950-950"];
m0_765 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireSet(null, TimeSpan.FromSeconds(45))", span="950-950"];
m0_780 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="965-982"];
m0_784 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="978-978"];
m0_787 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="978-978"];
m0_783 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="975-975"];
m0_782 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60))", span="975-975"];
m0_796 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="990-996"];
m0_802 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="993-993"];
m0_801 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireList(null, TimeSpan.FromSeconds(45))", span="993-993"];
m0_815 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1007-1024"];
m0_819 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1020-1020"];
m0_822 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1020-1020"];
m0_818 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1017-1017"];
m0_817 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.ExpireList(''list-1'', TimeSpan.FromMinutes(60))", span="1017-1017"];
m0_831 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1032-1038"];
m0_837 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1035-1035"];
m0_836 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistHash(null)", span="1035-1035"];
m0_849 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1050-1066"];
m0_847 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''hash-1''])", span="1064-1064"];
m0_854 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1063-1063"];
m0_857 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1063-1063"];
m0_848 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''hash-2''])", span="1065-1065"];
m0_853 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1060-1060"];
m0_852 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistHash(''hash-1'')", span="1060-1060"];
m0_866 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1074-1080"];
m0_872 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1077-1077"];
m0_871 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistSet(null)", span="1077-1077"];
m0_884 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1092-1108"];
m0_882 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''set-1''])", span="1106-1106"];
m0_888 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1105-1105"];
m0_891 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1105-1105"];
m0_883 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''set-2''])", span="1107-1107"];
m0_887 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1102-1102"];
m0_886 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistSet(''set-1'')", span="1102-1102"];
m0_900 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1116-1122"];
m0_906 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1119-1119"];
m0_905 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistList(null)", span="1119-1119"];
m0_918 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1134-1150"];
m0_916 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Null(records[''list-1''])", span="1148-1148"];
m0_922 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1147-1147"];
m0_925 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="1147-1147"];
m0_917 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(records[''list-2''])", span="1149-1149"];
m0_921 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1144-1144"];
m0_920 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.PersistList(''list-1'')", span="1144-1144"];
m0_945 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1167-1167"];
m0_944 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.QueueProviders", span="1167-1167"];
m0_92 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="119-119"];
m0_93 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="120-120"];
m0_94 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="121-121"];
m0_95 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="122-122"];
m0_128 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="152-152"];
m0_129 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Reason)", span="153-153"];
m0_130 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Data)", span="154-154"];
m0_160 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="186-186"];
m0_161 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''Reason'', jobState.Reason)", span="187-187"];
m0_162 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="188-188"];
m0_163 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="189-189"];
m0_194 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''State'', jobState.Name)", span="220-220"];
m0_195 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Reason)", span="221-221"];
m0_196 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.NotNull(jobState.CreatedAt)", span="222-222"];
m0_197 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(null, jobState.Data)", span="223-223"];
m0_12 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="21-21"];
m0_11 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.GetJobQueue()", span="21-21"];
m0_99 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="102-102"];
m0_102 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="103-103"];
m0_107 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="104-104"];
m0_106 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="104-104"];
m0_132 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="141-141"];
m0_135 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="142-142"];
m0_140 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="143-143"];
m0_139 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="143-143"];
m0_165 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="173-173"];
m0_168 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="174-174"];
m0_173 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="175-175"];
m0_172 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="175-175"];
m0_199 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="208-208"];
m0_202 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry lambda expression", span="209-209"];
m0_207 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="210-210"];
m0_206 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.SerializeData()", span="210-210"];
m0_222 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="234-234"];
m0_221 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.GetJobQueue()", span="234-234"];
m0_234 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="243-243"];
m0_601 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="757-757"];
m0_600 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Field", span="757-757"];
m0_604 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="757-757"];
m0_603 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Value", span="757-757"];
m0_618 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="779-779"];
m0_617 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Field", span="779-779"];
m0_621 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="779-779"];
m0_620 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Value", span="779-779"];
m0_750 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="935-935"];
m0_749 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="935-935"];
m0_753 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="935-935"];
m0_752 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="935-935"];
m0_786 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="978-978"];
m0_785 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="978-978"];
m0_789 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="978-978"];
m0_788 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="978-978"];
m0_821 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1020-1020"];
m0_820 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1020-1020"];
m0_824 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1020-1020"];
m0_823 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1020-1020"];
m0_856 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1063-1063"];
m0_855 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1063-1063"];
m0_859 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1063-1063"];
m0_858 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1063-1063"];
m0_890 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1105-1105"];
m0_889 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1105-1105"];
m0_893 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1105-1105"];
m0_892 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1105-1105"];
m0_924 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1147-1147"];
m0_923 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(string)x.Key", span="1147-1147"];
m0_927 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="1147-1147"];
m0_926 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="(DateTime?)x.ExpireAt", span="1147-1147"];
m0_101 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="102-102"];
m0_100 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="102-102"];
m0_104 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="103-103"];
m0_103 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="103-103"];
m0_134 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="141-141"];
m0_133 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="141-141"];
m0_137 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="142-142"];
m0_136 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="142-142"];
m0_167 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="173-173"];
m0_166 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="173-173"];
m0_170 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="174-174"];
m0_169 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="174-174"];
m0_201 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="208-208"];
m0_200 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Name", span="208-208"];
m0_204 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="209-209"];
m0_203 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="x.Reason", span="209-209"];
m0_21 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="new SqlServerWriteOnlyTransaction(null, () => null)", span="31-31"];
m0_22 [cluster="lambda expression", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit lambda expression", span="31-31"];
m0_894 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", span="1114-1114"];
m0_895 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1116-1122"];
m0_896 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull(bool)", span="1114-1114"];
m0_664 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="291-291"];
m0_390 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", span="464-464"];
m0_391 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="466-477"];
m0_392 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_RemovesARecord_WithGivenKeyAndValue(bool)", span="464-464"];
m0_754 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", span="945-945"];
m0_755 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="947-953"];
m0_756 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull(bool)", span="945-945"];
m0_415 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", span="502-502"];
m0_416 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="504-515"];
m0_417 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameValue_AndDifferentKey(bool)", span="502-502"];
m0_860 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", span="1072-1072"];
m0_861 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1074-1080"];
m0_862 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull(bool)", span="1072-1072"];
m0_465 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="233-233"];
m0_8 [cluster="Unk.Returns", file="SqlServerWriteOnlyTransactionFacts.cs", label="HangFire.SqlServer.SqlStoredSets", span=""];
m0_717 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", span="902-902"];
m0_718 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireHash(null, TimeSpan.FromMinutes(5)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="904-910"];
m0_719 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_ThrowsAnException_WhenKeyIsNull(bool)", span="902-902"];
m0_271 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="296-296"];
m0_272 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.IncrementCounter(''my-key'');\r\n                    x.IncrementCounter(''my-key'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(2, recordCount);\r\n            })", span="298-309"];
m0_273 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="296-296"];
m0_97 [cluster="Mock<IState>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<IState>.cstr", span=""];
m0_744 [cluster="System.DateTime.AddMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddMinutes(double)", span="0-0"];
m0_942 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="53-53"];
m0_31 [cluster="Unk.UseConnection", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.UseConnection", span=""];
m0_586 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", span="744-744"];
m0_587 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }), useBatching);\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="746-761"];
m0_588 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_MergesAllRecords(bool)", span="744-744"];
m0_19 [cluster="Unk.Equal", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Equal", span=""];
m0_296 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="176-176"];
m0_253 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="274-274"];
m0_254 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime) record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="276-290"];
m0_255 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="274-274"];
m0_940 [cluster="Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="31-31"];
m0_112 [cluster="Unk.SetJobState", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SetJobState", span=""];
m0_931 [cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37"];
m0_559 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", span="716-716"];
m0_560 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="718-724"];
m0_561 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull(bool)", span="716-716"];
m0_53 [cluster="Unk.ExpireJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ExpireJob", span=""];
m0_939 [cluster="Mock<SqlServerStorage>.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Mock<SqlServerStorage>.cstr", span=""];
m0_403 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", span="483-483"];
m0_404 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="485-496"];
m0_405 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromSet_DoesNotRemoveRecord_WithSameKey_AndDifferentValue(bool)", span="483-483"];
m0_573 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", span="730-730"];
m0_574 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null), useBatching));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="732-738"];
m0_575 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull(bool)", span="730-730"];
m0_41 [cluster="Unk.Query", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Query", span=""];
m0_932 [cluster="System.Action<T>.Invoke(T)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m0_352 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", span="409-409"];
m0_353 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n                \r\n                Assert.Equal(1, recordCount);\r\n            })", span="411-422"];
m0_354 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_DoesNotAddARecord_WhenBothKeyAndValueAreExist(bool)", span="409-409"];
m0_634 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="281-281"];
m0_218 [cluster="Unk.Add", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Add", span=""];
m0_67 [cluster="Unk.NotNull", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.NotNull", span=""];
m0_6 [cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.>", span=""];
m0_48 [cluster="Unk.Null", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Null", span=""];
m0_340 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", span="390-390"];
m0_341 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="392-403"];
m0_342 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent(bool)", span="390-390"];
m0_9 [cluster="PersistentJobQueueProviderCollection.cstr", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry PersistentJobQueueProviderCollection.cstr", span=""];
m0_219 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="1153-1153"];
m0_928 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="var connection = ConnectionUtils.CreateConnection()", span="1155-1155"];
m0_929 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="action(connection)", span="1157-1157"];
m0_930 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.UseConnection(System.Action<SqlConnection>)", span="1153-1153"];
m0_46 [cluster="System.DateTime.AddHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.DateTime.AddHours(double)", span="0-0"];
m0_314 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="354-354"];
m0_315 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="356-367"];
m0_316 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord(bool)", span="354-354"];
m0_804 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", span="1002-1002"];
m0_806 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireList(''list-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''list-1'']);\r\n                Assert.True(records[''list-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''list-2'']);\r\n            })", span="1007-1024"];
m0_805 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key]) values (@key)''", span="1004-1005"];
m0_807 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_SetsExpirationTime_OnAList_WithGivenKey(bool)", span="1002-1002"];
m0_23 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage, System.Func<DbConnection>)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(Hangfire.SqlServer.SqlServerStorage, System.Func<DbConnection>)", span="45-45"];
m0_54 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", span="64-64"];
m0_56 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.PersistJob(jobId), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.ExpireAt);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.NotNull(anotherJob.ExpireAt);\r\n            })", span="71-83"];
m0_55 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues ('', '', getutcdate(), getutcdate())\r\nselect scope_identity() as Id''", span="66-69"];
m0_57 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistJob_ClearsTheJobExpirationData(bool)", span="64-64"];
m0_13 [cluster="Unk.GetJobQueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.GetJobQueue", span=""];
m0_490 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", span="614-614"];
m0_491 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                }, useBatching);\r\n\r\n                var records = sql.Query(''select * from HangFire.List'').ToArray();\r\n\r\n                Assert.Equal(2, records.Length);\r\n                Assert.Equal(''1'', records[0].Value);\r\n                Assert.Equal(''2'', records[1].Value);\r\n            })", span="616-632"];
m0_492 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_TrimsAList_ToASpecifiedRange(bool)", span="614-614"];
m0_227 [cluster="Unk.Verify", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Verify", span=""];
m0_874 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", span="1086-1086"];
m0_876 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''set-2'', value = ''1'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistSet(''set-1''), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''set-1'']);\r\n                Assert.NotNull(records[''set-2'']);\r\n            })", span="1092-1108"];
m0_875 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="1088-1090"];
m0_877 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ClearsExpirationTime_OnAGivenHash(bool)", span="1086-1086"];
m0_508 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="242-242"];
m0_144 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", span="161-161"];
m0_146 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.AddJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Null(job.StateName);\r\n                Assert.Null(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="168-190"];
m0_145 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="163-166"];
m0_147 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable(bool)", span="161-161"];
m0_466 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", span="576-576"];
m0_467 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                }, useBatching);\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="578-589"];
m0_468 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue(bool)", span="576-576"];
m0_730 [cluster="System.TimeSpan.FromMinutes(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m0_595 [cluster="Unk.ToDictionary", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.ToDictionary", span=""];
m0_52 [cluster="System.TimeSpan.FromHours(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m0_313 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="184-184"];
m0_702 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="309-309"];
m0_18 [cluster="Unk.>", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.>", span=""];
m0_665 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", span="837-837"];
m0_666 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null), useBatching));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", span="839-845"];
m0_667 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull(bool)", span="837-837"];
m0_297 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="332-332"];
m0_298 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="334-348"];
m0_299 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet(bool)", span="332-332"];
m0_650 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", span="823-823"];
m0_651 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>()), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="825-831"];
m0_652 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenKeyIsNull(bool)", span="823-823"];
m0_14 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28"];
m0_15 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerWriteOnlyTransaction(null, () => null))", span="30-31"];
m0_16 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="33-33"];
m0_17 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfStorageIsNull()", span="28-28"];
m0_283 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", span="315-315"];
m0_284 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="317-326"];
m0_285 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue(bool)", span="315-315"];
m0_767 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m0_231 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="140-140"];
m0_427 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", span="521-521"];
m0_428 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.InsertToList(''my-key'', ''my-value''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.List'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n            })", span="523-531"];
m0_429 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.InsertToList_AddsARecord_WithGivenValues(bool)", span="521-521"];
m0_622 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", span="788-788"];
m0_623 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null), useBatching));\r\n            })", span="790-794"];
m0_624 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_ThrowsAnException_WhenKeyIsNull(bool)", span="788-788"];
m0_269 [cluster="System.TimeSpan.FromDays(double)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m0_790 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", span="988-988"];
m0_791 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireList(null, TimeSpan.FromSeconds(45)), useBatching));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="990-996"];
m0_792 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireList_ThrowsAnException_WhenKeyIsNull(bool)", span="988-988"];
m0_235 [cluster="Unk.Enqueue", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Enqueue", span=""];
m0_72 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", span="89-89"];
m0_74 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="96-123"];
m0_73 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="91-94"];
m0_75 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob(bool)", span="89-89"];
m0_98 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_108 [cluster="Unk.SerializeData", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.SerializeData", span=""];
m0_239 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", span="257-257"];
m0_240 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.IncrementCounter(''my-key''), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n                \r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="259-268"];
m0_241 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.IncrementCounter_AddsRecordToCounterTable_WithPositiveValue(bool)", span="257-257"];
m0_364 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", span="428-428"];
m0_365 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2), useBatching);\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(''my-value'', record.Value);\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="430-439"];
m0_366 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_AddsARecordWithScore_WhenBothKeyAndValueAreNotExist(bool)", span="428-428"];
m0_42 [cluster="Unk.Single", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.Single", span=""];
m0_47 [cluster="Unk.True", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.True", span=""];
m0_113 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", span="129-129"];
m0_115 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns((string)null);\r\n                state.Setup(x => x.SerializeData()).Returns((Dictionary<string, string>)null);\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object), useBatching);\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(null, jobState.Reason);\r\n                Assert.Equal(null, jobState.Data);\r\n            })", span="136-155"];
m0_114 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="131-134"];
m0_116 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_CanBeCalledWithNullReasonAndData(bool)", span="129-129"];
m0_71 [cluster="Unk.PersistJob", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Unk.PersistJob", span=""];
m0_439 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="224-224"];
m0_732 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", span="916-916"];
m0_734 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'' },\r\n                    new { key = ''hash-2'', field = ''field'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireHash(''hash-1'', TimeSpan.FromMinutes(60)), useBatching);\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.Hash'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''hash-1'']);\r\n                Assert.True(records[''hash-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''hash-2'']);\r\n            })", span="922-939"];
m0_733 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="918-920"];
m0_735 [cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", file="SqlServerWriteOnlyTransactionFacts.cs", label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireHash_SetsExpirationTimeOnAHash_WithGivenKey(bool)", span="916-916"];
m0_949 [file="SqlServerWriteOnlyTransactionFacts.cs", label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", span=""];
m0_951 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_952 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_950 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_954 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_957 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_961 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_965 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_969 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_972 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_974 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_975 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_976 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_977 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_978 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_979 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_980 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_981 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_982 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_983 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_984 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_985 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_986 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_987 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_988 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_989 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_990 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_991 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_992 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_993 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_994 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_995 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_996 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_997 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_998 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_999 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1000 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1001 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1002 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1003 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1004 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1005 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1006 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1007 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1008 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1009 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1010 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1011 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1013 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1014 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1016 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1017 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1018 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1020 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1021 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1022 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1024 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1025 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1026 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1028 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1029 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1030 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1032 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1033 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1034 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1036 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1037 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_1038 [file="SqlServerWriteOnlyTransactionFacts.cs", label=SqlConnection, span=""];
m0_1040 [file="SqlServerWriteOnlyTransactionFacts.cs", label=bool, span=""];
m0_953 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_956 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_960 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_964 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_968 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_973 [file="SqlServerWriteOnlyTransactionFacts.cs", label=correctJobQueue, span=""];
m0_1015 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1019 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1023 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1027 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1031 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1035 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_1039 [file="SqlServerWriteOnlyTransactionFacts.cs", label=arrangeSql, span=""];
m0_955 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_958 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_959 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m0_962 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_963 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m0_966 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_967 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m0_970 [file="SqlServerWriteOnlyTransactionFacts.cs", label=jobId, span=""];
m0_971 [file="SqlServerWriteOnlyTransactionFacts.cs", label=state, span=""];
m0_1012 [file="SqlServerWriteOnlyTransactionFacts.cs", label=items, span=""];
d24 -> d30  [color=darkseagreen4, key=1, label=continuations, style=dashed];
d46 -> d48  [color=darkseagreen4, key=1, label=continuations, style=dashed];
d21 -> d23  [color=darkseagreen4, key=1, label=connection, style=dashed];
d21 -> d30  [color=darkseagreen4, key=1, label=connection, style=dashed];
d22 -> d28  [color=darkseagreen4, key=1, label=parentId, style=dashed];
d22 -> d30  [color=darkseagreen4, key=1, label=parentId, style=dashed];
d15 -> d53  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
d15 -> d61  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
d47 -> d59  [color=darkseagreen4, key=1, label=nextStates, style=dashed];
d47 -> d60  [color=darkseagreen4, key=1, label=nextStates, style=dashed];
d29 -> d31  [color=darkseagreen4, key=1, label=currentState, style=dashed];
d50 -> d52  [color=darkseagreen4, key=1, label=currentState, style=dashed];
d50 -> d53  [color=darkseagreen4, key=1, label=continuation, style=dashed];
d53 -> d53  [color=darkseagreen4, key=1, label=continuation, style=dashed];
d53 -> d59  [color=darkseagreen4, key=1, label=continuation, style=dashed];
d61 -> d61  [color=darkseagreen4, key=1, label=tuple, style=dashed];
d54 -> d59  [color=darkseagreen4, key=1, label=continuation, style=dashed];
d59 -> d59  [color=darkseagreen4, key=1, label=continuation, style=dashed];
d49 -> d49  [color=darkseagreen4, key=1, label=continuation, style=dashed];
d102 -> d31  [color=darkseagreen4, key=1, label="Hangfire.Continuations.ContinuationsSupportAttribute", style=dashed];
d102 -> d9  [color=darkseagreen4, key=1, label="Hangfire.Continuations.ContinuationsSupportAttribute", style=dashed];
d102 -> d10  [color=darkseagreen4, key=1, label="Hangfire.Continuations.ContinuationsSupportAttribute", style=dashed];
d6 -> d11  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
d6 -> d9  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
d6 -> d10  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
d65 -> d77  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
d65 -> d80  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
d65 -> d81  [color=darkseagreen4, key=1, label="Hangfire.States.ElectStateContext", style=dashed];
d7 -> d9  [color=darkseagreen4, key=1, label=awaitingState, style=dashed];
d78 -> d84  [color=darkseagreen4, key=1, label=currentState, style=dashed];
d71 -> d84  [color=darkseagreen4, key=1, label=currentState, style=dashed];
d72 -> d80  [color=darkseagreen4, key=1, label=started, style=dashed];
d73 -> d82  [color=darkseagreen4, key=1, label=firstAttempt, style=dashed];
m0_452 -> m0_456  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_453 -> m0_455  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_769 -> m0_775  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_771 -> m0_773  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_535 -> m0_539  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_536 -> m0_538  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_440 -> m0_444  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_441 -> m0_443  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_635 -> m0_639  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_635 -> m0_640  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_636 -> m0_638  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_839 -> m0_845  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_841 -> m0_843  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_908 -> m0_914  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_910 -> m0_912  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_478 -> m0_482  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_479 -> m0_481  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_547 -> m0_551  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_548 -> m0_550  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_678 -> m0_683  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_679 -> m0_681  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_27 -> m0_35  [color=green, key=1, label=bool, style=dashed];
m0_29 -> m0_32  [color=green, key=1, label="lambda expression", style=dashed];
m0_825 -> m0_833  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_826 -> m0_828  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_509 -> m0_513  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_510 -> m0_512  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_326 -> m0_330  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_327 -> m0_329  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_378 -> m0_382  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_379 -> m0_381  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_690 -> m0_694  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_690 -> m0_697  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_691 -> m0_693  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_211 -> m0_216  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_211 -> m0_224  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_216 -> m0_223  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_213 -> m0_215  [color=darkseagreen4, key=1, label=correctProvider, style=dashed];
m0_214 -> m0_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_212 -> m0_216  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m0_212 -> m0_214  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m0_212 -> m0_225  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m0_44 -> m0_936  [color=darkseagreen4, key=1, label="System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>", style=dashed];
m0_934 -> m0_943  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_935 -> m0_937  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m0_1 -> m0_3  [color=darkseagreen4, key=1, label=defaultProvider, style=dashed];
m0_2 -> m0_10  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_605 -> m0_609  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_606 -> m0_608  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_178 -> m0_188  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_180 -> m0_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_523 -> m0_527  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_524 -> m0_526  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_703 -> m0_709  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_705 -> m0_707  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_32 -> m0_35  [color=green, key=1, label=SqlConnection, style=dashed];
m0_35 -> m0_49  [color=green, key=1, label="lambda expression", style=dashed];
m0_33 -> m0_35  [color=green, key=1, label=jobId, style=dashed];
m0_33 -> m0_50  [color=green, key=1, label=jobId, style=dashed];
m0_61 -> m0_68  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_83 -> m0_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_84 -> m0_86  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_87 -> m0_89  [color=darkseagreen4, key=1, label=anotherJob, style=dashed];
m0_123 -> m0_141  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_124 -> m0_126  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_154 -> m0_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_155 -> m0_157  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_188 -> m0_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_189 -> m0_191  [color=darkseagreen4, key=1, label=job, style=dashed];
m0_224 -> m0_228  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_243 -> m0_249  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_257 -> m0_266  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_275 -> m0_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_287 -> m0_293  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_301 -> m0_310  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_318 -> m0_322  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_330 -> m0_336  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_344 -> m0_348  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_356 -> m0_360  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_368 -> m0_374  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_382 -> m0_386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_394 -> m0_398  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_407 -> m0_411  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_419 -> m0_423  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_431 -> m0_436  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_444 -> m0_448  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_456 -> m0_460  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_470 -> m0_474  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_482 -> m0_486  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_494 -> m0_501  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_513 -> m0_517  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_527 -> m0_531  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_539 -> m0_543  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_551 -> m0_555  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_563 -> m0_566  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_567 -> m0_569  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_577 -> m0_580  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_581 -> m0_583  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_590 -> m0_596  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_609 -> m0_613  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_626 -> m0_628  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_629 -> m0_631  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_639 -> m0_644  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_640 -> m0_647  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_654 -> m0_657  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_658 -> m0_660  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_669 -> m0_672  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_673 -> m0_675  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_683 -> m0_687  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_694 -> m0_696  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_697 -> m0_699  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_709 -> m0_714  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_721 -> m0_724  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_725 -> m0_727  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_738 -> m0_745  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_758 -> m0_761  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_762 -> m0_764  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_775 -> m0_781  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_794 -> m0_797  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_798 -> m0_800  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_810 -> m0_816  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_829 -> m0_832  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_833 -> m0_835  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_845 -> m0_851  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_864 -> m0_867  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_868 -> m0_870  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_880 -> m0_885  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_898 -> m0_901  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_902 -> m0_904  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_914 -> m0_919  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_58 -> m0_61  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_59 -> m0_61  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_59 -> m0_69  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_76 -> m0_83  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_77 -> m0_83  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_77 -> m0_110  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_77 -> m0_91  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_79 -> m0_83  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_79 -> m0_81  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_79 -> m0_82  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_79 -> m0_110  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_82 -> m0_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_117 -> m0_123  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_118 -> m0_123  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_118 -> m0_142  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_119 -> m0_123  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_119 -> m0_121  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_119 -> m0_122  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_119 -> m0_142  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_122 -> m0_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_148 -> m0_154  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_149 -> m0_154  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_149 -> m0_175  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_149 -> m0_159  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_150 -> m0_154  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_150 -> m0_152  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_150 -> m0_153  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_150 -> m0_175  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_153 -> m0_171  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_182 -> m0_188  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_183 -> m0_188  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_183 -> m0_209  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_183 -> m0_193  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_184 -> m0_188  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_184 -> m0_186  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_184 -> m0_187  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_184 -> m0_209  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_187 -> m0_205  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_225 -> m0_232  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_244 -> m0_246  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_244 -> m0_247  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_258 -> m0_260  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_258 -> m0_261  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_279 -> m0_281  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_288 -> m0_290  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_288 -> m0_291  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_302 -> m0_304  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_302 -> m0_305  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_322 -> m0_324  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_331 -> m0_333  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_331 -> m0_334  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_348 -> m0_350  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_360 -> m0_362  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_369 -> m0_371  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_369 -> m0_372  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_386 -> m0_388  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_398 -> m0_400  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_411 -> m0_413  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_423 -> m0_425  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_432 -> m0_434  [color=darkseagreen4, key=1, label=record, style=dashed];
m0_448 -> m0_450  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_460 -> m0_462  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_460 -> m0_463  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_474 -> m0_476  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_486 -> m0_488  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_495 -> m0_497  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_495 -> m0_498  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_501 -> m0_503  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_501 -> m0_504  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_501 -> m0_505  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_501 -> m0_506  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_517 -> m0_519  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_517 -> m0_520  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_517 -> m0_521  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_531 -> m0_533  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_543 -> m0_545  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_555 -> m0_557  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m0_562 -> m0_567  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_576 -> m0_581  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_591 -> m0_599  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_591 -> m0_602  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_591 -> m0_593  [color=darkseagreen4, key=1, label=result, style=dashed];
m0_610 -> m0_616  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_610 -> m0_619  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_625 -> m0_629  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_638 -> m0_640  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_653 -> m0_658  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_668 -> m0_673  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_681 -> m0_683  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_682 -> m0_688  [color=darkseagreen4, key=1, label=items, style=dashed];
m0_682 -> m0_685  [color=darkseagreen4, key=1, label=items, style=dashed];
m0_693 -> m0_697  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_707 -> m0_709  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_720 -> m0_725  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_736 -> m0_738  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_739 -> m0_741  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_739 -> m0_748  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_739 -> m0_751  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_739 -> m0_742  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_757 -> m0_762  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_773 -> m0_775  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_776 -> m0_778  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_776 -> m0_784  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_776 -> m0_787  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_776 -> m0_779  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_793 -> m0_798  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_808 -> m0_810  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_811 -> m0_813  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_811 -> m0_819  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_811 -> m0_822  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_811 -> m0_814  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_828 -> m0_833  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_843 -> m0_845  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_846 -> m0_854  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_846 -> m0_857  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_846 -> m0_848  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_863 -> m0_868  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_878 -> m0_880  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_881 -> m0_888  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_881 -> m0_891  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_881 -> m0_883  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_897 -> m0_902  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_912 -> m0_914  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_915 -> m0_922  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_915 -> m0_925  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_915 -> m0_917  [color=darkseagreen4, key=1, label=records, style=dashed];
m0_90 -> m0_92  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_90 -> m0_93  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_90 -> m0_94  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_90 -> m0_95  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_127 -> m0_129  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_127 -> m0_130  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_158 -> m0_160  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_158 -> m0_161  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_158 -> m0_162  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_158 -> m0_163  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_192 -> m0_194  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_192 -> m0_195  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_192 -> m0_196  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_192 -> m0_197  [color=darkseagreen4, key=1, label=jobState, style=dashed];
m0_262 -> m0_264  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m0_306 -> m0_308  [color=darkseagreen4, key=1, label=expireAt, style=dashed];
m0_80 -> m0_99  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_81 -> m0_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_120 -> m0_132  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_121 -> m0_135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_151 -> m0_165  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_152 -> m0_168  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_185 -> m0_199  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_186 -> m0_202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_894 -> m0_902  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_895 -> m0_897  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_390 -> m0_394  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_391 -> m0_393  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_754 -> m0_762  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_755 -> m0_757  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_415 -> m0_419  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_416 -> m0_418  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_860 -> m0_868  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_861 -> m0_863  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_717 -> m0_725  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_718 -> m0_720  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_271 -> m0_275  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_272 -> m0_274  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_586 -> m0_590  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_587 -> m0_589  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_253 -> m0_257  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_254 -> m0_256  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_559 -> m0_567  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_560 -> m0_562  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_403 -> m0_407  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_404 -> m0_406  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_573 -> m0_581  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_574 -> m0_576  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_352 -> m0_356  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_353 -> m0_355  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_340 -> m0_344  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_341 -> m0_343  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_219 -> m0_929  [color=darkseagreen4, key=1, label="System.Action<SqlConnection>", style=dashed];
m0_314 -> m0_318  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_315 -> m0_317  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_804 -> m0_810  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_806 -> m0_808  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_54 -> m0_61  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_56 -> m0_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_490 -> m0_494  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_491 -> m0_493  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_874 -> m0_880  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_876 -> m0_878  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_144 -> m0_154  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_146 -> m0_148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_466 -> m0_470  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_467 -> m0_469  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_665 -> m0_673  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_666 -> m0_668  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_297 -> m0_301  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_298 -> m0_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_650 -> m0_658  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_651 -> m0_653  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_15 -> m0_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_283 -> m0_287  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_284 -> m0_286  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_427 -> m0_431  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_428 -> m0_430  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_622 -> m0_626  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_622 -> m0_629  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_623 -> m0_625  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_790 -> m0_798  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_791 -> m0_793  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_72 -> m0_83  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_74 -> m0_76  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_239 -> m0_243  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_240 -> m0_242  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_364 -> m0_368  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_365 -> m0_367  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_113 -> m0_123  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_115 -> m0_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_732 -> m0_738  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_734 -> m0_736  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_949 -> m0_35  [color=green, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_61  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_83  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_123  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_154  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_188  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_215  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_216  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_224  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_243  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_257  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_275  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_287  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_301  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_318  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_330  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_344  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_356  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_368  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_382  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_394  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_407  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_419  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_431  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_444  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_456  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_470  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_482  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_494  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_513  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_527  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_539  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_551  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_567  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_581  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_590  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_609  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_623  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_626  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_629  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_639  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_640  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_658  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_673  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_683  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_691  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_694  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_697  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_709  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_725  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_738  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_762  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_775  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_798  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_810  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_833  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_845  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_868  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_880  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_902  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_914  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_949 -> m0_934  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts", style=dashed];
m0_951 -> m0_35  [color=green, key=1, label=bool, style=dashed];
m0_952 -> m0_50  [color=green, key=1, label=jobId, style=dashed];
m0_954 -> m0_61  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_957 -> m0_83  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_961 -> m0_123  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_965 -> m0_154  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_969 -> m0_188  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_972 -> m0_224  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_974 -> m0_243  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_975 -> m0_257  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_976 -> m0_275  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_977 -> m0_287  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_978 -> m0_301  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_979 -> m0_318  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_980 -> m0_330  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_981 -> m0_344  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_982 -> m0_356  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_983 -> m0_368  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_984 -> m0_382  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_985 -> m0_394  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_986 -> m0_407  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_987 -> m0_419  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_988 -> m0_431  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_989 -> m0_444  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_990 -> m0_456  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_991 -> m0_470  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_992 -> m0_482  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_993 -> m0_494  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_994 -> m0_513  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_995 -> m0_527  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_996 -> m0_539  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_997 -> m0_551  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_998 -> m0_567  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_999 -> m0_567  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1000 -> m0_581  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1001 -> m0_581  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1002 -> m0_590  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1003 -> m0_609  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1004 -> m0_626  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1004 -> m0_629  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1005 -> m0_629  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1006 -> m0_639  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1006 -> m0_640  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1007 -> m0_658  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1008 -> m0_658  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1009 -> m0_673  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1010 -> m0_673  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1011 -> m0_683  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1013 -> m0_694  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1013 -> m0_697  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1014 -> m0_697  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1016 -> m0_709  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1017 -> m0_725  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1018 -> m0_725  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1020 -> m0_738  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1021 -> m0_762  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1022 -> m0_762  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1024 -> m0_775  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1025 -> m0_798  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1026 -> m0_798  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1028 -> m0_810  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1029 -> m0_833  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1030 -> m0_833  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1032 -> m0_845  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1033 -> m0_868  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1034 -> m0_868  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1036 -> m0_880  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1037 -> m0_902  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_1038 -> m0_902  [color=darkseagreen4, key=1, label=SqlConnection, style=dashed];
m0_1040 -> m0_914  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_973 -> m0_225  [color=darkseagreen4, key=1, label=correctJobQueue, style=dashed];
m0_955 -> m0_69  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_958 -> m0_110  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_959 -> m0_110  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_962 -> m0_142  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_963 -> m0_142  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_966 -> m0_175  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_967 -> m0_175  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_970 -> m0_209  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m0_971 -> m0_209  [color=darkseagreen4, key=1, label=state, style=dashed];
m0_1012 -> m0_688  [color=darkseagreen4, key=1, label=items, style=dashed];
}
