digraph  {
n66 [label="HangFire.SqlServer.SqlServerStorage", span=""];
n0 [label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="25-25", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)"];
n1 [label="Exit HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)", span="25-25", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string)"];
n2 [label="Entry HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="30-30", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)"];
n3 [label="connectionString == null", span="32-32", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)"];
n5 [label="options == null", span="33-33", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)"];
n7 [label="_options = options", span="35-35", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)"];
n8 [label="_connectionString = connectionString", span="36-36", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)"];
n9 [label="options.PrepareSchemaIfNecessary", span="38-38", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)"];
n4 [label="throw new ArgumentNullException(''connectionString'');", span="32-32", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)"];
n6 [label="throw new ArgumentNullException(''options'');", span="33-33", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)"];
n10 [label="PrepareSchemaIfNecessary()", span="40-40", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)"];
n11 [label="Exit HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)", span="30-30", cluster="HangFire.SqlServer.SqlServerStorage.SqlServerStorage(string, HangFire.SqlServer.SqlServerStorageOptions)"];
n13 [label="Entry HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()", span="44-44", cluster="HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()"];
n12 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n14 [label="Log.Debug(''Start installing HangFire SQL objects...'')", span="46-46", cluster="HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()"];
n15 [label="!IsSqlEditionSupported(_connectionString)", span="48-48", cluster="HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()"];
n23 [label="Entry Unk.Debug", span="", cluster="Unk.Debug"];
n16 [label="throw new PlatformNotSupportedException(''The SQL Server edition of the target server is unsupported, e.g. SQL Azure.'');", span="50-50", cluster="HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()"];
n17 [label="var script = GetStringResource(GetType().Assembly, ''HangFire.SqlServer.Install.sql'')", span="53-53", cluster="HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()"];
n24 [label="Entry HangFire.SqlServer.SqlServerStorage.IsSqlEditionSupported(string)", span="89-89", cluster="HangFire.SqlServer.SqlServerStorage.IsSqlEditionSupported(string)"];
n18 [label="script = script.Replace(''SET @TARGET_SCHEMA_VERSION = 2;'', ''SET @TARGET_SCHEMA_VERSION = '' + RequiredSchemaVersion + '';'')", span="54-54", cluster="HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()"];
n26 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
n27 [label="Entry HangFire.SqlServer.SqlServerStorage.GetStringResource(System.Reflection.Assembly, string)", span="98-98", cluster="HangFire.SqlServer.SqlServerStorage.GetStringResource(System.Reflection.Assembly, string)"];
n19 [label="var connection = CreateAndOpenConnection()", span="56-56", cluster="HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()"];
n28 [label="Entry string.Replace(string, string)", span="0-0", cluster="string.Replace(string, string)"];
n20 [label="connection.Execute(script)", span="58-58", cluster="HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()"];
n29 [label="Entry HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="81-81", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()"];
n21 [label="Log.Debug(''HangFire SQL objects installed.'')", span="61-61", cluster="HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()"];
n30 [label="Entry Unk.Execute", span="", cluster="Unk.Execute"];
n22 [label="Exit HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()", span="44-44", cluster="HangFire.SqlServer.SqlServerStorage.PrepareSchemaIfNecessary()"];
n25 [label="Entry System.PlatformNotSupportedException.PlatformNotSupportedException(string)", span="0-0", cluster="System.PlatformNotSupportedException.PlatformNotSupportedException(string)"];
n31 [label="Entry HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="64-64", cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()"];
n32 [label="return new SqlServerMonitoringApi(CreateAndOpenConnection());", span="66-66", cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()"];
n33 [label="Exit HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()", span="64-64", cluster="HangFire.SqlServer.SqlServerStorage.GetMonitoringApi()"];
n34 [label="Entry HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)", span="19-19", cluster="HangFire.SqlServer.SqlServerMonitoringApi.SqlServerMonitoringApi(SqlConnection)"];
n35 [label="Entry HangFire.SqlServer.SqlServerStorage.GetConnection()", span="69-69", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()"];
n36 [label="return new SqlServerConnection(this, CreateAndOpenConnection());", span="71-71", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()"];
n37 [label="Exit HangFire.SqlServer.SqlServerStorage.GetConnection()", span="69-69", cluster="HangFire.SqlServer.SqlServerStorage.GetConnection()"];
n38 [label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)", span="16-16", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(HangFire.JobStorage, SqlConnection)"];
n39 [label="Entry HangFire.SqlServer.SqlServerStorage.GetComponents()", span="74-74", cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()"];
n40 [label="yield return new SchedulePoller(this, _options.PollInterval);", span="76-76", cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()"];
n41 [label="yield return new ServerWatchdog(this);", span="77-77", cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()"];
n42 [label="yield return new ExpirationManager(this);", span="78-78", cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()"];
n44 [label="Entry HangFire.Server.Components.SchedulePoller.SchedulePoller(HangFire.JobStorage, System.TimeSpan)", span="34-34", cluster="HangFire.Server.Components.SchedulePoller.SchedulePoller(HangFire.JobStorage, System.TimeSpan)"];
n45 [label="Entry HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)", span="33-33", cluster="HangFire.Server.Components.ServerWatchdog.ServerWatchdog(HangFire.JobStorage)"];
n43 [label="Exit HangFire.SqlServer.SqlServerStorage.GetComponents()", span="74-74", cluster="HangFire.SqlServer.SqlServerStorage.GetComponents()"];
n46 [label="Entry HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)", span="27-27", cluster="HangFire.SqlServer.Components.ExpirationManager.ExpirationManager(HangFire.SqlServer.SqlServerStorage)"];
n47 [label="var connection = new SqlConnection(_connectionString)", span="83-83", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()"];
n48 [label="connection.Open()", span="84-84", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()"];
n51 [label="Entry SqlConnection.cstr", span="", cluster="SqlConnection.cstr"];
n49 [label="return connection;", span="86-86", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()"];
n52 [label="Entry Unk.Open", span="", cluster="Unk.Open"];
n50 [label="Exit HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()", span="81-81", cluster="HangFire.SqlServer.SqlServerStorage.CreateAndOpenConnection()"];
n53 [label="var connection = CreateAndOpenConnection()", span="91-91", cluster="HangFire.SqlServer.SqlServerStorage.IsSqlEditionSupported(string)"];
n54 [label="var edition = connection.Query<int>(''SELECT SERVERPROPERTY ( 'EngineEdition' )'').Single()", span="93-93", cluster="HangFire.SqlServer.SqlServerStorage.IsSqlEditionSupported(string)"];
n55 [label="return edition >= SqlEngineEdition.Standard && edition <= SqlEngineEdition.Express;", span="94-94", cluster="HangFire.SqlServer.SqlServerStorage.IsSqlEditionSupported(string)"];
n57 [label="Entry Unk.>", span="", cluster="Unk.>"];
n58 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
n56 [label="Exit HangFire.SqlServer.SqlServerStorage.IsSqlEditionSupported(string)", span="89-89", cluster="HangFire.SqlServer.SqlServerStorage.IsSqlEditionSupported(string)"];
n59 [label="var stream = assembly.GetManifestResourceStream(resourceName)", span="100-100", cluster="HangFire.SqlServer.SqlServerStorage.GetStringResource(System.Reflection.Assembly, string)"];
n60 [label="var reader = new StreamReader(stream)", span="101-101", cluster="HangFire.SqlServer.SqlServerStorage.GetStringResource(System.Reflection.Assembly, string)"];
n63 [label="Entry System.Reflection.Assembly.GetManifestResourceStream(string)", span="0-0", cluster="System.Reflection.Assembly.GetManifestResourceStream(string)"];
n61 [label="return reader.ReadToEnd();", span="103-103", cluster="HangFire.SqlServer.SqlServerStorage.GetStringResource(System.Reflection.Assembly, string)"];
n64 [label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0", cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)"];
n62 [label="Exit HangFire.SqlServer.SqlServerStorage.GetStringResource(System.Reflection.Assembly, string)", span="98-98", cluster="HangFire.SqlServer.SqlServerStorage.GetStringResource(System.Reflection.Assembly, string)"];
n65 [label="Entry System.IO.StreamReader.ReadToEnd()", span="0-0", cluster="System.IO.StreamReader.ReadToEnd()"];
d348 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.NotNull(server.LastHeartbeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="490-515", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", color=green, community=0];
d448 [label="HangFire.SqlServer.Tests.ConnectionFacts", span=""];
d347 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="488-488", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()"];
d349 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="488-488", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()"];
d67 [label="Entry Unk.UseConnections", span="", cluster="Unk.UseConnections"];
d350 [label="Entry lambda expression", span="490-515", cluster="lambda expression"];
d356 [label="Assert.NotNull(server.LastHeartbeat)", span="504-504", cluster="lambda expression", color=green, community=0];
d353 [label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="499-499", cluster="lambda expression"];
d355 [label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="501-503", cluster="lambda expression"];
d357 [label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="506-510", cluster="lambda expression"];
d28 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull"];
d376 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues \r\n('Server1', '', getutcdate()),\r\n('Server2', '', getutcdate())''", span="528-532", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", color=green, community=0];
d375 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="526-526", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()"];
d377 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="534-542", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()"];
d380 [label="sql.Execute(arrangeSql)", span="536-536", cluster="lambda expression"];
d397 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues\r\n('server1', '', '2012-12-12 12:12:12'),\r\n('server2', '', '2012-12-12 12:12:12')''", span="555-559", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", color=green, community=0];
d396 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="553-553", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()"];
d398 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat);\r\n\r\n                Assert.NotEqual(2012, servers[''server1''].Year);\r\n                Assert.Equal(2012, servers[''server2''].Year);\r\n            })", span="561-572", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", color=green, community=0];
d401 [label="sql.Execute(arrangeSql)", span="563-563", cluster="lambda expression"];
d399 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="553-553", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()"];
d400 [label="Entry lambda expression", span="561-572", cluster="lambda expression"];
d403 [label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat)", span="567-568", cluster="lambda expression", color=green, community=0];
d402 [label="connection.Heartbeat(''server1'')", span="565-565", cluster="lambda expression"];
d404 [label="Assert.NotEqual(2012, servers[''server1''].Year)", span="570-570", cluster="lambda expression", color=green, community=0];
d89 [label="Entry Unk.Query", span="", cluster="Unk.Query"];
d96 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary"];
d407 [label="Entry lambda expression", span="568-568", cluster="lambda expression"];
d410 [label="Entry lambda expression", span="568-568", cluster="lambda expression"];
d405 [label="Assert.Equal(2012, servers[''server2''].Year)", span="571-571", cluster="lambda expression", color=green, community=0];
d385 [label="Entry Unk.NotEqual", span="", cluster="Unk.NotEqual"];
d406 [label="Exit lambda expression", span="561-572", cluster="lambda expression"];
d5 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d408 [label="(string)x.Id", span="568-568", cluster="lambda expression", color=green, community=0];
d409 [label="Exit lambda expression", span="568-568", cluster="lambda expression"];
d411 [label="(DateTime)x.LastHeartbeat", span="568-568", cluster="lambda expression", color=green, community=0];
d412 [label="Exit lambda expression", span="568-568", cluster="lambda expression"];
d20 [label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="35-39", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()"];
d30 [label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireJobLock(''1'');\r\n                Assert.NotNull(@lock);\r\n            })", span="45-49", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()"];
d38 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="55-64", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()"];
d50 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="70-79", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()"];
d65 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(ConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''Hello'', job.Arguments[0]);\r\n\r\n                Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            })", span="85-117", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()"];
d107 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="123-124", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()"];
d117 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="130-134", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()"];
d126 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n                Assert.Null(result.LoadException);\r\n            })", span="145-165", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()"];
d146 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="176-190", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()"];
d155 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="196-202", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d166 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="208-214", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()"];
d177 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="225-237", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()"];
d188 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="248-261", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()"];
d200 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="272-284", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()"];
d210 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="290-296", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d221 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="302-308", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()"];
d231 [label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="314-318", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()"];
d239 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="333-342", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()"];
d248 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="348-354", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()"];
d259 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null));\r\n\r\n                Assert.Equal(''queue'', exception.ParamName);\r\n            })", span="360-366", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()"];
d270 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' });\r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="376-384", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()"];
d281 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    }); \r\n\r\n                connection.DeleteJobFromQueue(''1'', ''default'');\r\n\r\n                var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single();\r\n                Assert.Equal(2, count);\r\n            })", span="394-408", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()"];
d290 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="414-420", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()"];
d301 [label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="426-427", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()"];
d310 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="433-439", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()"];
d318 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="453-460", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()"];
d326 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="466-472", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()"];
d338 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="478-484", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()"];
d366 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="521-522", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()"];
d387 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="548-549", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()"];
d414 [label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="578-579", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()"];
d426 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="589-603", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()"];
d362 [label="Exit lambda expression", span="490-515", cluster="lambda expression"];
d351 [label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="492-496", cluster="lambda expression"];
d352 [label="connection.AnnounceServer(''server'', context1)", span="497-497", cluster="lambda expression"];
d358 [label="connection.AnnounceServer(''server'', context2)", span="511-511", cluster="lambda expression"];
d359 [label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="512-512", cluster="lambda expression"];
d354 [label="Assert.Equal(''server'', server.Id)", span="500-500", cluster="lambda expression"];
d90 [label="Entry Unk.Single", span="", cluster="Unk.Single"];
d363 [label="Entry string.StartsWith(string)", span="0-0", cluster="string.StartsWith(string)"];
d95 [label="Entry Unk.True", span="", cluster="Unk.True"];
d335 [label="Entry HangFire.Server.ServerContext.ServerContext()", span="18-18", cluster="HangFire.Server.ServerContext.ServerContext()"];
d25 [label="Assert.NotNull(transaction)", span="38-38", cluster="lambda expression"];
d34 [label="Assert.NotNull(@lock)", span="48-48", cluster="lambda expression"];
d70 [label="Assert.NotNull(jobId)", span="92-92", cluster="lambda expression"];
d132 [label="Assert.NotNull(result)", span="160-160", cluster="lambda expression"];
d133 [label="Assert.NotNull(result.Job)", span="161-161", cluster="lambda expression"];
d151 [label="Assert.NotNull(result.LoadException)", span="189-189", cluster="lambda expression"];
d378 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()", span="526-526", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_RemovesAServerRecord()"];
d379 [label="Entry lambda expression", span="534-542", cluster="lambda expression"];
d472 [label=arrangeSql, span=""];
d381 [label="connection.RemoveServer(''Server1'')", span="538-538", cluster="lambda expression"];
d278 [label="Entry Unk.Execute", span="", cluster="Unk.Execute"];
d474 [label=arrangeSql, span=""];
d395 [label="Entry HangFire.SqlServer.SqlServerConnection.Heartbeat(string)", span="266-266", cluster="HangFire.SqlServer.SqlServerConnection.Heartbeat(string)"];
d72 [label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="95-95", cluster="lambda expression"];
d83 [label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="110-113", cluster="lambda expression"];
d130 [label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="149-156", cluster="lambda expression"];
d149 [label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="178-185", cluster="lambda expression"];
d180 [label="var job = sql.Query(arrangeSql).Single()", span="227-227", cluster="lambda expression"];
d183 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="232-234", cluster="lambda expression"];
d191 [label="var job = sql.Query(arrangeSql).Single()", span="250-250", cluster="lambda expression"];
d195 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="256-258", cluster="lambda expression"];
d203 [label="var job = sql.Query(arrangeSql).Single()", span="274-274", cluster="lambda expression"];
d206 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="279-281", cluster="lambda expression"];
d382 [label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="540-540", cluster="lambda expression"];
d431 [label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="601-601", cluster="lambda expression"];
d383 [label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="541-541", cluster="lambda expression"];
d2 [label="Assert.Equal(''connection'', exception.ParamName)", span="20-20", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()"];
d13 [label="Assert.Equal(''options'', exception.ParamName)", span="29-29", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()"];
d42 [label="Assert.Equal(''job'', exception.ParamName)", span="63-63", cluster="lambda expression"];
d54 [label="Assert.Equal(''parameters'', exception.ParamName)", span="78-78", cluster="lambda expression"];
d73 [label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="96-96", cluster="lambda expression"];
d74 [label="Assert.Equal(null, (int?) sqlJob.StateId)", span="97-97", cluster="lambda expression"];
d75 [label="Assert.Equal(null, (string) sqlJob.StateName)", span="98-98", cluster="lambda expression"];
d79 [label="Assert.Equal(typeof(ConnectionFacts), job.Type)", span="104-104", cluster="lambda expression"];
d80 [label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="105-105", cluster="lambda expression"];
d81 [label="Assert.Equal(''Hello'', job.Arguments[0])", span="106-106", cluster="lambda expression"];
d84 [label="Assert.Equal(''Value1'', parameters[''Key1''])", span="115-115", cluster="lambda expression"];
d85 [label="Assert.Equal(''Value2'', parameters[''Key2''])", span="116-116", cluster="lambda expression"];
d134 [label="Assert.Equal(''Succeeded'', result.State)", span="162-162", cluster="lambda expression"];
d135 [label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="163-163", cluster="lambda expression"];
d159 [label="Assert.Equal(''id'', exception.ParamName)", span="201-201", cluster="lambda expression"];
d170 [label="Assert.Equal(''name'', exception.ParamName)", span="213-213", cluster="lambda expression"];
d184 [label="Assert.Equal(''Value'', parameter.Value)", span="236-236", cluster="lambda expression"];
d196 [label="Assert.Equal(''AnotherValue'', parameter.Value)", span="260-260", cluster="lambda expression"];
d207 [label="Assert.Equal((string) null, parameter.Value)", span="283-283", cluster="lambda expression"];
d214 [label="Assert.Equal(''id'', exception.ParamName)", span="295-295", cluster="lambda expression"];
d225 [label="Assert.Equal(''name'', exception.ParamName)", span="307-307", cluster="lambda expression"];
d244 [label="Assert.Equal(''value'', value)", span="341-341", cluster="lambda expression"];
d252 [label="Assert.Equal(''id'', exception.ParamName)", span="353-353", cluster="lambda expression"];
d263 [label="Assert.Equal(''queue'', exception.ParamName)", span="365-365", cluster="lambda expression"];
d276 [label="Assert.Equal(0, count)", span="383-383", cluster="lambda expression"];
d287 [label="Assert.Equal(2, count)", span="407-407", cluster="lambda expression"];
d294 [label="Assert.Equal(''key'', exception.ParamName)", span="419-419", cluster="lambda expression"];
d323 [label="Assert.Equal(''-1.0'', result)", span="459-459", cluster="lambda expression"];
d330 [label="Assert.Equal(''serverId'', exception.ParamName)", span="471-471", cluster="lambda expression"];
d342 [label="Assert.Equal(''context'', exception.ParamName)", span="483-483", cluster="lambda expression"];
d360 [label="Assert.Equal(''server'', sameServer.Id)", span="513-513", cluster="lambda expression"];
d432 [label="Assert.Equal(''server2'', liveServer.Id)", span="602-602", cluster="lambda expression"];
d19 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="33-33", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()"];
d21 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="33-33", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()"];
d22 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection"];
d23 [label="Entry lambda expression", span="35-39", cluster="lambda expression"];
d29 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="43-43", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()"];
d31 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()", span="43-43", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AcquireJobLock_ReturnsNonNullInstance()"];
d32 [label="Entry lambda expression", span="45-49", cluster="lambda expression"];
d37 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="53-53", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()"];
d39 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="53-53", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()"];
d40 [label="Entry lambda expression", span="55-64", cluster="lambda expression"];
d49 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="68-68", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()"];
d63 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="624-624", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)"];
d51 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()", span="68-68", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_ThrowsANException_WhenParametersCollectionIsNull()"];
d52 [label="Entry lambda expression", span="70-79", cluster="lambda expression"];
d64 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="83-83", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()"];
d66 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="83-83", cluster="HangFire.SqlServer.Tests.ConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()"];
d68 [label="Entry lambda expression", span="85-117", cluster="lambda expression"];
d106 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="121-121", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()"];
d108 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="121-121", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()"];
d109 [label="Entry lambda expression", span="123-124", cluster="lambda expression"];
d116 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="128-128", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()"];
d118 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="128-128", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()"];
d119 [label="Entry lambda expression", span="130-134", cluster="lambda expression"];
d125 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="140-143", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()"];
d127 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="138-138", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()"];
d128 [label="Entry lambda expression", span="145-165", cluster="lambda expression"];
d145 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="171-174", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()"];
d147 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="169-169", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()"];
d148 [label="Entry lambda expression", span="176-190", cluster="lambda expression"];
d154 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="194-194", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d156 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="194-194", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d157 [label="Entry lambda expression", span="196-202", cluster="lambda expression"];
d165 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="206-206", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()"];
d167 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="206-206", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()"];
d168 [label="Entry lambda expression", span="208-214", cluster="lambda expression"];
d176 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="220-223", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()"];
d178 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="218-218", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()"];
d179 [label="Entry lambda expression", span="225-237", cluster="lambda expression"];
d187 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="243-246", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()"];
d189 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="241-241", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()"];
d190 [label="Entry lambda expression", span="248-261", cluster="lambda expression"];
d199 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="267-270", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()"];
d201 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="265-265", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()"];
d202 [label="Entry lambda expression", span="272-284", cluster="lambda expression"];
d209 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="288-288", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d211 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="288-288", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()"];
d212 [label="Entry lambda expression", span="290-296", cluster="lambda expression"];
d220 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="300-300", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()"];
d222 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="300-300", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()"];
d223 [label="Entry lambda expression", span="302-308", cluster="lambda expression"];
d230 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="312-312", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()"];
d232 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="312-312", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()"];
d233 [label="Entry lambda expression", span="314-318", cluster="lambda expression"];
d238 [label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="324-331", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()"];
d240 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="322-322", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()"];
d241 [label="Entry lambda expression", span="333-342", cluster="lambda expression"];
d247 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="346-346", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()"];
d249 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()", span="346-346", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenIdIsNull()"];
d250 [label="Entry lambda expression", span="348-354", cluster="lambda expression"];
d258 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="358-358", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()"];
d260 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()", span="358-358", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ThrowsAnException_WhenQueueIsNull()"];
d261 [label="Entry lambda expression", span="360-366", cluster="lambda expression"];
d269 [label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="372-374", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()"];
d271 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="370-370", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()"];
d272 [label="Entry lambda expression", span="376-384", cluster="lambda expression"];
d280 [label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@id, @queue)''", span="390-392", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()"];
d282 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="388-388", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()"];
d283 [label="Entry lambda expression", span="394-408", cluster="lambda expression"];
d289 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="412-412", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()"];
d291 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="412-412", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()"];
d292 [label="Entry lambda expression", span="414-420", cluster="lambda expression"];
d300 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="424-424", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()"];
d302 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="424-424", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()"];
d303 [label="Entry lambda expression", span="426-427", cluster="lambda expression"];
d309 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="431-431", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()"];
d311 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="431-431", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()"];
d312 [label="Entry lambda expression", span="433-439", cluster="lambda expression"];
d317 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="445-451", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()"];
d319 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="443-443", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()"];
d320 [label="Entry lambda expression", span="453-460", cluster="lambda expression"];
d325 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="464-464", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()"];
d327 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="464-464", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()"];
d328 [label="Entry lambda expression", span="466-472", cluster="lambda expression"];
d337 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="476-476", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()"];
d339 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="476-476", cluster="HangFire.SqlServer.Tests.ConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()"];
d340 [label="Entry lambda expression", span="478-484", cluster="lambda expression"];
d365 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="519-519", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()"];
d367 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="519-519", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()"];
d368 [label="Entry lambda expression", span="521-522", cluster="lambda expression"];
d386 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="546-546", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()"];
d388 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="546-546", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()"];
d389 [label="Entry lambda expression", span="548-549", cluster="lambda expression"];
d413 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="576-576", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()"];
d415 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="576-576", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()"];
d416 [label="Entry lambda expression", span="578-579", cluster="lambda expression"];
d425 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="585-587", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()"];
d427 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="583-583", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()"];
d428 [label="Entry lambda expression", span="589-603", cluster="lambda expression"];
d361 [label="Assert.Contains(''1000'', sameServer.Data)", span="514-514", cluster="lambda expression"];
d336 [label="Entry HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)", span="236-236", cluster="HangFire.SqlServer.SqlServerConnection.AnnounceServer(string, HangFire.Server.ServerContext)"];
d242 [label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="335-337", cluster="lambda expression"];
d275 [label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="382-382", cluster="lambda expression"];
d286 [label="var count = sql.Query<int>(''select count(*) from HangFire.JobQueue'').Single()", span="406-406", cluster="lambda expression"];
d82 [label="Assert.True(DateTime.UtcNow < sqlJob.ExpireAt && sqlJob.ExpireAt < DateTime.UtcNow.AddDays(1))", span="108-108", cluster="lambda expression"];
d333 [label="connection.AnnounceServer(null, new ServerContext())", span="469-469", cluster="lambda expression"];
d24 [label="var transaction = connection.CreateWriteTransaction()", span="37-37", cluster="lambda expression"];
d26 [label="Exit lambda expression", span="35-39", cluster="lambda expression"];
d33 [label="var @lock = connection.AcquireJobLock(''1'')", span="47-47", cluster="lambda expression"];
d35 [label="Exit lambda expression", span="45-49", cluster="lambda expression"];
d69 [label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    TimeSpan.FromDays(1))", span="87-90", cluster="lambda expression"];
d71 [label="Assert.NotEmpty(jobId)", span="93-93", cluster="lambda expression"];
d131 [label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="158-158", cluster="lambda expression"];
d150 [label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="187-187", cluster="lambda expression"];
d152 [label="Exit lambda expression", span="176-190", cluster="lambda expression"];
d384 [label="Exit lambda expression", span="534-542", cluster="lambda expression"];
d374 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveServer(string)", span="257-257", cluster="HangFire.SqlServer.SqlServerConnection.RemoveServer(string)"];
d273 [label="sql.Execute(arrangeSql, new { id = ''1'', queue = ''default'' })", span="378-378", cluster="lambda expression"];
d284 [label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    { \r\n                        new { id = ''1'', queue = ''critical'' },\r\n                        new { id = ''2'', queue = ''default'' } \r\n                    })", span="396-402", cluster="lambda expression"];
d321 [label="sql.Execute(arrangeSql)", span="455-455", cluster="lambda expression"];
d429 [label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="591-597", cluster="lambda expression"];
d393 [label="connection.Heartbeat(null)", span="549-549", cluster="lambda expression"];
d76 [label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="100-100", cluster="lambda expression"];
d77 [label="invocationData.Arguments = sqlJob.Arguments", span="101-101", cluster="lambda expression"];
d100 [label="Entry lambda expression", span="113-113", cluster="lambda expression"];
d103 [label="Entry lambda expression", span="113-113", cluster="lambda expression"];
d452 [label=arrangeSql, span=""];
d129 [label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="147-147", cluster="lambda expression"];
d138 [label="Entry HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)", span="65-65", cluster="HangFire.Storage.InvocationData.Serialize(HangFire.Common.Job)"];
d139 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)"];
d453 [label=arrangeSql, span=""];
d153 [label="Entry HangFire.Storage.InvocationData.InvocationData(string, string, string, string)", span="24-24", cluster="HangFire.Storage.InvocationData.InvocationData(string, string, string, string)"];
d456 [label=arrangeSql, span=""];
d181 [label="string jobId = job.Id.ToString()", span="228-228", cluster="lambda expression"];
d182 [label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="230-230", cluster="lambda expression"];
d457 [label=arrangeSql, span=""];
d192 [label="string jobId = job.Id.ToString()", span="251-251", cluster="lambda expression"];
d194 [label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="254-254", cluster="lambda expression"];
d458 [label=arrangeSql, span=""];
d204 [label="string jobId = job.Id.ToString()", span="275-275", cluster="lambda expression"];
d205 [label="connection.SetJobParameter(jobId, ''Name'', null)", span="277-277", cluster="lambda expression"];
d430 [label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="599-599", cluster="lambda expression"];
d1 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(null, new SqlServerStorageOptions()))", span="17-18", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()"];
d3 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", span="15-15", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()"];
d12 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(ConnectionUtils.CreateConnection(), null))", span="26-27", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()"];
d14 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="24-24", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()"];
d41 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero))", span="57-61", cluster="lambda expression"];
d43 [label="Exit lambda expression", span="55-64", cluster="lambda expression"];
d53 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero))", span="72-76", cluster="lambda expression"];
d55 [label="Exit lambda expression", span="70-79", cluster="lambda expression"];
d91 [label="Entry Unk.ToString", span="", cluster="Unk.ToString"];
d78 [label="var job = invocationData.Deserialize()", span="103-103", cluster="lambda expression"];
d86 [label="Exit lambda expression", span="85-117", cluster="lambda expression"];
d136 [label="Assert.Null(result.LoadException)", span="164-164", cluster="lambda expression"];
d158 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="198-199", cluster="lambda expression"];
d160 [label="Exit lambda expression", span="196-202", cluster="lambda expression"];
d169 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="210-211", cluster="lambda expression"];
d171 [label="Exit lambda expression", span="208-214", cluster="lambda expression"];
d185 [label="Exit lambda expression", span="225-237", cluster="lambda expression"];
d197 [label="Exit lambda expression", span="248-261", cluster="lambda expression"];
d208 [label="Exit lambda expression", span="272-284", cluster="lambda expression"];
d213 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="292-293", cluster="lambda expression"];
d215 [label="Exit lambda expression", span="290-296", cluster="lambda expression"];
d224 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="304-305", cluster="lambda expression"];
d226 [label="Exit lambda expression", span="302-308", cluster="lambda expression"];
d243 [label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="339-339", cluster="lambda expression"];
d245 [label="Exit lambda expression", span="333-342", cluster="lambda expression"];
d251 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(null, ''default''))", span="350-351", cluster="lambda expression"];
d253 [label="Exit lambda expression", span="348-354", cluster="lambda expression"];
d262 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.DeleteJobFromQueue(''1'', null))", span="362-363", cluster="lambda expression"];
d264 [label="Exit lambda expression", span="360-366", cluster="lambda expression"];
d277 [label="Exit lambda expression", span="376-384", cluster="lambda expression"];
d288 [label="Exit lambda expression", span="394-408", cluster="lambda expression"];
d293 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="416-417", cluster="lambda expression"];
d295 [label="Exit lambda expression", span="414-420", cluster="lambda expression"];
d322 [label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="457-457", cluster="lambda expression"];
d324 [label="Exit lambda expression", span="453-460", cluster="lambda expression"];
d329 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="468-469", cluster="lambda expression"];
d331 [label="Exit lambda expression", span="466-472", cluster="lambda expression"];
d341 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="480-481", cluster="lambda expression"];
d343 [label="Exit lambda expression", span="478-484", cluster="lambda expression"];
d433 [label="Exit lambda expression", span="589-603", cluster="lambda expression"];
d45 [label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        TimeSpan.Zero)", span="58-61", cluster="lambda expression"];
d61 [label="SampleMethod(''hello'')", span="74-74", cluster="lambda expression"];
d98 [label="SampleMethod(''Hello'')", span="88-88", cluster="lambda expression"];
d142 [label="SampleMethod(''wrong'')", span="147-147", cluster="lambda expression"];
d447 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)", span="624-624", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SampleMethod(string)"];
d57 [label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        TimeSpan.Zero)", span="73-76", cluster="lambda expression"];
d111 [label="Exit lambda expression", span="123-124", cluster="lambda expression"];
d110 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="123-124", cluster="lambda expression"];
d113 [label="connection.GetJobData(null)", span="124-124", cluster="lambda expression"];
d122 [label="Exit lambda expression", span="130-134", cluster="lambda expression"];
d120 [label="var result = connection.GetJobData(''1'')", span="132-132", cluster="lambda expression"];
d124 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="138-138", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()"];
d137 [label="Exit lambda expression", span="145-165", cluster="lambda expression"];
d144 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="169-169", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()"];
d162 [label="connection.SetJobParameter(null, ''name'', ''value'')", span="199-199", cluster="lambda expression"];
d173 [label="connection.SetJobParameter(''1'', null, ''value'')", span="211-211", cluster="lambda expression"];
d175 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="218-218", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()"];
d186 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="241-241", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()"];
d193 [label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="253-253", cluster="lambda expression"];
d198 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="265-265", cluster="HangFire.SqlServer.Tests.ConnectionFacts.SetParameter_CanAcceptNulls_AsValues()"];
d217 [label="connection.GetJobParameter(null, ''hello'')", span="293-293", cluster="lambda expression"];
d228 [label="connection.GetJobParameter(''1'', null)", span="305-305", cluster="lambda expression"];
d236 [label="Exit lambda expression", span="314-318", cluster="lambda expression"];
d234 [label="var value = connection.GetJobParameter(''1'', ''hello'')", span="316-316", cluster="lambda expression"];
d237 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="322-322", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()"];
d255 [label="connection.DeleteJobFromQueue(null, ''default'')", span="351-351", cluster="lambda expression"];
d266 [label="connection.DeleteJobFromQueue(''1'', null)", span="363-363", cluster="lambda expression"];
d268 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()", span="370-370", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_ReallyDeletesTheJobFromTheQueue()"];
d274 [label="connection.DeleteJobFromQueue(''1'', ''default'')", span="380-380", cluster="lambda expression"];
d279 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()", span="388-388", cluster="HangFire.SqlServer.Tests.ConnectionFacts.DeleteJobFromQueue_DoesNotDelete_UnrelatedJobs()"];
d285 [label="connection.DeleteJobFromQueue(''1'', ''default'')", span="404-404", cluster="lambda expression"];
d297 [label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="417-417", cluster="lambda expression"];
d305 [label="Exit lambda expression", span="426-427", cluster="lambda expression"];
d304 [label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="426-427", cluster="lambda expression"];
d307 [label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="427-427", cluster="lambda expression"];
d315 [label="Exit lambda expression", span="433-439", cluster="lambda expression"];
d313 [label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="435-436", cluster="lambda expression"];
d316 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="443-443", cluster="HangFire.SqlServer.Tests.ConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()"];
d345 [label="connection.AnnounceServer(''server'', null)", span="481-481", cluster="lambda expression"];
d370 [label="Exit lambda expression", span="521-522", cluster="lambda expression"];
d369 [label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="521-522", cluster="lambda expression"];
d372 [label="connection.RemoveServer(null)", span="522-522", cluster="lambda expression"];
d391 [label="Exit lambda expression", span="548-549", cluster="lambda expression"];
d390 [label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="548-549", cluster="lambda expression"];
d418 [label="Exit lambda expression", span="578-579", cluster="lambda expression"];
d417 [label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="578-579", cluster="lambda expression"];
d420 [label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="579-579", cluster="lambda expression"];
d424 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="583-583", cluster="HangFire.SqlServer.Tests.ConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()"];
d364 [label="Entry Unk.Contains", span="", cluster="Unk.Contains"];
d461 [label=arrangeSql, span=""];
d4 [label="Entry Unk.>", span="", cluster="Unk.>"];
d94 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)"];
d469 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d332 [label="Entry lambda expression", span="469-469", cluster="lambda expression"];
d334 [label="Exit lambda expression", span="469-469", cluster="lambda expression"];
d27 [label="Entry HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="49-49", cluster="HangFire.SqlServer.SqlServerConnection.CreateWriteTransaction()"];
d36 [label="Entry HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)", span="54-54", cluster="HangFire.SqlServer.SqlServerConnection.AcquireJobLock(string)"];
d59 [label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="116-116", cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)"];
d47 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()"];
d87 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)"];
d48 [label="Entry HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)", span="106-106", cluster="HangFire.SqlServer.SqlServerConnection.CreateExpiredJob(HangFire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.TimeSpan)"];
d97 [label="Entry lambda expression", span="88-88", cluster="lambda expression"];
d88 [label="Entry Unk.NotEmpty", span="", cluster="Unk.NotEmpty"];
d140 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()"];
d115 [label="Entry HangFire.SqlServer.SqlServerConnection.GetJobData(string)", span="155-155", cluster="HangFire.SqlServer.SqlServerConnection.GetJobData(string)"];
d464 [label=arrangeSql, span=""];
d465 [label=arrangeSql, span=""];
d468 [label=arrangeSql, span=""];
d476 [label=arrangeSql, span=""];
d434 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)"];
d473 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d392 [label="Entry lambda expression", span="549-549", cluster="lambda expression"];
d394 [label="Exit lambda expression", span="549-549", cluster="lambda expression"];
d92 [label="Entry HangFire.Common.JobHelper.FromJson<T>(string)", span="30-30", cluster="HangFire.Common.JobHelper.FromJson<T>(string)"];
d102 [label="Exit lambda expression", span="113-113", cluster="lambda expression"];
d101 [label="(string) x.Name", span="113-113", cluster="lambda expression"];
d105 [label="Exit lambda expression", span="113-113", cluster="lambda expression"];
d104 [label="(string) x.Value", span="113-113", cluster="lambda expression"];
d141 [label="Entry lambda expression", span="147-147", cluster="lambda expression"];
d164 [label="Entry HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="191-191", cluster="HangFire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)"];
d435 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)"];
d423 [label="Entry HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="275-275", cluster="HangFire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)"];
d0 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()", span="15-15", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenSqlConnectionIsNull()"];
d6 [label="Entry lambda expression", span="18-18", cluster="lambda expression"];
d11 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()", span="24-24", cluster="HangFire.SqlServer.Tests.ConnectionFacts.Ctor_ThrowsAnException_WhenOptionsValueIsNull()"];
d15 [label="Entry lambda expression", span="27-27", cluster="lambda expression"];
d44 [label="Entry lambda expression", span="58-61", cluster="lambda expression"];
d56 [label="Entry lambda expression", span="73-76", cluster="lambda expression"];
d93 [label="Entry HangFire.Storage.InvocationData.Deserialize()", span="38-38", cluster="HangFire.Storage.InvocationData.Deserialize()"];
d123 [label="Entry Unk.Null", span="", cluster="Unk.Null"];
d161 [label="Entry lambda expression", span="199-199", cluster="lambda expression"];
d172 [label="Entry lambda expression", span="211-211", cluster="lambda expression"];
d216 [label="Entry lambda expression", span="293-293", cluster="lambda expression"];
d227 [label="Entry lambda expression", span="305-305", cluster="lambda expression"];
d246 [label="Entry Unk.GetJobParameter", span="", cluster="Unk.GetJobParameter"];
d254 [label="Entry lambda expression", span="351-351", cluster="lambda expression"];
d265 [label="Entry lambda expression", span="363-363", cluster="lambda expression"];
d296 [label="Entry lambda expression", span="417-417", cluster="lambda expression"];
d299 [label="Entry HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="225-225", cluster="HangFire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)"];
d344 [label="Entry lambda expression", span="481-481", cluster="lambda expression"];
d449 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d46 [label="Exit lambda expression", span="58-61", cluster="lambda expression"];
d60 [label="Entry lambda expression", span="74-74", cluster="lambda expression"];
d62 [label="Exit lambda expression", span="74-74", cluster="lambda expression"];
d99 [label="Exit lambda expression", span="88-88", cluster="lambda expression"];
d143 [label="Exit lambda expression", span="147-147", cluster="lambda expression"];
d450 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d58 [label="Exit lambda expression", span="73-76", cluster="lambda expression"];
d112 [label="Entry lambda expression", span="124-124", cluster="lambda expression"];
d451 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d114 [label="Exit lambda expression", span="124-124", cluster="lambda expression"];
d121 [label="Assert.Null(result)", span="133-133", cluster="lambda expression"];
d454 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d163 [label="Exit lambda expression", span="199-199", cluster="lambda expression"];
d455 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d174 [label="Exit lambda expression", span="211-211", cluster="lambda expression"];
d459 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d218 [label="Exit lambda expression", span="293-293", cluster="lambda expression"];
d219 [label="Entry HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="205-205", cluster="HangFire.SqlServer.SqlServerConnection.GetJobParameter(string, string)"];
d460 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d229 [label="Exit lambda expression", span="305-305", cluster="lambda expression"];
d235 [label="Assert.Null(value)", span="317-317", cluster="lambda expression"];
d462 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d256 [label="Exit lambda expression", span="351-351", cluster="lambda expression"];
d257 [label="Entry HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)", span="216-216", cluster="HangFire.SqlServer.SqlServerConnection.DeleteJobFromQueue(string, string)"];
d463 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d267 [label="Exit lambda expression", span="363-363", cluster="lambda expression"];
d466 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d298 [label="Exit lambda expression", span="417-417", cluster="lambda expression"];
d306 [label="Entry lambda expression", span="427-427", cluster="lambda expression"];
d467 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d308 [label="Exit lambda expression", span="427-427", cluster="lambda expression"];
d314 [label="Assert.Null(result)", span="438-438", cluster="lambda expression"];
d470 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d346 [label="Exit lambda expression", span="481-481", cluster="lambda expression"];
d371 [label="Entry lambda expression", span="522-522", cluster="lambda expression"];
d471 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d373 [label="Exit lambda expression", span="522-522", cluster="lambda expression"];
d419 [label="Entry lambda expression", span="579-579", cluster="lambda expression"];
d475 [label="HangFire.SqlServer.SqlServerConnection", span=""];
d421 [label="Exit lambda expression", span="579-579", cluster="lambda expression"];
d422 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)"];
d8 [label="Exit lambda expression", span="18-18", cluster="lambda expression"];
d7 [label="new SqlServerConnection(null, new SqlServerStorageOptions())", span="18-18", cluster="lambda expression"];
d17 [label="Exit lambda expression", span="27-27", cluster="lambda expression"];
d16 [label="new SqlServerConnection(ConnectionUtils.CreateConnection(), null)", span="27-27", cluster="lambda expression"];
d9 [label="Entry HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)", span="35-35", cluster="HangFire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, HangFire.SqlServer.SqlServerStorageOptions)"];
d10 [label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()"];
d18 [label="Entry HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="HangFire.SqlServer.Tests.ConnectionUtils.CreateConnection()"];
d438 [label="var connection = new SqlServerConnection(sqlConnection, new SqlServerStorageOptions())", span="609-609", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)"];
d443 [label="var connection = new SqlServerConnection(\r\n                ConnectionUtils.CreateConnection(), new SqlServerStorageOptions())", span="617-618", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)"];
d437 [label="var sqlConnection = ConnectionUtils.CreateConnection()", span="608-608", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)"];
d439 [label="action(sqlConnection, connection)", span="611-611", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)"];
d442 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="615-615", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)"];
d444 [label="action(connection)", span="620-620", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)"];
d436 [label="Entry HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="606-606", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)"];
d440 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)", span="606-606", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnections(System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>)"];
d441 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)"];
d445 [label="Exit HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)", span="615-615", cluster="HangFire.SqlServer.Tests.ConnectionFacts.UseConnection(System.Action<HangFire.SqlServer.SqlServerConnection>)"];
d446 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)"];
m0_7 [label="Entry HangFire.PreserveCultureAttribute.PreserveCultureAttribute()", span="26-26", cluster="HangFire.PreserveCultureAttribute.PreserveCultureAttribute()", file="GlobalJobFilters.cs"];
m0_8 [label="Entry HangFire.Common.GlobalJobFilterCollection.Add(object)", span="56-56", cluster="HangFire.Common.GlobalJobFilterCollection.Add(object)", file="GlobalJobFilters.cs"];
m0_9 [label="Entry HangFire.RetryAttribute.RetryAttribute()", span="28-28", cluster="HangFire.RetryAttribute.RetryAttribute()", file="GlobalJobFilters.cs"];
m0_0 [label="Entry HangFire.GlobalJobFilters.GlobalJobFilters()", span="25-25", cluster="HangFire.GlobalJobFilters.GlobalJobFilters()", file="GlobalJobFilters.cs"];
m0_1 [label="Filters = new GlobalJobFilterCollection()", span="27-27", cluster="HangFire.GlobalJobFilters.GlobalJobFilters()", file="GlobalJobFilters.cs"];
m0_2 [label="Filters.Add(new PreserveCultureAttribute())", span="28-28", cluster="HangFire.GlobalJobFilters.GlobalJobFilters()", color=red, community=0, file="GlobalJobFilters.cs"];
m0_3 [label="Filters.Add(new RetryAttribute())", span="29-29", cluster="HangFire.GlobalJobFilters.GlobalJobFilters()", file="GlobalJobFilters.cs"];
m0_4 [label="Filters.Add(new StatisticsHistoryAttribute())", span="30-30", cluster="HangFire.GlobalJobFilters.GlobalJobFilters()", file="GlobalJobFilters.cs"];
m0_5 [label="Exit HangFire.GlobalJobFilters.GlobalJobFilters()", span="25-25", cluster="HangFire.GlobalJobFilters.GlobalJobFilters()", file="GlobalJobFilters.cs"];
m0_10 [label="Entry HangFire.StatisticsHistoryAttribute.StatisticsHistoryAttribute()", span="26-26", cluster="HangFire.StatisticsHistoryAttribute.StatisticsHistoryAttribute()", file="GlobalJobFilters.cs"];
m0_6 [label="Entry HangFire.Common.GlobalJobFilterCollection.GlobalJobFilterCollection()", span="37-37", cluster="HangFire.Common.GlobalJobFilterCollection.GlobalJobFilterCollection()", file="GlobalJobFilters.cs"];
m1_7 [label="Entry HangFire.Client.CreateContext.SetJobParameter(string, object)", span="96-96", cluster="HangFire.Client.CreateContext.SetJobParameter(string, object)", file="PreserveCultureAttribute.cs"];
m1_22 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="PreserveCultureAttribute.cs"];
m1_21 [label="Entry HangFire.Server.PerformContext.GetJobParameter<T>(string)", span="71-71", cluster="HangFire.Server.PerformContext.GetJobParameter<T>(string)", file="PreserveCultureAttribute.cs"];
m1_0 [label="Entry HangFire.PreserveCultureAttribute.OnCreating(HangFire.Client.CreatingContext)", span="28-28", cluster="HangFire.PreserveCultureAttribute.OnCreating(HangFire.Client.CreatingContext)", file="PreserveCultureAttribute.cs"];
m1_1 [label="filterContext == null", span="30-30", cluster="HangFire.PreserveCultureAttribute.OnCreating(HangFire.Client.CreatingContext)", file="PreserveCultureAttribute.cs"];
m1_3 [label="filterContext.SetJobParameter(\r\n                ''CurrentCulture'', Thread.CurrentThread.CurrentCulture.Name)", span="32-33", cluster="HangFire.PreserveCultureAttribute.OnCreating(HangFire.Client.CreatingContext)", file="PreserveCultureAttribute.cs"];
m1_4 [label="filterContext.SetJobParameter(\r\n                ''CurrentUICulture'', Thread.CurrentThread.CurrentUICulture.Name)", span="34-35", cluster="HangFire.PreserveCultureAttribute.OnCreating(HangFire.Client.CreatingContext)", file="PreserveCultureAttribute.cs"];
m1_2 [label="throw new ArgumentNullException(''filterContext'');", span="30-30", cluster="HangFire.PreserveCultureAttribute.OnCreating(HangFire.Client.CreatingContext)", file="PreserveCultureAttribute.cs"];
m1_5 [label="Exit HangFire.PreserveCultureAttribute.OnCreating(HangFire.Client.CreatingContext)", span="28-28", cluster="HangFire.PreserveCultureAttribute.OnCreating(HangFire.Client.CreatingContext)", file="PreserveCultureAttribute.cs"];
m1_33 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="PreserveCultureAttribute.cs"];
m1_23 [label="Entry System.Globalization.CultureInfo.GetCultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.GetCultureInfo(string)", file="PreserveCultureAttribute.cs"];
m1_8 [label="Entry HangFire.PreserveCultureAttribute.OnCreated(HangFire.Client.CreatedContext)", span="38-38", cluster="HangFire.PreserveCultureAttribute.OnCreated(HangFire.Client.CreatedContext)", file="PreserveCultureAttribute.cs"];
m1_9 [label="Exit HangFire.PreserveCultureAttribute.OnCreated(HangFire.Client.CreatedContext)", span="38-38", cluster="HangFire.PreserveCultureAttribute.OnCreated(HangFire.Client.CreatedContext)", file="PreserveCultureAttribute.cs"];
m1_10 [label="Entry HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", span="42-42", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttribute.cs"];
m1_11 [label="var cultureName = filterContext.GetJobParameter<string>(''CurrentCulture'')", span="44-44", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttribute.cs"];
m1_12 [label="var uiCultureName = filterContext.GetJobParameter<string>(''CurrentUICulture'')", span="45-45", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttribute.cs"];
m1_15 [label="filterContext.Items[''PreviousCulture''] = thread.CurrentCulture", span="51-51", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttribute.cs"];
m1_18 [label="filterContext.Items[''PreviousUICulture''] = thread.CurrentUICulture", span="57-57", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttribute.cs"];
m1_14 [label="!String.IsNullOrEmpty(cultureName)", span="49-49", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttribute.cs"];
m1_16 [label="thread.CurrentCulture = CultureInfo.GetCultureInfo(cultureName)", span="52-52", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttribute.cs"];
m1_13 [label="var thread = Thread.CurrentThread", span="47-47", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttribute.cs"];
m1_17 [label="!String.IsNullOrEmpty(uiCultureName)", span="55-55", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttribute.cs"];
m1_19 [label="thread.CurrentUICulture = CultureInfo.GetCultureInfo(uiCultureName)", span="58-58", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttribute.cs"];
m1_20 [label="Exit HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", span="42-42", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttribute.cs"];
m1_24 [label="Entry HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", span="62-62", cluster="HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", file="PreserveCultureAttribute.cs"];
m1_25 [label="filterContext == null", span="64-64", cluster="HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", file="PreserveCultureAttribute.cs"];
m1_28 [label="filterContext.Items.ContainsKey(''PreviousCulture'')", span="67-67", cluster="HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", file="PreserveCultureAttribute.cs"];
m1_29 [label="thread.CurrentCulture = (CultureInfo) filterContext.Items[''PreviousCulture'']", span="69-69", cluster="HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", file="PreserveCultureAttribute.cs"];
m1_30 [label="filterContext.Items.ContainsKey(''PreviousUICulture'')", span="71-71", cluster="HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", file="PreserveCultureAttribute.cs"];
m1_31 [label="thread.CurrentUICulture = (CultureInfo) filterContext.Items[''PreviousUICulture'']", span="73-73", cluster="HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", file="PreserveCultureAttribute.cs"];
m1_26 [label="throw new ArgumentNullException(''filterContext'');", span="64-64", cluster="HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", file="PreserveCultureAttribute.cs"];
m1_27 [label="var thread = Thread.CurrentThread", span="66-66", cluster="HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", file="PreserveCultureAttribute.cs"];
m1_32 [label="Exit HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", span="62-62", cluster="HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", file="PreserveCultureAttribute.cs"];
m2_139 [label="Entry HangFire.PreserveCultureAttribute.PreserveCultureAttribute()", span="26-26", cluster="HangFire.PreserveCultureAttribute.PreserveCultureAttribute()", file="PreserveCultureAttributeFacts.cs"];
m2_0 [label="Entry HangFire.Core.Tests.PreserveCultureAttributeFacts.PreserveCultureAttributeFacts()", span="22-22", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.PreserveCultureAttributeFacts()", file="PreserveCultureAttributeFacts.cs"];
m2_1 [label="_connection = new Mock<IStorageConnection>()", span="24-24", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.PreserveCultureAttributeFacts()", file="PreserveCultureAttributeFacts.cs"];
m2_2 [label="var job = Job.FromExpression(() => Sample())", span="25-25", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.PreserveCultureAttributeFacts()", file="PreserveCultureAttributeFacts.cs"];
m2_3 [label="var state = new Mock<IState>()", span="26-26", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.PreserveCultureAttributeFacts()", file="PreserveCultureAttributeFacts.cs"];
m2_4 [label="var stateMachineFactory = new Mock<IStateMachineFactory>()", span="27-27", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.PreserveCultureAttributeFacts()", file="PreserveCultureAttributeFacts.cs"];
m2_6 [label="_creatingContext = new CreatingContext(createContext)", span="31-31", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.PreserveCultureAttributeFacts()", file="PreserveCultureAttributeFacts.cs"];
m2_5 [label="var createContext = new CreateContext(\r\n                _connection.Object, stateMachineFactory.Object, job, state.Object)", span="29-30", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.PreserveCultureAttributeFacts()", file="PreserveCultureAttributeFacts.cs"];
m2_7 [label="_createdContext = new CreatedContext(createContext, false, null)", span="32-32", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.PreserveCultureAttributeFacts()", file="PreserveCultureAttributeFacts.cs"];
m2_28 [label="Entry HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_ThrowsAnException_WhenContextIsNull()", span="42-42", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_ThrowsAnException_WhenContextIsNull()", file="PreserveCultureAttributeFacts.cs"];
m2_29 [label="var filter = CreateFilter()", span="44-44", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_ThrowsAnException_WhenContextIsNull()", file="PreserveCultureAttributeFacts.cs"];
m2_30 [label="Assert.Throws<ArgumentNullException>(\r\n                () => filter.OnCreating(null))", span="46-47", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_ThrowsAnException_WhenContextIsNull()", file="PreserveCultureAttributeFacts.cs"];
m2_31 [label="Exit HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_ThrowsAnException_WhenContextIsNull()", span="42-42", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_ThrowsAnException_WhenContextIsNull()", file="PreserveCultureAttributeFacts.cs"];
m2_15 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="PreserveCultureAttributeFacts.cs"];
m2_16 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="PreserveCultureAttributeFacts.cs"];
m2_27 [label="Entry HangFire.Core.Tests.PreserveCultureAttributeFacts.Sample()", span="145-145", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.Sample()", file="PreserveCultureAttributeFacts.cs"];
m2_136 [label="Exit HangFire.Core.Tests.PreserveCultureAttributeFacts.Sample()", span="145-145", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.Sample()", file="PreserveCultureAttributeFacts.cs"];
m2_26 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_13 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="PreserveCultureAttributeFacts.cs"];
m2_20 [label="Exit lambda expression", span="14-14", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_70 [label="Entry HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", span="42-42", cluster="HangFire.PreserveCultureAttribute.OnPerforming(HangFire.Server.PerformingContext)", file="PreserveCultureAttributeFacts.cs"];
m2_53 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="PreserveCultureAttributeFacts.cs"];
m2_49 [label="Entry HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreated_DoesNotThrowAnException()", span="64-64", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreated_DoesNotThrowAnException()", file="PreserveCultureAttributeFacts.cs"];
m2_50 [label="var filter = CreateFilter()", span="66-66", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreated_DoesNotThrowAnException()", file="PreserveCultureAttributeFacts.cs"];
m2_51 [label="Assert.DoesNotThrow(() => filter.OnCreated(null))", span="68-68", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreated_DoesNotThrowAnException()", file="PreserveCultureAttributeFacts.cs"];
m2_52 [label="Exit HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreated_DoesNotThrowAnException()", span="64-64", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreated_DoesNotThrowAnException()", file="PreserveCultureAttributeFacts.cs"];
m2_102 [label="Entry HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", span="112-112", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", file="PreserveCultureAttributeFacts.cs"];
m2_107 [label="var filter = CreateFilter()", span="120-120", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", file="PreserveCultureAttributeFacts.cs"];
m2_106 [label="Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo(''en-US'')", span="118-118", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", file="PreserveCultureAttributeFacts.cs"];
m2_108 [label="filter.OnPerforming(_performingContext)", span="121-121", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", file="PreserveCultureAttributeFacts.cs"];
m2_109 [label="filter.OnPerformed(_performedContext)", span="122-122", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", file="PreserveCultureAttributeFacts.cs"];
m2_103 [label="_connection.Setup(x => x.GetJobParameter(JobId, ''CurrentCulture'')).Returns(''\''ru-RU\'''')", span="114-114", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", file="PreserveCultureAttributeFacts.cs"];
m2_104 [label="_connection.Setup(x => x.GetJobParameter(JobId, ''CurrentUICulture'')).Returns(''\''ru-RU\'''')", span="115-115", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", file="PreserveCultureAttributeFacts.cs"];
m2_105 [label="Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo(''en-US'')", span="117-117", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", file="PreserveCultureAttributeFacts.cs"];
m2_110 [label="Assert.Equal(''en-US'', Thread.CurrentThread.CurrentCulture.Name)", span="124-124", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", file="PreserveCultureAttributeFacts.cs"];
m2_111 [label="Assert.Equal(''en-US'', Thread.CurrentThread.CurrentUICulture.Name)", span="125-125", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", file="PreserveCultureAttributeFacts.cs"];
m2_112 [label="Exit HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", span="112-112", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture()", file="PreserveCultureAttributeFacts.cs"];
m2_33 [label="Entry Unk.>", span="", cluster="Unk.>", file="PreserveCultureAttributeFacts.cs"];
m2_21 [label="Entry PerformContext.cstr", span="", cluster="PerformContext.cstr", file="PreserveCultureAttributeFacts.cs"];
m2_19 [label="o.GetAllItemsFromSet(It.IsAny<string>())", span="14-14", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_18 [label="Entry lambda expression", span="14-14", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_37 [label="Entry HangFire.PreserveCultureAttribute.OnCreating(HangFire.Client.CreatingContext)", span="28-28", cluster="HangFire.PreserveCultureAttribute.OnCreating(HangFire.Client.CreatingContext)", file="PreserveCultureAttributeFacts.cs"];
m2_58 [label="Entry HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", span="72-72", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_63 [label="var filter = CreateFilter()", span="80-80", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_62 [label="Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo(''en-US'')", span="78-78", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_64 [label="filter.OnPerforming(_performingContext)", span="81-81", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_59 [label="_connection.Setup(x => x.GetJobParameter(JobId, ''CurrentCulture'')).Returns(''\''ru-RU\'''')", span="74-74", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_60 [label="_connection.Setup(x => x.GetJobParameter(JobId, ''CurrentUICulture'')).Returns(''\''ru-RU\'''')", span="75-75", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_61 [label="Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo(''en-US'')", span="77-77", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_65 [label="Assert.Equal(''ru-RU'', Thread.CurrentThread.CurrentCulture.Name)", span="83-83", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_66 [label="Assert.Equal(''ru-RU'', Thread.CurrentThread.CurrentUICulture.Name)", span="84-84", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_67 [label="Exit HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", span="72-72", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_SetsThreadCultures_ToTheSpecifiedOnesInJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_57 [label="Entry HangFire.PreserveCultureAttribute.OnCreated(HangFire.Client.CreatedContext)", span="38-38", cluster="HangFire.PreserveCultureAttribute.OnCreated(HangFire.Client.CreatedContext)", file="PreserveCultureAttributeFacts.cs"];
m2_101 [label="Entry HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", span="62-62", cluster="HangFire.PreserveCultureAttribute.OnPerformed(HangFire.Server.PerformedContext)", file="PreserveCultureAttributeFacts.cs"];
m2_9 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="PreserveCultureAttributeFacts.cs"];
m2_10 [label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0", cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="PreserveCultureAttributeFacts.cs"];
m2_11 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="PreserveCultureAttributeFacts.cs"];
m2_8 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="PreserveCultureAttributeFacts.cs"];
m2_12 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="PreserveCultureAttributeFacts.cs"];
m2_38 [label="Entry HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_CapturesCultures_AndSetsThemAsJobParameters()", span="51-51", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_CapturesCultures_AndSetsThemAsJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_41 [label="var filter = CreateFilter()", span="56-56", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_CapturesCultures_AndSetsThemAsJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_40 [label="Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo(''ru-RU'')", span="54-54", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_CapturesCultures_AndSetsThemAsJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_42 [label="filter.OnCreating(_creatingContext)", span="57-57", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_CapturesCultures_AndSetsThemAsJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_43 [label="Assert.Equal(''ru-RU'', _creatingContext.GetJobParameter<string>(''CurrentCulture''))", span="59-59", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_CapturesCultures_AndSetsThemAsJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_44 [label="Assert.Equal(''ru-RU'', _creatingContext.GetJobParameter<string>(''CurrentUICulture''))", span="60-60", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_CapturesCultures_AndSetsThemAsJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_39 [label="Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo(''ru-RU'')", span="53-53", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_CapturesCultures_AndSetsThemAsJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_45 [label="Exit HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_CapturesCultures_AndSetsThemAsJobParameters()", span="51-51", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnCreating_CapturesCultures_AndSetsThemAsJobParameters()", file="PreserveCultureAttributeFacts.cs"];
m2_23 [label="Entry lambda expression", span="15-15", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_74 [label="Entry Unk.GetJobParameter", span="", cluster="Unk.GetJobParameter", file="PreserveCultureAttributeFacts.cs"];
m2_32 [label="Entry HangFire.Core.Tests.PreserveCultureAttributeFacts.CreateFilter()", span="147-147", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.CreateFilter()", file="PreserveCultureAttributeFacts.cs"];
m2_137 [label="return new PreserveCultureAttribute();", span="149-149", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.CreateFilter()", color=green, community=0, file="PreserveCultureAttributeFacts.cs"];
m2_138 [label="Exit HangFire.Core.Tests.PreserveCultureAttributeFacts.CreateFilter()", span="147-147", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.CreateFilter()", file="PreserveCultureAttributeFacts.cs"];
m2_68 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="PreserveCultureAttributeFacts.cs"];
m2_17 [label="Entry CreateContext.cstr", span="", cluster="CreateContext.cstr", file="PreserveCultureAttributeFacts.cs"];
m2_78 [label="Entry HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", span="88-88", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", file="PreserveCultureAttributeFacts.cs"];
m2_83 [label="var filter = CreateFilter()", span="96-96", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", file="PreserveCultureAttributeFacts.cs"];
m2_82 [label="Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo(''en-US'')", span="94-94", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", file="PreserveCultureAttributeFacts.cs"];
m2_84 [label="filter.OnPerforming(_performingContext)", span="97-97", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", file="PreserveCultureAttributeFacts.cs"];
m2_79 [label="_connection.Setup(x => x.GetJobParameter(JobId, ''CurrentCulture'')).Returns((string)null)", span="90-90", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", file="PreserveCultureAttributeFacts.cs"];
m2_80 [label="_connection.Setup(x => x.GetJobParameter(JobId, ''CurrentUICulture'')).Returns((string)null)", span="91-91", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", file="PreserveCultureAttributeFacts.cs"];
m2_81 [label="Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo(''en-US'')", span="93-93", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", file="PreserveCultureAttributeFacts.cs"];
m2_85 [label="Assert.Equal(''en-US'', Thread.CurrentThread.CurrentCulture.Name)", span="99-99", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", file="PreserveCultureAttributeFacts.cs"];
m2_86 [label="Assert.Equal(''en-US'', Thread.CurrentThread.CurrentUICulture.Name)", span="100-100", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", file="PreserveCultureAttributeFacts.cs"];
m2_87 [label="Exit HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", span="88-88", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerforming_DoesNotDoAnything_WhenCultureJobParameterIsNotSet()", file="PreserveCultureAttributeFacts.cs"];
m2_94 [label="Entry HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_ThrowsAnException_WhenContextIsNull()", span="104-104", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_ThrowsAnException_WhenContextIsNull()", file="PreserveCultureAttributeFacts.cs"];
m2_95 [label="var filter = CreateFilter()", span="106-106", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_ThrowsAnException_WhenContextIsNull()", file="PreserveCultureAttributeFacts.cs"];
m2_96 [label="Assert.Throws<ArgumentNullException>(() => filter.OnPerformed(null))", span="108-108", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_ThrowsAnException_WhenContextIsNull()", file="PreserveCultureAttributeFacts.cs"];
m2_97 [label="Exit HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_ThrowsAnException_WhenContextIsNull()", span="104-104", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_ThrowsAnException_WhenContextIsNull()", file="PreserveCultureAttributeFacts.cs"];
m2_22 [label="Entry Unk.GetAllItemsFromSet", span="", cluster="Unk.GetAllItemsFromSet", file="PreserveCultureAttributeFacts.cs"];
m2_24 [label="o.GetAllEntriesFromHash(''recurring-job:1'')", span="15-15", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_25 [label="Sample()", span="25-25", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_35 [label="filter.OnCreating(null)", span="47-47", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_55 [label="filter.OnCreated(null)", span="68-68", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_99 [label="filter.OnPerformed(null)", span="108-108", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_34 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_36 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_54 [label="Entry lambda expression", span="68-68", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_56 [label="Exit lambda expression", span="68-68", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_98 [label="Entry lambda expression", span="108-108", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_100 [label="Exit lambda expression", span="108-108", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_71 [label="Entry lambda expression", span="74-74", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_75 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_88 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_91 [label="Entry lambda expression", span="91-91", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_113 [label="Entry lambda expression", span="114-114", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_116 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_130 [label="Entry lambda expression", span="131-131", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_133 [label="Entry lambda expression", span="132-132", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_73 [label="Exit lambda expression", span="74-74", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_72 [label="x.GetJobParameter(JobId, ''CurrentCulture'')", span="74-74", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_77 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_76 [label="x.GetJobParameter(JobId, ''CurrentUICulture'')", span="75-75", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_90 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_89 [label="x.GetJobParameter(JobId, ''CurrentCulture'')", span="90-90", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_93 [label="Exit lambda expression", span="91-91", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_92 [label="x.GetJobParameter(JobId, ''CurrentUICulture'')", span="91-91", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_115 [label="Exit lambda expression", span="114-114", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_114 [label="x.GetJobParameter(JobId, ''CurrentCulture'')", span="114-114", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_118 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_117 [label="x.GetJobParameter(JobId, ''CurrentUICulture'')", span="115-115", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_132 [label="Exit lambda expression", span="131-131", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_131 [label="x.GetJobParameter(JobId, ''CurrentCulture'')", span="131-131", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_135 [label="Exit lambda expression", span="132-132", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_134 [label="x.GetJobParameter(JobId, ''CurrentUICulture'')", span="132-132", cluster="lambda expression", file="PreserveCultureAttributeFacts.cs"];
m2_47 [label="Entry HangFire.Client.CreateContext.GetJobParameter<T>(string)", span="129-129", cluster="HangFire.Client.CreateContext.GetJobParameter<T>(string)", file="PreserveCultureAttributeFacts.cs"];
m2_14 [label="Entry Unk.GetRecurringJobs", span="", cluster="Unk.GetRecurringJobs", file="PreserveCultureAttributeFacts.cs"];
m2_69 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="PreserveCultureAttributeFacts.cs"];
m2_46 [label="Entry System.Globalization.CultureInfo.GetCultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.GetCultureInfo(string)", file="PreserveCultureAttributeFacts.cs"];
m2_119 [label="Entry HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", span="129-129", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", file="PreserveCultureAttributeFacts.cs"];
m2_124 [label="var filter = CreateFilter()", span="137-137", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", file="PreserveCultureAttributeFacts.cs"];
m2_123 [label="Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo(''en-US'')", span="135-135", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", file="PreserveCultureAttributeFacts.cs"];
m2_125 [label="filter.OnPerforming(_performingContext)", span="138-138", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", file="PreserveCultureAttributeFacts.cs"];
m2_126 [label="filter.OnPerformed(_performedContext)", span="139-139", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", file="PreserveCultureAttributeFacts.cs"];
m2_120 [label="_connection.Setup(x => x.GetJobParameter(JobId, ''CurrentCulture'')).Returns((string)null)", span="131-131", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", file="PreserveCultureAttributeFacts.cs"];
m2_121 [label="_connection.Setup(x => x.GetJobParameter(JobId, ''CurrentUICulture'')).Returns((string)null)", span="132-132", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", file="PreserveCultureAttributeFacts.cs"];
m2_122 [label="Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo(''en-US'')", span="134-134", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", file="PreserveCultureAttributeFacts.cs"];
m2_127 [label="Assert.Equal(''en-US'', Thread.CurrentThread.CurrentCulture.Name)", span="141-141", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", file="PreserveCultureAttributeFacts.cs"];
m2_128 [label="Assert.Equal(''en-US'', Thread.CurrentThread.CurrentUICulture.Name)", span="142-142", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", file="PreserveCultureAttributeFacts.cs"];
m2_129 [label="Exit HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", span="129-129", cluster="HangFire.Core.Tests.PreserveCultureAttributeFacts.OnPerformed_RestoresPreviousCurrentCulture_OnlyIfItWasChanged()", file="PreserveCultureAttributeFacts.cs"];
m2_140 [label="HangFire.Core.Tests.PreserveCultureAttributeFacts", span="", file="PreserveCultureAttributeFacts.cs"];
m2_141 [label=filter, span="", file="PreserveCultureAttributeFacts.cs"];
m2_142 [label=filter, span="", file="PreserveCultureAttributeFacts.cs"];
m2_143 [label=filter, span="", file="PreserveCultureAttributeFacts.cs"];
m4_4 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="SqlServerConnection.cs"];
m4_0 [label="Entry HangFire.States.SucceededState.GetData(HangFire.Common.JobMethod)", span="38-38", cluster="HangFire.States.SucceededState.GetData(HangFire.Common.JobMethod)", file="SqlServerConnection.cs"];
m4_1 [label="return new Dictionary<string, string>\r\n                {\r\n                    { ''SucceededAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) }\r\n                };", span="40-43", cluster="HangFire.States.SucceededState.GetData(HangFire.Common.JobMethod)", file="SqlServerConnection.cs"];
m4_2 [label="Exit HangFire.States.SucceededState.GetData(HangFire.Common.JobMethod)", span="38-38", cluster="HangFire.States.SucceededState.GetData(HangFire.Common.JobMethod)", file="SqlServerConnection.cs"];
m4_9 [label="Entry HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlServerConnection.cs"];
m4_10 [label="transaction.DecrementCounter(''stats:succeeded'')", span="57-57", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlServerConnection.cs"];
m4_11 [label="Exit HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", span="54-54", cluster="HangFire.States.SucceededState.Handler.Unapply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlServerConnection.cs"];
m4_8 [label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="19-19", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="SqlServerConnection.cs"];
m4_12 [label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="21-21", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="SqlServerConnection.cs"];
m4_5 [label="Entry HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", span="48-48", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlServerConnection.cs"];
m4_6 [label="transaction.IncrementCounter(''stats:succeeded'')", span="51-51", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlServerConnection.cs"];
m4_7 [label="Exit HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", span="48-48", cluster="HangFire.States.SucceededState.Handler.Apply(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", file="SqlServerConnection.cs"];
m5_0 [label="Entry HangFire.Filters.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", span="8-8", cluster="HangFire.Filters.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", file="SqlServerMonitoringApi.cs"];
m5_1 [label="Exception = exception", span="11-11", cluster="HangFire.Filters.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", file="SqlServerMonitoringApi.cs"];
m5_2 [label="Exit HangFire.Filters.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", span="8-8", cluster="HangFire.Filters.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", file="SqlServerMonitoringApi.cs"];
m5_3 [label="HangFire.Filters.ClientExceptionContext", span="", file="SqlServerMonitoringApi.cs"];
m6_0 [label="Entry Hangfire.States.IStateChangeProcess.ChangeState(Hangfire.States.IStateMachine, Hangfire.States.StateContext, Hangfire.States.IState, string)", span="20-20", cluster="Hangfire.States.IStateChangeProcess.ChangeState(Hangfire.States.IStateMachine, Hangfire.States.StateContext, Hangfire.States.IState, string)", file="StorageFacts.cs"];
m6_1 [label="Exit Hangfire.States.IStateChangeProcess.ChangeState(Hangfire.States.IStateMachine, Hangfire.States.StateContext, Hangfire.States.IState, string)", span="20-20", cluster="Hangfire.States.IStateChangeProcess.ChangeState(Hangfire.States.IStateMachine, Hangfire.States.StateContext, Hangfire.States.IState, string)", file="StorageFacts.cs"];
n66 -> n7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n8  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n17  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n19  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n32  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n36  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n40  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n47  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n66 -> n53  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorage"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n2 -> n5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
n2 -> n7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
n2 -> n8  [key=1, style=dashed, color=darkseagreen4, label=string];
n2 -> n9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerStorageOptions"];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=0, style=solid];
n7 -> n8  [key=0, style=solid];
n8 -> n9  [key=0, style=solid];
n9 -> n10  [key=0, style=solid];
n9 -> n11  [key=0, style=solid];
n4 -> n11  [key=0, style=solid];
n4 -> n12  [key=2, style=dotted];
n6 -> n11  [key=0, style=solid];
n6 -> n12  [key=2, style=dotted];
n10 -> n11  [key=0, style=solid];
n10 -> n13  [key=2, style=dotted];
n11 -> n2  [key=0, style=bold, color=blue];
n13 -> n14  [key=0, style=solid];
n14 -> n15  [key=0, style=solid];
n14 -> n23  [key=2, style=dotted];
n15 -> n16  [key=0, style=solid];
n15 -> n17  [key=0, style=solid];
n15 -> n24  [key=2, style=dotted];
n16 -> n22  [key=0, style=solid];
n16 -> n25  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n26  [key=2, style=dotted];
n17 -> n27  [key=2, style=dotted];
n24 -> n53  [key=0, style=solid];
n18 -> n19  [key=0, style=solid];
n18 -> n28  [key=2, style=dotted];
n18 -> n18  [key=1, style=dashed, color=darkseagreen4, label=script];
n18 -> n20  [key=1, style=dashed, color=darkseagreen4, label=script];
n27 -> n59  [key=0, style=solid];
n19 -> n20  [key=0, style=solid];
n19 -> n29  [key=2, style=dotted];
n20 -> n21  [key=0, style=solid];
n20 -> n30  [key=2, style=dotted];
n29 -> n47  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=2, style=dotted];
n22 -> n13  [key=0, style=bold, color=blue];
n31 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n32 -> n34  [key=2, style=dotted];
n32 -> n29  [key=2, style=dotted];
n33 -> n31  [key=0, style=bold, color=blue];
n35 -> n36  [key=0, style=solid];
n36 -> n37  [key=0, style=solid];
n36 -> n38  [key=2, style=dotted];
n36 -> n29  [key=2, style=dotted];
n37 -> n35  [key=0, style=bold, color=blue];
n39 -> n40  [key=0, style=solid];
n39 -> n41  [key=0, style=bold, color=crimson];
n39 -> n42  [key=0, style=bold, color=crimson];
n40 -> n41  [key=0, style=solid];
n40 -> n44  [key=2, style=dotted];
n41 -> n42  [key=0, style=solid];
n41 -> n45  [key=2, style=dotted];
n42 -> n43  [key=0, style=solid];
n42 -> n46  [key=2, style=dotted];
n43 -> n39  [key=0, style=bold, color=blue];
n47 -> n48  [key=0, style=solid];
n47 -> n51  [key=2, style=dotted];
n47 -> n49  [key=1, style=dashed, color=darkseagreen4, label=connection];
n48 -> n49  [key=0, style=solid];
n48 -> n52  [key=2, style=dotted];
n49 -> n50  [key=0, style=solid];
n50 -> n29  [key=0, style=bold, color=blue];
n53 -> n54  [key=0, style=solid];
n53 -> n29  [key=2, style=dotted];
n54 -> n55  [key=0, style=solid];
n54 -> n57  [key=2, style=dotted];
n54 -> n58  [key=2, style=dotted];
n55 -> n56  [key=0, style=solid];
n56 -> n24  [key=0, style=bold, color=blue];
n59 -> n60  [key=0, style=solid];
n59 -> n63  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n60 -> n64  [key=2, style=dotted];
n61 -> n62  [key=0, style=solid];
n61 -> n65  [key=2, style=dotted];
n62 -> n27  [key=0, style=bold, color=blue];
d348 -> d349  [key=0, style=solid, color=green];
d348 -> d67  [key=2, style=dotted, color=green];
d348 -> d350  [key=1, style=dashed, color=green, label="lambda expression"];
d448 -> d348  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d398  [key=1, style=dashed, color=green, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d20  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d38  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d50  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d65  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d117  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d126  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d146  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d155  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d166  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d177  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d188  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d200  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d210  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d221  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d231  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d239  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d248  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d259  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d270  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d281  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d290  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d301  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d310  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d318  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d326  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d338  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d366  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d377  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d387  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d414  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d448 -> d426  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.Tests.ConnectionFacts"];
d347 -> d348  [key=0, style=solid, color=green];
d349 -> d347  [key=0, style=bold, color=blue];
d350 -> d351  [key=0, style=solid];
d350 -> d352  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d350 -> d353  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d350 -> d358  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d350 -> d359  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d356 -> d357  [key=0, style=solid, color=green];
d356 -> d28  [key=2, style=dotted, color=green];
d353 -> d356  [key=1, style=dashed, color=green, label=server];
d353 -> d354  [key=0, style=solid];
d353 -> d89  [key=2, style=dotted];
d353 -> d90  [key=2, style=dotted];
d353 -> d355  [key=1, style=dashed, color=darkseagreen4, label=server];
d355 -> d356  [key=0, style=solid, color=green];
d355 -> d363  [key=2, style=dotted];
d355 -> d95  [key=2, style=dotted];
d357 -> d358  [key=0, style=solid];
d357 -> d335  [key=2, style=dotted];
d376 -> d376  [key=3, color=green, style=bold, label="Local variable string arrangeSql"];
d376 -> d377  [key=0, style=solid, color=green];
d376 -> d380  [key=1, style=dashed, color=green, label=arrangeSql];
d375 -> d376  [key=0, style=solid, color=green];
d377 -> d67  [key=2, style=dotted];
d377 -> d378  [key=0, style=solid];
d377 -> d379  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d380 -> d381  [key=0, style=solid];
d380 -> d278  [key=2, style=dotted];
d397 -> d397  [key=3, color=green, style=bold, label="Local variable string arrangeSql"];
d397 -> d398  [key=0, style=solid, color=green];
d397 -> d401  [key=1, style=dashed, color=green, label=arrangeSql];
d396 -> d397  [key=0, style=solid, color=green];
d398 -> d399  [key=0, style=solid, color=green];
d398 -> d67  [key=2, style=dotted, color=green];
d398 -> d400  [key=1, style=dashed, color=green, label="lambda expression"];
d401 -> d402  [key=0, style=solid];
d401 -> d278  [key=2, style=dotted];
d399 -> d396  [key=0, style=bold, color=blue];
d400 -> d403  [key=1, style=dashed, color=green, label=SqlConnection];
d400 -> d401  [key=0, style=solid];
d400 -> d402  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d403 -> d404  [key=0, style=solid, color=green];
d403 -> d89  [key=2, style=dotted, color=green];
d403 -> d96  [key=2, style=dotted, color=green];
d403 -> d407  [key=1, style=dashed, color=green, label="lambda expression"];
d403 -> d410  [key=1, style=dashed, color=green, label="lambda expression"];
d403 -> d405  [key=1, style=dashed, color=green, label=servers];
d402 -> d403  [key=0, style=solid, color=green];
d402 -> d395  [key=2, style=dotted];
d404 -> d405  [key=0, style=solid, color=green];
d404 -> d385  [key=2, style=dotted, color=green];
d407 -> d408  [key=0, style=solid, color=green];
d410 -> d411  [key=0, style=solid, color=green];
d405 -> d406  [key=0, style=solid, color=green];
d405 -> d5  [key=2, style=dotted, color=green];
d406 -> d400  [key=0, style=bold, color=blue];
d408 -> d409  [key=0, style=solid, color=green];
d409 -> d407  [key=0, style=bold, color=blue];
d411 -> d412  [key=0, style=solid, color=green];
d412 -> d410  [key=0, style=bold, color=blue];
d20 -> d21  [key=0, style=solid];
d20 -> d22  [key=2, style=dotted];
d20 -> d23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d30 -> d31  [key=0, style=solid];
d30 -> d22  [key=2, style=dotted];
d30 -> d32  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d38 -> d39  [key=0, style=solid];
d38 -> d22  [key=2, style=dotted];
d38 -> d40  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d50 -> d51  [key=0, style=solid];
d50 -> d22  [key=2, style=dotted];
d50 -> d52  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d65 -> d67  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d65 -> d68  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d107 -> d108  [key=0, style=solid];
d107 -> d22  [key=2, style=dotted];
d107 -> d109  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d117 -> d118  [key=0, style=solid];
d117 -> d22  [key=2, style=dotted];
d117 -> d119  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d126 -> d67  [key=2, style=dotted];
d126 -> d127  [key=0, style=solid];
d126 -> d128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d146 -> d67  [key=2, style=dotted];
d146 -> d147  [key=0, style=solid];
d146 -> d148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d155 -> d156  [key=0, style=solid];
d155 -> d22  [key=2, style=dotted];
d155 -> d157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d166 -> d167  [key=0, style=solid];
d166 -> d22  [key=2, style=dotted];
d166 -> d168  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d177 -> d67  [key=2, style=dotted];
d177 -> d178  [key=0, style=solid];
d177 -> d179  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d188 -> d67  [key=2, style=dotted];
d188 -> d189  [key=0, style=solid];
d188 -> d190  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d200 -> d67  [key=2, style=dotted];
d200 -> d201  [key=0, style=solid];
d200 -> d202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d210 -> d211  [key=0, style=solid];
d210 -> d22  [key=2, style=dotted];
d210 -> d212  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d221 -> d222  [key=0, style=solid];
d221 -> d22  [key=2, style=dotted];
d221 -> d223  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d231 -> d232  [key=0, style=solid];
d231 -> d22  [key=2, style=dotted];
d231 -> d233  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d239 -> d67  [key=2, style=dotted];
d239 -> d240  [key=0, style=solid];
d239 -> d241  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d248 -> d249  [key=0, style=solid];
d248 -> d22  [key=2, style=dotted];
d248 -> d250  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d259 -> d260  [key=0, style=solid];
d259 -> d22  [key=2, style=dotted];
d259 -> d261  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d270 -> d67  [key=2, style=dotted];
d270 -> d271  [key=0, style=solid];
d270 -> d272  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d281 -> d67  [key=2, style=dotted];
d281 -> d282  [key=0, style=solid];
d281 -> d283  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d290 -> d291  [key=0, style=solid];
d290 -> d22  [key=2, style=dotted];
d290 -> d292  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d301 -> d302  [key=0, style=solid];
d301 -> d22  [key=2, style=dotted];
d301 -> d303  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d310 -> d311  [key=0, style=solid];
d310 -> d22  [key=2, style=dotted];
d310 -> d312  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d318 -> d67  [key=2, style=dotted];
d318 -> d319  [key=0, style=solid];
d318 -> d320  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d326 -> d327  [key=0, style=solid];
d326 -> d22  [key=2, style=dotted];
d326 -> d328  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d338 -> d339  [key=0, style=solid];
d338 -> d22  [key=2, style=dotted];
d338 -> d340  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d366 -> d367  [key=0, style=solid];
d366 -> d22  [key=2, style=dotted];
d366 -> d368  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d387 -> d388  [key=0, style=solid];
d387 -> d22  [key=2, style=dotted];
d387 -> d389  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d414 -> d415  [key=0, style=solid];
d414 -> d22  [key=2, style=dotted];
d414 -> d416  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d426 -> d67  [key=2, style=dotted];
d426 -> d427  [key=0, style=solid];
d426 -> d428  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d362 -> d350  [key=0, style=bold, color=blue];
d351 -> d352  [key=0, style=solid];
d351 -> d335  [key=2, style=dotted];
d352 -> d353  [key=0, style=solid];
d352 -> d336  [key=2, style=dotted];
d358 -> d359  [key=0, style=solid];
d358 -> d336  [key=2, style=dotted];
d359 -> d89  [key=2, style=dotted];
d359 -> d360  [key=0, style=solid];
d359 -> d90  [key=2, style=dotted];
d359 -> d361  [key=1, style=dashed, color=darkseagreen4, label=sameServer];
d354 -> d355  [key=0, style=solid];
d354 -> d5  [key=2, style=dotted];
d25 -> d28  [key=2, style=dotted];
d25 -> d26  [key=0, style=solid];
d34 -> d28  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d70 -> d28  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d132 -> d28  [key=2, style=dotted];
d132 -> d133  [key=0, style=solid];
d133 -> d28  [key=2, style=dotted];
d133 -> d134  [key=0, style=solid];
d151 -> d28  [key=2, style=dotted];
d151 -> d152  [key=0, style=solid];
d378 -> d375  [key=0, style=bold, color=blue];
d379 -> d380  [key=0, style=solid];
d379 -> d381  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d379 -> d382  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d472 -> d380  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d381 -> d382  [key=0, style=solid];
d381 -> d374  [key=2, style=dotted];
d474 -> d401  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d72 -> d89  [key=2, style=dotted];
d72 -> d90  [key=2, style=dotted];
d72 -> d73  [key=0, style=solid];
d72 -> d74  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
d72 -> d75  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
d72 -> d76  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
d72 -> d77  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
d72 -> d82  [key=1, style=dashed, color=darkseagreen4, label=sqlJob];
d83 -> d89  [key=2, style=dotted];
d83 -> d96  [key=2, style=dotted];
d83 -> d84  [key=0, style=solid];
d83 -> d100  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d83 -> d103  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d83 -> d85  [key=1, style=dashed, color=darkseagreen4, label=parameters];
d130 -> d89  [key=2, style=dotted];
d130 -> d90  [key=2, style=dotted];
d130 -> d131  [key=0, style=solid];
d130 -> d138  [key=2, style=dotted];
d130 -> d139  [key=2, style=dotted];
d149 -> d89  [key=2, style=dotted];
d149 -> d90  [key=2, style=dotted];
d149 -> d150  [key=0, style=solid];
d149 -> d153  [key=2, style=dotted];
d149 -> d139  [key=2, style=dotted];
d180 -> d89  [key=2, style=dotted];
d180 -> d90  [key=2, style=dotted];
d180 -> d181  [key=0, style=solid];
d183 -> d89  [key=2, style=dotted];
d183 -> d90  [key=2, style=dotted];
d183 -> d184  [key=0, style=solid];
d191 -> d89  [key=2, style=dotted];
d191 -> d90  [key=2, style=dotted];
d191 -> d192  [key=0, style=solid];
d195 -> d89  [key=2, style=dotted];
d195 -> d90  [key=2, style=dotted];
d195 -> d196  [key=0, style=solid];
d203 -> d89  [key=2, style=dotted];
d203 -> d90  [key=2, style=dotted];
d203 -> d204  [key=0, style=solid];
d206 -> d89  [key=2, style=dotted];
d206 -> d90  [key=2, style=dotted];
d206 -> d207  [key=0, style=solid];
d382 -> d89  [key=2, style=dotted];
d382 -> d90  [key=2, style=dotted];
d382 -> d383  [key=0, style=solid];
d431 -> d89  [key=2, style=dotted];
d431 -> d90  [key=2, style=dotted];
d431 -> d432  [key=0, style=solid];
d383 -> d385  [key=2, style=dotted];
d383 -> d384  [key=0, style=solid];
d2 -> d5  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d13 -> d5  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d42 -> d5  [key=2, style=dotted];
d42 -> d43  [key=0, style=solid];
d54 -> d5  [key=2, style=dotted];
d54 -> d55  [key=0, style=solid];
d73 -> d5  [key=2, style=dotted];
d73 -> d74  [key=0, style=solid];
d73 -> d91  [key=2, style=dotted];
d74 -> d5  [key=2, style=dotted];
d74 -> d75  [key=0, style=solid];
d75 -> d5  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d79 -> d5  [key=2, style=dotted];
d79 -> d80  [key=0, style=solid];
d80 -> d5  [key=2, style=dotted];
d80 -> d81  [key=0, style=solid];
d81 -> d5  [key=2, style=dotted];
d81 -> d82  [key=0, style=solid];
d84 -> d5  [key=2, style=dotted];
d84 -> d85  [key=0, style=solid];
d85 -> d5  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d134 -> d5  [key=2, style=dotted];
d134 -> d135  [key=0, style=solid];
d135 -> d5  [key=2, style=dotted];
d135 -> d136  [key=0, style=solid];
d159 -> d5  [key=2, style=dotted];
d159 -> d160  [key=0, style=solid];
d170 -> d5  [key=2, style=dotted];
d170 -> d171  [key=0, style=solid];
d184 -> d5  [key=2, style=dotted];
d184 -> d185  [key=0, style=solid];
d196 -> d5  [key=2, style=dotted];
d196 -> d197  [key=0, style=solid];
d207 -> d5  [key=2, style=dotted];
d207 -> d208  [key=0, style=solid];
d214 -> d5  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d225 -> d5  [key=2, style=dotted];
d225 -> d226  [key=0, style=solid];
d244 -> d5  [key=2, style=dotted];
d244 -> d245  [key=0, style=solid];
d252 -> d5  [key=2, style=dotted];
d252 -> d253  [key=0, style=solid];
d263 -> d5  [key=2, style=dotted];
d263 -> d264  [key=0, style=solid];
d276 -> d5  [key=2, style=dotted];
d276 -> d277  [key=0, style=solid];
d287 -> d5  [key=2, style=dotted];
d287 -> d288  [key=0, style=solid];
d294 -> d5  [key=2, style=dotted];
d294 -> d295  [key=0, style=solid];
d323 -> d5  [key=2, style=dotted];
d323 -> d324  [key=0, style=solid];
d330 -> d5  [key=2, style=dotted];
d330 -> d331  [key=0, style=solid];
d342 -> d5  [key=2, style=dotted];
d342 -> d343  [key=0, style=solid];
d360 -> d5  [key=2, style=dotted];
d360 -> d361  [key=0, style=solid];
d432 -> d5  [key=2, style=dotted];
d432 -> d433  [key=0, style=solid];
d19 -> d20  [key=0, style=solid];
d21 -> d19  [key=0, style=bold, color=blue];
d23 -> d24  [key=0, style=solid];
d29 -> d30  [key=0, style=solid];
d31 -> d29  [key=0, style=bold, color=blue];
d32 -> d33  [key=0, style=solid];
d37 -> d38  [key=0, style=solid];
d39 -> d37  [key=0, style=bold, color=blue];
d40 -> d41  [key=0, style=solid];
d40 -> d45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d49 -> d50  [key=0, style=solid];
d63 -> d50  [key=3, color=darkorchid, style=bold, label="Parameter variable string arg"];
d63 -> d65  [key=3, color=darkorchid, style=bold, label="Parameter variable string arg"];
d63 -> d126  [key=3, color=darkorchid, style=bold, label="Parameter variable string arg"];
d63 -> d447  [key=0, style=solid];
d51 -> d49  [key=0, style=bold, color=blue];
d52 -> d53  [key=0, style=solid];
d52 -> d57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d64 -> d65  [key=0, style=solid];
d66 -> d64  [key=0, style=bold, color=blue];
d68 -> d72  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d68 -> d83  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d68 -> d69  [key=0, style=solid];
d106 -> d107  [key=0, style=solid];
d108 -> d106  [key=0, style=bold, color=blue];
d109 -> d110  [key=0, style=solid];
d109 -> d113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d116 -> d117  [key=0, style=solid];
d118 -> d116  [key=0, style=bold, color=blue];
d119 -> d120  [key=0, style=solid];
d125 -> d126  [key=0, style=solid];
d125 -> d130  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d125 -> d125  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
d127 -> d124  [key=0, style=bold, color=blue];
d128 -> d130  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d128 -> d129  [key=0, style=solid];
d128 -> d131  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d145 -> d146  [key=0, style=solid];
d145 -> d149  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d145 -> d125  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
d147 -> d144  [key=0, style=bold, color=blue];
d148 -> d149  [key=0, style=solid];
d148 -> d150  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d154 -> d155  [key=0, style=solid];
d156 -> d154  [key=0, style=bold, color=blue];
d157 -> d158  [key=0, style=solid];
d157 -> d162  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d165 -> d166  [key=0, style=solid];
d167 -> d165  [key=0, style=bold, color=blue];
d168 -> d169  [key=0, style=solid];
d168 -> d173  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d176 -> d177  [key=0, style=solid];
d176 -> d180  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d176 -> d176  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
d178 -> d175  [key=0, style=bold, color=blue];
d179 -> d180  [key=0, style=solid];
d179 -> d183  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d179 -> d182  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d187 -> d188  [key=0, style=solid];
d187 -> d191  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d187 -> d176  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
d189 -> d186  [key=0, style=bold, color=blue];
d190 -> d191  [key=0, style=solid];
d190 -> d195  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d190 -> d193  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d190 -> d194  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d199 -> d200  [key=0, style=solid];
d199 -> d203  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d199 -> d176  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
d201 -> d198  [key=0, style=bold, color=blue];
d202 -> d203  [key=0, style=solid];
d202 -> d206  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d202 -> d205  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d209 -> d210  [key=0, style=solid];
d211 -> d209  [key=0, style=bold, color=blue];
d212 -> d213  [key=0, style=solid];
d212 -> d217  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d220 -> d221  [key=0, style=solid];
d222 -> d220  [key=0, style=bold, color=blue];
d223 -> d224  [key=0, style=solid];
d223 -> d228  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d230 -> d231  [key=0, style=solid];
d232 -> d230  [key=0, style=bold, color=blue];
d233 -> d234  [key=0, style=solid];
d238 -> d239  [key=0, style=solid];
d238 -> d238  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
d238 -> d242  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d240 -> d237  [key=0, style=bold, color=blue];
d241 -> d242  [key=0, style=solid];
d241 -> d243  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d247 -> d248  [key=0, style=solid];
d249 -> d247  [key=0, style=bold, color=blue];
d250 -> d251  [key=0, style=solid];
d250 -> d255  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d258 -> d259  [key=0, style=solid];
d260 -> d258  [key=0, style=bold, color=blue];
d261 -> d262  [key=0, style=solid];
d261 -> d266  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d269 -> d270  [key=0, style=solid];
d269 -> d269  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
d269 -> d273  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d271 -> d268  [key=0, style=bold, color=blue];
d272 -> d273  [key=0, style=solid];
d272 -> d274  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d272 -> d275  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d280 -> d281  [key=0, style=solid];
d280 -> d269  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
d280 -> d284  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d282 -> d279  [key=0, style=bold, color=blue];
d283 -> d284  [key=0, style=solid];
d283 -> d285  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d283 -> d286  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d289 -> d290  [key=0, style=solid];
d291 -> d289  [key=0, style=bold, color=blue];
d292 -> d293  [key=0, style=solid];
d292 -> d297  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d300 -> d301  [key=0, style=solid];
d302 -> d300  [key=0, style=bold, color=blue];
d303 -> d304  [key=0, style=solid];
d303 -> d307  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d309 -> d310  [key=0, style=solid];
d311 -> d309  [key=0, style=bold, color=blue];
d312 -> d313  [key=0, style=solid];
d317 -> d318  [key=0, style=solid];
d317 -> d317  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
d317 -> d321  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d319 -> d316  [key=0, style=bold, color=blue];
d320 -> d321  [key=0, style=solid];
d320 -> d322  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d325 -> d326  [key=0, style=solid];
d327 -> d325  [key=0, style=bold, color=blue];
d328 -> d329  [key=0, style=solid];
d328 -> d333  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d337 -> d338  [key=0, style=solid];
d339 -> d337  [key=0, style=bold, color=blue];
d340 -> d341  [key=0, style=solid];
d340 -> d345  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d365 -> d366  [key=0, style=solid];
d367 -> d365  [key=0, style=bold, color=blue];
d368 -> d369  [key=0, style=solid];
d368 -> d372  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d386 -> d387  [key=0, style=solid];
d388 -> d386  [key=0, style=bold, color=blue];
d389 -> d390  [key=0, style=solid];
d389 -> d393  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d413 -> d414  [key=0, style=solid];
d415 -> d413  [key=0, style=bold, color=blue];
d416 -> d417  [key=0, style=solid];
d416 -> d420  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d425 -> d426  [key=0, style=solid];
d425 -> d425  [key=3, color=darkorchid, style=bold, label="Local variable string arrangeSql"];
d425 -> d429  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d427 -> d424  [key=0, style=bold, color=blue];
d428 -> d431  [key=1, style=dashed, color=darkseagreen4, label=SqlConnection];
d428 -> d429  [key=0, style=solid];
d428 -> d430  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d361 -> d362  [key=0, style=solid];
d361 -> d364  [key=2, style=dotted];
d242 -> d90  [key=2, style=dotted];
d242 -> d243  [key=0, style=solid];
d242 -> d4  [key=2, style=dotted];
d275 -> d90  [key=2, style=dotted];
d275 -> d276  [key=0, style=solid];
d275 -> d4  [key=2, style=dotted];
d286 -> d90  [key=2, style=dotted];
d286 -> d287  [key=0, style=solid];
d286 -> d4  [key=2, style=dotted];
d82 -> d95  [key=2, style=dotted];
d82 -> d83  [key=0, style=solid];
d82 -> d94  [key=2, style=dotted];
d333 -> d335  [key=2, style=dotted];
d333 -> d336  [key=2, style=dotted];
d333 -> d334  [key=0, style=solid];
d24 -> d25  [key=0, style=solid];
d24 -> d27  [key=2, style=dotted];
d26 -> d23  [key=0, style=bold, color=blue];
d33 -> d34  [key=0, style=solid];
d33 -> d36  [key=2, style=dotted];
d35 -> d32  [key=0, style=bold, color=blue];
d69 -> d70  [key=0, style=solid];
d69 -> d83  [key=1, style=dashed, color=darkseagreen4, label=jobId];
d69 -> d73  [key=1, style=dashed, color=darkseagreen4, label=jobId];
d69 -> d59  [key=2, style=dotted];
d69 -> d47  [key=2, style=dotted];
d69 -> d87  [key=2, style=dotted];
d69 -> d48  [key=2, style=dotted];
d69 -> d97  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d69 -> d71  [key=1, style=dashed, color=darkseagreen4, label=jobId];
d71 -> d72  [key=0, style=solid];
d71 -> d88  [key=2, style=dotted];
d131 -> d132  [key=0, style=solid];
d131 -> d133  [key=1, style=dashed, color=darkseagreen4, label=result];
d131 -> d134  [key=1, style=dashed, color=darkseagreen4, label=result];
d131 -> d135  [key=1, style=dashed, color=darkseagreen4, label=result];
d131 -> d140  [key=2, style=dotted];
d131 -> d115  [key=2, style=dotted];
d131 -> d136  [key=1, style=dashed, color=darkseagreen4, label=result];
d150 -> d151  [key=0, style=solid];
d150 -> d140  [key=2, style=dotted];
d150 -> d115  [key=2, style=dotted];
d152 -> d148  [key=0, style=bold, color=blue];
d384 -> d379  [key=0, style=bold, color=blue];
d273 -> d278  [key=2, style=dotted];
d273 -> d274  [key=0, style=solid];
d284 -> d278  [key=2, style=dotted];
d284 -> d285  [key=0, style=solid];
d321 -> d278  [key=2, style=dotted];
d321 -> d322  [key=0, style=solid];
d429 -> d278  [key=2, style=dotted];
d429 -> d430  [key=0, style=solid];
d429 -> d94  [key=2, style=dotted];
d429 -> d434  [key=2, style=dotted];
d393 -> d395  [key=2, style=dotted];
d393 -> d394  [key=0, style=solid];
d76 -> d77  [key=0, style=solid];
d76 -> d92  [key=2, style=dotted];
d76 -> d78  [key=1, style=dashed, color=darkseagreen4, label=invocationData];
d77 -> d78  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d103 -> d104  [key=0, style=solid];
d452 -> d130  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d129 -> d130  [key=0, style=solid];
d129 -> d59  [key=2, style=dotted];
d129 -> d141  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d453 -> d149  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d456 -> d180  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d181 -> d183  [key=1, style=dashed, color=darkseagreen4, label=jobId];
d181 -> d182  [key=0, style=solid];
d181 -> d91  [key=2, style=dotted];
d182 -> d183  [key=0, style=solid];
d182 -> d164  [key=2, style=dotted];
d457 -> d191  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d192 -> d195  [key=1, style=dashed, color=darkseagreen4, label=jobId];
d192 -> d193  [key=0, style=solid];
d192 -> d91  [key=2, style=dotted];
d192 -> d194  [key=1, style=dashed, color=darkseagreen4, label=jobId];
d194 -> d195  [key=0, style=solid];
d194 -> d164  [key=2, style=dotted];
d458 -> d203  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d204 -> d206  [key=1, style=dashed, color=darkseagreen4, label=jobId];
d204 -> d205  [key=0, style=solid];
d204 -> d91  [key=2, style=dotted];
d205 -> d206  [key=0, style=solid];
d205 -> d164  [key=2, style=dotted];
d430 -> d431  [key=0, style=solid];
d430 -> d435  [key=2, style=dotted];
d430 -> d423  [key=2, style=dotted];
d1 -> d2  [key=0, style=solid];
d1 -> d4  [key=2, style=dotted];
d1 -> d6  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d3 -> d0  [key=0, style=bold, color=blue];
d12 -> d13  [key=0, style=solid];
d12 -> d4  [key=2, style=dotted];
d12 -> d15  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d14 -> d11  [key=0, style=bold, color=blue];
d41 -> d42  [key=0, style=solid];
d41 -> d4  [key=2, style=dotted];
d41 -> d44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d43 -> d40  [key=0, style=bold, color=blue];
d53 -> d54  [key=0, style=solid];
d53 -> d4  [key=2, style=dotted];
d53 -> d56  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d55 -> d52  [key=0, style=bold, color=blue];
d78 -> d79  [key=0, style=solid];
d78 -> d80  [key=1, style=dashed, color=darkseagreen4, label=job];
d78 -> d81  [key=1, style=dashed, color=darkseagreen4, label=job];
d78 -> d93  [key=2, style=dotted];
d86 -> d68  [key=0, style=bold, color=blue];
d136 -> d137  [key=0, style=solid];
d136 -> d123  [key=2, style=dotted];
d158 -> d159  [key=0, style=solid];
d158 -> d4  [key=2, style=dotted];
d158 -> d161  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d160 -> d157  [key=0, style=bold, color=blue];
d169 -> d170  [key=0, style=solid];
d169 -> d4  [key=2, style=dotted];
d169 -> d172  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d171 -> d168  [key=0, style=bold, color=blue];
d185 -> d179  [key=0, style=bold, color=blue];
d197 -> d190  [key=0, style=bold, color=blue];
d208 -> d202  [key=0, style=bold, color=blue];
d213 -> d214  [key=0, style=solid];
d213 -> d4  [key=2, style=dotted];
d213 -> d216  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d215 -> d212  [key=0, style=bold, color=blue];
d224 -> d225  [key=0, style=solid];
d224 -> d4  [key=2, style=dotted];
d224 -> d227  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d226 -> d223  [key=0, style=bold, color=blue];
d243 -> d244  [key=0, style=solid];
d243 -> d91  [key=2, style=dotted];
d243 -> d246  [key=2, style=dotted];
d245 -> d241  [key=0, style=bold, color=blue];
d251 -> d252  [key=0, style=solid];
d251 -> d4  [key=2, style=dotted];
d251 -> d254  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d253 -> d250  [key=0, style=bold, color=blue];
d262 -> d263  [key=0, style=solid];
d262 -> d4  [key=2, style=dotted];
d262 -> d265  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d264 -> d261  [key=0, style=bold, color=blue];
d277 -> d272  [key=0, style=bold, color=blue];
d288 -> d283  [key=0, style=bold, color=blue];
d293 -> d294  [key=0, style=solid];
d293 -> d4  [key=2, style=dotted];
d293 -> d296  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d295 -> d292  [key=0, style=bold, color=blue];
d322 -> d323  [key=0, style=solid];
d322 -> d299  [key=2, style=dotted];
d324 -> d320  [key=0, style=bold, color=blue];
d329 -> d330  [key=0, style=solid];
d329 -> d4  [key=2, style=dotted];
d329 -> d332  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d331 -> d328  [key=0, style=bold, color=blue];
d341 -> d342  [key=0, style=solid];
d341 -> d4  [key=2, style=dotted];
d341 -> d344  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d343 -> d340  [key=0, style=bold, color=blue];
d433 -> d428  [key=0, style=bold, color=blue];
d45 -> d46  [key=0, style=solid];
d45 -> d47  [key=2, style=dotted];
d45 -> d48  [key=2, style=dotted];
d61 -> d63  [key=2, style=dotted];
d61 -> d62  [key=0, style=solid];
d98 -> d63  [key=2, style=dotted];
d98 -> d99  [key=0, style=solid];
d142 -> d63  [key=2, style=dotted];
d142 -> d143  [key=0, style=solid];
d447 -> d63  [key=0, style=bold, color=blue];
d57 -> d58  [key=0, style=solid];
d57 -> d59  [key=2, style=dotted];
d57 -> d48  [key=2, style=dotted];
d57 -> d60  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d111 -> d109  [key=0, style=bold, color=blue];
d110 -> d111  [key=0, style=solid];
d110 -> d4  [key=2, style=dotted];
d110 -> d112  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d113 -> d114  [key=0, style=solid];
d113 -> d115  [key=2, style=dotted];
d122 -> d119  [key=0, style=bold, color=blue];
d120 -> d121  [key=0, style=solid];
d120 -> d115  [key=2, style=dotted];
d124 -> d125  [key=0, style=solid];
d137 -> d128  [key=0, style=bold, color=blue];
d144 -> d145  [key=0, style=solid];
d162 -> d163  [key=0, style=solid];
d162 -> d164  [key=2, style=dotted];
d173 -> d174  [key=0, style=solid];
d173 -> d164  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d186 -> d187  [key=0, style=solid];
d193 -> d194  [key=0, style=solid];
d193 -> d164  [key=2, style=dotted];
d198 -> d199  [key=0, style=solid];
d217 -> d218  [key=0, style=solid];
d217 -> d219  [key=2, style=dotted];
d228 -> d229  [key=0, style=solid];
d228 -> d219  [key=2, style=dotted];
d236 -> d233  [key=0, style=bold, color=blue];
d234 -> d235  [key=0, style=solid];
d234 -> d219  [key=2, style=dotted];
d237 -> d238  [key=0, style=solid];
d255 -> d256  [key=0, style=solid];
d255 -> d257  [key=2, style=dotted];
d266 -> d267  [key=0, style=solid];
d266 -> d257  [key=2, style=dotted];
d268 -> d269  [key=0, style=solid];
d274 -> d275  [key=0, style=solid];
d274 -> d257  [key=2, style=dotted];
d279 -> d280  [key=0, style=solid];
d285 -> d286  [key=0, style=solid];
d285 -> d257  [key=2, style=dotted];
d297 -> d298  [key=0, style=solid];
d297 -> d299  [key=2, style=dotted];
d305 -> d303  [key=0, style=bold, color=blue];
d304 -> d305  [key=0, style=solid];
d304 -> d4  [key=2, style=dotted];
d304 -> d306  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d307 -> d308  [key=0, style=solid];
d307 -> d299  [key=2, style=dotted];
d315 -> d312  [key=0, style=bold, color=blue];
d313 -> d314  [key=0, style=solid];
d313 -> d299  [key=2, style=dotted];
d316 -> d317  [key=0, style=solid];
d345 -> d336  [key=2, style=dotted];
d345 -> d346  [key=0, style=solid];
d370 -> d368  [key=0, style=bold, color=blue];
d369 -> d370  [key=0, style=solid];
d369 -> d4  [key=2, style=dotted];
d369 -> d371  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d372 -> d374  [key=2, style=dotted];
d372 -> d373  [key=0, style=solid];
d391 -> d389  [key=0, style=bold, color=blue];
d390 -> d391  [key=0, style=solid];
d390 -> d4  [key=2, style=dotted];
d390 -> d392  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d418 -> d416  [key=0, style=bold, color=blue];
d417 -> d418  [key=0, style=solid];
d417 -> d4  [key=2, style=dotted];
d417 -> d419  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d420 -> d421  [key=0, style=solid];
d420 -> d422  [key=2, style=dotted];
d420 -> d423  [key=2, style=dotted];
d424 -> d425  [key=0, style=solid];
d461 -> d242  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d469 -> d333  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d332 -> d333  [key=0, style=solid];
d334 -> d332  [key=0, style=bold, color=blue];
d97 -> d98  [key=0, style=solid];
d464 -> d273  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d465 -> d284  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d468 -> d321  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d476 -> d429  [key=1, style=dashed, color=darkseagreen4, label=arrangeSql];
d473 -> d393  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d392 -> d393  [key=0, style=solid];
d394 -> d392  [key=0, style=bold, color=blue];
d102 -> d100  [key=0, style=bold, color=blue];
d101 -> d102  [key=0, style=solid];
d105 -> d103  [key=0, style=bold, color=blue];
d104 -> d105  [key=0, style=solid];
d141 -> d142  [key=0, style=solid];
d0 -> d1  [key=0, style=solid];
d6 -> d7  [key=0, style=solid];
d11 -> d12  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d44 -> d45  [key=0, style=solid];
d56 -> d57  [key=0, style=solid];
d161 -> d162  [key=0, style=solid];
d172 -> d173  [key=0, style=solid];
d216 -> d217  [key=0, style=solid];
d227 -> d228  [key=0, style=solid];
d254 -> d255  [key=0, style=solid];
d265 -> d266  [key=0, style=solid];
d296 -> d297  [key=0, style=solid];
d344 -> d345  [key=0, style=solid];
d449 -> d45  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d46 -> d44  [key=0, style=bold, color=blue];
d60 -> d61  [key=0, style=solid];
d62 -> d60  [key=0, style=bold, color=blue];
d99 -> d97  [key=0, style=bold, color=blue];
d143 -> d141  [key=0, style=bold, color=blue];
d450 -> d57  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d58 -> d56  [key=0, style=bold, color=blue];
d112 -> d113  [key=0, style=solid];
d451 -> d113  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d114 -> d112  [key=0, style=bold, color=blue];
d121 -> d122  [key=0, style=solid];
d121 -> d123  [key=2, style=dotted];
d454 -> d162  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d163 -> d161  [key=0, style=bold, color=blue];
d455 -> d173  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d174 -> d172  [key=0, style=bold, color=blue];
d459 -> d217  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d218 -> d216  [key=0, style=bold, color=blue];
d460 -> d228  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d229 -> d227  [key=0, style=bold, color=blue];
d235 -> d236  [key=0, style=solid];
d235 -> d123  [key=2, style=dotted];
d462 -> d255  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d256 -> d254  [key=0, style=bold, color=blue];
d463 -> d266  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d267 -> d265  [key=0, style=bold, color=blue];
d466 -> d297  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d298 -> d296  [key=0, style=bold, color=blue];
d306 -> d307  [key=0, style=solid];
d467 -> d307  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d308 -> d306  [key=0, style=bold, color=blue];
d314 -> d315  [key=0, style=solid];
d314 -> d123  [key=2, style=dotted];
d470 -> d345  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d346 -> d344  [key=0, style=bold, color=blue];
d371 -> d372  [key=0, style=solid];
d471 -> d372  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d373 -> d371  [key=0, style=bold, color=blue];
d419 -> d420  [key=0, style=solid];
d475 -> d420  [key=1, style=dashed, color=darkseagreen4, label="HangFire.SqlServer.SqlServerConnection"];
d421 -> d419  [key=0, style=bold, color=blue];
d8 -> d6  [key=0, style=bold, color=blue];
d7 -> d8  [key=0, style=solid];
d7 -> d9  [key=2, style=dotted];
d7 -> d10  [key=2, style=dotted];
d17 -> d15  [key=0, style=bold, color=blue];
d16 -> d17  [key=0, style=solid];
d16 -> d9  [key=2, style=dotted];
d16 -> d18  [key=2, style=dotted];
d438 -> d9  [key=2, style=dotted];
d438 -> d10  [key=2, style=dotted];
d438 -> d439  [key=0, style=solid];
d443 -> d9  [key=2, style=dotted];
d443 -> d10  [key=2, style=dotted];
d443 -> d18  [key=2, style=dotted];
d443 -> d444  [key=0, style=solid];
d437 -> d18  [key=2, style=dotted];
d437 -> d438  [key=0, style=solid];
d437 -> d439  [key=1, style=dashed, color=darkseagreen4, label=sqlConnection];
d439 -> d440  [key=0, style=solid];
d439 -> d441  [key=2, style=dotted];
d442 -> d443  [key=0, style=solid];
d442 -> d444  [key=1, style=dashed, color=darkseagreen4, label="System.Action<HangFire.SqlServer.SqlServerConnection>"];
d444 -> d445  [key=0, style=solid];
d444 -> d446  [key=2, style=dotted];
d436 -> d437  [key=0, style=solid];
d436 -> d439  [key=1, style=dashed, color=darkseagreen4, label="System.Action<SqlConnection, HangFire.SqlServer.SqlServerConnection>"];
d440 -> d436  [key=0, style=bold, color=blue];
d445 -> d442  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid, color=red];
m0_1 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid, color=red];
m0_2 -> m0_7  [key=2, style=dotted, color=red];
m0_2 -> m0_8  [key=2, style=dotted, color=red];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_9  [key=2, style=dotted];
m0_3 -> m0_8  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_10  [key=2, style=dotted];
m0_4 -> m0_8  [key=2, style=dotted];
m0_5 -> m0_0  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_3  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.CreatingContext"];
m1_0 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Client.CreatingContext"];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=0, style=solid];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_7  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_5  [key=0, style=solid];
m1_2 -> n12  [key=2, style=dotted];
m1_5 -> m1_0  [key=0, style=bold, color=blue];
m1_8 -> m1_9  [key=0, style=solid];
m1_9 -> m1_8  [key=0, style=bold, color=blue];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_12  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformingContext"];
m1_10 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformingContext"];
m1_10 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformingContext"];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_21  [key=2, style=dotted];
m1_11 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label=cultureName];
m1_11 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label=cultureName];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_21  [key=2, style=dotted];
m1_12 -> m1_17  [key=1, style=dashed, color=darkseagreen4, label=uiCultureName];
m1_12 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label=uiCultureName];
m1_15 -> m1_16  [key=0, style=solid];
m1_18 -> m1_19  [key=0, style=solid];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_17  [key=0, style=solid];
m1_14 -> m1_22  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_23  [key=2, style=dotted];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label=thread];
m1_13 -> m1_16  [key=1, style=dashed, color=darkseagreen4, label=thread];
m1_13 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label=thread];
m1_13 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label=thread];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_20  [key=0, style=solid];
m1_17 -> m1_22  [key=2, style=dotted];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_23  [key=2, style=dotted];
m1_20 -> m1_10  [key=0, style=bold, color=blue];
m1_24 -> m1_25  [key=0, style=solid];
m1_24 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformedContext"];
m1_24 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformedContext"];
m1_24 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformedContext"];
m1_24 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Server.PerformedContext"];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_27  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_30  [key=0, style=solid];
m1_28 -> m1_33  [key=2, style=dotted];
m1_29 -> m1_30  [key=0, style=solid];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_32  [key=0, style=solid];
m1_30 -> m1_33  [key=2, style=dotted];
m1_31 -> m1_32  [key=0, style=solid];
m1_26 -> m1_32  [key=0, style=solid];
m1_26 -> n12  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label=thread];
m1_27 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label=thread];
m1_32 -> m1_24  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_8  [key=2, style=dotted];
m2_1 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=connectionFake];
m2_1 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label=connectionFake];
m2_1 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label=connectionFake];
m2_1 -> m2_13  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_9  [key=2, style=dotted];
m2_2 -> m2_10  [key=2, style=dotted];
m2_2 -> m2_11  [key=2, style=dotted];
m2_2 -> m2_18  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_2 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=job];
m2_2 -> m2_14  [key=2, style=dotted];
m2_2 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_9  [key=2, style=dotted];
m2_3 -> m2_12  [key=2, style=dotted];
m2_3 -> m2_11  [key=2, style=dotted];
m2_3 -> m2_13  [key=2, style=dotted];
m2_3 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_3 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=state];
m2_3 -> m2_15  [key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_14  [key=2, style=dotted];
m2_4 -> m2_15  [key=2, style=dotted];
m2_4 -> m2_16  [key=2, style=dotted];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_17  [key=2, style=dotted];
m2_6 -> m2_18  [key=2, style=dotted];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_16  [key=2, style=dotted];
m2_5 -> m2_17  [key=2, style=dotted];
m2_5 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label=createContext];
m2_7 -> m2_0  [key=0, style=bold, color=blue];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_19  [key=2, style=dotted];
m2_28 -> m2_29  [key=0, style=solid];
m2_29 -> m2_32  [key=2, style=dotted];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label=filter];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_33  [key=2, style=dotted];
m2_30 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_31 -> m2_28  [key=0, style=bold, color=blue];
m2_27 -> m2_136  [key=0, style=solid];
m2_136 -> m2_27  [key=0, style=bold, color=blue];
m2_26 -> m2_24  [key=0, style=bold, color=blue];
m2_20 -> m2_18  [key=0, style=bold, color=blue];
m2_49 -> m2_50  [key=0, style=solid];
m2_50 -> m2_32  [key=2, style=dotted];
m2_50 -> m2_51  [key=0, style=solid];
m2_50 -> m2_55  [key=1, style=dashed, color=darkseagreen4, label=filter];
m2_51 -> m2_52  [key=0, style=solid];
m2_51 -> m2_53  [key=2, style=dotted];
m2_51 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_52 -> m2_49  [key=0, style=bold, color=blue];
m2_102 -> m2_103  [key=0, style=solid];
m2_107 -> m2_32  [key=2, style=dotted];
m2_107 -> m2_108  [key=0, style=solid];
m2_107 -> m2_109  [key=1, style=dashed, color=darkseagreen4, label=filter];
m2_106 -> m2_107  [key=0, style=solid];
m2_106 -> m2_46  [key=2, style=dotted];
m2_108 -> m2_109  [key=0, style=solid];
m2_108 -> m2_70  [key=2, style=dotted];
m2_109 -> m2_110  [key=0, style=solid];
m2_109 -> m2_101  [key=2, style=dotted];
m2_103 -> m2_104  [key=0, style=solid];
m2_103 -> m2_68  [key=2, style=dotted];
m2_103 -> m2_69  [key=2, style=dotted];
m2_103 -> m2_113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_104 -> m2_105  [key=0, style=solid];
m2_104 -> m2_68  [key=2, style=dotted];
m2_104 -> m2_69  [key=2, style=dotted];
m2_104 -> m2_116  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_105 -> m2_106  [key=0, style=solid];
m2_105 -> m2_46  [key=2, style=dotted];
m2_110 -> m2_111  [key=0, style=solid];
m2_110 -> d5  [key=2, style=dotted];
m2_111 -> d5  [key=2, style=dotted];
m2_111 -> m2_112  [key=0, style=solid];
m2_112 -> m2_102  [key=0, style=bold, color=blue];
m2_19 -> m2_20  [key=0, style=solid];
m2_19 -> m2_21  [key=2, style=dotted];
m2_19 -> m2_22  [key=2, style=dotted];
m2_18 -> m2_19  [key=0, style=solid];
m2_58 -> m2_59  [key=0, style=solid];
m2_63 -> m2_32  [key=2, style=dotted];
m2_63 -> m2_64  [key=0, style=solid];
m2_62 -> m2_63  [key=0, style=solid];
m2_62 -> m2_46  [key=2, style=dotted];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_70  [key=2, style=dotted];
m2_59 -> m2_60  [key=0, style=solid];
m2_59 -> m2_68  [key=2, style=dotted];
m2_59 -> m2_69  [key=2, style=dotted];
m2_59 -> m2_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_60 -> m2_61  [key=0, style=solid];
m2_60 -> m2_68  [key=2, style=dotted];
m2_60 -> m2_69  [key=2, style=dotted];
m2_60 -> m2_75  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_46  [key=2, style=dotted];
m2_65 -> m2_66  [key=0, style=solid];
m2_65 -> d5  [key=2, style=dotted];
m2_66 -> d5  [key=2, style=dotted];
m2_66 -> m2_67  [key=0, style=solid];
m2_67 -> m2_58  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_21  [key=2, style=dotted];
m2_9 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label=performContext];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_22  [key=2, style=dotted];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_23  [key=2, style=dotted];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_20  [key=2, style=dotted];
m2_12 -> m2_0  [key=0, style=bold, color=blue];
m2_38 -> m2_39  [key=0, style=solid];
m2_41 -> m2_32  [key=2, style=dotted];
m2_41 -> m2_42  [key=0, style=solid];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_46  [key=2, style=dotted];
m2_42 -> m2_43  [key=0, style=solid];
m2_42 -> m2_37  [key=2, style=dotted];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_47  [key=2, style=dotted];
m2_43 -> d5  [key=2, style=dotted];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_47  [key=2, style=dotted];
m2_44 -> d5  [key=2, style=dotted];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_46  [key=2, style=dotted];
m2_45 -> m2_38  [key=0, style=bold, color=blue];
m2_23 -> m2_24  [key=0, style=solid];
m2_32 -> m2_137  [key=0, style=solid, color=green];
m2_137 -> m2_138  [key=0, style=solid, color=green];
m2_137 -> m2_139  [key=2, style=dotted, color=green];
m2_138 -> m2_32  [key=0, style=bold, color=blue];
m2_78 -> m2_79  [key=0, style=solid];
m2_83 -> m2_32  [key=2, style=dotted];
m2_83 -> m2_84  [key=0, style=solid];
m2_82 -> m2_83  [key=0, style=solid];
m2_82 -> m2_46  [key=2, style=dotted];
m2_84 -> m2_85  [key=0, style=solid];
m2_84 -> m2_70  [key=2, style=dotted];
m2_79 -> m2_80  [key=0, style=solid];
m2_79 -> m2_68  [key=2, style=dotted];
m2_79 -> m2_69  [key=2, style=dotted];
m2_79 -> m2_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_80 -> m2_81  [key=0, style=solid];
m2_80 -> m2_68  [key=2, style=dotted];
m2_80 -> m2_69  [key=2, style=dotted];
m2_80 -> m2_91  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_81 -> m2_82  [key=0, style=solid];
m2_81 -> m2_46  [key=2, style=dotted];
m2_85 -> m2_86  [key=0, style=solid];
m2_85 -> d5  [key=2, style=dotted];
m2_86 -> d5  [key=2, style=dotted];
m2_86 -> m2_87  [key=0, style=solid];
m2_87 -> m2_78  [key=0, style=bold, color=blue];
m2_94 -> m2_95  [key=0, style=solid];
m2_95 -> m2_32  [key=2, style=dotted];
m2_95 -> m2_96  [key=0, style=solid];
m2_95 -> m2_99  [key=1, style=dashed, color=darkseagreen4, label=filter];
m2_96 -> m2_97  [key=0, style=solid];
m2_96 -> m2_33  [key=2, style=dotted];
m2_96 -> m2_98  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_97 -> m2_94  [key=0, style=bold, color=blue];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=2, style=dotted];
m2_25 -> m2_23  [key=0, style=bold, color=blue];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_27  [key=2, style=dotted];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_37  [key=2, style=dotted];
m2_55 -> m2_56  [key=0, style=solid];
m2_55 -> m2_57  [key=2, style=dotted];
m2_99 -> m2_100  [key=0, style=solid];
m2_99 -> m2_101  [key=2, style=dotted];
m2_34 -> m2_35  [key=0, style=solid];
m2_36 -> m2_34  [key=0, style=bold, color=blue];
m2_54 -> m2_55  [key=0, style=solid];
m2_56 -> m2_54  [key=0, style=bold, color=blue];
m2_98 -> m2_99  [key=0, style=solid];
m2_100 -> m2_98  [key=0, style=bold, color=blue];
m2_71 -> m2_72  [key=0, style=solid];
m2_75 -> m2_76  [key=0, style=solid];
m2_88 -> m2_89  [key=0, style=solid];
m2_91 -> m2_92  [key=0, style=solid];
m2_113 -> m2_114  [key=0, style=solid];
m2_116 -> m2_117  [key=0, style=solid];
m2_130 -> m2_131  [key=0, style=solid];
m2_133 -> m2_134  [key=0, style=solid];
m2_73 -> m2_71  [key=0, style=bold, color=blue];
m2_72 -> m2_73  [key=0, style=solid];
m2_72 -> m2_74  [key=2, style=dotted];
m2_77 -> m2_75  [key=0, style=bold, color=blue];
m2_76 -> m2_77  [key=0, style=solid];
m2_76 -> m2_74  [key=2, style=dotted];
m2_90 -> m2_88  [key=0, style=bold, color=blue];
m2_89 -> m2_90  [key=0, style=solid];
m2_89 -> m2_74  [key=2, style=dotted];
m2_93 -> m2_91  [key=0, style=bold, color=blue];
m2_92 -> m2_93  [key=0, style=solid];
m2_92 -> m2_74  [key=2, style=dotted];
m2_115 -> m2_113  [key=0, style=bold, color=blue];
m2_114 -> m2_115  [key=0, style=solid];
m2_114 -> m2_74  [key=2, style=dotted];
m2_118 -> m2_116  [key=0, style=bold, color=blue];
m2_117 -> m2_118  [key=0, style=solid];
m2_117 -> m2_74  [key=2, style=dotted];
m2_132 -> m2_130  [key=0, style=bold, color=blue];
m2_131 -> m2_132  [key=0, style=solid];
m2_131 -> m2_74  [key=2, style=dotted];
m2_135 -> m2_133  [key=0, style=bold, color=blue];
m2_134 -> m2_135  [key=0, style=solid];
m2_134 -> m2_74  [key=2, style=dotted];
m2_119 -> m2_120  [key=0, style=solid];
m2_124 -> m2_32  [key=2, style=dotted];
m2_124 -> m2_125  [key=0, style=solid];
m2_124 -> m2_126  [key=1, style=dashed, color=darkseagreen4, label=filter];
m2_123 -> m2_124  [key=0, style=solid];
m2_123 -> m2_46  [key=2, style=dotted];
m2_125 -> m2_126  [key=0, style=solid];
m2_125 -> m2_70  [key=2, style=dotted];
m2_126 -> m2_127  [key=0, style=solid];
m2_126 -> m2_101  [key=2, style=dotted];
m2_120 -> m2_121  [key=0, style=solid];
m2_120 -> m2_68  [key=2, style=dotted];
m2_120 -> m2_69  [key=2, style=dotted];
m2_120 -> m2_130  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_121 -> m2_122  [key=0, style=solid];
m2_121 -> m2_68  [key=2, style=dotted];
m2_121 -> m2_69  [key=2, style=dotted];
m2_121 -> m2_133  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m2_122 -> m2_123  [key=0, style=solid];
m2_122 -> m2_46  [key=2, style=dotted];
m2_127 -> m2_128  [key=0, style=solid];
m2_127 -> d5  [key=2, style=dotted];
m2_128 -> d5  [key=2, style=dotted];
m2_128 -> m2_129  [key=0, style=solid];
m2_129 -> m2_119  [key=0, style=bold, color=blue];
m2_140 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_41  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_50  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_63  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_83  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_95  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_107  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_124  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_6  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_7  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_9  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_42  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_44  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_59  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_60  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_64  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_79  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_80  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_84  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_103  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_104  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_108  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_109  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_120  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_121  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_125  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_140 -> m2_126  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Core.Tests.PreserveCultureAttributeFacts"];
m2_141 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label=filter];
m2_142 -> m2_55  [key=1, style=dashed, color=darkseagreen4, label=filter];
m2_143 -> m2_99  [key=1, style=dashed, color=darkseagreen4, label=filter];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> d47  [key=2, style=dotted];
m4_1 -> m4_4  [key=2, style=dotted];
m4_2 -> m4_0  [key=0, style=bold, color=blue];
m4_9 -> m4_10  [key=0, style=solid];
m4_10 -> m4_11  [key=0, style=solid];
m4_10 -> m4_12  [key=2, style=dotted];
m4_11 -> m4_9  [key=0, style=bold, color=blue];
m4_5 -> m4_6  [key=0, style=solid];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_8  [key=2, style=dotted];
m4_7 -> m4_5  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_2 -> m5_0  [key=0, style=bold, color=blue];
m5_3 -> m5_1  [key=1, style=dashed, color=darkseagreen4, label="HangFire.Filters.ClientExceptionContext"];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_0  [key=0, style=bold, color=blue];
}
