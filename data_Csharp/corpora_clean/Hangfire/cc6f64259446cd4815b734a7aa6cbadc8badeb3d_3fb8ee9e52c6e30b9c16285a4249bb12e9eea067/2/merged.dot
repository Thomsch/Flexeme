digraph  {
n29 [label="Hangfire.SqlServer.SqlServerFetchedJob", span=""];
n0 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)", span="29-29", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n1 [label="connection == null", span="34-34", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n3 [label="transaction == null", span="35-35", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n5 [label="jobId == null", span="36-36", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n7 [label="queue == null", span="37-37", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n9 [label="_connection = connection", span="39-39", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n10 [label="_transaction = transaction", span="40-40", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n11 [label="Id = id", span="42-42", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n12 [label="JobId = jobId", span="43-43", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n13 [label="Queue = queue", span="44-44", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n2 [label="throw new ArgumentNullException(''connection'');", span="34-34", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n4 [label="throw new ArgumentNullException(''transaction'');", span="35-35", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n6 [label="throw new ArgumentNullException(''jobId'');", span="36-36", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n8 [label="throw new ArgumentNullException(''queue'');", span="37-37", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n14 [label="Exit Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)", span="29-29", cluster="Hangfire.SqlServer.SqlServerFetchedJob.SqlServerFetchedJob(SqlConnection, SqlTransaction, int, string, string)"];
n15 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
n16 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="51-51", cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()"];
n17 [label="_transaction.Commit()", span="53-53", cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()"];
n18 [label="Exit Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()", span="51-51", cluster="Hangfire.SqlServer.SqlServerFetchedJob.RemoveFromQueue()"];
n19 [label="Entry Unk.Commit", span="", cluster="Unk.Commit"];
n20 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="56-56", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()"];
n21 [label="_transaction.Rollback()", span="58-58", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()"];
n22 [label="Exit Hangfire.SqlServer.SqlServerFetchedJob.Requeue()", span="56-56", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Requeue()"];
n23 [label="Entry Unk.Rollback", span="", cluster="Unk.Rollback"];
n24 [label="Entry Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="61-61", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()"];
n25 [label="_transaction.Dispose()", span="63-63", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()"];
n26 [label="_connection.Dispose()", span="64-64", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()"];
n28 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose"];
n27 [label="Exit Hangfire.SqlServer.SqlServerFetchedJob.Dispose()", span="61-61", cluster="Hangfire.SqlServer.SqlServerFetchedJob.Dispose()"];
m0_33 [label="Entry HangFire.JobHelper.FromJson<T>(string)", span="33-33", cluster="HangFire.JobHelper.FromJson<T>(string)", file="ClientJobDescriptor.cs"];
m0_27 [label="Entry HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", span="96-96", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="ClientJobDescriptor.cs"];
m0_28 [label="String.IsNullOrWhiteSpace(name)", span="98-98", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="ClientJobDescriptor.cs"];
m0_30 [label="return _jobParameters.ContainsKey(name)\r\n                ? JobHelper.FromJson<T>(_jobParameters[name])\r\n                : default(T);", span="100-102", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="ClientJobDescriptor.cs"];
m0_29 [label="throw new ArgumentNullException(''name'');", span="98-98", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="ClientJobDescriptor.cs"];
m0_31 [label="Exit HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", span="96-96", cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="ClientJobDescriptor.cs"];
m0_0 [label="Entry HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="21-21", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_1 [label="Debug.Assert(redis != null)", span="28-28", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_2 [label="Debug.Assert(jobId != null)", span="29-29", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_3 [label="Debug.Assert(type != null)", span="30-30", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_4 [label="Debug.Assert(arguments != null)", span="31-31", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_5 [label="Debug.Assert(state != null)", span="32-32", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_6 [label="_stateMachine = new StateMachine(redis)", span="34-34", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_7 [label="JobId = jobId", span="36-36", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_8 [label="Type = type", span="37-37", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_9 [label="State = state", span="38-38", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_10 [label="_jobParameters[''Type''] = type.AssemblyQualifiedName", span="40-40", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_11 [label="_jobParameters[''Args''] = JobHelper.ToJson(arguments)", span="41-41", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_12 [label="Exit HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="21-21", cluster="HangFire.Client.ClientJobDescriptor.ClientJobDescriptor(IRedisClient, string, System.Type, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_16 [label="Entry HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="72-72", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs"];
m0_17 [label="String.IsNullOrWhiteSpace(name)", span="74-74", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs"];
m0_21 [label="_jobParameters.Add(name, JobHelper.ToJson(value))", span="81-81", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs"];
m0_18 [label="throw new ArgumentNullException(''name'');", span="74-74", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs"];
m0_19 [label=_jobWasCreated, span="76-76", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs"];
m0_20 [label="throw new InvalidOperationException(''Could not set parameter for a created job.'');", span="78-78", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs"];
m0_22 [label="Exit HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="72-72", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs"];
m0_23 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)", file="ClientJobDescriptor.cs"];
m0_34 [label="Entry HangFire.Client.ClientJobDescriptor.Create()", span="105-105", cluster="HangFire.Client.ClientJobDescriptor.Create()", file="ClientJobDescriptor.cs"];
m0_35 [label="_jobWasCreated = true", span="107-107", cluster="HangFire.Client.ClientJobDescriptor.Create()", file="ClientJobDescriptor.cs"];
m0_36 [label="_stateMachine.CreateInState(JobId, _jobParameters, State)", span="108-108", cluster="HangFire.Client.ClientJobDescriptor.Create()", file="ClientJobDescriptor.cs"];
m0_37 [label="Exit HangFire.Client.ClientJobDescriptor.Create()", span="105-105", cluster="HangFire.Client.ClientJobDescriptor.Create()", file="ClientJobDescriptor.cs"];
m0_15 [label="Entry HangFire.JobHelper.ToJson(object)", span="28-28", cluster="HangFire.JobHelper.ToJson(object)", file="ClientJobDescriptor.cs"];
m0_38 [label="Entry HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="58-58", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs"];
m0_32 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="ClientJobDescriptor.cs"];
m0_26 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="ClientJobDescriptor.cs"];
m0_13 [label="Entry System.Diagnostics.Debug.Assert(bool)", span="0-0", cluster="System.Diagnostics.Debug.Assert(bool)", file="ClientJobDescriptor.cs"];
m0_25 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)", file="ClientJobDescriptor.cs"];
m0_14 [label="Entry HangFire.States.StateMachine.StateMachine(IRedisClient)", span="32-32", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient)", file="ClientJobDescriptor.cs"];
m0_39 [label="HangFire.Client.ClientJobDescriptor", span="", file="ClientJobDescriptor.cs"];
m1_0 [label="Entry HangFire.Tests.CustomJob.Perform()", span="10-10", cluster="HangFire.Tests.CustomJob.Perform()", file="CustomJob.cs"];
m1_1 [label="LastArticleId = ArticleId", span="12-12", cluster="HangFire.Tests.CustomJob.Perform()", color=green, community=0, file="CustomJob.cs"];
m1_2 [label="LastAuthor = Author", span="13-13", cluster="HangFire.Tests.CustomJob.Perform()", color=green, community=0, file="CustomJob.cs"];
m1_3 [label="Exit HangFire.Tests.CustomJob.Perform()", span="10-10", cluster="HangFire.Tests.CustomJob.Perform()", file="CustomJob.cs"];
m1_4 [label="HangFire.Tests.CustomJob", span="", file="CustomJob.cs"];
m3_61 [label="Entry HangFire.Web.RazorPage.Write(object)", span="60-60", cluster="HangFire.Web.RazorPage.Write(object)", file="DequeuedJobsPage.generated.cs"];
m3_57 [label="Entry HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", span="336-336", cluster="HangFire.Web.JobStorage.DequeuedJobs(string, int, int)", file="DequeuedJobsPage.generated.cs"];
m3_64 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="DequeuedJobsPage.generated.cs"];
m3_66 [label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="51-51", cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="DequeuedJobsPage.generated.cs"];
m3_0 [label="Entry HangFire.Web.Pages.DequeuedJobsPage.Execute()", span="44-44", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_1 [label="WriteLiteral(''\r\n'')", span="48-48", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_55 [label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="13-13", cluster="HangFire.Web.Pager.Pager(int, int, long)", file="DequeuedJobsPage.generated.cs"];
m3_54 [label="Entry Unk.TryParse", span="", cluster="Unk.TryParse", file="DequeuedJobsPage.generated.cs"];
m3_49 [label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="53-53", cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="DequeuedJobsPage.generated.cs"];
m3_56 [label="Entry HangFire.Web.JobStorage.DequeuedCount(string)", span="39-39", cluster="HangFire.Web.JobStorage.DequeuedCount(string)", file="DequeuedJobsPage.generated.cs"];
m3_24 [label="WriteLiteral(''</td>\r\n                    <td>\r\n'')", span="200-200", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", color=green, community=0, file="DequeuedJobsPage.generated.cs"];
m3_23 [label="Write(HtmlHelper.JobType(job.Value.Type))", span="195-195", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_25 [label="job.Value.CreatedAt.HasValue", span="205-205", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_2 [label="Entry HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", span="36-36", cluster="HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", file="DequeuedJobsPage.generated.cs"];
m3_4 [label="int.TryParse(Request.QueryString[''from''], out from)", span="73-73", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_5 [label="int.TryParse(Request.QueryString[''count''], out perPage)", span="74-74", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_6 [label="var pager = new Pager(from, perPage, JobStorage.DequeuedCount(Queue))\r\n    {\r\n        BasePageUrl = Request.LinkTo(''/queues/dequeued/'' + Queue)\r\n    }", span="76-79", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_7 [label="var dequeuedJobs = JobStorage.DequeuedJobs(Queue, pager.FromRecord, pager.RecordsPerPage)", span="81-81", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_8 [label="WriteLiteral(''\r\n'')", span="87-87", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_10 [label="WriteLiteral(''    <div class=\''alert alert-info\''>\r\n        The queue is empty.\r\n    </div>\r\n'')", span="98-98", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_11 [label="Write(RenderPartial(new PerPageSelector(pager)))", span="112-112", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_12 [label="WriteLiteral(@''    <table class=''''table''''>\r\n        <thead>\r\n            <tr>\r\n                <th>Id</th>\r\n                <th>State</th>\r\n                <th>Job type</th>\r\n                <th>Created</th>\r\n                <th>Fetched</th>\r\n                <th>Checked</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n'')", span="125-137", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_14 [label="WriteLiteral(''                <tr>\r\n                    <td>\r\n                        <a href=\'''' +\r\n'''')", span="148-149", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_15 [label="Write(Request.LinkTo(''/job/'' + job.Key))", span="154-154", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_16 [label="WriteLiteral(''\''>'')", span="159-159", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_17 [label="Write(HtmlHelper.JobId(job.Key))", span="164-164", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_18 [label="WriteLiteral(''</a>\r\n                    </td>\r\n                    <td>\r\n                      '' +\r\n''  <span class=\''label label-default\'' style=\'''')", span="169-170", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_19 [label="Write(JobHistoryRenderer.ForegroundStateColors.ContainsKey(job.Value.State) ? String.Format(''background-color: {0};'', JobHistoryRenderer.ForegroundStateColors[job.Value.State]) : null)", span="175-175", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_20 [label="WriteLiteral(''\''>\r\n                            '')", span="180-180", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_21 [label="Write(job.Value.State)", span="185-185", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_22 [label="WriteLiteral(''</span>\r\n                    </td>\r\n                    <td>'')", span="190-190", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_26 [label="WriteLiteral(''                            <span data-moment=\'''')", span="211-211", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_27 [label="Write(JobHelper.ToStringTimestamp(job.Value.CreatedAt.Value))", span="216-216", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_28 [label="WriteLiteral(''\''>\r\n                                '')", span="221-221", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_29 [label="Write(job.Value.CreatedAt)", span="226-226", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_30 [label="WriteLiteral(''\r\n                            </span>\r\n'')", span="231-231", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_31 [label="WriteLiteral(''                    </td>\r\n                    <td>\r\n'')", span="241-241", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_33 [label="WriteLiteral(''                            <span data-moment=\'''')", span="252-252", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_34 [label="Write(JobHelper.ToStringTimestamp(job.Value.FetchedAt.Value))", span="257-257", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_35 [label="WriteLiteral(''\''>\r\n                                '')", span="262-262", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_36 [label="Write(job.Value.FetchedAt)", span="267-267", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_37 [label="WriteLiteral(''\r\n                            </span>\r\n'')", span="272-272", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_38 [label="WriteLiteral(''                    </td>\r\n                    <td>\r\n'')", span="282-282", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_40 [label="WriteLiteral(''                            <span data-moment=\'''')", span="293-293", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_41 [label="Write(JobHelper.ToStringTimestamp(job.Value.CheckedAt.Value))", span="298-298", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_42 [label="WriteLiteral(''\''>\r\n                                '')", span="303-303", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_43 [label="Write(job.Value.CheckedAt)", span="308-308", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_44 [label="WriteLiteral(''\r\n                            </span>\r\n'')", span="313-313", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_45 [label="WriteLiteral(''                    </td>\r\n                </tr>\r\n'')", span="323-323", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_46 [label="WriteLiteral(''        </tbody>\r\n    </table>\r\n'')", span="333-333", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_47 [label="Write(RenderPartial(new Paginator(pager)))", span="345-345", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_32 [label="job.Value.FetchedAt.HasValue", span="246-246", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_3 [label="Exit HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", span="36-36", cluster="HangFire.Common.States.IStateChangedFilter.OnStateUnapplied(HangFire.Common.States.StateApplyingContext, HangFire.Storage.IWriteOnlyTransaction)", file="DequeuedJobsPage.generated.cs"];
m3_9 [label="pager.TotalPageCount == 0", span="92-92", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_13 [label=dequeuedJobs, span="142-142", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_39 [label="job.Value.CheckedAt.HasValue", span="287-287", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_48 [label="Exit HangFire.Web.Pages.DequeuedJobsPage.Execute()", span="44-44", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="DequeuedJobsPage.generated.cs"];
m3_51 [label="Entry string.ToUpperInvariant()", span="0-0", cluster="string.ToUpperInvariant()", file="DequeuedJobsPage.generated.cs"];
m3_59 [label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="73-73", cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="DequeuedJobsPage.generated.cs"];
m3_52 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="DequeuedJobsPage.generated.cs"];
m3_58 [label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="DequeuedJobsPage.generated.cs"];
m3_62 [label="Entry HangFire.Web.HtmlHelper.JobId(string)", span="17-17", cluster="HangFire.Web.HtmlHelper.JobId(string)", file="DequeuedJobsPage.generated.cs"];
m3_63 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="DequeuedJobsPage.generated.cs"];
m3_60 [label="Entry Unk.Write", span="", cluster="Unk.Write", file="DequeuedJobsPage.generated.cs"];
m3_50 [label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4", cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="DequeuedJobsPage.generated.cs"];
m3_53 [label="Entry HttpRequestBase.LinkTo(string)", span="8-8", cluster="HttpRequestBase.LinkTo(string)", file="DequeuedJobsPage.generated.cs"];
m3_67 [label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="DequeuedJobsPage.generated.cs"];
m3_65 [label="Entry HangFire.Web.HtmlHelper.JobType(string)", span="22-22", cluster="HangFire.Web.HtmlHelper.JobType(string)", file="DequeuedJobsPage.generated.cs"];
m3_68 [label="HangFire.Web.Pages.DequeuedJobsPage", span="", file="DequeuedJobsPage.generated.cs"];
m4_9 [label="Entry Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="42-42", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_10 [label="job == null", span="47-47", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_12 [label="parameters == null", span="48-48", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_14 [label="state == null", span="49-49", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_17 [label="var jobId = _connection.CreateExpiredJob(\r\n                job,\r\n                parameters,\r\n                createdAt,\r\n                TimeSpan.FromHours(1))", span="52-56", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_18 [label="var context = new StateContext(jobId, job, createdAt)", span="58-58", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_19 [label="ChangeState(context, state, null)", span="59-59", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_11 [label="throw new ArgumentNullException(''job'');", span="47-47", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_13 [label="throw new ArgumentNullException(''parameters'');", span="48-48", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_15 [label="throw new ArgumentNullException(''state'');", span="49-49", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_16 [label="var createdAt = DateTime.UtcNow", span="51-51", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_20 [label="return jobId;", span="61-61", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_21 [label="Exit Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="42-42", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="DequeuedJobsWatcher.feature.cs"];
m4_54 [label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="26-26", cluster="Hangfire.States.FailedState.FailedState(System.Exception)", file="DequeuedJobsWatcher.feature.cs"];
m4_52 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="DequeuedJobsWatcher.feature.cs"];
m4_67 [label="Entry Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", span="30-30", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_68 [label="Entry Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", span="22-22", cluster="Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", file="DequeuedJobsWatcher.feature.cs"];
m4_22 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="DequeuedJobsWatcher.feature.cs"];
m4_24 [label="Entry Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime)", span="24-24", cluster="Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime)", file="DequeuedJobsWatcher.feature.cs"];
m4_55 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="DequeuedJobsWatcher.feature.cs"];
m4_23 [label="Entry Hangfire.Storage.IStorageConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="30-30", cluster="Hangfire.Storage.IStorageConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="DequeuedJobsWatcher.feature.cs"];
m4_50 [label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)", span="25-25", cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)", file="DequeuedJobsWatcher.feature.cs"];
m4_69 [label="Entry Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", span="24-24", cluster="Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", file="DequeuedJobsWatcher.feature.cs"];
m4_77 [label="Entry Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", span="23-23", cluster="Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", file="DequeuedJobsWatcher.feature.cs"];
m4_76 [label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27", cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", file="DequeuedJobsWatcher.feature.cs"];
m4_51 [label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42", cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)", file="DequeuedJobsWatcher.feature.cs"];
m4_26 [label="Entry Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="64-64", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_27 [label="jobId == null", span="67-67", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_29 [label="toState == null", span="68-68", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_31 [label="fromStates != null && fromStates.Length == 0", span="69-69", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_33 [label="_connection.AcquireDistributedJobLock(jobId, JobLockTimeout)", span="80-80", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_34 [label="var jobData = _connection.GetJobData(jobId)", span="82-82", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_37 [label="fromStates != null && !fromStates.Contains(jobData.State, StringComparer.OrdinalIgnoreCase)", span="91-91", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_42 [label="!toState.IgnoreJobLoadException", span="109-109", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_43 [label="toState = new FailedState(ex.InnerException)\r\n                        {\r\n                            Reason = String.Format(\r\n                                ''Can not change the state of a job to '{0}': target method was not found.'',\r\n                                toState.Name)\r\n                        }", span="111-116", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", color=red, community=0, file="DequeuedJobsWatcher.feature.cs"];
m4_45 [label="var context = new StateContext(jobId, jobData.Job, jobData.CreatedAt)", span="122-122", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_46 [label="var stateChanged = ChangeState(context, toState, jobData.State)", span="123-123", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_28 [label="throw new ArgumentNullException(''jobId'');", span="67-67", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_30 [label="throw new ArgumentNullException(''toState'');", span="68-68", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_32 [label="throw new ArgumentException(''From states array should be null or non-empty.'', ''fromStates'');", span="71-71", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_35 [label="jobData == null", span="84-84", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_40 [label="jobData.EnsureLoaded()", span="100-100", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_36 [label="return false;", span="88-88", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", color=red, community=0, file="DequeuedJobsWatcher.feature.cs"];
m4_38 [label="return false;", span="93-93", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_39 [label="bool loadSucceeded = true", span="96-96", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_47 [label="return loadSucceeded && stateChanged;", span="125-125", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_41 [label=JobLoadException, span="102-102", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_44 [label="loadSucceeded = false", span="118-118", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_48 [label="Exit Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="64-64", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="DequeuedJobsWatcher.feature.cs"];
m4_78 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54", cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", file="DequeuedJobsWatcher.feature.cs"];
m4_25 [label="Entry Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", span="129-129", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_56 [label="var electStateContext = new ElectStateContext(context, _connection, this, toState, oldStateName)", span="133-133", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_58 [label="var applyStateContext = new ApplyStateContext(\r\n                    context,\r\n                    electStateContext.CandidateState,\r\n                    oldStateName,\r\n                    electStateContext.TraversedStates)", span="136-140", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=0, file="DequeuedJobsWatcher.feature.cs"];
m4_63 [label="var applyStateContext = new ApplyStateContext(context, failedState, oldStateName, Enumerable.Empty<IState>())", span="154-154", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_57 [label="_stateChangeProcess.ElectState(_connection, electStateContext)", span="134-134", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_59 [label="ApplyState(applyStateContext, true)", span="142-142", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", color=red, community=0, file="DequeuedJobsWatcher.feature.cs"];
m4_60 [label="return true;", span="145-145", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_61 [label=Exception, span="147-147", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_62 [label="var failedState = new FailedState(ex)\r\n                {\r\n                    Reason = ''An exception occurred during the transition of job's state''\r\n                }", span="149-152", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_64 [label="ApplyState(applyStateContext, false)", span="158-158", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_65 [label="return false;", span="161-161", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_66 [label="Exit Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", span="129-129", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_49 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="DequeuedJobsWatcher.feature.cs"];
m4_0 [label="Entry Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", span="31-31", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="DequeuedJobsWatcher.feature.cs"];
m4_1 [label="connection == null", span="33-33", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="DequeuedJobsWatcher.feature.cs"];
m4_3 [label="stateChangeProcess == null", span="34-34", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="DequeuedJobsWatcher.feature.cs"];
m4_5 [label="_connection = connection", span="36-36", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="DequeuedJobsWatcher.feature.cs"];
m4_6 [label="_stateChangeProcess = stateChangeProcess", span="37-37", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="DequeuedJobsWatcher.feature.cs"];
m4_2 [label="throw new ArgumentNullException(''connection'');", span="33-33", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="DequeuedJobsWatcher.feature.cs"];
m4_4 [label="throw new ArgumentNullException(''stateChangeProcess'');", span="34-34", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="DequeuedJobsWatcher.feature.cs"];
m4_7 [label="Exit Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", span="31-31", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="DequeuedJobsWatcher.feature.cs"];
m4_70 [label="Entry Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", span="165-165", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="DequeuedJobsWatcher.feature.cs"];
m4_72 [label="var transaction = _connection.CreateWriteTransaction()", span="167-167", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="DequeuedJobsWatcher.feature.cs"];
m4_73 [label="_stateChangeProcess.ApplyState(transaction, context, useFilters)", span="169-169", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", color=red, community=0, file="DequeuedJobsWatcher.feature.cs"];
m4_74 [label="transaction.Commit()", span="171-171", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", color=red, community=0, file="DequeuedJobsWatcher.feature.cs"];
m4_75 [label="Exit Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", span="165-165", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="DequeuedJobsWatcher.feature.cs"];
m4_53 [label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29", cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="DequeuedJobsWatcher.feature.cs"];
m4_71 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="DequeuedJobsWatcher.feature.cs"];
m4_79 [label="Hangfire.States.StateMachine", span="", file="DequeuedJobsWatcher.feature.cs"];
m5_12 [label="Entry HangFire.Common.States.StateChangingContext.GetJobParameter<T>(string)", span="62-62", cluster="HangFire.Common.States.StateChangingContext.GetJobParameter<T>(string)", file="DequeuedJobsWatcherSteps.cs"];
m5_15 [label="Entry HangFire.Common.States.StateChangingContext.SetJobParameter<T>(string, T)", span="57-57", cluster="HangFire.Common.States.StateChangingContext.SetJobParameter<T>(string, T)", file="DequeuedJobsWatcherSteps.cs"];
m5_0 [label="Entry HangFire.Filters.RetryAttribute.RetryAttribute()", span="28-28", cluster="HangFire.Filters.RetryAttribute.RetryAttribute()", file="DequeuedJobsWatcherSteps.cs"];
m5_1 [label="Attempts = DefaultRetryAttempts", span="30-30", cluster="HangFire.Filters.RetryAttribute.RetryAttribute()", file="DequeuedJobsWatcherSteps.cs"];
m5_2 [label="Exit HangFire.Filters.RetryAttribute.RetryAttribute()", span="28-28", cluster="HangFire.Filters.RetryAttribute.RetryAttribute()", file="DequeuedJobsWatcherSteps.cs"];
m5_16 [label="Entry HangFire.States.ScheduledState.ScheduledState(System.DateTime)", span="28-28", cluster="HangFire.States.ScheduledState.ScheduledState(System.DateTime)", file="DequeuedJobsWatcherSteps.cs"];
m5_17 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="DequeuedJobsWatcherSteps.cs"];
m5_14 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)", file="DequeuedJobsWatcherSteps.cs"];
m5_23 [label="Entry System.Random.Next(int)", span="0-0", cluster="System.Random.Next(int)", file="DequeuedJobsWatcherSteps.cs"];
m5_21 [label="Entry System.Random.Random()", span="0-0", cluster="System.Random.Random()", file="DequeuedJobsWatcherSteps.cs"];
m5_24 [label="Entry System.Math.Round(double)", span="0-0", cluster="System.Math.Round(double)", file="DequeuedJobsWatcherSteps.cs"];
m5_13 [label="Entry HangFire.Filters.RetryAttribute.SecondsToDelay(long)", span="72-72", cluster="HangFire.Filters.RetryAttribute.SecondsToDelay(long)", file="DequeuedJobsWatcherSteps.cs"];
m5_18 [label="var random = new Random()", span="74-74", cluster="HangFire.Filters.RetryAttribute.SecondsToDelay(long)", file="DequeuedJobsWatcherSteps.cs"];
m5_19 [label="return (int)Math.Round(\r\n                Math.Pow(retryCount, 4) + 15 + (random.Next(30) * (retryCount + 1)));", span="75-76", cluster="HangFire.Filters.RetryAttribute.SecondsToDelay(long)", file="DequeuedJobsWatcherSteps.cs"];
m5_20 [label="Exit HangFire.Filters.RetryAttribute.SecondsToDelay(long)", span="72-72", cluster="HangFire.Filters.RetryAttribute.SecondsToDelay(long)", file="DequeuedJobsWatcherSteps.cs"];
m5_22 [label="Entry System.Math.Pow(double, double)", span="0-0", cluster="System.Math.Pow(double, double)", file="DequeuedJobsWatcherSteps.cs"];
m5_3 [label="Entry HangFire.Filters.RetryAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", span="46-46", cluster="HangFire.Filters.RetryAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="DequeuedJobsWatcherSteps.cs"];
m5_4 [label="context.CandidateState.StateName != FailedState.Name", span="48-48", cluster="HangFire.Filters.RetryAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="DequeuedJobsWatcherSteps.cs"];
m5_6 [label="var retryCount = context.GetJobParameter<int>(''RetryCount'')", span="54-54", cluster="HangFire.Filters.RetryAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="DequeuedJobsWatcherSteps.cs"];
m5_9 [label="context.SetJobParameter(''RetryCount'', retryCount + 1)", span="60-60", cluster="HangFire.Filters.RetryAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", color=red, community=0, file="DequeuedJobsWatcherSteps.cs"];
m5_10 [label="context.CandidateState = new ScheduledState(delay)\r\n                {\r\n                    Reason = String.Format(''Retry attempt {0} of {1}'', retryCount + 1, Attempts)\r\n                }", span="64-67", cluster="HangFire.Filters.RetryAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="DequeuedJobsWatcherSteps.cs"];
m5_5 [label="return;", span="51-51", cluster="HangFire.Filters.RetryAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="DequeuedJobsWatcherSteps.cs"];
m5_7 [label="retryCount < Attempts", span="56-56", cluster="HangFire.Filters.RetryAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="DequeuedJobsWatcherSteps.cs"];
m5_8 [label="var delay = DateTime.UtcNow.AddSeconds(SecondsToDelay(retryCount))", span="58-58", cluster="HangFire.Filters.RetryAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="DequeuedJobsWatcherSteps.cs"];
m5_11 [label="Exit HangFire.Filters.RetryAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", span="46-46", cluster="HangFire.Filters.RetryAttribute.OnStateChanging(HangFire.Common.States.StateChangingContext)", file="DequeuedJobsWatcherSteps.cs"];
m5_25 [label="HangFire.Filters.RetryAttribute", span="", file="DequeuedJobsWatcherSteps.cs"];
m7_50 [label="Entry HangFire.Web.RazorPage.Write(object)", span="60-60", cluster="HangFire.Web.RazorPage.Write(object)", file="EnqueuedJobsPage.generated.cs"];
m7_43 [label="Entry Unk.TryParse", span="", cluster="Unk.TryParse", file="EnqueuedJobsPage.generated.cs"];
m7_38 [label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="53-53", cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="EnqueuedJobsPage.generated.cs"];
m7_0 [label="Entry HangFire.Web.Pages.EnqueuedJobsPage.Execute()", span="44-44", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_1 [label="WriteLiteral(''\r\n'')", span="48-48", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_2 [label="Layout = new LayoutPage\r\n        {\r\n            Title = Queue.ToUpperInvariant(), \r\n            Subtitle = ''Enqueued jobs'',\r\n            Breadcrumbs = new Dictionary<string, string>\r\n                {\r\n                    { ''Queues'', Request.LinkTo(''/queues'') }\r\n                }\r\n        }", span="59-67", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_3 [label="int from, perPage", span="69-69", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_4 [label="int.TryParse(Request.QueryString[''from''], out from)", span="71-71", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_5 [label="int.TryParse(Request.QueryString[''count''], out perPage)", span="72-72", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_6 [label="var pager = new Pager(from, perPage, JobStorage.EnqueuedCount(Queue))\r\n    {\r\n        BasePageUrl = Request.LinkTo(''/queues/'' + Queue)\r\n    }", span="74-77", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_7 [label="var enqueuedJobs = JobStorage.EnqueuedJobs(Queue, pager.FromRecord, pager.RecordsPerPage)", span="79-79", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_9 [label="pager.TotalPageCount == 0", span="90-90", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_11 [label="Write(RenderPartial(new PerPageSelector(pager)))", span="110-110", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_36 [label="Write(RenderPartial(new Paginator(pager)))", span="272-272", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_8 [label="WriteLiteral(''\r\n'')", span="85-85", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_13 [label=enqueuedJobs, span="131-131", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_10 [label="WriteLiteral(''    <div class=\''alert alert-info\''>\r\n        The queue is empty.\r\n    </div>\r\n'')", span="96-96", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_12 [label="WriteLiteral(''    <table class=\''table\''>\r\n        <thead>\r\n            <tr>\r\n                <th'' +\r\n''>Id</th>\r\n                <th>Job type</th>\r\n                <th>Args</th>\r\n    '' +\r\n''            <th>Enqueued</th>\r\n            </tr>\r\n        </thead>\r\n        <tbo'' +\r\n''dy>\r\n'')", span="123-126", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", color=red, community=0, file="EnqueuedJobsPage.generated.cs"];
m7_14 [label="WriteLiteral(''                <tr class=\'''')", span="137-137", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_35 [label="WriteLiteral(''        </tbody>\r\n    </table>\r\n'')", span="260-260", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_15 [label="Write(!job.Value.InEnqueuedState ? ''obsolete-data'' : null)", span="142-142", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_16 [label="WriteLiteral(''\''>\r\n                    <td>\r\n                        <a href=\'''')", span="147-147", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_17 [label="Write(Request.LinkTo(''/job/'' + job.Key))", span="152-152", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_18 [label="WriteLiteral(''\''>'')", span="157-157", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_19 [label="Write(HtmlHelper.JobId(job.Key))", span="162-162", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_20 [label="WriteLiteral(''</a>\r\n'')", span="167-167", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_21 [label="!job.Value.InEnqueuedState", span="172-172", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_22 [label="WriteLiteral(''                            <span title=\''Job\'s state has been changed while fetch'' +\r\n''ing data.\'' class=\''glyphicon glyphicon-question-sign\''></span>\r\n'')", span="178-179", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_23 [label="WriteLiteral(''                    </td>\r\n                    <td>'')", span="189-189", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_24 [label="Write(HtmlHelper.JobType(job.Value.Type))", span="194-194", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_25 [label="WriteLiteral(''</td>\r\n                    <td><pre class=\''pre-args\''>'')", span="199-199", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", color=red, community=0, file="EnqueuedJobsPage.generated.cs"];
m7_26 [label="Write(HtmlHelper.FormatProperties(job.Value.Args))", span="204-204", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", color=red, community=0, file="EnqueuedJobsPage.generated.cs"];
m7_27 [label="WriteLiteral(''</pre></td>\r\n                    <td>\r\n'')", span="209-209", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", color=red, community=0, file="EnqueuedJobsPage.generated.cs"];
m7_28 [label="job.Value.EnqueuedAt.HasValue", span="214-214", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_29 [label="WriteLiteral(''                            <span data-moment=\'''')", span="220-220", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_34 [label="WriteLiteral(''                    </td>\r\n                </tr>\r\n'')", span="250-250", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_30 [label="Write(JobHelper.ToStringTimestamp(job.Value.EnqueuedAt.Value))", span="225-225", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_31 [label="WriteLiteral(''\''>\r\n                                '')", span="230-230", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_32 [label="Write(job.Value.EnqueuedAt)", span="235-235", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_33 [label="WriteLiteral(''        \r\n                            </span>\r\n'')", span="240-240", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_37 [label="Exit HangFire.Web.Pages.EnqueuedJobsPage.Execute()", span="44-44", cluster="HangFire.Web.Pages.EnqueuedJobsPage.Execute()", file="EnqueuedJobsPage.generated.cs"];
m7_41 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="EnqueuedJobsPage.generated.cs"];
m7_53 [label="Entry HangFire.Web.HtmlHelper.FormatProperties(System.Collections.Generic.IDictionary<string, string>)", span="34-34", cluster="HangFire.Web.HtmlHelper.FormatProperties(System.Collections.Generic.IDictionary<string, string>)", file="EnqueuedJobsPage.generated.cs"];
m7_40 [label="Entry string.ToUpperInvariant()", span="0-0", cluster="string.ToUpperInvariant()", file="EnqueuedJobsPage.generated.cs"];
m7_39 [label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4", cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="EnqueuedJobsPage.generated.cs"];
m7_45 [label="Entry HangFire.Web.JobStorage.EnqueuedCount(string)", span="31-31", cluster="HangFire.Web.JobStorage.EnqueuedCount(string)", file="EnqueuedJobsPage.generated.cs"];
m7_47 [label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="EnqueuedJobsPage.generated.cs"];
m7_49 [label="Entry Unk.Write", span="", cluster="Unk.Write", file="EnqueuedJobsPage.generated.cs"];
m7_42 [label="Entry HttpRequestBase.LinkTo(string)", span="8-8", cluster="HttpRequestBase.LinkTo(string)", file="EnqueuedJobsPage.generated.cs"];
m7_51 [label="Entry HangFire.Web.HtmlHelper.JobId(string)", span="17-17", cluster="HangFire.Web.HtmlHelper.JobId(string)", file="EnqueuedJobsPage.generated.cs"];
m7_55 [label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="EnqueuedJobsPage.generated.cs"];
m7_46 [label="Entry HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", span="316-316", cluster="HangFire.Web.JobStorage.EnqueuedJobs(string, int, int)", file="EnqueuedJobsPage.generated.cs"];
m7_52 [label="Entry HangFire.Web.HtmlHelper.JobType(string)", span="22-22", cluster="HangFire.Web.HtmlHelper.JobType(string)", file="EnqueuedJobsPage.generated.cs"];
m7_48 [label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="73-73", cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="EnqueuedJobsPage.generated.cs"];
m7_54 [label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="51-51", cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="EnqueuedJobsPage.generated.cs"];
m7_44 [label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="13-13", cluster="HangFire.Web.Pager.Pager(int, int, long)", file="EnqueuedJobsPage.generated.cs"];
m7_56 [label="HangFire.Web.Pages.EnqueuedJobsPage", span="", file="EnqueuedJobsPage.generated.cs"];
m8_6 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="EnqueuedState.cs"];
m8_24 [label="Entry Unk.EnqueueItemOnList", span="", cluster="Unk.EnqueueItemOnList", file="EnqueuedState.cs"];
m8_23 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="EnqueuedState.cs"];
m8_15 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="EnqueuedState.cs"];
m8_3 [label="Entry HangFire.States.EnqueuedState.GetProperties()", span="20-20", cluster="HangFire.States.EnqueuedState.GetProperties()", file="EnqueuedState.cs"];
m8_4 [label="return new Dictionary<string, string>\r\n                {\r\n                    { ''EnqueuedAt'', JobHelper.ToStringTimestamp(DateTime.UtcNow) },\r\n                    { ''Queue'', Queue }\r\n                };", span="22-26", cluster="HangFire.States.EnqueuedState.GetProperties()", file="EnqueuedState.cs"];
m8_5 [label="Exit HangFire.States.EnqueuedState.GetProperties()", span="20-20", cluster="HangFire.States.EnqueuedState.GetProperties()", file="EnqueuedState.cs"];
m8_0 [label="Entry HangFire.States.EnqueuedState.EnqueuedState(string, string)", span="10-10", cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string)", file="EnqueuedState.cs"];
m8_1 [label="Queue = queue", span="13-13", cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string)", file="EnqueuedState.cs"];
m8_2 [label="Exit HangFire.States.EnqueuedState.EnqueuedState(string, string)", span="10-10", cluster="HangFire.States.EnqueuedState.EnqueuedState(string, string)", file="EnqueuedState.cs"];
m8_19 [label="Entry Unk.AddItemToSet", span="", cluster="Unk.AddItemToSet", file="EnqueuedState.cs"];
m8_20 [label="Entry lambda expression", span="34-35", cluster="lambda expression", file="EnqueuedState.cs"];
m8_21 [label="x.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', Queue), jobId)", span="34-35", cluster="lambda expression", file="EnqueuedState.cs"];
m8_16 [label="Entry lambda expression", span="33-33", cluster="lambda expression", file="EnqueuedState.cs"];
m8_17 [label="x.AddItemToSet(''hangfire:queues'', Queue)", span="33-33", cluster="lambda expression", file="EnqueuedState.cs"];
m8_18 [label="Exit lambda expression", span="33-33", cluster="lambda expression", file="EnqueuedState.cs"];
m8_22 [label="Exit lambda expression", span="34-35", cluster="lambda expression", file="EnqueuedState.cs"];
m8_7 [label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="51-51", cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="EnqueuedState.cs"];
m8_8 [label="Entry HangFire.States.EnqueuedState.Apply(IRedisTransaction, string)", span="29-29", cluster="HangFire.States.EnqueuedState.Apply(IRedisTransaction, string)", file="EnqueuedState.cs"];
m8_9 [label="transaction == null", span="31-31", cluster="HangFire.States.EnqueuedState.Apply(IRedisTransaction, string)", color=red, community=0, file="EnqueuedState.cs"];
m8_11 [label="transaction.QueueCommand(x => x.AddItemToSet(''hangfire:queues'', Queue))", span="33-33", cluster="HangFire.States.EnqueuedState.Apply(IRedisTransaction, string)", file="EnqueuedState.cs"];
m8_12 [label="transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(''hangfire:queue:{0}'', Queue), jobId))", span="34-35", cluster="HangFire.States.EnqueuedState.Apply(IRedisTransaction, string)", file="EnqueuedState.cs"];
m8_10 [label="throw new ArgumentNullException(''transaction'');", span="31-31", cluster="HangFire.States.EnqueuedState.Apply(IRedisTransaction, string)", color=red, community=0, file="EnqueuedState.cs"];
m8_13 [label="Exit HangFire.States.EnqueuedState.Apply(IRedisTransaction, string)", span="29-29", cluster="HangFire.States.EnqueuedState.Apply(IRedisTransaction, string)", file="EnqueuedState.cs"];
m8_25 [label="HangFire.States.EnqueuedState", span="", file="EnqueuedState.cs"];
m8_26 [label=string, span="", file="EnqueuedState.cs"];
m9_14 [label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="25-25", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="EnqueuedState.feature.cs"];
m9_15 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_16 [label="new SqlServerDistributedLock(''hello'', _timeout, null)", span="28-28", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_17 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_57 [label="new SqlServerDistributedLock(''exclusive'', _timeout, connection2)", span="71-71", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_58 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_59 [label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", span="78-78", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="EnqueuedState.feature.cs"];
m9_60 [label="UseConnection(sql =>\r\n            {\r\n                var distributedLock = new SqlServerDistributedLock(''hello'', _timeout, sql);\r\n                distributedLock.Dispose();\r\n\r\n                var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single();\r\n\r\n                Assert.Equal(''NoLock'', lockMode);\r\n            })", span="80-89", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="EnqueuedState.feature.cs", color=green, community=0];
m9_61 [label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", span="78-78", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Dispose_ReleasesExclusiveApplicationLock()", file="EnqueuedState.feature.cs"];
m9_62 [label="Entry lambda expression", span="80-89", cluster="lambda expression", color=red, community=0, file="EnqueuedState.feature.cs"];
m9_63 [label="var distributedLock = new SqlServerDistributedLock(''hello'', _timeout, sql)", span="82-82", cluster="lambda expression", color=green, community=0, file="EnqueuedState.feature.cs"];
m9_64 [label="distributedLock.Dispose()", span="83-83", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_65 [label="var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single()", span="85-86", cluster="lambda expression", file="EnqueuedState.feature.cs", color=green, community=0];
m9_25 [label="Assert.Equal(''Exclusive'', lockMode)", span="44-44", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_43 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="EnqueuedState.feature.cs"];
m9_29 [label="var releaseLock = new ManualResetEventSlim(false)", span="53-53", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="EnqueuedState.feature.cs"];
m9_21 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="EnqueuedState.feature.cs"];
m9_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="EnqueuedState.feature.cs"];
m9_12 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureTearDown()", file="EnqueuedState.feature.cs"];
m9_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="EnqueuedState.feature.cs"];
m9_40 [label="testRunner.Then(''the state name is equal to \'Enqueued\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="93-93", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameIsEnqueued()", file="EnqueuedState.feature.cs", color=red, community=0];
m9_0 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="EnqueuedState.feature.cs"];
m9_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="EnqueuedState.feature.cs"];
m9_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Enqueued state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="EnqueuedState.feature.cs"];
m9_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="EnqueuedState.feature.cs"];
m9_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="EnqueuedState.feature.cs"];
m9_39 [label="this.FeatureBackground()", span="91-91", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameIsEnqueued()", file="EnqueuedState.feature.cs"];
m9_26 [label="Exit lambda expression", span="36-45", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_27 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="EnqueuedState.feature.cs"];
m9_28 [label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", span="51-51", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="EnqueuedState.feature.cs"];
m9_9 [label="Entry SqlServerDistributedLock.cstr", span="", cluster="SqlServerDistributedLock.cstr", file="EnqueuedState.feature.cs"];
m9_10 [label="Entry Mock<IDbConnection>.cstr", span="", cluster="Mock<IDbConnection>.cstr", file="EnqueuedState.feature.cs"];
m9_35 [label="releaseLock.Set()", span="73-73", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="EnqueuedState.feature.cs"];
m9_67 [label="Exit lambda expression", span="80-89", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_68 [label="Entry Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", span="83-83", cluster="Hangfire.SqlServer.SqlServerDistributedLock.Dispose()", file="EnqueuedState.feature.cs"];
m9_69 [label="var connection = ConnectionUtils.CreateConnection()", span="94-94", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="EnqueuedState.feature.cs"];
m9_70 [label="action(connection)", span="96-96", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="EnqueuedState.feature.cs"];
m9_71 [label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", span="92-92", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="EnqueuedState.feature.cs"];
m9_72 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="EnqueuedState.feature.cs"];
m9_73 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", color=red, community=0, file="EnqueuedState.feature.cs"];
m9_74 [label="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts", span="", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="EnqueuedState.feature.cs"];
m9_75 [label=releaseLock, span="", cluster="HangFire.Tests.States.EnqueuedStateFeature.AfterUnapplyingItShouldNotRemoveTheJobFromTheQueue()", file="EnqueuedState.feature.cs"];
m9_42 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.StateNameIsEnqueued()", span="85-85", cluster="HangFire.Tests.States.EnqueuedStateFeature.StateNameIsEnqueued()", file="EnqueuedState.feature.cs"];
m9_4 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.EnqueuedStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="EnqueuedState.feature.cs"];
m9_36 [label="thread.Join()", span="74-74", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="EnqueuedState.feature.cs"];
m9_37 [label="Exit Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", span="51-51", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", color=red, community=0, file="EnqueuedState.feature.cs"];
m9_38 [label="Entry System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", span="0-0", cluster="System.Threading.ManualResetEventSlim.ManualResetEventSlim(bool)", file="EnqueuedState.feature.cs"];
m9_41 [label="Entry System.Threading.ManualResetEventSlim.Wait()", span="0-0", cluster="System.Threading.ManualResetEventSlim.Wait()", file="EnqueuedState.feature.cs"];
m9_45 [label="UseConnection(connection1 =>\r\n                {\r\n                    using (new SqlServerDistributedLock(''exclusive'', _timeout, connection1))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                })", span="57-64", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_46 [label="Exit lambda expression", span="57-64", cluster="lambda expression", color=red, community=0, file="EnqueuedState.feature.cs"];
m9_47 [label="Entry Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", span="92-92", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.UseConnection(System.Action<SqlConnection>)", file="EnqueuedState.feature.cs"];
m9_48 [label="Entry lambda expression", span="57-64", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_49 [label="new SqlServerDistributedLock(''exclusive'', _timeout, connection1)", span="59-59", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_50 [label="lockAcquired.Set()", span="61-61", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_51 [label="releaseLock.Wait()", span="62-62", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_52 [label="Exit lambda expression", span="57-64", cluster="lambda expression", color=red, community=0, file="EnqueuedState.feature.cs"];
m9_53 [label="Entry lambda expression", span="69-71", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_54 [label="Assert.Throws<SqlServerDistributedLockException>(\r\n                    () => new SqlServerDistributedLock(''exclusive'', _timeout, connection2))", span="70-71", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_7 [label="new SqlServerDistributedLock('''', _timeout, new Mock<IDbConnection>().Object)", span="19-19", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_18 [label="Entry HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", file="EnqueuedState.feature.cs"];
m9_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", file="EnqueuedState.feature.cs"];
m9_20 [label="Exit HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.States.EnqueuedStateFeature.ScenarioTearDown()", file="EnqueuedState.feature.cs"];
m9_66 [label="Assert.Equal(''NoLock'', lockMode)", span="88-88", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_56 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_22 [label="Entry lambda expression", span="36-45", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_23 [label="var distributedLock = new SqlServerDistributedLock(''hello'', _timeout, sql)", span="39-39", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_24 [label="var lockMode = sql.Query<string>(\r\n                    ''select applock_mode('public', 'hello', 'session')'').Single()", span="41-42", cluster="lambda expression", file="EnqueuedState.feature.cs"];
m9_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="EnqueuedState.feature.cs"];
m9_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="EnqueuedState.feature.cs"];
m9_44 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="EnqueuedState.feature.cs"];
m9_55 [label="Entry TechTalk.SpecFlow.Table.cstr", span="", cluster="TechTalk.SpecFlow.Table.cstr", file="EnqueuedState.feature.cs"];
m9_34 [label="UseConnection(connection2 => \r\n                Assert.Throws<SqlServerDistributedLockException>(\r\n                    () => new SqlServerDistributedLock(''exclusive'', _timeout, connection2)))", span="69-71", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="EnqueuedState.feature.cs"];
m9_30 [label="var lockAcquired = new ManualResetEventSlim(false)", span="54-54", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="EnqueuedState.feature.cs"];
m9_31 [label="var thread = new Thread(\r\n                () => UseConnection(connection1 =>\r\n                {\r\n                    using (new SqlServerDistributedLock(''exclusive'', _timeout, connection1))\r\n                    {\r\n                        lockAcquired.Set();\r\n                        releaseLock.Wait();\r\n                    }\r\n                }))", span="56-64", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="EnqueuedState.feature.cs"];
m9_32 [label="thread.Start()", span="65-65", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="EnqueuedState.feature.cs"];
m9_33 [label="lockAcquired.Wait()", span="67-67", cluster="Hangfire.SqlServer.Tests.SqlServerDistributedLockFacts.Ctor_ThrowsAnException_IfLockCanNotBeGranted()", file="EnqueuedState.feature.cs"];
m9_76 [label=lockAcquired, span="", file="EnqueuedState.feature.cs"];
m9_77 [label=SqlConnection, span="", file="EnqueuedState.feature.cs"];
m11_0 [label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="11-11", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="FailedState.feature.cs"];
m11_1 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerProcessingJob(null, Queue))", span="13-14", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="FailedState.feature.cs"];
m11_2 [label="Assert.Equal(''jobId'', exception.ParamName)", span="16-16", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="FailedState.feature.cs"];
m11_3 [label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", span="11-11", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenJobIdIsNull()", file="FailedState.feature.cs"];
m11_4 [label="Entry Unk.>", span="", cluster="Unk.>", file="FailedState.feature.cs"];
m11_17 [label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="29-29", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="FailedState.feature.cs"];
m11_18 [label="var processingJob = new SqlServerProcessingJob(JobId, Queue)", span="31-31", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="FailedState.feature.cs"];
m11_19 [label="Assert.Equal(JobId, processingJob.JobId)", span="33-33", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="FailedState.feature.cs"];
m11_20 [label="Assert.Equal(Queue, processingJob.Queue)", span="34-34", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="FailedState.feature.cs"];
m11_21 [label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", span="29-29", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_CorrectlySets_AllInstanceProperties()", file="FailedState.feature.cs"];
m11_5 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="FailedState.feature.cs"];
m11_9 [label="Entry HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", span="23-23", cluster="HangFire.SqlServer.SqlServerProcessingJob.SqlServerProcessingJob(string, string)", file="FailedState.feature.cs"];
m11_14 [label="Entry lambda expression", span="23-23", cluster="lambda expression", file="FailedState.feature.cs"];
m11_6 [label="Entry lambda expression", span="14-14", cluster="lambda expression", file="FailedState.feature.cs"];
m11_7 [label="new SqlServerProcessingJob(null, Queue)", span="14-14", cluster="lambda expression", file="FailedState.feature.cs"];
m11_8 [label="Exit lambda expression", span="14-14", cluster="lambda expression", file="FailedState.feature.cs"];
m11_15 [label="new SqlServerProcessingJob(JobId, null)", span="23-23", cluster="lambda expression", file="FailedState.feature.cs"];
m11_16 [label="Exit lambda expression", span="23-23", cluster="lambda expression", file="FailedState.feature.cs"];
m11_10 [label="Entry HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="20-20", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="FailedState.feature.cs"];
m11_11 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerProcessingJob(JobId, null))", span="22-23", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="FailedState.feature.cs"];
m11_12 [label="Assert.Equal(''queue'', exception.ParamName)", span="25-25", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="FailedState.feature.cs"];
m11_13 [label="Exit HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", span="20-20", cluster="HangFire.SqlServer.Tests.SqlServerProcessingJobFacts.Ctor_ThrowsAnException_WhenQueueIsNull()", file="FailedState.feature.cs"];
m12_54 [label="Entry System.Diagnostics.Stopwatch.StartNew()", span="0-0", cluster="System.Diagnostics.Stopwatch.StartNew()", file="GlobalJobFilterCollection.cs"];
m12_6 [label="Exit HangFire.Filters.GlobalJobFilterCollection.Clear()", span="43-43", cluster="HangFire.Filters.GlobalJobFilterCollection.Clear()", file="GlobalJobFilterCollection.cs"];
m12_7 [label="Entry System.Collections.Generic.List<T>.Clear()", span="0-0", cluster="System.Collections.Generic.List<T>.Clear()", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_8 [label="Entry HangFire.Filters.GlobalJobFilterCollection.Contains(HangFire.Filters.IJobFilter)", span="53-53", cluster="HangFire.Filters.GlobalJobFilterCollection.Contains(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs"];
m12_9 [label="return _filters.Contains(filter);", span="55-55", cluster="HangFire.Filters.GlobalJobFilterCollection.Contains(HangFire.Filters.IJobFilter)", color=red, community=0, file="GlobalJobFilterCollection.cs"];
m12_10 [label="Exit HangFire.Filters.GlobalJobFilterCollection.Contains(HangFire.Filters.IJobFilter)", span="53-53", cluster="HangFire.Filters.GlobalJobFilterCollection.Contains(HangFire.Filters.IJobFilter)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_11 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_13 [label="_filters.RemoveAll(x => x == filter)", span="64-64", cluster="HangFire.Filters.GlobalJobFilterCollection.Remove(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs"];
m12_12 [label="Entry HangFire.Filters.GlobalJobFilterCollection.Remove(HangFire.Filters.IJobFilter)", span="62-62", cluster="HangFire.Filters.GlobalJobFilterCollection.Remove(HangFire.Filters.IJobFilter)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_14 [label="Exit HangFire.Filters.GlobalJobFilterCollection.Remove(HangFire.Filters.IJobFilter)", span="62-62", cluster="HangFire.Filters.GlobalJobFilterCollection.Remove(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs"];
m12_15 [label="Entry System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)", span="0-0", cluster="System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)", file="GlobalJobFilterCollection.cs"];
m12_16 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="GlobalJobFilterCollection.cs"];
m12_22 [label="Entry System.Collections.Generic.List<T>.GetEnumerator()", span="0-0", cluster="System.Collections.Generic.List<T>.GetEnumerator()", file="GlobalJobFilterCollection.cs"];
m12_23 [label="Entry HangFire.Filters.GlobalJobFilterCollection.System.Collections.IEnumerable.GetEnumerator()", span="72-72", cluster="HangFire.Filters.GlobalJobFilterCollection.System.Collections.IEnumerable.GetEnumerator()", file="GlobalJobFilterCollection.cs"];
m12_24 [label="return GetEnumerator();", span="74-74", cluster="HangFire.Filters.GlobalJobFilterCollection.System.Collections.IEnumerable.GetEnumerator()", file="GlobalJobFilterCollection.cs"];
m12_58 [label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="26-26", cluster="Hangfire.States.FailedState.FailedState(System.Exception)", file="GlobalJobFilterCollection.cs"];
m12_17 [label="x == filter", span="64-64", cluster="lambda expression", file="GlobalJobFilterCollection.cs"];
m12_4 [label="Exit Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext)", span="28-28", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext)", file="GlobalJobFilterCollection.cs"];
m12_5 [label="_filters.Clear()", span="45-45", cluster="HangFire.Filters.GlobalJobFilterCollection.Clear()", file="GlobalJobFilterCollection.cs"];
m12_47 [label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22", cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="GlobalJobFilterCollection.cs"];
m12_19 [label="Entry Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", span="71-71", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_20 [label="Entry Hangfire.Storage.IFetchedJob.RemoveFromQueue()", span="24-24", cluster="Hangfire.Storage.IFetchedJob.RemoveFromQueue()", file="GlobalJobFilterCollection.cs"];
m12_21 [label="Entry Hangfire.Storage.IFetchedJob.Requeue()", span="25-25", cluster="Hangfire.Storage.IFetchedJob.Requeue()", file="GlobalJobFilterCollection.cs"];
m12_57 [label="Entry Hangfire.States.SucceededState.SucceededState(object, long, long)", span="28-28", cluster="Hangfire.States.SucceededState.SucceededState(object, long, long)", file="GlobalJobFilterCollection.cs"];
m12_56 [label="Entry System.Diagnostics.Stopwatch.Stop()", span="0-0", cluster="System.Diagnostics.Stopwatch.Stop()", file="GlobalJobFilterCollection.cs"];
m12_48 [label="Entry Hangfire.States.ProcessingState.ProcessingState(string, int)", span="27-27", cluster="Hangfire.States.ProcessingState.ProcessingState(string, int)", file="GlobalJobFilterCollection.cs"];
m12_50 [label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42", cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)", file="GlobalJobFilterCollection.cs"];
m12_52 [label="Entry Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, System.Threading.CancellationToken)", span="32-32", cluster="Hangfire.Server.ServerJobCancellationToken.ServerJobCancellationToken(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.WorkerContext, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_27 [label="HangFire.Filters.IJobFilter", span="", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_25 [label="Exit HangFire.Filters.GlobalJobFilterCollection.System.Collections.IEnumerable.GetEnumerator()", span="72-72", cluster="HangFire.Filters.GlobalJobFilterCollection.System.Collections.IEnumerable.GetEnumerator()", file="GlobalJobFilterCollection.cs"];
m12_26 [label="HangFire.Filters.GlobalJobFilterCollection", span="", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_28 [label="return;", span="85-85", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_29 [label="IState state", span="93-93", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_32 [label="var cancellationToken = new ServerJobCancellationToken(\r\n                    jobId, connection, _context, shutdownToken)", span="100-101", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_31 [label="jobData.EnsureLoaded()", span="98-98", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_33 [label="var performContext = new PerformContext(\r\n                    _context, connection, jobId, jobData.Job, jobData.CreatedAt, cancellationToken)", span="103-104", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_30 [label="var jobData = connection.GetJobData(jobId)", span="97-97", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_34 [label="var latency = (DateTime.UtcNow - jobData.CreatedAt).TotalMilliseconds", span="106-106", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_36 [label="var result = process.Run(performContext, jobData.Job)", span="109-109", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_35 [label="var duration = Stopwatch.StartNew()", span="107-107", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_37 [label="duration.Stop()", span="110-110", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_38 [label="state = new SucceededState(result, (long) latency, duration.ElapsedMilliseconds)", span="112-112", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", color=green, community=0, file="GlobalJobFilterCollection.cs"];
m12_39 [label=OperationCanceledException, span="114-114", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_41 [label=JobPerformanceException, span="118-118", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_43 [label=Exception, span="125-125", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_45 [label="stateMachine.ChangeState(jobId, state, new[] { ProcessingState.StateName })", span="135-135", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_40 [label="throw;", span="116-116", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_42 [label="state = new FailedState(ex.InnerException)\r\n                {\r\n                    Reason = ex.Message\r\n                }", span="120-123", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_44 [label="state = new FailedState(ex)\r\n                {\r\n                    Reason = ''Internal Hangfire Server exception occurred. Please, report it to Hangfire developers.''\r\n                }", span="127-130", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_46 [label="Exit Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", span="71-71", cluster="Hangfire.Server.Worker.ProcessJob(string, Hangfire.Storage.IStorageConnection, Hangfire.Server.IJobPerformanceProcess, System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_53 [label="Entry Hangfire.Server.PerformContext.PerformContext(Hangfire.Server.WorkerContext, Hangfire.Storage.IStorageConnection, string, Hangfire.Common.Job, System.DateTime, Hangfire.IJobCancellationToken)", span="35-35", cluster="Hangfire.Server.PerformContext.PerformContext(Hangfire.Server.WorkerContext, Hangfire.Storage.IStorageConnection, string, Hangfire.Common.Job, System.DateTime, Hangfire.IJobCancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_55 [label="Entry Hangfire.Server.IJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", span="20-20", cluster="Hangfire.Server.IJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", file="GlobalJobFilterCollection.cs"];
m12_49 [label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="22-22", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="GlobalJobFilterCollection.cs"];
m12_18 [label="Entry Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="36-36", cluster="Hangfire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="GlobalJobFilterCollection.cs"];
m12_3 [label="_context = context", span="32-32", cluster="Hangfire.Server.Worker.Worker(Hangfire.Server.WorkerContext)", file="GlobalJobFilterCollection.cs"];
m12_0 [label="Entry HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", span="35-35", cluster="HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs"];
m12_1 [label="_filters.Add(filter)", span="37-37", cluster="HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs", color=red, community=0];
m12_2 [label="Exit HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", span="35-35", cluster="HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs"];
m12_51 [label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29", cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="GlobalJobFilterCollection.cs"];
m12_59 [label="Hangfire.Server.Worker", span="", file="GlobalJobFilterCollection.cs"];
m13_81 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="HangFireConfig.cs"];
m13_9 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheMethodIsNull()", span="19-19", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheMethodIsNull()", file="HangFireConfig.cs"];
m13_10 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new JobMethod(typeof (TestJob), null))", span="21-22", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheMethodIsNull()", file="HangFireConfig.cs"];
m13_11 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheMethodIsNull()", span="19-19", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheMethodIsNull()", file="HangFireConfig.cs"];
m13_29 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="HangFireConfig.cs"];
m13_42 [label="Entry HangFire.Common.JobMethod.Deserialize(HangFire.Storage.InvocationData)", span="91-91", cluster="HangFire.Common.JobMethod.Deserialize(HangFire.Storage.InvocationData)", file="HangFireConfig.cs"];
m13_49 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.Deserialize_WrapsAnException_WithTheJobLoadException()", span="71-71", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_WrapsAnException_WithTheJobLoadException()", file="HangFireConfig.cs"];
m13_50 [label="var serializedData = new InvocationData()", span="73-73", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_WrapsAnException_WithTheJobLoadException()", file="HangFireConfig.cs"];
m13_51 [label="Assert.Throws<JobLoadException>(\r\n                () => JobMethod.Deserialize(serializedData))", span="75-76", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_WrapsAnException_WithTheJobLoadException()", file="HangFireConfig.cs"];
m13_52 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.Deserialize_WrapsAnException_WithTheJobLoadException()", span="71-71", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_WrapsAnException_WithTheJobLoadException()", file="HangFireConfig.cs"];
m13_8 [label="Entry System.Type.GetMethod(string)", span="0-0", cluster="System.Type.GetMethod(string)", file="HangFireConfig.cs"];
m13_56 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", span="80-80", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", file="HangFireConfig.cs"];
m13_57 [label="var serializedData = new InvocationData\r\n            {\r\n                Type = ''NonExistingType'',\r\n                Method = ''Perform'',\r\n                ParameterTypes = '''',\r\n            }", span="82-87", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", file="HangFireConfig.cs"];
m13_58 [label="Assert.Throws<JobLoadException>(\r\n                () => JobMethod.Deserialize(serializedData))", span="89-90", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", file="HangFireConfig.cs"];
m13_59 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", span="80-80", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenTypeCanNotBeFound()", file="HangFireConfig.cs"];
m13_3 [label="Entry Unk.>", span="", cluster="Unk.>", file="HangFireConfig.cs"];
m13_63 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", span="94-94", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", file="HangFireConfig.cs"];
m13_64 [label="var serializedData = new InvocationData\r\n            {\r\n                Type = typeof (TestJob).AssemblyQualifiedName,\r\n                Method = ''NonExistingMethod'',\r\n                ParameterTypes = JobHelper.ToJson(new Type[0])\r\n            }", span="96-101", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", file="HangFireConfig.cs"];
m13_65 [label="Assert.Throws<JobLoadException>(\r\n                () => JobMethod.Deserialize(serializedData))", span="103-104", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", file="HangFireConfig.cs"];
m13_66 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", span="94-94", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenMethodCanNotBeFound()", file="HangFireConfig.cs"];
m13_7 [label="Entry HangFire.Common.JobMethod.JobMethod(System.Type, System.Reflection.MethodInfo)", span="48-48", cluster="HangFire.Common.JobMethod.JobMethod(System.Type, System.Reflection.MethodInfo)", file="HangFireConfig.cs"];
m13_30 [label="Entry Unk.False", span="", cluster="Unk.False", file="HangFireConfig.cs"];
m13_80 [label="Entry HangFire.Common.JobMethod.GetTypeFilterAttributes(bool)", span="134-134", cluster="HangFire.Common.JobMethod.GetTypeFilterAttributes(bool)", file="HangFireConfig.cs"];
m13_104 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", span="159-159", cluster="HangFire.Core.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", file="HangFireConfig.cs"];
m13_105 [label="var serializedData = new InvocationData\r\n            {\r\n                Type = typeof (TestJob).AssemblyQualifiedName\r\n            }", span="161-164", cluster="HangFire.Core.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", file="HangFireConfig.cs"];
m13_106 [label="JobMethod.Deserialize(serializedData)", span="166-166", cluster="HangFire.Core.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", file="HangFireConfig.cs"];
m13_107 [label="Assert.Null(serializedData.Method)", span="167-167", cluster="HangFire.Core.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", file="HangFireConfig.cs"];
m13_108 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", span="159-159", cluster="HangFire.Core.Tests.Client.JobMethodTests.SerializedData_IsNotBeingChanged_DuringTheDeserialization()", file="HangFireConfig.cs"];
m13_92 [label="Entry HangFire.Common.JobMethod.GetMethodFilterAttributes(bool)", span="141-141", cluster="HangFire.Common.JobMethod.GetMethodFilterAttributes(bool)", file="HangFireConfig.cs"];
m13_109 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="HangFireConfig.cs"];
m13_0 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeIsNull()", span="12-12", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeIsNull()", file="HangFireConfig.cs"];
m13_1 [label="Assert.Throws<ArgumentNullException>(\r\n                () => new JobMethod(null, typeof (TestJob).GetMethod(''Perform'')))", span="14-15", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeIsNull()", file="HangFireConfig.cs"];
m13_2 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeIsNull()", span="12-12", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeIsNull()", file="HangFireConfig.cs"];
m13_31 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", span="45-45", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="HangFireConfig.cs"];
m13_32 [label="var type = typeof(TestJob)", span="47-47", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="HangFireConfig.cs"];
m13_33 [label="var methodInfo = type.GetMethod(''Perform'')", span="48-48", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="HangFireConfig.cs"];
m13_34 [label="var serializedData = new InvocationData\r\n            {\r\n                Type = type.AssemblyQualifiedName,\r\n                Method = methodInfo.Name,\r\n                ParameterTypes = JobHelper.ToJson(new Type[0])\r\n            }", span="49-54", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="HangFireConfig.cs"];
m13_36 [label="Assert.Equal(type, method.Type)", span="58-58", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="HangFireConfig.cs"];
m13_37 [label="Assert.Equal(methodInfo, method.Method)", span="59-59", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="HangFireConfig.cs"];
m13_35 [label="var method = JobMethod.Deserialize(serializedData)", span="56-56", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="HangFireConfig.cs"];
m13_38 [label="Assert.False(method.OldFormat)", span="60-60", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="HangFireConfig.cs"];
m13_39 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", span="45-45", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_CorrectlyDeserializes_AllTheData()", file="HangFireConfig.cs"];
m13_67 [label="Entry lambda expression", span="104-104", cluster="lambda expression", file="HangFireConfig.cs"];
m13_4 [label="Entry lambda expression", span="15-15", cluster="lambda expression", file="HangFireConfig.cs"];
m13_5 [label="new JobMethod(null, typeof (TestJob).GetMethod(''Perform''))", span="15-15", cluster="lambda expression", file="HangFireConfig.cs"];
m13_6 [label="Exit lambda expression", span="15-15", cluster="lambda expression", file="HangFireConfig.cs"];
m13_12 [label="Entry lambda expression", span="22-22", cluster="lambda expression", file="HangFireConfig.cs"];
m13_13 [label="new JobMethod(typeof (TestJob), null)", span="22-22", cluster="lambda expression", file="HangFireConfig.cs"];
m13_14 [label="Exit lambda expression", span="22-22", cluster="lambda expression", file="HangFireConfig.cs"];
m13_18 [label="Entry lambda expression", span="29-29", cluster="lambda expression", file="HangFireConfig.cs"];
m13_19 [label="new JobMethod(typeof (JobMethod), typeof (TestJob).GetMethod(''Perform''))", span="29-29", cluster="lambda expression", color=red, community=0, file="HangFireConfig.cs"];
m13_20 [label="Exit lambda expression", span="29-29", cluster="lambda expression", file="HangFireConfig.cs"];
m13_46 [label="Entry lambda expression", span="67-67", cluster="lambda expression", file="HangFireConfig.cs"];
m13_47 [label="JobMethod.Deserialize(null)", span="67-67", cluster="lambda expression", file="HangFireConfig.cs"];
m13_48 [label="Exit lambda expression", span="67-67", cluster="lambda expression", file="HangFireConfig.cs"];
m13_54 [label="JobMethod.Deserialize(serializedData)", span="76-76", cluster="lambda expression", file="HangFireConfig.cs"];
m13_53 [label="Entry lambda expression", span="76-76", cluster="lambda expression", file="HangFireConfig.cs"];
m13_55 [label="Exit lambda expression", span="76-76", cluster="lambda expression", file="HangFireConfig.cs"];
m13_61 [label="JobMethod.Deserialize(serializedData)", span="90-90", cluster="lambda expression", file="HangFireConfig.cs"];
m13_60 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="HangFireConfig.cs"];
m13_62 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="HangFireConfig.cs"];
m13_68 [label="JobMethod.Deserialize(serializedData)", span="104-104", cluster="lambda expression", file="HangFireConfig.cs"];
m13_69 [label="Exit lambda expression", span="104-104", cluster="lambda expression", file="HangFireConfig.cs"];
m13_41 [label="Entry HangFire.Common.JobHelper.ToJson(object)", span="23-23", cluster="HangFire.Common.JobHelper.ToJson(object)", file="HangFireConfig.cs"];
m13_43 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenSerializedDataIsNull()", span="64-64", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenSerializedDataIsNull()", file="HangFireConfig.cs"];
m13_44 [label="Assert.Throws<ArgumentNullException>(\r\n                () => JobMethod.Deserialize(null))", span="66-67", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenSerializedDataIsNull()", file="HangFireConfig.cs"];
m13_45 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenSerializedDataIsNull()", span="64-64", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialize_ThrowsAnException_WhenSerializedDataIsNull()", file="HangFireConfig.cs"];
m13_83 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", span="122-122", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_84 [label="var method = GetCorrectMethod()", span="124-124", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_85 [label="var nonCachedAttributes = method.GetMethodFilterAttributes(false).ToArray()", span="125-125", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_86 [label="var cachedAttributes = method.GetMethodFilterAttributes(true).ToArray()", span="126-126", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_87 [label="Assert.Equal(1, nonCachedAttributes.Length)", span="128-128", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_89 [label="Assert.True(nonCachedAttributes[0] is TestMethodAttribute)", span="131-131", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_88 [label="Assert.Equal(1, cachedAttributes.Length)", span="129-129", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_90 [label="Assert.True(cachedAttributes[0] is TestMethodAttribute)", span="132-132", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_91 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", span="122-122", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetMethodFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_21 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", span="33-33", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="HangFireConfig.cs"];
m13_22 [label="var type = typeof (TestJob)", span="35-35", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="HangFireConfig.cs"];
m13_23 [label="var methodInfo = type.GetMethod(''Perform'')", span="36-36", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="HangFireConfig.cs"];
m13_24 [label="var method = new JobMethod(type, methodInfo)", span="37-37", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="HangFireConfig.cs"];
m13_25 [label="Assert.Equal(type, method.Type)", span="39-39", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="HangFireConfig.cs"];
m13_26 [label="Assert.Equal(methodInfo, method.Method)", span="40-40", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="HangFireConfig.cs"];
m13_27 [label="Assert.False(method.OldFormat)", span="41-41", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="HangFireConfig.cs"];
m13_28 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", span="33-33", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_CorrectlySets_PropertyValues()", file="HangFireConfig.cs"];
m13_70 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", span="108-108", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_71 [label="var method = GetCorrectMethod()", span="110-110", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_72 [label="var nonCachedAttributes = method.GetTypeFilterAttributes(false).ToArray()", span="111-111", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_73 [label="var cachedAttributes = method.GetTypeFilterAttributes(true).ToArray()", span="112-112", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_74 [label="Assert.Equal(1, nonCachedAttributes.Length)", span="114-114", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_76 [label="Assert.True(nonCachedAttributes[0] is TestTypeAttribute)", span="117-117", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_75 [label="Assert.Equal(1, cachedAttributes.Length)", span="115-115", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_77 [label="Assert.True(cachedAttributes[0] is TestTypeAttribute)", span="118-118", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_78 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", span="108-108", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetTypeFilterAttributes_ReturnsCorrectAttributes()", file="HangFireConfig.cs"];
m13_79 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.GetCorrectMethod()", span="135-135", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetCorrectMethod()", file="HangFireConfig.cs"];
m13_93 [label="var type = typeof(TestJob)", span="137-137", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetCorrectMethod()", file="HangFireConfig.cs"];
m13_94 [label="var methodInfo = type.GetMethod(''Perform'')", span="138-138", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetCorrectMethod()", file="HangFireConfig.cs"];
m13_95 [label="return new JobMethod(type, methodInfo);", span="139-139", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetCorrectMethod()", file="HangFireConfig.cs"];
m13_96 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.GetCorrectMethod()", span="135-135", cluster="HangFire.Core.Tests.Client.JobMethodTests.GetCorrectMethod()", file="HangFireConfig.cs"];
m13_82 [label="Entry Unk.True", span="", cluster="Unk.True", file="HangFireConfig.cs"];
m13_110 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.TestJob.Perform()", span="182-182", cluster="HangFire.Core.Tests.Client.JobMethodTests.TestJob.Perform()", file="HangFireConfig.cs"];
m13_111 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.TestJob.Perform()", span="182-182", cluster="HangFire.Core.Tests.Client.JobMethodTests.TestJob.Perform()", file="HangFireConfig.cs"];
m13_15 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeDoesNotContainTheGivenMethod()", span="26-26", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeDoesNotContainTheGivenMethod()", file="HangFireConfig.cs"];
m13_16 [label="Assert.Throws<ArgumentException>(\r\n                () => new JobMethod(typeof (JobMethod), typeof (TestJob).GetMethod(''Perform'')))", span="28-29", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeDoesNotContainTheGivenMethod()", color=red, community=0, file="HangFireConfig.cs"];
m13_17 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeDoesNotContainTheGivenMethod()", span="26-26", cluster="HangFire.Core.Tests.Client.JobMethodTests.Ctor_ThrowsAnException_WhenTheTypeDoesNotContainTheGivenMethod()", file="HangFireConfig.cs"];
m13_40 [label="Entry HangFire.Storage.InvocationData.InvocationData()", span="2-2", cluster="HangFire.Storage.InvocationData.InvocationData()", file="HangFireConfig.cs"];
m13_97 [label="Entry HangFire.Core.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", span="145-145", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="HangFireConfig.cs"];
m13_98 [label="var serializedData = new InvocationData\r\n            {\r\n                Type = typeof (TestJob).AssemblyQualifiedName\r\n            }", span="147-150", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="HangFireConfig.cs"];
m13_99 [label="var method = JobMethod.Deserialize(serializedData)", span="152-152", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="HangFireConfig.cs"];
m13_100 [label="Assert.Equal(typeof(TestJob), method.Type)", span="153-153", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="HangFireConfig.cs"];
m13_101 [label="Assert.Equal(typeof(TestJob).GetMethod(''Perform''), method.Method)", span="154-154", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="HangFireConfig.cs"];
m13_102 [label="Assert.True(method.OldFormat)", span="155-155", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="HangFireConfig.cs"];
m13_103 [label="Exit HangFire.Core.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", span="145-145", cluster="HangFire.Core.Tests.Client.JobMethodTests.Deserialization_FromTheOldFormat_CorrectlySerializesBothTypeAndMethod()", file="HangFireConfig.cs"];
m13_112 [label=serializedData, span="", file="HangFireConfig.cs"];
m13_113 [label=serializedData, span="", file="HangFireConfig.cs"];
m13_114 [label=serializedData, span="", file="HangFireConfig.cs"];
m14_4 [label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory)", span="53-53", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory)", file="HistoryStatisticsFilter.cs"];
m14_5 [label="Exit Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory)", span="53-53", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory)", file="HistoryStatisticsFilter.cs"];
m14_30 [label="Entry Hangfire.JobStorage.GetConnection()", span="56-56", cluster="Hangfire.JobStorage.GetConnection()", file="HistoryStatisticsFilter.cs"];
m14_35 [label="Entry Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="HistoryStatisticsFilter.cs"];
m14_36 [label="jobId == null", span="104-104", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="HistoryStatisticsFilter.cs"];
m14_38 [label="state == null", span="105-105", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="HistoryStatisticsFilter.cs"];
m14_42 [label="return stateMachine.ChangeState(jobId, state, fromState != null ? new[] { fromState } : null);", span="110-110", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="HistoryStatisticsFilter.cs"];
m14_37 [label="throw new ArgumentNullException(''jobId'');", span="104-104", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="HistoryStatisticsFilter.cs"];
m14_39 [label="throw new ArgumentNullException(''state'');", span="105-105", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="HistoryStatisticsFilter.cs"];
m14_40 [label="var connection = _storage.GetConnection()", span="107-107", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="HistoryStatisticsFilter.cs"];
m14_41 [label="var stateMachine = _stateMachineFactory.Create(connection)", span="109-109", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="HistoryStatisticsFilter.cs"];
m14_43 [label="Exit Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", span="102-102", cluster="Hangfire.BackgroundJobClient.ChangeState(string, Hangfire.States.IState, string)", file="HistoryStatisticsFilter.cs"];
m14_0 [label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient()", span="38-38", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient()", file="HistoryStatisticsFilter.cs"];
m14_1 [label="Exit Hangfire.BackgroundJobClient.BackgroundJobClient()", span="38-38", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient()", file="HistoryStatisticsFilter.cs"];
m14_33 [label="Entry Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext, Hangfire.Client.IJobCreator)", span="32-32", cluster="Hangfire.Client.IJobCreationProcess.Run(Hangfire.Client.CreateContext, Hangfire.Client.IJobCreator)", file="HistoryStatisticsFilter.cs"];
m14_44 [label="Entry Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="24-24", cluster="Hangfire.States.IStateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="HistoryStatisticsFilter.cs"];
m14_6 [label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", span="65-65", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="HistoryStatisticsFilter.cs"];
m14_7 [label="storage == null", span="70-70", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="HistoryStatisticsFilter.cs"];
m14_9 [label="stateMachineFactory == null", span="71-71", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="HistoryStatisticsFilter.cs"];
m14_11 [label="process == null", span="72-72", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="HistoryStatisticsFilter.cs"];
m14_13 [label="_storage = storage", span="74-74", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="HistoryStatisticsFilter.cs"];
m14_14 [label="_stateMachineFactory = stateMachineFactory", span="75-75", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="HistoryStatisticsFilter.cs"];
m14_15 [label="_process = process", span="76-76", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="HistoryStatisticsFilter.cs"];
m14_8 [label="throw new ArgumentNullException(''storage'');", span="70-70", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="HistoryStatisticsFilter.cs"];
m14_10 [label="throw new ArgumentNullException(''stateMachineFactory'');", span="71-71", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="HistoryStatisticsFilter.cs"];
m14_12 [label="throw new ArgumentNullException(''process'');", span="72-72", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="HistoryStatisticsFilter.cs"];
m14_16 [label="Exit Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", span="65-65", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage, Hangfire.States.IStateMachineFactory, Hangfire.Client.IJobCreationProcess)", file="HistoryStatisticsFilter.cs"];
m14_34 [label="Entry Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", span="34-34", cluster="Hangfire.Client.CreateJobFailedException.CreateJobFailedException(string, System.Exception)", file="HistoryStatisticsFilter.cs"];
m14_31 [label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="36-36", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_32 [label="Entry Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", span="22-22", cluster="Hangfire.States.IStateMachineFactory.Create(Hangfire.Storage.IStorageConnection)", file="HistoryStatisticsFilter.cs"];
m14_18 [label="Entry Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_19 [label="job == null", span="82-82", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_21 [label="state == null", span="83-83", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_24 [label="var context = new CreateContext(connection, job, state)", span="89-89", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_20 [label="throw new ArgumentNullException(''job'');", span="82-82", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_22 [label="throw new ArgumentNullException(''state'');", span="83-83", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_23 [label="var connection = _storage.GetConnection()", span="87-87", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_25 [label="var stateMachine = _stateMachineFactory.Create(connection)", span="90-90", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_26 [label="return _process.Run(context, stateMachine);", span="92-92", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_27 [label=Exception, span="95-95", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_28 [label="throw new CreateJobFailedException(''Job creation process has bee failed. See inner exception for details'', ex);", span="97-97", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_29 [label="Exit Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", span="80-80", cluster="Hangfire.BackgroundJobClient.Create(Hangfire.Common.Job, Hangfire.States.IState)", file="HistoryStatisticsFilter.cs"];
m14_2 [label="Entry Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage)", span="48-48", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage)", file="HistoryStatisticsFilter.cs"];
m14_3 [label="Exit Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage)", span="48-48", cluster="Hangfire.BackgroundJobClient.BackgroundJobClient(Hangfire.JobStorage)", file="HistoryStatisticsFilter.cs"];
m14_45 [label="Hangfire.BackgroundJobClient", span="", file="HistoryStatisticsFilter.cs"];
m15_0 [label="Entry HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", span="11-11", cluster="HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", file="IClientExceptionFilter.cs"];
m15_1 [label="Exit HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", span="11-11", cluster="HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", file="IClientExceptionFilter.cs"];
m16_2 [label="Entry HangFire.Filters.IClientFilter.OnCreated(HangFire.Filters.CreatedContext)", span="17-17", cluster="HangFire.Filters.IClientFilter.OnCreated(HangFire.Filters.CreatedContext)", file="IClientFilter.cs"];
m16_3 [label="Exit HangFire.Filters.IClientFilter.OnCreated(HangFire.Filters.CreatedContext)", span="17-17", cluster="HangFire.Filters.IClientFilter.OnCreated(HangFire.Filters.CreatedContext)", file="IClientFilter.cs"];
m16_0 [label="Entry HangFire.Filters.IClientFilter.OnCreating(HangFire.Filters.CreatingContext)", span="11-11", cluster="HangFire.Filters.IClientFilter.OnCreating(HangFire.Filters.CreatingContext)", file="IClientFilter.cs"];
m16_1 [label="Exit HangFire.Filters.IClientFilter.OnCreating(HangFire.Filters.CreatingContext)", span="11-11", cluster="HangFire.Filters.IClientFilter.OnCreating(HangFire.Filters.CreatingContext)", file="IClientFilter.cs"];
m19_0 [label="Entry HangFire.Filters.IServerExceptionFilter.OnServerException(HangFire.Filters.ServerExceptionContext)", span="11-11", cluster="HangFire.Filters.IServerExceptionFilter.OnServerException(HangFire.Filters.ServerExceptionContext)", file="IServerExceptionFilter.cs"];
m19_1 [label="Exit HangFire.Filters.IServerExceptionFilter.OnServerException(HangFire.Filters.ServerExceptionContext)", span="11-11", cluster="HangFire.Filters.IServerExceptionFilter.OnServerException(HangFire.Filters.ServerExceptionContext)", file="IServerExceptionFilter.cs"];
m20_0 [label="Entry HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="11-11", cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="IServerFilter.cs"];
m20_1 [label="Exit HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="11-11", cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="IServerFilter.cs"];
m20_2 [label="Entry HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="17-17", cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="IServerFilter.cs"];
m20_3 [label="Exit HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="17-17", cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="IServerFilter.cs"];
m21_2 [label="Entry HangFire.Filters.IStateChangedFilter.OnStateUnapplied(IRedisTransaction, string, string)", span="26-26", cluster="HangFire.Filters.IStateChangedFilter.OnStateUnapplied(IRedisTransaction, string, string)", file="IStateChangedFilter.cs"];
m21_3 [label="Exit HangFire.Filters.IStateChangedFilter.OnStateUnapplied(IRedisTransaction, string, string)", span="26-26", cluster="HangFire.Filters.IStateChangedFilter.OnStateUnapplied(IRedisTransaction, string, string)", file="IStateChangedFilter.cs"];
m21_0 [label="Entry HangFire.Filters.IStateChangedFilter.OnStateApplied(IRedisTransaction, string, HangFire.States.JobState)", span="17-17", cluster="HangFire.Filters.IStateChangedFilter.OnStateApplied(IRedisTransaction, string, HangFire.States.JobState)", file="IStateChangedFilter.cs"];
m21_1 [label="Exit HangFire.Filters.IStateChangedFilter.OnStateApplied(IRedisTransaction, string, HangFire.States.JobState)", span="17-17", cluster="HangFire.Filters.IStateChangedFilter.OnStateApplied(IRedisTransaction, string, HangFire.States.JobState)", file="IStateChangedFilter.cs"];
m22_0 [label="Entry HangFire.Filters.IStateChangingFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="21-21", cluster="HangFire.Filters.IStateChangingFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="IStateChangingFilter.cs"];
m22_1 [label="Exit HangFire.Filters.IStateChangingFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="21-21", cluster="HangFire.Filters.IStateChangingFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="IStateChangingFilter.cs"];
m23_60 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJob()", span="108-108", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="JobClientSteps.cs"];
m23_61 [label="_stateMock = new Mock<JobState>(''SomeReason'')", span="110-110", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="JobClientSteps.cs"];
m23_62 [label="_stateMock.Setup(x => x.StateName).Returns(''Test'')", span="111-111", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="JobClientSteps.cs"];
m23_63 [label="_stateMock.Setup(x => x.GetProperties()).Returns(new Dictionary<string, string>())", span="112-112", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="JobClientSteps.cs"];
m23_64 [label="_client.CreateJob(\r\n                    JobSteps.DefaultJobId,\r\n                    typeof(TestJob),\r\n                    _stateMock.Object,\r\n                    _arguments)", span="116-120", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="JobClientSteps.cs"];
m23_65 [label=Exception, span="122-122", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="JobClientSteps.cs"];
m23_66 [label="_exception = ex", span="124-124", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="JobClientSteps.cs"];
m23_67 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJob()", span="108-108", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJob()", file="JobClientSteps.cs"];
m23_0 [label="Entry HangFire.Tests.JobClientSteps.GivenAClient()", span="30-30", cluster="HangFire.Tests.JobClientSteps.GivenAClient()", file="JobClientSteps.cs"];
m23_1 [label="_client = new JobClient(\r\n                RedisFactory.BasicManager,\r\n                new JobCreator(_clientFilters, _exceptionFilters))", span="32-34", cluster="HangFire.Tests.JobClientSteps.GivenAClient()", color=red, community=0, file="JobClientSteps.cs"];
m23_2 [label="Exit HangFire.Tests.JobClientSteps.GivenAClient()", span="30-30", cluster="HangFire.Tests.JobClientSteps.GivenAClient()", file="JobClientSteps.cs"];
m23_9 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JobClientSteps.cs"];
m23_53 [label="Entry HangFire.Tests.JobClientSteps.GivenTheExceptionFilter(string)", span="95-95", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilter(string)", file="JobClientSteps.cs"];
m23_54 [label="_exceptionFilters.Add(new TestExceptionFilter(name, _exceptionFilterResults))", span="97-97", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilter(string)", color=red, community=0, file="JobClientSteps.cs"];
m23_55 [label="Exit HangFire.Tests.JobClientSteps.GivenTheExceptionFilter(string)", span="95-95", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilter(string)", file="JobClientSteps.cs"];
m23_154 [label="Entry Unk.Apply", span="", cluster="Unk.Apply", file="JobClientSteps.cs"];
m23_133 [label="Entry Unk.GetAllEntriesFromHash", span="", cluster="Unk.GetAllEntriesFromHash", file="JobClientSteps.cs"];
m23_23 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="JobClientSteps.cs"];
m23_124 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="JobClientSteps.cs"];
m23_56 [label="Entry HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", span="12-12", cluster="HangFire.Tests.TestExceptionFilter.TestExceptionFilter(string, System.Collections.Generic.IList<string>, bool)", file="JobClientSteps.cs"];
m23_19 [label="Entry HangFire.Tests.JobClientSteps.GivenTheFilterThetSetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", span="62-62", cluster="HangFire.Tests.JobClientSteps.GivenTheFilterThetSetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", file="JobClientSteps.cs"];
m23_20 [label="_parameters = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="64-64", cluster="HangFire.Tests.JobClientSteps.GivenTheFilterThetSetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", file="JobClientSteps.cs"];
m23_21 [label="_clientFilters.Add(new TestFilter(\r\n                name, \r\n                _clientFilterResults, \r\n                setOnCreatingParameters: _parameters))", span="66-69", cluster="HangFire.Tests.JobClientSteps.GivenTheFilterThetSetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", color=red, community=1, file="JobClientSteps.cs"];
m23_22 [label="Exit HangFire.Tests.JobClientSteps.GivenTheFilterThetSetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", span="62-62", cluster="HangFire.Tests.JobClientSteps.GivenTheFilterThetSetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", file="JobClientSteps.cs"];
m23_115 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJobWithANullDictionaryAsArguments()", span="194-194", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithANullDictionaryAsArguments()", file="JobClientSteps.cs"];
m23_116 [label="_client.CreateJob(JobSteps.DefaultJobId, typeof(TestJob), new Mock<JobState>(''1'').Object, null)", span="198-198", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithANullDictionaryAsArguments()", file="JobClientSteps.cs"];
m23_117 [label=Exception, span="200-200", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithANullDictionaryAsArguments()", file="JobClientSteps.cs"];
m23_118 [label="_exception = ex", span="202-202", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithANullDictionaryAsArguments()", file="JobClientSteps.cs"];
m23_119 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJobWithANullDictionaryAsArguments()", span="194-194", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithANullDictionaryAsArguments()", file="JobClientSteps.cs"];
m23_68 [label="Entry Mock<JobState>.cstr", span="", cluster="Mock<JobState>.cstr", file="JobClientSteps.cs"];
m23_196 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="JobClientSteps.cs"];
m23_99 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", span="155-155", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", file="JobClientSteps.cs"];
m23_100 [label="_client.CreateJob(JobSteps.DefaultJobId, null, new Mock<JobState>(''1'').Object, new {})", span="159-159", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", file="JobClientSteps.cs"];
m23_101 [label=Exception, span="161-161", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", file="JobClientSteps.cs"];
m23_102 [label="_exception = ex", span="163-163", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", file="JobClientSteps.cs"];
m23_103 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", span="155-155", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithNullType()", file="JobClientSteps.cs"];
m23_174 [label="Entry HangFire.Tests.JobClientSteps.ThenTheClientFilterWasExecuted()", span="277-277", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterWasExecuted()", file="JobClientSteps.cs"];
m23_175 [label="Assert.AreNotEqual(0, _exceptionFilterResults.Count)", span="279-279", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterWasExecuted()", file="JobClientSteps.cs"];
m23_176 [label="Exit HangFire.Tests.JobClientSteps.ThenTheClientFilterWasExecuted()", span="277-277", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterWasExecuted()", file="JobClientSteps.cs"];
m23_146 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="JobClientSteps.cs"];
m23_166 [label="Entry HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", span="265-265", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", file="JobClientSteps.cs"];
m23_167 [label="Assert.AreEqual(table.RowCount, _clientFilterResults.Count)", span="267-267", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", file="JobClientSteps.cs"];
m23_169 [label="i < table.RowCount", span="269-269", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", file="JobClientSteps.cs"];
m23_170 [label="var method = table.Rows[i][''Method'']", span="271-271", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", file="JobClientSteps.cs"];
m23_168 [label="var i = 0", span="269-269", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", file="JobClientSteps.cs"];
m23_171 [label="Assert.AreEqual(method, _clientFilterResults[i])", span="272-272", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", file="JobClientSteps.cs"];
m23_172 [label="i++", span="269-269", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", file="JobClientSteps.cs"];
m23_173 [label="Exit HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", span="265-265", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterMethodsWereExecuted(Table)", file="JobClientSteps.cs"];
m23_144 [label="Entry Unk.>", span="", cluster="Unk.>", file="JobClientSteps.cs"];
m23_13 [label="Entry HangFire.Tests.JobClientSteps.GivenTheClientFilterThatHandlesAnException(string)", span="50-50", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatHandlesAnException(string)", file="JobClientSteps.cs"];
m23_14 [label="_clientFilters.Add(new TestFilter(name, _clientFilterResults, false, false, true))", span="52-52", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatHandlesAnException(string)", color=red, community=0, file="JobClientSteps.cs"];
m23_15 [label="Exit HangFire.Tests.JobClientSteps.GivenTheClientFilterThatHandlesAnException(string)", span="50-50", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatHandlesAnException(string)", file="JobClientSteps.cs"];
m23_80 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", span="129-129", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", file="JobClientSteps.cs"];
m23_81 [label="_arguments = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="131-131", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", file="JobClientSteps.cs"];
m23_82 [label="When(''I create a job'')", span="132-132", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", file="JobClientSteps.cs"];
m23_83 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", span="129-129", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheFollowingArguments(Table)", file="JobClientSteps.cs"];
m23_177 [label="Entry Unk.AreNotEqual", span="", cluster="Unk.AreNotEqual", file="JobClientSteps.cs"];
m23_10 [label="Entry HangFire.Tests.JobClientSteps.GivenTheClientFilterThatCancelsTheJob(string)", span="44-44", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatCancelsTheJob(string)", file="JobClientSteps.cs"];
m23_11 [label="_clientFilters.Add(new TestFilter(name, _clientFilterResults, false, true))", span="46-46", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatCancelsTheJob(string)", color=red, community=0, file="JobClientSteps.cs"];
m23_12 [label="Exit HangFire.Tests.JobClientSteps.GivenTheClientFilterThatCancelsTheJob(string)", span="44-44", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatCancelsTheJob(string)", file="JobClientSteps.cs"];
m23_197 [label="Entry HangFire.Tests.JobClientSteps.ThenTheClientFilterGotTheActualValuesOfTheParameters(string)", span="313-313", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterGotTheActualValuesOfTheParameters(string)", file="JobClientSteps.cs"];
m23_198 [label="Exit HangFire.Tests.JobClientSteps.ThenTheClientFilterGotTheActualValuesOfTheParameters(string)", span="313-313", cluster="HangFire.Tests.JobClientSteps.ThenTheClientFilterGotTheActualValuesOfTheParameters(string)", file="JobClientSteps.cs"];
m23_5 [label="Entry HangFire.Tests.JobClientSteps.GivenTheClientFilter(string)", span="38-38", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilter(string)", file="JobClientSteps.cs"];
m23_6 [label="_clientFilters.Add(new TestFilter(name, _clientFilterResults))", span="40-40", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilter(string)", color=red, community=0, file="JobClientSteps.cs"];
m23_7 [label="Exit HangFire.Tests.JobClientSteps.GivenTheClientFilter(string)", span="38-38", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilter(string)", file="JobClientSteps.cs"];
m23_30 [label="Entry HangFire.Tests.JobClientSteps.GivenTheClientFilterThatReadsAllOfTheAboveParameters(string)", span="73-73", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatReadsAllOfTheAboveParameters(string)", file="JobClientSteps.cs"];
m23_31 [label="_clientFilters.Add(new TestFilter(\r\n                name, _clientFilterResults, readParameters: _parameters))", span="75-76", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatReadsAllOfTheAboveParameters(string)", color=red, community=1, file="JobClientSteps.cs"];
m23_32 [label="Exit HangFire.Tests.JobClientSteps.GivenTheClientFilterThatReadsAllOfTheAboveParameters(string)", span="73-73", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatReadsAllOfTheAboveParameters(string)", file="JobClientSteps.cs"];
m23_128 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="JobClientSteps.cs"];
m23_91 [label="Entry HangFire.Tests.JobClientSteps.WhenThereWasAnExceptionWhileCreatingAJob()", span="136-136", cluster="HangFire.Tests.JobClientSteps.WhenThereWasAnExceptionWhileCreatingAJob()", file="JobClientSteps.cs"];
m23_92 [label="_clientFilters.Add(new TestFilter(''buggy'', _clientFilterResults, true))", span="138-138", cluster="HangFire.Tests.JobClientSteps.WhenThereWasAnExceptionWhileCreatingAJob()", color=red, community=0, file="JobClientSteps.cs"];
m23_93 [label="Exit HangFire.Tests.JobClientSteps.WhenThereWasAnExceptionWhileCreatingAJob()", span="136-136", cluster="HangFire.Tests.JobClientSteps.WhenThereWasAnExceptionWhileCreatingAJob()", file="JobClientSteps.cs"];
m23_104 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", span="168-168", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", file="JobClientSteps.cs"];
m23_105 [label="_client.CreateJob(JobSteps.DefaultJobId, typeof(TestJob), null, new {})", span="172-172", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", file="JobClientSteps.cs"];
m23_106 [label=Exception, span="174-174", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", file="JobClientSteps.cs"];
m23_107 [label="_exception = ex", span="176-176", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", file="JobClientSteps.cs"];
m23_108 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", span="168-168", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyState()", file="JobClientSteps.cs"];
m23_145 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JobClientSteps.cs"];
m23_129 [label="Entry HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", span="219-219", cluster="HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", file="JobClientSteps.cs"];
m23_130 [label="var job = Redis.Client.GetAllEntriesFromHash(''hangfire:job:'' + JobSteps.DefaultJobId)", span="221-221", cluster="HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", file="JobClientSteps.cs"];
m23_131 [label="DictionaryAssert.ContainsFollowingItems(table, job)", span="222-222", cluster="HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", file="JobClientSteps.cs"];
m23_132 [label="Exit HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", span="219-219", cluster="HangFire.Tests.JobClientSteps.ThenItHasTheFollowingParameters(Table)", file="JobClientSteps.cs"];
m23_43 [label="Entry HangFire.Tests.JobClientSteps.GivenTheClientFilterThatSetsTheFollowingParametersInTheOnCreatedMethod(string, Table)", span="87-87", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatSetsTheFollowingParametersInTheOnCreatedMethod(string, Table)", file="JobClientSteps.cs"];
m23_44 [label="_parameters = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="89-89", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatSetsTheFollowingParametersInTheOnCreatedMethod(string, Table)", file="JobClientSteps.cs"];
m23_45 [label="_clientFilters.Add(new TestFilter(\r\n                name, _clientFilterResults, setOnCreatedParameters: _parameters))", span="90-91", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatSetsTheFollowingParametersInTheOnCreatedMethod(string, Table)", color=red, community=1, file="JobClientSteps.cs"];
m23_46 [label="Exit HangFire.Tests.JobClientSteps.GivenTheClientFilterThatSetsTheFollowingParametersInTheOnCreatedMethod(string, Table)", span="87-87", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatSetsTheFollowingParametersInTheOnCreatedMethod(string, Table)", file="JobClientSteps.cs"];
m23_189 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="JobClientSteps.cs"];
m23_110 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", span="181-181", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", file="JobClientSteps.cs"];
m23_111 [label="_client.CreateJob(JobSteps.DefaultJobId, typeof(JobClientSteps), new Mock<JobState>(''1'').Object, new {})", span="185-185", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", file="JobClientSteps.cs"];
m23_112 [label=Exception, span="187-187", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", file="JobClientSteps.cs"];
m23_113 [label="_exception = ex", span="189-189", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", file="JobClientSteps.cs"];
m23_114 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", span="181-181", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithTheIncorrectType()", file="JobClientSteps.cs"];
m23_3 [label="Entry HangFire.Client.JobClient.JobClient(IRedisClientsManager, HangFire.Client.JobCreator)", span="31-31", cluster="HangFire.Client.JobClient.JobClient(IRedisClientsManager, HangFire.Client.JobCreator)", file="JobClientSteps.cs"];
m23_147 [label="Entry HangFire.Tests.JobClientSteps.ThenTheGivenStateWasAppliedToIt()", span="242-242", cluster="HangFire.Tests.JobClientSteps.ThenTheGivenStateWasAppliedToIt()", file="JobClientSteps.cs"];
m23_148 [label="_stateMock.Verify(\r\n                x => x.Apply(It.IsAny<IRedisTransaction>(), JobSteps.DefaultJobId),\r\n                Times.Once)", span="244-246", cluster="HangFire.Tests.JobClientSteps.ThenTheGivenStateWasAppliedToIt()", file="JobClientSteps.cs"];
m23_149 [label="Exit HangFire.Tests.JobClientSteps.ThenTheGivenStateWasAppliedToIt()", span="242-242", cluster="HangFire.Tests.JobClientSteps.ThenTheGivenStateWasAppliedToIt()", file="JobClientSteps.cs"];
m23_79 [label="Entry Unk.GetProperties", span="", cluster="Unk.GetProperties", file="JobClientSteps.cs"];
m23_135 [label="Entry HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", span="226-226", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="JobClientSteps.cs"];
m23_136 [label="var argsJson = Redis.Client.GetValueFromHash(\r\n                ''hangfire:job:'' + JobSteps.DefaultJobId,\r\n                ''Args'')", span="228-230", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="JobClientSteps.cs"];
m23_137 [label="var args = JobHelper.FromJson<Dictionary<string, string>>(argsJson)", span="231-231", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="JobClientSteps.cs"];
m23_138 [label="Assert.AreEqual(_arguments.Count, args.Count)", span="233-233", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="JobClientSteps.cs"];
m23_140 [label="Assert.IsTrue(args.ContainsKey(pair.Key))", span="236-236", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="JobClientSteps.cs"];
m23_139 [label=_arguments, span="234-234", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="JobClientSteps.cs"];
m23_141 [label="Assert.AreEqual(_arguments[pair.Key], pair.Value)", span="237-237", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="JobClientSteps.cs"];
m23_142 [label="Exit HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", span="226-226", cluster="HangFire.Tests.JobClientSteps.ThenTheJobContainsAllOfTheAboveArguments()", file="JobClientSteps.cs"];
m23_16 [label="Entry HangFire.Tests.JobClientSteps.GivenTheClientFilterThatThrowsAnException(string)", span="56-56", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatThrowsAnException(string)", file="JobClientSteps.cs"];
m23_17 [label="_clientFilters.Add(new TestFilter(name, _clientFilterResults, true, false, false))", span="58-58", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatThrowsAnException(string)", color=red, community=0, file="JobClientSteps.cs"];
m23_18 [label="Exit HangFire.Tests.JobClientSteps.GivenTheClientFilterThatThrowsAnException(string)", span="56-56", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatThrowsAnException(string)", file="JobClientSteps.cs"];
m23_71 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobClientSteps.cs"];
m23_84 [label="Entry Unk.When", span="", cluster="Unk.When", file="JobClientSteps.cs"];
m23_162 [label="Entry HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", span="257-257", cluster="HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", file="JobClientSteps.cs"];
m23_163 [label="Assert.IsNotNull(_exception)", span="259-259", cluster="HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", file="JobClientSteps.cs"];
m23_164 [label="Assert.IsInstanceOfType(_exception, typeof(CreateJobFailedException))", span="260-260", cluster="HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", file="JobClientSteps.cs"];
m23_165 [label="Exit HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", span="257-257", cluster="HangFire.Tests.JobClientSteps.ThenTheCreateJobFailedExceptionWasThrown()", file="JobClientSteps.cs"];
m23_69 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="JobClientSteps.cs"];
m23_161 [label="Entry Unk.IsInstanceOfType", span="", cluster="Unk.IsInstanceOfType", file="JobClientSteps.cs"];
m23_125 [label="Entry HangFire.Tests.JobClientSteps.ThenTheStorageDoesNotContainTheJob()", span="213-213", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageDoesNotContainTheJob()", file="JobClientSteps.cs"];
m23_126 [label="Assert.IsFalse(Redis.Client.ContainsKey(''hangfire:job:'' + JobSteps.DefaultJobId))", span="215-215", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageDoesNotContainTheJob()", file="JobClientSteps.cs"];
m23_127 [label="Exit HangFire.Tests.JobClientSteps.ThenTheStorageDoesNotContainTheJob()", span="213-213", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageDoesNotContainTheJob()", file="JobClientSteps.cs"];
m23_160 [label="Entry System.Type.GetType(string, bool)", span="0-0", cluster="System.Type.GetType(string, bool)", file="JobClientSteps.cs"];
m23_57 [label="Entry HangFire.Tests.JobClientSteps.GivenTheExceptionFilterThatHandlesAnException(string)", span="101-101", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilterThatHandlesAnException(string)", file="JobClientSteps.cs"];
m23_58 [label="_exceptionFilters.Add(new TestExceptionFilter(name, _exceptionFilterResults, true))", span="103-103", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilterThatHandlesAnException(string)", color=red, community=0, file="JobClientSteps.cs"];
m23_59 [label="Exit HangFire.Tests.JobClientSteps.GivenTheExceptionFilterThatHandlesAnException(string)", span="101-101", cluster="HangFire.Tests.JobClientSteps.GivenTheExceptionFilterThatHandlesAnException(string)", file="JobClientSteps.cs"];
m23_120 [label="Entry HangFire.Tests.JobClientSteps.ThenTheStorageContainsIt()", span="207-207", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageContainsIt()", file="JobClientSteps.cs"];
m23_121 [label="Assert.IsTrue(Redis.Client.ContainsKey(''hangfire:job:'' + JobSteps.DefaultJobId))", span="209-209", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageContainsIt()", file="JobClientSteps.cs"];
m23_122 [label="Exit HangFire.Tests.JobClientSteps.ThenTheStorageContainsIt()", span="207-207", cluster="HangFire.Tests.JobClientSteps.ThenTheStorageContainsIt()", file="JobClientSteps.cs"];
m23_151 [label="Entry lambda expression", span="245-245", cluster="lambda expression", file="JobClientSteps.cs"];
m23_24 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="JobClientSteps.cs"];
m23_27 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="JobClientSteps.cs"];
m23_25 [label="x[''Name'']", span="64-64", cluster="lambda expression", file="JobClientSteps.cs"];
m23_26 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="JobClientSteps.cs"];
m23_28 [label="x[''Value'']", span="64-64", cluster="lambda expression", file="JobClientSteps.cs"];
m23_29 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="JobClientSteps.cs"];
m23_37 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="JobClientSteps.cs"];
m23_40 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="JobClientSteps.cs"];
m23_38 [label="x[''Name'']", span="82-82", cluster="lambda expression", file="JobClientSteps.cs"];
m23_39 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="JobClientSteps.cs"];
m23_41 [label="x[''Value'']", span="82-82", cluster="lambda expression", file="JobClientSteps.cs"];
m23_42 [label="Exit lambda expression", span="82-82", cluster="lambda expression", file="JobClientSteps.cs"];
m23_47 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="JobClientSteps.cs"];
m23_50 [label="Entry lambda expression", span="89-89", cluster="lambda expression", file="JobClientSteps.cs"];
m23_48 [label="x[''Name'']", span="89-89", cluster="lambda expression", file="JobClientSteps.cs"];
m23_49 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="JobClientSteps.cs"];
m23_51 [label="x[''Value'']", span="89-89", cluster="lambda expression", file="JobClientSteps.cs"];
m23_52 [label="Exit lambda expression", span="89-89", cluster="lambda expression", file="JobClientSteps.cs"];
m23_73 [label="Entry lambda expression", span="111-111", cluster="lambda expression", file="JobClientSteps.cs"];
m23_76 [label="Entry lambda expression", span="112-112", cluster="lambda expression", file="JobClientSteps.cs"];
m23_74 [label="x.StateName", span="111-111", cluster="lambda expression", file="JobClientSteps.cs"];
m23_75 [label="Exit lambda expression", span="111-111", cluster="lambda expression", file="JobClientSteps.cs"];
m23_77 [label="x.GetProperties()", span="112-112", cluster="lambda expression", file="JobClientSteps.cs"];
m23_78 [label="Exit lambda expression", span="112-112", cluster="lambda expression", file="JobClientSteps.cs"];
m23_85 [label="Entry lambda expression", span="131-131", cluster="lambda expression", file="JobClientSteps.cs"];
m23_88 [label="Entry lambda expression", span="131-131", cluster="lambda expression", file="JobClientSteps.cs"];
m23_86 [label="x[''Name'']", span="131-131", cluster="lambda expression", file="JobClientSteps.cs"];
m23_87 [label="Exit lambda expression", span="131-131", cluster="lambda expression", file="JobClientSteps.cs"];
m23_89 [label="x[''Value'']", span="131-131", cluster="lambda expression", file="JobClientSteps.cs"];
m23_90 [label="Exit lambda expression", span="131-131", cluster="lambda expression", file="JobClientSteps.cs"];
m23_152 [label="x.Apply(It.IsAny<IRedisTransaction>(), JobSteps.DefaultJobId)", span="245-245", cluster="lambda expression", file="JobClientSteps.cs"];
m23_153 [label="Exit lambda expression", span="245-245", cluster="lambda expression", file="JobClientSteps.cs"];
m23_159 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="JobClientSteps.cs"];
m23_155 [label="Entry HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", span="250-250", cluster="HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", file="JobClientSteps.cs"];
m23_156 [label="Assert.IsNotNull(_exception)", span="252-252", cluster="HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", file="JobClientSteps.cs"];
m23_157 [label="Assert.IsInstanceOfType(_exception, Type.GetType(exceptionType, true))", span="253-253", cluster="HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", file="JobClientSteps.cs"];
m23_158 [label="Exit HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", span="250-250", cluster="HangFire.Tests.JobClientSteps.ThenAnExceptionIsThrown(string)", file="JobClientSteps.cs"];
m23_178 [label="Entry HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", span="284-284", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", file="JobClientSteps.cs"];
m23_179 [label="Assert.AreEqual(table.RowCount, _exceptionFilterResults.Count)", span="286-286", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", file="JobClientSteps.cs"];
m23_181 [label="i < table.RowCount", span="288-288", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", file="JobClientSteps.cs"];
m23_182 [label="var filter = table.Rows[i][''Filter'']", span="290-290", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", file="JobClientSteps.cs"];
m23_180 [label="var i = 0", span="288-288", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", file="JobClientSteps.cs"];
m23_183 [label="Assert.AreEqual(filter, _exceptionFilterResults[i])", span="291-291", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", file="JobClientSteps.cs"];
m23_184 [label="i++", span="288-288", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", file="JobClientSteps.cs"];
m23_185 [label="Exit HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", span="284-284", cluster="HangFire.Tests.JobClientSteps.ThenTheClientExceptionFiltersWereExecuted(Table)", file="JobClientSteps.cs"];
m23_150 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="JobClientSteps.cs"];
m23_143 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="JobClientSteps.cs"];
m23_186 [label="Entry HangFire.Tests.JobClientSteps.ThenNoExceptionWereThrown()", span="296-296", cluster="HangFire.Tests.JobClientSteps.ThenNoExceptionWereThrown()", file="JobClientSteps.cs"];
m23_187 [label="Assert.IsNull(_exception)", span="298-298", cluster="HangFire.Tests.JobClientSteps.ThenNoExceptionWereThrown()", file="JobClientSteps.cs"];
m23_188 [label="Exit HangFire.Tests.JobClientSteps.ThenNoExceptionWereThrown()", span="296-296", cluster="HangFire.Tests.JobClientSteps.ThenNoExceptionWereThrown()", file="JobClientSteps.cs"];
m23_134 [label="Entry Unk.ContainsFollowingItems", span="", cluster="Unk.ContainsFollowingItems", file="JobClientSteps.cs"];
m23_70 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="JobClientSteps.cs"];
m23_8 [label="Entry HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", span="18-18", cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>, System.Collections.Generic.IDictionary<string, string>)", file="JobClientSteps.cs"];
m23_33 [label="Entry HangFire.Tests.JobClientSteps.GivenTheClientFilterThatGetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", span="80-80", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatGetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", file="JobClientSteps.cs"];
m23_34 [label="_parameters = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="82-82", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatGetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", file="JobClientSteps.cs"];
m23_35 [label="GivenTheClientFilterThatReadsAllOfTheAboveParameters(name)", span="83-83", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatGetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", file="JobClientSteps.cs"];
m23_36 [label="Exit HangFire.Tests.JobClientSteps.GivenTheClientFilterThatGetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", span="80-80", cluster="HangFire.Tests.JobClientSteps.GivenTheClientFilterThatGetsTheFollowingParametersInTheOnCreatingMethod(string, Table)", file="JobClientSteps.cs"];
m23_72 [label="Entry Unk.CreateJob", span="", cluster="Unk.CreateJob", file="JobClientSteps.cs"];
m23_94 [label="Entry HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", span="142-142", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", file="JobClientSteps.cs"];
m23_95 [label="_client.CreateJob(null, typeof(TestJob), new Mock<JobState>(''1'').Object, new {})", span="146-146", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", file="JobClientSteps.cs"];
m23_96 [label=Exception, span="148-148", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", file="JobClientSteps.cs"];
m23_97 [label="_exception = ex", span="150-150", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", file="JobClientSteps.cs"];
m23_98 [label="Exit HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", span="142-142", cluster="HangFire.Tests.JobClientSteps.WhenICreateAJobWithAnEmptyId()", file="JobClientSteps.cs"];
m23_4 [label="Entry HangFire.Client.JobCreator.JobCreator(System.Collections.Generic.IEnumerable<HangFire.Filters.IClientFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IClientExceptionFilter>)", span="27-27", cluster="HangFire.Client.JobCreator.JobCreator(System.Collections.Generic.IEnumerable<HangFire.Filters.IClientFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IClientExceptionFilter>)", file="JobClientSteps.cs"];
m23_109 [label="Entry HangFire.Client.JobClient.CreateJob(string, System.Type, HangFire.States.JobState, object)", span="65-65", cluster="HangFire.Client.JobClient.CreateJob(string, System.Type, HangFire.States.JobState, object)", file="JobClientSteps.cs"];
m23_123 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="JobClientSteps.cs"];
m23_190 [label="Entry HangFire.Tests.JobClientSteps.ThenItShouldHaveAllOfTheAboveParametersEncodedAsJsonString()", span="302-302", cluster="HangFire.Tests.JobClientSteps.ThenItShouldHaveAllOfTheAboveParametersEncodedAsJsonString()", file="JobClientSteps.cs"];
m23_191 [label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="304-304", cluster="HangFire.Tests.JobClientSteps.ThenItShouldHaveAllOfTheAboveParametersEncodedAsJsonString()", file="JobClientSteps.cs"];
m23_192 [label=_parameters, span="305-305", cluster="HangFire.Tests.JobClientSteps.ThenItShouldHaveAllOfTheAboveParametersEncodedAsJsonString()", file="JobClientSteps.cs"];
m23_193 [label="Assert.IsTrue(job.ContainsKey(parameter.Key))", span="307-307", cluster="HangFire.Tests.JobClientSteps.ThenItShouldHaveAllOfTheAboveParametersEncodedAsJsonString()", file="JobClientSteps.cs"];
m23_194 [label="Assert.AreEqual(parameter.Value, JobHelper.FromJson<string>(job[parameter.Key]))", span="308-308", cluster="HangFire.Tests.JobClientSteps.ThenItShouldHaveAllOfTheAboveParametersEncodedAsJsonString()", file="JobClientSteps.cs"];
m23_195 [label="Exit HangFire.Tests.JobClientSteps.ThenItShouldHaveAllOfTheAboveParametersEncodedAsJsonString()", span="302-302", cluster="HangFire.Tests.JobClientSteps.ThenItShouldHaveAllOfTheAboveParametersEncodedAsJsonString()", file="JobClientSteps.cs"];
m23_199 [label="HangFire.Tests.JobClientSteps", span="", file="JobClientSteps.cs"];
m24_0 [label="Entry Hangfire.Server.IJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", span="20-20", cluster="Hangfire.Server.IJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", file="JobCreator.cs"];
m24_1 [label="Exit Hangfire.Server.IJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", span="20-20", cluster="Hangfire.Server.IJobPerformanceProcess.Run(Hangfire.Server.PerformContext, Hangfire.Server.IJobPerformer)", color=green, community=0, file="JobCreator.cs"];
m24_2 [label="Canceled = canceled", span="35-35", cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", color=green, community=0, file="JobCreator.cs"];
m24_3 [label="Exception = exception", span="36-36", cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", file="JobCreator.cs"];
m24_4 [label="Exit Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", span="27-27", cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, string, bool, System.Exception)", file="JobCreator.cs"];
m24_13 [label="Hangfire.Client.CreatedContext", span="", file="JobCreator.cs"];
m26_25 [label="Entry Unk.OnScenarioStart", span="", cluster="Unk.OnScenarioStart", file="JobFetcher.feature.cs"];
m26_29 [label="Entry Unk.CollectScenarioErrors", span="", cluster="Unk.CollectScenarioErrors", file="JobFetcher.feature.cs"];
m26_21 [label="Entry Unk.OnScenarioEnd", span="", cluster="Unk.OnScenarioEnd", file="JobFetcher.feature.cs"];
m26_55 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m26_56 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should not return any job when it tries to dequeue a job from an empty qu'' +\r\n                    ''eue'', ((string[])(null)))", span="124-125", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", color=green, community=0, file="JobFetcher.feature.cs"];
m26_57 [label="this.ScenarioSetup(scenarioInfo)", span="127-127", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m26_58 [label="testRunner.Given(''an empty queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="129-129", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m26_59 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="131-131", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m26_60 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="133-133", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m26_61 [label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="135-135", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", color=green, community=0, file="JobFetcher.feature.cs"];
m26_62 [label="this.ScenarioCleanup()", span="137-137", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m26_63 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", span="122-122", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldNotReturnAnyJobWhenItTriesToDequeueAJobFromAnEmptyQueue()", file="JobFetcher.feature.cs"];
m26_0 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs"];
m26_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs"];
m26_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''JobFetcher'', ''\r\n  As a user, I expect that my enqueued jobs will be dequeued by the Server.'', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs"];
m26_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs"];
m26_4 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="JobFetcher.feature.cs"];
m26_76 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", span="171-171", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m26_77 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should listen only specified queue'', ((string[])(null)))", span="173-173", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", color=green, community=0, file="JobFetcher.feature.cs"];
m26_78 [label="this.ScenarioSetup(scenarioInfo)", span="175-175", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m26_79 [label="testRunner.Given(''a job in the \'another\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="177-177", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m26_80 [label="testRunner.And(''the fetcher listening the \'default\' queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="179-179", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m26_81 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="181-181", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m26_82 [label="testRunner.Then(''the fetcher should not return any job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="183-183", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", color=green, community=0, file="JobFetcher.feature.cs"];
m26_83 [label="this.ScenarioCleanup()", span="185-185", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m26_84 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", span="171-171", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldListenOnlySpecifiedQueue()", file="JobFetcher.feature.cs"];
m26_41 [label="Entry Unk.And", span="", cluster="Unk.And", file="JobFetcher.feature.cs"];
m26_54 [label="Entry Unk.But", span="", cluster="Unk.But", file="JobFetcher.feature.cs"];
m26_5 [label="Entry Unk.GetTestRunner", span="", cluster="Unk.GetTestRunner", file="JobFetcher.feature.cs"];
m26_9 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs"];
m26_10 [label="testRunner.OnFeatureEnd()", span="41-41", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs"];
m26_11 [label="testRunner = null", span="42-42", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs"];
m26_12 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", span="39-39", cluster="HangFire.Tests.Server.JobFetcherFeature.FeatureTearDown()", file="JobFetcher.feature.cs"];
m26_22 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs"];
m26_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs"];
m26_24 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="JobFetcher.feature.cs"];
m26_30 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_31 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher returns the job payload when it dequeues a job'', ((string[])(null)))", span="77-77", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", color=red, community=0, file="JobFetcher.feature.cs"];
m26_32 [label="this.ScenarioSetup(scenarioInfo)", span="79-79", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_36 [label="testRunner.Then(''the fetcher returns the payload'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="87-87", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", color=red, community=0, file="JobFetcher.feature.cs"];
m26_35 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="85-85", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_37 [label="this.ScenarioCleanup()", span="89-89", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_33 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="81-81", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_34 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="83-83", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_38 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", span="75-75", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherReturnsTheJobPayloadWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_85 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", span="192-192", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_86 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should set the \'fetched\' flag when it dequeues a job'', ((string[])(null)))", span="194-194", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", color=green, community=0, file="JobFetcher.feature.cs"];
m26_87 [label="this.ScenarioSetup(scenarioInfo)", span="196-196", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_88 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="198-198", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_89 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="200-200", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_90 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="202-202", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_91 [label="testRunner.Then(''the job should have the \'fetched\' flag set'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="204-204", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", color=green, community=0, file="JobFetcher.feature.cs"];
m26_92 [label="this.ScenarioCleanup()", span="206-206", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_93 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", span="192-192", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldSetTheFetchedFlagWhenItDequeuesAJob()", file="JobFetcher.feature.cs"];
m26_13 [label="Entry Unk.OnFeatureEnd", span="", cluster="Unk.OnFeatureEnd", file="JobFetcher.feature.cs"];
m26_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JobFetcher.feature.cs"];
m26_64 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m26_65 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher should dequeue jobs in the FIFO order'', ((string[])(null)))", span="146-146", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", color=green, community=0, file="JobFetcher.feature.cs"];
m26_66 [label="this.ScenarioSetup(scenarioInfo)", span="148-148", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m26_67 [label="testRunner.Given(''the \'first\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="150-150", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m26_68 [label="testRunner.And(''the \'second\' job in the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="152-152", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m26_69 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="154-154", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m26_70 [label="testRunner.When(''it dequeues a job for the first time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="156-156", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m26_71 [label="testRunner.Then(''the fetcher should return the \'first\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="158-158", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", color=green, community=0, file="JobFetcher.feature.cs"];
m26_72 [label="testRunner.When(''it dequeues a job for the second time'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="160-160", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m26_73 [label="testRunner.Then(''the fetcher should return the \'second\' job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="162-162", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", color=green, community=0, file="JobFetcher.feature.cs"];
m26_74 [label="this.ScenarioCleanup()", span="164-164", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m26_75 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", span="144-144", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherShouldDequeueJobsInTheFIFOOrder()", file="JobFetcher.feature.cs"];
m26_42 [label="Entry Unk.When", span="", cluster="Unk.When", file="JobFetcher.feature.cs"];
m26_14 [label="Entry HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs"];
m26_15 [label="((TechTalk.SpecFlow.FeatureContext.Current != null) \r\n                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != ''JobFetcher''))", span="48-49", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs"];
m26_16 [label="HangFire.Tests.Server.JobFetcherFeature.FeatureSetup(null)", span="51-51", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs"];
m26_17 [label="Exit HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.Server.JobFetcherFeature.TestInitialize()", file="JobFetcher.feature.cs"];
m26_39 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="JobFetcher.feature.cs"];
m26_44 [label="Entry HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m26_45 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Fetcher removes the dequeued job from the queue and adds it to the dequeued list'', ((string[])(null)))", span="98-98", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", color=red, community=0, file="JobFetcher.feature.cs"];
m26_46 [label="this.ScenarioSetup(scenarioInfo)", span="100-100", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m26_50 [label="testRunner.Then(''the queue does not contain the job anymore'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", span="108-108", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", color=red, community=0, file="JobFetcher.feature.cs"];
m26_49 [label="testRunner.When(''it dequeues a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="106-106", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m26_51 [label="testRunner.But(''the dequeued jobs list contains it'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''But '')", span="110-110", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", color=red, community=0, file="JobFetcher.feature.cs"];
m26_52 [label="this.ScenarioCleanup()", span="112-112", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m26_47 [label="testRunner.Given(''an enqueued job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="102-102", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m26_48 [label="testRunner.And(''the fetcher listening the queue'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="104-104", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m26_53 [label="Exit HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", span="96-96", cluster="HangFire.Tests.Server.JobFetcherFeature.FetcherRemovesTheDequeuedJobFromTheQueueAndAddsItToTheDequeuedList()", file="JobFetcher.feature.cs"];
m26_43 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="JobFetcher.feature.cs"];
m26_40 [label="Entry Unk.Given", span="", cluster="Unk.Given", file="JobFetcher.feature.cs"];
m26_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="JobFetcher.feature.cs"];
m26_26 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs"];
m26_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs"];
m26_28 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioCleanup()", file="JobFetcher.feature.cs"];
m26_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="JobFetcher.feature.cs"];
m26_18 [label="Entry HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs"];
m26_19 [label="testRunner.OnScenarioEnd()", span="58-58", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs"];
m26_20 [label="Exit HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", span="56-56", cluster="HangFire.Tests.Server.JobFetcherFeature.ScenarioTearDown()", file="JobFetcher.feature.cs"];
m26_94 [label="HangFire.Tests.Server.JobFetcherFeature", span="", file="JobFetcher.feature.cs"];
m27_162 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="178-178", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="JobFetcherSteps.cs"];
m27_163 [label="var worker = CreateWorker()", span="180-180", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="JobFetcherSteps.cs"];
m27_164 [label="worker.Execute(_context.Object)", span="182-182", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="JobFetcherSteps.cs"];
m27_165 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>()))", span="184-190", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="JobFetcherSteps.cs"];
m27_166 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="178-178", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="JobFetcherSteps.cs"];
m27_17 [label="Entry Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", span="11-11", cluster="Hangfire.Core.Tests.BackgroundProcessContextMock.BackgroundProcessContextMock()", file="JobFetcherSteps.cs"];
m27_20 [label="Entry Mock<IStateMachineFactory>.cstr", span="", cluster="Mock<IStateMachineFactory>.cstr", file="JobFetcherSteps.cs"];
m27_77 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", span="87-87", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", file="JobFetcherSteps.cs"];
m27_78 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_workerContext.Object, _process.Object, null))", span="89-90", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", file="JobFetcherSteps.cs"];
m27_79 [label="Assert.Equal(''stateMachineFactoryFactory'', exception.ParamName)", span="92-92", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", file="JobFetcherSteps.cs"];
m27_80 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", span="87-87", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateMachineFactory_IsNull()", file="JobFetcherSteps.cs"];
m27_18 [label="Entry Hangfire.Core.Tests.WorkerContextMock.WorkerContextMock()", span="9-9", cluster="Hangfire.Core.Tests.WorkerContextMock.WorkerContextMock()", file="JobFetcherSteps.cs"];
m27_65 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="JobFetcherSteps.cs"];
m27_286 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="JobFetcherSteps.cs"];
m27_243 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="278-278", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFetcherSteps.cs"];
m27_244 [label="var exception = new InvalidOperationException()", span="281-281", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFetcherSteps.cs"];
m27_245 [label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(exception)", span="282-284", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFetcherSteps.cs"];
m27_248 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="292-296", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFetcherSteps.cs"];
m27_246 [label="var worker = CreateWorker()", span="286-286", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFetcherSteps.cs"];
m27_247 [label="worker.Execute(_context.Object)", span="289-289", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFetcherSteps.cs"];
m27_249 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="278-278", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFetcherSteps.cs"];
m27_232 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="264-264", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="JobFetcherSteps.cs"];
m27_233 [label="var worker = CreateWorker()", span="266-266", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="JobFetcherSteps.cs"];
m27_234 [label="worker.Execute(_context.Object)", span="268-268", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="JobFetcherSteps.cs"];
m27_235 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>()))", span="270-274", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="JobFetcherSteps.cs"];
m27_236 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="264-264", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="JobFetcherSteps.cs"];
m27_132 [label="Entry Unk.Requeue", span="", cluster="Unk.Requeue", file="JobFetcherSteps.cs"];
m27_173 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="194-194", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFetcherSteps.cs"];
m27_174 [label="_stateMachine\r\n                .Setup(x => x.ChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>(),\r\n                    It.IsAny<CancellationToken>()))\r\n                .Returns(false)", span="197-203", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFetcherSteps.cs"];
m27_175 [label="var worker = CreateWorker()", span="205-205", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFetcherSteps.cs"];
m27_176 [label="worker.Execute(_context.Object)", span="208-208", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFetcherSteps.cs"];
m27_177 [label="_process.Verify(\r\n                x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()),\r\n                Times.Never)", span="211-213", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFetcherSteps.cs"];
m27_178 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="194-194", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFetcherSteps.cs"];
m27_185 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="217-217", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="JobFetcherSteps.cs"];
m27_186 [label="var worker = CreateWorker()", span="219-219", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="JobFetcherSteps.cs"];
m27_187 [label="worker.Execute(_context.Object)", span="221-221", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="JobFetcherSteps.cs"];
m27_188 [label="_process.Verify(x => x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>()))", span="223-225", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="JobFetcherSteps.cs"];
m27_189 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="217-217", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="JobFetcherSteps.cs"];
m27_219 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="JobFetcherSteps.cs"];
m27_147 [label="Entry Unk.Run", span="", cluster="Unk.Run", file="JobFetcherSteps.cs"];
m27_250 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="JobFetcherSteps.cs"];
m27_39 [label="Entry Unk.>", span="", cluster="Unk.>", file="JobFetcherSteps.cs"];
m27_113 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="121-121", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="JobFetcherSteps.cs"];
m27_114 [label="_stateMachine\r\n                .Setup(x => x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()))\r\n                .Throws<InvalidOperationException>()", span="123-125", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="JobFetcherSteps.cs"];
m27_115 [label="var worker = CreateWorker()", span="127-127", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="JobFetcherSteps.cs"];
m27_116 [label="Assert.Throws<InvalidOperationException>(\r\n                () => worker.Execute(_context.Object))", span="129-130", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="JobFetcherSteps.cs"];
m27_117 [label="_fetchedJob.Verify(x => x.RemoveFromQueue(), Times.Never)", span="132-132", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="JobFetcherSteps.cs"];
m27_118 [label="_fetchedJob.Verify(x => x.Requeue())", span="133-133", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="JobFetcherSteps.cs"];
m27_119 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="121-121", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="JobFetcherSteps.cs"];
m27_212 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="248-248", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="JobFetcherSteps.cs"];
m27_213 [label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws<JobAbortedException>()", span="251-252", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="JobFetcherSteps.cs"];
m27_214 [label="var worker = CreateWorker()", span="254-254", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="JobFetcherSteps.cs"];
m27_215 [label="Assert.DoesNotThrow(() => worker.Execute(_context.Object))", span="257-257", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="JobFetcherSteps.cs"];
m27_216 [label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="259-259", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="JobFetcherSteps.cs"];
m27_217 [label="_fetchedJob.Verify(x => x.Requeue(), Times.Never)", span="260-260", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="JobFetcherSteps.cs"];
m27_218 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="248-248", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="JobFetcherSteps.cs"];
m27_90 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="341-341", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="JobFetcherSteps.cs"];
m27_293 [label="return new Worker(_workerContext.Object, _process.Object, _stateMachineFactoryFactory.Object);", span="343-343", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="JobFetcherSteps.cs"];
m27_294 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="341-341", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="JobFetcherSteps.cs"];
m27_61 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="69-69", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="JobFetcherSteps.cs"];
m27_62 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(null, _process.Object, _stateMachineFactoryFactory.Object))", span="71-72", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="JobFetcherSteps.cs"];
m27_63 [label="Assert.Equal(''context'', exception.ParamName)", span="74-74", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="JobFetcherSteps.cs"];
m27_64 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="69-69", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="JobFetcherSteps.cs"];
m27_60 [label="Entry Unk.CreateFactory", span="", cluster="Unk.CreateFactory", file="JobFetcherSteps.cs"];
m27_24 [label="Entry Mock<IFetchedJob>.cstr", span="", cluster="Mock<IFetchedJob>.cstr", file="JobFetcherSteps.cs"];
m27_262 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="300-300", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFetcherSteps.cs"];
m27_263 [label="var exception = new InvalidOperationException()", span="303-303", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFetcherSteps.cs"];
m27_264 [label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(new JobPerformanceException(''hello'', exception))", span="304-306", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFetcherSteps.cs"];
m27_267 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="314-318", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFetcherSteps.cs"];
m27_265 [label="var worker = CreateWorker()", span="308-308", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFetcherSteps.cs"];
m27_266 [label="worker.Execute(_context.Object)", span="311-311", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFetcherSteps.cs"];
m27_268 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="300-300", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFetcherSteps.cs"];
m27_28 [label="Entry Mock<IStateMachineFactoryFactory>.cstr", span="", cluster="Mock<IStateMachineFactoryFactory>.cstr", file="JobFetcherSteps.cs"];
m27_32 [label="Entry Unk.GetConnection", span="", cluster="Unk.GetConnection", file="JobFetcherSteps.cs"];
m27_56 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="JobFetcherSteps.cs"];
m27_0 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="27-27", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_1 [label="_context = new BackgroundProcessContextMock()", span="29-29", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_2 [label="_workerContext = new WorkerContextMock()", span="30-30", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_3 [label="_process = new Mock<IJobPerformanceProcess>()", span="31-31", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_4 [label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="32-32", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_5 [label="_connection = new Mock<IStorageConnection>()", span="34-34", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_6 [label="_context.Storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="35-35", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_7 [label="_fetchedJob = new Mock<IFetchedJob>()", span="37-37", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_8 [label="_fetchedJob.Setup(x => x.JobId).Returns(JobId)", span="38-38", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_9 [label="_connection\r\n                .Setup(x => x.FetchNextJob(_workerContext.Queues, It.IsNotNull<CancellationToken>()))\r\n                .Returns(_fetchedJob.Object)", span="40-42", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_10 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    Job = Job.FromExpression(() => Method()),\r\n                })", span="44-48", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_11 [label="_stateMachine = new Mock<IStateMachine>()", span="50-50", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_12 [label="_stateMachineFactory\r\n                .Setup(x => x.Create(_connection.Object))\r\n                .Returns(_stateMachine.Object)", span="52-54", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_13 [label="_stateMachine.Setup(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<IState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())).Returns(true)", span="56-60", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_14 [label="_stateMachineFactoryFactory = new Mock<IStateMachineFactoryFactory>()", span="62-62", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_15 [label="_stateMachineFactoryFactory\r\n                .Setup(x => x.CreateFactory(It.IsNotNull<JobStorage>()))\r\n                .Returns(_stateMachineFactory.Object)", span="63-65", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_16 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="27-27", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFetcherSteps.cs"];
m27_140 [label="Entry Unk.InSequence", span="", cluster="Unk.InSequence", file="JobFetcherSteps.cs"];
m27_22 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="JobFetcherSteps.cs"];
m27_251 [label="Entry Unk.Throws", span="", cluster="Unk.Throws", file="JobFetcherSteps.cs"];
m27_40 [label="Entry Unk.FetchNextJob", span="", cluster="Unk.FetchNextJob", file="JobFetcherSteps.cs"];
m27_84 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="96-96", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="JobFetcherSteps.cs"];
m27_85 [label="var worker = CreateWorker()", span="98-98", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", color=red, community=0, file="JobFetcherSteps.cs"];
m27_86 [label="worker.Execute(_context.Object)", span="100-100", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="JobFetcherSteps.cs"];
m27_87 [label="_context.Storage.Verify(x => x.GetConnection(), Times.Once)", span="102-102", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="JobFetcherSteps.cs"];
m27_88 [label="_connection.Verify(x => x.Dispose(), Times.Once)", span="103-103", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="JobFetcherSteps.cs"];
m27_89 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="96-96", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="JobFetcherSteps.cs"];
m27_279 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="322-322", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFetcherSteps.cs"];
m27_280 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData { LoadException = new JobLoadException(''asd'', new Exception()) })", span="325-326", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFetcherSteps.cs"];
m27_281 [label="var worker = CreateWorker()", span="328-328", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFetcherSteps.cs"];
m27_282 [label="worker.Execute(_context.Object)", span="331-331", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFetcherSteps.cs"];
m27_283 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="334-338", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFetcherSteps.cs"];
m27_284 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="322-322", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFetcherSteps.cs"];
m27_112 [label="Entry Unk.RemoveFromQueue", span="", cluster="Unk.RemoveFromQueue", file="JobFetcherSteps.cs"];
m27_290 [label="Entry lambda expression", span="334-338", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_29 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_33 [label="Entry lambda expression", span="38-38", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_36 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_41 [label="Entry lambda expression", span="44-44", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_45 [label="Entry lambda expression", span="47-47", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_49 [label="Entry lambda expression", span="53-53", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_53 [label="Entry lambda expression", span="56-60", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_57 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_30 [label="x.GetConnection()", span="35-35", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_31 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_34 [label="x.JobId", span="38-38", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_35 [label="Exit lambda expression", span="38-38", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_37 [label="x.FetchNextJob(_workerContext.Queues, It.IsNotNull<CancellationToken>())", span="41-41", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_38 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_42 [label="x.GetJobData(JobId)", span="44-44", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_43 [label="Exit lambda expression", span="44-44", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_46 [label="Method()", span="47-47", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_47 [label="Exit lambda expression", span="47-47", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_50 [label="x.Create(_connection.Object)", span="53-53", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_51 [label="Exit lambda expression", span="53-53", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_54 [label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<IState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="56-60", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_55 [label="Exit lambda expression", span="56-60", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_58 [label="x.CreateFactory(It.IsNotNull<JobStorage>())", span="64-64", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_59 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_66 [label="Entry lambda expression", span="72-72", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_67 [label="new Worker(null, _process.Object, _stateMachineFactoryFactory.Object)", span="72-72", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_68 [label="Exit lambda expression", span="72-72", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_74 [label="Entry lambda expression", span="81-81", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_75 [label="new Worker(_workerContext.Object, null, _stateMachineFactoryFactory.Object)", span="81-81", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_76 [label="Exit lambda expression", span="81-81", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_81 [label="Entry lambda expression", span="90-90", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_82 [label="new Worker(_workerContext.Object, _process.Object, null)", span="90-90", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_83 [label="Exit lambda expression", span="90-90", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_93 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_96 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_94 [label="x.GetConnection()", span="102-102", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_95 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_97 [label="x.Dispose()", span="103-103", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_98 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_106 [label="Entry lambda expression", span="114-114", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_109 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_107 [label="x.FetchNextJob(_workerContext.Queues, _context.CancellationTokenSource.Token)", span="114-114", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_108 [label="Exit lambda expression", span="114-114", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_110 [label="x.RemoveFromQueue()", span="117-117", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_111 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_120 [label="Entry lambda expression", span="124-124", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_124 [label="worker.Execute(_context.Object)", span="130-130", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_123 [label="Entry lambda expression", span="130-130", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_126 [label="Entry lambda expression", span="132-132", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_129 [label="Entry lambda expression", span="133-133", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_121 [label="x.ChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="124-124", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_122 [label="Exit lambda expression", span="124-124", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_125 [label="Exit lambda expression", span="130-130", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_127 [label="x.RemoveFromQueue()", span="132-132", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_128 [label="Exit lambda expression", span="132-132", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_130 [label="x.Requeue()", span="133-133", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_131 [label="Exit lambda expression", span="133-133", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_141 [label="Entry lambda expression", span="141-142", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_144 [label="Entry lambda expression", span="146-146", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_148 [label="Entry lambda expression", span="150-151", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_142 [label="x.ChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="141-142", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_143 [label="Exit lambda expression", span="141-142", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_145 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="146-146", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_146 [label="Exit lambda expression", span="146-146", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_149 [label="x.ChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="150-151", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_150 [label="Exit lambda expression", span="150-151", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_156 [label="Entry lambda expression", span="170-174", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_157 [label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerId == _context.ServerId),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="170-174", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_158 [label="Exit lambda expression", span="170-174", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_159 [label="Entry lambda expression", span="172-172", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_160 [label="state.ServerId == _context.ServerId", span="172-172", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_161 [label="Exit lambda expression", span="172-172", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_167 [label="Entry lambda expression", span="184-190", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_168 [label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>())", span="184-190", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_169 [label="Exit lambda expression", span="184-190", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_170 [label="Entry lambda expression", span="188-189", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_171 [label="states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName", span="188-189", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_172 [label="Exit lambda expression", span="188-189", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_179 [label="Entry lambda expression", span="198-202", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_182 [label="Entry lambda expression", span="212-212", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_180 [label="x.ChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>(),\r\n                    It.IsAny<CancellationToken>())", span="198-202", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_181 [label="Exit lambda expression", span="198-202", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_183 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="212-212", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_184 [label="Exit lambda expression", span="212-212", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_190 [label="Entry lambda expression", span="223-225", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_191 [label="x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>())", span="223-225", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_192 [label="Exit lambda expression", span="223-225", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_200 [label="Entry lambda expression", span="232-232", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_204 [label="worker.Execute(_context.Object)", span="238-238", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_203 [label="Entry lambda expression", span="238-238", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_206 [label="Entry lambda expression", span="242-242", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_209 [label="Entry lambda expression", span="244-244", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_201 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="232-232", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_202 [label="Exit lambda expression", span="232-232", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_205 [label="Exit lambda expression", span="238-238", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_207 [label="x.ChangeState(It.IsAny<string>(), It.IsAny<FailedState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>())", span="242-242", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_208 [label="Exit lambda expression", span="242-242", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_210 [label="x.Requeue()", span="244-244", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_211 [label="Exit lambda expression", span="244-244", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_220 [label="Entry lambda expression", span="251-251", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_224 [label="worker.Execute(_context.Object)", span="257-257", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_223 [label="Entry lambda expression", span="257-257", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_226 [label="Entry lambda expression", span="259-259", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_229 [label="Entry lambda expression", span="260-260", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_221 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="251-251", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_222 [label="Exit lambda expression", span="251-251", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_225 [label="Exit lambda expression", span="257-257", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_227 [label="x.RemoveFromQueue()", span="259-259", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_228 [label="Exit lambda expression", span="259-259", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_230 [label="x.Requeue()", span="260-260", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_231 [label="Exit lambda expression", span="260-260", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_237 [label="Entry lambda expression", span="270-274", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_238 [label="x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName),\r\n                It.IsAny<CancellationToken>())", span="270-274", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_239 [label="Exit lambda expression", span="270-274", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_240 [label="Entry lambda expression", span="273-273", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_241 [label="states.Length == 1 && states[0] == ProcessingState.StateName", span="273-273", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_242 [label="Exit lambda expression", span="273-273", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_256 [label="x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="292-296", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_259 [label="state.Exception == exception && state.Reason.Contains(''Internal'')", span="294-294", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_252 [label="Entry lambda expression", span="283-283", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_255 [label="Entry lambda expression", span="292-296", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_253 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="283-283", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_254 [label="Exit lambda expression", span="283-283", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_257 [label="Exit lambda expression", span="292-296", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_258 [label="Entry lambda expression", span="294-294", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_260 [label="Exit lambda expression", span="294-294", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_274 [label="x.ChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="314-318", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_277 [label="state.Exception == exception && state.Reason == ''hello''", span="316-316", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_270 [label="Entry lambda expression", span="305-305", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_273 [label="Entry lambda expression", span="314-318", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_271 [label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="305-305", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_272 [label="Exit lambda expression", span="305-305", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_275 [label="Exit lambda expression", span="314-318", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_276 [label="Entry lambda expression", span="316-316", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_278 [label="Exit lambda expression", span="316-316", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_287 [label="Entry lambda expression", span="325-325", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_288 [label="x.GetJobData(JobId)", span="325-325", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_289 [label="Exit lambda expression", span="325-325", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_291 [label="x.ChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>())", span="334-338", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_292 [label="Exit lambda expression", span="334-338", cluster="lambda expression", file="JobFetcherSteps.cs"];
m27_69 [label="Entry Worker.cstr", span="", cluster="Worker.cstr", file="JobFetcherSteps.cs"];
m27_151 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="164-164", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="JobFetcherSteps.cs"];
m27_152 [label="var worker = CreateWorker()", span="166-166", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="JobFetcherSteps.cs"];
m27_153 [label="worker.Execute(_context.Object)", span="168-168", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="JobFetcherSteps.cs"];
m27_154 [label="_stateMachine.Verify(x => x.ChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerId == _context.ServerId),\r\n                It.IsAny<string[]>(),\r\n                It.IsAny<CancellationToken>()))", span="170-174", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="JobFetcherSteps.cs"];
m27_155 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="164-164", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="JobFetcherSteps.cs"];
m27_25 [label="Entry Hangfire.Storage.JobData.JobData()", span="21-21", cluster="Hangfire.Storage.JobData.JobData()", file="JobFetcherSteps.cs"];
m27_261 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="JobFetcherSteps.cs"];
m27_92 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="JobFetcherSteps.cs"];
m27_133 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="137-137", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFetcherSteps.cs"];
m27_134 [label="_stateMachine\r\n                .Setup(x => x.ChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()))\r\n                .InSequence()\r\n                .Returns(true)", span="140-144", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFetcherSteps.cs"];
m27_135 [label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .InSequence()", span="146-147", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFetcherSteps.cs"];
m27_136 [label="_stateMachine\r\n                .Setup(x => x.ChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()))\r\n                .InSequence()\r\n                .Returns(true)", span="149-153", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFetcherSteps.cs"];
m27_137 [label="var worker = CreateWorker()", span="155-155", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFetcherSteps.cs"];
m27_138 [label="worker.Execute(_context.Object)", span="158-158", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFetcherSteps.cs"];
m27_139 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="137-137", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFetcherSteps.cs"];
m27_100 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="107-107", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="JobFetcherSteps.cs"];
m27_101 [label="var worker = CreateWorker()", span="109-109", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="JobFetcherSteps.cs"];
m27_102 [label="worker.Execute(_context.Object)", span="111-111", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="JobFetcherSteps.cs"];
m27_103 [label="_connection.Verify(\r\n                x => x.FetchNextJob(_workerContext.Queues, _context.CancellationTokenSource.Token),\r\n                Times.Once)", span="113-115", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="JobFetcherSteps.cs"];
m27_104 [label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="117-117", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="JobFetcherSteps.cs"];
m27_105 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="107-107", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="JobFetcherSteps.cs"];
m27_285 [label="Entry Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", span="32-32", cluster="Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", file="JobFetcherSteps.cs"];
m27_269 [label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22", cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="JobFetcherSteps.cs"];
m27_27 [label="Entry Mock<IStateMachine>.cstr", span="", cluster="Mock<IStateMachine>.cstr", file="JobFetcherSteps.cs"];
m27_193 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="229-229", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="JobFetcherSteps.cs"];
m27_194 [label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws<OperationCanceledException>()", span="232-233", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="JobFetcherSteps.cs"];
m27_195 [label="var worker = CreateWorker()", span="235-235", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="JobFetcherSteps.cs"];
m27_196 [label="Assert.Throws<OperationCanceledException>(() => worker.Execute(_context.Object))", span="238-238", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="JobFetcherSteps.cs"];
m27_197 [label="_stateMachine.Verify(\r\n                x => x.ChangeState(It.IsAny<string>(), It.IsAny<FailedState>(), It.IsAny<string[]>(), It.IsAny<CancellationToken>()),\r\n                Times.Never)", span="241-243", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="JobFetcherSteps.cs"];
m27_198 [label="_fetchedJob.Verify(x => x.Requeue())", span="244-244", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="JobFetcherSteps.cs"];
m27_199 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="229-229", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="JobFetcherSteps.cs"];
m27_52 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="JobFetcherSteps.cs"];
m27_23 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="JobFetcherSteps.cs"];
m27_48 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="346-346", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="JobFetcherSteps.cs"];
m27_295 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="346-346", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="JobFetcherSteps.cs"];
m27_91 [label="Entry Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="59-59", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="JobFetcherSteps.cs"];
m27_21 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="JobFetcherSteps.cs"];
m27_44 [label="Entry Unk.GetJobData", span="", cluster="Unk.GetJobData", file="JobFetcherSteps.cs"];
m27_26 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="149-149", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="JobFetcherSteps.cs"];
m27_19 [label="Entry Mock<IJobPerformanceProcess>.cstr", span="", cluster="Mock<IJobPerformanceProcess>.cstr", file="JobFetcherSteps.cs"];
m27_70 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", span="78-78", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="JobFetcherSteps.cs"];
m27_71 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_workerContext.Object, null, _stateMachineFactoryFactory.Object))", span="80-81", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="JobFetcherSteps.cs"];
m27_72 [label="Assert.Equal(''process'', exception.ParamName)", span="83-83", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="JobFetcherSteps.cs"];
m27_73 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", span="78-78", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenProcessIsNull()", file="JobFetcherSteps.cs"];
m27_296 [label="Hangfire.Core.Tests.Server.WorkerFacts", span="", file="JobFetcherSteps.cs"];
m27_297 [label=worker, span="", file="JobFetcherSteps.cs"];
m27_298 [label=worker, span="", file="JobFetcherSteps.cs"];
m27_299 [label=worker, span="", file="JobFetcherSteps.cs"];
m27_300 [label=exception, span="", file="JobFetcherSteps.cs"];
m27_301 [label=exception, span="", file="JobFetcherSteps.cs"];
m35_12 [label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76", cluster="HangFire.Web.RazorPage.Write(object)", file="JobManager.feature.cs"];
m35_10 [label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69", cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="JobManager.feature.cs"];
m35_14 [label="Entry HangFire.Web.HtmlHelper.MarkupStackTrace(string)", span="110-110", cluster="HangFire.Web.HtmlHelper.MarkupStackTrace(string)", file="JobManager.feature.cs"];
m35_13 [label="Entry System.Exception.ToString()", span="0-0", cluster="System.Exception.ToString()", file="JobManager.feature.cs"];
m35_11 [label="Entry HttpRequestBase.LinkTo(string)", span="24-24", cluster="HttpRequestBase.LinkTo(string)", file="JobManager.feature.cs"];
m35_0 [label="Entry HangFire.Web.Pages.ErrorPage.Execute()", span="34-34", cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="JobManager.feature.cs"];
m35_1 [label="WriteLiteral(''\r\n'')", span="38-38", cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="JobManager.feature.cs"];
m35_2 [label="WriteLiteral(''<!DOCTYPE html>\r\n\r\n<html lang=\''ru\''>\r\n<head>\r\n    <title>Error - HangFire</title>\r'' +\r\n''\n    <meta charset=\''utf-8\'' />\r\n    <meta name=\''viewport\'' content=\''width=device-w'' +\r\n''idth, initial-scale=1.0\''>\r\n    <link rel=\''stylesheet\'' href=\'''')", span="43-45", cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="JobManager.feature.cs"];
m35_3 [label="Write(Request.LinkTo(''/css/styles.css''))", span="50-50", cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="JobManager.feature.cs"];
m35_4 [label="WriteLiteral(''\'' />\r\n</head>\r\n<body>\r\n    <div class=\''container\''>\r\n        <div class=\''jumbotron'' +\r\n''\'' style=\''margin-top: 40px;\''>\r\n\r\n            <h1>HangFire <small>An exception occ'' +\r\n''ured</small></h1>\r\n            <p class=\''lead\''>'')", span="55-57", cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="JobManager.feature.cs"];
m35_5 [label="Write(Exception.Message)", span="62-62", cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="JobManager.feature.cs"];
m35_6 [label="WriteLiteral(''</p>\r\n\r\n            <pre>'')", span="67-67", cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="JobManager.feature.cs"];
m35_7 [label="Write(HtmlHelper.MarkupStackTrace(Exception.ToString()))", span="72-72", cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="JobManager.feature.cs"];
m35_8 [label="WriteLiteral(''</pre>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n'')", span="77-77", cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="JobManager.feature.cs"];
m35_9 [label="Exit HangFire.Web.Pages.ErrorPage.Execute()", span="34-34", cluster="HangFire.Web.Pages.ErrorPage.Execute()", file="JobManager.feature.cs"];
m35_15 [label="Entry Unk.Write", span="", cluster="Unk.Write", file="JobManager.feature.cs"];
m35_16 [label="HangFire.Web.Pages.ErrorPage", span="", file="JobManager.feature.cs"];
m36_342 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="239-239", cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="JobManagerSteps.cs"];
m36_601 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", span="853-853", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_602 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetRangeFromSet(null, 0, 1));\r\n            })", span="855-858", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_603 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", span="853-853", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_134 [label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40", cluster="Hangfire.Storage.InvocationData.Deserialize()", file="JobManagerSteps.cs"];
m36_600 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JobManagerSteps.cs"];
m36_380 [label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="286-286", cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="JobManagerSteps.cs"];
m36_36 [label="Entry Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="52-52", cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="JobManagerSteps.cs"];
m36_789 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", span="1168-1168", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="JobManagerSteps.cs"];
m36_791 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'', value = ''1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'', value = ''2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetValueFromHash(''hash-1'', ''field-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(''1'', result);\r\n            })", span="1174-1189", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="JobManagerSteps.cs"];
m36_790 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [Value])\r\nvalues (@key, @field, @value)''", span="1170-1172", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="JobManagerSteps.cs"];
m36_792 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", span="1168-1168", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsValue_OfAGivenField()", file="JobManagerSteps.cs"];
m36_457 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="644-644", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="JobManagerSteps.cs"];
m36_458 [label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))))", span="646-647", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="JobManagerSteps.cs"];
m36_459 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", span="644-644", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_ThrowsAnException_WhenTimeOutIsNegative()", file="JobManagerSteps.cs"];
m36_439 [label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="323-323", cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="JobManagerSteps.cs"];
m36_343 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="492-492", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="JobManagerSteps.cs"];
m36_344 [label="UseConnection(connection => Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)))", span="494-495", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="JobManagerSteps.cs"];
m36_345 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", span="492-492", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_ToScoreIsLowerThanFromScore()", file="JobManagerSteps.cs"];
m36_718 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", span="1054-1054", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_719 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetListCount(''my-list'');\r\n                Assert.Equal(0, result);\r\n            })", span="1056-1060", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_720 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", span="1054-1054", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsZero_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_646 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", span="932-932", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="JobManagerSteps.cs"];
m36_648 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 12 },\r\n                    new { key = ''counter-2'', value = 15 }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetCounter(''counter-1'');\r\n\r\n                Assert.Equal(12, result);\r\n            })", span="938-951", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="JobManagerSteps.cs"];
m36_647 [label="string arrangeSql = @''\r\ninsert into HangFire.AggregatedCounter ([Key], [Value])\r\nvalues (@key, @value)''", span="934-936", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="JobManagerSteps.cs"];
m36_649 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", span="932-932", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_IncludesValues_FromCounterAggregateTable()", file="JobManagerSteps.cs"];
m36_843 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", span="1262-1262", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="JobManagerSteps.cs"];
m36_845 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromList(''list-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(new [] { ''3'', ''1'' }, result);\r\n            })", span="1268-1283", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="JobManagerSteps.cs"];
m36_844 [label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], Value)\r\nvalues (@key, @value)''", span="1264-1266", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="JobManagerSteps.cs"];
m36_846 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", span="1262-1262", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAllItems_FromAGivenList()", file="JobManagerSteps.cs"];
m36_554 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="271-271", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="JobManagerSteps.cs"];
m36_250 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="340-340", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="JobManagerSteps.cs"];
m36_251 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="342-348", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="JobManagerSteps.cs"];
m36_252 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", span="340-340", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenNameIsNull()", file="JobManagerSteps.cs"];
m36_322 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="456-456", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="JobManagerSteps.cs"];
m36_324 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single();\r\n\r\n                var value = connection.GetJobParameter(id.ToString(), ''name'');\r\n\r\n                Assert.Equal(''value'', value);\r\n            })", span="467-476", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="JobManagerSteps.cs"];
m36_323 [label="string arrangeSql = @''\r\ndeclare @id int\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nset @id = scope_identity()\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@id, @name, @value)\r\nselect @id''", span="458-465", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="JobManagerSteps.cs"];
m36_325 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", span="456-456", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsParameterValue_WhenJobExists()", file="JobManagerSteps.cs"];
m36_887 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="JobManagerSteps.cs"];
m36_283 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="399-399", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="JobManagerSteps.cs"];
m36_285 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', null);\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal((string) null, parameter.Value);\r\n            })", span="406-418", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="JobManagerSteps.cs"];
m36_284 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="401-404", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="JobManagerSteps.cs"];
m36_286 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", span="399-399", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_CanAcceptNulls_AsValues()", file="JobManagerSteps.cs"];
m36_132 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="JobManagerSteps.cs"];
m36_836 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1252-1252", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_837 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromList(''my-list'');\r\n                Assert.Empty(result);\r\n            })", span="1254-1258", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_838 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1252-1252", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_895 [label="Entry SqlServerConnection.cstr", span="", cluster="SqlServerConnection.cstr", file="JobManagerSteps.cs"];
m36_188 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="213-213", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="JobManagerSteps.cs"];
m36_189 [label="UseConnection(\r\n                connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null)))", span="215-217", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="JobManagerSteps.cs"];
m36_190 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", span="213-213", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ThrowsAnException_WhenJobIdIsNull()", file="JobManagerSteps.cs"];
m36_862 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", span="1296-1296", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="JobManagerSteps.cs"];
m36_863 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetSetTtl(''my-set'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1298-1302", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="JobManagerSteps.cs"];
m36_864 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", span="1296-1296", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsNegativeValue_WhenSetDoesNotExist()", file="JobManagerSteps.cs"];
m36_429 [label="Entry Unk.NotEqual", span="", cluster="Unk.NotEqual", file="JobManagerSteps.cs"];
m36_808 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="473-473", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="JobManagerSteps.cs"];
m36_698 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", span="1019-1019", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="JobManagerSteps.cs"];
m36_700 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetHashTtl(''hash-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1025-1040", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="JobManagerSteps.cs"];
m36_699 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [ExpireAt])\r\nvalues (@key, @field, @expireAt)''", span="1021-1023", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="JobManagerSteps.cs"];
m36_701 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", span="1019-1019", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsExpirationTimeForHash()", file="JobManagerSteps.cs"];
m36_260 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="352-352", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="JobManagerSteps.cs"];
m36_262 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''Value'', parameter.Value);\r\n            })", span="359-371", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="JobManagerSteps.cs"];
m36_261 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="354-357", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="JobManagerSteps.cs"];
m36_263 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", span="352-352", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameters_CreatesNewParameter_WhenParameterWithTheGivenNameDoesNotExists()", file="JobManagerSteps.cs"];
m36_332 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="480-480", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_333 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="482-488", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_334 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", span="480-480", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_771 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="432-432", cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="JobManagerSteps.cs"];
m36_409 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="587-587", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="JobManagerSteps.cs"];
m36_410 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null)))", span="589-590", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="JobManagerSteps.cs"];
m36_411 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", span="587-587", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_ThrowsAnException_WhenServerIdIsNull()", file="JobManagerSteps.cs"];
m36_751 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", span="1109-1109", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="JobManagerSteps.cs"];
m36_753 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''list-2'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetListTtl(''list-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1115-1130", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="JobManagerSteps.cs"];
m36_752 [label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="1111-1113", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="JobManagerSteps.cs"];
m36_754 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", span="1109-1109", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsExpirationTimeForList()", file="JobManagerSteps.cs"];
m36_368 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="JobManagerSteps.cs"];
m36_218 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", span="268-268", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="JobManagerSteps.cs"];
m36_220 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var data = new Dictionary<string, string>\r\n                {\r\n                    { ''key'', ''Value'' }\r\n                };\r\n\r\n                var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id;\r\n\r\n                var result = connection.GetStateData(jobId.ToString());\r\n                Assert.NotNull(result);\r\n\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="284-299", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="JobManagerSteps.cs"];
m36_219 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues ('', '', '', getutcdate());\r\ndeclare @JobId int;\r\nset @JobId = scope_identity();\r\ninsert into HangFire.State (JobId, Name, CreatedAt)\r\nvalues (@JobId, 'old-state', getutcdate());\r\ninsert into HangFire.State (JobId, Name, Reason, Data, CreatedAt)\r\nvalues (@JobId, @name, @reason, @data, getutcdate());\r\ndeclare @StateId int;\r\nset @StateId = scope_identity();\r\nupdate HangFire.Job set StateId = @StateId;\r\nselect @JobId as Id;''", span="270-282", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="JobManagerSteps.cs"];
m36_221 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", span="268-268", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData_WhenPropertiesAreCamelcased()", file="JobManagerSteps.cs"];
m36_637 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", span="907-907", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="JobManagerSteps.cs"];
m36_639 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 1 },\r\n                    new { key = ''counter-2'', value = 1 },\r\n                    new { key = ''counter-1'', value = 1 }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetCounter(''counter-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="913-928", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="JobManagerSteps.cs"];
m36_638 [label="string arrangeSql = @''\r\ninsert into HangFire.Counter ([Key], [Value])\r\nvalues (@key, @value)''", span="909-911", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="JobManagerSteps.cs"];
m36_640 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", span="907-907", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsSumOfValues_InCounterTable()", file="JobManagerSteps.cs"];
m36_238 [label="Entry Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", span="26-26", cluster="Hangfire.Storage.InvocationData.InvocationData(string, string, string, string)", file="JobManagerSteps.cs"];
m36_826 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", span="1242-1242", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_827 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetAllItemsFromList(null));\r\n            })", span="1244-1248", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_828 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", span="1242-1242", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromList_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_467 [label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="335-335", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="JobManagerSteps.cs"];
m36_6 [label="Exit HangFire.Sample.MvcApplication.Application_Start()", span="16-16", cluster="HangFire.Sample.MvcApplication.Application_Start()", file="JobManagerSteps.cs"];
m36_381 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="544-544", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="JobManagerSteps.cs"];
m36_382 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null));\r\n\r\n                Assert.Equal(''context'', exception.ParamName);\r\n            })", span="546-552", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="JobManagerSteps.cs"];
m36_383 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", span="544-544", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenContextIsNull()", file="JobManagerSteps.cs"];
m36_743 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="456-456", cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="JobManagerSteps.cs"];
m36_664 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="404-404", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="JobManagerSteps.cs"];
m36_0 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="20-20", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="JobManagerSteps.cs"];
m36_1 [label="_queue = new Mock<IPersistentJobQueue>()", span="22-22", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="JobManagerSteps.cs"];
m36_2 [label="var provider = new Mock<IPersistentJobQueueProvider>()", span="24-24", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="JobManagerSteps.cs"];
m36_3 [label="provider.Setup(x => x.GetJobQueue())\r\n                .Returns(_queue.Object)", span="25-26", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="JobManagerSteps.cs"];
m36_4 [label="_providers = new PersistentJobQueueProviderCollection(provider.Object)", span="28-28", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="JobManagerSteps.cs"];
m36_5 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", span="20-20", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SqlServerConnectionFacts()", file="JobManagerSteps.cs"];
m36_184 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()", file="JobManagerSteps.cs"];
m36_305 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="434-434", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="JobManagerSteps.cs"];
m36_306 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="436-442", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="JobManagerSteps.cs"];
m36_307 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", span="434-434", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenNameIsNull()", file="JobManagerSteps.cs"];
m36_182 [label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="67-67", cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="JobManagerSteps.cs"];
m36_229 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="303-303", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="JobManagerSteps.cs"];
m36_230 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="305-308", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="JobManagerSteps.cs"];
m36_231 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result.LoadException);\r\n            })", span="310-324", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="JobManagerSteps.cs"];
m36_232 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", span="303-303", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsJobLoadException_IfThereWasADeserializationException()", file="JobManagerSteps.cs"];
m36_869 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", span="1306-1306", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="JobManagerSteps.cs"];
m36_871 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) },\r\n                    new { key = ''set-2'', value = ''2'', expireAt = (DateTime?) null }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetSetTtl(''set-1'');\r\n\r\n                // Assert\r\n                Assert.True(TimeSpan.FromMinutes(59) < result);\r\n                Assert.True(result < TimeSpan.FromMinutes(61));\r\n            })", span="1312-1327", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="JobManagerSteps.cs"];
m36_870 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [ExpireAt], [Score])\r\nvalues (@key, @value, @expireAt, 0.0)''", span="1308-1310", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="JobManagerSteps.cs"];
m36_872 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", span="1306-1306", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ReturnsExpirationTime_OfAGivenSet()", file="JobManagerSteps.cs"];
m36_629 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="389-389", cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="JobManagerSteps.cs"];
m36_135 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="JobManagerSteps.cs"];
m36_418 [label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="311-311", cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="JobManagerSteps.cs"];
m36_7 [label="Entry Mock<IPersistentJobQueueProvider>.cstr", span="", cluster="Mock<IPersistentJobQueueProvider>.cstr", file="JobManagerSteps.cs"];
m36_133 [label="Entry Hangfire.Common.JobHelper.FromJson<T>(string)", span="39-39", cluster="Hangfire.Common.JobHelper.FromJson<T>(string)", file="JobManagerSteps.cs"];
m36_545 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="766-766", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_546 [label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null)))", span="768-769", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_547 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", span="766-766", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_490 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", span="682-682", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_491 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                Assert.NotNull(result);\r\n                Assert.Equal(0, result.Count);\r\n            })", span="684-690", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_492 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", span="682-682", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsEmptyCollection_WhenKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_198 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", span="221-221", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="JobManagerSteps.cs"];
m36_199 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetStateData(''1'');\r\n                Assert.Null(result);\r\n            })", span="223-227", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="JobManagerSteps.cs"];
m36_200 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", span="221-221", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsNull_IfThereIsNoSuchState()", file="JobManagerSteps.cs"];
m36_555 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", span="773-773", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="JobManagerSteps.cs"];
m36_556 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n                Assert.Null(result);\r\n            })", span="775-779", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="JobManagerSteps.cs"];
m36_557 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", span="773-773", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsNull_IfHashDoesNotExist()", file="JobManagerSteps.cs"];
m36_419 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="594-594", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="JobManagerSteps.cs"];
m36_421 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.RemoveServer(''Server1'');\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase);\r\n            })", span="602-610", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="JobManagerSteps.cs"];
m36_420 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues \r\n('Server1', '', getutcdate()),\r\n('Server2', '', getutcdate())''", span="596-600", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="JobManagerSteps.cs"];
m36_422 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", span="594-594", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveServer_RemovesAServerRecord()", file="JobManagerSteps.cs"];
m36_562 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", span="783-783", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="JobManagerSteps.cs"];
m36_564 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-hash'', field = ''Key1'', value = ''Value1'' },\r\n                    new { key = ''some-hash'', field = ''Key2'', value = ''Value2'' },\r\n                    new { key = ''another-hash'', field = ''Key3'', value = ''Value3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllEntriesFromHash(''some-hash'');\r\n\r\n                // Assert\r\n                Assert.NotNull(result);\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="789-807", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="JobManagerSteps.cs"];
m36_563 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field], [Value])\r\nvalues (@key, @field, @value)''", span="785-787", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="JobManagerSteps.cs"];
m36_565 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", span="783-783", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllEntriesFromHash_ReturnsAllKeysAndTheirValues()", file="JobManagerSteps.cs"];
m36_761 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", span="1134-1134", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_762 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(null, ''name''));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1136-1142", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_763 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", span="1134-1134", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_15 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="32-32", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobManagerSteps.cs"];
m36_16 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerConnection(null))", span="34-35", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobManagerSteps.cs"];
m36_17 [label="Assert.Equal(''storage'', exception.ParamName)", span="37-37", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobManagerSteps.cs"];
m36_18 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="32-32", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobManagerSteps.cs"];
m36_691 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", span="1009-1009", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="JobManagerSteps.cs"];
m36_692 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetHashTtl(''my-hash'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1011-1015", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="JobManagerSteps.cs"];
m36_693 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", span="1009-1009", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ReturnsNegativeValue_WhenHashDoesNotExist()", file="JobManagerSteps.cs"];
m36_772 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", span="1146-1146", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="JobManagerSteps.cs"];
m36_773 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(''key'', null));\r\n\r\n                Assert.Equal(''name'', exception.ParamName);\r\n            })", span="1148-1154", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="JobManagerSteps.cs"];
m36_774 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", span="1146-1146", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ThrowsAnException_WhenNameIsNull()", file="JobManagerSteps.cs"];
m36_391 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="556-556", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="JobManagerSteps.cs"];
m36_392 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                };\r\n                connection.AnnounceServer(''server'', context1);\r\n\r\n                var server = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', server.Id);\r\n                Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data);\r\n                Assert.NotNull(server.LastHeartbeat);\r\n\r\n                var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                };\r\n                connection.AnnounceServer(''server'', context2);\r\n                var sameServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server'', sameServer.Id);\r\n                Assert.Contains(''1000'', sameServer.Data);\r\n            })", span="558-583", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="JobManagerSteps.cs"];
m36_393 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", span="556-556", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_CreatesOrUpdatesARecord()", file="JobManagerSteps.cs"];
m36_542 [label="Entry lambda expression", span="758-758", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_29 [label="Entry lambda expression", span="43-51", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_32 [label="connection.FetchNextJob(queues, token)", span="48-48", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_30 [label="var token = new CancellationToken()", span="45-45", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_31 [label="var queues = new[] { ''default'' }", span="46-46", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_33 [label="_queue.Verify(x => x.Dequeue(queues, token))", span="50-50", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_46 [label="Entry lambda expression", span="57-65", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_47 [label="var token = new CancellationToken()", span="59-59", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_48 [label="var anotherProvider = new Mock<IPersistentJobQueueProvider>()", span="60-60", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_50 [label="Assert.Throws<InvalidOperationException>(\r\n                    () => connection.FetchNextJob(new[] { ''critical'', ''default'' }, token))", span="63-64", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_54 [label="connection.FetchNextJob(new[] { ''critical'', ''default'' }, token)", span="64-64", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_49 [label="_providers.Add(anotherProvider.Object, new [] { ''critical'' })", span="61-61", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_51 [label="Exit lambda expression", span="57-65", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_53 [label="Entry lambda expression", span="64-64", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_55 [label="Exit lambda expression", span="64-64", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_59 [label="Entry lambda expression", span="71-75", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_60 [label="var transaction = connection.CreateWriteTransaction()", span="73-73", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_61 [label="Assert.NotNull(transaction)", span="74-74", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_62 [label="Exit lambda expression", span="71-75", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_68 [label="Entry lambda expression", span="81-85", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_77 [label="Entry lambda expression", span="91-101", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_78 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero))", span="93-98", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_79 [label="Assert.Equal(''job'', exception.ParamName)", span="100-100", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_81 [label="Entry lambda expression", span="94-98", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_82 [label="connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero)", span="94-98", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_83 [label="Exit lambda expression", span="94-98", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_105 [label="Entry lambda expression", span="123-159", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_109 [label="Assert.NotEmpty(jobId)", span="133-133", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_107 [label="var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1))", span="126-130", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_108 [label="Assert.NotNull(jobId)", span="132-132", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_110 [label="var sqlJob = sql.Query(''select * from HangFire.Job'').Single()", span="135-135", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_151 [label="Entry lambda expression", span="165-166", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_152 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null))", span="165-166", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_153 [label="Exit lambda expression", span="165-166", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_154 [label="Entry lambda expression", span="166-166", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_155 [label="connection.GetJobData(null)", span="166-166", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_156 [label="Exit lambda expression", span="166-166", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_161 [label="Entry lambda expression", span="172-176", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_162 [label="var result = connection.GetJobData(''1'')", span="174-174", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_163 [label="Assert.Null(result)", span="175-175", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_164 [label="Exit lambda expression", span="172-176", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_172 [label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="191-198", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_170 [label="Entry lambda expression", span="187-209", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_171 [label="var job = Job.FromExpression(() => SampleMethod(''wrong''))", span="189-189", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_173 [label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="200-200", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_185 [label="Entry lambda expression", span="189-189", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_186 [label="SampleMethod(''wrong'')", span="189-189", cluster="lambda expression", color=green, community=0, file="JobManagerSteps.cs"];
m36_187 [label="Exit lambda expression", span="189-189", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_34 [label="Exit lambda expression", span="43-51", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_39 [label="x.Dequeue(queues, token)", span="50-50", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_38 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_90 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero))", span="109-114", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_192 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetStateData(null))", span="216-217", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_243 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''))", span="332-333", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_254 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(''1'', null, ''value''))", span="344-345", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_298 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''))", span="426-427", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_309 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(''1'', null))", span="438-439", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_327 [label="var id = sql.Query<int>(\r\n                    arrangeSql,\r\n                    new { name = ''name'', value = ''value'' }).Single()", span="469-471", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_336 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetFirstByLowestScoreFromSet(null, 0, 1))", span="484-485", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_347 [label="Assert.Throws<ArgumentException>(\r\n                () => connection.GetFirstByLowestScoreFromSet(''key'', 0, -1))", span="494-495", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_373 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()))", span="536-537", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_385 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(''server'', null))", span="548-549", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_413 [label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.RemoveServer(null))", span="589-590", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_434 [label="Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null))", span="616-617", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_461 [label="Assert.Throws<ArgumentException>(\r\n                () => connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5)))", span="646-647", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_484 [label="Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null))", span="678-678", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_513 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()))", span="725-726", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_524 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null))", span="737-738", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_549 [label="Assert.Throws<ArgumentNullException>(() => connection.GetAllEntriesFromHash(null))", span="769-769", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_578 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetSetCount(null))", span="815-816", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_605 [label="Assert.Throws<ArgumentNullException>(() => connection.GetRangeFromSet(null, 0, 1))", span="857-857", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_624 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetCounter(null))", span="891-892", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_659 [label="Assert.Throws<ArgumentNullException>(() => connection.GetHashCount(null))", span="959-959", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_685 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetHashTtl(null))", span="1003-1004", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_712 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListCount(null))", span="1048-1049", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_738 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListTtl(null))", span="1093-1094", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_765 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(null, ''name''))", span="1138-1139", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_776 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetValueFromHash(''key'', null))", span="1150-1151", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_802 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetRangeFromList(null, 0, 1))", span="1197-1198", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_830 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetAllItemsFromList(null))", span="1246-1247", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_856 [label="Assert.Throws<ArgumentNullException>(() => connection.GetSetTtl(null))", span="1291-1291", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_70 [label="Assert.NotNull(@lock)", span="84-84", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_174 [label="Assert.NotNull(result)", span="202-202", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_175 [label="Assert.NotNull(result.Job)", span="203-203", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_213 [label="Assert.NotNull(result)", span="259-259", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_226 [label="Assert.NotNull(result)", span="296-296", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_236 [label="Assert.NotNull(result.LoadException)", span="323-323", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_400 [label="Assert.NotNull(server.LastHeartbeat)", span="572-572", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_495 [label="Assert.NotNull(result)", span="688-688", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_569 [label="Assert.NotNull(result)", span="803-803", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_71 [label="Exit lambda expression", span="81-85", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_69 [label="var @lock = connection.AcquireDistributedLock(''1'', TimeSpan.FromSeconds(1))", span="83-83", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_80 [label="Exit lambda expression", span="91-101", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_210 [label="var data = new Dictionary<string, string>\r\n                {\r\n                    { ''Key'', ''Value'' }\r\n                }", span="249-252", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_223 [label="var data = new Dictionary<string, string>\r\n                {\r\n                    { ''key'', ''Value'' }\r\n                }", span="286-289", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_517 [label="connection.SetRangeInHash(null, new Dictionary<string, string>())", span="726-726", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_534 [label="connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                })", span="749-753", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_94 [label="connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero)", span="110-114", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_98 [label="SampleMethod(''hello'')", span="111-111", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_140 [label="SampleMethod(''Hello'')", span="127-127", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_126 [label="Exit lambda expression", span="123-159", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_106 [label="var createdAt = new DateTime(2012, 12, 12)", span="125-125", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_123 [label="var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value)", span="152-155", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_139 [label="Entry lambda expression", span="127-127", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_111 [label="Assert.Equal(jobId, sqlJob.Id.ToString())", span="136-136", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_112 [label="Assert.Equal(createdAt, sqlJob.CreatedAt)", span="137-137", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_113 [label="Assert.Equal(null, (int?) sqlJob.StateId)", span="138-138", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_114 [label="Assert.Equal(null, (string) sqlJob.StateName)", span="139-139", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_115 [label="var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData)", span="141-141", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_116 [label="invocationData.Arguments = sqlJob.Arguments", span="142-142", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_121 [label="Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt)", span="149-149", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_122 [label="Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1))", span="150-150", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_235 [label="var result = connection.GetJobData(((int)jobId.Id).ToString())", span="321-321", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_178 [label="Assert.Null(result.LoadException)", span="206-206", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_203 [label="Assert.Null(result)", span="226-226", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_320 [label="Assert.Null(value)", span="451-451", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_357 [label="Assert.Null(result)", span="506-506", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_560 [label="Assert.Null(result)", span="778-778", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_787 [label="Assert.Null(result)", span="1163-1163", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_234 [label="var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(new InvocationData(null, null, null, null)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single()", span="312-319", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_181 [label="Exit lambda expression", span="187-209", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_176 [label="Assert.Equal(''Succeeded'', result.State)", span="204-204", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_177 [label="Assert.Equal(''Arguments'', result.Job.Arguments[0])", span="205-205", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_179 [label="Assert.True(DateTime.UtcNow.AddMinutes(-1) < result.CreatedAt)", span="207-207", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_180 [label="Assert.True(result.CreatedAt < DateTime.UtcNow.AddMinutes(1))", span="208-208", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_211 [label="var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id", span="254-256", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_224 [label="var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id", span="291-293", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_265 [label="var job = sql.Query(arrangeSql).Single()", span="361-361", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_268 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="366-368", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_276 [label="var job = sql.Query(arrangeSql).Single()", span="384-384", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_280 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="390-392", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_288 [label="var job = sql.Query(arrangeSql).Single()", span="408-408", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_291 [label="var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single()", span="413-415", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_397 [label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="567-567", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_403 [label="var sameServer = sql.Query(''select * from HangFire.Server'').Single()", span="580-580", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_426 [label="var server = sql.Query(''select * from HangFire.Server'').Single()", span="608-608", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_447 [label="var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat)", span="635-636", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_475 [label="var liveServer = sql.Query(''select * from HangFire.Server'').Single()", span="669-669", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_535 [label="var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value)", span="755-758", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_11 [label="Entry Unk.RegisterBundles", span="", cluster="Unk.RegisterBundles", file="JobManagerSteps.cs"];
m36_89 [label="Entry lambda expression", span="107-117", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_191 [label="Entry lambda expression", span="216-217", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_201 [label="Entry lambda expression", span="223-227", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_209 [label="Entry lambda expression", span="247-264", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_222 [label="Entry lambda expression", span="284-299", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_233 [label="Entry lambda expression", span="310-324", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_242 [label="Entry lambda expression", span="330-336", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_253 [label="Entry lambda expression", span="342-348", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_264 [label="Entry lambda expression", span="359-371", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_275 [label="Entry lambda expression", span="382-395", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_287 [label="Entry lambda expression", span="406-418", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_297 [label="Entry lambda expression", span="424-430", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_308 [label="Entry lambda expression", span="436-442", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_318 [label="Entry lambda expression", span="448-452", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_326 [label="Entry lambda expression", span="467-476", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_335 [label="Entry lambda expression", span="482-488", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_346 [label="Entry lambda expression", span="494-495", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_355 [label="Entry lambda expression", span="501-507", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_363 [label="Entry lambda expression", span="521-528", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_372 [label="Entry lambda expression", span="534-540", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_384 [label="Entry lambda expression", span="546-552", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_394 [label="Entry lambda expression", span="558-583", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_412 [label="Entry lambda expression", span="589-590", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_423 [label="Entry lambda expression", span="602-610", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_433 [label="Entry lambda expression", span="616-617", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_444 [label="Entry lambda expression", span="629-640", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_460 [label="Entry lambda expression", span="646-647", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_472 [label="Entry lambda expression", span="657-671", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_483 [label="Entry lambda expression", span="677-678", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_493 [label="Entry lambda expression", span="684-690", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_502 [label="Entry lambda expression", span="700-717", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_512 [label="Entry lambda expression", span="723-729", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_523 [label="Entry lambda expression", span="735-741", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_533 [label="Entry lambda expression", span="747-762", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_548 [label="Entry lambda expression", span="768-769", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_558 [label="Entry lambda expression", span="775-779", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_566 [label="Entry lambda expression", span="789-807", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_577 [label="Entry lambda expression", span="813-817", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_587 [label="Entry lambda expression", span="823-827", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_595 [label="Entry lambda expression", span="837-849", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_604 [label="Entry lambda expression", span="855-858", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_615 [label="Entry lambda expression", span="868-883", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_623 [label="Entry lambda expression", span="889-893", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_633 [label="Entry lambda expression", span="899-903", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_641 [label="Entry lambda expression", span="913-928", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_650 [label="Entry lambda expression", span="938-951", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_658 [label="Entry lambda expression", span="957-960", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_668 [label="Entry lambda expression", span="966-970", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_676 [label="Entry lambda expression", span="980-995", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_684 [label="Entry lambda expression", span="1001-1005", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_694 [label="Entry lambda expression", span="1011-1015", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_702 [label="Entry lambda expression", span="1025-1040", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_711 [label="Entry lambda expression", span="1046-1050", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_721 [label="Entry lambda expression", span="1056-1060", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_729 [label="Entry lambda expression", span="1070-1085", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_737 [label="Entry lambda expression", span="1091-1095", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_747 [label="Entry lambda expression", span="1101-1105", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_755 [label="Entry lambda expression", span="1115-1130", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_764 [label="Entry lambda expression", span="1136-1142", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_775 [label="Entry lambda expression", span="1148-1154", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_785 [label="Entry lambda expression", span="1160-1164", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_793 [label="Entry lambda expression", span="1174-1189", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_801 [label="Entry lambda expression", span="1195-1201", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_812 [label="Entry lambda expression", span="1207-1211", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_821 [label="Entry lambda expression", span="1221-1238", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_829 [label="Entry lambda expression", span="1244-1248", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_839 [label="Entry lambda expression", span="1254-1258", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_847 [label="Entry lambda expression", span="1268-1283", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_855 [label="Entry lambda expression", span="1289-1292", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_865 [label="Entry lambda expression", span="1298-1302", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_873 [label="Entry lambda expression", span="1312-1327", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_897 [label="Entry lambda expression", span="1347-1347", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_40 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_21 [label="Entry lambda expression", span="35-35", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_91 [label="Assert.Equal(''parameters'', exception.ParamName)", span="116-116", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_93 [label="Entry lambda expression", span="110-114", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_193 [label="Exit lambda expression", span="216-217", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_194 [label="Entry lambda expression", span="217-217", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_244 [label="Assert.Equal(''id'', exception.ParamName)", span="335-335", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_246 [label="Entry lambda expression", span="333-333", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_255 [label="Assert.Equal(''name'', exception.ParamName)", span="347-347", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_257 [label="Entry lambda expression", span="345-345", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_299 [label="Assert.Equal(''id'', exception.ParamName)", span="429-429", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_301 [label="Entry lambda expression", span="427-427", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_310 [label="Assert.Equal(''name'', exception.ParamName)", span="441-441", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_312 [label="Entry lambda expression", span="439-439", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_328 [label="var value = connection.GetJobParameter(id.ToString(), ''name'')", span="473-473", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_337 [label="Assert.Equal(''key'', exception.ParamName)", span="487-487", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_339 [label="Entry lambda expression", span="485-485", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_348 [label="Exit lambda expression", span="494-495", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_349 [label="Entry lambda expression", span="495-495", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_374 [label="Assert.Equal(''serverId'', exception.ParamName)", span="539-539", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_376 [label="Entry lambda expression", span="537-537", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_386 [label="Assert.Equal(''context'', exception.ParamName)", span="551-551", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_388 [label="Entry lambda expression", span="549-549", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_414 [label="Exit lambda expression", span="589-590", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_415 [label="Entry lambda expression", span="590-590", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_435 [label="Exit lambda expression", span="616-617", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_436 [label="Entry lambda expression", span="617-617", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_462 [label="Exit lambda expression", span="646-647", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_463 [label="Entry lambda expression", span="647-647", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_485 [label="Exit lambda expression", span="677-678", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_486 [label="Entry lambda expression", span="678-678", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_514 [label="Assert.Equal(''key'', exception.ParamName)", span="728-728", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_516 [label="Entry lambda expression", span="726-726", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_525 [label="Assert.Equal(''keyValuePairs'', exception.ParamName)", span="740-740", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_527 [label="Entry lambda expression", span="738-738", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_550 [label="Exit lambda expression", span="768-769", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_551 [label="Entry lambda expression", span="769-769", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_579 [label="Exit lambda expression", span="813-817", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_580 [label="Entry lambda expression", span="816-816", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_606 [label="Exit lambda expression", span="855-858", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_607 [label="Entry lambda expression", span="857-857", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_625 [label="Exit lambda expression", span="889-893", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_626 [label="Entry lambda expression", span="892-892", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_660 [label="Exit lambda expression", span="957-960", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_661 [label="Entry lambda expression", span="959-959", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_686 [label="Exit lambda expression", span="1001-1005", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_687 [label="Entry lambda expression", span="1004-1004", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_713 [label="Exit lambda expression", span="1046-1050", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_714 [label="Entry lambda expression", span="1049-1049", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_739 [label="Exit lambda expression", span="1091-1095", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_740 [label="Entry lambda expression", span="1094-1094", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_766 [label="Assert.Equal(''key'', exception.ParamName)", span="1141-1141", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_768 [label="Entry lambda expression", span="1139-1139", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_777 [label="Assert.Equal(''name'', exception.ParamName)", span="1153-1153", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_779 [label="Entry lambda expression", span="1151-1151", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_803 [label="Assert.Equal(''key'', exception.ParamName)", span="1200-1200", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_805 [label="Entry lambda expression", span="1198-1198", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_831 [label="Exit lambda expression", span="1244-1248", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_832 [label="Entry lambda expression", span="1247-1247", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_857 [label="Exit lambda expression", span="1289-1292", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_858 [label="Entry lambda expression", span="1291-1291", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_212 [label="var result = connection.GetStateData(jobId.ToString())", span="258-258", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_214 [label="Assert.Equal(''Name'', result.Name)", span="261-261", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_225 [label="var result = connection.GetStateData(jobId.ToString())", span="295-295", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_227 [label="Assert.Equal(''Value'', result.Data[''Key''])", span="298-298", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_237 [label="Exit lambda expression", span="310-324", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_399 [label="Assert.True(((string)server.Data).StartsWith(\r\n                    ''{\''WorkerCount\'':4,\''Queues\'':[\''critical\'',\''default\''],\''StartedAt\'':''),\r\n                    server.Data)", span="569-571", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_401 [label="var context2 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''default'' },\r\n                    WorkerCount = 1000 \r\n                }", span="574-578", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_494 [label="var result = connection.GetAllItemsFromSet(''some-set'')", span="686-686", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_496 [label="Assert.Equal(0, result.Count)", span="689-689", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_568 [label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="800-800", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_570 [label="Assert.Equal(2, result.Count)", span="804-804", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_118 [label="Assert.Equal(typeof(SqlServerConnectionFacts), job.Type)", span="145-145", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_119 [label="Assert.Equal(''SampleMethod'', job.Method.Name)", span="146-146", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_120 [label="Assert.Equal(''\''Hello\'''', job.Arguments[0])", span="147-147", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_124 [label="Assert.Equal(''Value1'', parameters[''Key1''])", span="157-157", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_125 [label="Assert.Equal(''Value2'', parameters[''Key2''])", span="158-158", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_215 [label="Assert.Equal(''Reason'', result.Reason)", span="262-262", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_216 [label="Assert.Equal(''Value'', result.Data[''Key''])", span="263-263", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_269 [label="Assert.Equal(''Value'', parameter.Value)", span="370-370", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_281 [label="Assert.Equal(''AnotherValue'', parameter.Value)", span="394-394", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_292 [label="Assert.Equal((string) null, parameter.Value)", span="417-417", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_329 [label="Assert.Equal(''value'', value)", span="475-475", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_366 [label="Assert.Equal(''-1.0'', result)", span="527-527", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_398 [label="Assert.Equal(''server'', server.Id)", span="568-568", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_404 [label="Assert.Equal(''server'', sameServer.Id)", span="581-581", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_449 [label="Assert.Equal(2012, servers[''server2''].Year)", span="639-639", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_476 [label="Assert.Equal(''server2'', liveServer.Id)", span="670-670", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_505 [label="Assert.Equal(2, result.Count)", span="714-714", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_536 [label="Assert.Equal(''Value1'', result[''Key1''])", span="760-760", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_537 [label="Assert.Equal(''Value2'', result[''Key2''])", span="761-761", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_571 [label="Assert.Equal(''Value1'', result[''Key1''])", span="805-805", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_572 [label="Assert.Equal(''Value2'', result[''Key2''])", span="806-806", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_589 [label="Assert.Equal(0, result)", span="826-826", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_598 [label="Assert.Equal(2, result)", span="848-848", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_618 [label="Assert.Equal(new [] { ''3'', ''4'' }, result)", span="882-882", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_635 [label="Assert.Equal(0, result)", span="902-902", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_644 [label="Assert.Equal(2, result)", span="927-927", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_653 [label="Assert.Equal(12, result)", span="950-950", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_670 [label="Assert.Equal(0, result)", span="969-969", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_679 [label="Assert.Equal(2, result)", span="994-994", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_723 [label="Assert.Equal(0, result)", span="1059-1059", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_732 [label="Assert.Equal(2, result)", span="1084-1084", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_796 [label="Assert.Equal(''1'', result)", span="1188-1188", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_824 [label="Assert.Equal(new [] { ''4'', ''3'' }, result)", span="1237-1237", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_850 [label="Assert.Equal(new [] { ''3'', ''1'' }, result)", span="1282-1282", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_518 [label="Exit lambda expression", span="726-726", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_95 [label="Exit lambda expression", span="110-114", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_97 [label="Entry lambda expression", span="111-111", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_99 [label="Exit lambda expression", span="111-111", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_141 [label="Exit lambda expression", span="127-127", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_142 [label="Entry lambda expression", span="155-155", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_145 [label="Entry lambda expression", span="155-155", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_117 [label="var job = invocationData.Deserialize()", span="144-144", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_202 [label="var result = connection.GetStateData(''1'')", span="225-225", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_204 [label="Exit lambda expression", span="223-227", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_319 [label="var value = connection.GetJobParameter(''1'', ''hello'')", span="450-450", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_321 [label="Exit lambda expression", span="448-452", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_356 [label="var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1)", span="503-504", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_358 [label="Exit lambda expression", span="501-507", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_559 [label="var result = connection.GetAllEntriesFromHash(''some-hash'')", span="777-777", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_561 [label="Exit lambda expression", span="775-779", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_786 [label="var result = connection.GetValueFromHash(''my-hash'', ''name'')", span="1162-1162", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_788 [label="Exit lambda expression", span="1160-1164", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_266 [label="string jobId = job.Id.ToString()", span="362-362", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_267 [label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="364-364", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_277 [label="string jobId = job.Id.ToString()", span="385-385", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_279 [label="connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'')", span="388-388", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_289 [label="string jobId = job.Id.ToString()", span="409-409", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_290 [label="connection.SetJobParameter(jobId, ''Name'', null)", span="411-411", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_396 [label="connection.AnnounceServer(''server'', context1)", span="565-565", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_402 [label="connection.AnnounceServer(''server'', context2)", span="579-579", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_405 [label="Assert.Contains(''1000'', sameServer.Data)", span="582-582", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_425 [label="connection.RemoveServer(''Server1'')", span="606-606", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_427 [label="Assert.NotEqual(''Server1'', server.Id, StringComparer.OrdinalIgnoreCase)", span="609-609", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_446 [label="connection.Heartbeat(''server1'')", span="633-633", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_448 [label="Assert.NotEqual(2012, servers[''server1''].Year)", span="638-638", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_451 [label="Entry lambda expression", span="636-636", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_454 [label="Entry lambda expression", span="636-636", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_474 [label="connection.RemoveTimedOutServers(TimeSpan.FromHours(15))", span="667-667", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_539 [label="Entry lambda expression", span="758-758", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_13 [label="Exit lambda expression", span="25-25", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_12 [label="x.GetJobQueue()", span="25-25", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_92 [label="Exit lambda expression", span="107-117", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_195 [label="connection.GetStateData(null)", span="217-217", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_217 [label="Exit lambda expression", span="247-264", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_228 [label="Exit lambda expression", span="284-299", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_245 [label="Exit lambda expression", span="330-336", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_247 [label="connection.SetJobParameter(null, ''name'', ''value'')", span="333-333", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_256 [label="Exit lambda expression", span="342-348", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_258 [label="connection.SetJobParameter(''1'', null, ''value'')", span="345-345", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_270 [label="Exit lambda expression", span="359-371", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_282 [label="Exit lambda expression", span="382-395", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_278 [label="connection.SetJobParameter(jobId, ''Name'', ''Value'')", span="387-387", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_293 [label="Exit lambda expression", span="406-418", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_300 [label="Exit lambda expression", span="424-430", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_302 [label="connection.GetJobParameter(null, ''hello'')", span="427-427", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_311 [label="Exit lambda expression", span="436-442", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_313 [label="connection.GetJobParameter(''1'', null)", span="439-439", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_330 [label="Exit lambda expression", span="467-476", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_338 [label="Exit lambda expression", span="482-488", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_340 [label="connection.GetFirstByLowestScoreFromSet(null, 0, 1)", span="485-485", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_350 [label="connection.GetFirstByLowestScoreFromSet(''key'', 0, -1)", span="495-495", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_364 [label="sql.Execute(arrangeSql)", span="523-523", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_367 [label="Exit lambda expression", span="521-528", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_365 [label="var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0)", span="525-525", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_375 [label="Exit lambda expression", span="534-540", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_377 [label="connection.AnnounceServer(null, new ServerContext())", span="537-537", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_387 [label="Exit lambda expression", span="546-552", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_389 [label="connection.AnnounceServer(''server'', null)", span="549-549", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_406 [label="Exit lambda expression", span="558-583", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_395 [label="var context1 = new ServerContext\r\n                {\r\n                    Queues = new[] { ''critical'', ''default'' },\r\n                    WorkerCount = 4\r\n                }", span="560-564", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_416 [label="connection.RemoveServer(null)", span="590-590", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_424 [label="sql.Execute(arrangeSql)", span="604-604", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_428 [label="Exit lambda expression", span="602-610", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_437 [label="connection.Heartbeat(null)", span="617-617", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_445 [label="sql.Execute(arrangeSql)", span="631-631", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_450 [label="Exit lambda expression", span="629-640", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_464 [label="connection.RemoveTimedOutServers(TimeSpan.FromMinutes(-5))", span="647-647", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_473 [label="sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    })", span="659-665", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_477 [label="Exit lambda expression", span="657-671", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_487 [label="connection.GetAllItemsFromSet(null)", span="678-678", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_497 [label="Exit lambda expression", span="684-690", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_503 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-set'', value = ''1'' },\r\n                    new { key = ''some-set'', value = ''2'' },\r\n                    new { key = ''another-set'', value = ''3'' }\r\n                })", span="703-708", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_508 [label="Exit lambda expression", span="700-717", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_504 [label="var result = connection.GetAllItemsFromSet(''some-set'')", span="711-711", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_515 [label="Exit lambda expression", span="723-729", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_526 [label="Exit lambda expression", span="735-741", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_528 [label="connection.SetRangeInHash(''some-hash'', null)", span="738-738", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_538 [label="Exit lambda expression", span="747-762", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_552 [label="connection.GetAllEntriesFromHash(null)", span="769-769", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_567 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-hash'', field = ''Key1'', value = ''Value1'' },\r\n                    new { key = ''some-hash'', field = ''Key2'', value = ''Value2'' },\r\n                    new { key = ''another-hash'', field = ''Key3'', value = ''Value3'' }\r\n                })", span="792-797", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_573 [label="Exit lambda expression", span="789-807", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_581 [label="connection.GetSetCount(null)", span="816-816", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_590 [label="Exit lambda expression", span="823-827", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_588 [label="var result = connection.GetSetCount(''my-set'')", span="825-825", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_596 [label="sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { key = ''set-1'', value = ''value-1'' },\r\n                    new { key = ''set-2'', value = ''value-1'' },\r\n                    new { key = ''set-1'', value = ''value-2'' }\r\n                })", span="839-844", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_599 [label="Exit lambda expression", span="837-849", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_597 [label="var result = connection.GetSetCount(''set-1'')", span="846-846", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_608 [label="connection.GetRangeFromSet(null, 0, 1)", span="857-857", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_616 [label="sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''1'' },\r\n                    new { Key = ''set-1'', Value = ''2'' },\r\n                    new { Key = ''set-1'', Value = ''3'' },\r\n                    new { Key = ''set-1'', Value = ''4'' },\r\n                    new { Key = ''set-2'', Value = ''4'' },\r\n                    new { Key = ''set-1'', Value = ''5'' }\r\n                })", span="870-878", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_619 [label="Exit lambda expression", span="868-883", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_617 [label="var result = connection.GetRangeFromSet(''set-1'', 2, 3)", span="880-880", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_627 [label="connection.GetCounter(null)", span="892-892", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_636 [label="Exit lambda expression", span="899-903", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_634 [label="var result = connection.GetCounter(''my-counter'')", span="901-901", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_642 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 1 },\r\n                    new { key = ''counter-2'', value = 1 },\r\n                    new { key = ''counter-1'', value = 1 }\r\n                })", span="916-921", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_645 [label="Exit lambda expression", span="913-928", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_643 [label="var result = connection.GetCounter(''counter-1'')", span="924-924", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_651 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''counter-1'', value = 12 },\r\n                    new { key = ''counter-2'', value = 15 }\r\n                })", span="941-945", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_654 [label="Exit lambda expression", span="938-951", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_652 [label="var result = connection.GetCounter(''counter-1'')", span="948-948", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_662 [label="connection.GetHashCount(null)", span="959-959", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_671 [label="Exit lambda expression", span="966-970", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_669 [label="var result = connection.GetHashCount(''my-hash'')", span="968-968", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_677 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'' }\r\n                })", span="983-988", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_680 [label="Exit lambda expression", span="980-995", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_678 [label="var result = connection.GetHashCount(''hash-1'')", span="991-991", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_688 [label="connection.GetHashTtl(null)", span="1004-1004", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_697 [label="Exit lambda expression", span="1011-1015", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_695 [label="var result = connection.GetHashTtl(''my-hash'')", span="1013-1013", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_703 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field'', expireAt = (DateTime?)DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''hash-2'', field = ''field'', expireAt = (DateTime?) null }\r\n                })", span="1028-1032", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_707 [label="Exit lambda expression", span="1025-1040", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_704 [label="var result = connection.GetHashTtl(''hash-1'')", span="1035-1035", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_715 [label="connection.GetListCount(null)", span="1049-1049", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_724 [label="Exit lambda expression", span="1056-1060", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_722 [label="var result = connection.GetListCount(''my-list'')", span="1058-1058", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_730 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-2'' }\r\n                })", span="1073-1078", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_733 [label="Exit lambda expression", span="1070-1085", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_731 [label="var result = connection.GetListCount(''list-1'')", span="1081-1081", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_741 [label="connection.GetListTtl(null)", span="1094-1094", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_750 [label="Exit lambda expression", span="1101-1105", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_748 [label="var result = connection.GetListTtl(''my-list'')", span="1103-1103", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_756 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = (DateTime?) DateTime.UtcNow.AddHours(1) },\r\n                    new { key = ''list-2'', expireAt = (DateTime?) null }\r\n                })", span="1118-1122", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_760 [label="Exit lambda expression", span="1115-1130", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_757 [label="var result = connection.GetListTtl(''list-1'')", span="1125-1125", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_767 [label="Exit lambda expression", span="1136-1142", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_769 [label="connection.GetValueFromHash(null, ''name'')", span="1139-1139", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_778 [label="Exit lambda expression", span="1148-1154", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_780 [label="connection.GetValueFromHash(''key'', null)", span="1151-1151", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_794 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'', value = ''1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'', value = ''2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'', value = ''3'' }\r\n                })", span="1177-1182", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_797 [label="Exit lambda expression", span="1174-1189", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_795 [label="var result = connection.GetValueFromHash(''hash-1'', ''field-1'')", span="1185-1185", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_804 [label="Exit lambda expression", span="1195-1201", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_806 [label="connection.GetRangeFromList(null, 0, 1)", span="1198-1198", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_815 [label="Exit lambda expression", span="1207-1211", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_813 [label="var result = connection.GetRangeFromList(''my-list'', 0, 1)", span="1209-1209", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_822 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' },\r\n                    new { key = ''list-1'', value = ''4'' },\r\n                    new { key = ''list-1'', value = ''5'' }\r\n                })", span="1224-1231", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_825 [label="Exit lambda expression", span="1221-1238", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_823 [label="var result = connection.GetRangeFromList(''list-1'', 1, 2)", span="1234-1234", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_833 [label="connection.GetAllItemsFromList(null)", span="1247-1247", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_842 [label="Exit lambda expression", span="1254-1258", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_840 [label="var result = connection.GetAllItemsFromList(''my-list'')", span="1256-1256", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_848 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' }\r\n                })", span="1271-1276", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_851 [label="Exit lambda expression", span="1268-1283", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_849 [label="var result = connection.GetAllItemsFromList(''list-1'')", span="1279-1279", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_859 [label="connection.GetSetTtl(null)", span="1291-1291", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_868 [label="Exit lambda expression", span="1298-1302", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_866 [label="var result = connection.GetSetTtl(''my-set'')", span="1300-1300", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_874 [label="sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'', expireAt = (DateTime?) DateTime.UtcNow.AddMinutes(60) },\r\n                    new { key = ''set-2'', value = ''2'', expireAt = (DateTime?) null }\r\n                })", span="1315-1319", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_878 [label="Exit lambda expression", span="1312-1327", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_875 [label="var result = connection.GetSetTtl(''set-1'')", span="1322-1322", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_899 [label="Exit lambda expression", span="1347-1347", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_898 [label="x.QueueProviders", span="1347-1347", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_23 [label="Exit lambda expression", span="35-35", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_22 [label="new SqlServerConnection(null)", span="35-35", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_196 [label="Exit lambda expression", span="217-217", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_248 [label="Exit lambda expression", span="333-333", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_259 [label="Exit lambda expression", span="345-345", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_303 [label="Exit lambda expression", span="427-427", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_314 [label="Exit lambda expression", span="439-439", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_341 [label="Exit lambda expression", span="485-485", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_351 [label="Exit lambda expression", span="495-495", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_378 [label="Exit lambda expression", span="537-537", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_390 [label="Exit lambda expression", span="549-549", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_417 [label="Exit lambda expression", span="590-590", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_438 [label="Exit lambda expression", span="617-617", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_465 [label="Exit lambda expression", span="647-647", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_488 [label="Exit lambda expression", span="678-678", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_529 [label="Exit lambda expression", span="738-738", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_553 [label="Exit lambda expression", span="769-769", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_582 [label="Exit lambda expression", span="816-816", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_609 [label="Exit lambda expression", span="857-857", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_628 [label="Exit lambda expression", span="892-892", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_663 [label="Exit lambda expression", span="959-959", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_689 [label="Exit lambda expression", span="1004-1004", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_716 [label="Exit lambda expression", span="1049-1049", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_742 [label="Exit lambda expression", span="1094-1094", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_770 [label="Exit lambda expression", span="1139-1139", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_781 [label="Exit lambda expression", span="1151-1151", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_807 [label="Exit lambda expression", span="1198-1198", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_834 [label="Exit lambda expression", span="1247-1247", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_860 [label="Exit lambda expression", span="1291-1291", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_506 [label="Assert.Contains(''1'', result)", span="715-715", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_144 [label="Exit lambda expression", span="155-155", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_143 [label="(string) x.Name", span="155-155", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_147 [label="Exit lambda expression", span="155-155", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_146 [label="(string) x.Value", span="155-155", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_696 [label="Assert.True(result < TimeSpan.Zero)", span="1014-1014", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_705 [label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1038-1038", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_706 [label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1039-1039", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_749 [label="Assert.True(result < TimeSpan.Zero)", span="1104-1104", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_758 [label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1128-1128", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_759 [label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1129-1129", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_867 [label="Assert.True(result < TimeSpan.Zero)", span="1301-1301", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_876 [label="Assert.True(TimeSpan.FromMinutes(59) < result)", span="1325-1325", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_877 [label="Assert.True(result < TimeSpan.FromMinutes(61))", span="1326-1326", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_453 [label="Exit lambda expression", span="636-636", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_452 [label="(string)x.Id", span="636-636", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_456 [label="Exit lambda expression", span="636-636", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_455 [label="(DateTime)x.LastHeartbeat", span="636-636", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_541 [label="Exit lambda expression", span="758-758", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_540 [label="(string)x.Field", span="758-758", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_543 [label="(string)x.Value", span="758-758", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_507 [label="Assert.Contains(''2'', result)", span="716-716", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_814 [label="Assert.Empty(result)", span="1210-1210", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_841 [label="Assert.Empty(result)", span="1257-1257", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_544 [label="Exit lambda expression", span="758-758", cluster="lambda expression", file="JobManagerSteps.cs"];
m36_104 [label="Entry Unk.UseConnections", span="", cluster="Unk.UseConnections", file="JobManagerSteps.cs"];
m36_672 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", span="974-974", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="JobManagerSteps.cs"];
m36_674 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''hash-1'', field = ''field-1'' },\r\n                    new { key = ''hash-1'', field = ''field-2'' },\r\n                    new { key = ''hash-2'', field = ''field-1'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetHashCount(''hash-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="980-995", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="JobManagerSteps.cs"];
m36_673 [label="string arrangeSql = @''\r\ninsert into HangFire.Hash ([Key], [Field])\r\nvalues (@key, @field)''", span="976-978", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="JobManagerSteps.cs"];
m36_675 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", span="974-974", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsNumber_OfHashFields()", file="JobManagerSteps.cs"];
m36_41 [label="Entry Unk.Dequeue", span="", cluster="Unk.Dequeue", file="JobManagerSteps.cs"];
m36_63 [label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="39-39", cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="JobManagerSteps.cs"];
m36_519 [label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="250-250", cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="JobManagerSteps.cs"];
m36_24 [label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", span="33-33", cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(Hangfire.SqlServer.SqlServerStorage)", file="JobManagerSteps.cs"];
m36_9 [label="Entry Unk.RegisterGlobalFilters", span="", cluster="Unk.RegisterGlobalFilters", file="JobManagerSteps.cs"];
m36_369 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="532-532", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="JobManagerSteps.cs"];
m36_370 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.AnnounceServer(null, new ServerContext()));\r\n\r\n                Assert.Equal(''serverId'', exception.ParamName);\r\n            })", span="534-540", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="JobManagerSteps.cs"];
m36_371 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", span="532-532", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AnnounceServer_ThrowsAnException_WhenServerIdIsNull()", file="JobManagerSteps.cs"];
m36_480 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="675-675", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_481 [label="UseConnection(connection =>\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetAllItemsFromSet(null)))", span="677-678", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_482 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", span="675-675", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_96 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="150-150", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="JobManagerSteps.cs"];
m36_879 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", span="1330-1330", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_880 [label="var sqlConnection = ConnectionUtils.CreateConnection()", span="1332-1332", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_881 [label="var storage = new SqlServerStorage(sqlConnection)", span="1334-1334", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_883 [label="action(sqlConnection, connection)", span="1337-1337", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_882 [label="var connection = new SqlServerConnection(storage)", span="1335-1335", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_884 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", span="1330-1330", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnections(System.Action<SqlConnection, Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_690 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="415-415", cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="JobManagerSteps.cs"];
m36_239 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="328-328", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="JobManagerSteps.cs"];
m36_240 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetJobParameter(null, ''name'', ''value''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="330-336", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="JobManagerSteps.cs"];
m36_241 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", span="328-328", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_ThrowsAnException_WhenJobIdIsNull()", file="JobManagerSteps.cs"];
m36_886 [label="Entry Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", span="96-96", cluster="Hangfire.SqlServer.SqlServerStorage.SqlServerStorage(SqlConnection)", file="JobManagerSteps.cs"];
m36_158 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="170-170", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="JobManagerSteps.cs"];
m36_159 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetJobData(''1'');\r\n                Assert.Null(result);\r\n            })", span="172-176", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", color=green, community=0, file="JobManagerSteps.cs"];
m36_160 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", span="170-170", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsNull_WhenThereIsNoSuchJob()", file="JobManagerSteps.cs"];
m36_56 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="69-69", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="JobManagerSteps.cs"];
m36_57 [label="UseConnection(connection =>\r\n            {\r\n                var transaction = connection.CreateWriteTransaction();\r\n                Assert.NotNull(transaction);\r\n            })", span="71-75", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", color=green, community=0, file="JobManagerSteps.cs"];
m36_58 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", span="69-69", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateWriteTransaction_ReturnsNonNullInstance()", file="JobManagerSteps.cs"];
m36_136 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="JobManagerSteps.cs"];
m36_315 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="446-446", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="JobManagerSteps.cs"];
m36_316 [label="UseConnection(connection =>\r\n            {\r\n                var value = connection.GetJobParameter(''1'', ''hello'');\r\n                Assert.Null(value);\r\n            })", span="448-452", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="JobManagerSteps.cs"];
m36_317 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", span="446-446", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ReturnsNull_WhenParameterDoesNotExists()", file="JobManagerSteps.cs"];
m36_45 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="JobManagerSteps.cs"];
m36_20 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="JobManagerSteps.cs"];
m36_100 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="1356-1356", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="JobManagerSteps.cs"];
m36_900 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", span="1356-1356", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SampleMethod(string)", file="JobManagerSteps.cs"];
m36_708 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", span="1044-1044", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_709 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListCount(null));\r\n            })", span="1046-1050", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_710 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", span="1044-1044", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_35 [label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0", cluster="System.Threading.CancellationToken.CancellationToken()", file="JobManagerSteps.cs"];
m36_610 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="356-356", cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="JobManagerSteps.cs"];
m36_509 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="721-721", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_510 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(null, new Dictionary<string, string>()));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="723-729", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_511 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", span="721-721", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_885 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="JobManagerSteps.cs"];
m36_157 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="125-125", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="JobManagerSteps.cs"];
m36_894 [label="Entry Mock<SqlServerStorage>.cstr", span="", cluster="Mock<SqlServerStorage>.cstr", file="JobManagerSteps.cs"];
m36_73 [label="Entry Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="44-44", cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="JobManagerSteps.cs"];
m36_86 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", span="105-105", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="JobManagerSteps.cs"];
m36_87 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        Job.FromExpression(() => SampleMethod(''hello'')),\r\n                        null,\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''parameters'', exception.ParamName);\r\n            })", span="107-117", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="JobManagerSteps.cs"];
m36_88 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", span="105-105", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenParametersCollectionIsNull()", file="JobManagerSteps.cs"];
m36_591 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", span="831-831", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="JobManagerSteps.cs"];
m36_593 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { key = ''set-1'', value = ''value-1'' },\r\n                    new { key = ''set-2'', value = ''value-1'' },\r\n                    new { key = ''set-1'', value = ''value-2'' }\r\n                });\r\n\r\n                var result = connection.GetSetCount(''set-1'');\r\n\r\n                Assert.Equal(2, result);\r\n            })", span="837-849", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="JobManagerSteps.cs"];
m36_592 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="833-835", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="JobManagerSteps.cs"];
m36_594 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", span="831-831", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsNumberOfElements_InASet()", file="JobManagerSteps.cs"];
m36_744 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", span="1099-1099", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_745 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetListTtl(''my-list'');\r\n                Assert.True(result < TimeSpan.Zero);\r\n            })", span="1101-1105", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_746 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", span="1099-1099", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ReturnsNegativeValue_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_130 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="JobManagerSteps.cs"];
m36_468 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="651-651", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="JobManagerSteps.cs"];
m36_470 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { id = ''server1'', heartbeat = DateTime.UtcNow.AddDays(-1) },\r\n                        new { id = ''server2'', heartbeat = DateTime.UtcNow.AddHours(-12) }\r\n                    });\r\n\r\n                connection.RemoveTimedOutServers(TimeSpan.FromHours(15));\r\n\r\n                var liveServer = sql.Query(''select * from HangFire.Server'').Single();\r\n                Assert.Equal(''server2'', liveServer.Id);\r\n            })", span="657-671", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="JobManagerSteps.cs"];
m36_469 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues (@id, '', @heartbeat)''", span="653-655", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="JobManagerSteps.cs"];
m36_471 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", span="651-651", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.RemoveTimedOutServers_DoItsWorkPerfectly()", file="JobManagerSteps.cs"];
m36_734 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", span="1089-1089", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_735 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetListTtl(null));\r\n            })", span="1091-1095", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_736 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", span="1089-1089", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListTtl_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_896 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="JobManagerSteps.cs"];
m36_205 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", span="231-231", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="JobManagerSteps.cs"];
m36_207 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var data = new Dictionary<string, string>\r\n                {\r\n                    { ''Key'', ''Value'' }\r\n                };\r\n\r\n                var jobId = (int)sql.Query(\r\n                    arrangeSql,\r\n                    new { name = ''Name'', reason = ''Reason'', @data = JobHelper.ToJson(data) }).Single().Id;\r\n\r\n                var result = connection.GetStateData(jobId.ToString());\r\n                Assert.NotNull(result);\r\n\r\n                Assert.Equal(''Name'', result.Name);\r\n                Assert.Equal(''Reason'', result.Reason);\r\n                Assert.Equal(''Value'', result.Data[''Key'']);\r\n            })", span="247-264", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="JobManagerSteps.cs"];
m36_206 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues ('', '', '', getutcdate());\r\ndeclare @JobId int;\r\nset @JobId = scope_identity();\r\ninsert into HangFire.State (JobId, Name, CreatedAt)\r\nvalues (@JobId, 'old-state', getutcdate());\r\ninsert into HangFire.State (JobId, Name, Reason, Data, CreatedAt)\r\nvalues (@JobId, @name, @reason, @data, getutcdate());\r\ndeclare @StateId int;\r\nset @StateId = scope_identity();\r\nupdate HangFire.Job set StateId = @StateId;\r\nselect @JobId as Id;''", span="233-245", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="JobManagerSteps.cs"];
m36_208 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", span="231-231", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetStateData_ReturnsCorrectData()", file="JobManagerSteps.cs"];
m36_782 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", span="1158-1158", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="JobManagerSteps.cs"];
m36_783 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetValueFromHash(''my-hash'', ''name'');\r\n                Assert.Null(result);\r\n            })", span="1160-1164", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="JobManagerSteps.cs"];
m36_784 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", span="1158-1158", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetValueFromHash_ReturnsNull_WhenHashDoesNotExist()", file="JobManagerSteps.cs"];
m36_52 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="JobManagerSteps.cs"];
m36_64 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="JobManagerSteps.cs"];
m36_42 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", span="55-55", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="JobManagerSteps.cs"];
m36_43 [label="UseConnection(connection =>\r\n            {\r\n                var token = new CancellationToken();\r\n                var anotherProvider = new Mock<IPersistentJobQueueProvider>();\r\n                _providers.Add(anotherProvider.Object, new [] { ''critical'' });\r\n\r\n                Assert.Throws<InvalidOperationException>(\r\n                    () => connection.FetchNextJob(new[] { ''critical'', ''default'' }, token));\r\n            })", span="57-65", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", color=green, community=0, file="JobManagerSteps.cs"];
m36_44 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", span="55-55", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_Throws_IfMultipleProvidersResolved()", file="JobManagerSteps.cs"];
m36_8 [label="Entry Unk.Register", span="", cluster="Unk.Register", file="JobManagerSteps.cs"];
m36_655 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", span="955-955", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_656 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetHashCount(null));\r\n            })", span="957-960", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_657 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", span="955-955", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_165 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="JobManagerSteps.cs"];
m36_25 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="41-41", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="JobManagerSteps.cs"];
m36_26 [label="UseConnection(connection =>\r\n            {\r\n                var token = new CancellationToken();\r\n                var queues = new[] { ''default'' };\r\n\r\n                connection.FetchNextJob(queues, token);\r\n\r\n                _queue.Verify(x => x.Dequeue(queues, token));\r\n            })", span="43-51", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", color=green, community=0, file="JobManagerSteps.cs"];
m36_27 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", span="41-41", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.FetchNextJob_DelegatesItsExecution_ToTheQueue()", file="JobManagerSteps.cs"];
m36_498 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="694-694", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="JobManagerSteps.cs"];
m36_500 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''some-set'', value = ''1'' },\r\n                    new { key = ''some-set'', value = ''2'' },\r\n                    new { key = ''another-set'', value = ''3'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetAllItemsFromSet(''some-set'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result.Count);\r\n                Assert.Contains(''1'', result);\r\n                Assert.Contains(''2'', result);\r\n            })", span="700-717", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="JobManagerSteps.cs"];
m36_499 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues (@key, 0.0, @value)''", span="696-698", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="JobManagerSteps.cs"];
m36_501 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", span="694-694", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetAllItemsFromSet_ReturnsAllItems()", file="JobManagerSteps.cs"];
m36_85 [label="Entry Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="72-72", cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="JobManagerSteps.cs"];
m36_10 [label="Entry Unk.RegisterRoutes", span="", cluster="Unk.RegisterRoutes", file="JobManagerSteps.cs"];
m36_183 [label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32", cluster="Hangfire.Common.JobHelper.ToJson(object)", file="JobManagerSteps.cs"];
m36_478 [label="Entry System.DateTime.AddHours(double)", span="0-0", cluster="System.DateTime.AddHours(double)", file="JobManagerSteps.cs"];
m36_129 [label="Entry Unk.NotEmpty", span="", cluster="Unk.NotEmpty", file="JobManagerSteps.cs"];
m36_14 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="JobManagerSteps.cs"];
m36_816 [label="Entry Unk.Empty", span="", cluster="Unk.Empty", file="JobManagerSteps.cs"];
m36_520 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="733-733", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="JobManagerSteps.cs"];
m36_521 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.SetRangeInHash(''some-hash'', null));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="735-741", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="JobManagerSteps.cs"];
m36_522 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="733-733", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="JobManagerSteps.cs"];
m36_665 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", span="964-964", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_666 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetHashCount(''my-hash'');\r\n                Assert.Equal(0, result);\r\n            })", span="966-970", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_667 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", span="964-964", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashCount_ReturnsZero_WhenKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_681 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", span="999-999", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_682 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetHashTtl(null));\r\n            })", span="1001-1005", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_683 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", span="999-999", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetHashTtl_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_28 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", span="1342-1342", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_890 [label="storage.Setup(x => x.QueueProviders).Returns(_providers)", span="1347-1347", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_888 [label="var sql = ConnectionUtils.CreateConnection()", span="1344-1344", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_892 [label="action(connection)", span="1351-1351", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_889 [label="var storage = new Mock<SqlServerStorage>(sql)", span="1346-1346", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_891 [label="var connection = new SqlServerConnection(storage.Object)", span="1349-1349", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_893 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", span="1342-1342", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.UseConnection(System.Action<Hangfire.SqlServer.SqlServerConnection>)", file="JobManagerSteps.cs"];
m36_620 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", span="887-887", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_621 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetCounter(null));\r\n            })", span="889-893", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_622 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", span="887-887", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_37 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="JobManagerSteps.cs"];
m36_489 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="225-225", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="JobManagerSteps.cs"];
m36_798 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", span="1193-1193", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_799 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetRangeFromList(null, 0, 1));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="1195-1201", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_800 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", span="1193-1193", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_294 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="422-422", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="JobManagerSteps.cs"];
m36_295 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobParameter(null, ''hello''));\r\n\r\n                Assert.Equal(''id'', exception.ParamName);\r\n            })", span="424-430", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="JobManagerSteps.cs"];
m36_296 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", span="422-422", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetParameter_ThrowsAnException_WhenJobIdIsNull()", file="JobManagerSteps.cs"];
m36_407 [label="Entry string.StartsWith(string)", span="0-0", cluster="string.StartsWith(string)", file="JobManagerSteps.cs"];
m36_817 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", span="1215-1215", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="JobManagerSteps.cs"];
m36_819 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', value = ''1'' },\r\n                    new { key = ''list-2'', value = ''2'' },\r\n                    new { key = ''list-1'', value = ''3'' },\r\n                    new { key = ''list-1'', value = ''4'' },\r\n                    new { key = ''list-1'', value = ''5'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetRangeFromList(''list-1'', 1, 2);\r\n                \r\n                // Assert\r\n                Assert.Equal(new [] { ''4'', ''3'' }, result);\r\n            })", span="1221-1238", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="JobManagerSteps.cs"];
m36_818 [label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key], [Value])\r\nvalues (@key, @value)''", span="1217-1219", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="JobManagerSteps.cs"];
m36_820 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", span="1215-1215", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAllEntries_WithinGivenBounds()", file="JobManagerSteps.cs"];
m36_466 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="JobManagerSteps.cs"];
m36_138 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="JobManagerSteps.cs"];
m36_479 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="JobManagerSteps.cs"];
m36_74 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="89-89", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="JobManagerSteps.cs"];
m36_75 [label="UseConnection(connection =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => connection.CreateExpiredJob(\r\n                        null,\r\n                        new Dictionary<string, string>(),\r\n                        DateTime.UtcNow,\r\n                        TimeSpan.Zero));\r\n\r\n                Assert.Equal(''job'', exception.ParamName);\r\n            })", span="91-101", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", color=green, community=0, file="JobManagerSteps.cs"];
m36_76 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", span="89-89", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_ThrowsAnException_WhenJobIsNull()", file="JobManagerSteps.cs"];
m36_630 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", span="897-897", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_631 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetCounter(''my-counter'');\r\n                Assert.Equal(0, result);\r\n            })", span="899-903", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_632 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", span="897-897", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetCounter_ReturnsZero_WhenKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_835 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="489-489", cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="JobManagerSteps.cs"];
m36_852 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", span="1287-1287", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_853 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(() => connection.GetSetTtl(null));\r\n            })", span="1289-1292", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_854 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", span="1287-1287", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetTtl_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_65 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", span="79-79", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="JobManagerSteps.cs"];
m36_66 [label="UseConnection(connection =>\r\n            {\r\n                var @lock = connection.AcquireDistributedLock(''1'', TimeSpan.FromSeconds(1));\r\n                Assert.NotNull(@lock);\r\n            })", span="81-85", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", color=green, community=0, file="JobManagerSteps.cs"];
m36_67 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", span="79-79", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.AcquireLock_ReturnsNonNullInstance()", file="JobManagerSteps.cs"];
m36_127 [label="Entry System.DateTime.DateTime(int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int)", file="JobManagerSteps.cs"];
m36_19 [label="Entry Unk.>", span="", cluster="Unk.>", file="JobManagerSteps.cs"];
m36_249 [label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="196-196", cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="JobManagerSteps.cs"];
m36_574 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", span="811-811", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_575 [label="UseConnection(connection =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetSetCount(null));\r\n            })", span="813-817", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_576 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", span="811-811", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ThrowsAnException_WhenKeyIsNull()", file="JobManagerSteps.cs"];
m36_359 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="511-511", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="JobManagerSteps.cs"];
m36_361 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                var result = connection.GetFirstByLowestScoreFromSet(''key'', -1.0, 3.0);\r\n                \r\n                Assert.Equal(''-1.0'', result);\r\n            })", span="521-528", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="JobManagerSteps.cs"];
m36_360 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], Score, Value)\r\nvalues \r\n('key', 1.0, '1.0'),\r\n('key', -1.0, '-1.0'),\r\n('key', -5.0, '-5.0'),\r\n('another-key', -2.0, '-2.0')''", span="513-519", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="JobManagerSteps.cs"];
m36_362 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", span="511-511", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsTheValueWithTheLowestScore()", file="JobManagerSteps.cs"];
m36_72 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="JobManagerSteps.cs"];
m36_611 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", span="862-862", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="JobManagerSteps.cs"];
m36_613 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql, new List<dynamic>\r\n                {\r\n                    new { Key = ''set-1'', Value = ''1'' },\r\n                    new { Key = ''set-1'', Value = ''2'' },\r\n                    new { Key = ''set-1'', Value = ''3'' },\r\n                    new { Key = ''set-1'', Value = ''4'' },\r\n                    new { Key = ''set-2'', Value = ''4'' },\r\n                    new { Key = ''set-1'', Value = ''5'' }\r\n                });\r\n\r\n                var result = connection.GetRangeFromSet(''set-1'', 2, 3);\r\n\r\n                Assert.Equal(new [] { ''3'', ''4'' }, result);\r\n            })", span="868-883", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="JobManagerSteps.cs"];
m36_612 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@Key, @Value, 0.0)''", span="864-866", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="JobManagerSteps.cs"];
m36_614 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", span="862-862", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromSet_ReturnsPagedElements()", file="JobManagerSteps.cs"];
m36_271 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="375-375", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="JobManagerSteps.cs"];
m36_273 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = sql.Query(arrangeSql).Single();\r\n                string jobId = job.Id.ToString();\r\n\r\n                connection.SetJobParameter(jobId, ''Name'', ''Value'');\r\n                connection.SetJobParameter(jobId, ''Name'', ''AnotherValue'');\r\n\r\n                var parameter = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                    new { id = jobId, name = ''Name'' }).Single();\r\n\r\n                Assert.Equal(''AnotherValue'', parameter.Value);\r\n            })", span="382-395", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="JobManagerSteps.cs"];
m36_272 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues ('', '', getutcdate())\r\nselect scope_identity() as Id''", span="377-380", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="JobManagerSteps.cs"];
m36_274 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", span="375-375", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetParameter_UpdatesValue_WhenParameterWithTheGivenName_AlreadyExists()", file="JobManagerSteps.cs"];
m36_128 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="JobManagerSteps.cs"];
m36_861 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="372-372", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="JobManagerSteps.cs"];
m36_304 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="214-214", cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="JobManagerSteps.cs"];
m36_379 [label="Entry Hangfire.Server.ServerContext.ServerContext()", span="20-20", cluster="Hangfire.Server.ServerContext.ServerContext()", file="JobManagerSteps.cs"];
m36_84 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JobManagerSteps.cs"];
m36_331 [label="Entry Unk.GetJobParameter", span="", cluster="Unk.GetJobParameter", file="JobManagerSteps.cs"];
m36_197 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="165-165", cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="JobManagerSteps.cs"];
m36_440 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="621-621", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="JobManagerSteps.cs"];
m36_442 [label="UseConnections((sql, connection) =>\r\n            {\r\n                sql.Execute(arrangeSql);\r\n\r\n                connection.Heartbeat(''server1'');\r\n\r\n                var servers = sql.Query(''select * from HangFire.Server'')\r\n                    .ToDictionary(x => (string)x.Id, x => (DateTime)x.LastHeartbeat);\r\n\r\n                Assert.NotEqual(2012, servers[''server1''].Year);\r\n                Assert.Equal(2012, servers[''server2''].Year);\r\n            })", span="629-640", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="JobManagerSteps.cs"];
m36_441 [label="string arrangeSql = @''\r\ninsert into HangFire.Server (Id, Data, LastHeartbeat)\r\nvalues\r\n('server1', '', '2012-12-12 12:12:12'),\r\n('server2', '', '2012-12-12 12:12:12')''", span="623-627", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="JobManagerSteps.cs"];
m36_443 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", span="621-621", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_UpdatesLastHeartbeat_OfTheServerWithGivenId()", file="JobManagerSteps.cs"];
m36_809 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1205-1205", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_810 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetRangeFromList(''my-list'', 0, 1);\r\n                Assert.Empty(result);\r\n            })", span="1207-1211", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_811 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", span="1205-1205", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetRangeFromList_ReturnsAnEmptyList_WhenListDoesNotExist()", file="JobManagerSteps.cs"];
m36_530 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", span="745-745", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", file="JobManagerSteps.cs"];
m36_531 [label="UseConnections((sql, connection) =>\r\n            {\r\n                connection.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                });\r\n\r\n                var result = sql.Query(\r\n                    ''select * from HangFire.Hash where [Key] = @key'',\r\n                    new { key = ''some-hash'' })\r\n                    .ToDictionary(x => (string)x.Field, x => (string)x.Value);\r\n\r\n                Assert.Equal(''Value1'', result[''Key1'']);\r\n                Assert.Equal(''Value2'', result[''Key2'']);\r\n            })", span="747-762", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", file="JobManagerSteps.cs"];
m36_532 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", span="745-745", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.SetRangeInHash_MergesAllRecords()", file="JobManagerSteps.cs"];
m36_166 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="180-180", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="JobManagerSteps.cs"];
m36_167 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, StateName, CreatedAt)\r\nvalues (@invocationData, @arguments, @stateName, getutcdate())\r\nselect scope_identity() as Id''", span="182-185", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", color=green, community=0, file="JobManagerSteps.cs"];
m36_168 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var job = Job.FromExpression(() => SampleMethod(''wrong''));\r\n\r\n                var jobId = sql.Query(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        invocationData = JobHelper.ToJson(InvocationData.Serialize(job)),\r\n                        stateName = ''Succeeded'',\r\n                        arguments = ''['Arguments']''\r\n                    }).Single();\r\n\r\n                var result = connection.GetJobData(((int)jobId.Id).ToString());\r\n\r\n                Assert.NotNull(result);\r\n                Assert.NotNull(result.Job);\r\n                Assert.Equal(''Succeeded'', result.State);\r\n                Assert.Equal(''Arguments'', result.Job.Arguments[0]);\r\n                Assert.Null(result.LoadException);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < result.CreatedAt);\r\n                Assert.True(result.CreatedAt < DateTime.UtcNow.AddMinutes(1));\r\n            })", span="187-209", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", color=green, community=0, file="JobManagerSteps.cs"];
m36_169 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", span="180-180", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ReturnsResult_WhenJobExists()", file="JobManagerSteps.cs"];
m36_408 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="JobManagerSteps.cs"];
m36_430 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="614-614", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="JobManagerSteps.cs"];
m36_431 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                () => connection.Heartbeat(null)))", span="616-617", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="JobManagerSteps.cs"];
m36_432 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", span="614-614", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.Heartbeat_ThrowsAnException_WhenServerIdIsNull()", file="JobManagerSteps.cs"];
m36_725 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", span="1064-1064", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="JobManagerSteps.cs"];
m36_727 [label="UseConnections((sql, connection) =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-1'' },\r\n                    new { key = ''list-2'' }\r\n                });\r\n\r\n                // Act\r\n                var result = connection.GetListCount(''list-1'');\r\n\r\n                // Assert\r\n                Assert.Equal(2, result);\r\n            })", span="1070-1085", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="JobManagerSteps.cs"];
m36_726 [label="string arrangeSql = @''\r\ninsert into HangFire.List ([Key])\r\nvalues (@key)''", span="1066-1068", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="JobManagerSteps.cs"];
m36_728 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", span="1064-1064", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetListCount_ReturnsTheNumberOfListElements()", file="JobManagerSteps.cs"];
m36_583 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="347-347", cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="JobManagerSteps.cs"];
m36_148 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="163-163", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="JobManagerSteps.cs"];
m36_149 [label="UseConnection(connection => Assert.Throws<ArgumentNullException>(\r\n                    () => connection.GetJobData(null)))", span="165-166", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", color=green, community=0, file="JobManagerSteps.cs"];
m36_150 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", span="163-163", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetJobData_ThrowsAnException_WhenJobIdIsNull()", file="JobManagerSteps.cs"];
m36_131 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="JobManagerSteps.cs"];
m36_101 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="121-121", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="JobManagerSteps.cs"];
m36_102 [label="UseConnections((sql, connection) =>\r\n            {\r\n                var createdAt = new DateTime(2012, 12, 12);\r\n                var jobId = connection.CreateExpiredJob(\r\n                    Job.FromExpression(() => SampleMethod(''Hello'')),\r\n                    new Dictionary<string, string> { { ''Key1'', ''Value1'' }, { ''Key2'', ''Value2'' } },\r\n                    createdAt,\r\n                    TimeSpan.FromDays(1));\r\n\r\n                Assert.NotNull(jobId);\r\n                Assert.NotEmpty(jobId);\r\n\r\n                var sqlJob = sql.Query(''select * from HangFire.Job'').Single();\r\n                Assert.Equal(jobId, sqlJob.Id.ToString());\r\n                Assert.Equal(createdAt, sqlJob.CreatedAt);\r\n                Assert.Equal(null, (int?) sqlJob.StateId);\r\n                Assert.Equal(null, (string) sqlJob.StateName);\r\n\r\n                var invocationData = JobHelper.FromJson<InvocationData>((string)sqlJob.InvocationData);\r\n                invocationData.Arguments = sqlJob.Arguments;\r\n\r\n                var job = invocationData.Deserialize();\r\n                Assert.Equal(typeof(SqlServerConnectionFacts), job.Type);\r\n                Assert.Equal(''SampleMethod'', job.Method.Name);\r\n                Assert.Equal(''\''Hello\'''', job.Arguments[0]);\r\n\r\n                Assert.True(createdAt.AddDays(1).AddMinutes(-1) < sqlJob.ExpireAt);\r\n                Assert.True(sqlJob.ExpireAt < createdAt.AddDays(1).AddMinutes(1));\r\n\r\n                var parameters = sql.Query(\r\n                    ''select * from HangFire.JobParameter where JobId = @id'',\r\n                    new { id = jobId })\r\n                    .ToDictionary(x => (string) x.Name, x => (string) x.Value);\r\n\r\n                Assert.Equal(''Value1'', parameters[''Key1'']);\r\n                Assert.Equal(''Value2'', parameters[''Key2'']);\r\n            })", span="123-159", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", color=green, community=0, file="JobManagerSteps.cs"];
m36_103 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", span="121-121", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.CreateExpiredJob_CreatesAJobInTheStorage_AndSetsItsParameters()", file="JobManagerSteps.cs"];
m36_137 [label="Entry Unk.True", span="", cluster="Unk.True", file="JobManagerSteps.cs"];
m36_352 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="499-499", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_353 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetFirstByLowestScoreFromSet(\r\n                    ''key'', 0, 1);\r\n\r\n                Assert.Null(result);\r\n            })", span="501-507", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_354 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", span="499-499", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetFirstByLowestScoreFromSet_ReturnsNull_WhenTheKeyDoesNotExist()", file="JobManagerSteps.cs"];
m36_717 [label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="445-445", cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="JobManagerSteps.cs"];
m36_584 [label="Entry Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", span="821-821", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="JobManagerSteps.cs"];
m36_585 [label="UseConnection(connection =>\r\n            {\r\n                var result = connection.GetSetCount(''my-set'');\r\n                Assert.Equal(0, result);\r\n            })", span="823-827", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="JobManagerSteps.cs"];
m36_586 [label="Exit Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", span="821-821", cluster="Hangfire.SqlServer.Tests.SqlServerConnectionFacts.GetSetCount_ReturnsZero_WhenSetDoesNotExist()", file="JobManagerSteps.cs"];
m36_901 [label="Hangfire.SqlServer.Tests.SqlServerConnectionFacts", span="", file="JobManagerSteps.cs"];
m36_904 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_905 [label=token, span="", file="JobManagerSteps.cs"];
m36_906 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_908 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_909 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_902 [label=token, span="", file="JobManagerSteps.cs"];
m36_903 [label=queues, span="", file="JobManagerSteps.cs"];
m36_921 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_935 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_907 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_913 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_911 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_912 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_916 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_917 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_918 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_910 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_914 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_915 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_919 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_920 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_922 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_923 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_924 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_925 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_926 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_927 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_928 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_929 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_930 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_931 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_932 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_933 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_934 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_936 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_937 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_938 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_939 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_940 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_941 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_942 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_943 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_944 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_945 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_946 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_947 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_948 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_949 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_950 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_951 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_952 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_953 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_954 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_955 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_956 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_957 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_958 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_959 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_960 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m36_961 [label="Hangfire.SqlServer.SqlServerConnection", span="", file="JobManagerSteps.cs"];
m36_962 [label=arrangeSql, span="", file="JobManagerSteps.cs"];
m37_7 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="JobPerformer.cs"];
m37_5 [label="Entry Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", span="32-32", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="JobPerformer.cs"];
m37_14 [label="ConnectionFactory configuration = new ConnectionFactory { HostName = HostName }", span="34-34", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="JobPerformer.cs", color=green, community=0];
m37_15 [label="return new RabbitMqJobQueueProvider(Queue, configuration);", span="36-36", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="JobPerformer.cs"];
m37_16 [label="Exit Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", span="32-32", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.CreateProvider()", file="JobPerformer.cs"];
m37_18 [label="Entry Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", span="13-13", cluster="Hangfire.SqlServer.RabbitMQ.RabbitMqJobQueueProvider.RabbitMqJobQueueProvider(System.Collections.Generic.IEnumerable<string>, ConnectionFactory)", file="JobPerformer.cs"];
m37_8 [label="Entry Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="23-23", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="JobPerformer.cs"];
m37_9 [label="var provider = CreateProvider()", span="25-25", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=red, community=0, file="JobPerformer.cs"];
m37_10 [label="var monitoring = provider.GetJobQueueMonitoringApi(null)", span="27-27", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", color=green, community=0, file="JobPerformer.cs"];
m37_11 [label="Assert.NotNull(monitoring)", span="29-29", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="JobPerformer.cs"];
m37_12 [label="Exit Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", span="23-23", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetMonitoringApi_ReturnsNonNullInstance()", file="JobPerformer.cs"];
m37_6 [label="Entry Unk.GetJobQueue", span="", cluster="Unk.GetJobQueue", file="JobPerformer.cs"];
m37_17 [label="Entry ConnectionFactory.cstr", span="", cluster="ConnectionFactory.cstr", file="JobPerformer.cs"];
m37_0 [label="Entry Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="13-13", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="JobPerformer.cs"];
m37_1 [label="var provider = CreateProvider()", span="15-15", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", color=red, community=0, file="JobPerformer.cs"];
m37_2 [label="var jobQueue = provider.GetJobQueue(null)", span="17-17", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="JobPerformer.cs", color=green, community=0];
m37_3 [label="Assert.NotNull(jobQueue)", span="19-19", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="JobPerformer.cs"];
m37_4 [label="Exit Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", span="13-13", cluster="Hangfire.SqlServer.RabbitMq.Tests.RabbitMqJobQueueProviderFacts.GetJobQueue_ReturnsNonNullInstance()", file="JobPerformer.cs"];
m37_13 [label="Entry Unk.GetJobQueueMonitoringApi", span="", cluster="Unk.GetJobQueueMonitoringApi", file="JobPerformer.cs"];
m38_4 [label="Entry HangFire.JobStorage.GetComponents()", span="47-47", cluster="HangFire.JobStorage.GetComponents()", file="JobSteps.cs"];
m38_5 [label="return Enumerable.Empty<IThreadWrappable>();", span="49-49", cluster="HangFire.JobStorage.GetComponents()", color=red, community=0, file="JobSteps.cs"];
m38_6 [label="Exit HangFire.JobStorage.GetComponents()", span="47-47", cluster="HangFire.JobStorage.GetComponents()", file="JobSteps.cs"];
m38_0 [label="Entry HangFire.JobStorage.GetMonitoringApi()", span="43-43", cluster="HangFire.JobStorage.GetMonitoringApi()", file="JobSteps.cs"];
m38_1 [label="Exit HangFire.JobStorage.GetMonitoringApi()", span="43-43", cluster="HangFire.JobStorage.GetMonitoringApi()", file="JobSteps.cs"];
m38_8 [label="Entry HangFire.JobStorage.GetStateHandlers()", span="52-52", cluster="HangFire.JobStorage.GetStateHandlers()", file="JobSteps.cs"];
m38_9 [label="return Enumerable.Empty<JobStateHandler>();", span="54-54", cluster="HangFire.JobStorage.GetStateHandlers()", file="JobSteps.cs"];
m38_10 [label="Exit HangFire.JobStorage.GetStateHandlers()", span="52-52", cluster="HangFire.JobStorage.GetStateHandlers()", file="JobSteps.cs"];
m38_7 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="JobSteps.cs"];
m38_2 [label="Entry HangFire.JobStorage.GetConnection()", span="45-45", cluster="HangFire.JobStorage.GetConnection()", file="JobSteps.cs"];
m38_3 [label="Exit HangFire.JobStorage.GetConnection()", span="45-45", cluster="HangFire.JobStorage.GetConnection()", file="JobSteps.cs"];
m39_61 [label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76", cluster="HangFire.Web.RazorPage.Write(object)", file="JobStorage.cs"];
m39_55 [label="Entry Unk.TryParse", span="", cluster="Unk.TryParse", file="JobStorage.cs"];
m39_53 [label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69", cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="JobStorage.cs"];
m39_0 [label="Entry HangFire.Web.Pages.ProcessingJobsPage.Execute()", span="47-47", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_1 [label="WriteLiteral(''\n'')", span="51-51", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_2 [label="Layout = new LayoutPage { Title = ''Processing Jobs'' }", span="62-62", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_3 [label="int from, perPage", span="64-64", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_4 [label="int.TryParse(Request.QueryString[''from''], out from)", span="66-66", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_5 [label="int.TryParse(Request.QueryString[''count''], out perPage)", span="67-67", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_7 [label="Pager pager = new Pager(from, perPage, monitor.ProcessingCount())\n    {\n        BasePageUrl = Request.LinkTo(''/processing'')\n    }", span="70-73", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_6 [label="var monitor = JobStorage.Current.GetMonitoringApi()", span="69-69", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_8 [label="JobList<ProcessingJobDto> processingJobs = monitor\n        .ProcessingJobs(pager.FromRecord, pager.RecordsPerPage)", span="75-76", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=red, community=0, file="JobStorage.cs"];
m39_10 [label="pager.TotalPageCount == 0", span="87-87", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_17 [label="Write(RenderPartial(new PerPageSelector(pager)))", span="147-147", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_51 [label="Write(RenderPartial(new Paginator(pager)))", span="369-369", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_9 [label="WriteLiteral(''\n'')", span="82-82", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_19 [label=processingJobs, span="173-173", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_11 [label="WriteLiteral(''    <div class=\''alert alert-info\''>\n        No jobs are being processed right now.'' +\r\n''\n    </div>\n'')", span="93-94", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_12 [label="WriteLiteral(''    <div class=\''js-jobs-list\''>\n        <div class=\''btn-toolbar btn-toolbar-top\''>\n'' +\r\n''            <button class=\''js-jobs-list-command btn btn-sm btn-primary\''\n        '' +\r\n''            data-url=\'''')", span="106-108", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_13 [label="Write(Request.LinkTo(''/processing/requeue''))", span="113-113", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_14 [label="WriteLiteral(@''''''\n                    data-loading-text=''''Enqueueing...''''>\n                <span class=''''glyphicon glyphicon-repeat''''></span>\n                Requeue jobs\n            </button>\n\n            <button class=''''js-jobs-list-command btn btn-sm btn-default''''\n                    data-url='''''')", span="118-125", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_15 [label="Write(Request.LinkTo(''/processing/delete''))", span="130-130", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_16 [label="WriteLiteral(@''''''\n                    data-loading-text=''''Deleting...''''\n                    data-confirm=''''Do you really want to DELETE ALL selected jobs?''''>\n                <span class=''''glyphicon glyphicon-remove''''></span>\n                Delete selected\n            </button>\n\n            '')", span="135-142", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=red, community=0, file="JobStorage.cs"];
m39_18 [label="WriteLiteral(@''\n        </div>\n\n        <table class=''''table''''>\n            <thead>\n                <tr>\n                    <th class=''''min-width''''>\n                        <input type=''''checkbox'''' class=''''js-jobs-list-select-all'''' />\n                    </th>\n                    <th class=''''min-width''''>Id</th>\n                    <th class=''''min-width''''>Server</th>\n                    <th>Job</th>\n                    <th class=''''align-right''''>Started</th>\n                </tr>\n            </thead>\n            <tbody>\n'')", span="152-168", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_20 [label="WriteLiteral(''                    <tr class=\''js-jobs-list-row '')", span="179-179", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_50 [label="WriteLiteral(''            </tbody>\n        </table>\n    </div>\n'')", span="358-358", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=red, community=0, file="JobStorage.cs"];
m39_21 [label="Write(!job.Value.InProcessingState ? ''obsolete-data'' : null)", span="184-184", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_22 [label="WriteLiteral('' '')", span="189-189", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_23 [label="Write(job.Value.InProcessingState ? ''hover'' : null)", span="194-194", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_24 [label="WriteLiteral(''\''>\n                        <td>\n'')", span="199-199", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_25 [label="job.Value.InProcessingState", span="204-204", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_26 [label="WriteLiteral(''                                <input type=\''checkbox\'' class=\''js-jobs-list-checkb'' +\r\n''ox\'' name=\''jobs[]\'' value=\'''')", span="210-211", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_29 [label="WriteLiteral(''                        </td>\n                        <td class=\''min-width\''>\n    '' +\r\n''                        <a href=\'''')", span="231-232", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_27 [label="Write(job.Key)", span="216-216", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_30 [label="Write(Request.LinkTo(''/job/'' + job.Key))", span="237-237", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_28 [label="WriteLiteral(''\'' />\n'')", span="221-221", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_31 [label="WriteLiteral(''\''>\n                                '')", span="242-242", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_32 [label="Write(HtmlHelper.JobId(job.Key))", span="247-247", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_33 [label="WriteLiteral(''\n                            </a>\n'')", span="252-252", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", color=red, community=0, file="JobStorage.cs"];
m39_34 [label="!job.Value.InProcessingState", span="257-257", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_35 [label="WriteLiteral(''                                <span title=\''Job\'s state has been changed while f'' +\r\n''etching data.\'' class=\''glyphicon glyphicon-question-sign\''></span>\n'')", span="263-264", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_36 [label="WriteLiteral(''                        </td>\n                        <td class=\''min-width\''>\n    '' +\r\n''                        '')", span="274-275", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_37 [label="Write(job.Value.ServerId.ToUpperInvariant())", span="280-280", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_38 [label="WriteLiteral(''\n                        </td>\n                        <td>\n                     '' +\r\n''       <a class=\''job-method\'' href=\'''')", span="285-286", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_39 [label="Write(Request.LinkTo(''/job/'' + job.Key))", span="291-291", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_40 [label="WriteLiteral(''\''>\n                                '')", span="296-296", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_41 [label="Write(HtmlHelper.DisplayMethod(job.Value.Job))", span="301-301", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_42 [label="WriteLiteral(''\n                            </a>\n                        </td>\n                 '' +\r\n''       <td class=\''align-right\''>\n'')", span="306-307", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_43 [label="job.Value.StartedAt.HasValue", span="312-312", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_44 [label="WriteLiteral(''                                <span data-moment=\'''')", span="318-318", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_49 [label="WriteLiteral(''                        </td>\n                    </tr>\n'')", span="348-348", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_45 [label="Write(JobHelper.ToTimestamp(job.Value.StartedAt.Value))", span="323-323", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_46 [label="WriteLiteral(''\''>\n                                    '')", span="328-328", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_47 [label="Write(job.Value.StartedAt)", span="333-333", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_48 [label="WriteLiteral(''\n                                </span>\n'')", span="338-338", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_52 [label="Exit HangFire.Web.Pages.ProcessingJobsPage.Execute()", span="47-47", cluster="HangFire.Web.Pages.ProcessingJobsPage.Execute()", file="JobStorage.cs"];
m39_56 [label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54", cluster="HangFire.JobStorage.GetMonitoringApi()", file="JobStorage.cs"];
m39_68 [label="Entry HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", span="40-40", cluster="HangFire.Common.JobHelper.ToTimestamp(System.DateTime)", file="JobStorage.cs"];
m39_66 [label="Entry string.ToUpperInvariant()", span="0-0", cluster="string.ToUpperInvariant()", file="JobStorage.cs"];
m39_54 [label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4", cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="JobStorage.cs"];
m39_62 [label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="JobStorage.cs"];
m39_64 [label="Entry Unk.Write", span="", cluster="Unk.Write", file="JobStorage.cs"];
m39_60 [label="Entry HangFire.Storage.IMonitoringApi.ProcessingJobs(int, int)", span="32-32", cluster="HangFire.Storage.IMonitoringApi.ProcessingJobs(int, int)", file="JobStorage.cs"];
m39_59 [label="Entry HttpRequestBase.LinkTo(string)", span="24-24", cluster="HttpRequestBase.LinkTo(string)", file="JobStorage.cs"];
m39_58 [label="Entry HangFire.Storage.IMonitoringApi.ProcessingCount()", span="42-42", cluster="HangFire.Storage.IMonitoringApi.ProcessingCount()", file="JobStorage.cs"];
m39_67 [label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", span="30-30", cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.Job)", file="JobStorage.cs"];
m39_69 [label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="JobStorage.cs"];
m39_63 [label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="89-89", cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="JobStorage.cs"];
m39_57 [label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29", cluster="HangFire.Web.Pager.Pager(int, int, long)", file="JobStorage.cs"];
m39_65 [label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="45-45", cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", file="JobStorage.cs"];
m39_70 [label="HangFire.Web.Pages.ProcessingJobsPage", span="", file="JobStorage.cs"];
m40_8 [label="Entry HangFire.PreserveCultureFilter.OnCreated(HangFire.Filters.CreatedContext)", span="20-20", cluster="HangFire.PreserveCultureFilter.OnCreated(HangFire.Filters.CreatedContext)", file="PreserveCultureFilter.cs"];
m40_9 [label="Exit HangFire.PreserveCultureFilter.OnCreated(HangFire.Filters.CreatedContext)", span="20-20", cluster="HangFire.PreserveCultureFilter.OnCreated(HangFire.Filters.CreatedContext)", file="PreserveCultureFilter.cs"];
m40_10 [label="Entry HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="24-24", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_11 [label="filterContext == null", span="26-26", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_13 [label="var cultureName = filterContext.JobDescriptor\r\n                .GetParameter<string>(''CurrentCulture'')", span="28-29", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_14 [label="var uiCultureName = filterContext.JobDescriptor\r\n                .GetParameter<string>(''CurrentUICulture'')", span="30-31", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_17 [label="filterContext.Items[''PreviousCulture''] = thread.CurrentCulture", span="37-37", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_20 [label="filterContext.Items[''PreviousUICulture''] = thread.CurrentUICulture", span="43-43", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_12 [label="throw new ArgumentNullException(''filterContext'');", span="26-26", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_16 [label="!String.IsNullOrEmpty(cultureName)", span="35-35", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_18 [label="thread.CurrentCulture = CultureInfo.GetCultureInfo(cultureName)", span="38-38", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_15 [label="var thread = Thread.CurrentThread", span="33-33", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_19 [label="!String.IsNullOrEmpty(uiCultureName)", span="41-41", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_21 [label="thread.CurrentUICulture = CultureInfo.GetCultureInfo(uiCultureName)", span="44-44", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_22 [label="Exit HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="24-24", cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs"];
m40_24 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="PreserveCultureFilter.cs"];
m40_35 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="PreserveCultureFilter.cs"];
m40_0 [label="Entry HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", span="10-10", cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs"];
m40_1 [label="filterContext == null", span="12-12", cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs"];
m40_3 [label="filterContext.JobDescriptor.SetParameter(\r\n                ''CurrentCulture'', Thread.CurrentThread.CurrentCulture.Name)", span="14-15", cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs"];
m40_4 [label="filterContext.JobDescriptor.SetParameter(\r\n                ''CurrentUICulture'', Thread.CurrentThread.CurrentUICulture.Name)", span="16-17", cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs"];
m40_2 [label="throw new ArgumentNullException(''filterContext'');", span="12-12", cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs"];
m40_5 [label="Exit HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", span="10-10", cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs"];
m40_23 [label="Entry HangFire.Server.ServerJobDescriptor.GetParameter<T>(string)", span="70-70", cluster="HangFire.Server.ServerJobDescriptor.GetParameter<T>(string)", file="PreserveCultureFilter.cs"];
m40_25 [label="Entry System.Globalization.CultureInfo.GetCultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.GetCultureInfo(string)", file="PreserveCultureFilter.cs"];
m40_7 [label="Entry HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="72-72", cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="PreserveCultureFilter.cs"];
m40_26 [label="Entry HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="48-48", cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs"];
m40_27 [label="filterContext == null", span="50-50", cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs"];
m40_30 [label="filterContext.Items.ContainsKey(''PreviousCulture'')", span="53-53", cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs"];
m40_31 [label="thread.CurrentCulture = (CultureInfo) filterContext.Items[''PreviousCulture'']", span="55-55", cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs"];
m40_32 [label="filterContext.Items.ContainsKey(''PreviousUICulture'')", span="57-57", cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs"];
m40_33 [label="thread.CurrentUICulture = (CultureInfo) filterContext.Items[''PreviousUICulture'']", span="59-59", cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs"];
m40_28 [label="throw new ArgumentNullException(''filterContext'');", span="50-50", cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs"];
m40_29 [label="var thread = Thread.CurrentThread", span="52-52", cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs"];
m40_34 [label="Exit HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="48-48", cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs"];
m43_10 [label="Entry HangFire.Storage.IMonitoringApi.GetStatistics()", span="27-27", cluster="HangFire.Storage.IMonitoringApi.GetStatistics()", file="ProcessingState.cs"];
m43_12 [label="Entry CamelCasePropertyNamesContractResolver.cstr", span="", cluster="CamelCasePropertyNamesContractResolver.cstr", file="ProcessingState.cs"];
m43_9 [label="Entry HangFire.JobStorage.GetMonitoringApi()", span="54-54", cluster="HangFire.JobStorage.GetMonitoringApi()", file="ProcessingState.cs"];
m43_13 [label="Entry Unk.SerializeObject", span="", cluster="Unk.SerializeObject", file="ProcessingState.cs"];
m43_0 [label="Entry HangFire.Web.JsonStats.ProcessRequest()", span="24-24", cluster="HangFire.Web.JsonStats.ProcessRequest()", file="ProcessingState.cs"];
m43_1 [label="var monitoring = JobStorage.Current.GetMonitoringApi()", span="26-26", cluster="HangFire.Web.JsonStats.ProcessRequest()", file="ProcessingState.cs"];
m43_2 [label="var response = monitoring.GetStatistics()", span="27-27", cluster="HangFire.Web.JsonStats.ProcessRequest()", file="ProcessingState.cs"];
m43_3 [label="var settings = new JsonSerializerSettings\r\n            {\r\n                ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n            }", span="30-33", cluster="HangFire.Web.JsonStats.ProcessRequest()", color=red, community=0, file="ProcessingState.cs"];
m43_4 [label="var serialized = JsonConvert.SerializeObject(response, settings)", span="34-34", cluster="HangFire.Web.JsonStats.ProcessRequest()", file="ProcessingState.cs"];
m43_5 [label="Response.ContentType = ''application/json''", span="36-36", cluster="HangFire.Web.JsonStats.ProcessRequest()", file="ProcessingState.cs"];
m43_7 [label="Response.Write(serialized)", span="38-38", cluster="HangFire.Web.JsonStats.ProcessRequest()", file="ProcessingState.cs"];
m43_6 [label="Response.ContentEncoding = Encoding.UTF8", span="37-37", cluster="HangFire.Web.JsonStats.ProcessRequest()", file="ProcessingState.cs"];
m43_8 [label="Exit HangFire.Web.JsonStats.ProcessRequest()", span="24-24", cluster="HangFire.Web.JsonStats.ProcessRequest()", file="ProcessingState.cs"];
m43_11 [label="Entry JsonSerializerSettings.cstr", span="", cluster="JsonSerializerSettings.cstr", file="ProcessingState.cs"];
m43_14 [label="Entry Unk.Write", span="", cluster="Unk.Write", file="ProcessingState.cs"];
m43_15 [label="HangFire.Web.JsonStats", span="", file="ProcessingState.cs"];
m44_44 [label="Entry Unk.Then", span="", cluster="Unk.Then", file="ProcessingState.feature.cs"];
m44_45 [label="Entry HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", span="102-102", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs"];
m44_46 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''It has the correct properties set'', ((string[])(null)))", span="104-104", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs", color=green, community=0];
m44_47 [label="this.ScenarioSetup(scenarioInfo)", span="106-106", cluster="HangFire.Tests.States.ProcessingStateFeature.ItHasTheCorrectPropertiesSet()", file="ProcessingState.feature.cs"];
m44_441 [label="Entry Mock<T>.cstr", span="", cluster="Mock<T>.cstr", file="ProcessingState.feature.cs"];
m44_17 [label="Exit HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", span="46-46", cluster="HangFire.Tests.States.ProcessingStateFeature.TestInitialize()", file="ProcessingState.feature.cs"];
m44_60 [label="this.FeatureBackground()", span="135-135", cluster="HangFire.Tests.States.ProcessingStateFeature.AfterApplyingItShouldAddTheJobToTheProcessingSet()", file="ProcessingState.feature.cs"];
m44_52 [label="var process = CreateProcess()", span="58-58", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", color=green, community=0, file="ProcessingState.feature.cs"];
m44_49 [label="new DefaultJobPerformanceProcess(_filterProvider.Object, null)", span="50-50", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_51 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", span="56-56", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="ProcessingState.feature.cs"];
m44_53 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => process.Run(null))", span="60-61", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="ProcessingState.feature.cs"];
m44_48 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_50 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_54 [label="Assert.Equal(''context'', exception.ParamName)", span="63-63", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsAnException_WhenContextIsNull()", file="ProcessingState.feature.cs"];
m44_25 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Method()", span="465-465", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Method()", file="ProcessingState.feature.cs"];
m44_11 [label="Entry Hangfire.Core.Tests.WorkerContextMock.WorkerContextMock()", span="9-9", cluster="Hangfire.Core.Tests.WorkerContextMock.WorkerContextMock()", file="ProcessingState.feature.cs"];
m44_29 [label="Entry Unk.>", span="", cluster="Unk.>", file="ProcessingState.feature.cs"];
m44_89 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", span="96-96", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="ProcessingState.feature.cs"];
m44_90 [label="var filter = CreateFilter<IServerFilter>()", span="99-99", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", color=red, community=0, file="ProcessingState.feature.cs"];
m44_91 [label="var process = CreateProcess()", span="100-100", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="ProcessingState.feature.cs"];
m44_92 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Returns(''Returned value'')", span="102-104", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", color=red, community=0, file="ProcessingState.feature.cs"];
m44_93 [label="var result = process.Run(_context)", span="107-107", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="ProcessingState.feature.cs"];
m44_94 [label="Assert.Equal(''Returned value'', result)", span="110-110", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="ProcessingState.feature.cs"];
m44_95 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", span="96-96", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ReturnsValueReturnedByJob()", file="ProcessingState.feature.cs"];
m44_35 [label="Entry Unk.And", span="", cluster="Unk.And", file="ProcessingState.feature.cs"];
m44_36 [label="Entry HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", span="85-85", cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="ProcessingState.feature.cs"];
m44_37 [label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''State name is \'Processing\''', ((string[])(null)))", span="87-87", cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="ProcessingState.feature.cs", color=green, community=0];
m44_38 [label="this.ScenarioSetup(scenarioInfo)", span="89-89", cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="ProcessingState.feature.cs"];
m44_39 [label="this.FeatureBackground()", span="91-91", cluster="HangFire.Tests.States.ProcessingStateFeature.StateNameIsProcessing()", file="ProcessingState.feature.cs"];
m44_67 [label="Entry lambda expression", span="73-73", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_73 [label="var process = CreateProcess()", span="81-81", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", color=green, community=0, file="ProcessingState.feature.cs"];
m44_72 [label="var filter = CreateFilter<IServerFilter>()", span="80-80", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="ProcessingState.feature.cs"];
m44_74 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Returns(''Returned value'')", span="83-85", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="ProcessingState.feature.cs", color=red, community=0];
m44_69 [label="Exit lambda expression", span="73-73", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_68 [label="x.Run(_context)", span="73-73", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_71 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", span="77-77", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="ProcessingState.feature.cs"];
m44_70 [label="Entry Unk.Run", span="", cluster="Unk.Run", file="ProcessingState.feature.cs"];
m44_75 [label="process.Run(_context)", span="88-88", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="ProcessingState.feature.cs"];
m44_56 [label="Entry Unk.AddRow", span="", cluster="Unk.AddRow", file="ProcessingState.feature.cs"];
m44_435 [label="return new DefaultJobPerformanceProcess(_filterProvider.Object, _innerProcess.Object);", span="471-471", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateProcess()", file="ProcessingState.feature.cs"];
m44_436 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateProcess()", span="469-469", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateProcess()", file="ProcessingState.feature.cs"];
m44_157 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="ProcessingState.feature.cs"];
m44_85 [label="Entry Unk.OnPerformed", span="", cluster="Unk.OnPerformed", file="ProcessingState.feature.cs"];
m44_394 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", span="415-415", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="ProcessingState.feature.cs"];
m44_395 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Throws<OperationCanceledException>()", span="418-420", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="ProcessingState.feature.cs"];
m44_396 [label="var filter = CreateFilter<IServerExceptionFilter>()", span="422-422", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="ProcessingState.feature.cs"];
m44_397 [label="var process = CreateProcess()", span="423-423", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="ProcessingState.feature.cs"];
m44_399 [label="filter.Verify(\r\n                x => x.OnServerException(It.IsAny<ServerExceptionContext>()),\r\n                Times.Never)", span="430-432", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="ProcessingState.feature.cs"];
m44_398 [label="Assert.Throws<OperationCanceledException>(\r\n                () => process.Run(_context))", span="426-427", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="ProcessingState.feature.cs"];
m44_400 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", span="415-415", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ServerFiltersAreNotInvoked_OnOperationCanceledException()", file="ProcessingState.feature.cs"];
m44_279 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="ProcessingState.feature.cs"];
m44_5 [label="_context = new PerformContext(\r\n                workerContext.Object, connection.Object, jobId, job, DateTime.UtcNow, new Mock<IJobCancellationToken>().Object)", span="27-28", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.DefaultJobPerformanceProcessFacts()", file="ProcessingState.feature.cs"];
m44_188 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="211-211", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ProcessingState.feature.cs"];
m44_189 [label="var outerFilter = CreateFilter<IServerFilter>()", span="214-214", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ProcessingState.feature.cs"];
m44_190 [label="var innerFilter = CreateFilter<IServerFilter>()", span="215-215", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ProcessingState.feature.cs"];
m44_191 [label="outerFilter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>())).InSequence()", span="217-217", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ProcessingState.feature.cs"];
m44_194 [label="outerFilter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>())).InSequence()", span="220-220", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ProcessingState.feature.cs"];
m44_192 [label="innerFilter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>())).InSequence()", span="218-218", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ProcessingState.feature.cs"];
m44_193 [label="innerFilter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>())).InSequence()", span="219-219", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ProcessingState.feature.cs"];
m44_195 [label="var process = CreateProcess()", span="222-222", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ProcessingState.feature.cs"];
m44_196 [label="process.Run(_context)", span="225-225", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ProcessingState.feature.cs"];
m44_197 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", span="211-211", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsFilterCalls_OneIntoAnother()", file="ProcessingState.feature.cs"];
m44_0 [label="Entry HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs"];
m44_1 [label="testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner()", span="32-32", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs"];
m44_2 [label="TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo(''en-US''), ''Processing state'', '''', ProgrammingLanguage.CSharp, new string[] {\r\n                        ''redis''})", span="33-34", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs"];
m44_3 [label="testRunner.OnFeatureStart(featureInfo)", span="35-35", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs"];
m44_4 [label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", span="30-30", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext)", file="ProcessingState.feature.cs"];
m44_6 [label="Entry TechTalk.SpecFlow.FeatureInfo.cstr", span="", cluster="TechTalk.SpecFlow.FeatureInfo.cstr", file="ProcessingState.feature.cs"];
m44_7 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="ProcessingState.feature.cs"];
m44_8 [label="Entry Unk.OnFeatureStart", span="", cluster="Unk.OnFeatureStart", file="ProcessingState.feature.cs"];
m44_9 [label="_filterProvider.Setup(x => x.GetFilters(It.IsNotNull<Job>())).Returns(\r\n                _filters.Select(f => new JobFilter(f, JobFilterScope.Type, null)))", span="33-34", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.DefaultJobPerformanceProcessFacts()", file="ProcessingState.feature.cs"];
m44_10 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.DefaultJobPerformanceProcessFacts()", span="19-19", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.DefaultJobPerformanceProcessFacts()", file="ProcessingState.feature.cs"];
m44_127 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="147-147", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ProcessingState.feature.cs"];
m44_128 [label="var filter1 = CreateFilter<IServerExceptionFilter>()", span="150-150", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ProcessingState.feature.cs"];
m44_129 [label="var filter2 = CreateFilter<IServerExceptionFilter>()", span="151-151", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ProcessingState.feature.cs"];
m44_131 [label="filter1.Setup(x => x.OnServerException(It.IsAny<ServerExceptionContext>())).InSequence()", span="154-154", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ProcessingState.feature.cs"];
m44_130 [label="filter2.Setup(x => x.OnServerException(It.IsAny<ServerExceptionContext>())).InSequence()", span="153-153", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ProcessingState.feature.cs"];
m44_132 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Throws<InvalidOperationException>()", span="156-158", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ProcessingState.feature.cs"];
m44_133 [label="var process = CreateProcess()", span="160-160", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ProcessingState.feature.cs"];
m44_134 [label="Assert.Throws<InvalidOperationException>(() => process.Run(_context))", span="163-163", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ProcessingState.feature.cs"];
m44_135 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", span="147-147", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilters_InReverseOrder()", file="ProcessingState.feature.cs"];
m44_314 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", span="334-334", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="ProcessingState.feature.cs"];
m44_315 [label="var filter = CreateFilter<IServerFilter>()", span="337-337", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="ProcessingState.feature.cs"];
m44_316 [label="var exception = new InvalidOperationException()", span="339-339", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="ProcessingState.feature.cs"];
m44_318 [label="filter.Setup(x => x.OnPerformed(It.Is<PerformedContext>(context => context.Exception == exception)))\r\n                .Callback((PerformedContext x) => x.ExceptionHandled = true)", span="344-345", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="ProcessingState.feature.cs"];
m44_317 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Throws(exception)", span="340-342", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="ProcessingState.feature.cs"];
m44_319 [label="var process = CreateProcess()", span="347-347", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="ProcessingState.feature.cs"];
m44_320 [label="Assert.DoesNotThrow(() => process.Run(_context))", span="350-350", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="ProcessingState.feature.cs"];
m44_321 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", span="334-334", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotThrow_HandledExceptions()", file="ProcessingState.feature.cs"];
m44_410 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", span="436-436", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="ProcessingState.feature.cs"];
m44_411 [label="var filter = CreateFilter<IServerFilter>()", span="439-439", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="ProcessingState.feature.cs"];
m44_412 [label="filter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>()))\r\n                .Throws<OperationCanceledException>()", span="440-441", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="ProcessingState.feature.cs"];
m44_413 [label="var process = CreateProcess()", span="443-443", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="ProcessingState.feature.cs"];
m44_414 [label="Assert.Throws<OperationCanceledException>(\r\n                () => process.Run(_context))", span="446-447", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="ProcessingState.feature.cs"];
m44_415 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", span="436-436", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPreFilterMethods()", file="ProcessingState.feature.cs"];
m44_78 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", span="474-474", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", file="ProcessingState.feature.cs"];
m44_437 [label="var filter = new Mock<T>()", span="477-477", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", file="ProcessingState.feature.cs"];
m44_438 [label="_filters.Add(filter.Object)", span="478-478", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", file="ProcessingState.feature.cs"];
m44_439 [label="return filter;", span="480-480", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", file="ProcessingState.feature.cs"];
m44_440 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", span="474-474", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.CreateFilter<T>()", file="ProcessingState.feature.cs"];
m44_422 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", span="451-451", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="ProcessingState.feature.cs"];
m44_423 [label="var filter = CreateFilter<IServerFilter>()", span="454-454", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="ProcessingState.feature.cs"];
m44_424 [label="filter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>()))\r\n                .Throws<OperationCanceledException>()", span="455-456", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="ProcessingState.feature.cs"];
m44_425 [label="var process = CreateProcess()", span="458-458", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="ProcessingState.feature.cs"];
m44_426 [label="Assert.Throws<OperationCanceledException>(\r\n                () => process.Run(_context))", span="461-462", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="ProcessingState.feature.cs"];
m44_427 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", span="451-451", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_ThrowsOperationCanceledException_OccurredInPostFilterMethods()", file="ProcessingState.feature.cs"];
m44_110 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", span="128-128", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="ProcessingState.feature.cs"];
m44_111 [label="var filter = CreateFilter<IServerExceptionFilter>()", span="131-131", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="ProcessingState.feature.cs"];
m44_112 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Throws<InvalidOperationException>()", span="133-135", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="ProcessingState.feature.cs"];
m44_115 [label="filter.Verify(x => x.OnServerException(\r\n                It.IsNotNull<ServerExceptionContext>()))", span="142-143", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="ProcessingState.feature.cs"];
m44_113 [label="var process = CreateProcess()", span="137-137", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="ProcessingState.feature.cs"];
m44_114 [label="Assert.Throws<InvalidOperationException>(() => process.Run(_context))", span="140-140", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="ProcessingState.feature.cs"];
m44_116 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", span="128-128", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsExceptionFilter_OnException()", file="ProcessingState.feature.cs"];
m44_40 [label="Entry lambda expression", span="41-41", cluster="lambda expression", color=green, community=0, file="ProcessingState.feature.cs"];
m44_41 [label="new DefaultJobPerformanceProcess(null, _innerProcess.Object)", span="41-41", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_42 [label="Exit lambda expression", span="41-41", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_14 [label="Entry PerformContext.cstr", span="", cluster="PerformContext.cstr", file="ProcessingState.feature.cs"];
m44_16 [label="Entry Mock<IJobPerformanceProcess>.cstr", span="", cluster="Mock<IJobPerformanceProcess>.cstr", file="ProcessingState.feature.cs"];
m44_15 [label="Entry Mock<IJobCancellationToken>.cstr", span="", cluster="Mock<IJobCancellationToken>.cstr", file="ProcessingState.feature.cs"];
m44_170 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", span="187-187", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="ProcessingState.feature.cs"];
m44_171 [label="var filter = CreateFilter<IServerFilter>()", span="190-190", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="ProcessingState.feature.cs"];
m44_172 [label="filter.Setup(x => x.OnPerforming(It.IsNotNull<PerformingContext>()))\r\n                .InSequence()", span="192-193", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="ProcessingState.feature.cs"];
m44_174 [label="filter.Setup(x => x.OnPerformed(It.IsNotNull<PerformedContext>()))\r\n                .InSequence()", span="199-200", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="ProcessingState.feature.cs"];
m44_173 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .InSequence()", span="195-197", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="ProcessingState.feature.cs"];
m44_175 [label="var process = CreateProcess()", span="202-202", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="ProcessingState.feature.cs"];
m44_176 [label="process.Run(_context)", span="205-205", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="ProcessingState.feature.cs"];
m44_177 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", span="187-187", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsServerFilters_BeforeAndAfterTheCreationOfAJob()", file="ProcessingState.feature.cs"];
m44_271 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", span="293-293", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="ProcessingState.feature.cs"];
m44_272 [label="var filter = CreateFilter<IServerFilter>()", span="296-296", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="ProcessingState.feature.cs"];
m44_273 [label="var exception = new InvalidOperationException()", span="298-298", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="ProcessingState.feature.cs"];
m44_277 [label="filter.Verify(x => x.OnPerformed(It.Is<PerformedContext>(\r\n                context => context.Exception == exception)))", span="309-310", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="ProcessingState.feature.cs"];
m44_274 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Throws(exception)", span="299-301", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="ProcessingState.feature.cs"];
m44_275 [label="var process = CreateProcess()", span="303-303", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="ProcessingState.feature.cs"];
m44_276 [label="Assert.Throws<InvalidOperationException>(() => process.Run(_context))", span="306-306", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="ProcessingState.feature.cs"];
m44_278 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", span="293-293", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsFiltersAboutException_WhenItIsOccured_DuringThePerformanceOfAJob()", file="ProcessingState.feature.cs"];
m44_126 [label="Entry Unk.OnServerException", span="", cluster="Unk.OnServerException", file="ProcessingState.feature.cs"];
m44_149 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", span="169-169", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="ProcessingState.feature.cs"];
m44_150 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Throws<InvalidOperationException>()", span="172-174", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="ProcessingState.feature.cs"];
m44_151 [label="var filter = CreateFilter<IServerExceptionFilter>()", span="176-176", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="ProcessingState.feature.cs"];
m44_152 [label="filter.Setup(x => x.OnServerException(It.IsAny<ServerExceptionContext>()))\r\n                .Callback((ServerExceptionContext x) => x.ExceptionHandled = true)", span="177-178", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="ProcessingState.feature.cs"];
m44_153 [label="var process = CreateProcess()", span="180-180", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="ProcessingState.feature.cs"];
m44_154 [label="Assert.DoesNotThrow(() => process.Run(_context))", span="183-183", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="ProcessingState.feature.cs"];
m44_155 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", span="169-169", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_EatsException_WhenItWasHandlerByFilter()", file="ProcessingState.feature.cs"];
m44_43 [label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span="", cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ProcessingState.feature.cs"];
m44_99 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", span="114-114", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", file="ProcessingState.feature.cs"];
m44_100 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Throws<InvalidOperationException>()", span="117-119", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", file="ProcessingState.feature.cs"];
m44_101 [label="var process = CreateProcess()", span="121-121", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", file="ProcessingState.feature.cs"];
m44_102 [label="Assert.Throws<InvalidOperationException>(() => process.Run(_context))", span="124-124", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", file="ProcessingState.feature.cs"];
m44_103 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", span="114-114", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCatchExceptions()", file="ProcessingState.feature.cs"];
m44_76 [label="HangFire.Tests.States.ProcessingStateFeature", span="", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="ProcessingState.feature.cs"];
m44_77 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", span="77-77", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_StoresJobReturnValueInPerformedContext()", file="ProcessingState.feature.cs"];
m44_181 [label="Entry Unk.OnPerforming", span="", cluster="Unk.OnPerforming", file="ProcessingState.feature.cs"];
m44_337 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="354-354", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ProcessingState.feature.cs"];
m44_338 [label="var outerFilter = CreateFilter<IServerFilter>()", span="357-357", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ProcessingState.feature.cs"];
m44_339 [label="var innerFilter = CreateFilter<IServerFilter>()", span="358-358", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ProcessingState.feature.cs"];
m44_344 [label="outerFilter.Verify(x => x.OnPerformed(It.Is<PerformedContext>(context => context.Exception != null)))", span="373-373", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ProcessingState.feature.cs"];
m44_340 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Throws<InvalidOperationException>()", span="360-362", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ProcessingState.feature.cs"];
m44_341 [label="innerFilter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>()))\r\n                .Callback((PerformedContext x) => x.ExceptionHandled = true)", span="364-365", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ProcessingState.feature.cs"];
m44_342 [label="var process = CreateProcess()", span="367-367", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ProcessingState.feature.cs"];
m44_343 [label="Assert.DoesNotThrow(() => process.Run(_context))", span="370-370", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ProcessingState.feature.cs"];
m44_345 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", span="354-354", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_EvenAboutHandledException()", file="ProcessingState.feature.cs"];
m44_18 [label="Entry Mock<IJobFilterProvider>.cstr", span="", cluster="Mock<IJobFilterProvider>.cstr", file="ProcessingState.feature.cs"];
m44_136 [label="Entry Unk.InSequence", span="", cluster="Unk.InSequence", file="ProcessingState.feature.cs"];
m44_442 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="ProcessingState.feature.cs"];
m44_66 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="ProcessingState.feature.cs"];
m44_230 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="251-251", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ProcessingState.feature.cs"];
m44_231 [label="var outerFilter = CreateFilter<IServerFilter>()", span="254-254", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ProcessingState.feature.cs"];
m44_232 [label="var innerFilter = CreateFilter<IServerFilter>()", span="255-255", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ProcessingState.feature.cs"];
m44_236 [label="outerFilter.Verify(x => x.OnPerformed(It.Is<PerformedContext>(context => context.Canceled)))", span="266-266", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ProcessingState.feature.cs"];
m44_233 [label="innerFilter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>()))\r\n                .Callback((PerformingContext context) => context.Canceled = true)", span="257-258", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ProcessingState.feature.cs"];
m44_234 [label="var process = CreateProcess()", span="260-260", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ProcessingState.feature.cs"];
m44_235 [label="process.Run(_context)", span="263-263", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ProcessingState.feature.cs"];
m44_237 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", span="251-251", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilter_AboutTheCancellationOfCreation()", file="ProcessingState.feature.cs"];
m44_19 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="ProcessingState.feature.cs"];
m44_434 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Method()", span="465-465", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Method()", file="ProcessingState.feature.cs"];
m44_280 [label="Entry Unk.Throws", span="", cluster="Unk.Throws", file="ProcessingState.feature.cs"];
m44_57 [label="Entry lambda expression", span="61-61", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_62 [label="var process = CreateProcess()", span="69-69", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsTheRunMethod_OfInnerProcess()", color=green, community=0, file="ProcessingState.feature.cs"];
m44_61 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsTheRunMethod_OfInnerProcess()", span="67-67", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsTheRunMethod_OfInnerProcess()", file="ProcessingState.feature.cs"];
m44_63 [label="process.Run(_context)", span="71-71", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsTheRunMethod_OfInnerProcess()", color=green, community=0, file="ProcessingState.feature.cs"];
m44_64 [label="_innerProcess.Verify(x => x.Run(_context), Times.Once)", span="73-73", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsTheRunMethod_OfInnerProcess()", file="ProcessingState.feature.cs"];
m44_59 [label="Exit lambda expression", span="61-61", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_58 [label="process.Run(null)", span="61-61", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_65 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsTheRunMethod_OfInnerProcess()", span="67-67", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_CallsTheRunMethod_OfInnerProcess()", file="ProcessingState.feature.cs"];
m44_55 [label="Entry TechTalk.SpecFlow.Table.cstr", span="", cluster="TechTalk.SpecFlow.Table.cstr", file="ProcessingState.feature.cs"];
m44_210 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", span="231-231", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="ProcessingState.feature.cs"];
m44_211 [label="var filter = CreateFilter<IServerFilter>()", span="234-234", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="ProcessingState.feature.cs"];
m44_212 [label="filter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>()))\r\n                .Callback((PerformingContext x) => x.Canceled = true)", span="236-237", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="ProcessingState.feature.cs"];
m44_216 [label="filter.Verify(x => x.OnPerformed(It.IsAny<PerformedContext>()), Times.Never)", span="247-247", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="ProcessingState.feature.cs"];
m44_213 [label="var process = CreateProcess()", span="239-239", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="ProcessingState.feature.cs"];
m44_214 [label="process.Run(_context)", span="242-242", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="ProcessingState.feature.cs"];
m44_215 [label="_innerProcess.Verify(x => x.Run(_context), Times.Never)", span="245-245", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="ProcessingState.feature.cs"];
m44_217 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", span="231-231", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCallBoth_Perform_And_OnPerforming_WhenFilterCancelsThis()", file="ProcessingState.feature.cs"];
m44_431 [label="Entry lambda expression", span="462-462", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_22 [label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs"];
m44_26 [label="Entry HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs"];
m44_31 [label="testRunner.Given(''a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="75-75", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs"];
m44_23 [label="testRunner.OnScenarioStart(scenarioInfo)", span="63-63", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs"];
m44_24 [label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="61-61", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ProcessingState.feature.cs"];
m44_27 [label="testRunner.CollectScenarioErrors()", span="68-68", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs"];
m44_28 [label="Exit HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", span="66-66", cluster="HangFire.Tests.States.ProcessingStateFeature.ScenarioCleanup()", file="ProcessingState.feature.cs"];
m44_32 [label="testRunner.And(''the Processing state'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="77-77", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs"];
m44_33 [label="Exit HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", span="71-71", cluster="HangFire.Tests.States.ProcessingStateFeature.FeatureBackground()", file="ProcessingState.feature.cs"];
m44_79 [label="Entry lambda expression", span="84-84", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_82 [label="Entry lambda expression", span="92-92", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_80 [label="x.Run(_context)", span="84-84", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_81 [label="Exit lambda expression", span="84-84", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_83 [label="x.OnPerformed(It.Is<PerformedContext>(context => (string)context.Result == ''Returned value''))", span="92-92", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_84 [label="Exit lambda expression", span="92-92", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_86 [label="Entry lambda expression", span="92-92", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_87 [label="(string)context.Result == ''Returned value''", span="92-92", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_88 [label="Exit lambda expression", span="92-92", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_96 [label="Entry lambda expression", span="103-103", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_97 [label="x.Run(_context)", span="103-103", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_98 [label="Exit lambda expression", span="103-103", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_104 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_108 [label="process.Run(_context)", span="124-124", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_107 [label="Entry lambda expression", span="124-124", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_105 [label="x.Run(_context)", span="118-118", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_106 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_109 [label="Exit lambda expression", span="124-124", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_117 [label="Entry lambda expression", span="134-134", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_121 [label="process.Run(_context)", span="140-140", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_120 [label="Entry lambda expression", span="140-140", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_123 [label="Entry lambda expression", span="142-143", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_118 [label="x.Run(_context)", span="134-134", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_119 [label="Exit lambda expression", span="134-134", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_122 [label="Exit lambda expression", span="140-140", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_124 [label="x.OnServerException(\r\n                It.IsNotNull<ServerExceptionContext>())", span="142-143", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_125 [label="Exit lambda expression", span="142-143", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_137 [label="Entry lambda expression", span="153-153", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_140 [label="Entry lambda expression", span="154-154", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_143 [label="Entry lambda expression", span="157-157", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_147 [label="process.Run(_context)", span="163-163", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_146 [label="Entry lambda expression", span="163-163", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_138 [label="x.OnServerException(It.IsAny<ServerExceptionContext>())", span="153-153", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_139 [label="Exit lambda expression", span="153-153", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_141 [label="x.OnServerException(It.IsAny<ServerExceptionContext>())", span="154-154", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_142 [label="Exit lambda expression", span="154-154", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_144 [label="x.Run(_context)", span="157-157", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_145 [label="Exit lambda expression", span="157-157", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_148 [label="Exit lambda expression", span="163-163", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_158 [label="Entry lambda expression", span="173-173", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_161 [label="Entry lambda expression", span="177-177", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_164 [label="Entry lambda expression", span="178-178", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_168 [label="process.Run(_context)", span="183-183", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_167 [label="Entry lambda expression", span="183-183", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_159 [label="x.Run(_context)", span="173-173", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_160 [label="Exit lambda expression", span="173-173", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_162 [label="x.OnServerException(It.IsAny<ServerExceptionContext>())", span="177-177", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_163 [label="Exit lambda expression", span="177-177", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_165 [label="x.ExceptionHandled = true", span="178-178", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_166 [label="Exit lambda expression", span="178-178", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_169 [label="Exit lambda expression", span="183-183", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_178 [label="Entry lambda expression", span="192-192", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_182 [label="Entry lambda expression", span="196-196", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_185 [label="Entry lambda expression", span="199-199", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_179 [label="x.OnPerforming(It.IsNotNull<PerformingContext>())", span="192-192", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_180 [label="Exit lambda expression", span="192-192", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_183 [label="x.Run(_context)", span="196-196", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_184 [label="Exit lambda expression", span="196-196", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_186 [label="x.OnPerformed(It.IsNotNull<PerformedContext>())", span="199-199", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_187 [label="Exit lambda expression", span="199-199", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_198 [label="Entry lambda expression", span="217-217", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_201 [label="Entry lambda expression", span="218-218", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_204 [label="Entry lambda expression", span="219-219", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_207 [label="Entry lambda expression", span="220-220", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_199 [label="x.OnPerforming(It.IsAny<PerformingContext>())", span="217-217", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_200 [label="Exit lambda expression", span="217-217", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_202 [label="x.OnPerforming(It.IsAny<PerformingContext>())", span="218-218", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_203 [label="Exit lambda expression", span="218-218", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_205 [label="x.OnPerformed(It.IsAny<PerformedContext>())", span="219-219", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_206 [label="Exit lambda expression", span="219-219", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_208 [label="x.OnPerformed(It.IsAny<PerformedContext>())", span="220-220", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_209 [label="Exit lambda expression", span="220-220", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_218 [label="Entry lambda expression", span="236-236", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_221 [label="Entry lambda expression", span="237-237", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_224 [label="Entry lambda expression", span="245-245", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_227 [label="Entry lambda expression", span="247-247", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_219 [label="x.OnPerforming(It.IsAny<PerformingContext>())", span="236-236", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_220 [label="Exit lambda expression", span="236-236", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_222 [label="x.Canceled = true", span="237-237", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_223 [label="Exit lambda expression", span="237-237", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_225 [label="x.Run(_context)", span="245-245", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_226 [label="Exit lambda expression", span="245-245", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_228 [label="x.OnPerformed(It.IsAny<PerformedContext>())", span="247-247", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_229 [label="Exit lambda expression", span="247-247", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_238 [label="Entry lambda expression", span="257-257", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_241 [label="Entry lambda expression", span="258-258", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_244 [label="Entry lambda expression", span="266-266", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_239 [label="x.OnPerforming(It.IsAny<PerformingContext>())", span="257-257", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_240 [label="Exit lambda expression", span="257-257", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_242 [label="context.Canceled = true", span="258-258", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_243 [label="Exit lambda expression", span="258-258", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_245 [label="x.OnPerformed(It.Is<PerformedContext>(context => context.Canceled))", span="266-266", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_246 [label="Exit lambda expression", span="266-266", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_247 [label="Entry lambda expression", span="266-266", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_248 [label="context.Canceled", span="266-266", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_249 [label="Exit lambda expression", span="266-266", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_259 [label="Entry lambda expression", span="275-275", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_263 [label="process.Run(_context)", span="282-282", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_262 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_265 [label="Entry lambda expression", span="287-287", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_268 [label="Entry lambda expression", span="289-289", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_260 [label="x.OnPerforming(It.IsAny<PerformingContext>())", span="275-275", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_261 [label="Exit lambda expression", span="275-275", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_264 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_266 [label="x.Run(It.IsAny<PerformContext>())", span="287-287", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_267 [label="Exit lambda expression", span="287-287", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_269 [label="x.OnPerformed(It.IsAny<PerformedContext>())", span="289-289", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_270 [label="Exit lambda expression", span="289-289", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_288 [label="x.OnPerformed(It.Is<PerformedContext>(\r\n                context => context.Exception == exception))", span="309-310", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_291 [label="context.Exception == exception", span="310-310", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_281 [label="Entry lambda expression", span="300-300", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_285 [label="process.Run(_context)", span="306-306", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_284 [label="Entry lambda expression", span="306-306", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_287 [label="Entry lambda expression", span="309-310", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_282 [label="x.Run(_context)", span="300-300", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_283 [label="Exit lambda expression", span="300-300", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_286 [label="Exit lambda expression", span="306-306", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_289 [label="Exit lambda expression", span="309-310", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_290 [label="Entry lambda expression", span="310-310", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_292 [label="Exit lambda expression", span="310-310", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_309 [label="x.OnPerformed(It.Is<PerformedContext>(context => context.Exception == exception))", span="330-330", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_312 [label="context.Exception == exception", span="330-330", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_302 [label="Entry lambda expression", span="322-322", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_306 [label="process.Run(_context)", span="328-328", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_305 [label="Entry lambda expression", span="328-328", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_308 [label="Entry lambda expression", span="330-330", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_303 [label="x.Run(_context)", span="322-322", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_304 [label="Exit lambda expression", span="322-322", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_307 [label="Exit lambda expression", span="328-328", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_310 [label="Exit lambda expression", span="330-330", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_311 [label="Entry lambda expression", span="330-330", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_313 [label="Exit lambda expression", span="330-330", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_326 [label="x.OnPerformed(It.Is<PerformedContext>(context => context.Exception == exception))", span="344-344", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_329 [label="context.Exception == exception", span="344-344", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_322 [label="Entry lambda expression", span="341-341", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_325 [label="Entry lambda expression", span="344-344", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_331 [label="Entry lambda expression", span="345-345", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_335 [label="process.Run(_context)", span="350-350", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_334 [label="Entry lambda expression", span="350-350", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_323 [label="x.Run(_context)", span="341-341", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_324 [label="Exit lambda expression", span="341-341", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_327 [label="Exit lambda expression", span="344-344", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_328 [label="Entry lambda expression", span="344-344", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_330 [label="Exit lambda expression", span="344-344", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_332 [label="x.ExceptionHandled = true", span="345-345", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_333 [label="Exit lambda expression", span="345-345", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_336 [label="Exit lambda expression", span="350-350", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_346 [label="Entry lambda expression", span="361-361", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_349 [label="Entry lambda expression", span="364-364", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_352 [label="Entry lambda expression", span="365-365", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_356 [label="process.Run(_context)", span="370-370", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_355 [label="Entry lambda expression", span="370-370", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_358 [label="Entry lambda expression", span="373-373", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_347 [label="x.Run(_context)", span="361-361", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_348 [label="Exit lambda expression", span="361-361", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_350 [label="x.OnPerformed(It.IsAny<PerformedContext>())", span="364-364", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_351 [label="Exit lambda expression", span="364-364", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_353 [label="x.ExceptionHandled = true", span="365-365", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_354 [label="Exit lambda expression", span="365-365", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_357 [label="Exit lambda expression", span="370-370", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_359 [label="x.OnPerformed(It.Is<PerformedContext>(context => context.Exception != null))", span="373-373", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_360 [label="Exit lambda expression", span="373-373", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_361 [label="Entry lambda expression", span="373-373", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_362 [label="context.Exception != null", span="373-373", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_363 [label="Exit lambda expression", span="373-373", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_371 [label="Entry lambda expression", span="381-381", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_375 [label="process.Run(_context)", span="388-388", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_374 [label="Entry lambda expression", span="387-388", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_372 [label="x.OnPerformed(It.IsAny<PerformedContext>())", span="381-381", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_373 [label="Exit lambda expression", span="381-381", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_376 [label="Exit lambda expression", span="387-388", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_385 [label="Entry lambda expression", span="398-398", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_388 [label="Entry lambda expression", span="402-402", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_392 [label="process.Run(_context)", span="409-409", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_391 [label="Entry lambda expression", span="408-409", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_386 [label="x.OnPerformed(It.IsAny<PerformedContext>())", span="398-398", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_387 [label="Exit lambda expression", span="398-398", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_389 [label="x.Run(_context)", span="402-402", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_390 [label="Exit lambda expression", span="402-402", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_393 [label="Exit lambda expression", span="408-409", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_401 [label="Entry lambda expression", span="419-419", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_405 [label="process.Run(_context)", span="427-427", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_404 [label="Entry lambda expression", span="427-427", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_407 [label="Entry lambda expression", span="431-431", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_402 [label="x.Run(_context)", span="419-419", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_403 [label="Exit lambda expression", span="419-419", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_406 [label="Exit lambda expression", span="427-427", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_408 [label="x.OnServerException(It.IsAny<ServerExceptionContext>())", span="431-431", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_409 [label="Exit lambda expression", span="431-431", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_416 [label="Entry lambda expression", span="440-440", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_420 [label="process.Run(_context)", span="447-447", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_419 [label="Entry lambda expression", span="447-447", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_417 [label="x.OnPerforming(It.IsAny<PerformingContext>())", span="440-440", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_418 [label="Exit lambda expression", span="440-440", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_421 [label="Exit lambda expression", span="447-447", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_428 [label="Entry lambda expression", span="455-455", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_432 [label="process.Run(_context)", span="462-462", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_429 [label="x.OnPerformed(It.IsAny<PerformedContext>())", span="455-455", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_430 [label="Exit lambda expression", span="455-455", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_433 [label="Exit lambda expression", span="462-462", cluster="lambda expression", file="ProcessingState.feature.cs"];
m44_20 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ProcessingState.feature.cs"];
m44_364 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", span="377-377", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_365 [label="var filter = CreateFilter<IServerFilter>()", span="380-380", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_366 [label="filter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>()))\r\n                .Throws<InvalidOperationException>()", span="381-382", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_367 [label="var process = CreateProcess()", span="384-384", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_368 [label="var exception = Assert.Throws<JobPerformanceException>(() => \r\n                process.Run(_context))", span="387-388", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_369 [label="Assert.IsType<InvalidOperationException>(exception.InnerException)", span="390-390", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_370 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", span="377-377", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_377 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", span="394-394", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_378 [label="var filter = CreateFilter<IServerFilter>()", span="397-397", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_379 [label="filter.Setup(x => x.OnPerformed(It.IsAny<PerformedContext>()))\r\n                .Throws<InvalidOperationException>()", span="398-399", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_380 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Throws<ArgumentNullException>()", span="401-403", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_381 [label="var process = CreateProcess()", span="405-405", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_382 [label="var exception = Assert.Throws<JobPerformanceException>(() =>\r\n                process.Run(_context))", span="408-409", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_383 [label="Assert.IsType<InvalidOperationException>(exception.InnerException)", span="411-411", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_384 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", span="394-394", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_WrapsOnPerformedException_OccuredAfterAnotherException_IntoJobPerformanceException()", file="ProcessingState.feature.cs"];
m44_34 [label="Entry Hangfire.Common.JobFilter.JobFilter(object, Hangfire.Common.JobFilterScope, int?)", span="38-38", cluster="Hangfire.Common.JobFilter.JobFilter(object, Hangfire.Common.JobFilterScope, int?)", file="ProcessingState.feature.cs"];
m44_156 [label="Entry Unk.Callback", span="", cluster="Unk.Callback", file="ProcessingState.feature.cs"];
m44_250 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", span="270-270", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="ProcessingState.feature.cs"];
m44_251 [label="var filter = CreateFilter<IServerFilter>()", span="273-273", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="ProcessingState.feature.cs"];
m44_252 [label="filter.Setup(x => x.OnPerforming(It.IsAny<PerformingContext>()))\r\n                .Throws<InvalidOperationException>()", span="275-276", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="ProcessingState.feature.cs"];
m44_257 [label="filter.Verify(x => x.OnPerformed(It.IsAny<PerformedContext>()), Times.Never)", span="289-289", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="ProcessingState.feature.cs"];
m44_253 [label="var process = CreateProcess()", span="278-278", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="ProcessingState.feature.cs"];
m44_254 [label="var exception = Assert.Throws<JobPerformanceException>(\r\n                () => process.Run(_context))", span="281-282", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="ProcessingState.feature.cs"];
m44_255 [label="Assert.IsType<InvalidOperationException>(exception.InnerException)", span="285-285", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="ProcessingState.feature.cs"];
m44_256 [label="_innerProcess.Verify(x => x.Run(It.IsAny<PerformContext>()), Times.Never)", span="287-287", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="ProcessingState.feature.cs"];
m44_258 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", span="270-270", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_DoesNotCall_Perform_And_OnPerformed_WhenExceptionOccured_DuringPerformingPhase()", file="ProcessingState.feature.cs"];
m44_21 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="ProcessingState.feature.cs"];
m44_30 [label="Entry Unk.GetFilters", span="", cluster="Unk.GetFilters", file="ProcessingState.feature.cs"];
m44_12 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="ProcessingState.feature.cs"];
m44_293 [label="Entry Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="314-314", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ProcessingState.feature.cs"];
m44_294 [label="var outerFilter = CreateFilter<IServerFilter>()", span="317-317", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ProcessingState.feature.cs"];
m44_295 [label="var innerFilter = CreateFilter<IServerFilter>()", span="318-318", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ProcessingState.feature.cs"];
m44_300 [label="outerFilter.Verify(x => x.OnPerformed(It.Is<PerformedContext>(context => context.Exception == exception)))", span="330-330", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ProcessingState.feature.cs"];
m44_296 [label="var exception = new InvalidOperationException()", span="320-320", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ProcessingState.feature.cs"];
m44_297 [label="_innerProcess\r\n                .Setup(x => x.Run(_context))\r\n                .Throws(exception)", span="321-323", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ProcessingState.feature.cs"];
m44_298 [label="var process = CreateProcess()", span="325-325", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ProcessingState.feature.cs"];
m44_299 [label="Assert.Throws<InvalidOperationException>(() => process.Run(_context))", span="328-328", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ProcessingState.feature.cs"];
m44_301 [label="Exit Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", span="314-314", cluster="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts.Run_TellsOuterFilters_AboutAllExceptions()", file="ProcessingState.feature.cs"];
m44_13 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="150-150", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="ProcessingState.feature.cs"];
m44_443 [label="Hangfire.Core.Tests.Server.DefaultJobPerformanceProcessFacts", span="", file="ProcessingState.feature.cs"];
m44_444 [label=process, span="", file="ProcessingState.feature.cs"];
m44_445 [label=process, span="", file="ProcessingState.feature.cs"];
m44_446 [label=process, span="", file="ProcessingState.feature.cs"];
m44_447 [label=process, span="", file="ProcessingState.feature.cs"];
m44_448 [label=process, span="", file="ProcessingState.feature.cs"];
m44_449 [label=process, span="", file="ProcessingState.feature.cs"];
m44_450 [label=process, span="", file="ProcessingState.feature.cs"];
m44_451 [label=exception, span="", file="ProcessingState.feature.cs"];
m44_452 [label=process, span="", file="ProcessingState.feature.cs"];
m44_453 [label=exception, span="", file="ProcessingState.feature.cs"];
m44_454 [label=exception, span="", file="ProcessingState.feature.cs"];
m44_455 [label=process, span="", file="ProcessingState.feature.cs"];
m44_456 [label=process, span="", file="ProcessingState.feature.cs"];
m44_457 [label=process, span="", file="ProcessingState.feature.cs"];
m44_458 [label=process, span="", file="ProcessingState.feature.cs"];
m44_459 [label=process, span="", file="ProcessingState.feature.cs"];
m44_460 [label=process, span="", file="ProcessingState.feature.cs"];
m44_461 [label=process, span="", file="ProcessingState.feature.cs"];
m45_5 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="Program.cs"];
m45_6 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="Program.cs"];
m45_0 [label="Entry HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="Program.cs"];
m45_1 [label="QueuePollInterval = TimeSpan.FromSeconds(15)", span="26-26", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="Program.cs"];
m45_2 [label="InvisibilityTimeout = TimeSpan.FromMinutes(5)", span="27-27", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="Program.cs"];
m45_3 [label="PrepareSchemaIfNecessary = true", span="29-29", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="Program.cs"];
m45_4 [label="Exit HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", span="24-24", cluster="HangFire.SqlServer.SqlServerStorageOptions.SqlServerStorageOptions()", file="Program.cs"];
m45_7 [label="HangFire.SqlServer.SqlServerStorageOptions", span="", file="Program.cs"];
m46_0 [label="Entry Hangfire.JobActivator.ActivateJob(System.Type)", span="42-42", cluster="Hangfire.JobActivator.ActivateJob(System.Type)", file="QueueSteps.cs"];
m46_1 [label="return Activator.CreateInstance(jobType);", span="44-44", cluster="Hangfire.JobActivator.ActivateJob(System.Type)", file="QueueSteps.cs"];
m46_2 [label="Exit Hangfire.JobActivator.ActivateJob(System.Type)", span="42-42", cluster="Hangfire.JobActivator.ActivateJob(System.Type)", file="QueueSteps.cs"];
m46_3 [label="Entry System.Activator.CreateInstance(System.Type)", span="0-0", cluster="System.Activator.CreateInstance(System.Type)", file="QueueSteps.cs"];
m47_24 [label="Entry HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", span="10-10", cluster="HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", file="RecurringJobsFilter.cs"];
m47_20 [label="Entry Unk.GetType", span="", cluster="Unk.GetType", file="RecurringJobsFilter.cs"];
m47_21 [label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0", cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="RecurringJobsFilter.cs"];
m47_19 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="RecurringJobsFilter.cs"];
m47_23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="RecurringJobsFilter.cs"];
m47_25 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)", file="RecurringJobsFilter.cs"];
m47_3 [label="Entry HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="21-21", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_4 [label="redis == null", span="23-23", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_6 [label="state == null", span="24-24", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_8 [label="state.StateName != SucceededState.Name", span="26-26", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_9 [label="return state;", span="28-28", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_10 [label="var jobType = redis.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                ''Type'')", span="31-33", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_15 [label="return state;", span="46-46", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_5 [label="throw new ArgumentNullException(''redis'');", span="23-23", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_7 [label="throw new ArgumentNullException(''state'');", span="24-24", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_11 [label="var type = Type.GetType(jobType)", span="34-34", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_12 [label="var recurringAttribute = type.GetCustomAttributes(true).OfType<RecurringAttribute>().SingleOrDefault()", span="37-37", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_13 [label="recurringAttribute != null", span="39-39", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_14 [label="return new ScheduledState(\r\n                    ''Scheduled as a recurring job.'',\r\n                    DateTime.UtcNow.AddSeconds(recurringAttribute.Seconds));", span="41-43", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_16 [label="Exit HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="21-21", cluster="HangFire.RecurringJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RecurringJobsFilter.cs"];
m47_22 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="RecurringJobsFilter.cs"];
m47_18 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RecurringJobsFilter.cs"];
m47_0 [label="Entry HangFire.RecurringAttribute.RecurringAttribute(int)", span="11-11", cluster="HangFire.RecurringAttribute.RecurringAttribute(int)", file="RecurringJobsFilter.cs"];
m47_1 [label="Seconds = seconds", span="13-13", cluster="HangFire.RecurringAttribute.RecurringAttribute(int)", file="RecurringJobsFilter.cs"];
m47_2 [label="Exit HangFire.RecurringAttribute.RecurringAttribute(int)", span="11-11", cluster="HangFire.RecurringAttribute.RecurringAttribute(int)", file="RecurringJobsFilter.cs"];
m47_26 [label="HangFire.RecurringAttribute", span="", file="RecurringJobsFilter.cs"];
m48_0 [label="Entry HangFire.RedisFactory.RedisFactory()", span="10-10", cluster="HangFire.RedisFactory.RedisFactory()", file="RedisFactory.cs"];
m48_1 [label="Host = String.Format(''{0}:{1}'', RedisNativeClient.DefaultHost, RedisNativeClient.DefaultPort)", span="12-12", cluster="HangFire.RedisFactory.RedisFactory()", file="RedisFactory.cs"];
m48_2 [label="Db = (int) RedisNativeClient.DefaultDb", span="13-13", cluster="HangFire.RedisFactory.RedisFactory()", file="RedisFactory.cs"];
m48_3 [label="_pooledManager = new Lazy<IRedisClientsManager>(\r\n                () => new PooledRedisClientManager(Db, Host))", span="15-16", cluster="HangFire.RedisFactory.RedisFactory()", file="RedisFactory.cs"];
m48_4 [label="_basicManager = new Lazy<IRedisClientsManager>(() => \r\n                new BasicRedisClientManager(Db, Host))", span="18-19", cluster="HangFire.RedisFactory.RedisFactory()", file="RedisFactory.cs"];
m48_5 [label="Exit HangFire.RedisFactory.RedisFactory()", span="10-10", cluster="HangFire.RedisFactory.RedisFactory()", file="RedisFactory.cs"];
m48_15 [label="Entry BasicRedisClientManager.cstr", span="", cluster="BasicRedisClientManager.cstr", file="RedisFactory.cs"];
m48_11 [label="Entry PooledRedisClientManager.cstr", span="", cluster="PooledRedisClientManager.cstr", file="RedisFactory.cs"];
m48_6 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="RedisFactory.cs"];
m48_7 [label="Entry Lazy<IRedisClientsManager>.cstr", span="", cluster="Lazy<IRedisClientsManager>.cstr", file="RedisFactory.cs"];
m48_12 [label="Entry lambda expression", span="18-19", cluster="lambda expression", file="RedisFactory.cs"];
m48_8 [label="Entry lambda expression", span="16-16", cluster="lambda expression", file="RedisFactory.cs"];
m48_9 [label="new PooledRedisClientManager(Db, Host)", span="16-16", cluster="lambda expression", file="RedisFactory.cs"];
m48_10 [label="Exit lambda expression", span="16-16", cluster="lambda expression", file="RedisFactory.cs"];
m48_13 [label="new BasicRedisClientManager(Db, Host)", span="19-19", cluster="lambda expression", file="RedisFactory.cs"];
m48_14 [label="Exit lambda expression", span="18-19", cluster="lambda expression", file="RedisFactory.cs"];
m50_18 [label="Entry HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", span="10-10", cluster="HangFire.States.ScheduledState.ScheduledState(string, System.DateTime)", file="RetryJobsFilter.cs"];
m50_16 [label="Entry Unk.SecondsToDelay", span="", cluster="Unk.SecondsToDelay", file="RetryJobsFilter.cs"];
m50_20 [label="Entry HangFire.RetryJobsFilter.SecondsToDelay(long)", span="44-44", cluster="HangFire.RetryJobsFilter.SecondsToDelay(long)", file="RetryJobsFilter.cs"];
m50_21 [label="var random = new Random()", span="46-46", cluster="HangFire.RetryJobsFilter.SecondsToDelay(long)", file="RetryJobsFilter.cs"];
m50_22 [label="return (int)Math.Round(\r\n                Math.Pow(retryCount, 4) + 15 + (random.Next(30) * (retryCount + 1)));", span="47-48", cluster="HangFire.RetryJobsFilter.SecondsToDelay(long)", file="RetryJobsFilter.cs"];
m50_23 [label="Exit HangFire.RetryJobsFilter.SecondsToDelay(long)", span="44-44", cluster="HangFire.RetryJobsFilter.SecondsToDelay(long)", file="RetryJobsFilter.cs"];
m50_17 [label="Entry System.DateTime.AddSeconds(double)", span="0-0", cluster="System.DateTime.AddSeconds(double)", file="RetryJobsFilter.cs"];
m50_19 [label="Entry Unk.Format", span="", cluster="Unk.Format", file="RetryJobsFilter.cs"];
m50_24 [label="Entry System.Random.Random()", span="0-0", cluster="System.Random.Random()", file="RetryJobsFilter.cs"];
m50_0 [label="Entry HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="11-11", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_1 [label="redis == null", span="13-13", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_3 [label="state == null", span="14-14", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_5 [label="state.StateName != FailedState.Name", span="16-16", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_6 [label="return state;", span="19-19", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_7 [label="var retryCount = redis.IncrementValueInHash(\r\n                String.Format(''hangfire:job:{0}'', jobId),\r\n                ''RetryCount'',\r\n                1)", span="22-25", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_11 [label="return state;", span="40-40", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_2 [label="throw new ArgumentNullException(''redis'');", span="13-13", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_4 [label="throw new ArgumentNullException(''state'');", span="14-14", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_8 [label="retryCount <= MaxRetryAttempts", span="27-27", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_9 [label="var delay = DateTime.UtcNow.AddSeconds(SecondsToDelay(retryCount))", span="29-29", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_10 [label="return new ScheduledState(\r\n                    String.Format(''Retry attempt {0} of {1}.'', retryCount, MaxRetryAttempts), \r\n                    delay);", span="33-35", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_12 [label="Exit HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="11-11", cluster="HangFire.RetryJobsFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="RetryJobsFilter.cs"];
m50_26 [label="Entry System.Random.Next(int)", span="0-0", cluster="System.Random.Next(int)", file="RetryJobsFilter.cs"];
m50_27 [label="Entry System.Math.Round(double)", span="0-0", cluster="System.Math.Round(double)", file="RetryJobsFilter.cs"];
m50_15 [label="Entry Unk.IncrementValueInHash", span="", cluster="Unk.IncrementValueInHash", file="RetryJobsFilter.cs"];
m50_14 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="RetryJobsFilter.cs"];
m50_25 [label="Entry System.Math.Pow(double, double)", span="0-0", cluster="System.Math.Pow(double, double)", file="RetryJobsFilter.cs"];
m50_28 [label="HangFire.RetryJobsFilter", span="", file="RetryJobsFilter.cs"];
m51_162 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="158-158", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_163 [label="var worker = CreateWorker()", span="160-160", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_164 [label="worker.Execute(_context.Object)", span="162-162", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_165 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName)))", span="164-167", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_166 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="158-158", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_13 [label="Entry HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", span="56-56", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_41 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="307-307", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="ScheduledJobsPage.generated.cs"];
m51_53 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="ScheduledJobsPage.generated.cs"];
m51_292 [label="Entry System.Exception.Exception()", span="0-0", cluster="System.Exception.Exception()", file="ScheduledJobsPage.generated.cs"];
m51_250 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="245-245", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="ScheduledJobsPage.generated.cs"];
m51_251 [label="var exception = new InvalidOperationException()", span="248-248", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="ScheduledJobsPage.generated.cs"];
m51_252 [label="_performer\r\n                .Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws(exception)", span="249-251", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="ScheduledJobsPage.generated.cs"];
m51_255 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception)))", span="259-262", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_253 [label="var worker = CreateWorker()", span="253-253", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="ScheduledJobsPage.generated.cs"];
m51_254 [label="worker.Execute(_context.Object)", span="256-256", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="ScheduledJobsPage.generated.cs"];
m51_256 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="245-245", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="ScheduledJobsPage.generated.cs"];
m51_58 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", span="63-63", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="ScheduledJobsPage.generated.cs"];
m51_59 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_queues, null, _stateChanger.Object))", span="65-66", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="ScheduledJobsPage.generated.cs"];
m51_60 [label="Assert.Equal(''performer'', exception.ParamName)", span="68-68", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="ScheduledJobsPage.generated.cs"];
m51_61 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", span="63-63", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenPerformanceProcessIsNull()", file="ScheduledJobsPage.generated.cs"];
m51_173 [label="Entry Unk.ElementAt", span="", cluster="Unk.ElementAt", file="ScheduledJobsPage.generated.cs"];
m51_239 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="233-233", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_240 [label="var worker = CreateWorker()", span="235-235", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_241 [label="worker.Execute(_context.Object)", span="237-237", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_242 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName)))", span="239-241", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_243 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="233-233", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_6 [label="_fetchedJob = new Mock<IFetchedJob>()", span="35-35", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="ScheduledJobsPage.generated.cs"];
m51_9 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    Job = Job.FromExpression(() => Method()),\r\n                })", span="42-46", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="ScheduledJobsPage.generated.cs"];
m51_7 [label="_fetchedJob.Setup(x => x.JobId).Returns(JobId)", span="36-36", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="ScheduledJobsPage.generated.cs"];
m51_8 [label="_connection\r\n                .Setup(x => x.FetchNextJob(_queues, It.IsNotNull<CancellationToken>()))\r\n                .Returns(_fetchedJob.Object)", span="38-40", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="ScheduledJobsPage.generated.cs"];
m51_10 [label="_stateChanger = new Mock<IBackgroundJobStateChanger>()", span="48-48", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="ScheduledJobsPage.generated.cs"];
m51_39 [label="Method()", span="45-45", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_34 [label="Entry lambda expression", span="42-42", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_120 [label="Entry Unk.Requeue", span="", cluster="Unk.Requeue", file="ScheduledJobsPage.generated.cs"];
m51_174 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="171-171", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="ScheduledJobsPage.generated.cs"];
m51_175 [label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is ProcessingState)))\r\n                .Returns<IState>(null)", span="174-176", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="ScheduledJobsPage.generated.cs"];
m51_176 [label="var worker = CreateWorker()", span="178-178", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_177 [label="worker.Execute(_context.Object)", span="181-181", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="ScheduledJobsPage.generated.cs"];
m51_178 [label="_performer.Verify(x => x.Perform(It.IsAny<PerformContext>()), Times.Never)", span="184-184", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="ScheduledJobsPage.generated.cs"];
m51_179 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="171-171", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="ScheduledJobsPage.generated.cs"];
m51_189 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="188-188", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="ScheduledJobsPage.generated.cs"];
m51_190 [label="var worker = CreateWorker()", span="190-190", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="ScheduledJobsPage.generated.cs"];
m51_191 [label="worker.Execute(_context.Object)", span="192-192", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="ScheduledJobsPage.generated.cs"];
m51_192 [label="_performer.Verify(x => x.Perform(It.IsNotNull<PerformContext>()))", span="194-194", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="ScheduledJobsPage.generated.cs"];
m51_193 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="188-188", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="ScheduledJobsPage.generated.cs"];
m51_226 [label="Entry Unk.DoesNotThrow", span="", cluster="Unk.DoesNotThrow", file="ScheduledJobsPage.generated.cs"];
m51_36 [label="Exit lambda expression", span="42-42", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_257 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="ScheduledJobsPage.generated.cs"];
m51_14 [label="Entry Mock<IBackgroundJobPerformer>.cstr", span="", cluster="Mock<IBackgroundJobPerformer>.cstr", file="ScheduledJobsPage.generated.cs"];
m51_15 [label="Entry Mock<IStorageConnection>.cstr", span="", cluster="Mock<IStorageConnection>.cstr", file="ScheduledJobsPage.generated.cs"];
m51_16 [label="Entry Unk.Setup", span="", cluster="Unk.Setup", file="ScheduledJobsPage.generated.cs"];
m51_22 [label="var jobData = connection.GetJobData(jobId)", span="81-81", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_101 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="106-106", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="ScheduledJobsPage.generated.cs"];
m51_102 [label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.IsAny<StateChangeContext>()))\r\n                .Throws<InvalidOperationException>()", span="108-110", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="ScheduledJobsPage.generated.cs"];
m51_103 [label="var worker = CreateWorker()", span="112-112", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="ScheduledJobsPage.generated.cs"];
m51_104 [label="Assert.Throws<InvalidOperationException>(\r\n                () => worker.Execute(_context.Object))", span="114-115", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="ScheduledJobsPage.generated.cs"];
m51_105 [label="_fetchedJob.Verify(x => x.RemoveFromQueue(), Times.Never)", span="117-117", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="ScheduledJobsPage.generated.cs"];
m51_106 [label="_fetchedJob.Verify(x => x.Requeue())", span="118-118", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="ScheduledJobsPage.generated.cs"];
m51_107 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", span="106-106", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RequeuesAJob_WhenThereWasAnException()", file="ScheduledJobsPage.generated.cs"];
m51_219 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="217-217", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="ScheduledJobsPage.generated.cs"];
m51_220 [label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws<JobAbortedException>()", span="220-221", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="ScheduledJobsPage.generated.cs"];
m51_221 [label="var worker = CreateWorker()", span="223-223", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="ScheduledJobsPage.generated.cs"];
m51_222 [label="Assert.DoesNotThrow(() => worker.Execute(_context.Object))", span="226-226", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="ScheduledJobsPage.generated.cs"];
m51_223 [label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="228-228", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="ScheduledJobsPage.generated.cs"];
m51_224 [label="_fetchedJob.Verify(x => x.Requeue(), Times.Never)", span="229-229", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="ScheduledJobsPage.generated.cs"];
m51_225 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", span="217-217", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_RemovesJobFromQueue_WhenProcessThrowsJobAbortedException()", file="ScheduledJobsPage.generated.cs"];
m51_78 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="302-302", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="ScheduledJobsPage.generated.cs"];
m51_302 [label="return new Worker(_queues, _performer.Object, _stateChanger.Object);", span="304-304", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="ScheduledJobsPage.generated.cs"];
m51_303 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="302-302", cluster="Hangfire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="ScheduledJobsPage.generated.cs"];
m51_38 [label="Entry lambda expression", span="45-45", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_35 [label="x.GetJobData(JobId)", span="42-42", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_18 [label="var processingState = new ProcessingState(_context.ServerId)", span="62-62", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_268 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="266-266", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="ScheduledJobsPage.generated.cs"];
m51_269 [label="var exception = new InvalidOperationException()", span="269-269", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_270 [label="_performer\r\n                .Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws(new JobPerformanceException(''hello'', exception))", span="270-272", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="ScheduledJobsPage.generated.cs"];
m51_271 [label="var worker = CreateWorker()", span="274-274", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="ScheduledJobsPage.generated.cs"];
m51_272 [label="worker.Execute(_context.Object)", span="277-277", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="ScheduledJobsPage.generated.cs"];
m51_273 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState)))", span="280-282", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="ScheduledJobsPage.generated.cs"];
m51_274 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="266-266", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="ScheduledJobsPage.generated.cs"];
m51_37 [label="Entry Unk.GetJobData", span="", cluster="Unk.GetJobData", file="ScheduledJobsPage.generated.cs"];
m51_26 [label="state = new SucceededState()", span="88-88", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_40 [label="Exit lambda expression", span="45-45", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_45 [label="Entry Unk.ChangeState", span="", cluster="Unk.ChangeState", file="ScheduledJobsPage.generated.cs"];
m51_0 [label="Entry HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27", cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="ScheduledJobsPage.generated.cs"];
m51_1 [label="context == null", span="29-29", cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="ScheduledJobsPage.generated.cs"];
m51_2 [label="throw new ArgumentNullException(''context'');", span="29-29", cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="ScheduledJobsPage.generated.cs"];
m51_3 [label="_context = context", span="31-31", cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="ScheduledJobsPage.generated.cs"];
m51_4 [label="Exit HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27", cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="ScheduledJobsPage.generated.cs"];
m51_5 [label="_context.Storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="33-33", cluster="Hangfire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="ScheduledJobsPage.generated.cs"];
m51_11 [label="Entry HangFire.JobStorage.GetConnection()", span="56-56", cluster="HangFire.JobStorage.GetConnection()", file="ScheduledJobsPage.generated.cs"];
m51_12 [label="Entry HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="30-30", cluster="HangFire.Storage.IStorageConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="ScheduledJobsPage.generated.cs"];
m51_128 [label="Entry Unk.InSequence", span="", cluster="Unk.InSequence", file="ScheduledJobsPage.generated.cs"];
m51_33 [label="Entry Unk.FetchNextJob", span="", cluster="Unk.FetchNextJob", file="ScheduledJobsPage.generated.cs"];
m51_87 [label="Entry Unk.Dispose", span="", cluster="Unk.Dispose", file="ScheduledJobsPage.generated.cs"];
m51_258 [label="Entry Unk.Throws", span="", cluster="Unk.Throws", file="ScheduledJobsPage.generated.cs"];
m51_49 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", span="54-54", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="ScheduledJobsPage.generated.cs"];
m51_50 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(null, _performer.Object, _stateChanger.Object))", span="56-57", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="ScheduledJobsPage.generated.cs"];
m51_51 [label="Assert.Equal(''queues'', exception.ParamName)", span="59-59", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="ScheduledJobsPage.generated.cs"];
m51_52 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", span="54-54", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenQueuesCollectionNull()", file="ScheduledJobsPage.generated.cs"];
m51_72 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="81-81", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="ScheduledJobsPage.generated.cs"];
m51_73 [label="var worker = CreateWorker()", span="83-83", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="ScheduledJobsPage.generated.cs"];
m51_74 [label="worker.Execute(_context.Object)", span="85-85", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="ScheduledJobsPage.generated.cs"];
m51_75 [label="_context.Storage.Verify(x => x.GetConnection(), Times.Once)", span="87-87", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="ScheduledJobsPage.generated.cs"];
m51_76 [label="_connection.Verify(x => x.Dispose(), Times.Once)", span="88-88", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="ScheduledJobsPage.generated.cs"];
m51_77 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="81-81", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="ScheduledJobsPage.generated.cs"];
m51_141 [label="Entry Unk.Perform", span="", cluster="Unk.Perform", file="ScheduledJobsPage.generated.cs"];
m51_285 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="286-286", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="ScheduledJobsPage.generated.cs"];
m51_286 [label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData { LoadException = new JobLoadException(''asd'', new Exception()) })", span="289-290", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="ScheduledJobsPage.generated.cs"];
m51_287 [label="var worker = CreateWorker()", span="292-292", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="ScheduledJobsPage.generated.cs"];
m51_288 [label="worker.Execute(_context.Object)", span="295-295", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="ScheduledJobsPage.generated.cs"];
m51_289 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is FailedState)))", span="298-299", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="ScheduledJobsPage.generated.cs"];
m51_290 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="286-286", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="ScheduledJobsPage.generated.cs"];
m51_100 [label="Entry Unk.RemoveFromQueue", span="", cluster="Unk.RemoveFromQueue", file="ScheduledJobsPage.generated.cs"];
m51_21 [label="IState state", span="77-77", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_299 [label="Entry lambda expression", span="298-299", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_23 [label="jobData.EnsureLoaded()", span="82-82", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_27 [label=JobPerformanceException, span="90-90", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_30 [label="state = new FailedState(ex)\r\n                {\r\n                    Reason = ''Internal HangFire Server exception occurred. Please, report it to HangFire developers.''\r\n                }", span="99-102", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs", color=green, community=0];
m51_42 [label="HangFire.Server.Worker", span="", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_46 [label="Entry lambda expression", span="50-50", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_24 [label="var performContext = new PerformContext(_context, connection, jobId, jobData.Job)", span="84-84", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_25 [label="process.Run(performContext, jobData.Job)", span="86-86", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_28 [label="state = new FailedState(ex.InnerException)\r\n                {\r\n                    Reason = ex.Message\r\n                }", span="92-95", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_29 [label=Exception, span="97-97", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_31 [label="stateMachine.TryToChangeState(jobId, state, new[] { ProcessingState.StateName })", span="107-107", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_32 [label="Exit HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", span="56-56", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_43 [label="x.ChangeState(It.IsAny<StateChangeContext>())", span="49-49", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_44 [label="Exit lambda expression", span="49-49", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_47 [label="ctx.NewState", span="50-50", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_48 [label="Exit lambda expression", span="50-50", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_54 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_55 [label="new Worker(null, _performer.Object, _stateChanger.Object)", span="57-57", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_56 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_62 [label="Entry lambda expression", span="66-66", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_63 [label="new Worker(_queues, null, _stateChanger.Object)", span="66-66", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_64 [label="Exit lambda expression", span="66-66", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_69 [label="Entry lambda expression", span="75-75", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_70 [label="new Worker(_queues, _performer.Object, null)", span="75-75", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_71 [label="Exit lambda expression", span="75-75", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_81 [label="Entry lambda expression", span="87-87", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_84 [label="Entry lambda expression", span="88-88", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_82 [label="x.GetConnection()", span="87-87", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_83 [label="Exit lambda expression", span="87-87", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_85 [label="x.Dispose()", span="88-88", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_86 [label="Exit lambda expression", span="88-88", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_94 [label="Entry lambda expression", span="99-99", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_97 [label="Entry lambda expression", span="102-102", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_95 [label="x.FetchNextJob(_queues, _context.CancellationTokenSource.Token)", span="99-99", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_96 [label="Exit lambda expression", span="99-99", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_98 [label="x.RemoveFromQueue()", span="102-102", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_99 [label="Exit lambda expression", span="102-102", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_108 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_112 [label="worker.Execute(_context.Object)", span="115-115", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_111 [label="Entry lambda expression", span="115-115", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_114 [label="Entry lambda expression", span="117-117", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_117 [label="Entry lambda expression", span="118-118", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_109 [label="x.ChangeState(It.IsAny<StateChangeContext>())", span="109-109", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_110 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_113 [label="Exit lambda expression", span="115-115", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_115 [label="x.RemoveFromQueue()", span="117-117", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_116 [label="Exit lambda expression", span="117-117", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_118 [label="x.Requeue()", span="118-118", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_119 [label="Exit lambda expression", span="118-118", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_129 [label="Entry lambda expression", span="126-126", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_135 [label="Entry lambda expression", span="128-128", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_138 [label="Entry lambda expression", span="130-130", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_142 [label="Entry lambda expression", span="134-134", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_148 [label="Entry lambda expression", span="136-136", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_130 [label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is ProcessingState))", span="126-126", cluster="lambda expression", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_131 [label="Exit lambda expression", span="126-126", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_132 [label="Entry lambda expression", span="126-126", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_133 [label="ctx.BackgroundJobId == JobId && ctx.NewState is ProcessingState", span="126-126", cluster="lambda expression", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_134 [label="Exit lambda expression", span="126-126", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_136 [label="ctx.NewState", span="128-128", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_137 [label="Exit lambda expression", span="128-128", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_139 [label="x.Perform(It.IsAny<PerformContext>())", span="130-130", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_140 [label="Exit lambda expression", span="130-130", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_143 [label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is SucceededState))", span="134-134", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_144 [label="Exit lambda expression", span="134-134", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_145 [label="Entry lambda expression", span="134-134", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_146 [label="ctx.BackgroundJobId == JobId && ctx.NewState is SucceededState", span="134-134", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_147 [label="Exit lambda expression", span="134-134", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_149 [label="context.NewState", span="136-136", cluster="lambda expression", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_150 [label="Exit lambda expression", span="136-136", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_156 [label="Entry lambda expression", span="153-154", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_157 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId)))", span="153-154", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_158 [label="Exit lambda expression", span="153-154", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_159 [label="Entry lambda expression", span="153-154", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_160 [label="ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId)", span="154-154", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_161 [label="Exit lambda expression", span="153-154", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_167 [label="Entry lambda expression", span="164-167", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_168 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName))", span="164-167", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_169 [label="Exit lambda expression", span="164-167", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_170 [label="Entry lambda expression", span="164-167", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_171 [label="ctx.NewState is ProcessingState &&\r\n                ctx.ExpectedStates.ElementAt(0) == EnqueuedState.StateName &&\r\n                ctx.ExpectedStates.ElementAt(1) == ProcessingState.StateName", span="165-167", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_172 [label="Exit lambda expression", span="164-167", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_180 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_186 [label="Entry lambda expression", span="184-184", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_181 [label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is ProcessingState))", span="175-175", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_182 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_183 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_184 [label="ctx.NewState is ProcessingState", span="175-175", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_185 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_187 [label="x.Perform(It.IsAny<PerformContext>())", span="184-184", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_188 [label="Exit lambda expression", span="184-184", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_194 [label="Entry lambda expression", span="194-194", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_195 [label="x.Perform(It.IsNotNull<PerformContext>())", span="194-194", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_196 [label="Exit lambda expression", span="194-194", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_204 [label="Entry lambda expression", span="201-201", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_208 [label="worker.Execute(_context.Object)", span="207-207", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_207 [label="Entry lambda expression", span="207-207", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_210 [label="Entry lambda expression", span="211-211", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_216 [label="Entry lambda expression", span="213-213", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_205 [label="x.Perform(It.IsAny<PerformContext>())", span="201-201", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_206 [label="Exit lambda expression", span="201-201", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_209 [label="Exit lambda expression", span="207-207", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_211 [label="x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState))", span="211-211", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_212 [label="Exit lambda expression", span="211-211", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_213 [label="Entry lambda expression", span="211-211", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_214 [label="ctx.NewState is FailedState", span="211-211", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_215 [label="Exit lambda expression", span="211-211", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_217 [label="x.Requeue()", span="213-213", cluster="lambda expression", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_218 [label="Exit lambda expression", span="213-213", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_227 [label="Entry lambda expression", span="220-220", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_231 [label="worker.Execute(_context.Object)", span="226-226", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_230 [label="Entry lambda expression", span="226-226", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_233 [label="Entry lambda expression", span="228-228", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_236 [label="Entry lambda expression", span="229-229", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_228 [label="x.Perform(It.IsAny<PerformContext>())", span="220-220", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_229 [label="Exit lambda expression", span="220-220", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_232 [label="Exit lambda expression", span="226-226", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_234 [label="x.RemoveFromQueue()", span="228-228", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_235 [label="Exit lambda expression", span="228-228", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_237 [label="x.Requeue()", span="229-229", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_238 [label="Exit lambda expression", span="229-229", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_244 [label="Entry lambda expression", span="239-241", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_245 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName))", span="239-241", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_246 [label="Exit lambda expression", span="239-241", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_247 [label="Entry lambda expression", span="239-241", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_248 [label="ctx.NewState is SucceededState &&\r\n                ctx.ExpectedStates.ElementAt(0) == ProcessingState.StateName", span="240-241", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_249 [label="Exit lambda expression", span="239-241", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_263 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception))", span="259-262", cluster="lambda expression", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_266 [label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState &&\r\n                ((FailedState) ctx.NewState).Exception == exception", span="260-262", cluster="lambda expression", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_259 [label="Entry lambda expression", span="250-250", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_262 [label="Entry lambda expression", span="259-262", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_260 [label="x.Perform(It.IsAny<PerformContext>())", span="250-250", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_261 [label="Exit lambda expression", span="250-250", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_264 [label="Exit lambda expression", span="259-262", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_265 [label="Entry lambda expression", span="259-262", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_267 [label="Exit lambda expression", span="259-262", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_276 [label="Entry lambda expression", span="271-271", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_279 [label="Entry lambda expression", span="280-282", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_277 [label="x.Perform(It.IsAny<PerformContext>())", span="271-271", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_278 [label="Exit lambda expression", span="271-271", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_280 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState))", span="280-282", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_281 [label="Exit lambda expression", span="280-282", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_282 [label="Entry lambda expression", span="280-282", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_283 [label="ctx.BackgroundJobId == JobId &&\r\n                ctx.NewState is FailedState", span="281-282", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_284 [label="Exit lambda expression", span="280-282", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_293 [label="Entry lambda expression", span="289-289", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_296 [label="Entry lambda expression", span="298-299", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_294 [label="x.GetJobData(JobId)", span="289-289", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_295 [label="Exit lambda expression", span="289-289", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_297 [label="x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is FailedState))", span="298-299", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_298 [label="Exit lambda expression", span="298-299", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_300 [label="ctx.NewState is FailedState", span="299-299", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_301 [label="Exit lambda expression", span="298-299", cluster="lambda expression", file="ScheduledJobsPage.generated.cs"];
m51_57 [label="Entry Worker.cstr", span="", cluster="Worker.cstr", file="ScheduledJobsPage.generated.cs"];
m51_19 [label="!stateMachine.TryToChangeState(\r\n                jobId,\r\n                processingState,\r\n                new[] { EnqueuedState.StateName, ProcessingState.StateName })", span="64-67", cluster="HangFire.Server.Worker.ProcessJob(string, HangFire.Storage.IStorageConnection, HangFire.Server.IJobPerformanceProcess)", file="ScheduledJobsPage.generated.cs"];
m51_151 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="147-147", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_152 [label="var worker = CreateWorker()", span="149-149", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_153 [label="worker.Execute(_context.Object)", span="151-151", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_154 [label="_stateChanger.Verify(x => x.ChangeState(It.Is<StateChangeContext>(ctx =>\r\n                ctx.NewState is ProcessingState && (((ProcessingState) ctx.NewState).ServerId == _context.ServerId))))", span="153-154", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_155 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="147-147", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="ScheduledJobsPage.generated.cs"];
m51_80 [label="Entry Unk.Verify", span="", cluster="Unk.Verify", file="ScheduledJobsPage.generated.cs"];
m51_65 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", span="72-72", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="ScheduledJobsPage.generated.cs"];
m51_66 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(_queues, _performer.Object, null))", span="74-75", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="ScheduledJobsPage.generated.cs"];
m51_67 [label="Assert.Equal(''stateChanger'', exception.ParamName)", span="77-77", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="ScheduledJobsPage.generated.cs"];
m51_68 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", span="72-72", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenStateChangeProcess_IsNull()", file="ScheduledJobsPage.generated.cs"];
m51_121 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="122-122", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="ScheduledJobsPage.generated.cs"];
m51_122 [label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is ProcessingState)))\r\n                .InSequence()\r\n                .Returns<StateChangeContext>(ctx => ctx.NewState)", span="125-128", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_123 [label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .InSequence()", span="130-131", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="ScheduledJobsPage.generated.cs"];
m51_124 [label="_stateChanger\r\n                .Setup(x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.BackgroundJobId == JobId && ctx.NewState is SucceededState)))\r\n                .InSequence()\r\n                .Returns<StateChangeContext>(context => context.NewState)", span="133-136", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_125 [label="var worker = CreateWorker()", span="138-138", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="ScheduledJobsPage.generated.cs"];
m51_126 [label="worker.Execute(_context.Object)", span="141-141", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="ScheduledJobsPage.generated.cs"];
m51_127 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="122-122", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="ScheduledJobsPage.generated.cs"];
m51_88 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="92-92", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="ScheduledJobsPage.generated.cs"];
m51_89 [label="var worker = CreateWorker()", span="94-94", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="ScheduledJobsPage.generated.cs"];
m51_90 [label="worker.Execute(_context.Object)", span="96-96", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="ScheduledJobsPage.generated.cs"];
m51_91 [label="_connection.Verify(\r\n                x => x.FetchNextJob(_queues, _context.CancellationTokenSource.Token),\r\n                Times.Once)", span="98-100", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_92 [label="_fetchedJob.Verify(x => x.RemoveFromQueue())", span="102-102", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="ScheduledJobsPage.generated.cs"];
m51_93 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", span="92-92", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndRemovesItFromQueue()", file="ScheduledJobsPage.generated.cs"];
m51_17 [label="Entry Unk.Returns", span="", cluster="Unk.Returns", file="ScheduledJobsPage.generated.cs"];
m51_20 [label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="233-233", cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="ScheduledJobsPage.generated.cs"];
m51_291 [label="Entry Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", span="31-31", cluster="Hangfire.Common.JobLoadException.JobLoadException(string, System.Exception)", file="ScheduledJobsPage.generated.cs"];
m51_275 [label="Entry Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22", cluster="Hangfire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="ScheduledJobsPage.generated.cs"];
m51_197 [label="Entry Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="198-198", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="ScheduledJobsPage.generated.cs"];
m51_198 [label="_performer.Setup(x => x.Perform(It.IsAny<PerformContext>()))\r\n                .Throws<OperationCanceledException>()", span="201-202", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="ScheduledJobsPage.generated.cs"];
m51_199 [label="var worker = CreateWorker()", span="204-204", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_200 [label="Assert.Throws<OperationCanceledException>(() => worker.Execute(_context.Object))", span="207-207", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="ScheduledJobsPage.generated.cs"];
m51_201 [label="_stateChanger.Verify(\r\n                x => x.ChangeState(It.Is<StateChangeContext>(ctx => ctx.NewState is FailedState)),\r\n                Times.Never)", span="210-212", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_202 [label="_fetchedJob.Verify(x => x.Requeue())", span="213-213", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", color=red, community=0, file="ScheduledJobsPage.generated.cs"];
m51_203 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", span="198-198", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Execute_DoesNotMoveAJob_ToTheFailedState_ButRequeuesIt_WhenProcessThrowsOperationCanceled()", file="ScheduledJobsPage.generated.cs"];
m51_304 [label="Exit Hangfire.Core.Tests.Server.WorkerFacts.Method()", span="307-307", cluster="Hangfire.Core.Tests.Server.WorkerFacts.Method()", file="ScheduledJobsPage.generated.cs"];
m51_79 [label="Entry Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", span="76-76", cluster="Hangfire.Server.Worker.Execute(Hangfire.Server.BackgroundProcessContext)", file="ScheduledJobsPage.generated.cs"];
m51_305 [label="Hangfire.Core.Tests.Server.WorkerFacts", span="", file="ScheduledJobsPage.generated.cs"];
m51_306 [label=worker, span="", file="ScheduledJobsPage.generated.cs"];
m51_307 [label=worker, span="", file="ScheduledJobsPage.generated.cs"];
m51_308 [label=worker, span="", file="ScheduledJobsPage.generated.cs"];
m51_309 [label=exception, span="", file="ScheduledJobsPage.generated.cs"];
m52_3 [label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="36-36", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="ScheduledState.cs"];
m52_4 [label="connection == null", span="38-38", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="ScheduledState.cs"];
m52_6 [label="job == null", span="39-39", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="ScheduledState.cs"];
m52_8 [label="Connection = connection", span="41-41", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="ScheduledState.cs"];
m52_9 [label="Job = job", span="42-42", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="ScheduledState.cs"];
m52_10 [label="InitialState = initialState", span="43-43", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", color=red, community=0, file="ScheduledState.cs"];
m52_5 [label="throw new ArgumentNullException(''connection'');", span="38-38", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="ScheduledState.cs"];
m52_7 [label="throw new ArgumentNullException(''job'');", span="39-39", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="ScheduledState.cs"];
m52_11 [label="Items = new Dictionary<string, object>()", span="45-45", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="ScheduledState.cs"];
m52_12 [label="Exit Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", span="36-36", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Storage.IStorageConnection, Hangfire.Common.Job, Hangfire.States.IState)", file="ScheduledState.cs"];
m52_14 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ScheduledState.cs"];
m52_0 [label="Entry Hangfire.Client.CreateContext.CreateContext(Hangfire.Client.CreateContext)", span="30-30", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Client.CreateContext)", file="ScheduledState.cs"];
m52_1 [label="Items = context.Items", span="33-33", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Client.CreateContext)", file="ScheduledState.cs"];
m52_2 [label="Exit Hangfire.Client.CreateContext.CreateContext(Hangfire.Client.CreateContext)", span="30-30", cluster="Hangfire.Client.CreateContext.CreateContext(Hangfire.Client.CreateContext)", file="ScheduledState.cs"];
m52_15 [label="Hangfire.Client.CreateContext", span="", file="ScheduledState.cs"];
m53_58 [label="Entry HangFire.Web.RazorPage.Write(object)", span="76-76", cluster="HangFire.Web.RazorPage.Write(object)", file="ScheduledState.feature.cs"];
m53_62 [label="Entry HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.JobMethod)", span="34-34", cluster="HangFire.Web.HtmlHelper.DisplayMethod(HangFire.Common.JobMethod)", file="ScheduledState.feature.cs"];
m53_61 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="ScheduledState.feature.cs"];
m53_52 [label="Entry HangFire.Web.Pager.Pager(int, int, long)", span="29-29", cluster="HangFire.Web.Pager.Pager(int, int, long)", file="ScheduledState.feature.cs"];
m53_50 [label="Entry Unk.TryParse", span="", cluster="Unk.TryParse", file="ScheduledState.feature.cs"];
m53_45 [label="Entry HangFire.Web.RazorPage.WriteLiteral(string)", span="69-69", cluster="HangFire.Web.RazorPage.WriteLiteral(string)", file="ScheduledState.feature.cs"];
m53_0 [label="Entry HangFire.Web.Pages.DequeuedJobsPage.Execute()", span="62-62", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_1 [label="WriteLiteral(''\r\n'')", span="66-66", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_2 [label="Layout = new LayoutPage\r\n        {\r\n            Title = Queue.ToUpperInvariant(),\r\n            Subtitle = ''Dequeued jobs'',\r\n            Breadcrumbs = new Dictionary<string, string>\r\n                {\r\n                    { ''Queues'', Request.LinkTo(''/queues'') },\r\n                    { Queue.ToUpperInvariant(), Request.LinkTo(''/queues/'' + Queue) }\r\n                },\r\n            BreadcrumbsTitle = ''Dequeued jobs'',    \r\n        }", span="80-90", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", color=red, community=0, file="ScheduledState.feature.cs"];
m53_3 [label="int from, perPage", span="92-92", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_4 [label="int.TryParse(Request.QueryString[''from''], out from)", span="94-94", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_5 [label="int.TryParse(Request.QueryString[''count''], out perPage)", span="95-95", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_9 [label="pager = new Pager(from, perPage, monitor.DequeuedCount(Queue))\r\n        {\r\n            BasePageUrl = Request.LinkTo(''/queues/dequeued/'' + Queue)\r\n        }", span="102-105", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", color=red, community=0, file="ScheduledState.feature.cs"];
m53_6 [label="Pager pager", span="97-97", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_7 [label="JobList<DequeuedJobDto> dequeuedJobs", span="98-98", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_8 [label="var monitor = JobStorage.Current.GetMonitoringApi()", span="100-100", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_10 [label="dequeuedJobs = monitor\r\n            .DequeuedJobs(Queue, pager.FromRecord, pager.RecordsPerPage)", span="107-108", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_12 [label="pager.TotalPageCount == 0", span="120-120", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", color=red, community=0, file="ScheduledState.feature.cs"];
m53_14 [label="Write(RenderPartial(new PerPageSelector(pager)))", span="140-140", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_43 [label="Write(RenderPartial(new Paginator(pager)))", span="331-331", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_11 [label="WriteLiteral(''\r\n'')", span="115-115", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_16 [label=dequeuedJobs, span="169-169", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_13 [label="WriteLiteral(''    <div class=\''alert alert-info\''>\r\n        The queue is empty.\r\n    </div>\r\n'')", span="126-126", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_15 [label="WriteLiteral(@''    <table class=''''table''''>\r\n        <thead>\r\n            <tr>\r\n                <th>Id</th>\r\n                <th>State</th>\r\n                <th>Job type</th>\r\n                <th>Created</th>\r\n                <th>Fetched</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n'')", span="153-164", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", color=red, community=0, file="ScheduledState.feature.cs"];
m53_17 [label="WriteLiteral(''                <tr>\r\n                    <td>\r\n                        <a href=\'''' +\r\n'''')", span="175-176", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_42 [label="WriteLiteral(''        </tbody>\r\n    </table>\r\n'')", span="319-319", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_18 [label="Write(Request.LinkTo(''/job/'' + job.Key))", span="181-181", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_19 [label="WriteLiteral(''\''>'')", span="186-186", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_20 [label="Write(HtmlHelper.JobId(job.Key))", span="191-191", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_21 [label="WriteLiteral(''</a>\r\n                    </td>\r\n                    <td>\r\n                      '' +\r\n''  <span class=\''label label-default\'' style=\'''')", span="196-197", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_22 [label="Write(JobHistoryRenderer.ForegroundStateColors.ContainsKey(job.Value.State) ? String.Format(''background-color: {0};'', JobHistoryRenderer.ForegroundStateColors[job.Value.State]) : null)", span="202-202", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_23 [label="WriteLiteral(''\''>\r\n                            '')", span="207-207", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_24 [label="Write(job.Value.State)", span="212-212", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_25 [label="WriteLiteral(''</span>\r\n                    </td>\r\n                    <td>'')", span="217-217", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_26 [label="Write(HtmlHelper.DisplayMethod(job.Value.Method))", span="222-222", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_27 [label="WriteLiteral(''</td>\r\n                    <td>\r\n'')", span="227-227", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_28 [label="job.Value.CreatedAt.HasValue", span="232-232", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_29 [label="WriteLiteral(''                            <span data-moment=\'''')", span="238-238", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_34 [label="WriteLiteral(''                    </td>\r\n                    <td>\r\n'')", span="268-268", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_30 [label="Write(JobHelper.ToStringTimestamp(job.Value.CreatedAt.Value))", span="243-243", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_35 [label="job.Value.FetchedAt.HasValue", span="273-273", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_31 [label="WriteLiteral(''\''>\r\n                                '')", span="248-248", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_32 [label="Write(job.Value.CreatedAt)", span="253-253", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_33 [label="WriteLiteral('' \r\n                            </span>\r\n'')", span="258-258", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_36 [label="WriteLiteral(''                            <span data-moment=\'''')", span="279-279", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_41 [label="WriteLiteral(''                    </td>\r\n                </tr>\r\n'')", span="309-309", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_37 [label="Write(JobHelper.ToStringTimestamp(job.Value.FetchedAt.Value))", span="284-284", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_38 [label="WriteLiteral(''\''>\r\n                                '')", span="289-289", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_39 [label="Write(job.Value.FetchedAt)", span="294-294", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_40 [label="WriteLiteral(''\r\n                            </span>\r\n'')", span="299-299", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_44 [label="Exit HangFire.Web.Pages.DequeuedJobsPage.Execute()", span="62-62", cluster="HangFire.Web.Pages.DequeuedJobsPage.Execute()", file="ScheduledState.feature.cs"];
m53_47 [label="Entry string.ToUpperInvariant()", span="0-0", cluster="string.ToUpperInvariant()", file="ScheduledState.feature.cs"];
m53_56 [label="Entry HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", span="89-89", cluster="HangFire.Web.RazorPage.RenderPartial(HangFire.Web.RazorPage)", file="ScheduledState.feature.cs"];
m53_48 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ScheduledState.feature.cs"];
m53_54 [label="Entry HangFire.Storage.Monitoring.IMonitoringApi.DequeuedJobs(string, int, int)", span="13-13", cluster="HangFire.Storage.Monitoring.IMonitoringApi.DequeuedJobs(string, int, int)", file="ScheduledState.feature.cs"];
m53_53 [label="Entry HangFire.Storage.Monitoring.IMonitoringApi.DequeuedCount(string)", span="22-22", cluster="HangFire.Storage.Monitoring.IMonitoringApi.DequeuedCount(string)", file="ScheduledState.feature.cs"];
m53_55 [label="Entry HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.PerPageSelector.PerPageSelector(HangFire.Web.Pager)", file="ScheduledState.feature.cs"];
m53_60 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="ScheduledState.feature.cs"];
m53_63 [label="Entry HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", span="46-46", cluster="HangFire.Common.JobHelper.ToStringTimestamp(System.DateTime)", file="ScheduledState.feature.cs"];
m53_57 [label="Entry Unk.Write", span="", cluster="Unk.Write", file="ScheduledState.feature.cs"];
m53_59 [label="Entry HangFire.Web.HtmlHelper.JobId(string, bool)", span="55-55", cluster="HangFire.Web.HtmlHelper.JobId(string, bool)", file="ScheduledState.feature.cs"];
m53_51 [label="Entry HangFire.JobStorage.GetMonitoringApi()", span="43-43", cluster="HangFire.JobStorage.GetMonitoringApi()", file="ScheduledState.feature.cs"];
m53_46 [label="Entry HangFire.Web.Pages.LayoutPage.LayoutPage()", span="4-4", cluster="HangFire.Web.Pages.LayoutPage.LayoutPage()", file="ScheduledState.feature.cs"];
m53_49 [label="Entry HttpRequestBase.LinkTo(string)", span="24-24", cluster="HttpRequestBase.LinkTo(string)", file="ScheduledState.feature.cs"];
m53_64 [label="Entry HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", span="6-6", cluster="HangFire.Web.Pages.Paginator.Paginator(HangFire.Web.Pager)", file="ScheduledState.feature.cs"];
m53_65 [label="HangFire.Web.Pages.DequeuedJobsPage", span="", file="ScheduledState.feature.cs"];
m56_9 [label="Entry Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="42-42", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_10 [label="job == null", span="47-47", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_12 [label="parameters == null", span="48-48", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_14 [label="state == null", span="49-49", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_17 [label="var jobId = _connection.CreateExpiredJob(\r\n                job,\r\n                parameters,\r\n                createdAt,\r\n                TimeSpan.FromHours(1))", span="52-56", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_18 [label="var context = new StateContext(jobId, job, createdAt)", span="58-58", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_19 [label="ChangeState(context, state, null)", span="59-59", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_11 [label="throw new ArgumentNullException(''job'');", span="47-47", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_13 [label="throw new ArgumentNullException(''parameters'');", span="48-48", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_15 [label="throw new ArgumentNullException(''state'');", span="49-49", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_16 [label="var createdAt = DateTime.UtcNow", span="51-51", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_20 [label="return jobId;", span="61-61", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_21 [label="Exit Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="42-42", cluster="Hangfire.States.StateMachine.CreateJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="SchedulePollerSteps.cs"];
m56_54 [label="Entry Hangfire.States.FailedState.FailedState(System.Exception)", span="26-26", cluster="Hangfire.States.FailedState.FailedState(System.Exception)", file="SchedulePollerSteps.cs"];
m56_52 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="SchedulePollerSteps.cs"];
m56_67 [label="Entry Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", span="30-30", cluster="Hangfire.States.ElectStateContext.ElectStateContext(Hangfire.States.StateContext, Hangfire.Storage.IStorageConnection, Hangfire.States.IStateMachine, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_68 [label="Entry Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", span="22-22", cluster="Hangfire.States.IStateChangeProcess.ElectState(Hangfire.Storage.IStorageConnection, Hangfire.States.ElectStateContext)", file="SchedulePollerSteps.cs"];
m56_22 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="SchedulePollerSteps.cs"];
m56_24 [label="Entry Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime)", span="24-24", cluster="Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime)", file="SchedulePollerSteps.cs"];
m56_55 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="SchedulePollerSteps.cs"];
m56_23 [label="Entry Hangfire.Storage.IStorageConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="30-30", cluster="Hangfire.Storage.IStorageConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SchedulePollerSteps.cs"];
m56_50 [label="Entry Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)", span="25-25", cluster="Hangfire.Storage.IStorageConnection.AcquireDistributedJobLock(string, System.TimeSpan)", file="SchedulePollerSteps.cs"];
m56_69 [label="Entry Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", span="24-24", cluster="Hangfire.States.ApplyStateContext.ApplyStateContext(Hangfire.States.StateContext, Hangfire.States.IState, string, System.Collections.Generic.IEnumerable<Hangfire.States.IState>)", file="SchedulePollerSteps.cs"];
m56_77 [label="Entry Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", span="23-23", cluster="Hangfire.States.IStateChangeProcess.ApplyState(Hangfire.Storage.IWriteOnlyTransaction, Hangfire.States.ApplyStateContext, bool)", file="SchedulePollerSteps.cs"];
m56_76 [label="Entry Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", span="27-27", cluster="Hangfire.Storage.IStorageConnection.CreateWriteTransaction()", file="SchedulePollerSteps.cs"];
m56_51 [label="Entry Hangfire.Storage.IStorageConnection.GetJobData(string)", span="42-42", cluster="Hangfire.Storage.IStorageConnection.GetJobData(string)", file="SchedulePollerSteps.cs"];
m56_26 [label="Entry Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="64-64", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_27 [label="jobId == null", span="67-67", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_29 [label="toState == null", span="68-68", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_31 [label="fromStates != null && fromStates.Length == 0", span="69-69", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_33 [label="_connection.AcquireDistributedJobLock(jobId, JobLockTimeout)", span="80-80", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_34 [label="var jobData = _connection.GetJobData(jobId)", span="82-82", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_37 [label="fromStates != null && !fromStates.Contains(jobData.State, StringComparer.OrdinalIgnoreCase)", span="91-91", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_42 [label="!toState.IgnoreJobLoadException", span="109-109", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_43 [label="toState = new FailedState(ex.InnerException)\r\n                        {\r\n                            Reason = String.Format(\r\n                                ''Can not change the state of a job to '{0}': target method was not found.'',\r\n                                toState.Name)\r\n                        }", span="111-116", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_45 [label="var context = new StateContext(jobId, jobData.Job, jobData.CreatedAt)", span="122-122", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_46 [label="var stateChanged = ChangeState(context, toState, jobData.State)", span="123-123", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_28 [label="throw new ArgumentNullException(''jobId'');", span="67-67", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_30 [label="throw new ArgumentNullException(''toState'');", span="68-68", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_32 [label="throw new ArgumentException(''From states array should be null or non-empty.'', ''fromStates'');", span="71-71", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_35 [label="jobData == null", span="84-84", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_40 [label="jobData.EnsureLoaded()", span="100-100", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_36 [label="return false;", span="88-88", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_38 [label="return false;", span="93-93", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_39 [label="bool loadSucceeded = true", span="96-96", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_47 [label="return loadSucceeded && stateChanged;", span="125-125", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_41 [label=JobLoadException, span="102-102", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_44 [label="loadSucceeded = false", span="118-118", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_48 [label="Exit Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", span="64-64", cluster="Hangfire.States.StateMachine.ChangeState(string, Hangfire.States.IState, string[])", file="SchedulePollerSteps.cs"];
m56_78 [label="Entry Hangfire.Storage.IWriteOnlyTransaction.Commit()", span="54-54", cluster="Hangfire.Storage.IWriteOnlyTransaction.Commit()", file="SchedulePollerSteps.cs"];
m56_25 [label="Entry Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", span="129-129", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_56 [label="var electStateContext = new ElectStateContext(context, _connection, this, toState, oldStateName)", span="133-133", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_58 [label="var applyStateContext = new ApplyStateContext(\r\n                    context,\r\n                    electStateContext.CandidateState,\r\n                    oldStateName,\r\n                    electStateContext.TraversedStates)", span="136-140", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_63 [label="var applyStateContext = new ApplyStateContext(context, failedState, oldStateName, Enumerable.Empty<IState>())", span="154-154", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_57 [label="_stateChangeProcess.ElectState(_connection, electStateContext)", span="134-134", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_59 [label="ApplyState(applyStateContext, true)", span="142-142", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_60 [label="return true;", span="145-145", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_61 [label=Exception, span="147-147", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_62 [label="var failedState = new FailedState(ex)\r\n                {\r\n                    Reason = ''An exception occurred during the transition of job's state''\r\n                }", span="149-152", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_64 [label="ApplyState(applyStateContext, false)", span="158-158", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_65 [label="return false;", span="161-161", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_66 [label="Exit Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", span="129-129", cluster="Hangfire.States.StateMachine.ChangeState(Hangfire.States.StateContext, Hangfire.States.IState, string)", file="SchedulePollerSteps.cs"];
m56_49 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="SchedulePollerSteps.cs"];
m56_0 [label="Entry Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", span="31-31", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="SchedulePollerSteps.cs"];
m56_1 [label="connection == null", span="33-33", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="SchedulePollerSteps.cs"];
m56_3 [label="stateChangeProcess == null", span="34-34", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="SchedulePollerSteps.cs"];
m56_5 [label="_connection = connection", span="36-36", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="SchedulePollerSteps.cs"];
m56_6 [label="_stateChangeProcess = stateChangeProcess", span="37-37", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="SchedulePollerSteps.cs"];
m56_2 [label="throw new ArgumentNullException(''connection'');", span="33-33", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="SchedulePollerSteps.cs"];
m56_4 [label="throw new ArgumentNullException(''stateChangeProcess'');", span="34-34", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="SchedulePollerSteps.cs"];
m56_7 [label="Exit Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", span="31-31", cluster="Hangfire.States.StateMachine.StateMachine(Hangfire.Storage.IStorageConnection, Hangfire.States.IStateChangeProcess)", file="SchedulePollerSteps.cs"];
m56_70 [label="Entry Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", span="165-165", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="SchedulePollerSteps.cs"];
m56_72 [label="var transaction = _connection.CreateWriteTransaction()", span="167-167", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="SchedulePollerSteps.cs"];
m56_73 [label="_stateChangeProcess.ApplyState(transaction, context, useFilters)", span="169-169", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="SchedulePollerSteps.cs"];
m56_74 [label="transaction.Commit()", span="171-171", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="SchedulePollerSteps.cs"];
m56_75 [label="Exit Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", span="165-165", cluster="Hangfire.States.StateMachine.ApplyState(Hangfire.States.ApplyStateContext, bool)", file="SchedulePollerSteps.cs"];
m56_53 [label="Entry Hangfire.Storage.JobData.EnsureLoaded()", span="29-29", cluster="Hangfire.Storage.JobData.EnsureLoaded()", file="SchedulePollerSteps.cs"];
m56_71 [label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0", cluster="System.Linq.Enumerable.Empty<TResult>()", file="SchedulePollerSteps.cs"];
m56_79 [label="Hangfire.States.StateMachine", span="", file="SchedulePollerSteps.cs"];
m57_10 [label="Entry HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", span="20-20", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_11 [label="path.Length == 0", span="22-22", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_19 [label="var match = Regex.Match(\r\n                    path,\r\n                    pattern,\r\n                    RegexOptions.CultureInvariant | RegexOptions.IgnoreCase | RegexOptions.Singleline)", span="33-36", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_12 [label="path = ''/''", span="22-22", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_13 [label=_dispatchers, span="24-24", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_14 [label="var pattern = dispatcher.Item1", span="26-26", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_22 [label="return null;", span="44-44", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_21 [label="return new Tuple<IRequestDispatcher, Match>(dispatcher.Item2, match);", span="40-40", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_15 [label="!pattern.StartsWith(''^'', StringComparison.OrdinalIgnoreCase)", span="28-28", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_16 [label="pattern = ''^'' + pattern", span="29-29", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_17 [label="!pattern.EndsWith(''$'', StringComparison.OrdinalIgnoreCase)", span="30-30", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_18 [label="pattern += ''$''", span="31-31", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_20 [label="match.Success", span="38-38", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_23 [label="Exit HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", span="20-20", cluster="HangFire.Dashboard.DashboardRouteCollection.FindDispatcher(string)", file="ServerFilters.feature.cs"];
m57_8 [label="Entry System.Tuple<T1, T2>.Tuple(T1, T2)", span="0-0", cluster="System.Tuple<T1, T2>.Tuple(T1, T2)", file="ServerFilters.feature.cs"];
m57_0 [label="Entry HangFire.Dashboard.DashboardRouteCollection.Add(string, HangFire.Dashboard.IRequestDispatcher)", span="12-12", cluster="HangFire.Dashboard.DashboardRouteCollection.Add(string, HangFire.Dashboard.IRequestDispatcher)", file="ServerFilters.feature.cs"];
m57_1 [label="pathTemplate == null", span="14-14", cluster="HangFire.Dashboard.DashboardRouteCollection.Add(string, HangFire.Dashboard.IRequestDispatcher)", file="ServerFilters.feature.cs"];
m57_3 [label="dispatcher == null", span="15-15", cluster="HangFire.Dashboard.DashboardRouteCollection.Add(string, HangFire.Dashboard.IRequestDispatcher)", file="ServerFilters.feature.cs"];
m57_5 [label="_dispatchers.Add(new Tuple<string, IRequestDispatcher>(pathTemplate, dispatcher))", span="17-17", cluster="HangFire.Dashboard.DashboardRouteCollection.Add(string, HangFire.Dashboard.IRequestDispatcher)", file="ServerFilters.feature.cs"];
m57_2 [label="throw new ArgumentNullException(''pathTemplate'');", span="14-14", cluster="HangFire.Dashboard.DashboardRouteCollection.Add(string, HangFire.Dashboard.IRequestDispatcher)", file="ServerFilters.feature.cs"];
m57_4 [label="throw new ArgumentNullException(''dispatcher'');", span="15-15", cluster="HangFire.Dashboard.DashboardRouteCollection.Add(string, HangFire.Dashboard.IRequestDispatcher)", file="ServerFilters.feature.cs"];
m57_6 [label="Exit HangFire.Dashboard.DashboardRouteCollection.Add(string, HangFire.Dashboard.IRequestDispatcher)", span="12-12", cluster="HangFire.Dashboard.DashboardRouteCollection.Add(string, HangFire.Dashboard.IRequestDispatcher)", file="ServerFilters.feature.cs"];
m57_9 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="ServerFilters.feature.cs"];
m57_25 [label="Entry string.EndsWith(string, System.StringComparison)", span="0-0", cluster="string.EndsWith(string, System.StringComparison)", file="ServerFilters.feature.cs"];
m57_26 [label="Entry System.Text.RegularExpressions.Regex.Match(string, string, System.Text.RegularExpressions.RegexOptions)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Match(string, string, System.Text.RegularExpressions.RegexOptions)", file="ServerFilters.feature.cs"];
m57_24 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)", file="ServerFilters.feature.cs"];
m57_27 [label="HangFire.Dashboard.DashboardRouteCollection", span="", file="ServerFilters.feature.cs"];
m58_103 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="151-151", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="ServerJobDescriptor.cs"];
m58_104 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue, FetchedAt)\r\nvalues (scope_identity(), @queue, @fetchedAt)''", span="153-157", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="ServerJobDescriptor.cs"];
m58_105 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    });\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotEmpty(payload.JobId);\r\n            })", span="160-180", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="ServerJobDescriptor.cs"];
m58_106 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", span="151-151", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchATimedOutJobs_FromTheSpecifiedQueue()", file="ServerJobDescriptor.cs"];
m58_101 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="ServerJobDescriptor.cs"];
m58_0 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="16-16", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="ServerJobDescriptor.cs"];
m58_2 [label="Assert.Equal(''connection'', exception.ParamName)", span="21-21", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", color=green, community=0, file="ServerJobDescriptor.cs"];
m58_1 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SqlServerJobQueue(null, new SqlServerStorageOptions()))", span="18-19", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="ServerJobDescriptor.cs"];
m58_3 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", span="16-16", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Ctor_ThrowsAnException_WhenConnectionIsNull()", file="ServerJobDescriptor.cs"];
m58_23 [label="return new JobPayload(job.Id.ToString(), queueName, invocationData)\r\n            {\r\n                Arguments = job.Arguments\r\n            };", span="86-89", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_33 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", span="295-295", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="ServerJobDescriptor.cs"];
m58_5 [label="SqlJob job = null", span="29-29", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_10 [label="var currentQueryIndex = 0", span="46-46", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_34 [label="Entry Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", span="43-43", cluster="Hangfire.SqlServer.SqlServerJobQueue.Dequeue(string[], System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_56 [label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0", cluster="System.Threading.CancellationTokenSource.Cancel()", file="ServerJobDescriptor.cs"];
m58_180 [label="Entry Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", span="37-37", cluster="Hangfire.SqlServer.Tests.ConnectionUtils.CreateConnection()", file="ServerJobDescriptor.cs"];
m58_29 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="ServerJobDescriptor.cs"];
m58_68 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(int)", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(int)", file="ServerJobDescriptor.cs"];
m58_139 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", span="243-243", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="ServerJobDescriptor.cs"];
m58_140 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="245-249", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="ServerJobDescriptor.cs"];
m58_141 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    });\r\n\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                var critical = (SqlServerFetchedJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(critical.JobId);\r\n                Assert.Equal(''critical'', critical.Queue);\r\n\r\n                var @default = (SqlServerFetchedJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                Assert.NotNull(@default.JobId);\r\n                Assert.Equal(''default'', @default.Queue);\r\n            })", span="251-276", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="ServerJobDescriptor.cs"];
m58_142 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", span="243-243", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_FromMultipleQueues()", file="ServerJobDescriptor.cs"];
m58_19 [label="return null;", span="77-77", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_30 [label="Entry lambda expression", span="41-41", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_4 [label="Entry HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", span="27-27", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_9 [label="var fetchQueries = new[] { fetchJobSql, fetchTimedOutJobSql }", span="45-45", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_11 [label="var idAndQueue = _connection.Query(\r\n                    fetchQueries[currentQueryIndex],\r\n                    new { queues = _queues, timeout = JobTimeOut.Negate().TotalSeconds })\r\n                    .SingleOrDefault()", span="50-53", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_12 [label="idAndQueue != null", span="55-55", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_13 [label="var parameters = new DynamicParameters()", span="62-62", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_14 [label="parameters.Add(''@id'', idAndQueue.JobId, dbType: DbType.Int32)", span="63-63", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_35 [label="Entry int.ToString()", span="0-0", cluster="int.ToString()", file="ServerJobDescriptor.cs"];
m58_36 [label="HangFire.SqlServer.SqlServerFetcher", span="", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="ServerJobDescriptor.cs"];
m58_37 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", span="48-48", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldThrowAnException_WhenQueuesCollectionIsEmpty()", file="ServerJobDescriptor.cs"];
m58_169 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)", file="ServerJobDescriptor.cs"];
m58_25 [label="var queue = CreateJobQueue(connection)", span="38-38", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_31 [label="queue.Dequeue(null, CreateTimingOutCancellationToken())", span="41-41", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_170 [label="Entry System.TimeSpan.FromSeconds(double)", span="0-0", cluster="System.TimeSpan.FromSeconds(double)", file="ServerJobDescriptor.cs"];
m58_20 [label="currentQueryIndex = (currentQueryIndex + 1) % fetchQueries.Length", span="81-81", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_21 [label="job == null", span="82-82", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_22 [label="var invocationData = JobHelper.FromJson<InvocationData>(job.InvocationData)", span="84-84", cluster="HangFire.SqlServer.SqlServerFetcher.DequeueJob(System.Threading.CancellationToken)", file="ServerJobDescriptor.cs"];
m58_26 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => queue.Dequeue(null, CreateTimingOutCancellationToken()))", span="40-41", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_84 [label="Entry Unk.Query", span="", cluster="Unk.Query", file="ServerJobDescriptor.cs"];
m58_181 [label="Entry System.Action<T>.Invoke(T)", span="0-0", cluster="System.Action<T>.Invoke(T)", file="ServerJobDescriptor.cs"];
m58_164 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="ServerJobDescriptor.cs"];
m58_176 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", span="308-308", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="ServerJobDescriptor.cs"];
m58_177 [label="var connection = ConnectionUtils.CreateConnection()", span="310-310", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="ServerJobDescriptor.cs"];
m58_178 [label="action(connection)", span="312-312", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="ServerJobDescriptor.cs"];
m58_179 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", span="308-308", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.UseConnection(System.Action<SqlConnection>)", file="ServerJobDescriptor.cs"];
m58_113 [label="Entry System.DateTime.AddDays(double)", span="0-0", cluster="System.DateTime.AddDays(double)", file="ServerJobDescriptor.cs"];
m58_165 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="ServerJobDescriptor.cs"];
m58_7 [label="new SqlServerJobQueue(null, new SqlServerStorageOptions())", span="19-19", cluster="lambda expression", color=green, community=0, file="ServerJobDescriptor.cs"];
m58_6 [label="Entry lambda expression", span="19-19", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_8 [label="Exit lambda expression", span="19-19", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_15 [label="Entry lambda expression", span="28-28", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_17 [label="Exit lambda expression", span="28-28", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_16 [label="new SqlServerJobQueue(new Mock<IDbConnection>().Object, null)", span="28-28", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_18 [label="Entry SqlServerJobQueue.cstr", span="", cluster="SqlServerJobQueue.cstr", file="ServerJobDescriptor.cs"];
m58_24 [label="Entry lambda expression", span="36-44", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_28 [label="Exit lambda expression", span="36-44", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_100 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", file="ServerJobDescriptor.cs"];
m58_153 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", span="280-280", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="ServerJobDescriptor.cs"];
m58_154 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                queue.Enqueue(''default'', ''1'');\r\n\r\n                var record = connection.Query(''select * from HangFire.JobQueue'').Single();\r\n                Assert.Equal(''1'', record.JobId.ToString());\r\n                Assert.Equal(''default'', record.Queue);\r\n                Assert.Null(record.FetchedAt);\r\n            })", span="282-292", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="ServerJobDescriptor.cs"];
m58_155 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", span="280-280", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Enqueue_AddsAJobToTheQueue()", file="ServerJobDescriptor.cs"];
m58_126 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="ServerJobDescriptor.cs"];
m58_55 [label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0", cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="ServerJobDescriptor.cs"];
m58_86 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="117-117", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="ServerJobDescriptor.cs"];
m58_87 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="119-123", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="ServerJobDescriptor.cs"];
m58_88 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' });\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.NotNull(payload);\r\n\r\n                var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.NotNull(fetchedAt);\r\n                Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1));\r\n            })", span="126-147", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="ServerJobDescriptor.cs"];
m58_89 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", span="117-117", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldLeaveJobInTheQueue_ButSetItsFetchedAtValue()", file="ServerJobDescriptor.cs"];
m58_115 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="184-184", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="ServerJobDescriptor.cs"];
m58_116 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="186-190", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="ServerJobDescriptor.cs"];
m58_117 [label="UseConnection(connection =>\r\n            {\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    });\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single();\r\n\r\n                Assert.Null(otherJobFetchedAt);\r\n            })", span="193-215", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="ServerJobDescriptor.cs"];
m58_118 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", span="184-184", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldSetFetchedAt_OnlyForTheFetchedJob()", file="ServerJobDescriptor.cs"];
m58_156 [label="Entry lambda expression", span="282-292", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_27 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="ServerJobDescriptor.cs"];
m58_32 [label="Entry System.Threading.WaitHandle.WaitOne(System.TimeSpan)", span="0-0", cluster="System.Threading.WaitHandle.WaitOne(System.TimeSpan)", file="ServerJobDescriptor.cs"];
m58_38 [label="Entry lambda expression", span="50-58", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_39 [label="var queue = CreateJobQueue(connection)", span="52-52", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_40 [label="var exception = Assert.Throws<ArgumentException>(\r\n                    () => queue.Dequeue(new string[0], CreateTimingOutCancellationToken()))", span="54-55", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_44 [label="queue.Dequeue(new string[0], CreateTimingOutCancellationToken())", span="55-55", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_41 [label="Assert.Equal(''queues'', exception.ParamName)", span="57-57", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_43 [label="Entry lambda expression", span="55-55", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_42 [label="Exit lambda expression", span="50-58", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_45 [label="Exit lambda expression", span="55-55", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_49 [label="Entry lambda expression", span="64-72", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_50 [label="var cts = new CancellationTokenSource()", span="66-66", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_52 [label="var queue = CreateJobQueue(connection)", span="68-68", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_51 [label="cts.Cancel()", span="67-67", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_53 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="70-71", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_58 [label="queue.Dequeue(DefaultQueues, cts.Token)", span="71-71", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_54 [label="Exit lambda expression", span="64-72", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_57 [label="Entry lambda expression", span="71-71", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_59 [label="Exit lambda expression", span="71-71", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_63 [label="Entry lambda expression", span="78-85", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_64 [label="var cts = new CancellationTokenSource(200)", span="80-80", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_65 [label="var queue = CreateJobQueue(connection)", span="81-81", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_66 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token))", span="83-84", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_70 [label="queue.Dequeue(DefaultQueues, cts.Token)", span="84-84", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_67 [label="Exit lambda expression", span="78-85", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_69 [label="Entry lambda expression", span="84-84", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_71 [label="Exit lambda expression", span="84-84", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_77 [label="var id = (int)connection.Query(\r\n                    arrangeSql,\r\n                    new { jobId = 1, queue = ''default'' }).Single().Id", span="99-101", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_76 [label="Entry lambda expression", span="97-113", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_78 [label="var queue = CreateJobQueue(connection)", span="102-102", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_80 [label="Assert.Equal(id, payload.Id)", span="110-110", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_79 [label="var payload = (SqlServerFetchedJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="105-107", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_81 [label="Assert.Equal(''1'', payload.JobId)", span="111-111", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_82 [label="Assert.Equal(''default'', payload.Queue)", span="112-112", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_83 [label="Exit lambda expression", span="97-113", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_91 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { invocationData = '''', arguments = '''', queue = ''default'' })", span="128-130", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_90 [label="Entry lambda expression", span="126-147", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_92 [label="var queue = CreateJobQueue(connection)", span="131-131", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_95 [label="var fetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId = @id'',\r\n                    new { id = payload.JobId }).Single()", span="141-143", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_93 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="134-136", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_94 [label="Assert.NotNull(payload)", span="139-139", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_96 [label="Assert.NotNull(fetchedAt)", span="145-145", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_97 [label="Assert.True(fetchedAt > DateTime.UtcNow.AddMinutes(-1))", span="146-146", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_98 [label="Exit lambda expression", span="126-147", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_108 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new\r\n                    {\r\n                        queue = ''default'',\r\n                        fetchedAt = DateTime.UtcNow.AddDays(-1),\r\n                        invocationData = '''',\r\n                        arguments = ''''\r\n                    })", span="162-170", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_107 [label="Entry lambda expression", span="160-180", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_109 [label="var queue = CreateJobQueue(connection)", span="171-171", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_110 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="174-176", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_111 [label="Assert.NotEmpty(payload.JobId)", span="179-179", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_112 [label="Exit lambda expression", span="160-180", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_120 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' }\r\n                    })", span="195-201", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_119 [label="Entry lambda expression", span="193-215", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_121 [label="var queue = CreateJobQueue(connection)", span="202-202", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_123 [label="var otherJobFetchedAt = connection.Query<DateTime?>(\r\n                    ''select FetchedAt from HangFire.JobQueue where JobId != @id'',\r\n                    new { id = payload.JobId }).Single()", span="210-212", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_122 [label="var payload = queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken())", span="205-207", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_124 [label="Assert.Null(otherJobFetchedAt)", span="214-214", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_125 [label="Exit lambda expression", span="193-215", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_133 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' })", span="231-233", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_131 [label="Entry lambda expression", span="227-239", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_132 [label="var queue = CreateJobQueue(connection)", span="229-229", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_134 [label="Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()))", span="235-238", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_137 [label="queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken())", span="236-238", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_135 [label="Exit lambda expression", span="227-239", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_136 [label="Entry lambda expression", span="236-238", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_138 [label="Exit lambda expression", span="236-238", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_144 [label="connection.Execute(\r\n                    arrangeSql,\r\n                    new[]\r\n                    {\r\n                        new { queue = ''default'', invocationData = '''', arguments = '''' },\r\n                        new { queue = ''critical'', invocationData = '''', arguments = '''' }\r\n                    })", span="253-259", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_143 [label="Entry lambda expression", span="251-276", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_145 [label="var queue = CreateJobQueue(connection)", span="261-261", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_146 [label="var critical = (SqlServerFetchedJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="263-265", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_149 [label="var @default = (SqlServerFetchedJob)queue.Dequeue(\r\n                    new[] { ''critical'', ''default'' },\r\n                    CreateTimingOutCancellationToken())", span="270-272", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_147 [label="Assert.NotNull(critical.JobId)", span="267-267", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_148 [label="Assert.Equal(''critical'', critical.Queue)", span="268-268", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_150 [label="Assert.NotNull(@default.JobId)", span="274-274", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_151 [label="Assert.Equal(''default'', @default.Queue)", span="275-275", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_152 [label="Exit lambda expression", span="251-276", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_157 [label="var queue = CreateJobQueue(connection)", span="284-284", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_159 [label="var record = connection.Query(''select * from HangFire.JobQueue'').Single()", span="288-288", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_158 [label="queue.Enqueue(''default'', ''1'')", span="286-286", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_160 [label="Assert.Equal(''1'', record.JobId.ToString())", span="289-289", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_161 [label="Assert.Equal(''default'', record.Queue)", span="290-290", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_162 [label="Assert.Null(record.FetchedAt)", span="291-291", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_163 [label="Exit lambda expression", span="282-292", cluster="lambda expression", file="ServerJobDescriptor.cs"];
m58_166 [label="var source = new CancellationTokenSource(TimeSpan.FromSeconds(10))", span="297-297", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="ServerJobDescriptor.cs"];
m58_167 [label="return source.Token;", span="298-298", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="ServerJobDescriptor.cs"];
m58_168 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", span="295-295", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateTimingOutCancellationToken()", file="ServerJobDescriptor.cs"];
m58_60 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="76-76", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="ServerJobDescriptor.cs"];
m58_61 [label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource(200);\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", span="78-85", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="ServerJobDescriptor.cs"];
m58_62 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", span="76-76", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldWaitIndefinitely_WhenThereAreNoJobs()", file="ServerJobDescriptor.cs"];
m58_127 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="219-219", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="ServerJobDescriptor.cs"];
m58_128 [label="string arrangeSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt)\r\nvalues (@invocationData, @arguments, getutcdate())\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (scope_identity(), @queue)''", span="221-225", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="ServerJobDescriptor.cs"];
m58_129 [label="UseConnection(connection =>\r\n            {\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                connection.Execute(\r\n                    arrangeSql,\r\n                    new { queue = ''critical'', invocationData = '''', arguments = '''' });\r\n                \r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(\r\n                        DefaultQueues,\r\n                        CreateTimingOutCancellationToken()));\r\n            })", span="227-239", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="ServerJobDescriptor.cs"];
m58_130 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", span="219-219", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchJobs_OnlyFromSpecifiedQueues()", file="ServerJobDescriptor.cs"];
m58_114 [label="Entry Unk.NotEmpty", span="", cluster="Unk.NotEmpty", file="ServerJobDescriptor.cs"];
m58_85 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="ServerJobDescriptor.cs"];
m58_102 [label="Entry Unk.True", span="", cluster="Unk.True", file="ServerJobDescriptor.cs"];
m58_99 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="ServerJobDescriptor.cs"];
m58_72 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", span="89-89", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="ServerJobDescriptor.cs"];
m58_73 [label="string arrangeSql = @''\r\ninsert into HangFire.JobQueue (JobId, Queue)\r\nvalues (@jobId, @queue);\r\nselect scope_identity() as Id;''", span="91-94", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="ServerJobDescriptor.cs"];
m58_74 [label="UseConnection(connection =>\r\n            {\r\n                var id = (int)connection.Query(\r\n                    arrangeSql,\r\n                    new { jobId = 1, queue = ''default'' }).Single().Id;\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                // Act\r\n                var payload = (SqlServerFetchedJob)queue.Dequeue(\r\n                    DefaultQueues,\r\n                    CreateTimingOutCancellationToken());\r\n\r\n                // Assert\r\n                Assert.Equal(id, payload.Id);\r\n                Assert.Equal(''1'', payload.JobId);\r\n                Assert.Equal(''default'', payload.Queue);\r\n            })", span="97-113", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="ServerJobDescriptor.cs"];
m58_75 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", span="89-89", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ShouldFetchAJob_FromTheSpecifiedQueue()", file="ServerJobDescriptor.cs"];
m58_171 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Sample(string, string)", span="301-301", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Sample(string, string)", file="ServerJobDescriptor.cs"];
m58_172 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Sample(string, string)", span="301-301", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Sample(string, string)", file="ServerJobDescriptor.cs"];
m58_173 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", span="303-303", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", file="ServerJobDescriptor.cs"];
m58_174 [label="return new SqlServerJobQueue(connection, new SqlServerStorageOptions());", span="305-305", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", file="ServerJobDescriptor.cs"];
m58_175 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", span="303-303", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.CreateJobQueue(IDbConnection)", file="ServerJobDescriptor.cs"];
m58_46 [label="Entry Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="62-62", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="ServerJobDescriptor.cs"];
m58_47 [label="UseConnection(connection =>\r\n            {\r\n                var cts = new CancellationTokenSource();\r\n                cts.Cancel();\r\n                var queue = CreateJobQueue(connection);\r\n\r\n                Assert.Throws<OperationCanceledException>(\r\n                    () => queue.Dequeue(DefaultQueues, cts.Token));\r\n            })", span="64-72", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="ServerJobDescriptor.cs"];
m58_48 [label="Exit Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", span="62-62", cluster="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts.Dequeue_ThrowsOperationCanceled_WhenCancellationTokenIsSetAtTheBeginning()", file="ServerJobDescriptor.cs"];
m58_182 [label="Hangfire.SqlServer.Tests.SqlServerJobQueueFacts", span="", file="ServerJobDescriptor.cs"];
m58_183 [label=queue, span="", file="ServerJobDescriptor.cs"];
m58_184 [label=queue, span="", file="ServerJobDescriptor.cs"];
m58_185 [label=cts, span="", file="ServerJobDescriptor.cs"];
m58_186 [label=queue, span="", file="ServerJobDescriptor.cs"];
m58_187 [label=cts, span="", file="ServerJobDescriptor.cs"];
m58_188 [label=queue, span="", file="ServerJobDescriptor.cs"];
m58_189 [label=arrangeSql, span="", file="ServerJobDescriptor.cs"];
m58_190 [label=arrangeSql, span="", file="ServerJobDescriptor.cs"];
m58_191 [label=arrangeSql, span="", file="ServerJobDescriptor.cs"];
m58_192 [label=arrangeSql, span="", file="ServerJobDescriptor.cs"];
m58_193 [label=arrangeSql, span="", file="ServerJobDescriptor.cs"];
m58_194 [label=queue, span="", file="ServerJobDescriptor.cs"];
m58_195 [label=arrangeSql, span="", file="ServerJobDescriptor.cs"];
m59_0 [label="Entry HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="10-10", cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="ServerSteps.cs"];
m59_1 [label="Exit HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="10-10", cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="ServerSteps.cs"];
m59_6 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="13-13", cluster="HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="ServerSteps.cs"];
m59_7 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="13-13", cluster="HangFire.Storage.IWriteOnlyTransaction.AddJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="ServerSteps.cs"];
m59_22 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="27-27", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="ServerSteps.cs"];
m59_23 [label="Exit HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", span="27-27", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromSet(string, string)", file="ServerSteps.cs"];
m59_26 [label="Entry HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="31-31", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="ServerSteps.cs"];
m59_27 [label="Exit HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", span="31-31", cluster="HangFire.Storage.IWriteOnlyTransaction.RemoveFromList(string, string)", file="ServerSteps.cs"];
m59_2 [label="Entry HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", span="11-11", cluster="HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", file="ServerSteps.cs"];
m59_3 [label="Exit HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", span="11-11", cluster="HangFire.Storage.IWriteOnlyTransaction.PersistJob(string)", file="ServerSteps.cs"];
m59_4 [label="Entry HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="12-12", cluster="HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="ServerSteps.cs"];
m59_5 [label="Exit HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", span="12-12", cluster="HangFire.Storage.IWriteOnlyTransaction.SetJobState(string, HangFire.Common.States.JobState, HangFire.Common.JobMethod)", file="ServerSteps.cs"];
m59_18 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="25-25", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", file="ServerSteps.cs"];
m59_19 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", span="25-25", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string)", file="ServerSteps.cs"];
m59_28 [label="Entry HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="32-32", cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="ServerSteps.cs"];
m59_29 [label="Exit HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", span="32-32", cluster="HangFire.Storage.IWriteOnlyTransaction.TrimList(string, int, int)", file="ServerSteps.cs"];
m59_32 [label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementValue(string)", span="36-36", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementValue(string)", file="ServerSteps.cs"];
m59_33 [label="Exit HangFire.Storage.IWriteOnlyTransaction.DecrementValue(string)", span="36-36", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementValue(string)", file="ServerSteps.cs"];
m59_34 [label="Entry HangFire.Storage.IWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="37-37", cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="ServerSteps.cs"];
m59_35 [label="Exit HangFire.Storage.IWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", span="37-37", cluster="HangFire.Storage.IWriteOnlyTransaction.ExpireValue(string, System.TimeSpan)", file="ServerSteps.cs"];
m59_8 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", span="16-16", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", file="ServerSteps.cs"];
m59_9 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", span="16-16", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToQueue(string, string)", file="ServerSteps.cs"];
m59_36 [label="Entry HangFire.Storage.IWriteOnlyTransaction.Commit()", span="39-39", cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="ServerSteps.cs"];
m59_37 [label="Exit HangFire.Storage.IWriteOnlyTransaction.Commit()", span="39-39", cluster="HangFire.Storage.IWriteOnlyTransaction.Commit()", file="ServerSteps.cs"];
m59_10 [label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="19-19", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="ServerSteps.cs"];
m59_11 [label="Exit HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", span="19-19", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string)", file="ServerSteps.cs"];
m59_20 [label="Entry HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="26-26", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="ServerSteps.cs"];
m59_21 [label="Exit HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", span="26-26", cluster="HangFire.Storage.IWriteOnlyTransaction.AddToSet(string, string, double)", file="ServerSteps.cs"];
m59_14 [label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="21-21", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="ServerSteps.cs"];
m59_15 [label="Exit HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", span="21-21", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string)", file="ServerSteps.cs"];
m59_30 [label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementValue(string)", span="35-35", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementValue(string)", file="ServerSteps.cs"];
m59_31 [label="Exit HangFire.Storage.IWriteOnlyTransaction.IncrementValue(string)", span="35-35", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementValue(string)", file="ServerSteps.cs"];
m59_12 [label="Entry HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="20-20", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="ServerSteps.cs"];
m59_13 [label="Exit HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="20-20", cluster="HangFire.Storage.IWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="ServerSteps.cs"];
m59_16 [label="Entry HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="22-22", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="ServerSteps.cs"];
m59_17 [label="Exit HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="22-22", cluster="HangFire.Storage.IWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="ServerSteps.cs"];
m59_24 [label="Entry HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="30-30", cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="ServerSteps.cs"];
m59_25 [label="Exit HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", span="30-30", cluster="HangFire.Storage.IWriteOnlyTransaction.InsertToList(string, string)", file="ServerSteps.cs"];
m60_131 [label="Entry Unk.EnqueueItemOnList", span="", cluster="Unk.EnqueueItemOnList", file="StateMachine.cs"];
m60_118 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="StateMachine.cs"];
m60_52 [label="Entry Unk.SetRangeInHash", span="", cluster="Unk.SetRangeInHash", file="StateMachine.cs"];
m60_73 [label="Entry HangFire.States.StateMachine.AppendHistory(string, HangFire.States.JobState, bool)", span="163-163", cluster="HangFire.States.StateMachine.AppendHistory(string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_102 [label="var transaction = _redis.CreateTransaction()", span="166-166", cluster="HangFire.States.StateMachine.AppendHistory(string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_103 [label="AppendHistory(transaction, jobId, state, appendToJob)", span="168-168", cluster="HangFire.States.StateMachine.AppendHistory(string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_104 [label="transaction.Commit()", span="169-169", cluster="HangFire.States.StateMachine.AppendHistory(string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_105 [label="Exit HangFire.States.StateMachine.AppendHistory(string, HangFire.States.JobState, bool)", span="163-163", cluster="HangFire.States.StateMachine.AppendHistory(string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_16 [label="Entry HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", span="41-41", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", file="StateMachine.cs"];
m60_17 [label="redis == null", span="47-47", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", file="StateMachine.cs"];
m60_19 [label="stateDescriptors == null", span="48-48", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", file="StateMachine.cs"];
m60_21 [label="stateChangedFilters == null", span="49-49", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", color=red, community=0, file="StateMachine.cs"];
m60_23 [label="stateAppliedFilters == null", span="50-50", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", color=red, community=0, file="StateMachine.cs"];
m60_25 [label="_redis = redis", span="52-52", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", file="StateMachine.cs"];
m60_26 [label="_stateDescriptors = stateDescriptors", span="53-53", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", file="StateMachine.cs"];
m60_27 [label="_stateChangedFilters = stateChangedFilters", span="54-54", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", color=red, community=0, file="StateMachine.cs"];
m60_28 [label="_stateAppliedFilters = stateAppliedFilters", span="55-55", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", color=red, community=0, file="StateMachine.cs"];
m60_18 [label="throw new ArgumentNullException(''redis'');", span="47-47", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", file="StateMachine.cs"];
m60_20 [label="throw new ArgumentNullException(''stateDescriptors'');", span="48-48", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", file="StateMachine.cs"];
m60_22 [label="throw new ArgumentNullException(''stateChangedFilters'');", span="49-49", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", color=red, community=0, file="StateMachine.cs"];
m60_24 [label="throw new ArgumentNullException(''stateAppliedFilters'');", span="50-50", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", color=red, community=0, file="StateMachine.cs"];
m60_29 [label="Exit HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", span="41-41", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient, System.Collections.Generic.IDictionary<string, HangFire.States.JobStateDescriptor>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangingFilter>, System.Collections.Generic.IEnumerable<HangFire.Filters.IStateChangedFilter>)", file="StateMachine.cs"];
m60_69 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="StateMachine.cs"];
m60_7 [label="Entry HangFire.States.StateMachine.RegisterStateDescriptor(string, HangFire.States.JobStateDescriptor)", span="21-21", cluster="HangFire.States.StateMachine.RegisterStateDescriptor(string, HangFire.States.JobStateDescriptor)", file="StateMachine.cs"];
m60_11 [label="Descriptors.Add(stateName, descriptor)", span="24-24", cluster="HangFire.States.StateMachine.RegisterStateDescriptor(string, HangFire.States.JobStateDescriptor)", file="StateMachine.cs"];
m60_12 [label="Exit HangFire.States.StateMachine.RegisterStateDescriptor(string, HangFire.States.JobStateDescriptor)", span="21-21", cluster="HangFire.States.StateMachine.RegisterStateDescriptor(string, HangFire.States.JobStateDescriptor)", file="StateMachine.cs"];
m60_93 [label="Entry HangFire.States.JobStateDescriptor.Unapply(IRedisTransaction, string)", span="6-6", cluster="HangFire.States.JobStateDescriptor.Unapply(IRedisTransaction, string)", file="StateMachine.cs"];
m60_53 [label="Entry HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", span="86-86", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_54 [label="state == null", span="89-89", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_56 [label="_redis.AcquireLock(\r\n                String.Format(''hangfire:job:{0}:state-lock'', jobId), TimeSpan.FromMinutes(1))", span="91-92", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_57 [label="var currentState = _redis.GetValueFromHash(\r\n                String.Format(''hangfire:job:{0}'', jobId), ''State'')", span="94-95", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_60 [label="allowedCurrentStates.Length > 0 && !allowedCurrentStates.Contains(currentState)", span="102-102", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_63 [label="var oldState = state", span="109-109", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_64 [label="state = filter.OnStateChanging(_redis, jobId, oldState)", span="110-110", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_66 [label="AppendHistory(jobId, oldState, false)", span="114-114", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_67 [label="return ApplyState(jobId, currentState, state);", span="118-118", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", color=red, community=0, file="StateMachine.cs"];
m60_55 [label="throw new ArgumentNullException(''state'');", span="89-89", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_58 [label="currentState == null", span="97-97", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_59 [label="return false;", span="99-99", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_61 [label="return false;", span="104-104", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_62 [label=_stateChangedFilters, span="107-107", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", color=red, community=0, file="StateMachine.cs"];
m60_65 [label="oldState != state", span="112-112", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_68 [label="Exit HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", span="86-86", cluster="HangFire.States.StateMachine.ChangeState(string, HangFire.States.JobState, params string[])", file="StateMachine.cs"];
m60_123 [label="Entry Unk.SetEntryInHash", span="", cluster="Unk.SetEntryInHash", file="StateMachine.cs"];
m60_51 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="StateMachine.cs"];
m60_130 [label="Entry HangFire.JobHelper.ToJson(object)", span="28-28", cluster="HangFire.JobHelper.ToJson(object)", file="StateMachine.cs"];
m60_119 [label="Entry HangFire.JobHelper.ToStringTimestamp(System.DateTime)", span="51-51", cluster="HangFire.JobHelper.ToStringTimestamp(System.DateTime)", file="StateMachine.cs"];
m60_14 [label="Entry HangFire.States.StateMachine.StateMachine(IRedisClient)", span="32-32", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient)", file="StateMachine.cs"];
m60_15 [label="Exit HangFire.States.StateMachine.StateMachine(IRedisClient)", span="32-32", cluster="HangFire.States.StateMachine.StateMachine(IRedisClient)", file="StateMachine.cs"];
m60_101 [label="Entry Unk.RemoveEntry", span="", cluster="Unk.RemoveEntry", file="StateMachine.cs"];
m60_74 [label="Entry HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState)", span="122-122", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState)", file="StateMachine.cs"];
m60_75 [label="var transaction = _redis.CreateTransaction()", span="127-127", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState)", file="StateMachine.cs"];
m60_76 [label="ApplyState(jobId, currentState, newState, transaction)", span="129-129", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState)", color=red, community=0, file="StateMachine.cs"];
m60_77 [label="return transaction.Commit();", span="131-131", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState)", file="StateMachine.cs"];
m60_78 [label="Exit HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState)", span="122-122", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState)", file="StateMachine.cs"];
m60_94 [label="Entry HangFire.Filters.IStateChangedFilter.OnStateUnapplied(IRedisTransaction, string, string)", span="26-26", cluster="HangFire.Filters.IStateChangedFilter.OnStateUnapplied(IRedisTransaction, string, string)", file="StateMachine.cs"];
m60_8 [label="Entry HangFire.States.ProcessingState.Descriptor.Descriptor()", span="37-37", cluster="HangFire.States.ProcessingState.Descriptor.Descriptor()", file="StateMachine.cs"];
m60_9 [label="Entry HangFire.States.ScheduledState.Descriptor.Descriptor()", span="39-39", cluster="HangFire.States.ScheduledState.Descriptor.Descriptor()", file="StateMachine.cs"];
m60_31 [label="Entry HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="58-58", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="StateMachine.cs"];
m60_32 [label="var transaction = _redis.CreateTransaction()", span="63-63", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="StateMachine.cs"];
m60_33 [label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    parameters))", span="65-67", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="StateMachine.cs"];
m60_35 [label="var oldState = state", span="71-71", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=red, community=0, file="StateMachine.cs"];
m60_36 [label="state = filter.OnStateChanging(_redis, jobId, oldState)", span="72-72", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=red, community=0, file="StateMachine.cs"];
m60_38 [label="AppendHistory(transaction, jobId, oldState, false)", span="76-76", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=red, community=0, file="StateMachine.cs"];
m60_39 [label="ApplyState(jobId, null, state, transaction)", span="80-80", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=red, community=0, file="StateMachine.cs"];
m60_40 [label="return transaction.Commit();", span="82-82", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="StateMachine.cs"];
m60_34 [label=_stateChangedFilters, span="69-69", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=red, community=0, file="StateMachine.cs"];
m60_37 [label="oldState != state", span="74-74", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", color=red, community=0, file="StateMachine.cs"];
m60_41 [label="Exit HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="58-58", cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="StateMachine.cs"];
m60_83 [label="transaction.QueueCommand(x => x.RemoveEntry(\r\n                    String.Format(''hangfire:job:{0}:state'', jobId)))", span="144-145", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", file="StateMachine.cs"];
m60_79 [label="Entry HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", span="135-135", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", file="StateMachine.cs"];
m60_80 [label="!String.IsNullOrEmpty(currentState)", span="137-137", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", file="StateMachine.cs"];
m60_81 [label="_stateDescriptors.ContainsKey(currentState)", span="139-139", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", file="StateMachine.cs"];
m60_82 [label="_stateDescriptors[currentState].Unapply(transaction, jobId)", span="141-141", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", file="StateMachine.cs"];
m60_85 [label="filter.OnStateUnapplied(transaction, jobId, currentState)", span="149-149", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", file="StateMachine.cs"];
m60_86 [label="AppendHistory(transaction, jobId, newState, true)", span="153-153", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", file="StateMachine.cs"];
m60_87 [label="newState.Apply(transaction, jobId)", span="155-155", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", file="StateMachine.cs"];
m60_89 [label="filter.OnStateApplied(transaction, jobId, newState)", span="159-159", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", file="StateMachine.cs"];
m60_84 [label=_stateAppliedFilters, span="147-147", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", color=red, community=0, file="StateMachine.cs"];
m60_88 [label=_stateAppliedFilters, span="157-157", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", color=red, community=0, file="StateMachine.cs"];
m60_90 [label="Exit HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", span="135-135", cluster="HangFire.States.StateMachine.ApplyState(string, string, HangFire.States.JobState, IRedisTransaction)", file="StateMachine.cs"];
m60_110 [label="transaction.QueueCommand(x => x.SetEntryInHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    ''State'',\r\n                    state.StateName))", span="183-186", cluster="HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_95 [label="Entry HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", span="173-173", cluster="HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_106 [label="var properties = new Dictionary<string, string>(state.GetProperties())", span="176-176", cluster="HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_108 [label="properties.Add(''State'', state.StateName)", span="179-179", cluster="HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_109 [label=appendToJob, span="181-181", cluster="HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_111 [label="transaction.QueueCommand(x => x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}:state'', jobId),\r\n                    properties))", span="188-190", cluster="HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_112 [label="properties.Add(''Reason'', state.Reason)", span="193-193", cluster="HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_114 [label="transaction.QueueCommand(x => x.EnqueueItemOnList(\r\n                String.Format(''hangfire:job:{0}:history'', jobId),\r\n                JobHelper.ToJson(properties)))", span="196-198", cluster="HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_107 [label="var now = DateTime.UtcNow", span="177-177", cluster="HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_113 [label="properties.Add(''CreatedAt'', JobHelper.ToStringTimestamp(now))", span="194-194", cluster="HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_115 [label="Exit HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", span="173-173", cluster="HangFire.States.StateMachine.AppendHistory(IRedisTransaction, string, HangFire.States.JobState, bool)", file="StateMachine.cs"];
m60_6 [label="Entry HangFire.States.FailedState.Descriptor.Descriptor()", span="41-41", cluster="HangFire.States.FailedState.Descriptor.Descriptor()", file="StateMachine.cs"];
m60_116 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="StateMachine.cs"];
m60_91 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="StateMachine.cs"];
m60_92 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="StateMachine.cs"];
m60_127 [label="Entry lambda expression", span="196-198", cluster="lambda expression", file="StateMachine.cs"];
m60_49 [label="x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    parameters)", span="65-67", cluster="lambda expression", file="StateMachine.cs"];
m60_48 [label="Entry lambda expression", span="65-67", cluster="lambda expression", file="StateMachine.cs"];
m60_50 [label="Exit lambda expression", span="65-67", cluster="lambda expression", file="StateMachine.cs"];
m60_99 [label="x.RemoveEntry(\r\n                    String.Format(''hangfire:job:{0}:state'', jobId))", span="144-145", cluster="lambda expression", file="StateMachine.cs"];
m60_98 [label="Entry lambda expression", span="144-145", cluster="lambda expression", file="StateMachine.cs"];
m60_100 [label="Exit lambda expression", span="144-145", cluster="lambda expression", file="StateMachine.cs"];
m60_121 [label="x.SetEntryInHash(\r\n                    String.Format(''hangfire:job:{0}'', jobId),\r\n                    ''State'',\r\n                    state.StateName)", span="183-186", cluster="lambda expression", file="StateMachine.cs"];
m60_125 [label="x.SetRangeInHash(\r\n                    String.Format(''hangfire:job:{0}:state'', jobId),\r\n                    properties)", span="188-190", cluster="lambda expression", file="StateMachine.cs"];
m60_128 [label="x.EnqueueItemOnList(\r\n                String.Format(''hangfire:job:{0}:history'', jobId),\r\n                JobHelper.ToJson(properties))", span="196-198", cluster="lambda expression", file="StateMachine.cs"];
m60_120 [label="Entry lambda expression", span="183-186", cluster="lambda expression", file="StateMachine.cs"];
m60_124 [label="Entry lambda expression", span="188-190", cluster="lambda expression", file="StateMachine.cs"];
m60_122 [label="Exit lambda expression", span="183-186", cluster="lambda expression", file="StateMachine.cs"];
m60_126 [label="Exit lambda expression", span="188-190", cluster="lambda expression", file="StateMachine.cs"];
m60_129 [label="Exit lambda expression", span="196-198", cluster="lambda expression", file="StateMachine.cs"];
m60_96 [label="Entry HangFire.States.JobState.Apply(IRedisTransaction, string)", span="16-16", cluster="HangFire.States.JobState.Apply(IRedisTransaction, string)", file="StateMachine.cs"];
m60_72 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="StateMachine.cs"];
m60_44 [label="Entry HangFire.Filters.IStateChangingFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="21-21", cluster="HangFire.Filters.IStateChangingFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="StateMachine.cs"];
m60_0 [label="Entry HangFire.States.StateMachine.StateMachine()", span="13-13", cluster="HangFire.States.StateMachine.StateMachine()", file="StateMachine.cs"];
m60_1 [label="RegisterStateDescriptor(FailedState.Name, new FailedState.Descriptor())", span="15-15", cluster="HangFire.States.StateMachine.StateMachine()", file="StateMachine.cs"];
m60_2 [label="RegisterStateDescriptor(ProcessingState.Name, new ProcessingState.Descriptor())", span="16-16", cluster="HangFire.States.StateMachine.StateMachine()", file="StateMachine.cs"];
m60_3 [label="RegisterStateDescriptor(ScheduledState.Name, new ScheduledState.Descriptor())", span="17-17", cluster="HangFire.States.StateMachine.StateMachine()", file="StateMachine.cs"];
m60_4 [label="RegisterStateDescriptor(SucceededState.Name, new SucceededState.Descriptor())", span="18-18", cluster="HangFire.States.StateMachine.StateMachine()", file="StateMachine.cs"];
m60_5 [label="Exit HangFire.States.StateMachine.StateMachine()", span="13-13", cluster="HangFire.States.StateMachine.StateMachine()", file="StateMachine.cs"];
m60_71 [label="Entry Unk.GetValueFromHash", span="", cluster="Unk.GetValueFromHash", file="StateMachine.cs"];
m60_47 [label="Entry Unk.Commit", span="", cluster="Unk.Commit", file="StateMachine.cs"];
m60_97 [label="Entry HangFire.Filters.IStateChangedFilter.OnStateApplied(IRedisTransaction, string, HangFire.States.JobState)", span="17-17", cluster="HangFire.Filters.IStateChangedFilter.OnStateApplied(IRedisTransaction, string, HangFire.States.JobState)", file="StateMachine.cs"];
m60_10 [label="Entry HangFire.States.SucceededState.Descriptor.Descriptor()", span="49-49", cluster="HangFire.States.SucceededState.Descriptor.Descriptor()", file="StateMachine.cs"];
m60_43 [label="Entry Unk.QueueCommand", span="", cluster="Unk.QueueCommand", file="StateMachine.cs"];
m60_13 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="StateMachine.cs"];
m60_45 [label="Entry Unk.AppendHistory", span="", cluster="Unk.AppendHistory", file="StateMachine.cs"];
m60_46 [label="Entry Unk.ApplyState", span="", cluster="Unk.ApplyState", file="StateMachine.cs"];
m60_70 [label="Entry Unk.AcquireLock", span="", cluster="Unk.AcquireLock", file="StateMachine.cs"];
m60_42 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="StateMachine.cs"];
m60_117 [label="Entry HangFire.States.JobState.GetProperties()", span="18-18", cluster="HangFire.States.JobState.GetProperties()", file="StateMachine.cs"];
m60_132 [label="HangFire.States.StateMachine", span="", file="StateMachine.cs"];
m60_133 [label=string, span="", file="StateMachine.cs"];
m60_134 [label="System.Collections.Generic.IDictionary<string, string>", span="", file="StateMachine.cs"];
m60_135 [label=string, span="", file="StateMachine.cs"];
m60_136 [label=string, span="", file="StateMachine.cs"];
m60_137 [label="HangFire.States.JobState", span="", file="StateMachine.cs"];
m60_138 [label=properties, span="", file="StateMachine.cs"];
m62_587 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="StateSteps.cs"];
m62_281 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="StateSteps.cs"];
m62_282 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="308-319", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="StateSteps.cs", color=green, community=0];
m62_285 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''another-value'');\r\n                })", span="310-314", cluster="lambda expression", file="StateSteps.cs", color=green, community=0];
m62_286 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="316-316", cluster="lambda expression", file="StateSteps.cs"];
m62_283 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", span="306-306", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_AddsARecord_WhenKeyIsExists_ButValuesAreDifferent()", file="StateSteps.cs"];
m62_284 [label="Entry lambda expression", span="308-319", cluster="lambda expression", file="StateSteps.cs"];
m62_287 [label="Assert.Equal(2, recordCount)", span="318-318", cluster="lambda expression", file="StateSteps.cs"];
m62_288 [label="Exit lambda expression", span="308-319", cluster="lambda expression", file="StateSteps.cs"];
m62_153 [label="Entry HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="243-243", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="StateSteps.cs"];
m62_154 [label="DictionaryAssert.ContainsFollowingItems(table, _state.GetProperties())", span="245-245", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", color=green, community=0, file="StateSteps.cs"];
m62_155 [label="Exit HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", span="243-243", cluster="HangFire.Tests.States.StateSteps.ThenPropertiesTableContainsTheFollowingItems(Table)", file="StateSteps.cs"];
m62_174 [label="x.Enqueue(''default'', ''1'')", span="175-175", cluster="lambda expression", file="StateSteps.cs"];
m62_175 [label="Exit lambda expression", span="175-175", cluster="lambda expression", file="StateSteps.cs"];
m62_176 [label="Entry Unk.Enqueue", span="", cluster="Unk.Enqueue", file="StateSteps.cs"];
m62_177 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="StateSteps.cs"];
m62_178 [label="return connection\r\n                .Query(''select * from HangFire.Job where Id = @id'', new { id = jobId })\r\n                .Single();", span="181-183", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="StateSteps.cs"];
m62_179 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", span="179-179", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.GetTestJob(IDbConnection, string)", file="StateSteps.cs"];
m62_726 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="287-287", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="StateSteps.cs"];
m62_158 [label="var correctProvider = new Mock<IPersistentJobQueueProvider>()", span="167-167", cluster="lambda expression", file="StateSteps.cs"];
m62_159 [label="correctProvider.Setup(x => x.GetJobQueue(It.IsNotNull<IDbConnection>()))\r\n                    .Returns(correctJobQueue.Object)", span="168-169", cluster="lambda expression", file="StateSteps.cs"];
m62_160 [label="_queueProviders.Add(correctProvider.Object, new [] { ''default'' })", span="171-171", cluster="lambda expression", file="StateSteps.cs"];
m62_161 [label="Commit(sql, x => x.AddToQueue(''default'', ''1''))", span="173-173", cluster="lambda expression", file="StateSteps.cs"];
m62_112 [label="x.SerializeData()", span="106-106", cluster="lambda expression", file="StateSteps.cs"];
m62_113 [label="Exit lambda expression", span="106-106", cluster="lambda expression", color=red, community=0, file="StateSteps.cs"];
m62_114 [label="Entry Unk.SerializeData", span="", cluster="Unk.SerializeData", file="StateSteps.cs"];
m62_115 [label="Entry lambda expression", span="109-109", cluster="lambda expression", file="StateSteps.cs"];
m62_627 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="StateSteps.cs"];
m62_629 [label="UseConnection(sql =>\r\n            {\r\n                sql.Execute(arrangeSql, new []\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                Commit(sql, x => x.RemoveSet(''set-1''));\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n                Assert.Equal(''set-2'', record.Key);\r\n            })", span="727-739", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="StateSteps.cs"];
m62_628 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score]) values (@key, @value, 0.0)''", span="724-725", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="StateSteps.cs"];
m62_630 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", span="722-722", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_RemovesASet_WithAGivenKey()", file="StateSteps.cs"];
m62_183 [label="Entry lambda expression", span="189-198", cluster="lambda expression", file="StateSteps.cs"];
m62_184 [label="Commit(sql, x => x.IncrementCounter(''my-key''))", span="191-191", cluster="lambda expression", file="StateSteps.cs"];
m62_185 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="193-193", cluster="lambda expression", file="StateSteps.cs"];
m62_186 [label="Assert.Equal(''my-key'', record.Key)", span="195-195", cluster="lambda expression", file="StateSteps.cs"];
m62_187 [label="Assert.Equal(1, record.Value)", span="196-196", cluster="lambda expression", file="StateSteps.cs"];
m62_188 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="197-197", cluster="lambda expression", file="StateSteps.cs"];
m62_189 [label="Exit lambda expression", span="189-198", cluster="lambda expression", file="StateSteps.cs"];
m62_119 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", span="129-129", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddJobState_JustAddsANewRecordInATable()", file="StateSteps.cs"];
m62_173 [label="Entry lambda expression", span="175-175", cluster="lambda expression", file="StateSteps.cs"];
m62_121 [label="var keys = new[]\r\n                {\r\n                    String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:state'', JobSteps.DefaultJobId),\r\n                    String.Format(''hangfire:job:{0}:history'', JobSteps.DefaultJobId)\r\n                }", span="185-190", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", color=green, community=0, file="StateSteps.cs"];
m62_120 [label="Entry HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="183-183", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StateSteps.cs"];
m62_122 [label="keys.ForEach(x =>\r\n                {\r\n                    var ttl = Redis.Client.GetTimeToLive(x);\r\n                    Assert.IsTrue(\r\n                        ttl.TotalSeconds > 0,\r\n                        ''TTL for the '{0}' key is '{1}''', x, ttl);\r\n                })", span="192-198", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StateSteps.cs"];
m62_393 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="StateSteps.cs"];
m62_394 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="456-468", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="StateSteps.cs"];
m62_395 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", span="454-454", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_RemovesAllRecords_WithGivenKeyAndValue()", file="StateSteps.cs"];
m62_614 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_615 [label="UseConnection(sql =>\r\n            {\r\n                Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveSet(null)));\r\n            })", span="714-718", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_616 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", span="712-712", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveSet_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_71 [label="Assert.NotNull(anotherJob.ExpireAt)", span="86-86", cluster="lambda expression", file="StateSteps.cs"];
m62_72 [label="Exit lambda expression", span="75-87", cluster="lambda expression", file="StateSteps.cs"];
m62_73 [label="Entry Unk.NotNull", span="", cluster="Unk.NotNull", color=red, community=1, file="StateSteps.cs"];
m62_74 [label="Entry lambda expression", span="80-80", cluster="lambda expression", file="StateSteps.cs"];
m62_157 [label="var correctJobQueue = new Mock<IPersistentJobQueue>()", span="166-166", cluster="lambda expression", file="StateSteps.cs"];
m62_419 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="StateSteps.cs"];
m62_420 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="491-502", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="StateSteps.cs"];
m62_421 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", span="489-489", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameValue_ButDifferentKey()", file="StateSteps.cs"];
m62_211 [label="Assert.IsNotNull(history, entry)", span="329-329", cluster="HangFire.Tests.States.StateSteps.ThenTheHistoryEntryShouldContainTheFollowingItems(Table)", file="StateSteps.cs"];
m62_230 [label="Assert.Equal(''my-key'', record.Key)", span="247-247", cluster="lambda expression", file="StateSteps.cs"];
m62_231 [label="Assert.Equal(-1, record.Value)", span="248-248", cluster="lambda expression", file="StateSteps.cs"];
m62_232 [label="Assert.Equal((DateTime?)null, record.ExpireAt)", span="249-249", cluster="lambda expression", file="StateSteps.cs"];
m62_111 [label="Entry lambda expression", span="106-106", cluster="lambda expression", file="StateSteps.cs"];
m62_48 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="StateSteps.cs"];
m62_318 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="158-158", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="StateSteps.cs"];
m62_152 [label="Exit HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", span="237-237", cluster="HangFire.Tests.States.StateSteps.ThenTheJobShouldBeRemovedFromTheSucceededList()", file="StateSteps.cs"];
m62_476 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="StateSteps.cs"];
m62_477 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(0, recordCount);\r\n            })", span="566-577", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="StateSteps.cs"];
m62_478 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", span="564-564", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.TrimList_RemovesAllRecords_IfStartFromGreaterThanEndingAt()", file="StateSteps.cs"];
m62_95 [label="Assert.Null(anotherJob.StateId)", span="117-117", cluster="lambda expression", file="StateSteps.cs"];
m62_782 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_783 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistSet(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="899-905", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_784 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", span="897-897", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistSet_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_655 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="265-265", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="StateSteps.cs"];
m62_124 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="138-138", cluster="lambda expression", file="StateSteps.cs"];
m62_319 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="StateSteps.cs"];
m62_320 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                });\r\n\r\n                var record = sql.Query(''select * from HangFire.[Set]'').Single();\r\n\r\n                Assert.Equal(3.2, record.Score, 3);\r\n            })", span="357-368", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="StateSteps.cs"];
m62_321 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", span="355-355", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddToSet_WithScore_UpdatesAScore_WhenBothKeyAndValueAreExist()", file="StateSteps.cs"];
m62_215 [label="Entry lambda expression", span="224-235", cluster="lambda expression", file="StateSteps.cs"];
m62_559 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="StateSteps.cs"];
m62_560 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }));\r\n\r\n                // Act\r\n                Commit(sql, x => x.RemoveHash(''some-hash''));\r\n\r\n                // Assert\r\n                var count = sql.Query<int>(''select count(*) from HangFire.Hash'').Single();\r\n                Assert.Equal(0, count);\r\n            })", span="655-670", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="StateSteps.cs"];
m62_561 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", span="653-653", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveHash_RemovesAllHashRecords()", file="StateSteps.cs"];
m62_47 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="StateSteps.cs"];
m62_589 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="StateSteps.cs"];
m62_590 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)));\r\n\r\n                Assert.Equal(''items'', exception.ParamName);\r\n            })", span="688-694", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="StateSteps.cs"];
m62_591 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", span="686-686", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.AddRangeToSet_ThrowsAnException_WhenItemsValueIsNull()", file="StateSteps.cs"];
m62_637 [label="Entry Unk.Execute", span="", cluster="Unk.Execute", file="StateSteps.cs"];
m62_190 [label="Entry lambda expression", span="191-191", cluster="lambda expression", file="StateSteps.cs"];
m62_191 [label="x.IncrementCounter(''my-key'')", span="191-191", cluster="lambda expression", file="StateSteps.cs"];
m62_192 [label="Exit lambda expression", span="191-191", cluster="lambda expression", file="StateSteps.cs"];
m62_407 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="StateSteps.cs"];
m62_408 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.List'').Single();\r\n\r\n                Assert.Equal(1, recordCount);\r\n            })", span="474-485", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="StateSteps.cs"];
m62_409 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", span="472-472", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.RemoveFromList_DoesNotRemoveRecords_WithSameKey_ButDifferentValue()", file="StateSteps.cs"];
m62_761 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="298-298", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="StateSteps.cs"];
m62_270 [label="Entry lambda expression", span="293-302", cluster="lambda expression", file="StateSteps.cs"];
m62_254 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="146-146", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="StateSteps.cs"];
m62_255 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="StateSteps.cs"];
m62_256 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                });\r\n\r\n                var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(2, recordCount);\r\n            })", span="276-287", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="StateSteps.cs", color=green, community=0];
m62_257 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", span="274-274", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExistingKey_AddsAnotherRecord()", file="StateSteps.cs"];
m62_258 [label="Entry lambda expression", span="276-287", cluster="lambda expression", file="StateSteps.cs"];
m62_260 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.Counter'').Single()", span="284-284", cluster="lambda expression", file="StateSteps.cs"];
m62_261 [label="Assert.Equal(2, recordCount)", span="286-286", cluster="lambda expression", file="StateSteps.cs"];
m62_259 [label="Commit(sql, x =>\r\n                {\r\n                    x.DecrementCounter(''my-key'');\r\n                    x.DecrementCounter(''my-key'');\r\n                })", span="278-282", cluster="lambda expression", file="StateSteps.cs", color=green, community=0];
m62_262 [label="Exit lambda expression", span="276-287", cluster="lambda expression", file="StateSteps.cs"];
m62_156 [label="Entry lambda expression", span="164-176", cluster="lambda expression", file="StateSteps.cs"];
m62_343 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="173-173", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="StateSteps.cs"];
m62_50 [label="x[''Name'']", span="82-82", cluster="lambda expression", file="StateSteps.cs"];
m62_142 [label="Exit lambda expression", span="141-141", cluster="lambda expression", file="StateSteps.cs"];
m62_143 [label="Entry lambda expression", span="142-142", cluster="lambda expression", file="StateSteps.cs"];
m62_144 [label="x.Reason", span="142-142", cluster="lambda expression", file="StateSteps.cs"];
m62_145 [label="Exit lambda expression", span="142-142", cluster="lambda expression", file="StateSteps.cs"];
m62_816 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_817 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.PersistList(null)));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="937-943", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_818 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", span="935-935", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_7 [label="Exit HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="43-43", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StateSteps.cs"];
m62_267 [label="Assert.IsTrue(stateEntry.ContainsKey(property.Key))", span="390-390", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs"];
m62_268 [label="Assert.AreEqual(property.Value, stateEntry[property.Key])", span="391-391", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", color=green, community=0, file="StateSteps.cs"];
m62_269 [label="Exit HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", span="383-383", cluster="HangFire.Tests.States.StateSteps.ThenTheStateEntryShouldContainAllOfTheAboveProperties()", file="StateSteps.cs"];
m62_829 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="320-320", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="StateSteps.cs"];
m62_193 [label="Entry HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="301-301", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StateSteps.cs"];
m62_100 [label="Assert.NotNull(jobState.CreatedAt)", span="123-123", cluster="lambda expression", file="StateSteps.cs"];
m62_795 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="309-309", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="StateSteps.cs"];
m62_141 [label="x.Name", span="141-141", cluster="lambda expression", file="StateSteps.cs"];
m62_101 [label="Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data)", span="124-124", cluster="lambda expression", file="StateSteps.cs"];
m62_514 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="StateSteps.cs"];
m62_515 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)));\r\n\r\n                Assert.Equal(''keyValuePairs'', exception.ParamName);\r\n            })", span="612-618", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="StateSteps.cs"];
m62_516 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", span="610-610", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetRangeInHash_ThrowsAnException_WhenKeyValuePairsArgumentIsNull()", file="StateSteps.cs"];
m62_691 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="276-276", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="StateSteps.cs"];
m62_75 [label="x.PersistJob(jobId)", span="80-80", cluster="lambda expression", file="StateSteps.cs"];
m62_29 [label="new SqlServerWriteOnlyTransaction(ConnectionUtils.CreateConnection(), null, null)", span="39-39", cluster="lambda expression", file="StateSteps.cs"];
m62_17 [label="Assert.Equal(''connection'', exception.ParamName)", span="32-32", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="StateSteps.cs"];
m62_263 [label="Entry lambda expression", span="278-282", cluster="lambda expression", file="StateSteps.cs"];
m62_23 [label="Entry HangFire.Tests.States.StateSteps.GivenAState(string)", span="68-68", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs"];
m62_280 [label="Exit HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", span="407-407", cluster="HangFire.Tests.States.StateSteps.ThenChangingFiltersWereNotExecuted()", file="StateSteps.cs"];
m62_116 [label="x.SetJobState(jobId, state.Object)", span="109-109", cluster="lambda expression", file="StateSteps.cs"];
m62_117 [label="Exit lambda expression", span="109-109", cluster="lambda expression", file="StateSteps.cs"];
m62_118 [label="Entry Unk.SetJobState", span="", cluster="Unk.SetJobState", file="StateSteps.cs"];
m62_194 [label="Assert.IsTrue(Redis.Client.SetContainsItem(''hangfire:queues'', queue))", span="303-303", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StateSteps.cs"];
m62_195 [label="Exit HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", span="301-301", cluster="HangFire.Tests.States.StateSteps.ThenTheQueueWasAddedToTheQueuesSet(string)", file="StateSteps.cs"];
m62_196 [label="Entry Unk.SetContainsItem", span="", cluster="Unk.SetContainsItem", file="StateSteps.cs"];
m62_293 [label="Assert.AreEqual(table.RowCount, _stateAppliedResults.Count)", span="428-428", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m62_294 [label="var i = 0", span="430-430", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", color=green, community=0, file="StateSteps.cs"];
m62_295 [label="i < table.RowCount", span="430-430", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m62_66 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="78-78", cluster="lambda expression", file="StateSteps.cs"];
m62_67 [label="Commit(sql, x => x.PersistJob(jobId))", span="80-80", cluster="lambda expression", color=red, community=0, file="StateSteps.cs"];
m62_68 [label="var job = GetTestJob(sql, jobId)", span="82-82", cluster="lambda expression", file="StateSteps.cs"];
m62_10 [label="Entry lambda expression", span="20-20", cluster="lambda expression", file="StateSteps.cs"];
m62_11 [label="x.GetJobQueue(It.IsNotNull<IDbConnection>())", span="20-20", cluster="lambda expression", file="StateSteps.cs"];
m62_12 [label="Exit lambda expression", span="20-20", cluster="lambda expression", file="StateSteps.cs"];
m62_22 [label="Exit lambda expression", span="30-30", cluster="lambda expression", file="StateSteps.cs"];
m62_513 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="214-214", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="StateSteps.cs"];
m62_441 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="StateSteps.cs"];
m62_52 [label="Entry lambda expression", span="82-82", cluster="lambda expression", file="StateSteps.cs"];
m62_18 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", span="27-27", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Ctor_ThrowsAnException_IfConnectionIsNull()", file="StateSteps.cs"];
m62_64 [label="Entry lambda expression", span="75-87", cluster="lambda expression", file="StateSteps.cs"];
m62_40 [label="Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)))", span="57-57", cluster="lambda expression", file="StateSteps.cs"];
m62_677 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_678 [label="UseConnection(sql =>\r\n            {\r\n                var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.ExpireSet(null, TimeSpan.FromSeconds(45))));\r\n\r\n                Assert.Equal(''key'', exception.ParamName);\r\n            })", span="784-790", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_679 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", span="782-782", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_ThrowsAnException_WhenKeyIsNull()", file="StateSteps.cs"];
m62_0 [label="Entry HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="37-37", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StateSteps.cs"];
m62_3 [label="Entry HangFire.States.SucceededState.SucceededState(string)", span="12-12", cluster="HangFire.States.SucceededState.SucceededState(string)", file="StateSteps.cs"];
m62_2 [label="Exit HangFire.Tests.States.StateSteps.GivenTheSucceededState()", span="37-37", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StateSteps.cs"];
m62_1 [label="_state = new SucceededState(''Some reason'')", span="39-39", cluster="HangFire.Tests.States.StateSteps.GivenTheSucceededState()", file="StateSteps.cs"];
m62_4 [label="Entry HangFire.Tests.States.StateSteps.GivenTheFailedState()", span="43-43", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StateSteps.cs"];
m62_236 [label="Exit lambda expression", span="243-243", cluster="lambda expression", file="StateSteps.cs"];
m62_237 [label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="139-139", cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="StateSteps.cs"];
m62_238 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateSteps.cs"];
m62_5 [label="_failedException = new InvalidOperationException(''Hello'')", span="45-45", cluster="HangFire.Tests.States.StateSteps.GivenTheFailedState()", file="StateSteps.cs"];
m62_830 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="StateSteps.cs"];
m62_832 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''list-1'', expireAt = DateTime.UtcNow.AddDays(1) },\r\n                    new { key = ''list-2'', expireAt = DateTime.UtcNow.AddDays(1) }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.PersistList(''list-1''));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[List]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.Null(records[''list-1'']);\r\n                Assert.NotNull(records[''list-2'']);\r\n            })", span="953-969", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="StateSteps.cs"];
m62_831 [label="string arrangeSql = @''\r\ninsert into HangFire.[List] ([Key], [ExpireAt])\r\nvalues (@key, @expireAt)''", span="949-951", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="StateSteps.cs"];
m62_833 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", span="947-947", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.PersistList_ClearsExpirationTime_OnAGivenHash()", file="StateSteps.cs"];
m62_692 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="StateSteps.cs"];
m62_694 [label="UseConnection(sql =>\r\n            {\r\n                // Arrange\r\n                sql.Execute(arrangeSql, new[]\r\n                {\r\n                    new { key = ''set-1'', value = ''1'' },\r\n                    new { key = ''set-2'', value = ''1'' }\r\n                });\r\n\r\n                // Act\r\n                Commit(sql, x => x.ExpireSet(''set-1'', TimeSpan.FromMinutes(60)));\r\n\r\n                // Assert\r\n                var records = sql.Query(''select * from HangFire.[Set]'').ToDictionary(x => (string)x.Key, x => (DateTime?)x.ExpireAt);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(59) < records[''set-1'']);\r\n                Assert.True(records[''set-1''] < DateTime.UtcNow.AddMinutes(61));\r\n                Assert.Null(records[''set-2'']);\r\n            })", span="800-817", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="StateSteps.cs"];
m62_693 [label="string arrangeSql = @''\r\ninsert into HangFire.[Set] ([Key], [Value], [Score])\r\nvalues (@key, @value, 0.0)''", span="796-798", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="StateSteps.cs"];
m62_695 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", span="794-794", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireSet_SetsExpirationTime_OnASet_WithGivenKey()", file="StateSteps.cs"];
m62_264 [label="x.DecrementCounter(''my-key'')", span="280-280", cluster="lambda expression", file="StateSteps.cs"];
m62_265 [label="x.DecrementCounter(''my-key'')", span="281-281", cluster="lambda expression", file="StateSteps.cs", color=green, community=0];
m62_266 [label="Exit lambda expression", span="278-282", cluster="lambda expression", file="StateSteps.cs"];
m62_80 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                var state = new Mock<IState>();\r\n                state.Setup(x => x.Name).Returns(''State'');\r\n                state.Setup(x => x.Reason).Returns(''Reason'');\r\n                state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } });\r\n\r\n                Commit(sql, x => x.SetJobState(jobId, state.Object));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.Equal(''State'', job.StateName);\r\n                Assert.NotNull(job.StateId);\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.StateName);\r\n                Assert.Null(anotherJob.StateId);\r\n\r\n                var jobState = sql.Query(''select * from HangFire.State'').Single();\r\n                Assert.Equal((string)jobId, jobState.JobId.ToString());\r\n                Assert.Equal(''State'', jobState.Name);\r\n                Assert.Equal(''Reason'', jobState.Reason);\r\n                Assert.NotNull(jobState.CreatedAt);\r\n                Assert.Equal(''{\''Name\'':\''Value\''}'', jobState.Data);\r\n            })", span="98-125", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="StateSteps.cs", color=green, community=0];
m62_81 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", span="91-91", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.SetJobState_AppendsAStateAndSetItToTheJob()", file="StateSteps.cs"];
m62_82 [label="Entry lambda expression", span="98-125", cluster="lambda expression", file="StateSteps.cs"];
m62_83 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="100-100", cluster="lambda expression", file="StateSteps.cs"];
m62_84 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="101-101", cluster="lambda expression", file="StateSteps.cs"];
m62_271 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value''))", span="295-295", cluster="lambda expression", file="StateSteps.cs"];
m62_272 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="297-297", cluster="lambda expression", file="StateSteps.cs"];
m62_274 [label="Assert.Equal(''my-value'', record.Value)", span="300-300", cluster="lambda expression", file="StateSteps.cs"];
m62_275 [label="Assert.Equal(0.0, record.Score, 2)", span="301-301", cluster="lambda expression", file="StateSteps.cs"];
m62_273 [label="Assert.Equal(''my-key'', record.Key)", span="299-299", cluster="lambda expression", file="StateSteps.cs"];
m62_276 [label="Exit lambda expression", span="293-302", cluster="lambda expression", file="StateSteps.cs"];
m62_277 [label="Entry lambda expression", span="295-295", cluster="lambda expression", file="StateSteps.cs"];
m62_28 [label="Exit HangFire.Tests.States.StateSteps.GivenAState(string)", span="68-68", cluster="HangFire.Tests.States.StateSteps.GivenAState(string)", file="StateSteps.cs"];
m62_34 [label="UseConnection(sql =>\r\n            {\r\n                var jobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n                var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString();\r\n\r\n                Commit(sql, x => x.ExpireJob(jobId, TimeSpan.FromDays(1)));\r\n\r\n                var job = GetTestJob(sql, jobId);\r\n                Assert.True(DateTime.UtcNow.AddMinutes(-1) < job.ExpireAt && job.ExpireAt <= DateTime.UtcNow.AddDays(1));\r\n\r\n                var anotherJob = GetTestJob(sql, anotherJobId);\r\n                Assert.Null(anotherJob.ExpireAt);\r\n            })", span="52-64", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="StateSteps.cs"];
m62_37 [label="Entry lambda expression", span="52-64", cluster="lambda expression", file="StateSteps.cs"];
m62_35 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", span="45-45", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.ExpireJob_SetsJobExpirationData()", file="StateSteps.cs"];
m62_36 [label="Entry Unk.UseConnection", span="", cluster="Unk.UseConnection", file="StateSteps.cs"];
m62_38 [label="var jobId = sql.Query(arrangeSql).Single().Id.ToString()", span="54-54", cluster="lambda expression", file="StateSteps.cs"];
m62_39 [label="var anotherJobId = sql.Query(arrangeSql).Single().Id.ToString()", span="55-55", cluster="lambda expression", file="StateSteps.cs"];
m62_49 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", span="980-980", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.Commit(SqlConnection, System.Action<Hangfire.SqlServer.SqlServerWriteOnlyTransaction>)", file="StateSteps.cs"];
m62_55 [label="Entry lambda expression", span="57-57", cluster="lambda expression", file="StateSteps.cs"];
m62_51 [label="Entry System.DateTime.AddMinutes(double)", span="0-0", cluster="System.DateTime.AddMinutes(double)", file="StateSteps.cs"];
m62_53 [label="Entry Unk.True", span="", cluster="Unk.True", file="StateSteps.cs"];
m62_54 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="StateSteps.cs"];
m62_56 [label="x.ExpireJob(jobId, TimeSpan.FromDays(1))", span="57-57", cluster="lambda expression", file="StateSteps.cs"];
m62_57 [label="Exit lambda expression", span="57-57", cluster="lambda expression", file="StateSteps.cs"];
m62_125 [label="var state = new Mock<IState>()", span="140-140", cluster="lambda expression", file="StateSteps.cs"];
m62_126 [label="state.Setup(x => x.Name).Returns(''State'')", span="141-141", cluster="lambda expression", file="StateSteps.cs"];
m62_127 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="142-142", cluster="lambda expression", file="StateSteps.cs"];
m62_128 [label="state.Setup(x => x.SerializeData())\r\n                    .Returns(new Dictionary<string, string> { { ''Name'', ''Value'' } })", span="143-144", cluster="lambda expression", file="StateSteps.cs", color=green, community=0];
m62_146 [label="Entry lambda expression", span="143-143", cluster="lambda expression", file="StateSteps.cs"];
m62_147 [label="x.SerializeData()", span="143-143", cluster="lambda expression", file="StateSteps.cs"];
m62_148 [label="Exit lambda expression", span="143-143", cluster="lambda expression", file="StateSteps.cs"];
m62_149 [label="Entry lambda expression", span="146-146", cluster="lambda expression", file="StateSteps.cs"];
m62_221 [label="x.IncrementCounter(''my-key'')", span="228-228", cluster="lambda expression", file="StateSteps.cs"];
m62_222 [label="x.IncrementCounter(''my-key'')", span="229-229", cluster="lambda expression", file="StateSteps.cs"];
m62_223 [label="Exit lambda expression", span="226-230", cluster="lambda expression", file="StateSteps.cs"];
m62_224 [label="Entry Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="StateSteps.cs"];
m62_227 [label="Entry lambda expression", span="241-250", cluster="lambda expression", file="StateSteps.cs"];
m62_225 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key''));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.Equal((DateTime?)null, record.ExpireAt);\r\n            })", span="241-250", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="StateSteps.cs"];
m62_226 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", span="239-239", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_AddsRecordToCounterTable_WithNegativeValue()", file="StateSteps.cs"];
m62_228 [label="Commit(sql, x => x.DecrementCounter(''my-key''))", span="243-243", cluster="lambda expression", file="StateSteps.cs"];
m62_229 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="245-245", cluster="lambda expression", file="StateSteps.cs"];
m62_233 [label="Exit lambda expression", span="241-250", cluster="lambda expression", file="StateSteps.cs"];
m62_234 [label="Entry lambda expression", span="243-243", cluster="lambda expression", file="StateSteps.cs"];
m62_235 [label="x.DecrementCounter(''my-key'')", span="243-243", cluster="lambda expression", file="StateSteps.cs"];
m62_239 [label="UseConnection(sql =>\r\n            {\r\n                Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)));\r\n\r\n                var record = sql.Query(''select * from HangFire.Counter'').Single();\r\n\r\n                Assert.Equal(''my-key'', record.Key);\r\n                Assert.Equal(-1, record.Value);\r\n                Assert.NotNull(record.ExpireAt);\r\n\r\n                var expireAt = (DateTime)record.ExpireAt;\r\n\r\n                Assert.True(DateTime.UtcNow.AddHours(23) < expireAt);\r\n                Assert.True(expireAt < DateTime.UtcNow.AddHours(25));\r\n            })", span="256-270", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateSteps.cs", color=green, community=0];
m62_240 [label="Exit Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", span="254-254", cluster="Hangfire.SqlServer.Tests.SqlServerWriteOnlyTransactionFacts.DecrementCounter_WithExpiry_AddsARecord_WithExpirationTimeSet()", file="StateSteps.cs"];
m62_241 [label="Entry lambda expression", span="256-270", cluster="lambda expression", file="StateSteps.cs"];
m62_242 [label="Commit(sql, x => x.DecrementCounter(''my-key'', TimeSpan.FromDays(1)))", span="258-258", cluster="lambda expression", file="StateSteps.cs"];
m62_245 [label="Assert.Equal(-1, record.Value)", span="263-263", cluster="lambda expression", file="StateSteps.cs"];
m62_243 [label="var record = sql.Query(''select * from HangFire.Counter'').Single()", span="260-260", cluster="lambda expression", file="StateSteps.cs"];
m62_244 [label="Assert.Equal(''my-key'', record.Key)", span="262-262", cluster="lambda expression", file="StateSteps.cs"];
m62_246 [label="Assert.NotNull(record.ExpireAt)", span="264-264", cluster="lambda expression", file="StateSteps.cs"];
m62_247 [label="var expireAt = (DateTime)record.ExpireAt", span="266-266", cluster="lambda expression", file="StateSteps.cs"];
m62_251 [label="Entry lambda expression", span="258-258", cluster="lambda expression", file="StateSteps.cs"];
m62_252 [label="x.DecrementCounter(''my-key'', TimeSpan.FromDays(1))", span="258-258", cluster="lambda expression", file="StateSteps.cs"];
m62_253 [label="Exit lambda expression", span="258-258", cluster="lambda expression", file="StateSteps.cs"];
m62_87 [label="state.Setup(x => x.Reason).Returns(''Reason'')", span="105-105", cluster="lambda expression", color=green, community=0, file="StateSteps.cs"];
m62_85 [label="Entry Unk.CreateTransaction", span="", cluster="Unk.CreateTransaction", file="StateSteps.cs"];
m62_86 [label="Entry Unk.Apply", span="", cluster="Unk.Apply", file="StateSteps.cs"];
m62_88 [label="Entry HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", span="128-128", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="StateSteps.cs"];
m62_108 [label="var stateMachine = new StateMachine(\r\n                Redis.Client, _descriptors, _stateChangingFilters, _stateAppliedFilters)", span="162-163", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StateSteps.cs", color=red, community=0];
m62_91 [label="StateMachine.Descriptors[_state.StateName]\r\n                        .Unapply(transaction, JobSteps.DefaultJobId)", span="134-135", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", color=green, community=0, file="StateSteps.cs"];
m62_90 [label="StateMachine.Descriptors.ContainsKey(_state.StateName)", span="132-132", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="StateSteps.cs"];
m62_92 [label="transaction.Commit()", span="138-138", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="StateSteps.cs"];
m62_109 [label="stateMachine.ChangeState(jobId, _stateMocks[state].Object)", span="164-164", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", color=green, community=0, file="StateSteps.cs"];
m62_110 [label="Exit HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", span="160-160", cluster="HangFire.Tests.States.StateSteps.WhenIChangeTheStateOfTheJobToThe(string, string)", file="StateSteps.cs"];
m62_123 [label="Exit HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", span="183-183", cluster="HangFire.Tests.States.StateSteps.ThenItShouldExpireTheJob()", file="StateSteps.cs"];
m62_129 [label="Entry Unk.GetTimeToLive", span="", cluster="Unk.GetTimeToLive", file="StateSteps.cs"];
m62_289 [label="Entry Unk.GetAllItemsFromList", span="", cluster="Unk.GetAllItemsFromList", file="StateSteps.cs"];
m62_296 [label="Assert.AreEqual(table.Rows[i][''Method''], _stateAppliedResults[i])", span="432-432", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m62_308 [label="Entry lambda expression", span="342-351", cluster="lambda expression", file="StateSteps.cs"];
m62_311 [label="Assert.Equal(''my-key'', record.Key)", span="348-348", cluster="lambda expression", color=green, community=0, file="StateSteps.cs"];
m62_310 [label="var record = sql.Query(''select * from HangFire.[Set]'').Single()", span="346-346", cluster="lambda expression", file="StateSteps.cs"];
m62_312 [label="Assert.Equal(''my-value'', record.Value)", span="349-349", cluster="lambda expression", file="StateSteps.cs"];
m62_347 [label="Entry lambda expression", span="391-402", cluster="lambda expression", file="StateSteps.cs"];
m62_348 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''different-value'');\r\n                })", span="393-397", cluster="lambda expression", color=green, community=0, file="StateSteps.cs"];
m62_349 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="399-399", cluster="lambda expression", file="StateSteps.cs"];
m62_352 [label="Entry lambda expression", span="393-397", cluster="lambda expression", file="StateSteps.cs"];
m62_359 [label="Entry lambda expression", span="408-419", cluster="lambda expression", file="StateSteps.cs"];
m62_360 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''different-key'', ''my-value'');\r\n                })", span="410-414", cluster="lambda expression", color=green, community=0, file="StateSteps.cs"];
m62_361 [label="var recordCount = sql.Query<int>(''select count(*) from HangFire.[Set]'').Single()", span="416-416", cluster="lambda expression", file="StateSteps.cs"];
m62_364 [label="Entry lambda expression", span="410-414", cluster="lambda expression", file="StateSteps.cs"];
m62_21 [label="Exit HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", span="62-62", cluster="HangFire.Tests.States.StateSteps.GivenTheEnqueueStateWithTheValueForTheQueueArgument()", file="StateSteps.cs"];
m62_41 [label="Entry HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", span="78-78", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs"];
m62_43 [label="_stateProperties = table.Rows.ToDictionary(x => x[''Name''], x => x[''Value''])", span="82-82", cluster="HangFire.Tests.States.StateSteps.GivenAStateWithTheFollowingProperties(string, Table)", file="StateSteps.cs"];
m62_70 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="StateSteps.cs"];
m62_89 [label="var transaction = Redis.Client.CreateTransaction()", span="130-130", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="StateSteps.cs"];
m62_93 [label="Exit HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", span="128-128", cluster="HangFire.Tests.States.StateSteps.WhenAfterIUnapplyIt()", file="StateSteps.cs"];
m62_130 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="StateSteps.cs"];
m62_198 [label="var job = Redis.Client.GetAllEntriesFromHash(String.Format(''hangfire:job:{0}'', JobSteps.DefaultJobId))", span="309-309", cluster="HangFire.Tests.States.StateSteps.ThenTheJobStateIsChangedTo(string)", file="StateSteps.cs"];
m62_216 [label="Entry Unk.>", span="", cluster="Unk.>", file="StateSteps.cs"];
m62_297 [label="i++", span="430-430", cluster="HangFire.Tests.States.StateSteps.ThenStateAppliedFilterMethodsWereExecutedInTheFollowingOrder(Table)", file="StateSteps.cs"];
m62_309 [label="Commit(sql, x => x.AddToSet(''my-key'', ''my-value'', 3.2))", span="344-344", cluster="lambda expression", file="StateSteps.cs"];
m62_323 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.AddToSet(''my-key'', ''my-value'', 3.2);\r\n                })", span="359-363", cluster="lambda expression", file="StateSteps.cs"];
m62_335 [label="Commit(sql, x =>\r\n                {\r\n                    x.AddToSet(''my-key'', ''my-value'');\r\n                    x.RemoveFromSet(''my-key'', ''my-value'');\r\n                })", span="376-380", cluster="lambda expression", file="StateSteps.cs"];
m62_372 [label="Commit(sql, x => x.InsertToList(''my-key'', ''my-value''))", span="427-427", cluster="lambda expression", file="StateSteps.cs"];
m62_385 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                })", span="441-445", cluster="lambda expression", file="StateSteps.cs"];
m62_397 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''my-value'');\r\n                })", span="458-463", cluster="lambda expression", file="StateSteps.cs"];
m62_411 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''my-key'', ''different-value'');\r\n                })", span="476-480", cluster="lambda expression", file="StateSteps.cs"];
m62_423 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''my-value'');\r\n                    x.RemoveFromList(''different-key'', ''my-value'');\r\n                })", span="493-497", cluster="lambda expression", file="StateSteps.cs"];
m62_435 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.InsertToList(''my-key'', ''3'');\r\n                    x.TrimList(''my-key'', 1, 2);\r\n                })", span="510-517", cluster="lambda expression", file="StateSteps.cs"];
m62_454 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.InsertToList(''my-key'', ''1'');\r\n                    x.InsertToList(''my-key'', ''2'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="532-538", cluster="lambda expression", file="StateSteps.cs"];
m62_468 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 100);\r\n                })", span="551-555", cluster="lambda expression", file="StateSteps.cs"];
m62_480 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''my-key'', 1, 0);\r\n                })", span="568-572", cluster="lambda expression", file="StateSteps.cs"];
m62_492 [label="Commit(sql, x =>\r\n                {\r\n                    x.InsertToList(''my-key'', ''0'');\r\n                    x.TrimList(''another-key'', 1, 0);\r\n                })", span="585-589", cluster="lambda expression", file="StateSteps.cs"];
m62_504 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>())))", span="602-603", cluster="lambda expression", file="StateSteps.cs"];
m62_508 [label="Commit(sql, x => x.SetRangeInHash(null, new Dictionary<string, string>()))", span="603-603", cluster="lambda expression", file="StateSteps.cs"];
m62_518 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.SetRangeInHash(''some-hash'', null)))", span="614-615", cluster="lambda expression", file="StateSteps.cs"];
m62_522 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', null))", span="615-615", cluster="lambda expression", file="StateSteps.cs"];
m62_531 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="626-630", cluster="lambda expression", file="StateSteps.cs"];
m62_550 [label="Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.RemoveHash(null)))", span="647-648", cluster="lambda expression", file="StateSteps.cs"];
m62_553 [label="Commit(sql, x => x.RemoveHash(null))", span="648-648", cluster="lambda expression", file="StateSteps.cs"];
m62_563 [label="Commit(sql, x => x.SetRangeInHash(''some-hash'', new Dictionary<string, string>\r\n                {\r\n                    { ''Key1'', ''Value1'' },\r\n                    { ''Key2'', ''Value2'' }\r\n                }))", span="658-662", cluster="lambda expression", file="StateSteps.cs"];
m62_564 [label="Commit(sql, x => x.RemoveHash(''some-hash''))", span="665-665", cluster="lambda expression", file="StateSteps.cs"];
m62_578 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(null, new List<string>())))", span="678-679", cluster="lambda expression", file="StateSteps.cs"];
m62_582 [label="Commit(sql, x => x.AddRangeToSet(null, new List<string>()))", span="679-679", cluster="lambda expression", file="StateSteps.cs"];
m62_593 [label="var exception = Assert.Throws<ArgumentNullException>(\r\n                    () => Commit(sql, x => x.AddRangeToSet(''my-set'', null)))", span="690-691", cluster="lambda expression", file="StateSteps.cs"];
m62_597 [label="Commit(sql, x => x.AddRangeToSet(''my-set'', null))", span="691-691", cluster="lambda expression", file="StateSteps.cs"];
m62_607 [label="Commit(sql, x => x.AddRangeToSet(''my-set'', items))", span="704-704", cluster="lambda expression", file="StateSteps.cs"];
}
