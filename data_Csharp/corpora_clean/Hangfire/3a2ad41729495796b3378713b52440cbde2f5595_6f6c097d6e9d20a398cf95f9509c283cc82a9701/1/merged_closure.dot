digraph  {
n12 [label="HangFire.Tests.JobInvokerTests.CorrectJob", span=""];
n13 [label="HangFire.Tests.JobInvokerTests.ArgumentsJob", span=""];
n14 [label="HangFire.Tests.JobInvokerTests.DisposableJob", span=""];
n0 [cluster="HangFire.Tests.JobInvokerTests.CorrectJob.Perform()", label="Entry HangFire.Tests.JobInvokerTests.CorrectJob.Perform()", span="183-183"];
n1 [cluster="HangFire.Tests.JobInvokerTests.CorrectJob.Perform()", label="Performed = true", span="185-185"];
n2 [cluster="HangFire.Tests.JobInvokerTests.CorrectJob.Perform()", label="Exit HangFire.Tests.JobInvokerTests.CorrectJob.Perform()", span="183-183"];
n3 [cluster="HangFire.Tests.JobInvokerTests.ArgumentsJob.Perform(int, string)", label="Entry HangFire.Tests.JobInvokerTests.ArgumentsJob.Perform(int, string)", span="194-194"];
n4 [cluster="HangFire.Tests.JobInvokerTests.ArgumentsJob.Perform(int, string)", label="A = a", span="196-196"];
n5 [cluster="HangFire.Tests.JobInvokerTests.ArgumentsJob.Perform(int, string)", label="B = b", span="197-197"];
n6 [cluster="HangFire.Tests.JobInvokerTests.ArgumentsJob.Perform(int, string)", label="Exit HangFire.Tests.JobInvokerTests.ArgumentsJob.Perform(int, string)", span="194-194"];
n7 [cluster="HangFire.Tests.JobInvokerTests.DisposableJob.Perform()", label="Entry HangFire.Tests.JobInvokerTests.DisposableJob.Perform()", span="205-205"];
n8 [cluster="HangFire.Tests.JobInvokerTests.DisposableJob.Perform()", label="Exit HangFire.Tests.JobInvokerTests.DisposableJob.Perform()", span="205-205"];
n9 [cluster="HangFire.Tests.JobInvokerTests.DisposableJob.Dispose()", label="Entry HangFire.Tests.JobInvokerTests.DisposableJob.Dispose()", span="209-209"];
n10 [cluster="HangFire.Tests.JobInvokerTests.DisposableJob.Dispose()", label="Disposed = true", span="211-211"];
n11 [cluster="HangFire.Tests.JobInvokerTests.DisposableJob.Dispose()", label="Exit HangFire.Tests.JobInvokerTests.DisposableJob.Dispose()", span="209-209"];
m1_123 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255"];
m1_128 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerMonitoringApi.cs", label="return _connection.Query<string>(\r\n                @''select top 1 Value from HangFire.[Set] where [Key] = @key and Score between @from and @to order by Score'',\r\n                new { key, from = fromScore, to = toScore })\r\n                .SingleOrDefault();", span="260-263"];
m1_126 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerMonitoringApi.cs", label="toScore < fromScore", span="258-258"];
m1_124 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerMonitoringApi.cs", label="key == null", span="257-257"];
m1_127 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentException(''The `toScore` value must be higher or equal to the `fromScore` value.'');", span="258-258"];
m1_125 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="257-257"];
m1_129 [cluster="Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetFirstByLowestScoreFromSet(string, double, double)", span="255-255"];
m1_2 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", span="44-44"];
m1_7 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerMonitoringApi.cs", label="_connection = connection", span="53-53"];
m1_8 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerMonitoringApi.cs", label="_isolationLevel = isolationLevel", span="54-54"];
m1_9 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerMonitoringApi.cs", label="_queueProviders = queueProviders", span="55-55"];
m1_10 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerMonitoringApi.cs", label="OwnsConnection = ownsConnection", span="57-57"];
m1_5 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerMonitoringApi.cs", label="queueProviders == null", span="51-51"];
m1_3 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerMonitoringApi.cs", label="connection == null", span="50-50"];
m1_6 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''queueProviders'');", span="51-51"];
m1_4 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''connection'');", span="50-50"];
m1_11 [cluster="Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SqlServerConnection(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection, bool)", span="44-44"];
m1_219 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416"];
m1_223 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerMonitoringApi.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="424-424"];
m1_222 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerMonitoringApi.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.Hash\r\nwhere [Key] = @key''", span="420-422"];
m1_224 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerMonitoringApi.cs", label="!result.HasValue", span="425-425"];
m1_226 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerMonitoringApi.cs", label="return result.Value - DateTime.UtcNow;", span="427-427"];
m1_220 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerMonitoringApi.cs", label="key == null", span="418-418"];
m1_225 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerMonitoringApi.cs", label="return TimeSpan.FromSeconds(-1);", span="425-425"];
m1_221 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="418-418"];
m1_227 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashTtl(string)", span="416-416"];
m1_12 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="SqlServerMonitoringApi.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_88 [cluster="Hangfire.Storage.InvocationData.Deserialize()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.InvocationData.Deserialize()", span="40-40"];
m1_157 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301"];
m1_163 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerMonitoringApi.cs", label="_connection.Execute(\r\n                @''merge HangFire.Server with (holdlock) as Target ''\r\n                + @''using (VALUES (@id, @data, @heartbeat)) as Source (Id, Data, Heartbeat) ''\r\n                + @''on Target.Id = Source.Id ''\r\n                + @''when matched then update set Data = Source.Data, LastHeartbeat = Source.Heartbeat ''\r\n                + @''when not matched then insert (Id, Data, LastHeartbeat) values (Source.Id, Source.Data, Source.Heartbeat);'',\r\n                new { id = serverId, data = JobHelper.ToJson(data), heartbeat = DateTime.UtcNow })", span="313-319"];
m1_162 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerMonitoringApi.cs", label="var data = new ServerData\r\n            {\r\n                WorkerCount = context.WorkerCount,\r\n                Queues = context.Queues,\r\n                StartedAt = DateTime.UtcNow,\r\n            }", span="306-311"];
m1_158 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerMonitoringApi.cs", label="serverId == null", span="303-303"];
m1_160 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerMonitoringApi.cs", label="context == null", span="304-304"];
m1_159 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''serverId'');", span="303-303"];
m1_161 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''context'');", span="304-304"];
m1_164 [cluster="Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.AnnounceServer(string, Hangfire.Server.ServerContext)", span="301-301"];
m1_27 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="84-84"];
m1_30 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", color=green, community=0, file="SqlServerMonitoringApi.cs", label="var providers = queues\r\n                .Select(queue => _queueProviders.GetProvider(queue))\r\n                .Distinct()\r\n                .ToArray()", prediction=0, span="88-91"];
m1_28 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerMonitoringApi.cs", label="queues == null || queues.Length == 0", span="86-86"];
m1_31 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerMonitoringApi.cs", label="providers.Length != 1", span="93-93"];
m1_33 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerMonitoringApi.cs", label="var persistentQueue = providers[0].GetJobQueue(_connection)", span="100-100"];
m1_32 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerMonitoringApi.cs", label="throw new InvalidOperationException(String.Format(\r\n                    ''Multiple provider instances registered for queues: {0}. You should choose only one type of persistent queues per server instance.'',\r\n                    String.Join('', '', queues)));", span="95-97"];
m1_34 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerMonitoringApi.cs", label="return persistentQueue.Dequeue(queues, cancellationToken);", span="101-101"];
m1_29 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''queues'');", span="86-86"];
m1_35 [cluster="Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.FetchNextJob(string[], System.Threading.CancellationToken)", span="84-84"];
m1_46 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m1_242 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453"];
m1_249 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", color=green, community=0, file="SqlServerMonitoringApi.cs", label="return result.Value - DateTime.UtcNow;", prediction=1, span="464-464"];
m1_246 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerMonitoringApi.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="461-461"];
m1_247 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerMonitoringApi.cs", label="!result.HasValue", span="462-462"];
m1_245 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerMonitoringApi.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.List\r\nwhere [Key] = @key''", span="457-459"];
m1_248 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerMonitoringApi.cs", label="return TimeSpan.FromSeconds(-1);", span="462-462"];
m1_244 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="455-455"];
m1_243 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerMonitoringApi.cs", label="key == null", span="455-455"];
m1_250 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListTtl(string)", span="453-453"];
m1_13 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Dispose()", span="63-63"];
m1_14 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerMonitoringApi.cs", label=OwnsConnection, span="65-65"];
m1_15 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerMonitoringApi.cs", label="_connection.Dispose()", span="67-67"];
m1_16 [cluster="Hangfire.SqlServer.SqlServerConnection.Dispose()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.Dispose()", span="63-63"];
m1_171 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331"];
m1_174 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerMonitoringApi.cs", label="_connection.Execute(\r\n                @''update HangFire.Server set LastHeartbeat = @now where Id = @id'',\r\n                new { now = DateTime.UtcNow, id = serverId })", span="335-337"];
m1_172 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerMonitoringApi.cs", label="serverId == null", span="333-333"];
m1_173 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''serverId'');", span="333-333"];
m1_175 [cluster="Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.Heartbeat(string)", span="331-331"];
m1_190 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361"];
m1_194 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerMonitoringApi.cs", label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="372-374"];
m1_193 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerMonitoringApi.cs", label="var query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] ASC) as row_num \r\n	from Hangfire.[Set]\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="365-370"];
m1_191 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerMonitoringApi.cs", label="key == null", span="363-363"];
m1_192 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="363-363"];
m1_195 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromSet(string, int, int)", span="361-361"];
m1_257 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483"];
m1_261 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerMonitoringApi.cs", label="return _connection.Query<string>(query, new { key = key }).ToList();", span="492-492"];
m1_260 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerMonitoringApi.cs", label="string query = @''\r\nselect [Value] from Hangfire.List\r\nwhere [Key] = @key\r\norder by [Id] desc''", span="487-490"];
m1_258 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerMonitoringApi.cs", label="key == null", span="485-485"];
m1_259 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="485-485"];
m1_262 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromList(string)", span="483-483"];
m1_213 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405"];
m1_217 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerMonitoringApi.cs", label="return _connection.Query<long>(query, new { key = key }).Single();", span="413-413"];
m1_216 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerMonitoringApi.cs", label="string query = @''\r\nselect count([Id]) from HangFire.Hash\r\nwhere [Key] = @key''", span="409-411"];
m1_214 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerMonitoringApi.cs", label="key == null", span="407-407"];
m1_215 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="407-407"];
m1_218 [cluster="Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetHashCount(string)", span="405-405"];
m1_150 [cluster="Unk.ToDictionary", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToDictionary", span=""];
m1_101 [cluster="Hangfire.Storage.StateData.StateData()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.StateData.StateData()", span="21-21"];
m1_165 [cluster="Hangfire.SqlServer.Entities.ServerData.ServerData()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.Entities.ServerData.ServerData()", span="20-20"];
m1_26 [cluster="string.Format(string, object)", file="SqlServerMonitoringApi.cs", label="Entry string.Format(string, object)", span="0-0"];
m1_21 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="39-39"];
m1_71 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154"];
m1_74 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", color=green, community=0, file="SqlServerMonitoringApi.cs", label="string sql = \r\n                @''select InvocationData, StateName, Arguments, CreatedAt from HangFire.Job where Id = @id''", prediction=2, span="158-159"];
m1_72 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="id == null", span="156-156"];
m1_75 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="var jobData = _connection.Query<SqlJob>(sql, new { id = id })\r\n                .SingleOrDefault()", span="161-162"];
m1_73 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''id'');", span="156-156"];
m1_76 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="jobData == null", span="164-164"];
m1_78 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="var invocationData = JobHelper.FromJson<InvocationData>(jobData.InvocationData)", span="167-167"];
m1_79 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="invocationData.Arguments = jobData.Arguments", span="168-168"];
m1_85 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="return new JobData\r\n            {\r\n                Job = job,\r\n                State = jobData.StateName,\r\n                CreatedAt = jobData.CreatedAt,\r\n                LoadException = loadException\r\n            };", span="182-188"];
m1_77 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="return null;", span="164-164"];
m1_82 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="job = invocationData.Deserialize()", span="175-175"];
m1_80 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="Job job = null", span="170-170"];
m1_84 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="loadException = ex", span="179-179"];
m1_81 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="JobLoadException loadException = null", span="171-171"];
m1_83 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label=JobLoadException, span="177-177"];
m1_86 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobData(string)", span="154-154"];
m1_144 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289"];
m1_147 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerMonitoringApi.cs", label="var result = _connection.Query<SqlHash>(\r\n                ''select Field, Value from HangFire.Hash with (forceseek) where [Key] = @key'',\r\n                new { key })\r\n                .ToDictionary(x => x.Field, x => x.Value)", span="293-296"];
m1_145 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerMonitoringApi.cs", label="key == null", span="291-291"];
m1_148 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerMonitoringApi.cs", label="return result.Count != 0 ? result : null;", span="298-298"];
m1_146 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="291-291"];
m1_149 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllEntriesFromHash(string)", span="289-289"];
m1_22 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="76-76"];
m1_23 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="return new SqlServerDistributedLock(\r\n                String.Format(''HangFire:{0}'', resource),\r\n                timeout,\r\n                _connection);", span="78-81"];
m1_24 [cluster="Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.AcquireDistributedLock(string, System.TimeSpan)", span="76-76"];
m1_67 [cluster="Unk.>", file="SqlServerMonitoringApi.cs", label="Entry Unk.>", span=""];
m1_183 [cluster="System.TimeSpan.Negate()", file="SqlServerMonitoringApi.cs", label="Entry System.TimeSpan.Negate()", span="0-0"];
m1_102 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219"];
m1_107 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerMonitoringApi.cs", label="_connection.Execute(\r\n                @''merge HangFire.JobParameter with (holdlock) as Target ''\r\n                + @''using (VALUES (@jobId, @name, @value)) as Source (JobId, Name, Value) ''\r\n                + @''on Target.JobId = Source.JobId AND Target.Name = Source.Name ''\r\n                + @''when matched then update set Value = Source.Value ''\r\n                + @''when not matched then insert (JobId, Name, Value) values (Source.JobId, Source.Name, Source.Value);'',\r\n                new { jobId = id, name, value })", span="224-230"];
m1_105 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerMonitoringApi.cs", label="name == null", span="222-222"];
m1_103 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerMonitoringApi.cs", label="id == null", span="221-221"];
m1_106 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''name'');", span="222-222"];
m1_104 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''id'');", span="221-221"];
m1_108 [cluster="Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetJobParameter(string, string, string)", span="219-219"];
m1_130 [cluster="System.ArgumentException.ArgumentException(string)", file="SqlServerMonitoringApi.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m1_40 [cluster="string.Join(string, params string[])", file="SqlServerMonitoringApi.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m1_206 [cluster="System.TimeSpan.FromSeconds(double)", file="SqlServerMonitoringApi.cs", label="Entry System.TimeSpan.FromSeconds(double)", span="0-0"];
m1_64 [cluster="Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.InvocationData.Serialize(Hangfire.Common.Job)", span="67-67"];
m1_197 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377"];
m1_201 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerMonitoringApi.cs", label="var result = _connection.Query<DateTime?>(query, new { key = key }).Single()", span="385-385"];
m1_200 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerMonitoringApi.cs", label="string query = @''\r\nselect min([ExpireAt]) from HangFire.[Set]\r\nwhere [Key] = @key''", span="381-383"];
m1_202 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerMonitoringApi.cs", label="!result.HasValue", span="386-386"];
m1_204 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerMonitoringApi.cs", label="return result.Value - DateTime.UtcNow;", span="388-388"];
m1_198 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerMonitoringApi.cs", label="key == null", span="379-379"];
m1_203 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerMonitoringApi.cs", label="return TimeSpan.FromSeconds(-1);", span="386-386"];
m1_199 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="379-379"];
m1_205 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetTtl(string)", span="377-377"];
m1_207 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391"];
m1_211 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerMonitoringApi.cs", label="return _connection.Query<long?>(query, new { key = key }).Single() ?? 0;", span="402-402"];
m1_210 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerMonitoringApi.cs", label="string query = @''\r\nselect sum(s.[Value]) from (select sum([Value]) as [Value] from HangFire.Counter\r\nwhere [Key] = @key\r\nunion all\r\nselect [Value] from HangFire.AggregatedCounter\r\nwhere [Key] = @key) as s''", span="395-400"];
m1_208 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerMonitoringApi.cs", label="key == null", span="393-393"];
m1_209 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="393-393"];
m1_212 [cluster="Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetCounter(string)", span="391-391"];
m1_38 [cluster="Unk.ToArray", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToArray", span=""];
m1_142 [cluster="TransactionScope.cstr", file="SqlServerMonitoringApi.cs", label="Entry TransactionScope.cstr", span=""];
m1_69 [cluster="Unk.ToString", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToString", span=""];
m1_109 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233"];
m1_114 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerMonitoringApi.cs", label="return _connection.Query<string>(\r\n                @''select Value from HangFire.JobParameter where JobId = @id and Name = @name'',\r\n                new { id = id, name = name })\r\n                .SingleOrDefault();", span="238-241"];
m1_112 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerMonitoringApi.cs", label="name == null", span="236-236"];
m1_110 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerMonitoringApi.cs", label="id == null", span="235-235"];
m1_113 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''name'');", span="236-236"];
m1_111 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''id'');", span="235-235"];
m1_115 [cluster="Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetJobParameter(string, string)", span="233-233"];
m1_166 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322"];
m1_169 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerMonitoringApi.cs", label="_connection.Execute(\r\n                @''delete from HangFire.Server where Id = @id'',\r\n                new { id = serverId })", span="326-328"];
m1_167 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerMonitoringApi.cs", label="serverId == null", span="324-324"];
m1_168 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''serverId'');", span="324-324"];
m1_170 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveServer(string)", span="322-322"];
m1_25 [cluster="SqlServerDistributedLock.cstr", file="SqlServerMonitoringApi.cs", label="Entry SqlServerDistributedLock.cstr", span=""];
m1_66 [cluster="System.DateTime.Add(System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m1_39 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="SqlServerMonitoringApi.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m1_100 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", file="SqlServerMonitoringApi.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
m1_143 [cluster="Unk.Complete", file="SqlServerMonitoringApi.cs", label="Entry Unk.Complete", span=""];
m1_90 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191"];
m1_93 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", color=green, community=0, file="SqlServerMonitoringApi.cs", label="string sql = @''\r\nselect s.Name, s.Reason, s.Data\r\nfrom HangFire.State s\r\ninner join HangFire.Job j on j.StateId = s.Id\r\nwhere j.Id = @jobId''", prediction=3, span="195-199"];
m1_91 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerMonitoringApi.cs", label="jobId == null", span="193-193"];
m1_94 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerMonitoringApi.cs", label="var sqlState = _connection.Query<SqlState>(sql, new { jobId = jobId }).SingleOrDefault()", span="201-201"];
m1_92 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''jobId'');", span="193-193"];
m1_95 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerMonitoringApi.cs", label="sqlState == null", span="202-202"];
m1_97 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerMonitoringApi.cs", label="var data = new Dictionary<string, string>(\r\n                JobHelper.FromJson<Dictionary<string, string>>(sqlState.Data),\r\n                StringComparer.OrdinalIgnoreCase)", span="207-209"];
m1_98 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerMonitoringApi.cs", label="return new StateData\r\n            {\r\n                Name = sqlState.Name,\r\n                Reason = sqlState.Reason,\r\n                Data = data\r\n            };", span="211-216"];
m1_96 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerMonitoringApi.cs", label="return null;", span="204-204"];
m1_99 [cluster="Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetStateData(string)", span="191-191"];
m1_251 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467"];
m1_255 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerMonitoringApi.cs", label="return _connection\r\n                .Query<string>(query, new { key = key, startingFrom = startingFrom + 1, endingAt = endingAt + 1 })\r\n                .ToList();", span="478-480"];
m1_254 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerMonitoringApi.cs", label="string query = @''\r\nselect [Value] from (\r\n	select [Value], row_number() over (order by [Id] desc) as row_num \r\n	from Hangfire.List\r\n	where [Key] = @key \r\n) as s where s.row_num between @startingFrom and @endingAt''", span="471-476"];
m1_252 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerMonitoringApi.cs", label="key == null", span="469-469"];
m1_253 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="469-469"];
m1_256 [cluster="Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetRangeFromList(string, int, int)", span="467-467"];
m1_17 [cluster="Unk.Dispose", file="SqlServerMonitoringApi.cs", label="Entry Unk.Dispose", span=""];
m1_181 [cluster="System.TimeSpan.Duration()", file="SqlServerMonitoringApi.cs", label="Entry System.TimeSpan.Duration()", span="0-0"];
m1_47 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="104-104"];
m1_54 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="var jobId = _connection.Query<int>(\r\n                createJobSql,\r\n                new\r\n                {\r\n                    invocationData = JobHelper.ToJson(invocationData),\r\n                    arguments = invocationData.Arguments,\r\n                    createdAt = createdAt,\r\n                    expireAt = createdAt.Add(expireIn)\r\n                }).Single().ToString()", span="120-128"];
m1_61 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="_connection.Execute(insertParameterSql, parameterArray)", span="148-148"];
m1_53 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="var invocationData = InvocationData.Serialize(job)", span="118-118"];
m1_52 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="string createJobSql = @''\r\ninsert into HangFire.Job (InvocationData, Arguments, CreatedAt, ExpireAt)\r\nvalues (@invocationData, @arguments, @createdAt, @expireAt);\r\nSELECT CAST(SCOPE_IDENTITY() as int)''", span="113-116"];
m1_55 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="parameters.Count > 0", span="130-130"];
m1_59 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="parameterArray[parameterIndex++] = new\r\n                    {\r\n                        jobId = jobId,\r\n                        name = parameter.Key,\r\n                        value = parameter.Value\r\n                    }", span="136-141"];
m1_62 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="return jobId;", span="151-151"];
m1_56 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="var parameterArray = new object[parameters.Count]", span="132-132"];
m1_60 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="string insertParameterSql = @''\r\ninsert into HangFire.JobParameter (JobId, Name, Value)\r\nvalues (@jobId, @name, @value)''", span="144-146"];
m1_48 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="job == null", span="110-110"];
m1_50 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="parameters == null", span="111-111"];
m1_58 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label=parameters, span="134-134"];
m1_57 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="int parameterIndex = 0", span="133-133"];
m1_49 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''job'');", span="110-110"];
m1_51 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''parameters'');", span="111-111"];
m1_63 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.CreateExpiredJob(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, System.DateTime, System.TimeSpan)", span="104-104"];
m1_65 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m1_131 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266"];
m1_139 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerMonitoringApi.cs", label="_connection.Execute(sql, new { key = key, field = keyValuePair.Key, value = keyValuePair.Value })", span="282-282"];
m1_138 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerMonitoringApi.cs", label=keyValuePairs, span="280-280"];
m1_136 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerMonitoringApi.cs", label="string sql = @''\r\nmerge HangFire.Hash with (holdlock) as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="271-276"];
m1_132 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerMonitoringApi.cs", label="key == null", span="268-268"];
m1_134 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerMonitoringApi.cs", label="keyValuePairs == null", span="269-269"];
m1_137 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerMonitoringApi.cs", label="var transaction = new TransactionScope()", span="278-278"];
m1_140 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerMonitoringApi.cs", label="transaction.Complete()", span="285-285"];
m1_133 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="268-268"];
m1_135 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''keyValuePairs'');", span="269-269"];
m1_141 [cluster="Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="266-266"];
m1_154 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="296-296"];
m1_43 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="89-89"];
m1_44 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="_queueProviders.GetProvider(queue)", span="89-89"];
m1_45 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="89-89"];
m1_151 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Entry lambda expression", span="296-296"];
m1_153 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="296-296"];
m1_152 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Field", span="296-296"];
m1_155 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="x.Value", span="296-296"];
m1_156 [cluster="lambda expression", file="SqlServerMonitoringApi.cs", label="Exit lambda expression", span="296-296"];
m1_37 [cluster="Unk.Distinct", file="SqlServerMonitoringApi.cs", label="Entry Unk.Distinct", span=""];
m1_228 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430"];
m1_234 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerMonitoringApi.cs", label="return _connection.Query<string>(query, new { key = key, field = name }).SingleOrDefault();", span="439-439"];
m1_233 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerMonitoringApi.cs", label="string query = @''\r\nselect [Value] from HangFire.Hash\r\nwhere [Key] = @key and [Field] = @field''", span="435-437"];
m1_229 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerMonitoringApi.cs", label="key == null", span="432-432"];
m1_231 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerMonitoringApi.cs", label="name == null", span="433-433"];
m1_230 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="432-432"];
m1_232 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''name'');", span="433-433"];
m1_235 [cluster="Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetValueFromHash(string, string)", span="430-430"];
m1_189 [cluster="Unk.First", file="SqlServerMonitoringApi.cs", label="Entry Unk.First", span=""];
m1_18 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71"];
m1_19 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerMonitoringApi.cs", label="return new SqlServerWriteOnlyTransaction(_connection, _isolationLevel, _queueProviders);", span="73-73"];
m1_20 [cluster="Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.CreateWriteTransaction()", span="71-71"];
m1_42 [cluster="Unk.Dequeue", file="SqlServerMonitoringApi.cs", label="Entry Unk.Dequeue", span=""];
m1_36 [cluster="Unk.Select", file="SqlServerMonitoringApi.cs", label="Entry Unk.Select", span=""];
m1_89 [cluster="Hangfire.Storage.JobData.JobData()", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.Storage.JobData.JobData()", span="21-21"];
m1_184 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352"];
m1_187 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerMonitoringApi.cs", label="return _connection.Query<int>(\r\n                ''select count([Key]) from HangFire.[Set] where [Key] = @key'',\r\n                new { key = key }).First();", span="356-358"];
m1_185 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerMonitoringApi.cs", label="key == null", span="354-354"];
m1_186 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="354-354"];
m1_188 [cluster="Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetSetCount(string)", span="352-352"];
m1_68 [cluster="Unk.Single", file="SqlServerMonitoringApi.cs", label="Entry Unk.Single", span=""];
m1_182 [cluster="System.ArgumentException.ArgumentException(string, string)", file="SqlServerMonitoringApi.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m1_196 [cluster="Unk.ToList", file="SqlServerMonitoringApi.cs", label="Entry Unk.ToList", span=""];
m1_70 [cluster="Unk.Execute", file="SqlServerMonitoringApi.cs", label="Entry Unk.Execute", span=""];
m1_41 [cluster="Unk.GetJobQueue", file="SqlServerMonitoringApi.cs", label="Entry Unk.GetJobQueue", span=""];
m1_122 [cluster="HashSet<string>.cstr", file="SqlServerMonitoringApi.cs", label="Entry HashSet<string>.cstr", span=""];
m1_116 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244"];
m1_119 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerMonitoringApi.cs", label="var result = _connection.Query<string>(\r\n                @''select Value from HangFire.[Set] where [Key] = @key'',\r\n                new { key })", span="248-250"];
m1_117 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerMonitoringApi.cs", label="key == null", span="246-246"];
m1_120 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerMonitoringApi.cs", label="return new HashSet<string>(result);", span="252-252"];
m1_118 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="246-246"];
m1_121 [cluster="Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetAllItemsFromSet(string)", span="244-244"];
m1_236 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442"];
m1_240 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerMonitoringApi.cs", label="return _connection.Query<long>(query, new { key = key }).Single();", span="450-450"];
m1_239 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerMonitoringApi.cs", label="string query = @''\r\nselect count([Id]) from HangFire.List\r\nwhere [Key] = @key''", span="446-448"];
m1_237 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerMonitoringApi.cs", label="key == null", span="444-444"];
m1_238 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentNullException(''key'');", span="444-444"];
m1_241 [cluster="Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.GetListCount(string)", span="442-442"];
m1_87 [cluster="Unk.SingleOrDefault", file="SqlServerMonitoringApi.cs", label="Entry Unk.SingleOrDefault", span=""];
m1_176 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="Entry Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340"];
m1_179 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="return _connection.Execute(\r\n                @''delete from HangFire.Server where LastHeartbeat < @timeOutAt'',\r\n                new { timeOutAt = DateTime.UtcNow.Add(timeOut.Negate()) });", span="347-349"];
m1_177 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="timeOut.Duration() != timeOut", span="342-342"];
m1_178 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="throw new ArgumentException(''The `timeOut` value must be positive.'', ''timeOut'');", span="344-344"];
m1_180 [cluster="Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", file="SqlServerMonitoringApi.cs", label="Exit Hangfire.SqlServer.SqlServerConnection.RemoveTimedOutServers(System.TimeSpan)", span="340-340"];
m1_263 [file="SqlServerMonitoringApi.cs", label="Hangfire.SqlServer.SqlServerConnection", span=""];
m1_123 -> m1_126  [color=darkseagreen4, key=1, label=double, style=dashed];
m1_2 -> m1_5  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection", style=dashed];
m1_223 -> m1_226  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_157 -> m1_160  [color=darkseagreen4, key=1, label="Hangfire.Server.ServerContext", style=dashed];
m1_27 -> m1_32  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_27 -> m1_34  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m1_30 -> m1_43  [color=green, key=1, label="lambda expression", style=dashed];
m1_246 -> m1_249  [color=green, key=1, label=result, style=dashed];
m1_147 -> m1_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_147 -> m1_154  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_102 -> m1_105  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_201 -> m1_204  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_109 -> m1_112  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_47 -> m1_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_47 -> m1_55  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_47 -> m1_58  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, string>", style=dashed];
m1_54 -> m1_62  [color=darkseagreen4, key=1, label=jobId, style=dashed];
m1_56 -> m1_61  [color=darkseagreen4, key=1, label=parameterArray, style=dashed];
m1_131 -> m1_134  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m1_131 -> m1_138  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m1_137 -> m1_140  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m1_228 -> m1_231  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_177 -> m1_177  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_263 -> m1_14  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m1_263 -> m1_15  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m1_263 -> m1_19  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m1_263 -> m1_23  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m1_263 -> m1_44  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
m1_263 -> m1_61  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerConnection", style=dashed];
}
