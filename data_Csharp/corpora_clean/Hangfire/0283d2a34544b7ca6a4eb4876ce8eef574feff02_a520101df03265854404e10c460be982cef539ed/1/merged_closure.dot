digraph  {
n3 [label="HangFire.Filters.ClientExceptionContext", span=""];
n0 [cluster="HangFire.Filters.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", label="Entry HangFire.Filters.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", span="8-8"];
n1 [cluster="HangFire.Filters.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", label="Exception = exception", span="11-11"];
n2 [cluster="HangFire.Filters.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", label="Exit HangFire.Filters.ClientExceptionContext.ClientExceptionContext(HangFire.Client.CreateContext, System.Exception)", span="8-8"];
m0_98 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", span="216-216"];
m0_99 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When a client filter handles an exception, it should not be thrown outside'', ((string[])(null)))", prediction=0, span="218-218"];
m0_100 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=1, span="220-220"];
m0_101 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="this.FeatureBackground()", prediction=1, span="222-222"];
m0_102 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.Given(''the client filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=3, span="224-224"];
m0_103 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''the client filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=4, span="226-226"];
m0_104 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''the client filter \'third\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=5, span="228-228"];
m0_105 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=6, span="230-230"];
m0_106 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", prediction=7, span="232-233"];
m0_107 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''first::OnCreating''})", prediction=8, span="234-235"];
m0_108 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''second::OnCreating''})", prediction=7, span="236-237"];
m0_109 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''third::OnCreating''})", prediction=7, span="238-239"];
m0_110 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''second::OnCreated''})", prediction=7, span="240-241"];
m0_111 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="table5.AddRow(new string[] {\r\n                        ''first::OnCreated''})", prediction=7, span="242-243"];
m0_112 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.Then(''the client filter methods should be executed in the following order:'', ((string)(null)), table5, ''Then '')", prediction=7, span="245-245"];
m0_113 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''an exception should not be thrown by the client'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=14, span="247-247"];
m0_114 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", prediction=1, span="249-249"];
m0_115 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.WhenAClientFilterHandlesAnExceptionItShouldNotBeThrownOutside()", span="216-216"];
m0_51 [cluster="Unk.Then", file="ClientFilters.feature.cs", label="Entry Unk.Then", span=""];
m0_33 [cluster="Unk.Given", file="ClientFilters.feature.cs", label="Entry Unk.Given", span=""];
m0_53 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", span="114-114"];
m0_55 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="118-118"];
m0_54 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple client filters should be executed depending on their order'', ((string[])(null)))", span="116-116"];
m0_56 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="this.FeatureBackground()", span="120-120"];
m0_66 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", span="141-141"];
m0_57 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="testRunner.Given(''the client filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="122-122"];
m0_58 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="testRunner.And(''the client filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="124-124"];
m0_59 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="126-126"];
m0_65 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="testRunner.Then(''the client filter methods should be executed in the following order:'', ((string)(null)), table2, ''Then '')", span="139-139"];
m0_60 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="128-129"];
m0_61 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''first::OnCreating''})", span="130-131"];
m0_62 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''second::OnCreating''})", span="132-133"];
m0_63 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''second::OnCreated''})", span="134-135"];
m0_64 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table2.AddRow(new string[] {\r\n                        ''first::OnCreated''})", span="136-137"];
m0_67 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.MultipleClientFiltersShouldBeExecutedDependingOnTheirOrder()", span="114-114"];
m0_48 [cluster="Unk.When", file="ClientFilters.feature.cs", label="Entry Unk.When", span=""];
m0_25 [cluster="Unk.OnScenarioStart", file="ClientFilters.feature.cs", label="Entry Unk.OnScenarioStart", span=""];
m0_29 [cluster="Unk.CollectScenarioErrors", file="ClientFilters.feature.cs", label="Entry Unk.CollectScenarioErrors", span=""];
m0_26 [cluster="HangFire.Tests.ClientFiltersFeature.ScenarioCleanup()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.ScenarioCleanup()", span="67-67"];
m0_27 [cluster="HangFire.Tests.ClientFiltersFeature.ScenarioCleanup()", file="ClientFilters.feature.cs", label="testRunner.CollectScenarioErrors()", span="69-69"];
m0_28 [cluster="HangFire.Tests.ClientFiltersFeature.ScenarioCleanup()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.ScenarioCleanup()", span="67-67"];
m0_49 [cluster="TechTalk.SpecFlow.Table.cstr", file="ClientFilters.feature.cs", label="Entry TechTalk.SpecFlow.Table.cstr", span=""];
m0_50 [cluster="Unk.AddRow", file="ClientFilters.feature.cs", label="Entry Unk.AddRow", span=""];
m0_30 [cluster="HangFire.Tests.ClientFiltersFeature.FeatureBackground()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.FeatureBackground()", span="72-72"];
m0_31 [cluster="HangFire.Tests.ClientFiltersFeature.FeatureBackground()", file="ClientFilters.feature.cs", label="testRunner.Given(''a client'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="76-76"];
m0_32 [cluster="HangFire.Tests.ClientFiltersFeature.FeatureBackground()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.FeatureBackground()", span="72-72"];
m0_68 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", span="148-148"];
m0_69 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When client filter cancels the creation of the job, it should not be created'', ((string[])(null)))", prediction=16, span="150-150"];
m0_70 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=1, span="152-152"];
m0_71 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="this.FeatureBackground()", prediction=1, span="154-154"];
m0_72 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.Given(''the client filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=19, span="156-156"];
m0_73 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''the client filter \'second\' that cancels the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=20, span="158-158"];
m0_74 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''the client filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=21, span="160-160"];
m0_75 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=22, span="162-162"];
m0_76 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.Then(''the storage should not contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=23, span="164-164"];
m0_77 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", prediction=24, span="166-167"];
m0_78 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''first::OnCreating''})", prediction=25, span="168-169"];
m0_79 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''second::OnCreating''})", prediction=24, span="170-171"];
m0_80 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="table3.AddRow(new string[] {\r\n                        ''first::OnCreated (with the canceled flag set)''})", prediction=24, span="172-173"];
m0_81 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''only the following client filter methods should be executed:'', ((string)(null)), table3, ''And '')", prediction=24, span="175-175"];
m0_82 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", color=green, community=0, file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", prediction=1, span="177-177"];
m0_83 [cluster="HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.WhenClientFilterCancelsTheCreationOfTheJobItShouldNotBeCreated()", span="148-148"];
m0_127 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", span="283-283"];
m0_128 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Multiple exception filters should be executed depending on their order'', ((string[])(null)))", prediction=30, span="285-285"];
m0_129 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=1, span="287-287"];
m0_130 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="this.FeatureBackground()", prediction=1, span="289-289"];
m0_131 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.Given(''the exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=33, span="291-291"];
m0_132 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''the exception filter \'second\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=34, span="293-293"];
m0_133 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.When(''there is a buggy filter (for example)'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=35, span="295-295"];
m0_134 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=36, span="297-297"];
m0_135 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="299-300"];
m0_140 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", span="310-310"];
m0_139 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="testRunner.And(''the CreateJobFailedException should be thrown by the client'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="308-308"];
m0_138 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="testRunner.Then(''the client exception filters should be executed in the following order:'', ((string)(null)), table6, ''Then '')", span="306-306"];
m0_136 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table6.AddRow(new string[] {\r\n                        ''first''})", span="301-302"];
m0_137 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="table6.AddRow(new string[] {\r\n                        ''second''})", span="303-304"];
m0_141 [cluster="HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.MultipleExceptionFiltersShouldBeExecutedDependingOnTheirOrder()", span="283-283"];
m0_34 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", span="84-84"];
m0_36 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="88-88"];
m0_35 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Client filters should be executed when I create a job'', ((string[])(null)))", span="86-86"];
m0_37 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="this.FeatureBackground()", span="90-90"];
m0_45 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", span="107-107"];
m0_38 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="testRunner.Given(''the client filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="92-92"];
m0_44 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="testRunner.And(''the storage should contain the job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="105-105"];
m0_39 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="94-94"];
m0_43 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="testRunner.Then(''the client filter methods should be executed in the following order:'', ((string)(null)), table1, ''Then '')", span="103-103"];
m0_40 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", span="96-97"];
m0_41 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''test::OnCreating''})", span="98-99"];
m0_42 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="table1.AddRow(new string[] {\r\n                        ''test::OnCreated''})", span="100-101"];
m0_46 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.ClientFiltersShouldBeExecutedWhenICreateAJob()", span="84-84"];
m0_142 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", span="318-318"];
m0_143 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''When a client exception filter handles an exception, it should not be thrown outs'' +\r\n                    ''ide'', ((string[])(null)))", prediction=37, span="320-321"];
m0_144 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", span="323-323"];
m0_147 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''the exception filter \'second\' that handles an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=38, span="329-329"];
m0_146 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="testRunner.Given(''the exception filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", span="327-327"];
m0_148 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="testRunner.And(''the exception filter \'third\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="331-331"];
m0_153 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", color=green, community=0, file="ClientFilters.feature.cs", label="table7.AddRow(new string[] {\r\n                        ''second''})", prediction=39, span="341-342"];
m0_151 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Filter''})", span="337-338"];
m0_152 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="table7.AddRow(new string[] {\r\n                        ''first''})", span="339-340"];
m0_154 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="table7.AddRow(new string[] {\r\n                        ''third''})", span="343-344"];
m0_145 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="this.FeatureBackground()", span="325-325"];
m0_157 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", span="350-350"];
m0_150 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="testRunner.And(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="335-335"];
m0_156 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="testRunner.And(''an exception should not be thrown by the client'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", span="348-348"];
m0_149 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="testRunner.When(''there is a buggy filter (for example)'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", span="333-333"];
m0_155 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="testRunner.Then(''the following client exception filters should be executed:'', ((string)(null)), table7, ''Then '')", span="346-346"];
m0_158 [cluster="HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.WhenAClientExceptionFilterHandlesAnExceptionItShouldNotBeThrownOutside()", span="318-318"];
m0_84 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", span="184-184"];
m0_85 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Client filter\'s OnCreated could be skipped if there was an exception'', ((string[])(null)))", prediction=40, span="186-186"];
m0_86 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=1, span="188-188"];
m0_87 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="this.FeatureBackground()", prediction=1, span="190-190"];
m0_88 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.Given(''the client filter \'first\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=43, span="192-192"];
m0_89 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''the client filter \'second\' that throws an exception'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=44, span="194-194"];
m0_90 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.When(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=45, span="196-196"];
m0_91 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {\r\n                        ''Method''})", prediction=46, span="198-199"];
m0_92 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="table4.AddRow(new string[] {\r\n                        ''first::OnCreating''})", prediction=47, span="200-201"];
m0_93 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="table4.AddRow(new string[] {\r\n                        ''second::OnCreating''})", prediction=46, span="202-203"];
m0_94 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="table4.AddRow(new string[] {\r\n                        ''first::OnCreated''})", prediction=46, span="204-205"];
m0_95 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.Then(''only the following client filter methods should be executed:'', ((string)(null)), table4, ''Then '')", prediction=46, span="207-207"];
m0_96 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", color=green, community=0, file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", prediction=1, span="209-209"];
m0_97 [cluster="HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.ClientFilterSOnCreatedCouldBeSkippedIfThereWasAnException()", span="184-184"];
m0_22 [cluster="HangFire.Tests.ClientFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m0_23 [cluster="HangFire.Tests.ClientFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ClientFilters.feature.cs", label="testRunner.OnScenarioStart(scenarioInfo)", span="64-64"];
m0_24 [cluster="HangFire.Tests.ClientFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo)", span="62-62"];
m0_47 [cluster="TechTalk.SpecFlow.ScenarioInfo.cstr", file="ClientFilters.feature.cs", label="Entry TechTalk.SpecFlow.ScenarioInfo.cstr", span=""];
m0_52 [cluster="Unk.And", file="ClientFilters.feature.cs", label="Entry Unk.And", span=""];
m0_116 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", file="ClientFilters.feature.cs", label="Entry HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", span="257-257"];
m0_117 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(''Client exception filters should be executed when there was an exception while cre'' +\r\n                    ''ating a job'', ((string[])(null)))", prediction=52, span="259-260"];
m0_118 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="this.ScenarioSetup(scenarioInfo)", prediction=1, span="262-262"];
m0_119 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="this.FeatureBackground()", prediction=1, span="264-264"];
m0_120 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.Given(''the exception filter \'test\''', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Given '')", prediction=55, span="266-266"];
m0_121 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.When(''there is a buggy filter (for example)'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''When '')", prediction=56, span="268-268"];
m0_122 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''I create a job'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=57, span="270-270"];
m0_123 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.Then(''the client exception filter should be executed'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''Then '')", prediction=58, span="272-272"];
m0_124 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="testRunner.And(''the CreateJobFailedException should be thrown by the client'', ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), ''And '')", prediction=59, span="274-274"];
m0_125 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", color=green, community=0, file="ClientFilters.feature.cs", label="this.ScenarioCleanup()", prediction=1, span="276-276"];
m0_126 [cluster="HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", file="ClientFilters.feature.cs", label="Exit HangFire.Tests.ClientFiltersFeature.ClientExceptionFiltersShouldBeExecutedWhenThereWasAnExceptionWhileCreatingAJob()", span="257-257"];
m0_159 [file="ClientFilters.feature.cs", label="HangFire.Tests.ClientFiltersFeature", span=""];
m1_0 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="ClientJobDescriptor.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="27-27"];
m1_1 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="ClientJobDescriptor.cs", label="storage == null", prediction=61, span="29-29"];
m1_3 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="ClientJobDescriptor.cs", label="options == null", prediction=62, span="30-30"];
m1_5 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="ClientJobDescriptor.cs", label="_storage = storage", prediction=63, span="32-32"];
m1_9 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue()", file="ClientJobDescriptor.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue()", span="38-38"];
m1_10 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueue()", color=green, community=0, file="ClientJobDescriptor.cs", label="return new SqlServerJobQueue(_storage, _options);", prediction=64, span="40-40"];
m1_12 [cluster="Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", file="ClientJobDescriptor.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueue.SqlServerJobQueue(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", span="32-32"];
m1_2 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="ClientJobDescriptor.cs", label="throw new ArgumentNullException(''storage'');", prediction=65, span="29-29"];
m1_4 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.SqlServerJobQueueProvider(Hangfire.SqlServer.SqlServerStorage, Hangfire.SqlServer.SqlServerStorageOptions)", color=green, community=0, file="ClientJobDescriptor.cs", label="throw new ArgumentNullException(''options'');", prediction=66, span="30-30"];
m1_13 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi()", file="ClientJobDescriptor.cs", label="Entry Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi()", span="43-43"];
m1_14 [cluster="Hangfire.SqlServer.SqlServerJobQueueProvider.GetJobQueueMonitoringApi()", color=green, community=0, file="ClientJobDescriptor.cs", label="return new SqlServerJobQueueMonitoringApi(_storage);", prediction=67, span="45-45"];
m1_30 [cluster="HangFire.JobHelper.FromJson<T>(string)", file="ClientJobDescriptor.cs", label="Entry HangFire.JobHelper.FromJson<T>(string)", span="44-44"];
m1_24 [cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="ClientJobDescriptor.cs", label="Entry HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", span="44-44"];
m1_27 [cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="ClientJobDescriptor.cs", label="return _jobParameters.ContainsKey(name)\r\n                ? JobHelper.FromJson<T>(_jobParameters[name])\r\n                : default(T);", span="48-50"];
m1_28 [cluster="HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", file="ClientJobDescriptor.cs", label="Exit HangFire.Client.ClientJobDescriptor.GetParameter<T>(string)", span="44-44"];
m1_16 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs", label="Entry HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="34-34"];
m1_21 [cluster="string.IsNullOrEmpty(string)", file="ClientJobDescriptor.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m1_15 [cluster="HangFire.States.StateMachine.StateMachine(IRedisClient)", file="ClientJobDescriptor.cs", label="Entry HangFire.States.StateMachine.StateMachine(IRedisClient)", span="32-32"];
m1_34 [cluster="HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", file="ClientJobDescriptor.cs", label="Entry HangFire.States.StateMachine.CreateInState(string, System.Collections.Generic.IDictionary<string, string>, HangFire.States.JobState)", span="58-58"];
m1_31 [cluster="HangFire.Client.ClientJobDescriptor.Create()", file="ClientJobDescriptor.cs", label="Entry HangFire.Client.ClientJobDescriptor.Create()", span="53-53"];
m1_33 [cluster="HangFire.Client.ClientJobDescriptor.Create()", file="ClientJobDescriptor.cs", label="Exit HangFire.Client.ClientJobDescriptor.Create()", span="53-53"];
m1_22 [cluster="HangFire.JobHelper.ToJson(object)", file="ClientJobDescriptor.cs", label="Entry HangFire.JobHelper.ToJson(object)", span="39-39"];
m1_29 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="ClientJobDescriptor.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m1_23 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", file="ClientJobDescriptor.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m1_19 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs", label="_jobParameters.Add(name, JobHelper.ToJson(value))", span="41-41"];
m1_20 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="ClientJobDescriptor.cs", label="Exit HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="34-34"];
m1_35 [file="ClientJobDescriptor.cs", label="HangFire.Client.ClientJobDescriptor", span=""];
m2_5 [cluster="HangFire.Web.CombinedResourceHandler.WriteResponse()", file="CombinedResourceHandler.cs", label="Entry HangFire.Web.CombinedResourceHandler.WriteResponse()", span="20-20"];
m2_6 [cluster="HangFire.Web.CombinedResourceHandler.WriteResponse()", file="CombinedResourceHandler.cs", label=_resourceNames, span="22-22"];
m2_7 [cluster="HangFire.Web.CombinedResourceHandler.WriteResponse()", file="CombinedResourceHandler.cs", label="WriteResource(\r\n                    _assembly,\r\n                    string.Format(''{0}.{1}'', _baseNamespace, resourceName))", span="24-26"];
m2_8 [cluster="HangFire.Web.CombinedResourceHandler.WriteResponse()", file="CombinedResourceHandler.cs", label="Exit HangFire.Web.CombinedResourceHandler.WriteResponse()", span="20-20"];
m2_10 [cluster="HangFire.Web.EmbeddedResourceHandler.WriteResource(System.Reflection.Assembly, string)", file="CombinedResourceHandler.cs", label="Entry HangFire.Web.EmbeddedResourceHandler.WriteResource(System.Reflection.Assembly, string)", span="34-34"];
m2_0 [cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", file="CombinedResourceHandler.cs", label="Entry HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", span="10-10"];
m2_1 [cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", file="CombinedResourceHandler.cs", label="_assembly = assembly", span="15-15"];
m2_2 [cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", file="CombinedResourceHandler.cs", label="_baseNamespace = baseNamespace", span="16-16"];
m2_3 [cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", file="CombinedResourceHandler.cs", label="_resourceNames = resourceNames", span="17-17"];
m2_4 [cluster="HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", file="CombinedResourceHandler.cs", label="Exit HangFire.Web.CombinedResourceHandler.CombinedResourceHandler(System.Reflection.Assembly, string, params string[])", span="10-10"];
m2_9 [cluster="string.Format(string, object, object)", file="CombinedResourceHandler.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m2_11 [file="CombinedResourceHandler.cs", label="HangFire.Web.CombinedResourceHandler", span=""];
m3_0 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="CreateContext.cs", label="Entry HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", span="6-6"];
m3_1 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="CreateContext.cs", label="Items = context.Items", span="9-9"];
m3_2 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", file="CreateContext.cs", label="Exit HangFire.Client.CreateContext.CreateContext(HangFire.Client.CreateContext)", span="6-6"];
m3_7 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="CreateContext.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m3_3 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", file="CreateContext.cs", label="Entry HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", span="12-12"];
m3_4 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", file="CreateContext.cs", label="JobDescriptor = jobDescriptor", span="14-14"];
m3_5 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", file="CreateContext.cs", label="Items = new Dictionary<string, object>()", span="15-15"];
m3_6 [cluster="HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", file="CreateContext.cs", label="Exit HangFire.Client.CreateContext.CreateContext(HangFire.Client.ClientJobDescriptor)", span="12-12"];
m3_8 [file="CreateContext.cs", label="HangFire.Client.CreateContext", span=""];
m4_27 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="CreatedContext.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m4_28 [cluster="Hangfire.Client.JobCreationProcess.GetFilters(Hangfire.Common.Job)", file="CreatedContext.cs", label="Entry Hangfire.Client.JobCreationProcess.GetFilters(Hangfire.Common.Job)", span="67-67"];
m4_32 [cluster="Hangfire.Client.JobCreationProcess.GetFilters(Hangfire.Common.Job)", file="CreatedContext.cs", label="return new JobFilterInfo(_getFiltersThunk(job));", span="69-69"];
m4_33 [cluster="Hangfire.Client.JobCreationProcess.GetFilters(Hangfire.Common.Job)", file="CreatedContext.cs", label="Exit Hangfire.Client.JobCreationProcess.GetFilters(Hangfire.Common.Job)", span="67-67"];
m4_42 [cluster="System.Collections.Generic.IEnumerable<TSource>.Reverse<TSource>()", file="CreatedContext.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Reverse<TSource>()", span="0-0"];
m4_3 [cluster="Hangfire.Client.JobCreationProcess.JobCreationProcess()", file="CreatedContext.cs", label="Entry Hangfire.Client.JobCreationProcess.JobCreationProcess()", span="35-35"];
m4_0 [cluster="Hangfire.Client.JobCreationProcess.JobCreationProcess()", file="CreatedContext.cs", label="Entry Hangfire.Client.JobCreationProcess.JobCreationProcess()", span="27-27"];
m4_1 [cluster="Hangfire.Client.JobCreationProcess.JobCreationProcess()", file="CreatedContext.cs", label="Instance = new JobCreationProcess()", span="29-29"];
m4_2 [cluster="Hangfire.Client.JobCreationProcess.JobCreationProcess()", file="CreatedContext.cs", label="Exit Hangfire.Client.JobCreationProcess.JobCreationProcess()", span="27-27"];
m4_4 [cluster="Hangfire.Client.JobCreationProcess.JobCreationProcess()", file="CreatedContext.cs", label="Exit Hangfire.Client.JobCreationProcess.JobCreationProcess()", span="35-35"];
m4_35 [cluster="System.Func<T, TResult>.Invoke(T)", file="CreatedContext.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m4_75 [cluster="Hangfire.Client.IClientFilter.OnCreated(Hangfire.Client.CreatedContext)", file="CreatedContext.cs", label="Entry Hangfire.Client.IClientFilter.OnCreated(Hangfire.Client.CreatedContext)", span="33-33"];
m4_44 [cluster="Unk.thunk", file="CreatedContext.cs", label="Entry Unk.thunk", span=""];
m4_31 [cluster="Hangfire.Client.JobCreationProcess.InvokeExceptionFilters(Hangfire.Client.ClientExceptionContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientExceptionFilter>)", file="CreatedContext.cs", label="Entry Hangfire.Client.JobCreationProcess.InvokeExceptionFilters(Hangfire.Client.ClientExceptionContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientExceptionFilter>)", span="129-129"];
m4_76 [cluster="Hangfire.Client.JobCreationProcess.InvokeExceptionFilters(Hangfire.Client.ClientExceptionContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientExceptionFilter>)", file="CreatedContext.cs", label="filters.Reverse()", span="132-132"];
m4_77 [cluster="Hangfire.Client.JobCreationProcess.InvokeExceptionFilters(Hangfire.Client.ClientExceptionContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientExceptionFilter>)", file="CreatedContext.cs", label="filter.OnClientException(context)", span="134-134"];
m4_78 [cluster="Hangfire.Client.JobCreationProcess.InvokeExceptionFilters(Hangfire.Client.ClientExceptionContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientExceptionFilter>)", file="CreatedContext.cs", label="Exit Hangfire.Client.JobCreationProcess.InvokeExceptionFilters(Hangfire.Client.ClientExceptionContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientExceptionFilter>)", span="129-129"];
m4_41 [cluster="Hangfire.Client.CreatingContext.CreatingContext(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label="Entry Hangfire.Client.CreatingContext.CreatingContext(Hangfire.Client.CreateContext)", span="24-24"];
m4_43 [cluster="Unk.Aggregate", file="CreatedContext.cs", label="Entry Unk.Aggregate", span=""];
m4_73 [cluster="Hangfire.Client.IClientFilter.OnCreating(Hangfire.Client.CreatingContext)", file="CreatedContext.cs", label="Entry Hangfire.Client.IClientFilter.OnCreating(Hangfire.Client.CreatingContext)", span="27-27"];
m4_16 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label="Entry Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", span="45-45"];
m4_17 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label="context == null", span="47-47"];
m4_19 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label="var filterInfo = GetFilters(context.Job)", span="49-49"];
m4_20 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label="CreateWithFilters(context, filterInfo.ClientFilters)", span="53-53"];
m4_22 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label="var exceptionContext = new ClientExceptionContext(context, ex)", span="57-57"];
m4_18 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label="throw new ArgumentNullException(''context'');", span="47-47"];
m4_23 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label="InvokeExceptionFilters(exceptionContext, filterInfo.ClientExceptionFilters)", span="59-59"];
m4_21 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label=Exception, span="55-55"];
m4_24 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label="!exceptionContext.ExceptionHandled", span="60-60"];
m4_25 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label="throw;", span="62-62"];
m4_26 [cluster="Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", file="CreatedContext.cs", label="Exit Hangfire.Client.JobCreationProcess.Run(Hangfire.Client.CreateContext)", span="45-45"];
m4_50 [cluster="Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, bool, System.Exception)", file="CreatedContext.cs", label="Entry Hangfire.Client.CreatedContext.CreatedContext(Hangfire.Client.CreateContext, bool, System.Exception)", span="26-26"];
m4_79 [cluster="Hangfire.Client.IClientExceptionFilter.OnClientException(Hangfire.Client.ClientExceptionContext)", file="CreatedContext.cs", label="Entry Hangfire.Client.IClientExceptionFilter.OnClientException(Hangfire.Client.ClientExceptionContext)", span="27-27"];
m4_5 [cluster="Hangfire.Client.JobCreationProcess.JobCreationProcess(System.Collections.Generic.IEnumerable<object>)", file="CreatedContext.cs", label="Entry Hangfire.Client.JobCreationProcess.JobCreationProcess(System.Collections.Generic.IEnumerable<object>)", span="39-39"];
m4_6 [cluster="Hangfire.Client.JobCreationProcess.JobCreationProcess(System.Collections.Generic.IEnumerable<object>)", file="CreatedContext.cs", label="_getFiltersThunk = jd => filters.Select(f => new JobFilter(f, JobFilterScope.Type, null))", span="42-42"];
m4_7 [cluster="Hangfire.Client.JobCreationProcess.JobCreationProcess(System.Collections.Generic.IEnumerable<object>)", file="CreatedContext.cs", label="Exit Hangfire.Client.JobCreationProcess.JobCreationProcess(System.Collections.Generic.IEnumerable<object>)", span="39-39"];
m4_53 [cluster="lambda expression", file="CreatedContext.cs", label="Entry lambda expression", span="84-84"];
m4_9 [cluster="lambda expression", file="CreatedContext.cs", label="filters.Select(f => new JobFilter(f, JobFilterScope.Type, null))", span="42-42"];
m4_8 [cluster="lambda expression", file="CreatedContext.cs", label="Entry lambda expression", span="42-42"];
m4_10 [cluster="lambda expression", file="CreatedContext.cs", label="Exit lambda expression", span="42-42"];
m4_12 [cluster="lambda expression", file="CreatedContext.cs", label="Entry lambda expression", span="42-42"];
m4_13 [cluster="lambda expression", file="CreatedContext.cs", label="new JobFilter(f, JobFilterScope.Type, null)", span="42-42"];
m4_14 [cluster="lambda expression", file="CreatedContext.cs", label="Exit lambda expression", span="42-42"];
m4_46 [cluster="lambda expression", file="CreatedContext.cs", label="context.CreateJob()", span="79-79"];
m4_47 [cluster="lambda expression", file="CreatedContext.cs", label="return new CreatedContext(context, false, null);", span="80-80"];
m4_54 [cluster="lambda expression", file="CreatedContext.cs", label="InvokeClientFilter(filter, preContext, next)", span="84-84"];
m4_51 [cluster="lambda expression", file="CreatedContext.cs", label="Entry lambda expression", span="84-84"];
m4_45 [cluster="lambda expression", file="CreatedContext.cs", label="Entry lambda expression", span="77-81"];
m4_48 [cluster="lambda expression", file="CreatedContext.cs", label="Exit lambda expression", span="77-81"];
m4_52 [cluster="lambda expression", file="CreatedContext.cs", label="Exit lambda expression", span="84-84"];
m4_55 [cluster="lambda expression", file="CreatedContext.cs", label="Exit lambda expression", span="84-84"];
m4_49 [cluster="Hangfire.Client.CreateContext.CreateJob()", file="CreatedContext.cs", label="Entry Hangfire.Client.CreateContext.CreateJob()", span="147-147"];
m4_29 [cluster="Hangfire.Client.JobCreationProcess.CreateWithFilters(Hangfire.Client.CreateContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientFilter>)", file="CreatedContext.cs", label="Entry Hangfire.Client.JobCreationProcess.CreateWithFilters(Hangfire.Client.CreateContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientFilter>)", span="72-72"];
m4_36 [cluster="Hangfire.Client.JobCreationProcess.CreateWithFilters(Hangfire.Client.CreateContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientFilter>)", file="CreatedContext.cs", label="var preContext = new CreatingContext(context)", span="76-76"];
m4_37 [cluster="Hangfire.Client.JobCreationProcess.CreateWithFilters(Hangfire.Client.CreateContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientFilter>)", file="CreatedContext.cs", label="Func<CreatedContext> continuation = () =>\r\n            {\r\n                context.CreateJob();\r\n                return new CreatedContext(context, false, null);\r\n            }", span="77-81"];
m4_38 [cluster="Hangfire.Client.JobCreationProcess.CreateWithFilters(Hangfire.Client.CreateContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientFilter>)", file="CreatedContext.cs", label="var thunk = filters.Reverse().Aggregate(continuation,\r\n                (next, filter) => () => InvokeClientFilter(filter, preContext, next))", span="83-84"];
m4_39 [cluster="Hangfire.Client.JobCreationProcess.CreateWithFilters(Hangfire.Client.CreateContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientFilter>)", file="CreatedContext.cs", label="thunk()", span="86-86"];
m4_40 [cluster="Hangfire.Client.JobCreationProcess.CreateWithFilters(Hangfire.Client.CreateContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientFilter>)", file="CreatedContext.cs", label="Exit Hangfire.Client.JobCreationProcess.CreateWithFilters(Hangfire.Client.CreateContext, System.Collections.Generic.IEnumerable<Hangfire.Client.IClientFilter>)", span="72-72"];
m4_56 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="Entry Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", span="89-89"];
m4_57 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="filter.OnCreating(preContext)", span="94-94"];
m4_58 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="preContext.Canceled", span="95-95"];
m4_59 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="return new CreatedContext(\r\n                    preContext, true, null);", span="97-98"];
m4_62 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="postContext = continuation()", span="105-105"];
m4_65 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="postContext = new CreatedContext(\r\n                    preContext, false, ex)", span="110-111"];
m4_66 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="filter.OnCreated(postContext)", span="113-113"];
m4_70 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="filter.OnCreated(postContext)", span="123-123"];
m4_60 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="var wasError = false", span="101-101"];
m4_61 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="CreatedContext postContext", span="102-102"];
m4_63 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label=Exception, span="107-107"];
m4_69 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="!wasError", span="121-121"];
m4_64 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="wasError = true", span="109-109"];
m4_67 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="!postContext.ExceptionHandled", span="115-115"];
m4_71 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="return postContext;", span="126-126"];
m4_68 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="throw;", span="117-117"];
m4_72 [cluster="Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", file="CreatedContext.cs", label="Exit Hangfire.Client.JobCreationProcess.InvokeClientFilter(Hangfire.Client.IClientFilter, Hangfire.Client.CreatingContext, System.Func<Hangfire.Client.CreatedContext>)", span="89-89"];
m4_11 [cluster="Unk.Select", file="CreatedContext.cs", label="Entry Unk.Select", span=""];
m4_30 [cluster="Hangfire.Client.ClientExceptionContext.ClientExceptionContext(Hangfire.Client.CreateContext, System.Exception)", file="CreatedContext.cs", label="Entry Hangfire.Client.ClientExceptionContext.ClientExceptionContext(Hangfire.Client.CreateContext, System.Exception)", span="26-26"];
m4_34 [cluster="Hangfire.Common.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<Hangfire.Common.JobFilter>)", file="CreatedContext.cs", label="Entry Hangfire.Common.JobFilterInfo.JobFilterInfo(System.Collections.Generic.IEnumerable<Hangfire.Common.JobFilter>)", span="40-40"];
m4_15 [cluster="Hangfire.Common.JobFilter.JobFilter(object, Hangfire.Common.JobFilterScope, int?)", file="CreatedContext.cs", label="Entry Hangfire.Common.JobFilter.JobFilter(object, Hangfire.Common.JobFilterScope, int?)", span="38-38"];
m4_74 [cluster="System.Func<TResult>.Invoke()", file="CreatedContext.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m4_80 [file="CreatedContext.cs", label="Hangfire.Client.JobCreationProcess", span=""];
m4_81 [file="CreatedContext.cs", label="System.Collections.Generic.IEnumerable<object>", span=""];
m4_82 [file="CreatedContext.cs", label="Hangfire.Client.CreateContext", span=""];
m4_83 [file="CreatedContext.cs", label=preContext, span=""];
m4_84 [file="CreatedContext.cs", label="System.Func<Hangfire.Client.CreatedContext>", span=""];
m4_85 [file="CreatedContext.cs", label="Hangfire.Client.IClientFilter", span=""];
m5_0 [cluster="HangFire.Filters.CreatingContext.CreatingContext(HangFire.Client.CreateContext)", file="CreatingContext.cs", label="Entry HangFire.Filters.CreatingContext.CreatingContext(HangFire.Client.CreateContext)", span="6-6"];
m5_1 [cluster="HangFire.Filters.CreatingContext.CreatingContext(HangFire.Client.CreateContext)", file="CreatingContext.cs", label="Exit HangFire.Filters.CreatingContext.CreatingContext(HangFire.Client.CreateContext)", span="6-6"];
m6_7 [cluster="System.Lazy<T>.Lazy(System.Func<T>)", file="EmbeddedResourceHandler.cs", label="Entry System.Lazy<T>.Lazy(System.Func<T>)", span="0-0"];
m6_0 [cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", file="EmbeddedResourceHandler.cs", label="Entry Hangfire.Core.Tests.StateContextMock.StateContextMock()", span="10-10"];
m6_1 [cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", file="EmbeddedResourceHandler.cs", label="JobIdValue = ''job-id''", span="12-12"];
m6_2 [cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", file="EmbeddedResourceHandler.cs", label="JobValue = Job.FromExpression(() => Console.WriteLine())", span="13-13"];
m6_3 [cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", file="EmbeddedResourceHandler.cs", label="CreatedAtValue = DateTime.UtcNow", span="14-14"];
m6_4 [cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", file="EmbeddedResourceHandler.cs", label="_context = new Lazy<StateContext>(\r\n                () => new StateContext(JobIdValue, JobValue, CreatedAtValue))", span="16-17"];
m6_5 [cluster="Hangfire.Core.Tests.StateContextMock.StateContextMock()", file="EmbeddedResourceHandler.cs", label="Exit Hangfire.Core.Tests.StateContextMock.StateContextMock()", span="10-10"];
m6_15 [cluster="Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime)", file="EmbeddedResourceHandler.cs", label="Entry Hangfire.States.StateContext.StateContext(string, Hangfire.Common.Job, System.DateTime)", span="24-24"];
m6_11 [cluster="System.Console.WriteLine()", file="EmbeddedResourceHandler.cs", label="Entry System.Console.WriteLine()", span="0-0"];
m6_12 [cluster="lambda expression", file="EmbeddedResourceHandler.cs", label="Entry lambda expression", span="17-17"];
m6_8 [cluster="lambda expression", file="EmbeddedResourceHandler.cs", label="Entry lambda expression", span="13-13"];
m6_9 [cluster="lambda expression", file="EmbeddedResourceHandler.cs", label="Console.WriteLine()", span="13-13"];
m6_10 [cluster="lambda expression", file="EmbeddedResourceHandler.cs", label="Exit lambda expression", span="13-13"];
m6_13 [cluster="lambda expression", file="EmbeddedResourceHandler.cs", label="new StateContext(JobIdValue, JobValue, CreatedAtValue)", span="17-17"];
m6_14 [cluster="lambda expression", file="EmbeddedResourceHandler.cs", label="Exit lambda expression", span="17-17"];
m6_6 [cluster="Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="EmbeddedResourceHandler.cs", label="Entry Hangfire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="148-148"];
m6_16 [file="EmbeddedResourceHandler.cs", label="Hangfire.Core.Tests.StateContextMock", span=""];
m7_6 [cluster="HangFire.Web.GenericHandler.ProcessRequest(HttpContext)", file="GenericHandler.cs", label="Entry HangFire.Web.GenericHandler.ProcessRequest(HttpContext)", span="21-21"];
m7_7 [cluster="HangFire.Web.GenericHandler.ProcessRequest(HttpContext)", file="GenericHandler.cs", label="ProcessRequest()", span="23-23"];
m7_8 [cluster="HangFire.Web.GenericHandler.ProcessRequest(HttpContext)", file="GenericHandler.cs", label="Exit HangFire.Web.GenericHandler.ProcessRequest(HttpContext)", span="21-21"];
m7_3 [cluster="HttpContextWrapper.cstr", file="GenericHandler.cs", label="Entry HttpContextWrapper.cstr", span=""];
m7_0 [cluster="HangFire.Web.GenericHandler.GenericHandler()", file="GenericHandler.cs", label="Entry HangFire.Web.GenericHandler.GenericHandler()", span="6-6"];
m7_1 [cluster="HangFire.Web.GenericHandler.GenericHandler()", file="GenericHandler.cs", label="Context = new HttpContextWrapper(HttpContext.Current)", span="8-8"];
m7_2 [cluster="HangFire.Web.GenericHandler.GenericHandler()", file="GenericHandler.cs", label="Exit HangFire.Web.GenericHandler.GenericHandler()", span="6-6"];
m7_4 [cluster="HangFire.Web.GenericHandler.ProcessRequest()", file="GenericHandler.cs", label="Entry HangFire.Web.GenericHandler.ProcessRequest()", span="19-19"];
m7_5 [cluster="HangFire.Web.GenericHandler.ProcessRequest()", file="GenericHandler.cs", label="Exit HangFire.Web.GenericHandler.ProcessRequest()", span="19-19"];
m7_9 [file="GenericHandler.cs", label="HangFire.Web.GenericHandler", span=""];
m8_22 [cluster="System.Collections.Generic.List<T>.GetEnumerator()", file="GlobalJobFilterCollection.cs", label="Entry System.Collections.Generic.List<T>.GetEnumerator()", span="0-0"];
m8_3 [cluster="System.Collections.Generic.List<T>.Add(T)", file="GlobalJobFilterCollection.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m8_19 [cluster="HangFire.Filters.GlobalJobFilterCollection.GetEnumerator()", file="GlobalJobFilterCollection.cs", label="Entry HangFire.Filters.GlobalJobFilterCollection.GetEnumerator()", span="37-37"];
m8_20 [cluster="HangFire.Filters.GlobalJobFilterCollection.GetEnumerator()", file="GlobalJobFilterCollection.cs", label="return _filters.GetEnumerator();", span="39-39"];
m8_21 [cluster="HangFire.Filters.GlobalJobFilterCollection.GetEnumerator()", file="GlobalJobFilterCollection.cs", label="Exit HangFire.Filters.GlobalJobFilterCollection.GetEnumerator()", span="37-37"];
m8_8 [cluster="HangFire.Filters.GlobalJobFilterCollection.Contains(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs", label="Entry HangFire.Filters.GlobalJobFilterCollection.Contains(HangFire.Filters.IJobFilter)", span="27-27"];
m8_9 [cluster="HangFire.Filters.GlobalJobFilterCollection.Contains(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs", label="return _filters.Contains(filter);", span="29-29"];
m8_10 [cluster="HangFire.Filters.GlobalJobFilterCollection.Contains(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs", label="Exit HangFire.Filters.GlobalJobFilterCollection.Contains(HangFire.Filters.IJobFilter)", span="27-27"];
m8_11 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="GlobalJobFilterCollection.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m8_15 [cluster="System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)", file="GlobalJobFilterCollection.cs", label="Entry System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)", span="0-0"];
m8_0 [cluster="HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs", label="Entry HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", span="17-17"];
m8_1 [cluster="HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs", label="_filters.Add(filter)", span="19-19"];
m8_2 [cluster="HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs", label="Exit HangFire.Filters.GlobalJobFilterCollection.Add(HangFire.Filters.IJobFilter)", span="17-17"];
m8_12 [cluster="HangFire.Filters.GlobalJobFilterCollection.Remove(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs", label="Entry HangFire.Filters.GlobalJobFilterCollection.Remove(HangFire.Filters.IJobFilter)", span="32-32"];
m8_13 [cluster="HangFire.Filters.GlobalJobFilterCollection.Remove(HangFire.Filters.IJobFilter)", color=green, community=0, file="GlobalJobFilterCollection.cs", label="_filters.RemoveAll(x => x == filter)", prediction=68, span="34-34"];
m8_14 [cluster="HangFire.Filters.GlobalJobFilterCollection.Remove(HangFire.Filters.IJobFilter)", file="GlobalJobFilterCollection.cs", label="Exit HangFire.Filters.GlobalJobFilterCollection.Remove(HangFire.Filters.IJobFilter)", span="32-32"];
m8_16 [cluster="lambda expression", file="GlobalJobFilterCollection.cs", label="Entry lambda expression", span="34-34"];
m8_17 [cluster="lambda expression", color=green, community=0, file="GlobalJobFilterCollection.cs", label="x == filter", prediction=69, span="34-34"];
m8_18 [cluster="lambda expression", file="GlobalJobFilterCollection.cs", label="Exit lambda expression", span="34-34"];
m8_7 [cluster="System.Collections.Generic.List<T>.Clear()", file="GlobalJobFilterCollection.cs", label="Entry System.Collections.Generic.List<T>.Clear()", span="0-0"];
m8_4 [cluster="HangFire.Filters.GlobalJobFilterCollection.Clear()", file="GlobalJobFilterCollection.cs", label="Entry HangFire.Filters.GlobalJobFilterCollection.Clear()", span="22-22"];
m8_5 [cluster="HangFire.Filters.GlobalJobFilterCollection.Clear()", file="GlobalJobFilterCollection.cs", label="_filters.Clear()", span="24-24"];
m8_6 [cluster="HangFire.Filters.GlobalJobFilterCollection.Clear()", file="GlobalJobFilterCollection.cs", label="Exit HangFire.Filters.GlobalJobFilterCollection.Clear()", span="22-22"];
m8_23 [cluster="HangFire.Filters.GlobalJobFilterCollection.System.Collections.IEnumerable.GetEnumerator()", file="GlobalJobFilterCollection.cs", label="Entry HangFire.Filters.GlobalJobFilterCollection.System.Collections.IEnumerable.GetEnumerator()", span="42-42"];
m8_24 [cluster="HangFire.Filters.GlobalJobFilterCollection.System.Collections.IEnumerable.GetEnumerator()", file="GlobalJobFilterCollection.cs", label="return GetEnumerator();", span="44-44"];
m8_25 [cluster="HangFire.Filters.GlobalJobFilterCollection.System.Collections.IEnumerable.GetEnumerator()", file="GlobalJobFilterCollection.cs", label="Exit HangFire.Filters.GlobalJobFilterCollection.System.Collections.IEnumerable.GetEnumerator()", span="42-42"];
m8_26 [file="GlobalJobFilterCollection.cs", label="HangFire.Filters.GlobalJobFilterCollection", span=""];
m8_27 [file="GlobalJobFilterCollection.cs", label="HangFire.Filters.IJobFilter", span=""];
m9_0 [cluster="HangFire.GlobalJobFilters.GlobalJobFilters()", file="GlobalJobFilters.cs", label="Entry HangFire.GlobalJobFilters.GlobalJobFilters()", span="6-6"];
m9_1 [cluster="HangFire.GlobalJobFilters.GlobalJobFilters()", file="GlobalJobFilters.cs", label="Filters = new GlobalJobFilterCollection()", span="8-8"];
m9_2 [cluster="HangFire.GlobalJobFilters.GlobalJobFilters()", file="GlobalJobFilters.cs", label="Exit HangFire.GlobalJobFilters.GlobalJobFilters()", span="6-6"];
m9_3 [cluster="HangFire.Filters.GlobalJobFilterCollection.GlobalJobFilterCollection()", file="GlobalJobFilters.cs", label="Entry HangFire.Filters.GlobalJobFilterCollection.GlobalJobFilterCollection()", span="5-5"];
m11_0 [cluster="HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", file="IClientExceptionFilter.cs", label="Entry HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", span="4-4"];
m11_1 [cluster="HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", file="IClientExceptionFilter.cs", label="Exit HangFire.Filters.IClientExceptionFilter.OnClientException(HangFire.Filters.ClientExceptionContext)", span="4-4"];
m12_101 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", span="351-351"];
m12_256 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", file="IClientFilter.cs", label="AcquireLock(String.Format(''Hangfire:Set:Lock''))", span="353-353"];
m12_257 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireSetLock()", span="351-351"];
m12_9 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="IClientFilter.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m12_105 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="183-183"];
m12_106 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="IClientFilter.cs", label="string query = @''delete from HangFire.[Set] where [Key] = @key and Value = @value''", span="185-185"];
m12_108 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                query,\r\n                new { key, value }))", span="188-190"];
m12_107 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="IClientFilter.cs", label="AcquireSetLock()", span="187-187"];
m12_109 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromSet(string, string)", span="183-183"];
m12_49 [cluster="Hangfire.States.IState.SerializeData()", file="IClientFilter.cs", label="Entry Hangfire.States.IState.SerializeData()", span="27-27"];
m12_10 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="52-52"];
m12_11 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="IClientFilter.cs", label="var transaction = CreateTransaction(_isolationLevel)", span="54-54"];
m12_12 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="IClientFilter.cs", label="_connection.EnlistTransaction(Transaction.Current)", span="56-56"];
m12_17 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="IClientFilter.cs", label="transaction.Complete()", span="71-71"];
m12_13 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="IClientFilter.cs", label="_lockedResources.Count > 0", span="58-58"];
m12_14 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="IClientFilter.cs", label="_connection.Execute(\r\n                        ''set nocount on;'' +\r\n                        ''exec sp_getapplock @Resource=@resource, @LockMode=N'Exclusive''',\r\n                        _lockedResources.Select(x => new { resource = x }))", span="60-63"];
m12_15 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="IClientFilter.cs", label=_commandQueue, span="66-66"];
m12_16 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="IClientFilter.cs", label="command(_connection)", span="68-68"];
m12_18 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.Commit()", span="52-52"];
m12_69 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="135-135"];
m12_70 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 }))", span="137-139"];
m12_71 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string)", span="135-135"];
m12_229 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="319-319"];
m12_230 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="IClientFilter.cs", label="key == null", span="321-321"];
m12_234 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="327-327"];
m12_231 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="IClientFilter.cs", label="throw new ArgumentNullException(''key'');", span="321-321"];
m12_232 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="IClientFilter.cs", label="string query = @''\r\nupdate HangFire.[Set] set ExpireAt = null where [Key] = @key''", span="323-324"];
m12_233 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="IClientFilter.cs", label="AcquireSetLock()", span="326-326"];
m12_235 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistSet(string)", span="319-319"];
m12_63 [cluster="Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.PersistentJobQueueProviderCollection.GetProvider(string)", span="53-53"];
m12_239 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="330-330"];
m12_240 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="IClientFilter.cs", label="key == null", span="332-332"];
m12_244 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="338-338"];
m12_241 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="IClientFilter.cs", label="throw new ArgumentNullException(''key'');", span="332-332"];
m12_242 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="IClientFilter.cs", label="string query = @''\r\nupdate HangFire.[List] set ExpireAt = null where [Key] = @key''", span="334-335"];
m12_243 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="IClientFilter.cs", label="AcquireListLock()", span="337-337"];
m12_245 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistList(string)", span="330-330"];
m12_81 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="149-149"];
m12_82 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 }))", span="151-153"];
m12_83 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string)", span="149-149"];
m12_254 [cluster="string.Format(string, params object[])", file="IClientFilter.cs", label="Entry string.Format(string, params object[])", span="0-0"];
m12_255 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", span="361-361"];
m12_260 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="IClientFilter.cs", label="_lockedResources.Add(resource)", span="363-363"];
m12_261 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireLock(string)", span="361-361"];
m12_199 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="286-286"];
m12_200 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="IClientFilter.cs", label="key == null", span="288-288"];
m12_204 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="294-294"];
m12_201 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="IClientFilter.cs", label="throw new ArgumentNullException(''key'');", span="288-288"];
m12_202 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="IClientFilter.cs", label="string query = @''\r\nupdate HangFire.[Set] set ExpireAt = @expireAt where [Key] = @key''", span="290-291"];
m12_203 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="IClientFilter.cs", label="AcquireSetLock()", span="293-293"];
m12_205 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireSet(string, System.TimeSpan)", span="286-286"];
m12_0 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="39-39"];
m12_1 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="IClientFilter.cs", label="connection == null", span="44-44"];
m12_3 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="IClientFilter.cs", label="queueProviders == null", span="45-45"];
m12_5 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="IClientFilter.cs", label="_connection = connection", span="47-47"];
m12_6 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="IClientFilter.cs", label="_isolationLevel = isolationLevel", span="48-48"];
m12_7 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="IClientFilter.cs", label="_queueProviders = queueProviders", span="49-49"];
m12_2 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="IClientFilter.cs", label="throw new ArgumentNullException(''connection'');", span="44-44"];
m12_4 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="IClientFilter.cs", label="throw new ArgumentNullException(''queueProviders'');", span="45-45"];
m12_8 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SqlServerWriteOnlyTransaction(SqlConnection, IsolationLevel?, Hangfire.SqlServer.PersistentJobQueueProviderCollection)", span="39-39"];
m12_145 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", span="356-356"];
m12_258 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="IClientFilter.cs", label="AcquireLock(String.Format(''Hangfire:Hash:Lock''))", span="358-358"];
m12_259 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireHashLock()", span="356-356"];
m12_251 [cluster="System.Collections.Generic.Queue<T>.Enqueue(T)", file="IClientFilter.cs", label="Entry System.Collections.Generic.Queue<T>.Enqueue(T)", span="0-0"];
m12_42 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", span="89-89"];
m12_43 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="IClientFilter.cs", label="string addAndSetStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data);\r\nupdate HangFire.Job set StateId = SCOPE_IDENTITY(), StateName = @name where Id = @id;''", span="91-94"];
m12_44 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                }))", span="96-106"];
m12_45 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetJobState(string, Hangfire.States.IState)", span="89-89"];
m12_209 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="297-297"];
m12_210 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="IClientFilter.cs", label="key == null", span="299-299"];
m12_214 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="305-305"];
m12_211 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="IClientFilter.cs", label="throw new ArgumentNullException(''key'');", span="299-299"];
m12_212 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="IClientFilter.cs", label="string query = @''\r\nupdate HangFire.[List] set ExpireAt = @expireAt where [Key] = @key''", span="301-302"];
m12_213 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="IClientFilter.cs", label="AcquireListLock()", span="304-304"];
m12_215 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireList(string, System.TimeSpan)", span="297-297"];
m12_51 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", span="109-109"];
m12_52 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="IClientFilter.cs", label="string addStateSql = @''\r\ninsert into HangFire.State (JobId, Name, Reason, CreatedAt, Data)\r\nvalues (@jobId, @name, @reason, @createdAt, @data)''", span="111-113"];
m12_53 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                }))", span="115-124"];
m12_54 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddJobState(string, Hangfire.States.IState)", span="109-109"];
m12_68 [cluster="Hangfire.SqlServer.IPersistentJobQueue.Enqueue(string, string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.IPersistentJobQueue.Enqueue(string, string)", span="24-24"];
m12_87 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="156-156"];
m12_88 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="158-160"];
m12_89 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.DecrementCounter(string, System.TimeSpan)", span="156-156"];
m12_179 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="265-265"];
m12_180 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="IClientFilter.cs", label="key == null", span="267-267"];
m12_184 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="272-272"];
m12_181 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="IClientFilter.cs", label="throw new ArgumentNullException(''key'');", span="267-267"];
m12_182 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="IClientFilter.cs", label="string query = @''delete from HangFire.[Set] where [Key] = @key''", span="269-269"];
m12_183 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="IClientFilter.cs", label="AcquireSetLock()", span="271-271"];
m12_185 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveSet(string)", span="265-265"];
m12_93 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="163-163"];
m12_94 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="IClientFilter.cs", label="AddToSet(key, value, 0.0)", span="165-165"];
m12_95 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string)", span="163-163"];
m12_31 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="341-341"];
m12_249 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="IClientFilter.cs", label="_commandQueue.Enqueue(action)", span="343-343"];
m12_250 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.QueueCommand(System.Action<SqlConnection>)", span="341-341"];
m12_58 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="127-127"];
m12_59 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="IClientFilter.cs", label="var provider = _queueProviders.GetProvider(queue)", span="129-129"];
m12_61 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="IClientFilter.cs", label="QueueCommand(_ => persistentQueue.Enqueue(queue, jobId))", span="132-132"];
m12_60 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="IClientFilter.cs", label="var persistentQueue = provider.GetJobQueue(_connection)", span="130-130"];
m12_62 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToQueue(string, string)", span="127-127"];
m12_75 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="142-142"];
m12_76 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="144-146"];
m12_77 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.IncrementCounter(string, System.TimeSpan)", span="142-142"];
m12_20 [cluster="Unk.EnlistTransaction", file="IClientFilter.cs", label="Entry Unk.EnlistTransaction", span=""];
m12_23 [cluster="System.Action<T>.Invoke(T)", file="IClientFilter.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m12_136 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="224-224"];
m12_137 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="IClientFilter.cs", label="key == null", span="226-226"];
m12_139 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="IClientFilter.cs", label="keyValuePairs == null", span="227-227"];
m12_143 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                sql,\r\n                keyValuePairs.Select(y => new { key = key, field = y.Key, value = y.Value })))", span="237-239"];
m12_138 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="IClientFilter.cs", label="throw new ArgumentNullException(''key'');", span="226-226"];
m12_140 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="IClientFilter.cs", label="throw new ArgumentNullException(''keyValuePairs'');", span="227-227"];
m12_141 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="IClientFilter.cs", label="string sql = @''\r\n;merge HangFire.Hash with (holdlock) as Target\r\nusing (VALUES (@key, @field, @value)) as Source ([Key], Field, Value)\r\non Target.[Key] = Source.[Key] and Target.Field = Source.Field\r\nwhen matched then update set Value = Source.Value\r\nwhen not matched then insert ([Key], Field, Value) values (Source.[Key], Source.Field, Source.Value);''", span="229-234"];
m12_142 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="IClientFilter.cs", label="AcquireHashLock()", span="236-236"];
m12_144 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.SetRangeInHash(string, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>)", span="224-224"];
m12_265 [cluster="TransactionScope.cstr", file="IClientFilter.cs", label="Entry TransactionScope.cstr", span=""];
m12_96 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="168-168"];
m12_97 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="IClientFilter.cs", label="string addSql = @''\r\n;merge HangFire.[Set] with (holdlock) as Target\r\nusing (VALUES (@key, @value, @score)) as Source ([Key], Value, Score)\r\non Target.[Key] = Source.[Key] and Target.Value = Source.Value\r\nwhen matched then update set Score = Source.Score\r\nwhen not matched then insert ([Key], Value, Score) values (Source.[Key], Source.Value, Source.Score);''", span="170-175"];
m12_99 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                addSql,\r\n                new { key, value, score }))", span="178-180"];
m12_98 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="IClientFilter.cs", label="AcquireSetLock()", span="177-177"];
m12_100 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddToSet(string, string, double)", span="168-168"];
m12_153 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="242-242"];
m12_154 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="IClientFilter.cs", label="key == null", span="244-244"];
m12_158 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(query, new { key }))", span="249-249"];
m12_155 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="IClientFilter.cs", label="throw new ArgumentNullException(''key'');", span="244-244"];
m12_156 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="IClientFilter.cs", label="string query = @''delete from HangFire.Hash where [Key] = @key''", span="246-246"];
m12_157 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="IClientFilter.cs", label="AcquireHashLock()", span="248-248"];
m12_159 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveHash(string)", span="242-242"];
m12_24 [cluster="Unk.Complete", file="IClientFilter.cs", label="Entry Unk.Complete", span=""];
m12_35 [cluster="System.DateTime.Add(System.TimeSpan)", file="IClientFilter.cs", label="Entry System.DateTime.Add(System.TimeSpan)", span="0-0"];
m12_36 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="82-82"];
m12_37 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId }))", span="84-86"];
m12_38 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistJob(string)", span="82-82"];
m12_19 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", span="366-366"];
m12_263 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", file="IClientFilter.cs", label="return isolationLevel != null\r\n                ? new TransactionScope(TransactionScopeOption.Required,\r\n                    new TransactionOptions { IsolationLevel = isolationLevel.Value })\r\n                : new TransactionScope();", span="368-371"];
m12_264 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.CreateTransaction(IsolationLevel?)", span="366-366"];
m12_189 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="275-275"];
m12_190 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="IClientFilter.cs", label="key == null", span="277-277"];
m12_194 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) }))", span="283-283"];
m12_191 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="IClientFilter.cs", label="throw new ArgumentNullException(''key'');", span="277-277"];
m12_192 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="IClientFilter.cs", label="string query = @''\r\nupdate HangFire.[Hash] set ExpireAt = @expireAt where [Key] = @key''", span="279-280"];
m12_193 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="IClientFilter.cs", label="AcquireHashLock()", span="282-282"];
m12_195 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireHash(string, System.TimeSpan)", span="275-275"];
m12_50 [cluster="Hangfire.Common.JobHelper.ToJson(object)", file="IClientFilter.cs", label="Entry Hangfire.Common.JobHelper.ToJson(object)", span="32-32"];
m12_266 [cluster="TransactionOptions.cstr", file="IClientFilter.cs", label="Entry TransactionOptions.cstr", span=""];
m12_28 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="75-75"];
m12_29 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId }))", span="77-79"];
m12_30 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.ExpireJob(string, System.TimeSpan)", span="75-75"];
m12_246 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="338-338"];
m12_25 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="63-63"];
m12_26 [cluster="lambda expression", file="IClientFilter.cs", label="new { resource = x }", span="63-63"];
m12_27 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="63-63"];
m12_33 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = @expireAt where Id = @id'',\r\n                new { expireAt = DateTime.UtcNow.Add(expireIn), id = jobId })", span="77-79"];
m12_32 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="77-79"];
m12_34 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="77-79"];
m12_40 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                @''update HangFire.Job set ExpireAt = NULL where Id = @id'',\r\n                new { id = jobId })", span="84-86"];
m12_39 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="84-86"];
m12_41 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="84-86"];
m12_47 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                addAndSetStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId,\r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow,\r\n                    data = JobHelper.ToJson(state.SerializeData()),\r\n                    id = jobId\r\n                })", span="96-106"];
m12_46 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="96-106"];
m12_48 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="96-106"];
m12_56 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                addStateSql,\r\n                new\r\n                {\r\n                    jobId = jobId, \r\n                    name = state.Name,\r\n                    reason = state.Reason,\r\n                    createdAt = DateTime.UtcNow, \r\n                    data = JobHelper.ToJson(state.SerializeData())\r\n                })", span="115-124"];
m12_55 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="115-124"];
m12_57 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="115-124"];
m12_66 [cluster="lambda expression", file="IClientFilter.cs", label="persistentQueue.Enqueue(queue, jobId)", span="132-132"];
m12_65 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="132-132"];
m12_67 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="132-132"];
m12_73 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = +1 })", span="137-139"];
m12_72 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="137-139"];
m12_74 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="137-139"];
m12_79 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = +1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="144-146"];
m12_78 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="144-146"];
m12_80 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="144-146"];
m12_85 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value]) values (@key, @value)'',\r\n                new { key, value = -1 })", span="151-153"];
m12_84 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="151-153"];
m12_86 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="151-153"];
m12_91 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                @''insert into HangFire.Counter ([Key], [Value], [ExpireAt]) values (@key, @value, @expireAt)'',\r\n                new { key, value = -1, expireAt = DateTime.UtcNow.Add(expireIn) })", span="158-160"];
m12_90 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="158-160"];
m12_92 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="158-160"];
m12_103 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                addSql,\r\n                new { key, value, score })", span="178-180"];
m12_102 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="178-180"];
m12_104 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="178-180"];
m12_111 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                query,\r\n                new { key, value })", span="188-190"];
m12_110 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="188-190"];
m12_112 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="188-190"];
m12_119 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value);'',\r\n                new { key, value })", span="196-198"];
m12_118 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="196-198"];
m12_120 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="196-198"];
m12_126 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value })", span="204-206"];
m12_125 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="204-206"];
m12_127 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="204-206"];
m12_134 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 })", span="219-221"];
m12_133 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="219-221"];
m12_135 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="219-221"];
m12_148 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(\r\n                sql,\r\n                keyValuePairs.Select(y => new { key = key, field = y.Key, value = y.Value }))", span="237-239"];
m12_151 [cluster="lambda expression", file="IClientFilter.cs", label="new { key = key, field = y.Key, value = y.Value }", span="239-239"];
m12_147 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="237-239"];
m12_149 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="237-239"];
m12_150 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="239-239"];
m12_152 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="239-239"];
m12_161 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(query, new { key })", span="249-249"];
m12_160 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="249-249"];
m12_162 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="249-249"];
m12_173 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(query, items.Select(value => new { key = key, value = value }).ToList())", span="262-262"];
m12_177 [cluster="lambda expression", file="IClientFilter.cs", label="new { key = key, value = value }", span="262-262"];
m12_172 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="262-262"];
m12_174 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="262-262"];
m12_176 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="262-262"];
m12_178 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="262-262"];
m12_187 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(query, new { key = key })", span="272-272"];
m12_186 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="272-272"];
m12_188 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="272-272"];
m12_197 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) })", span="283-283"];
m12_196 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="283-283"];
m12_198 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="283-283"];
m12_207 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) })", span="294-294"];
m12_206 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="294-294"];
m12_208 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="294-294"];
m12_217 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(query, new { key = key, expireAt = DateTime.UtcNow.Add(expireIn) })", span="305-305"];
m12_216 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="305-305"];
m12_218 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="305-305"];
m12_227 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(query, new { key = key })", span="316-316"];
m12_226 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="316-316"];
m12_228 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="316-316"];
m12_237 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(query, new { key = key })", span="327-327"];
m12_236 [cluster="lambda expression", file="IClientFilter.cs", label="Entry lambda expression", span="327-327"];
m12_238 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="327-327"];
m12_247 [cluster="lambda expression", file="IClientFilter.cs", label="x.Execute(query, new { key = key })", span="338-338"];
m12_248 [cluster="lambda expression", file="IClientFilter.cs", label="Exit lambda expression", span="338-338"];
m12_163 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="252-252"];
m12_164 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="IClientFilter.cs", label="key == null", span="254-254"];
m12_166 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="IClientFilter.cs", label="items == null", span="255-255"];
m12_170 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(query, items.Select(value => new { key = key, value = value }).ToList()))", span="262-262"];
m12_165 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="IClientFilter.cs", label="throw new ArgumentNullException(''key'');", span="254-254"];
m12_167 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="IClientFilter.cs", label="throw new ArgumentNullException(''items'');", span="255-255"];
m12_168 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="IClientFilter.cs", label="string query = @''\r\ninsert into HangFire.[Set] ([Key], Value, Score)\r\nvalues (@key, @value, 0.0)''", span="257-259"];
m12_169 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="IClientFilter.cs", label="AcquireSetLock()", span="261-261"];
m12_171 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AddRangeToSet(string, System.Collections.Generic.IList<string>)", span="252-252"];
m12_21 [cluster="Unk.Select", file="IClientFilter.cs", label="Entry Unk.Select", span=""];
m12_262 [cluster="System.Collections.Generic.SortedSet<T>.Add(T)", file="IClientFilter.cs", label="Entry System.Collections.Generic.SortedSet<T>.Add(T)", span="0-0"];
m12_175 [cluster="Unk.ToList", file="IClientFilter.cs", label="Entry Unk.ToList", span=""];
m12_22 [cluster="Unk.Execute", file="IClientFilter.cs", label="Entry Unk.Execute", span=""];
m12_64 [cluster="Unk.GetJobQueue", file="IClientFilter.cs", label="Entry Unk.GetJobQueue", span=""];
m12_146 [cluster="Unk.QueueCommand", file="IClientFilter.cs", label="Entry Unk.QueueCommand", span=""];
m12_121 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="201-201"];
m12_122 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="IClientFilter.cs", label="AcquireListLock()", span="203-203"];
m12_123 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                @''delete from HangFire.List where [Key] = @key and Value = @value'',\r\n                new { key, value }))", span="204-206"];
m12_124 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.RemoveFromList(string, string)", span="201-201"];
m12_117 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", span="346-346"];
m12_252 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="IClientFilter.cs", label="AcquireLock(String.Format(''Hangfire:List:Lock''))", span="348-348"];
m12_253 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.AcquireListLock()", span="346-346"];
m12_219 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="308-308"];
m12_220 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="IClientFilter.cs", label="key == null", span="310-310"];
m12_224 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(query, new { key = key }))", span="316-316"];
m12_221 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="IClientFilter.cs", label="throw new ArgumentNullException(''key'');", span="310-310"];
m12_222 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="IClientFilter.cs", label="string query = @''\r\nupdate HangFire.Hash set ExpireAt = null where [Key] = @key''", span="312-313"];
m12_223 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="IClientFilter.cs", label="AcquireHashLock()", span="315-315"];
m12_225 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.PersistHash(string)", span="308-308"];
m12_113 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="193-193"];
m12_114 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="IClientFilter.cs", label="AcquireListLock()", span="195-195"];
m12_115 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                @''insert into HangFire.List ([Key], Value) values (@key, @value);'',\r\n                new { key, value }))", span="196-198"];
m12_116 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.InsertToList(string, string)", span="193-193"];
m12_128 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="IClientFilter.cs", label="Entry Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="209-209"];
m12_129 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="IClientFilter.cs", label="string trimSql = @''\r\n;with cte as (\r\n    select row_number() over (order by Id desc) as row_num, [Key] \r\n    from HangFire.List\r\n    where [Key] = @key)\r\ndelete from cte where row_num not between @start and @end''", span="211-216"];
m12_131 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="IClientFilter.cs", label="QueueCommand(x => x.Execute(\r\n                trimSql,\r\n                new { key = key, start = keepStartingFrom + 1, end = keepEndingAt + 1 }))", span="219-221"];
m12_130 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="IClientFilter.cs", label="AcquireListLock()", span="218-218"];
m12_132 [cluster="Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", file="IClientFilter.cs", label="Exit Hangfire.SqlServer.SqlServerWriteOnlyTransaction.TrimList(string, int, int)", span="209-209"];
m12_267 [file="IClientFilter.cs", label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", span=""];
m12_268 [file="IClientFilter.cs", label=string, span=""];
m12_269 [file="IClientFilter.cs", label="System.TimeSpan", span=""];
m12_270 [file="IClientFilter.cs", label=string, span=""];
m12_271 [file="IClientFilter.cs", label=string, span=""];
m12_272 [file="IClientFilter.cs", label="Hangfire.States.IState", span=""];
m12_273 [file="IClientFilter.cs", label=addAndSetStateSql, span=""];
m12_274 [file="IClientFilter.cs", label=string, span=""];
m12_275 [file="IClientFilter.cs", label="Hangfire.States.IState", span=""];
m12_276 [file="IClientFilter.cs", label=addStateSql, span=""];
m12_277 [file="IClientFilter.cs", label=string, span=""];
m12_278 [file="IClientFilter.cs", label=string, span=""];
m12_279 [file="IClientFilter.cs", label=persistentQueue, span=""];
m12_280 [file="IClientFilter.cs", label=string, span=""];
m12_281 [file="IClientFilter.cs", label=string, span=""];
m12_282 [file="IClientFilter.cs", label="System.TimeSpan", span=""];
m12_283 [file="IClientFilter.cs", label=string, span=""];
m12_284 [file="IClientFilter.cs", label=string, span=""];
m12_285 [file="IClientFilter.cs", label="System.TimeSpan", span=""];
m12_286 [file="IClientFilter.cs", label=string, span=""];
m12_287 [file="IClientFilter.cs", label=string, span=""];
m12_288 [file="IClientFilter.cs", label=double, span=""];
m12_289 [file="IClientFilter.cs", label=addSql, span=""];
m12_290 [file="IClientFilter.cs", label=string, span=""];
m12_291 [file="IClientFilter.cs", label=string, span=""];
m12_292 [file="IClientFilter.cs", label=query, span=""];
m12_293 [file="IClientFilter.cs", label=string, span=""];
m12_294 [file="IClientFilter.cs", label=string, span=""];
m12_295 [file="IClientFilter.cs", label=string, span=""];
m12_296 [file="IClientFilter.cs", label=string, span=""];
m12_297 [file="IClientFilter.cs", label=string, span=""];
m12_298 [file="IClientFilter.cs", label=int, span=""];
m12_299 [file="IClientFilter.cs", label=int, span=""];
m12_300 [file="IClientFilter.cs", label=trimSql, span=""];
m12_301 [file="IClientFilter.cs", label=string, span=""];
m12_302 [file="IClientFilter.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", span=""];
m12_303 [file="IClientFilter.cs", label=sql, span=""];
m12_304 [file="IClientFilter.cs", label=string, span=""];
m12_305 [file="IClientFilter.cs", label=query, span=""];
m12_306 [file="IClientFilter.cs", label=string, span=""];
m12_307 [file="IClientFilter.cs", label="System.Collections.Generic.IList<string>", span=""];
m12_308 [file="IClientFilter.cs", label=query, span=""];
m12_309 [file="IClientFilter.cs", label=string, span=""];
m12_310 [file="IClientFilter.cs", label=query, span=""];
m12_311 [file="IClientFilter.cs", label=string, span=""];
m12_312 [file="IClientFilter.cs", label="System.TimeSpan", span=""];
m12_313 [file="IClientFilter.cs", label=query, span=""];
m12_314 [file="IClientFilter.cs", label=string, span=""];
m12_315 [file="IClientFilter.cs", label="System.TimeSpan", span=""];
m12_316 [file="IClientFilter.cs", label=query, span=""];
m12_317 [file="IClientFilter.cs", label=string, span=""];
m12_318 [file="IClientFilter.cs", label="System.TimeSpan", span=""];
m12_319 [file="IClientFilter.cs", label=query, span=""];
m12_320 [file="IClientFilter.cs", label=string, span=""];
m12_321 [file="IClientFilter.cs", label=query, span=""];
m12_322 [file="IClientFilter.cs", label=string, span=""];
m12_323 [file="IClientFilter.cs", label=query, span=""];
m12_324 [file="IClientFilter.cs", label=string, span=""];
m12_325 [file="IClientFilter.cs", label=query, span=""];
m14_0 [cluster="HangFire.Filters.IServerExceptionFilter.OnServerException(HangFire.Filters.ServerExceptionContext)", file="IServerExceptionFilter.cs", label="Entry HangFire.Filters.IServerExceptionFilter.OnServerException(HangFire.Filters.ServerExceptionContext)", span="4-4"];
m14_1 [cluster="HangFire.Filters.IServerExceptionFilter.OnServerException(HangFire.Filters.ServerExceptionContext)", file="IServerExceptionFilter.cs", label="Exit HangFire.Filters.IServerExceptionFilter.OnServerException(HangFire.Filters.ServerExceptionContext)", span="4-4"];
m15_0 [cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="IServerFilter.cs", label="Entry HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="4-4"];
m15_1 [cluster="HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="IServerFilter.cs", label="Exit HangFire.Filters.IServerFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="4-4"];
m15_2 [cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="IServerFilter.cs", label="Entry HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="5-5"];
m15_3 [cluster="HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="IServerFilter.cs", label="Exit HangFire.Filters.IServerFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="5-5"];
m16_2 [cluster="HangFire.Filters.IStateChangedFilter.OnStateUnapplied(IRedisTransaction, string, string)", file="IStateChangedFilter.cs", label="Entry HangFire.Filters.IStateChangedFilter.OnStateUnapplied(IRedisTransaction, string, string)", span="8-8"];
m16_3 [cluster="HangFire.Filters.IStateChangedFilter.OnStateUnapplied(IRedisTransaction, string, string)", file="IStateChangedFilter.cs", label="Exit HangFire.Filters.IStateChangedFilter.OnStateUnapplied(IRedisTransaction, string, string)", span="8-8"];
m16_0 [cluster="HangFire.Filters.IStateChangedFilter.OnStateApplied(IRedisTransaction, string, HangFire.States.JobState)", file="IStateChangedFilter.cs", label="Entry HangFire.Filters.IStateChangedFilter.OnStateApplied(IRedisTransaction, string, HangFire.States.JobState)", span="7-7"];
m16_1 [cluster="HangFire.Filters.IStateChangedFilter.OnStateApplied(IRedisTransaction, string, HangFire.States.JobState)", file="IStateChangedFilter.cs", label="Exit HangFire.Filters.IStateChangedFilter.OnStateApplied(IRedisTransaction, string, HangFire.States.JobState)", span="7-7"];
m17_0 [cluster="HangFire.Filters.IStateChangingFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="IStateChangingFilter.cs", label="Entry HangFire.Filters.IStateChangingFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="7-7"];
m17_1 [cluster="HangFire.Filters.IStateChangingFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", file="IStateChangingFilter.cs", label="Exit HangFire.Filters.IStateChangingFilter.OnStateChanging(IRedisClient, string, HangFire.States.JobState)", span="7-7"];
m19_51 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="JobClient.feature.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="57-57"];
m19_52 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="JobClient.feature.cs", label="var scheduler = CreateScheduler()", span="59-59"];
m19_53 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="JobClient.feature.cs", label="scheduler.Execute(_cts.Token)", span="61-61"];
m19_54 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="JobClient.feature.cs", label="_storage.Verify(x => x.GetConnection())", span="63-63"];
m19_55 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="JobClient.feature.cs", label="_connection.Verify(x => x.Dispose())", span="64-64"];
m19_56 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", file="JobClient.feature.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_TakesConnectionAndDisposesIt()", span="57-57"];
m19_16 [cluster="Mock<IStateMachineFactory>.cstr", file="JobClient.feature.cs", label="Entry Mock<IStateMachineFactory>.cstr", span=""];
m19_39 [cluster="Unk.Equal", file="JobClient.feature.cs", label="Entry Unk.Equal", span=""];
m19_35 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobClient.feature.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m19_36 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobClient.feature.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan))", span="39-41"];
m19_37 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobClient.feature.cs", label="Assert.Equal(''storage'', exception.ParamName)", span="43-43"];
m19_38 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", file="JobClient.feature.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStorageIsNull()", span="37-37"];
m19_15 [cluster="System.Threading.CancellationTokenSource.Cancel()", file="JobClient.feature.cs", label="Entry System.Threading.CancellationTokenSource.Cancel()", span="0-0"];
m19_22 [cluster="Unk.>", file="JobClient.feature.cs", label="Entry Unk.>", span=""];
m19_76 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="JobClient.feature.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="81-81"];
m19_77 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="JobClient.feature.cs", label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns((string)null)", span="83-84"];
m19_78 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="JobClient.feature.cs", label="var scheduler = CreateScheduler()", span="85-85"];
m19_79 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="JobClient.feature.cs", label="scheduler.Execute(_cts.Token)", span="87-87"];
m19_80 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="JobClient.feature.cs", label="_stateMachine.Verify(\r\n                x => x.TryToChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>()),\r\n                Times.Never)", span="89-91"];
m19_81 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", file="JobClient.feature.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_DoesNotCallStateMachine_IfThereAreNoJobsToEnqueue()", span="81-81"];
m19_43 [cluster="SchedulePoller.cstr", file="JobClient.feature.cs", label="Entry SchedulePoller.cstr", span=""];
m19_44 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="JobClient.feature.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="47-47"];
m19_45 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="JobClient.feature.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan))", span="49-51"];
m19_46 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="JobClient.feature.cs", label="Assert.Equal(''stateMachineFactory'', exception.ParamName)", span="53-53"];
m19_47 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", file="JobClient.feature.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Ctor_ThrowsAnException_WhenStateMachineFactoryIsNull()", span="47-47"];
m19_31 [cluster="Unk.GetFirstByLowestScoreFromSet", file="JobClient.feature.cs", label="Entry Unk.GetFirstByLowestScoreFromSet", span=""];
m19_27 [cluster="Unk.GetConnection", file="JobClient.feature.cs", label="Entry Unk.GetConnection", span=""];
m19_67 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="JobClient.feature.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68"];
m19_68 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="JobClient.feature.cs", label="var scheduler = CreateScheduler()", span="70-70"];
m19_69 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="JobClient.feature.cs", label="scheduler.Execute(_cts.Token)", span="72-72"];
m19_70 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="JobClient.feature.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName }))", span="74-77"];
m19_71 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", file="JobClient.feature.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.Execute_MovesJobStateToEnqueued()", span="68-68"];
m19_17 [cluster="Unk.Setup", file="JobClient.feature.cs", label="Entry Unk.Setup", span=""];
m19_66 [cluster="Unk.Dispose", file="JobClient.feature.cs", label="Entry Unk.Dispose", span=""];
m19_14 [cluster="System.Threading.CancellationTokenSource.CancellationTokenSource()", file="JobClient.feature.cs", label="Entry System.Threading.CancellationTokenSource.CancellationTokenSource()", span="0-0"];
m19_0 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="JobClient.feature.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19"];
m19_1 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="JobClient.feature.cs", label="_storage = new Mock<JobStorage>()", span="21-21"];
m19_2 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="JobClient.feature.cs", label="_connection = new Mock<IStorageConnection>()", span="22-22"];
m19_3 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="JobClient.feature.cs", label="_stateMachine = new Mock<IStateMachine>()", span="23-23"];
m19_4 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="JobClient.feature.cs", label="_cts = new CancellationTokenSource()", span="24-24"];
m19_5 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="JobClient.feature.cs", label="_cts.Cancel()", span="25-25"];
m19_6 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="JobClient.feature.cs", label="_stateMachineFactory = new Mock<IStateMachineFactory>()", span="27-27"];
m19_7 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="JobClient.feature.cs", label="_stateMachineFactory.Setup(x => x.Create(It.IsNotNull<IStorageConnection>()))\r\n                .Returns(_stateMachine.Object)", span="28-29"];
m19_8 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="JobClient.feature.cs", label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="31-31"];
m19_9 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="JobClient.feature.cs", label="_connection.Setup(x => x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))).Returns(JobId)", span="32-33"];
m19_10 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", file="JobClient.feature.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.SchedulePollerFacts()", span="19-19"];
m19_75 [cluster="Unk.TryToChangeState", file="JobClient.feature.cs", label="Entry Unk.TryToChangeState", span=""];
m19_85 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="84-84"];
m19_19 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="28-28"];
m19_24 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="31-31"];
m19_28 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="32-33"];
m19_20 [cluster="lambda expression", file="JobClient.feature.cs", label="x.Create(It.IsNotNull<IStorageConnection>())", span="28-28"];
m19_21 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="28-28"];
m19_25 [cluster="lambda expression", file="JobClient.feature.cs", label="x.GetConnection()", span="31-31"];
m19_26 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="31-31"];
m19_29 [cluster="lambda expression", file="JobClient.feature.cs", label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="32-33"];
m19_30 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="32-33"];
m19_32 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="33-33"];
m19_33 [cluster="lambda expression", file="JobClient.feature.cs", label="time > 0", span="33-33"];
m19_34 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="33-33"];
m19_40 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="40-41"];
m19_41 [cluster="lambda expression", file="JobClient.feature.cs", label="new SchedulePoller(\r\n                    null, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan)", span="40-41"];
m19_42 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="40-41"];
m19_48 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="50-51"];
m19_49 [cluster="lambda expression", file="JobClient.feature.cs", label="new SchedulePoller(\r\n                    _storage.Object, null, Timeout.InfiniteTimeSpan)", span="50-51"];
m19_50 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="50-51"];
m19_60 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="63-63"];
m19_63 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="64-64"];
m19_61 [cluster="lambda expression", file="JobClient.feature.cs", label="x.GetConnection()", span="63-63"];
m19_62 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="63-63"];
m19_64 [cluster="lambda expression", file="JobClient.feature.cs", label="x.Dispose()", span="64-64"];
m19_65 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="64-64"];
m19_72 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="74-77"];
m19_73 [cluster="lambda expression", file="JobClient.feature.cs", label="x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<EnqueuedState>(),\r\n                new[] { ScheduledState.StateName })", span="74-77"];
m19_74 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="74-77"];
m19_82 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="83-84"];
m19_88 [cluster="lambda expression", file="JobClient.feature.cs", label="Entry lambda expression", span="90-90"];
m19_83 [cluster="lambda expression", file="JobClient.feature.cs", label="x.GetFirstByLowestScoreFromSet(\r\n                ''schedule'', 0, It.Is<double>(time => time > 0))", span="83-84"];
m19_84 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="83-84"];
m19_86 [cluster="lambda expression", file="JobClient.feature.cs", label="time > 0", span="84-84"];
m19_87 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="84-84"];
m19_89 [cluster="lambda expression", file="JobClient.feature.cs", label="x.TryToChangeState(It.IsAny<string>(), It.IsAny<IState>(), It.IsAny<string[]>())", span="90-90"];
m19_90 [cluster="lambda expression", file="JobClient.feature.cs", label="Exit lambda expression", span="90-90"];
m19_59 [cluster="Unk.Verify", file="JobClient.feature.cs", label="Entry Unk.Verify", span=""];
m19_13 [cluster="Mock<IStateMachine>.cstr", file="JobClient.feature.cs", label="Entry Mock<IStateMachine>.cstr", span=""];
m19_23 [cluster="Unk.Create", file="JobClient.feature.cs", label="Entry Unk.Create", span=""];
m19_18 [cluster="Unk.Returns", file="JobClient.feature.cs", label="Entry Unk.Returns", span=""];
m19_12 [cluster="Mock<IStorageConnection>.cstr", file="JobClient.feature.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m19_11 [cluster="Mock<JobStorage>.cstr", file="JobClient.feature.cs", label="Entry Mock<JobStorage>.cstr", span=""];
m19_58 [cluster="Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", file="JobClient.feature.cs", label="Entry Hangfire.Server.SchedulePoller.Execute(System.Threading.CancellationToken)", span="47-47"];
m19_57 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="JobClient.feature.cs", label="Entry Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="94-94"];
m19_91 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="JobClient.feature.cs", label="return new SchedulePoller(_storage.Object, _stateMachineFactory.Object, Timeout.InfiniteTimeSpan);", span="96-96"];
m19_92 [cluster="Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", file="JobClient.feature.cs", label="Exit Hangfire.Core.Tests.Server.SchedulePollerFacts.CreateScheduler()", span="94-94"];
m19_93 [file="JobClient.feature.cs", label="Hangfire.Core.Tests.Server.SchedulePollerFacts", span=""];
m20_0 [cluster="Hangfire.States.IStateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="JobClientSteps.cs", label="Entry Hangfire.States.IStateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="23-23"];
m20_1 [cluster="Hangfire.States.IStateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", file="JobClientSteps.cs", label="Exit Hangfire.States.IStateMachine.CreateInState(Hangfire.Common.Job, System.Collections.Generic.IDictionary<string, string>, Hangfire.States.IState)", span="23-23"];
m20_2 [cluster="Hangfire.States.IStateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="JobClientSteps.cs", label="Entry Hangfire.States.IStateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", span="24-24"];
m20_3 [cluster="Hangfire.States.IStateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", file="JobClientSteps.cs", label="Exit Hangfire.States.IStateMachine.TryToChangeState(string, Hangfire.States.IState, string[])", span="24-24"];
m21_201 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="242-242"];
m21_202 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFilter.cs", label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData { LoadException = new JobLoadException() })", span="245-246"];
m21_203 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFilter.cs", label="var worker = CreateWorker()", span="248-248"];
m21_204 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFilter.cs", label="worker.Execute(_token)", span="251-251"];
m21_205 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFilter.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>()))", span="254-257"];
m21_206 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasJobLoadException()", span="242-242"];
m21_93 [cluster="Unk.DeleteJobFromQueue", file="JobFilter.cs", label="Entry Unk.DeleteJobFromQueue", span=""];
m21_60 [cluster="Unk.Equal", file="JobFilter.cs", label="Entry Unk.Equal", span=""];
m21_72 [cluster="HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", file="JobFilter.cs", label="Entry HangFire.Server.Worker.Execute(System.Threading.CancellationToken)", span="34-34"];
m21_24 [cluster="System.Threading.CancellationToken.CancellationToken()", file="JobFilter.cs", label="Entry System.Threading.CancellationToken.CancellationToken()", span="0-0"];
m21_94 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="98-98"];
m21_95 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFilter.cs", label="_stateMachine\r\n                .Setup(x => x.TryToChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>()))\r\n                .InSequence()\r\n                .Returns(true)", span="101-105"];
m21_96 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFilter.cs", label="_process.Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .InSequence()", span="107-108"];
m21_97 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFilter.cs", label="_stateMachine\r\n                .Setup(x => x.TryToChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>()))\r\n                .InSequence()\r\n                .Returns(true)", span="110-114"];
m21_98 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFilter.cs", label="var worker = CreateWorker()", span="116-116"];
m21_99 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFilter.cs", label="worker.Execute(_token)", span="119-119"];
m21_100 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_ExecutesDefaultWorkflow_WhenJobIsCorrect()", span="98-98"];
m21_16 [cluster="HangFire.Core.Tests.WorkerContextMock.WorkerContextMock()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.WorkerContextMock.WorkerContextMock()", span="9-9"];
m21_207 [cluster="HangFire.Common.JobLoadException.JobLoadException()", file="JobFilter.cs", label="Entry HangFire.Common.JobLoadException.JobLoadException()", span="33-33"];
m21_20 [cluster="Mock<IProcessingJob>.cstr", file="JobFilter.cs", label="Entry Mock<IProcessingJob>.cstr", span=""];
m21_108 [cluster="Unk.Run", file="JobFilter.cs", label="Entry Unk.Run", span=""];
m21_165 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="200-200"];
m21_166 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFilter.cs", label="var exception = new InvalidOperationException()", span="203-203"];
m21_167 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFilter.cs", label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(exception)", span="204-206"];
m21_170 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFilter.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>()))", span="214-217"];
m21_168 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFilter.cs", label="var worker = CreateWorker()", span="208-208"];
m21_169 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFilter.cs", label="worker.Execute(_token)", span="211-211"];
m21_171 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasInternalException()", span="200-200"];
m21_172 [cluster="System.InvalidOperationException.InvalidOperationException()", file="JobFilter.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m21_191 [cluster="HangFire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", file="JobFilter.cs", label="Entry HangFire.Server.JobPerformanceException.JobPerformanceException(string, System.Exception)", span="22-22"];
m21_38 [cluster="Unk.>", file="JobFilter.cs", label="Entry Unk.>", span=""];
m21_47 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Method()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Method()", span="265-265"];
m21_216 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Method()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Method()", span="265-265"];
m21_154 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="187-187"];
m21_155 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="JobFilter.cs", label="var worker = CreateWorker()", span="189-189"];
m21_156 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="JobFilter.cs", label="worker.Execute(_token)", span="191-191"];
m21_157 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="JobFilter.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName)))", span="193-196"];
m21_158 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToSuccessfulState_OnlyIfItIsInProcessingState()", span="187-187"];
m21_28 [cluster="Unk.GetConnection", file="JobFilter.cs", label="Entry Unk.GetConnection", span=""];
m21_101 [cluster="Unk.InSequence", file="JobFilter.cs", label="Entry Unk.InSequence", span=""];
m21_184 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="221-221"];
m21_185 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFilter.cs", label="var exception = new InvalidOperationException()", span="224-224"];
m21_186 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFilter.cs", label="_process\r\n                .Setup(x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()))\r\n                .Throws(new JobPerformanceException(''hello'', exception))", span="225-227"];
m21_189 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFilter.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>()))", span="235-238"];
m21_187 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFilter.cs", label="var worker = CreateWorker()", span="229-229"];
m21_188 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFilter.cs", label="worker.Execute(_token)", span="232-232"];
m21_190 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_MovesJob_ToFailedState_IfThereWasUserException()", span="221-221"];
m21_123 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="138-138"];
m21_124 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="JobFilter.cs", label="var worker = CreateWorker()", span="140-140"];
m21_125 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="JobFilter.cs", label="worker.Execute(_token)", span="142-142"];
m21_126 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="JobFilter.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName)))", span="144-149"];
m21_127 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_ProcessesOnlyJobs_InEnqueuedAndProcessingState()", span="138-138"];
m21_0 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="25-25"];
m21_1 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_context = new WorkerContextMock()", span="27-27"];
m21_2 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_storage = _context.SharedContext.Storage", span="28-28"];
m21_3 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_process = _context.SharedContext.PerformanceProcess", span="29-29"];
m21_4 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_connection = new Mock<IStorageConnection>()", span="31-31"];
m21_5 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_storage.Setup(x => x.GetConnection()).Returns(_connection.Object)", span="33-33"];
m21_6 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_processingJob = new Mock<IProcessingJob>()", span="35-35"];
m21_7 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_processingJob.Setup(x => x.JobId).Returns(JobId)", span="36-36"];
m21_8 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_processingJob.Setup(x => x.Queue).Returns(Queue)", span="37-37"];
m21_9 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_connection\r\n                .Setup(x => x.FetchNextJob(_context.SharedContext.Queues, It.IsNotNull<CancellationToken>()))\r\n                .Returns(_processingJob.Object)", span="39-41"];
m21_10 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_connection.Setup(x => x.GetJobData(JobId))\r\n                .Returns(new JobData\r\n                {\r\n                    Job = Job.FromExpression(() => Method()),\r\n                })", span="43-47"];
m21_11 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_stateMachine = new Mock<IStateMachine>()", span="49-49"];
m21_12 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_context.SharedContext.StateMachineFactory\r\n                .Setup(x => x.Create(_connection.Object))\r\n                .Returns(_stateMachine.Object)", span="51-53"];
m21_13 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_stateMachine.Setup(x => x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<IState>(),\r\n                It.IsAny<string[]>())).Returns(true)", span="55-58"];
m21_14 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="_token = new CancellationToken()", span="60-60"];
m21_15 [cluster="HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.WorkerFacts()", span="25-25"];
m21_18 [cluster="Unk.Setup", file="JobFilter.cs", label="Entry Unk.Setup", span=""];
m21_80 [cluster="Unk.Dispose", file="JobFilter.cs", label="Entry Unk.Dispose", span=""];
m21_134 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="153-153"];
m21_135 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFilter.cs", label="_stateMachine\r\n                .Setup(x => x.TryToChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>()))\r\n                .Returns(false)", span="156-161"];
m21_136 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFilter.cs", label="var worker = CreateWorker()", span="163-163"];
m21_137 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFilter.cs", label="worker.Execute(_token)", span="166-166"];
m21_138 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFilter.cs", label="_process.Verify(\r\n                x => x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>()),\r\n                Times.Never)", span="169-171"];
m21_139 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_DoesNotRun_PerformanceProcess_IfTransitionToProcessingStateFailed()", span="153-153"];
m21_39 [cluster="Unk.FetchNextJob", file="JobFilter.cs", label="Entry Unk.FetchNextJob", span=""];
m21_65 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="73-73"];
m21_66 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="JobFilter.cs", label="var worker = CreateWorker()", span="75-75"];
m21_67 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="JobFilter.cs", label="worker.Execute(_token)", span="77-77"];
m21_68 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="JobFilter.cs", label="_storage.Verify(x => x.GetConnection(), Times.Once)", span="79-79"];
m21_69 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="JobFilter.cs", label="_connection.Verify(x => x.Dispose(), Times.Once)", span="80-80"];
m21_70 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_TakesConnectionAndReleasesIt()", span="73-73"];
m21_173 [cluster="Unk.Throws", file="JobFilter.cs", label="Entry Unk.Throws", span=""];
m21_55 [cluster="Unk.TryToChangeState", file="JobFilter.cs", label="Entry Unk.TryToChangeState", span=""];
m21_64 [cluster="HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", file="JobFilter.cs", label="Entry HangFire.Server.Worker.Worker(HangFire.Server.WorkerContext)", span="27-27"];
m21_211 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="254-257"];
m21_25 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="33-33"];
m21_29 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="36-36"];
m21_32 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="37-37"];
m21_35 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="40-40"];
m21_40 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="43-43"];
m21_44 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="46-46"];
m21_48 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="52-52"];
m21_52 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="55-58"];
m21_26 [cluster="lambda expression", file="JobFilter.cs", label="x.GetConnection()", span="33-33"];
m21_27 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="33-33"];
m21_30 [cluster="lambda expression", file="JobFilter.cs", label="x.JobId", span="36-36"];
m21_31 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="36-36"];
m21_33 [cluster="lambda expression", file="JobFilter.cs", label="x.Queue", span="37-37"];
m21_34 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="37-37"];
m21_36 [cluster="lambda expression", file="JobFilter.cs", label="x.FetchNextJob(_context.SharedContext.Queues, It.IsNotNull<CancellationToken>())", span="40-40"];
m21_37 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="40-40"];
m21_41 [cluster="lambda expression", file="JobFilter.cs", label="x.GetJobData(JobId)", span="43-43"];
m21_42 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="43-43"];
m21_45 [cluster="lambda expression", file="JobFilter.cs", label="Method()", span="46-46"];
m21_46 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="46-46"];
m21_49 [cluster="lambda expression", file="JobFilter.cs", label="x.Create(_connection.Object)", span="52-52"];
m21_50 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="52-52"];
m21_53 [cluster="lambda expression", file="JobFilter.cs", label="x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<IState>(),\r\n                It.IsAny<string[]>())", span="55-58"];
m21_54 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="55-58"];
m21_61 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="67-67"];
m21_62 [cluster="lambda expression", file="JobFilter.cs", label="new Worker(null)", span="67-67"];
m21_63 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="67-67"];
m21_74 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="79-79"];
m21_77 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="80-80"];
m21_75 [cluster="lambda expression", file="JobFilter.cs", label="x.GetConnection()", span="79-79"];
m21_76 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="79-79"];
m21_78 [cluster="lambda expression", file="JobFilter.cs", label="x.Dispose()", span="80-80"];
m21_79 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="80-80"];
m21_87 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="91-91"];
m21_90 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="94-94"];
m21_88 [cluster="lambda expression", file="JobFilter.cs", label="x.FetchNextJob(_context.SharedContext.Queues, _token)", span="91-91"];
m21_89 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="91-91"];
m21_91 [cluster="lambda expression", file="JobFilter.cs", label="x.DeleteJobFromQueue(JobId, Queue)", span="94-94"];
m21_92 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="94-94"];
m21_102 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="102-103"];
m21_105 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="107-107"];
m21_109 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="111-112"];
m21_103 [cluster="lambda expression", file="JobFilter.cs", label="x.TryToChangeState(\r\n                    JobId, It.IsAny<ProcessingState>(), It.IsAny<string[]>())", span="102-103"];
m21_104 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="102-103"];
m21_106 [cluster="lambda expression", file="JobFilter.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="107-107"];
m21_107 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="107-107"];
m21_110 [cluster="lambda expression", file="JobFilter.cs", label="x.TryToChangeState(\r\n                    JobId, It.IsAny<SucceededState>(), It.IsAny<string[]>())", span="111-112"];
m21_111 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="111-112"];
m21_117 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="131-134"];
m21_118 [cluster="lambda expression", file="JobFilter.cs", label="x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerName == _context.Object.ServerId),\r\n                It.IsAny<string[]>())", span="131-134"];
m21_119 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="131-134"];
m21_120 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="133-133"];
m21_121 [cluster="lambda expression", file="JobFilter.cs", label="state.ServerName == _context.Object.ServerId", span="133-133"];
m21_122 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="133-133"];
m21_128 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="144-149"];
m21_129 [cluster="lambda expression", file="JobFilter.cs", label="x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<ProcessingState>(),\r\n                It.Is<string[]>(\r\n                    states => states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName))", span="144-149"];
m21_130 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="144-149"];
m21_131 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="148-149"];
m21_132 [cluster="lambda expression", file="JobFilter.cs", label="states.Length == 2 &&\r\n                        states[0] == EnqueuedState.StateName && states[1] == ProcessingState.StateName", span="148-149"];
m21_133 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="148-149"];
m21_140 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="157-160"];
m21_143 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="170-170"];
m21_141 [cluster="lambda expression", file="JobFilter.cs", label="x.TryToChangeState(\r\n                    It.IsAny<string>(),\r\n                    It.IsAny<ProcessingState>(),\r\n                    It.IsAny<string[]>())", span="157-160"];
m21_142 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="157-160"];
m21_144 [cluster="lambda expression", file="JobFilter.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="170-170"];
m21_145 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="170-170"];
m21_151 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="181-183"];
m21_152 [cluster="lambda expression", file="JobFilter.cs", label="x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>())", span="181-183"];
m21_153 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="181-183"];
m21_159 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="193-196"];
m21_160 [cluster="lambda expression", file="JobFilter.cs", label="x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.IsAny<SucceededState>(),\r\n                It.Is<string[]>(states => states.Length == 1 && states[0] == ProcessingState.StateName))", span="193-196"];
m21_161 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="193-196"];
m21_162 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="196-196"];
m21_163 [cluster="lambda expression", file="JobFilter.cs", label="states.Length == 1 && states[0] == ProcessingState.StateName", span="196-196"];
m21_164 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="196-196"];
m21_178 [cluster="lambda expression", file="JobFilter.cs", label="x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason.Contains(''Internal'')),\r\n                It.IsAny<string[]>())", span="214-217"];
m21_181 [cluster="lambda expression", file="JobFilter.cs", label="state.Exception == exception && state.Reason.Contains(''Internal'')", span="216-216"];
m21_174 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="205-205"];
m21_177 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="214-217"];
m21_175 [cluster="lambda expression", file="JobFilter.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="205-205"];
m21_176 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="205-205"];
m21_179 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="214-217"];
m21_180 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="216-216"];
m21_182 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="216-216"];
m21_196 [cluster="lambda expression", file="JobFilter.cs", label="x.TryToChangeState(\r\n                JobId,\r\n                It.Is<FailedState>(state => state.Exception == exception && state.Reason == ''hello''),\r\n                It.IsAny<string[]>())", span="235-238"];
m21_199 [cluster="lambda expression", file="JobFilter.cs", label="state.Exception == exception && state.Reason == ''hello''", span="237-237"];
m21_192 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="226-226"];
m21_195 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="235-238"];
m21_193 [cluster="lambda expression", file="JobFilter.cs", label="x.Run(It.IsAny<PerformContext>(), It.IsAny<IJobPerformer>())", span="226-226"];
m21_194 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="226-226"];
m21_197 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="235-238"];
m21_198 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="237-237"];
m21_200 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="237-237"];
m21_208 [cluster="lambda expression", file="JobFilter.cs", label="Entry lambda expression", span="245-245"];
m21_209 [cluster="lambda expression", file="JobFilter.cs", label="x.GetJobData(JobId)", span="245-245"];
m21_210 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="245-245"];
m21_212 [cluster="lambda expression", file="JobFilter.cs", label="x.TryToChangeState(\r\n                JobId,\r\n                It.IsAny<FailedState>(),\r\n                It.IsAny<string[]>())", span="254-257"];
m21_213 [cluster="lambda expression", file="JobFilter.cs", label="Exit lambda expression", span="254-257"];
m21_112 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="125-125"];
m21_113 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="JobFilter.cs", label="var worker = CreateWorker()", span="127-127"];
m21_114 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="JobFilter.cs", label="worker.Execute(_token)", span="129-129"];
m21_115 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="JobFilter.cs", label="_stateMachine.Verify(x => x.TryToChangeState(\r\n                It.IsAny<string>(),\r\n                It.Is<ProcessingState>(state => state.ServerName == _context.Object.ServerId),\r\n                It.IsAny<string[]>()))", span="131-134"];
m21_116 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_SetsCurrentServer_ToProcessingState()", span="125-125"];
m21_81 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", span="84-84"];
m21_82 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="JobFilter.cs", label="var worker = CreateWorker()", span="86-86"];
m21_83 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="JobFilter.cs", label="worker.Execute(_token)", span="88-88"];
m21_84 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="JobFilter.cs", label="_connection.Verify(\r\n                x => x.FetchNextJob(_context.SharedContext.Queues, _token),\r\n                Times.Once)", span="90-92"];
m21_85 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="JobFilter.cs", label="_connection.Verify(x => x.DeleteJobFromQueue(JobId, Queue))", span="94-94"];
m21_86 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_FetchesAJobAndDeletesItFromQueue()", span="84-84"];
m21_183 [cluster="Unk.Contains", file="JobFilter.cs", label="Entry Unk.Contains", span=""];
m21_71 [cluster="HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="260-260"];
m21_214 [cluster="HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="JobFilter.cs", label="return new Worker(_context.Object);", span="262-262"];
m21_215 [cluster="HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.CreateWorker()", span="260-260"];
m21_73 [cluster="Unk.Verify", file="JobFilter.cs", label="Entry Unk.Verify", span=""];
m21_56 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="64-64"];
m21_57 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="JobFilter.cs", label="var exception = Assert.Throws<ArgumentNullException>(\r\n                () => new Worker(null))", span="66-67"];
m21_58 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="JobFilter.cs", label="Assert.Equal(''context'', exception.ParamName)", span="69-69"];
m21_59 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Ctor_ThrowsAnException_WhenContextIsNull()", span="64-64"];
m21_21 [cluster="HangFire.Storage.JobData.JobData()", file="JobFilter.cs", label="Entry HangFire.Storage.JobData.JobData()", span="20-20"];
m21_23 [cluster="Mock<IStateMachine>.cstr", file="JobFilter.cs", label="Entry Mock<IStateMachine>.cstr", span=""];
m21_22 [cluster="HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", file="JobFilter.cs", label="Entry HangFire.Common.Job.FromExpression(System.Linq.Expressions.Expression<System.Action>)", span="116-116"];
m21_51 [cluster="Unk.Create", file="JobFilter.cs", label="Entry Unk.Create", span=""];
m21_19 [cluster="Unk.Returns", file="JobFilter.cs", label="Entry Unk.Returns", span=""];
m21_17 [cluster="Mock<IStorageConnection>.cstr", file="JobFilter.cs", label="Entry Mock<IStorageConnection>.cstr", span=""];
m21_43 [cluster="Unk.GetJobData", file="JobFilter.cs", label="Entry Unk.GetJobData", span=""];
m21_146 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="JobFilter.cs", label="Entry HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="175-175"];
m21_147 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="JobFilter.cs", label="var worker = CreateWorker()", span="177-177"];
m21_148 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="JobFilter.cs", label="worker.Execute(_token)", span="179-179"];
m21_149 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="JobFilter.cs", label="_process.Verify(x => x.Run(\r\n                It.IsNotNull<PerformContext>(),\r\n                It.IsNotNull<IJobPerformer>()))", span="181-183"];
m21_150 [cluster="HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", file="JobFilter.cs", label="Exit HangFire.Core.Tests.Server.WorkerFacts.Execute_Runs_PerformanceProcess()", span="175-175"];
m21_217 [file="JobFilter.cs", label="HangFire.Core.Tests.Server.WorkerFacts", span=""];
m21_218 [file="JobFilter.cs", label=exception, span=""];
m21_219 [file="JobFilter.cs", label=exception, span=""];
m22_8 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JobHelper.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m22_0 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="JobHelper.cs", label="Entry HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22"];
m22_1 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="JobHelper.cs", label="jobId == null", span="24-24"];
m22_3 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="JobHelper.cs", label="queue == null", span="25-25"];
m22_5 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="JobHelper.cs", label="JobId = jobId", span="27-27"];
m22_6 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="JobHelper.cs", label="Queue = queue", span="28-28"];
m22_2 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="JobHelper.cs", label="throw new ArgumentNullException(''jobId'');", span="24-24"];
m22_4 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="JobHelper.cs", label="throw new ArgumentNullException(''queue'');", span="25-25"];
m22_7 [cluster="HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", file="JobHelper.cs", label="Exit HangFire.Storage.ProcessingJob.ProcessingJob(string, string)", span="22-22"];
m22_9 [file="JobHelper.cs", label="HangFire.Storage.ProcessingJob", span=""];
m24_0 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="Entry HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", span="8-8"];
m24_1 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="var sb = new StringBuilder(request.Path)", span="10-10"];
m24_2 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="var pathInfo = request.PathInfo", span="11-11"];
m24_12 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="return basePath + link.TrimStart('/');", span="23-23"];
m24_4 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="var sbIndex = sb.Length - 1", span="13-13"];
m24_5 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="pathInfoIndex >= 0 && sb[sbIndex].Equals(pathInfo[pathInfoIndex])", span="14-14"];
m24_6 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="sb.Remove(sbIndex, 1)", span="16-16"];
m24_9 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="var basePath = sb.ToString()", span="20-20"];
m24_3 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="var pathInfoIndex = pathInfo.Length - 1", span="12-12"];
m24_8 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="pathInfoIndex--", span="18-18"];
m24_7 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="sbIndex--", span="17-17"];
m24_10 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="!basePath.EndsWith(''/'', StringComparison.OrdinalIgnoreCase)", span="21-21"];
m24_11 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="basePath += ''/''", span="21-21"];
m24_13 [cluster="HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", file="LinkHelper.cs", label="Exit HangFire.Web.LinkHelper.LinkTo(HttpRequestBase, string)", span="8-8"];
m24_19 [cluster="string.TrimStart(params char[])", file="LinkHelper.cs", label="Entry string.TrimStart(params char[])", span="0-0"];
m24_17 [cluster="System.Text.StringBuilder.ToString()", file="LinkHelper.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m24_16 [cluster="System.Text.StringBuilder.Remove(int, int)", file="LinkHelper.cs", label="Entry System.Text.StringBuilder.Remove(int, int)", span="0-0"];
m24_18 [cluster="string.EndsWith(string, System.StringComparison)", file="LinkHelper.cs", label="Entry string.EndsWith(string, System.StringComparison)", span="0-0"];
m24_14 [cluster="StringBuilder.cstr", file="LinkHelper.cs", label="Entry StringBuilder.cstr", span=""];
m24_15 [cluster="Unk.Equals", file="LinkHelper.cs", label="Entry Unk.Equals", span=""];
m25_0 [cluster="HangFire.Filters.PerformContext.PerformContext(HangFire.Filters.PerformContext)", file="PerformContext.cs", label="Entry HangFire.Filters.PerformContext.PerformContext(HangFire.Filters.PerformContext)", span="7-7"];
m25_2 [cluster="HangFire.Filters.PerformContext.PerformContext(HangFire.Filters.PerformContext)", file="PerformContext.cs", label="Exit HangFire.Filters.PerformContext.PerformContext(HangFire.Filters.PerformContext)", span="7-7"];
m25_7 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="PerformContext.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m25_3 [cluster="HangFire.Filters.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", file="PerformContext.cs", label="Entry HangFire.Filters.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", span="13-13"];
m25_6 [cluster="HangFire.Filters.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", file="PerformContext.cs", label="Exit HangFire.Filters.PerformContext.PerformContext(HangFire.Server.WorkerContext, HangFire.Server.ServerJobDescriptor)", span="13-13"];
m25_8 [file="PerformContext.cs", label="HangFire.Filters.PerformContext", span=""];
m26_0 [cluster="HangFire.Filters.PerformedContext.PerformedContext(HangFire.Filters.PerformContext, bool, System.Exception)", file="PerformedContext.cs", label="Entry HangFire.Filters.PerformedContext.PerformedContext(HangFire.Filters.PerformContext, bool, System.Exception)", span="6-6"];
m26_1 [cluster="HangFire.Filters.PerformedContext.PerformedContext(HangFire.Filters.PerformContext, bool, System.Exception)", file="PerformedContext.cs", label="Canceled = canceled", span="12-12"];
m26_2 [cluster="HangFire.Filters.PerformedContext.PerformedContext(HangFire.Filters.PerformContext, bool, System.Exception)", file="PerformedContext.cs", label="Exception = exception", span="13-13"];
m26_3 [cluster="HangFire.Filters.PerformedContext.PerformedContext(HangFire.Filters.PerformContext, bool, System.Exception)", file="PerformedContext.cs", label="Exit HangFire.Filters.PerformedContext.PerformedContext(HangFire.Filters.PerformContext, bool, System.Exception)", span="6-6"];
m26_4 [file="PerformedContext.cs", label="HangFire.Filters.PerformedContext", span=""];
m27_0 [cluster="HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", file="PerformingContext.cs", label="Entry HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", span="4-4"];
m27_1 [cluster="HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", file="PerformingContext.cs", label="Exit HangFire.Filters.PerformingContext.PerformingContext(HangFire.Filters.PerformContext)", span="4-4"];
m28_6 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="PreserveCultureFilter.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m28_8 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="Entry HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="20-20"];
m28_9 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="filterContext == null", span="22-22"];
m28_11 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="var cultureName = filterContext.JobDescriptor\r\n                .GetParameter<string>(''CurrentCulture'')", span="24-25"];
m28_12 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="var uiCultureName = filterContext.JobDescriptor\r\n                .GetParameter<string>(''CurrentUICulture'')", span="26-27"];
m28_15 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="filterContext.Items[''PreviousCulture''] = thread.CurrentCulture", span="33-33"];
m28_18 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="filterContext.Items[''PreviousUICulture''] = thread.CurrentUICulture", span="39-39"];
m28_10 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="throw new ArgumentNullException(''filterContext'');", span="22-22"];
m28_14 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="!String.IsNullOrEmpty(cultureName)", span="31-31"];
m28_16 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="thread.CurrentCulture = CultureInfo.GetCultureInfo(cultureName)", span="34-34"];
m28_13 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="var thread = Thread.CurrentThread", span="29-29"];
m28_17 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="!String.IsNullOrEmpty(uiCultureName)", span="37-37"];
m28_19 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="thread.CurrentUICulture = CultureInfo.GetCultureInfo(uiCultureName)", span="40-40"];
m28_20 [cluster="HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="PreserveCultureFilter.cs", label="Exit HangFire.PreserveCultureFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="20-20"];
m28_22 [cluster="string.IsNullOrEmpty(string)", file="PreserveCultureFilter.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m28_33 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="PreserveCultureFilter.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m28_0 [cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs", label="Entry HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", span="10-10"];
m28_1 [cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs", label="filterContext == null", span="12-12"];
m28_3 [cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs", label="filterContext.JobDescriptor.SetParameter(\r\n                ''CurrentCulture'', Thread.CurrentThread.CurrentCulture.Name)", span="14-15"];
m28_4 [cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs", label="filterContext.JobDescriptor.SetParameter(\r\n                ''CurrentUICulture'', Thread.CurrentThread.CurrentUICulture.Name)", span="16-17"];
m28_2 [cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs", label="throw new ArgumentNullException(''filterContext'');", span="12-12"];
m28_5 [cluster="HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", file="PreserveCultureFilter.cs", label="Exit HangFire.PreserveCultureFilter.OnCreating(HangFire.Filters.CreatingContext)", span="10-10"];
m28_21 [cluster="HangFire.Server.ServerJobDescriptor.GetParameter<T>(string)", file="PreserveCultureFilter.cs", label="Entry HangFire.Server.ServerJobDescriptor.GetParameter<T>(string)", span="70-70"];
m28_23 [cluster="System.Globalization.CultureInfo.GetCultureInfo(string)", file="PreserveCultureFilter.cs", label="Entry System.Globalization.CultureInfo.GetCultureInfo(string)", span="0-0"];
m28_7 [cluster="HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", file="PreserveCultureFilter.cs", label="Entry HangFire.Client.ClientJobDescriptor.SetParameter(string, object)", span="34-34"];
m28_24 [cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs", label="Entry HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="44-44"];
m28_25 [cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs", label="filterContext == null", span="46-46"];
m28_28 [cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs", label="filterContext.Items.ContainsKey(''PreviousCulture'')", span="49-49"];
m28_29 [cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs", label="thread.CurrentCulture = (CultureInfo) filterContext.Items[''PreviousCulture'']", span="51-51"];
m28_30 [cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs", label="filterContext.Items.ContainsKey(''PreviousUICulture'')", span="53-53"];
m28_31 [cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs", label="thread.CurrentUICulture = (CultureInfo) filterContext.Items[''PreviousUICulture'']", span="55-55"];
m28_26 [cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs", label="throw new ArgumentNullException(''filterContext'');", span="46-46"];
m28_27 [cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs", label="var thread = Thread.CurrentThread", span="48-48"];
m28_32 [cluster="HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="PreserveCultureFilter.cs", label="Exit HangFire.PreserveCultureFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="44-44"];
m29_0 [cluster="HangFire.Filters.ServerExceptionContext.ServerExceptionContext(HangFire.Filters.PerformContext, System.Exception)", file="ServerExceptionContext.cs", label="Entry HangFire.Filters.ServerExceptionContext.ServerExceptionContext(HangFire.Filters.PerformContext, System.Exception)", span="6-6"];
m29_1 [cluster="HangFire.Filters.ServerExceptionContext.ServerExceptionContext(HangFire.Filters.PerformContext, System.Exception)", color=green, community=0, file="ServerExceptionContext.cs", label="Exception = exception", prediction=70, span="11-11"];
m29_2 [cluster="HangFire.Filters.ServerExceptionContext.ServerExceptionContext(HangFire.Filters.PerformContext, System.Exception)", file="ServerExceptionContext.cs", label="Exit HangFire.Filters.ServerExceptionContext.ServerExceptionContext(HangFire.Filters.PerformContext, System.Exception)", span="6-6"];
m29_3 [file="ServerExceptionContext.cs", label="HangFire.Filters.ServerExceptionContext", span=""];
m31_4 [cluster="HangFire.Web.SingleResourceHandler.WriteResponse()", file="SingleResourceHandler.cs", label="Entry HangFire.Web.SingleResourceHandler.WriteResponse()", span="15-15"];
m31_5 [cluster="HangFire.Web.SingleResourceHandler.WriteResponse()", file="SingleResourceHandler.cs", label="WriteResource(_assembly, _resourceName)", span="17-17"];
m31_6 [cluster="HangFire.Web.SingleResourceHandler.WriteResponse()", file="SingleResourceHandler.cs", label="Exit HangFire.Web.SingleResourceHandler.WriteResponse()", span="15-15"];
m31_7 [cluster="HangFire.Web.EmbeddedResourceHandler.WriteResource(System.Reflection.Assembly, string)", file="SingleResourceHandler.cs", label="Entry HangFire.Web.EmbeddedResourceHandler.WriteResource(System.Reflection.Assembly, string)", span="34-34"];
m31_0 [cluster="HangFire.Web.SingleResourceHandler.SingleResourceHandler(System.Reflection.Assembly, string)", file="SingleResourceHandler.cs", label="Entry HangFire.Web.SingleResourceHandler.SingleResourceHandler(System.Reflection.Assembly, string)", span="9-9"];
m31_1 [cluster="HangFire.Web.SingleResourceHandler.SingleResourceHandler(System.Reflection.Assembly, string)", file="SingleResourceHandler.cs", label="_assembly = assembly", span="11-11"];
m31_2 [cluster="HangFire.Web.SingleResourceHandler.SingleResourceHandler(System.Reflection.Assembly, string)", file="SingleResourceHandler.cs", label="_resourceName = resourceName", span="12-12"];
m31_3 [cluster="HangFire.Web.SingleResourceHandler.SingleResourceHandler(System.Reflection.Assembly, string)", file="SingleResourceHandler.cs", label="Exit HangFire.Web.SingleResourceHandler.SingleResourceHandler(System.Reflection.Assembly, string)", span="9-9"];
m31_8 [file="SingleResourceHandler.cs", label="HangFire.Web.SingleResourceHandler", span=""];
m32_30 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label="Entry HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="64-64"];
m32_31 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", color=green, community=0, file="TestFilter.cs", label="Assert.IsNotNull(filterContext)", prediction=71, span="66-66"];
m32_32 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", color=green, community=0, file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor)", prediction=72, span="67-67"];
m32_34 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", color=green, community=0, file="TestFilter.cs", label="filterContext.Canceled = true", prediction=73, span="71-71"];
m32_33 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", color=green, community=0, file="TestFilter.cs", label=_cancelsTheCreation, prediction=74, span="69-69"];
m32_35 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnPerforming''))", span="74-74"];
m32_36 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label=_throwException, span="76-76"];
m32_37 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label="throw new Exception();", span="78-78"];
m32_38 [cluster="HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", file="TestFilter.cs", label="Exit HangFire.Tests.TestFilter.OnPerforming(HangFire.Filters.PerformingContext)", span="64-64"];
m32_21 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="TestFilter.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m32_0 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", file="TestFilter.cs", label="Entry HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", span="15-15"];
m32_1 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", file="TestFilter.cs", label="_name = name", span="22-22"];
m32_2 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", color=green, community=0, file="TestFilter.cs", label="_results = results", prediction=75, span="23-23"];
m32_3 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", color=green, community=0, file="TestFilter.cs", label="_throwException = throwException", prediction=76, span="24-24"];
m32_4 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", color=green, community=0, file="TestFilter.cs", label="_cancelsTheCreation = cancelsTheCreation", prediction=77, span="25-25"];
m32_5 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", color=green, community=0, file="TestFilter.cs", label="_handlesException = handlesException", prediction=78, span="26-26"];
m32_6 [cluster="HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", file="TestFilter.cs", label="Exit HangFire.Tests.TestFilter.TestFilter(string, System.Collections.Generic.ICollection<string>, bool, bool, bool)", span="15-15"];
m32_20 [cluster="string.Format(string, object, object)", file="TestFilter.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m32_39 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="TestFilter.cs", label="Entry HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="82-82"];
m32_40 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext)", span="84-84"];
m32_41 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor)", span="85-85"];
m32_42 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", color=green, community=0, file="TestFilter.cs", label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnPerformed'')\r\n                + (filterContext.Canceled ? '' (with the canceled flag set)'' : null))", prediction=74, span="87-88"];
m32_44 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", color=green, community=0, file="TestFilter.cs", label="filterContext.ExceptionHandled = true", prediction=80, span="92-92"];
m32_43 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", color=green, community=0, file="TestFilter.cs", label=_handlesException, prediction=74, span="90-90"];
m32_45 [cluster="HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", file="TestFilter.cs", label="Exit HangFire.Tests.TestFilter.OnPerformed(HangFire.Filters.PerformedContext)", span="82-82"];
m32_22 [cluster="System.Exception.Exception()", file="TestFilter.cs", label="Entry System.Exception.Exception()", span="0-0"];
m32_23 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="Entry HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", span="50-50"];
m32_24 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext)", span="52-52"];
m32_25 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor)", span="53-53"];
m32_26 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", color=green, community=0, file="TestFilter.cs", label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnCreated'') \r\n                + (filterContext.Canceled ? '' (with the canceled flag set)'' : null))", prediction=74, span="55-56"];
m32_28 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", color=green, community=0, file="TestFilter.cs", label="filterContext.ExceptionHandled = true", prediction=83, span="60-60"];
m32_27 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", color=green, community=0, file="TestFilter.cs", label=_handlesException, prediction=74, span="58-58"];
m32_29 [cluster="HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", file="TestFilter.cs", label="Exit HangFire.Tests.TestFilter.OnCreated(HangFire.Filters.CreatedContext)", span="50-50"];
m32_19 [cluster="Unk.IsNotNull", file="TestFilter.cs", label="Entry Unk.IsNotNull", span=""];
m32_7 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Entry HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", span="29-29"];
m32_8 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext)", span="31-31"];
m32_9 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor)", span="32-32"];
m32_10 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", color=green, community=0, file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor.JobId)", prediction=85, span="33-33"];
m32_11 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", color=green, community=0, file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor.Type)", prediction=85, span="34-34"];
m32_12 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", color=green, community=0, file="TestFilter.cs", label="Assert.IsNotNull(filterContext.JobDescriptor.State)", prediction=85, span="35-35"];
m32_14 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="filterContext.Canceled = true", span="39-39"];
m32_13 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label=_cancelsTheCreation, span="37-37"];
m32_15 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", color=green, community=0, file="TestFilter.cs", label="_results.Add(String.Format(''{0}::{1}'', _name, ''OnCreating''))", prediction=74, span="42-42"];
m32_16 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label=_throwException, span="44-44"];
m32_17 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="throw new Exception();", span="46-46"];
m32_18 [cluster="HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", file="TestFilter.cs", label="Exit HangFire.Tests.TestFilter.OnCreating(HangFire.Filters.CreatingContext)", span="29-29"];
m32_46 [file="TestFilter.cs", label="HangFire.Tests.TestFilter", span=""];
m0_106 -> m0_108  [color=green, key=1, label=table5, style=dashed];
m0_106 -> m0_109  [color=green, key=1, label=table5, style=dashed];
m0_106 -> m0_110  [color=green, key=1, label=table5, style=dashed];
m0_106 -> m0_111  [color=green, key=1, label=table5, style=dashed];
m0_106 -> m0_112  [color=green, key=1, label=table5, style=dashed];
m0_60 -> m0_65  [color=darkseagreen4, key=1, label=table2, style=dashed];
m0_60 -> m0_62  [color=darkseagreen4, key=1, label=table2, style=dashed];
m0_60 -> m0_63  [color=darkseagreen4, key=1, label=table2, style=dashed];
m0_60 -> m0_64  [color=darkseagreen4, key=1, label=table2, style=dashed];
m0_77 -> m0_79  [color=green, key=1, label=table3, style=dashed];
m0_77 -> m0_80  [color=green, key=1, label=table3, style=dashed];
m0_77 -> m0_81  [color=green, key=1, label=table3, style=dashed];
m0_135 -> m0_137  [color=darkseagreen4, key=1, label=table6, style=dashed];
m0_135 -> m0_138  [color=darkseagreen4, key=1, label=table6, style=dashed];
m0_40 -> m0_43  [color=darkseagreen4, key=1, label=table1, style=dashed];
m0_40 -> m0_42  [color=darkseagreen4, key=1, label=table1, style=dashed];
m0_151 -> m0_153  [color=green, key=1, label=table7, style=dashed];
m0_151 -> m0_154  [color=darkseagreen4, key=1, label=table7, style=dashed];
m0_151 -> m0_155  [color=darkseagreen4, key=1, label=table7, style=dashed];
m0_91 -> m0_93  [color=green, key=1, label=table4, style=dashed];
m0_91 -> m0_94  [color=green, key=1, label=table4, style=dashed];
m0_91 -> m0_95  [color=green, key=1, label=table4, style=dashed];
m0_159 -> m0_70  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_71  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_82  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_86  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_87  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_96  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_100  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_101  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_114  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_118  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_119  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_125  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_129  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_130  [color=green, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_36  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_37  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_45  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_55  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_56  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_66  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_140  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_144  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_145  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m0_159 -> m0_157  [color=darkseagreen4, key=1, label="HangFire.Tests.ClientFiltersFeature", style=dashed];
m1_0 -> m1_3  [color=green, key=1, label="Hangfire.SqlServer.SqlServerStorageOptions", style=dashed];
m1_0 -> m1_9  [color=darkseagreen4, key=1, label=IRedisClient, style=dashed];
m1_0 -> m1_12  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_24 -> m1_27  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_16 -> m1_19  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_35 -> m1_9  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m1_35 -> m1_12  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m1_35 -> m1_19  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m1_35 -> m1_27  [color=darkseagreen4, key=1, label="HangFire.Client.ClientJobDescriptor", style=dashed];
m2_11 -> m2_6  [color=darkseagreen4, key=1, label="HangFire.Web.CombinedResourceHandler", style=dashed];
m2_11 -> m2_7  [color=darkseagreen4, key=1, label="HangFire.Web.CombinedResourceHandler", style=dashed];
m4_31 -> m4_77  [color=darkseagreen4, key=1, label="Hangfire.Client.ClientExceptionContext", style=dashed];
m4_16 -> m4_20  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_19 -> m4_23  [color=darkseagreen4, key=1, label=filterInfo, style=dashed];
m4_22 -> m4_24  [color=darkseagreen4, key=1, label=exceptionContext, style=dashed];
m4_5 -> m4_9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<object>", style=dashed];
m4_9 -> m4_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_51 -> m4_54  [color=darkseagreen4, key=1, label="System.Func<Hangfire.Client.CreatedContext>", style=dashed];
m4_29 -> m4_46  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_29 -> m4_47  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_36 -> m4_54  [color=darkseagreen4, key=1, label=preContext, style=dashed];
m4_38 -> m4_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_56 -> m4_58  [color=darkseagreen4, key=1, label="Hangfire.Client.CreatingContext", style=dashed];
m4_56 -> m4_59  [color=darkseagreen4, key=1, label="Hangfire.Client.CreatingContext", style=dashed];
m4_56 -> m4_66  [color=darkseagreen4, key=1, label="Hangfire.Client.IClientFilter", style=dashed];
m4_56 -> m4_70  [color=darkseagreen4, key=1, label="Hangfire.Client.IClientFilter", style=dashed];
m4_65 -> m4_67  [color=darkseagreen4, key=1, label=postContext, style=dashed];
m4_65 -> m4_70  [color=darkseagreen4, key=1, label=postContext, style=dashed];
m4_65 -> m4_71  [color=darkseagreen4, key=1, label=postContext, style=dashed];
m4_64 -> m4_69  [color=darkseagreen4, key=1, label=wasError, style=dashed];
m4_80 -> m4_32  [color=darkseagreen4, key=1, label="Hangfire.Client.JobCreationProcess", style=dashed];
m4_81 -> m4_9  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<object>", style=dashed];
m4_82 -> m4_46  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_82 -> m4_47  [color=darkseagreen4, key=1, label="Hangfire.Client.CreateContext", style=dashed];
m4_83 -> m4_54  [color=darkseagreen4, key=1, label=preContext, style=dashed];
m4_84 -> m4_54  [color=darkseagreen4, key=1, label="System.Func<Hangfire.Client.CreatedContext>", style=dashed];
m4_85 -> m4_54  [color=darkseagreen4, key=1, label="Hangfire.Client.IClientFilter", style=dashed];
m6_2 -> m6_8  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m6_16 -> m6_13  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.StateContextMock", style=dashed];
m7_9 -> m7_7  [color=darkseagreen4, key=1, label="HangFire.Web.GenericHandler", style=dashed];
m8_12 -> m8_17  [color=green, key=1, label="HangFire.Filters.IJobFilter", style=dashed];
m8_13 -> m8_16  [color=green, key=1, label="lambda expression", style=dashed];
m8_26 -> m8_1  [color=darkseagreen4, key=1, label="HangFire.Filters.GlobalJobFilterCollection", style=dashed];
m8_26 -> m8_5  [color=darkseagreen4, key=1, label="HangFire.Filters.GlobalJobFilterCollection", style=dashed];
m8_26 -> m8_9  [color=darkseagreen4, key=1, label="HangFire.Filters.GlobalJobFilterCollection", style=dashed];
m8_26 -> m8_13  [color=green, key=1, label="HangFire.Filters.GlobalJobFilterCollection", style=dashed];
m8_26 -> m8_20  [color=darkseagreen4, key=1, label="HangFire.Filters.GlobalJobFilterCollection", style=dashed];
m8_26 -> m8_24  [color=darkseagreen4, key=1, label="HangFire.Filters.GlobalJobFilterCollection", style=dashed];
m8_27 -> m8_17  [color=green, key=1, label="HangFire.Filters.IJobFilter", style=dashed];
m12_105 -> m12_108  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_105 -> m12_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_106 -> m12_108  [color=darkseagreen4, key=1, label=query, style=dashed];
m12_106 -> m12_111  [color=darkseagreen4, key=1, label=query, style=dashed];
m12_108 -> m12_110  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_11 -> m12_17  [color=darkseagreen4, key=1, label=transaction, style=dashed];
m12_14 -> m12_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_70 -> m12_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_234 -> m12_236  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_244 -> m12_246  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_82 -> m12_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_204 -> m12_206  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_0 -> m12_3  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.PersistentJobQueueProviderCollection", style=dashed];
m12_44 -> m12_46  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_214 -> m12_216  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_53 -> m12_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_88 -> m12_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_184 -> m12_186  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_58 -> m12_61  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_58 -> m12_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_61 -> m12_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_60 -> m12_66  [color=darkseagreen4, key=1, label=persistentQueue, style=dashed];
m12_76 -> m12_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_136 -> m12_139  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>", style=dashed];
m12_143 -> m12_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_96 -> m12_99  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_96 -> m12_103  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_97 -> m12_99  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m12_97 -> m12_103  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m12_99 -> m12_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_153 -> m12_158  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_153 -> m12_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_158 -> m12_160  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_156 -> m12_158  [color=darkseagreen4, key=1, label=query, style=dashed];
m12_156 -> m12_161  [color=darkseagreen4, key=1, label=query, style=dashed];
m12_37 -> m12_39  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_194 -> m12_196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_29 -> m12_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_148 -> m12_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_173 -> m12_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_163 -> m12_166  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m12_170 -> m12_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_123 -> m12_125  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_224 -> m12_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_113 -> m12_115  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_113 -> m12_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_115 -> m12_118  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_131 -> m12_133  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m12_267 -> m12_12  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_13  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_15  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_16  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_61  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_94  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_98  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_99  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_107  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_108  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_114  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_115  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_122  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_130  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_142  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_157  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_158  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_169  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_183  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_193  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_203  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_213  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_223  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_233  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_243  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_249  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_252  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_256  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_258  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_267 -> m12_260  [color=darkseagreen4, key=1, label="Hangfire.SqlServer.SqlServerWriteOnlyTransaction", style=dashed];
m12_277 -> m12_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_278 -> m12_66  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_279 -> m12_66  [color=darkseagreen4, key=1, label=persistentQueue, style=dashed];
m12_286 -> m12_103  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_287 -> m12_103  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_288 -> m12_103  [color=darkseagreen4, key=1, label=double, style=dashed];
m12_289 -> m12_103  [color=darkseagreen4, key=1, label=addSql, style=dashed];
m12_290 -> m12_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_291 -> m12_111  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_292 -> m12_111  [color=darkseagreen4, key=1, label=query, style=dashed];
m12_293 -> m12_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_294 -> m12_119  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_304 -> m12_161  [color=darkseagreen4, key=1, label=string, style=dashed];
m12_305 -> m12_161  [color=darkseagreen4, key=1, label=query, style=dashed];
m19_54 -> m19_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_55 -> m19_63  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_36 -> m19_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_77 -> m19_82  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_80 -> m19_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_45 -> m19_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_70 -> m19_72  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_7 -> m19_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_8 -> m19_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_9 -> m19_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_29 -> m19_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_83 -> m19_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_93 -> m19_5  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_7  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_8  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_9  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_41  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_49  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_53  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_54  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_55  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_69  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_70  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_77  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_79  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_80  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m19_93 -> m19_91  [color=darkseagreen4, key=1, label="Hangfire.Core.Tests.Server.SchedulePollerFacts", style=dashed];
m21_202 -> m21_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_205 -> m21_211  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_95 -> m21_102  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_96 -> m21_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_97 -> m21_109  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_166 -> m21_170  [color=darkseagreen4, key=1, label=exception, style=dashed];
m21_166 -> m21_178  [color=darkseagreen4, key=1, label=exception, style=dashed];
m21_166 -> m21_181  [color=darkseagreen4, key=1, label=exception, style=dashed];
m21_167 -> m21_174  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_170 -> m21_177  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_157 -> m21_159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_185 -> m21_189  [color=darkseagreen4, key=1, label=exception, style=dashed];
m21_185 -> m21_196  [color=darkseagreen4, key=1, label=exception, style=dashed];
m21_185 -> m21_199  [color=darkseagreen4, key=1, label=exception, style=dashed];
m21_186 -> m21_192  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_189 -> m21_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_126 -> m21_128  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_5 -> m21_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_7 -> m21_29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_8 -> m21_32  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_9 -> m21_35  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_10 -> m21_40  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_10 -> m21_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_12 -> m21_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_13 -> m21_52  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_135 -> m21_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_138 -> m21_143  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_68 -> m21_74  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_69 -> m21_77  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_118 -> m21_120  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_129 -> m21_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_160 -> m21_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_178 -> m21_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_196 -> m21_198  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_115 -> m21_117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_84 -> m21_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_85 -> m21_90  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_57 -> m21_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_149 -> m21_151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_217 -> m21_5  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_7  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_8  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_9  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_36  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_12  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_49  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_13  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_67  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_68  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_69  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_83  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_84  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_88  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_85  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_95  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_96  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_97  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_99  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_114  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_115  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_118  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_121  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_125  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_126  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_135  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_137  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_138  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_148  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_149  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_156  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_157  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_167  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_169  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_170  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_186  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_188  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_189  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_204  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_205  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_217 -> m21_214  [color=darkseagreen4, key=1, label="HangFire.Core.Tests.Server.WorkerFacts", style=dashed];
m21_218 -> m21_178  [color=darkseagreen4, key=1, label=exception, style=dashed];
m21_218 -> m21_181  [color=darkseagreen4, key=1, label=exception, style=dashed];
m21_219 -> m21_196  [color=darkseagreen4, key=1, label=exception, style=dashed];
m21_219 -> m21_199  [color=darkseagreen4, key=1, label=exception, style=dashed];
m22_0 -> m22_3  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_0 -> m24_12  [color=darkseagreen4, key=1, label=string, style=dashed];
m24_1 -> m24_5  [color=darkseagreen4, key=1, label=sb, style=dashed];
m24_1 -> m24_6  [color=darkseagreen4, key=1, label=sb, style=dashed];
m24_2 -> m24_5  [color=darkseagreen4, key=1, label=pathInfo, style=dashed];
m24_4 -> m24_6  [color=darkseagreen4, key=1, label=sbIndex, style=dashed];
m24_4 -> m24_7  [color=darkseagreen4, key=1, label=sbIndex, style=dashed];
m24_9 -> m24_12  [color=darkseagreen4, key=1, label=basePath, style=dashed];
m24_3 -> m24_5  [color=darkseagreen4, key=1, label=pathInfoIndex, style=dashed];
m24_3 -> m24_8  [color=darkseagreen4, key=1, label=pathInfoIndex, style=dashed];
m24_8 -> m24_8  [color=darkseagreen4, key=1, label=pathInfoIndex, style=dashed];
m24_7 -> m24_7  [color=darkseagreen4, key=1, label=sbIndex, style=dashed];
m28_11 -> m28_14  [color=darkseagreen4, key=1, label=cultureName, style=dashed];
m28_12 -> m28_17  [color=darkseagreen4, key=1, label=uiCultureName, style=dashed];
m28_0 -> m28_3  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m28_0 -> m28_4  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m28_24 -> m28_28  [color=darkseagreen4, key=1, label="HangFire.Filters.PerformedContext", style=dashed];
m28_24 -> m28_30  [color=darkseagreen4, key=1, label="HangFire.Filters.PerformedContext", style=dashed];
m31_8 -> m31_5  [color=darkseagreen4, key=1, label="HangFire.Web.SingleResourceHandler", style=dashed];
m32_30 -> m32_32  [color=green, key=1, label="HangFire.Filters.PerformingContext", style=dashed];
m32_39 -> m32_41  [color=darkseagreen4, key=1, label="HangFire.Filters.PerformedContext", style=dashed];
m32_39 -> m32_42  [color=green, key=1, label="HangFire.Filters.PerformedContext", style=dashed];
m32_23 -> m32_25  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatedContext", style=dashed];
m32_23 -> m32_26  [color=green, key=1, label="HangFire.Filters.CreatedContext", style=dashed];
m32_7 -> m32_9  [color=darkseagreen4, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m32_7 -> m32_10  [color=green, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m32_7 -> m32_11  [color=green, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m32_7 -> m32_12  [color=green, key=1, label="HangFire.Filters.CreatingContext", style=dashed];
m32_46 -> m32_13  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m32_46 -> m32_15  [color=green, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m32_46 -> m32_16  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m32_46 -> m32_26  [color=green, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m32_46 -> m32_27  [color=green, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m32_46 -> m32_33  [color=green, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m32_46 -> m32_35  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m32_46 -> m32_36  [color=darkseagreen4, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m32_46 -> m32_42  [color=green, key=1, label="HangFire.Tests.TestFilter", style=dashed];
m32_46 -> m32_43  [color=green, key=1, label="HangFire.Tests.TestFilter", style=dashed];
}
